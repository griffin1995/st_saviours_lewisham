TITLE: Run Redis Stack Locally with Docker
DESCRIPTION: This command starts a Redis Stack instance locally using Docker, exposing Redis on port 6379 and RedisInsight on port 8001. It's a quick way to get a Redis environment up and running for development or testing.
SOURCE: https://github.com/redis/docs/blob/main/content/integrate/redisvl/user_guide/hash_vs_json.md#_snippet_0

LANGUAGE: bash
CODE:
```
docker run -d -p 6379:6379 -p 8001:8001 redis/redis-stack:latest
```

----------------------------------------

TITLE: Redis CLI SET Command Examples
DESCRIPTION: Basic examples demonstrating the usage of the Redis SET command with redis-cli.
SOURCE: https://github.com/redis/docs/blob/main/content/commands/set.md#_snippet_1

LANGUAGE: redis-cli
CODE:
```
SET mykey "Hello"
GET mykey

SET anotherkey "will expire in a minute" EX 60
```

----------------------------------------

TITLE: Perform Vector Search on Redis JSON Documents in C#
DESCRIPTION: This C# code snippet demonstrates how to execute a vector search query on indexed JSON documents in Redis. It highlights the use of JSON paths within "FieldName" objects for returning specific fields and notes that the query vector parameter still uses a binary string, even when the stored data is a float array.
SOURCE: https://github.com/redis/docs/blob/main/content/develop/clients/dotnet/vecsearch.md#_snippet_18

LANGUAGE: cs
CODE:
```
var jRes = db.FT().Search("vector_json_idx",
    new Query("*=>[KNN 3 @embedding $query_vec AS score]")
    .AddParam("query_vec", GetEmbedding(predEngine, "That is a happy person"))
    .ReturnFields(
        new FieldName("$.content", "content"),
        new FieldName("$.score", "score")
    )
    .SetSortBy("score")
    .Dialect(2));

foreach (var doc in jRes.Documents) {
    var props = doc.GetProperties();
    var propText = string.Join(
        ", ",
        props.Select(p => $"{p.Key}: '{p.Value}'")
    );

    Console.WriteLine(
        $"ID: {doc.Id}, Properties: [\n  {propText}\n]"
    );
}
```

----------------------------------------

TITLE: RedisJSON: Create a JSON document with JSON.SET
DESCRIPTION: Demonstrates how to create a new JSON document in Redis using the JSON.SET command, populating it with various data types including objects, arrays, strings, booleans, integers, and floats.
SOURCE: https://github.com/redis/docs/blob/main/content/commands/json.clear.md#_snippet_1

LANGUAGE: bash
CODE:
```
redis> JSON.SET doc $ '{"obj":{"a":1, "b":2}, "arr":[1,2,3], "str": "foo", "bool": true, "int": 42, "float": 3.14}'
OK
```

----------------------------------------

TITLE: Create Redis Search Index for JSON Objects
DESCRIPTION: Demonstrates how to create a RediSearch index (FT.CREATE) on JSON documents. It shows how to index individual nested JSON fields ($.connection.wireless, $.connection.type) as separate attributes (wireless TAG, connectionType TEXT) because direct indexing of JSON objects is not supported. This allows for searching on these specific nested properties.
SOURCE: https://github.com/redis/docs/blob/main/content/develop/interact/search-and-query/indexing/_index.md#_snippet_23

LANGUAGE: sql
CODE:
```
127.0.0.1:6379> FT.CREATE itemIdx3 ON JSON SCHEMA $.connection.wireless AS wireless TAG $.connection.type AS connectionType TEXT
"OK"
```

----------------------------------------

TITLE: Redis XPENDING: Filter by Specific Consumer
DESCRIPTION: Illustrates how to refine the XPENDING command's output to show only messages pending for a particular consumer. This operation is efficient due to Redis's internal data structures, even with many pending messages.
SOURCE: https://github.com/redis/docs/blob/main/content/commands/xpending.md#_snippet_4

LANGUAGE: Redis CLI
CODE:
```
> XPENDING mystream group55 - + 10 consumer-123
```

----------------------------------------

TITLE: Prefer TAG Fields for Matching
DESCRIPTION: For use cases that only require matching, it is recommended to favor TAG fields over NUMERIC or TEXT fields for better indexing and query performance.
SOURCE: https://github.com/redis/docs/blob/main/content/develop/interact/search-and-query/best-practices/scalable-query-best-practices.md#_snippet_2

LANGUAGE: APIDOC
CODE:
```
TAG
```

----------------------------------------

TITLE: Python: Implement Real-World Embedding Caching System
DESCRIPTION: This snippet demonstrates setting up an EmbeddingsCache and HFTextVectorizer to cache text embeddings. It simulates processing a stream of queries, tracking cache hits and misses to illustrate the efficiency gains of caching repeated queries. It also includes cleanup of the created cache.
SOURCE: https://github.com/redis/docs/blob/main/content/integrate/redisvl/user_guide/embeddings_cache.md#_snippet_14

LANGUAGE: python
CODE:
```
# Create a fresh cache for this example
example_cache = EmbeddingsCache(
    name="example_cache",
    redis_url="redis://localhost:6379",
    ttl=3600  # 1 hour TTL
)

vectorizer = HFTextVectorizer(
    model=model_name,
    cache=example_cache,
    cache_folder=os.getenv("SENTENCE_TRANSFORMERS_HOME")
)

# Simulate processing a stream of queries
queries = [
    "What is artificial intelligence?",
    "How does machine learning work?",
    "What is artificial intelligence?",  # Repeated query
    "What are neural networks?",
    "How does machine learning work?"   # Repeated query
]

# Process the queries and track statistics
total_queries = 0
cache_hits = 0

for query in queries:
    total_queries += 1
    
    # Check cache before computing
    before = example_cache.exists(text=query, model_name=model_name)
    if before:
        cache_hits += 1
    
    # Get embedding (will compute or use cache)
    embedding = vectorizer.embed(query)

# Report statistics
cache_misses = total_queries - cache_hits
hit_rate = (cache_hits / total_queries) * 100

print("\nStatistics:")
print(f"Total queries: {total_queries}")
print(f"Cache hits: {cache_hits}")
print(f"Cache misses: {cache_misses}")
print(f"Cache hit rate: {hit_rate:.1f}%")

# Cleanup
for query in set(queries):  # Use set to get unique queries
    example_cache.drop(text=query, model_name=model_name)
```

----------------------------------------

TITLE: Redis 8 ACL Category Extension Behavior
DESCRIPTION: Explains how existing ACL categories like `@read` and `@write` now include commands for Redis Query Engine and new data structures (JSON, time series, probabilistic), potentially broadening or narrowing access for users depending on the rule. Provides examples of command access changes.
SOURCE: https://github.com/redis/docs/blob/main/content/operate/oss_and_stack/stack-with-enterprise/release-notes/redisce/redisos-8.0-release-notes.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
Existing ACL rules such as `+@read +@write` will allow access to more commands:
  - A user with `+@read` access will be able to execute `FT.SEARCH`.
  - A user with `+@write` access will be able to execute `JSON.SET`.

ACL rules such as `+@all -@write` will allow access to fewer commands:
  - A user with `+@all -@write` will not be able to execute `JSON.SET`.

Additionally, ACL rules such as `+@read +JSON.GET` can now be simplified as `+@read` because `JSON.GET` is included in the `@read` category.
```

----------------------------------------

TITLE: Redis: Query Search Index for Auto-Completion
DESCRIPTION: Provides an example of querying the Redis sorted set to retrieve auto-completion suggestions. It uses ZRANGE with BYLEX to fetch terms starting with a prefix, including their associated frequencies.
SOURCE: https://github.com/redis/docs/blob/main/content/develop/use/patterns/indexes/index.md#_snippet_18

LANGUAGE: Redis
CODE:
```
ZRANGE myindex "[banana:" + BYLEX LIMIT 0 10
```

----------------------------------------

TITLE: Create Redis vector search index with HNSW and L2 metric
DESCRIPTION: Define a Redis search schema that includes a text field for content, a tag field for genre, and a vector field named `embedding`. The vector field is configured for HNSW indexing, uses `FLOAT32` type, has 384 dimensions, and specifies the L2 distance metric. The index `vector_idx` is created on hash objects with a `doc:` prefix.
SOURCE: https://github.com/redis/docs/blob/main/content/develop/clients/php/vecsearch.md#_snippet_4

LANGUAGE: php
CODE:
```
$schema = [
    new TextField("content"),
    new TagField("genre"),
    new VectorField(
        "embedding",
        "HNSW",
        [
            "TYPE", "FLOAT32",
            "DIM", 384,
            "DISTANCE_METRIC", "L2"
        ]
    )   
];

$client->ftcreate("vector_idx", $schema,
    (new CreateArguments())
        ->on('HASH')
        ->prefix(["doc:"])
);
```

----------------------------------------

TITLE: Go: Add JSON Data to Redis with JSONSet
DESCRIPTION: This Go snippet shows how to add JSON documents to Redis using `JSONSet()`. It iterates through embeddings and sentences, populating a map with content, genre, and embedding fields. Notably, vector embeddings are added directly as `float32` arrays, unlike hash data which requires byte encoding.
SOURCE: https://github.com/redis/docs/blob/main/content/develop/clients/go/vecsearch.md#_snippet_10

LANGUAGE: go
CODE:
```
for i, emb := range embeddings {
    _, err = rdb.JSONSet(ctx,
        fmt.Sprintf("jdoc:%v", i),
        "$",
        map[string]any{
            "content":   sentences[i],
            "genre":     tags[i],
            "embedding": emb.ToFloat32(),
        },
    ).Result()

    if err != nil {
        panic(err)
    }
}
```

----------------------------------------

TITLE: Create HNSW Vector Index with Metadata Fields in Redis
DESCRIPTION: Demonstrates how to build an HNSW (Hierarchical Navigable Small World) index in Redis, incorporating vector fields along with numeric, tag, and text fields for metadata. It flushes existing data, defines the schema, creates the index, sets the query dialect, loads sample data, and prints the index size.
SOURCE: https://github.com/redis/docs/blob/main/content/develop/interact/search-and-query/vecsim-hybrid_queries_examples.ipynb#_snippet_4

LANGUAGE: python
CODE:
```
# build HNSW index
delete_data(redis_conn)

schema = (VectorField(vector_field_name, "HNSW", {"TYPE": "FLOAT64", "DIM": dim, "DISTANCE_METRIC": "L2"}),
          NumericField(rating_field_name), TagField(genre_field_name), TextField(title_field_name))
redis_conn.ft().create_index(schema)
redis_conn.ft().config_set("default_dialect", 2)

# load vectors with meta-data
np.random.seed(42)
load_docs(redis_conn, n_vec, dim)

print("index size: ", redis_conn.ft().info()['num_docs'])

query_vector = np.random.rand(1, dim).astype(np.float64)
```

----------------------------------------

TITLE: Retrieve Data from RedisVL Semantic Cache Using Tag Filters
DESCRIPTION: This Python snippet illustrates how to query the 'private_cache' using a 'Tag' filter to retrieve specific cached entries. By defining a 'user_id_filter' and passing it to the 'check()' method, only responses associated with the specified 'user_id' ('abc' in this case) are returned, demonstrating effective data isolation and access control.
SOURCE: https://github.com/redis/docs/blob/main/content/integrate/redisvl/user_guide/llmcache.md#_snippet_21

LANGUAGE: python
CODE:
```
from redisvl.query.filter import Tag

# define user id filter
user_id_filter = Tag("user_id") == "abc"

response = private_cache.check(
    prompt="What is the phone number linked to my account?",
    filter_expression=user_id_filter,
    num_results=2
)

print(f"found {len(response)} entry \n{response[0]['response']}")
```

----------------------------------------

TITLE: Test Redis Connection and Basic Operations with redis-cli
DESCRIPTION: Provides an example of using `redis-cli` to test connectivity with PING, set a string value with SET, and retrieve it with GET, demonstrating basic database interaction.
SOURCE: https://github.com/redis/docs/blob/main/content/operate/rs/7.8/references/cli-utilities/redis-cli/_index.md#_snippet_6

LANGUAGE: sh
CODE:
```
$ redis-cli -h <endpoint> -p 12000 PING
PONG
$ redis-cli -h <endpoint> -p 12000 SET mykey "Hello world"
OK
$ redis-cli -h <endpoint> -p 12000 GET mykey              
"Hello world"
```

----------------------------------------

TITLE: Connect to Redis using a Connection Pool in Python
DESCRIPTION: This snippet demonstrates how to establish connections to Redis using a connection pool, which is recommended for production environments. It shows how to create a pool, obtain multiple Redis client instances from it, perform operations, and properly close the client instances and the pool.
SOURCE: https://github.com/redis/docs/blob/main/content/develop/clients/redis-py/connect.md#_snippet_9

LANGUAGE: python
CODE:
```
import redis

pool = redis.ConnectionPool().from_url("redis://localhost")
r1 = redis.Redis().from_pool(pool)
r2 = redis.Redis().from_pool(pool)
r3 = redis.Redis().from_pool(pool)

r1.set("wind:1", "Hurricane")
r2.set("wind:2", "Tornado")
r3.set("wind:3", "Mistral")

r1.close()
r2.close()
r3.close()

pool.close()
```

----------------------------------------

TITLE: Redis CVE-2022-24834: Lua Scripting Heap Overflow
DESCRIPTION: A specially crafted Lua script executing in Redis can trigger a heap overflow in the cjson and cmsgpack libraries, and result in heap corruption and potentially remote code execution. The problem exists in all versions of Redis with Lua scripting support, starting from 2.6, and affects only authenticated and authorized users. (Redis 6.0.20)
SOURCE: https://github.com/redis/docs/blob/main/content/operate/rs/release-notes/rs-6-4-2-releases/rs-6-4-2-103.md#_snippet_2

LANGUAGE: APIDOC
CODE:
```
Component: Lua Scripting (cjson and cmsgpack libraries)
Vulnerability: Heap overflow triggered by specially crafted Lua scripts, leading to heap corruption and potential remote code execution.
```

----------------------------------------

TITLE: Connect to Redis Active-Active database using Python and redis-py
DESCRIPTION: Provides a Python application that connects to two Redis Active-Active cluster nodes, sets a key in one, and retrieves it from both to demonstrate bi-directional replication. Requires the `redis-py` library to be installed.
SOURCE: https://github.com/redis/docs/blob/main/content/operate/rs/7.8/databases/active-active/connect.md#_snippet_1

LANGUAGE: sh
CODE:
```
vi redis_test.py
```

LANGUAGE: python
CODE:
```
import redis
rp1 = redis.StrictRedis(host='localhost', port=12000, db=0)
rp2 = redis.StrictRedis(host='localhost', port=12002, db=0)
print ("set key1 123 in cluster 1")
print (rp1.set('key1', '123'))
print ("get key1 cluster 1")
print (rp1.get('key1'))
print ("get key1 from cluster 2")
print (rp2.get('key1'))
```

LANGUAGE: sh
CODE:
```
python redis_test.py
```

----------------------------------------

TITLE: Run Vector Similarity Query on Redis (Hash Documents) in JavaScript
DESCRIPTION: This snippet illustrates how to perform a vector similarity search on a Redis index. It involves generating an embedding for the query text, passing it to `client.ft.search()`, and then iterating through the returned documents to display their content and similarity scores.
SOURCE: https://github.com/redis/docs/blob/main/content/develop/clients/nodejs/vecsearch.md#_snippet_6

LANGUAGE: js
CODE:
```
const similar = await client.ft.search(
    'vector_idx',
    '*=>[KNN 3 @embedding $B AS score]',
    {
        'PARAMS': {
            B: Buffer.from(
                (await pipe('That is a happy person', pipeOptions)).data.buffer
            ),
        },
        'RETURN': ['score', 'content'],
        'DIALECT': '2'
    },
);

for (const doc of similar.documents) {
    console.log(`${doc.id}: '${doc.value.content}', Score: ${doc.value.score}`);
}

await client.quit();
```

----------------------------------------

TITLE: Redis: Implementing Producer/Consumer with BRPOP
DESCRIPTION: Shows how BRPOP (blocking right pop) can be used to implement an efficient producer/consumer queue. Consumers can block until an element is available in the list, avoiding the inefficiencies of polling. The command returns when an element is pushed or a specified timeout is reached.
SOURCE: https://github.com/redis/docs/blob/main/content/develop/data-types/lists.md#_snippet_12

LANGUAGE: Redis CLI
CODE:
```
RPUSH bikes:repairs bike:1 bike:2
(integer) 2
BRPOP bikes:repairs 1
1) "bikes:repairs"
2) "bike:2"
BRPOP bikes:repairs 1
1) "bikes:repairs"
2) "bike:1"
BRPOP bikes:repairs 1
(nil)
(2.01s)
```

----------------------------------------

TITLE: Retrieve Recent Conversation History from Redis
DESCRIPTION: Retrieves a specified number of recent conversation messages from the session memory, allowing for various output formats (text, raw data) and session filtering.
SOURCE: https://github.com/redis/docs/blob/main/content/integrate/redisvl/api/session_manager.md#_snippet_10

LANGUAGE: APIDOC
CODE:
```
get_recent(top_k=5, as_text=False, raw=False, session_tag=None)
  Retrieve the recent conversation history in sequential order.

  Parameters:
    top_k (int): The number of previous messages to return. Default is 5.
    as_text (bool): Whether to return the conversation as a single string, or list of alternating prompts and responses.
    raw (bool): Whether to return the full Redis hash entry or just the prompt and response
    session_tag (Optional[str]): Tag to be added to entries to link to a specific session. Defaults to instance ULID.
  Returns:
    A single string transcription of the session or list of strings if as_text is false.
  Return type:
    Union[str, List[str]]
  Raises:
    ValueError: if top_k is not an integer greater than or equal to 0.
```

----------------------------------------

TITLE: Start Redis CLI interactive mode and execute PING
DESCRIPTION: Illustrates the basic usage of `redis-cli` in interactive mode. Simply run `redis-cli` without arguments to get a prompt, then type Redis commands like `PING`.
SOURCE: https://github.com/redis/docs/blob/main/content/develop/tools/cli.md#_snippet_16

LANGUAGE: shell
CODE:
```
$ redis-cli
127.0.0.1:6379> PING
PONG
```

----------------------------------------

TITLE: Basic Usage of Azure OpenAI Text Vectorizer
DESCRIPTION: This Python snippet demonstrates the basic initialization and usage of the `AzureOpenAITextVectorizer` class. It shows how to configure the vectorizer with Azure-specific API details like `api_key`, `api_version`, and `azure_endpoint` for generating text embeddings.
SOURCE: https://github.com/redis/docs/blob/main/content/integrate/redisvl/api/vectorizer.md#_snippet_7

LANGUAGE: python
CODE:
```
vectorizer = AzureOpenAITextVectorizer(
    model="text-embedding-ada-002",
    api_config={
        "api_key": "your_api_key", # OR set AZURE_OPENAI_API_KEY in your env
        "api_version": "your_api_version", # OR set OPENAI_API_VERSION in your env
        "azure_endpoint": "your_azure_endpoint", # OR set AZURE_OPENAI_ENDPOINT in your env
    }
)
embedding = vectorizer.embed("Hello, world!")
```

----------------------------------------

TITLE: Redis Hash Field Expiration Commands
DESCRIPTION: Introduces nine new Redis commands to manage expiration, time-to-live (TTL), and persistence for individual hash fields, extending the existing key expiration functionality.
SOURCE: https://github.com/redis/docs/blob/main/content/operate/oss_and_stack/stack-with-enterprise/release-notes/redisstack/redisstack-7.4-release-notes.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
HEXPIRE key field seconds
HPEXPIRE key field milliseconds
HEXPIREAT key field timestamp
HPEXPIREAT key field millisecondsTimestamp
HTTL key field
HPTTL key field
HEXPIRETIME key field
HPEXPIRETIME key field
HPERSIST key field
```

----------------------------------------

TITLE: Define Redis Cloud Subscription Database Resource in Terraform
DESCRIPTION: Configures a `rediscloud_subscription_database` resource to create a database within an existing Redis Cloud subscription. It sets database properties such as name, memory limit, data persistence, throughput, and replication. The example also demonstrates how to include Redis modules like RedisJSON and define alerts.
SOURCE: https://github.com/redis/docs/blob/main/content/integrate/terraform-provider-for-redis-cloud/get-started.md#_snippet_3

LANGUAGE: Terraform
CODE:
```
resource "rediscloud_subscription_database" "database-resource" {
    subscription_id = rediscloud_subscription.subscription-resource.id
    name = "database-name"
    memory_limit_in_gb = 2
    data_persistence = "aof-every-write"
    throughput_measurement_by = "operations-per-second"
    throughput_measurement_value = 20000
    replication = true

    alert {
    name = "dataset-size"
    value = 40
    }
    depends_on = [rediscloud_subscription.subscription-resource]

}
```

LANGUAGE: Terraform
CODE:
```
resource "rediscloud_subscription_database" "database-resource" {
       subscription_id = rediscloud_subscription.subscription-resource.id
       name = "redis-docs-db"
       memory_limit_in_gb = 2
       data_persistence = "aof-every-write"
       throughput_measurement_by = "operations-per-second"
       throughput_measurement_value = 20000
       replication = true

       modules = [
       {
            name = "RedisJSON"
       }
       ]

       alert {
       name = "dataset-size"
       value = 40
       }
      depends_on = [rediscloud_subscription.subscription-resource]

   }
```

----------------------------------------

TITLE: Redis Lua Script for Robust Distributed Lock Unlock
DESCRIPTION: This Lua script provides a more robust way to release a distributed lock in Redis. It ensures that a key is only deleted if its current value matches a provided token, preventing a client from releasing a lock acquired by another client after the original lock has expired. The script should be called with `EVAL ...script... 1 resource-name token-value`.
SOURCE: https://github.com/redis/docs/blob/main/content/commands/set.md#_snippet_2

LANGUAGE: Lua
CODE:
```
if redis.call("get",KEYS[1]) == ARGV[1]
then
    return redis.call("del",KEYS[1])
else
    return 0
end
```

----------------------------------------

TITLE: Deprecating Throughput by Shards in Redis Cloud API
DESCRIPTION: The `number-of-shards` method for setting throughput is deprecated for the `POST /v1/subscriptions/{subscriptionId}/databases` REST API endpoint and will be removed soon. Users are advised to switch to `operations-per-second` for throughput measurement when creating databases via the Redis Cloud API.
SOURCE: https://github.com/redis/docs/blob/main/content/operate/rc/changelog/april-2024.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
POST /v1/subscriptions/{subscriptionId}/databases
  Deprecated Parameter: number-of-shards
  Recommended Parameter: operations-per-second
```

----------------------------------------

TITLE: Acquiring a Distributed Lock with SETNX
DESCRIPTION: Illustrates how SETNX can be used as a primitive to acquire a distributed lock by setting a key with an expiration timestamp. Returns 1 on success (lock acquired) or 0 if the key is already locked.
SOURCE: https://github.com/redis/docs/blob/main/content/commands/setnx.md#_snippet_2

LANGUAGE: Redis
CODE:
```
SETNX lock.foo <current Unix time + lock timeout + 1>
```

----------------------------------------

TITLE: Define Semantic Router Routes in Python
DESCRIPTION: This Python code defines three `Route` objects: `technology`, `sports`, and `entertainment`. Each route includes a name, a list of semantic references (example queries), metadata, and a `distance_threshold` to determine the maximum distance for a query to match the route. These routes are used to classify incoming user queries based on their semantic similarity to the provided references.
SOURCE: https://github.com/redis/docs/blob/main/content/integrate/redisvl/user_guide/semantic_router.md#_snippet_0

LANGUAGE: python
CODE:
```
from redisvl.extensions.router import Route


# Define routes for the semantic router
technology = Route(
    name="technology",
    references=[
        "what are the latest advancements in AI?",
        "tell me about the newest gadgets",
        "what's trending in tech?"
    ],
    metadata={"category": "tech", "priority": 1},
    distance_threshold=0.71
)

sports = Route(
    name="sports",
    references=[
        "who won the game last night?",
        "tell me about the upcoming sports events",
        "what's the latest in the world of sports?",
        "sports",
        "basketball and football"
    ],
    metadata={"category": "sports", "priority": 2},
    distance_threshold=0.72
)

entertainment = Route(
    name="entertainment",
    references=[
        "what are the top movies right now?",
        "who won the best actor award?",
        "what's new in the entertainment industry?"
    ],
    metadata={"category": "entertainment", "priority": 3},
    distance_threshold=0.7
)
```

----------------------------------------

TITLE: Redis Stream Commands Reference
DESCRIPTION: A reference list of basic Redis stream commands, detailing their primary function.
SOURCE: https://github.com/redis/docs/blob/main/content/develop/data-types/streams.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
XADD: Adds a new entry to a stream.
XREAD: Reads one or more entries, starting at a given position and moving forward in time.
XRANGE: Returns a range of entries between two supplied entry IDs.
XLEN: Returns the length of a stream.
```

----------------------------------------

TITLE: Configure VoyageAI API Key
DESCRIPTION: Demonstrates how to securely obtain the VoyageAI API key, either from an environment variable or by prompting the user for input using `getpass`. This key is essential for authenticating requests to the VoyageAI service.
SOURCE: https://github.com/redis/docs/blob/main/content/integrate/redisvl/user_guide/rerankers.md#_snippet_15

LANGUAGE: python
CODE:
```
import getpass

# setup the API Key
api_key = os.environ.get("VOYAGE_API_KEY") or getpass.getpass("Enter your VoyageAI API key: ")
```

----------------------------------------

TITLE: Execute Vector Similarity Search with Redis in Go
DESCRIPTION: This Go code snippet demonstrates how to perform a vector similarity search against a Redis index. It first generates an embedding for a given query string using a Hugging Face transformer, then converts it to a byte buffer. This buffer is used as a parameter in a Redis `FTSearchWithArgs` call to find the top 3 most similar documents based on the 'embedding' field. The results, including document ID, vector distance, and content, are then printed to the console. Note that the first execution may take longer due to model download.
SOURCE: https://github.com/redis/docs/blob/main/content/develop/clients/go/vecsearch.md#_snippet_8

LANGUAGE: go
CODE:
```
queryEmbedding, err := hf.Embed(ctx, []string{
    "That is a happy person",
})

if err != nil {
    panic(err)
}

buffer := floatsToBytes(queryEmbedding[0].ToFloat32())

if err != nil {
    panic(err)
}

results, err := rdb.FTSearchWithArgs(ctx,
    "vector_idx",
    "*=>[KNN 3 @embedding $vec AS vector_distance]",
    &redis.FTSearchOptions{
        Return: []redis.FTSearchReturn{
            {FieldName: "vector_distance"},
            {FieldName: "content"},
        },
        DialectVersion: 2,
        Params: map[string]any{
            "vec": buffer,
        },
    },
).Result()

if err != nil {
    panic(err)
}

for _, doc := range results.Docs {
    fmt.Printf(
        "ID: %v, Distance:%v, Content:'%v'\n",
        doc.ID, doc.Fields["vector_distance"], doc.Fields["content"],
    )
}
```

----------------------------------------

TITLE: Retrieve Members from Redis Sorted Set with ZRANGE and ZREVRANGE
DESCRIPTION: Illustrates how to retrieve members from a Redis sorted set in ascending order using ZRANGE and descending order using ZREVRANGE. It shows retrieving all elements from index 0 to -1.
SOURCE: https://github.com/redis/docs/blob/main/content/develop/data-types/sorted-sets.md#_snippet_1

LANGUAGE: Redis
CODE:
```
> ZRANGE racer_scores 0 -1
1) "Ford"
2) "Sam-Bodden"
3) "Norem"
4) "Royce"
5) "Castilla"
6) "Prickett"
> ZREVRANGE racer_scores 0 -1
1) "Prickett"
2) "Castilla"
3) "Royce"
4) "Norem"
5) "Sam-Bodden"
6) "Ford"
```

----------------------------------------

TITLE: ZREM Command API Reference (Redis)
DESCRIPTION: Detailed API documentation for the Redis ZREM command, including its arguments, return information, and complexity.
SOURCE: https://github.com/redis/docs/blob/main/content/commands/zrem.md#_snippet_1

LANGUAGE: APIDOC
CODE:
```
ZREM Command:
  Description: Removes one or more members from a sorted set. Deletes the sorted set if all members were removed.
  Summary: Removes one or more members from a sorted set. Deletes the sorted set if all members were removed.
  Syntax: ZREM key member [member ...]
  Arguments:
    - name: key
      type: key
      description: The key of the sorted set.
    - name: member
      type: string
      description: One or more members to remove from the sorted set. Non existing members are ignored.
      multiple: true
  Return Value:
    RESP2: Integer reply: the number of members removed from the sorted set, not including non-existing members.
    RESP3: Integer reply: the number of members removed from the sorted set, not including non-existing members.
  Complexity: O(M*log(N)) with N being the number of elements in the sorted set and M the number of elements to be removed.
  Since: 1.2.0
  History:
    - version: 2.4.0
      notes: Accepts multiple elements.
  Command Flags: write, fast
  ACL Categories: @write, @sortedset, @fast
  Key Specifications:
    - RW: true
      begin_search: type: index, spec: {index: 1}
      delete: true
      find_keys: type: range, spec: {keystep: 1, lastkey: 0, limit: 0}
```

----------------------------------------

TITLE: Check Redis Set Membership (SISMEMBER)
DESCRIPTION: Illustrates checking for the existence of a member within a Redis set using the SISMEMBER command. It returns 1 if the member exists in the set, and 0 otherwise, demonstrating how to verify if specific bikes are racing in the US.
SOURCE: https://github.com/redis/docs/blob/main/content/develop/data-types/sets.md#_snippet_1

LANGUAGE: Redis CLI
CODE:
```
SISMEMBER bikes:racing:usa bike:1
(integer) 1
SISMEMBER bikes:racing:usa bike:2
(integer) 0
```

----------------------------------------

TITLE: Define Field with Default Value in Redis OM
DESCRIPTION: Demonstrates setting a default value for the 'country' field to 'United Kingdom', ensuring a fallback value if not explicitly provided during object creation.
SOURCE: https://github.com/redis/docs/blob/main/content/integrate/redisom-for-python/_index.md#_snippet_15

LANGUAGE: python
CODE:
```
country: str = Field(index=True, default="United Kingdom")
```

----------------------------------------

TITLE: Query Composite Index for Range in Redis
DESCRIPTION: Shows how to query a composite index to retrieve items that match a primary field and fall within a specific range for a secondary field (e.g., products in a given room within a price range).
SOURCE: https://github.com/redis/docs/blob/main/content/develop/use/patterns/indexes/index.md#_snippet_25

LANGUAGE: Redis CLI
CODE:
```
ZRANGE myindex [0056:0010.00 [0056:0030.00 BYLEX
```

----------------------------------------

TITLE: Loading Multiple Person Entities with Spring Data Redis
DESCRIPTION: This Java code snippet demonstrates how to load a collection of 'Person' entities into Redis using Spring Data Redis's 'saveAll' method. It initializes multiple 'Person' objects with various attributes, including addresses and locations, and then performs a bulk save operation.
SOURCE: https://github.com/redis/docs/blob/main/content/integrate/redisom-for-java/_index.md#_snippet_17

LANGUAGE: java
CODE:
```
@Bean
CommandLineRunner loadTestData(PeopleRepository repo) {
  return args -> {
    repo.deleteAll();

    String thorSays = "The Rabbit Is Correct, And Clearly The Smartest One Among You.";
    String ironmanSays = "Doth mother know you weareth her drapes?";
    String blackWidowSays = "Hey, fellas. Either one of you know where the Smithsonian is? I’m here to pick up a fossil.";
    String wandaMaximoffSays = "You Guys Know I Can Move Things With My Mind, Right?";
    String gamoraSays = "I Am Going To Die Surrounded By The Biggest Idiots In The Galaxy.";
    String nickFurySays = "Sir, I’m Gonna Have To Ask You To Exit The Donut";

    // Serendipity, 248 Seven Mile Beach Rd, Broken Head NSW 2481, Australia
    Address thorsAddress = Address.of("248", "Seven Mile Beach Rd", "Broken Head", "NSW", "2481", "Australia");

    // 11 Commerce Dr, Riverhead, NY 11901
    Address ironmansAddress = Address.of("11", "Commerce Dr", "Riverhead", "NY",  "11901", "US");

    // 605 W 48th St, New York, NY 10019
    Address blackWidowAddress = Address.of("605", "48th St", "New York", "NY", "10019", "US");

    // 20 W 34th St, New York, NY 10001
    Address wandaMaximoffsAddress = Address.of("20", "W 34th St", "New York", "NY", "10001", "US");

    // 107 S Beverly Glen Blvd, Los Angeles, CA 90024
    Address gamorasAddress = Address.of("107", "S Beverly Glen Blvd", "Los Angeles", "CA", "90024", "US");

    // 11461 Sunset Blvd, Los Angeles, CA 90049
    Address nickFuryAddress = Address.of("11461", "Sunset Blvd", "Los Angeles", "CA", "90049", "US");

    Person thor = Person.of("Chris", "Hemsworth", 38, thorSays, new Point(153.616667, -28.716667), thorsAddress, Set.of("hammer", "biceps", "hair", "heart"));
    Person ironman = Person.of("Robert", "Downey", 56, ironmanSays, new Point(40.9190747, -72.5371874), ironmansAddress, Set.of("tech", "money", "one-liners", "intelligence", "resources"));
    Person blackWidow = Person.of("Scarlett", "Johansson", 37, blackWidowSays, new Point(40.7215259, -74.0129994), blackWidowAddress, Set.of("deception", "martial_arts"));
    Person wandaMaximoff = Person.of("Elizabeth", "Olsen", 32, wandaMaximoffSays, new Point(40.6976701, -74.2598641), wandaMaximoffsAddress, Set.of("magic", "loyalty"));
    Person gamora = Person.of("Zoe", "Saldana", 43, gamoraSays, new Point(-118.399968, 34.073087), gamorasAddress, Set.of("skills", "martial_arts"));
    Person nickFury = Person.of("Samuel L.", "Jackson", 73, nickFurySays, new Point(-118.4345534, 34.082615), nickFuryAddress, Set.of("planning", "deception", "resources"));

    repo.saveAll(List.of(thor, ironman, blackWidow, wandaMaximoff, gamora, nickFury));
  };
}
```

----------------------------------------

TITLE: Constructing a RediSearch KNN Query in Python
DESCRIPTION: This Python code defines a RediSearch query for K-nearest neighbors (KNN) search. It specifies a filter for all documents, searches for the top 3 nearest neighbors using a '$query_vector', sorts results by 'vector_score', and returns specific fields like 'id', 'brand', 'model', and 'description'. The query also explicitly sets 'dialect(2)', which is required for vector queries with 'FT.SEARCH'.
SOURCE: https://github.com/redis/docs/blob/main/content/develop/get-started/vector-database.md#_snippet_4

LANGUAGE: python
CODE:
```
query = (
    Query('(*)=>[KNN 3 @vector $query_vector AS vector_score]')
     .sort_by('vector_score')
     .return_fields('vector_score', 'id', 'brand', 'model', 'description')
     .dialect(2)
)
```

----------------------------------------

TITLE: Configure Prometheus Rule File Loading
DESCRIPTION: This `prometheus.yml` configuration instructs Prometheus to load specific rule files, such as `error_rules.yml` and `alerts.yml`, for evaluating alerts based on defined conditions.
SOURCE: https://github.com/redis/docs/blob/main/content/embeds/rs-observability.md#_snippet_8

LANGUAGE: YAML
CODE:
```
# Load rules once and periodically evaluate them according to the global 'evaluation_interval'.
rule_files:
  - "error_rules.yml"
  - "alerts.yml"
```

----------------------------------------

TITLE: Connect to Redis with Entra ID Credentials and Automatic Re-authentication (Java)
DESCRIPTION: This comprehensive Java example demonstrates connecting to Azure Managed Redis using a `TokenBasedRedisCredentialsProvider` configured for an Entra ID Service Principal Identity. It shows how to build the credentials provider, enable automatic re-authentication using `ClientOptions`, construct the `RedisURI` with authentication details, and properly manage the lifecycle of the Redis client and credentials provider, including shutdown.
SOURCE: https://github.com/redis/docs/blob/main/content/develop/clients/lettuce/amr.md#_snippet_6

LANGUAGE: java
CODE:
```
// Entra ID credentials provider for Service Principal Identity with Client Secret.
TokenBasedRedisCredentialsProvider credentialsSP;
try (EntraIDTokenAuthConfigBuilder builder = EntraIDTokenAuthConfigBuilder.builder()) {
        builder
                .clientId(CLIENT_ID)
                .secret(CLIENT_SECRET).authority(AUTHORITY) // "https://login.microsoftonline.com/{YOUR_TENANT_ID}"
                .scopes(SCOPES); // "https://redis.azure.com/.default"

        credentialsSP = TokenBasedRedisCredentialsProvider.create(builder.build());
}

// Optionally test the credentials provider.
// credentialsSP.resolveCredentials().doOnNext(c -> System.out.println("SPI ID :" + c.getUsername())).block();

// Enable automatic re-authentication.
ClientOptions clientOptions = ClientOptions.builder()
        .reauthenticateBehavior(
                ClientOptions.ReauthenticateBehavior.ON_NEW_CREDENTIALS
        ).build();

// Use the Entra ID credentials provider.
RedisURI redisURI = RedisURI.builder()
        .withHost(HOST)
        .withPort(PORT)
        .withAuthentication(credentialsSP)
        .withSsl(true)
        .build();

// Create the RedisClient and set the re-authentication options.
RedisClient redisClient = RedisClient.create(redisURI);
redisClient.setOptions(clientOptions);

// Connect with the credentials provider.
try (StatefulRedisConnection<String, String> user1 = redisClient.connect(StringCodec.UTF8)) {
        System.out.println("Connected to redis as :" + user1.sync().aclWhoami());
        System.out.println("Db size :" + user1.sync().dbsize());
} finally {
        redisClient.shutdown();  // Shutdown Redis client and close connections.
        credentialsSP.close(); // Shutdown Entra ID Credentials provider.
}
```

----------------------------------------

TITLE: Apply Empty Tag Filter in RedisVL
DESCRIPTION: This Python snippet demonstrates how to set a filter that gracefully falls back to a '*' filter when a specific tag field, 'credit_score' in this case, is empty. It uses the `Tag` object to define the empty case and applies it to the query vector `v` before executing the query and printing results, showing records where 'credit_score' is not present or an empty list.
SOURCE: https://github.com/redis/docs/blob/main/content/integrate/redisvl/user_guide/hybrid_queries.md#_snippet_11

LANGUAGE: python
CODE:
```
empty_case = Tag("credit_score") == []

v.set_filter(empty_case)
result_print(index.query(v))
```

----------------------------------------

TITLE: Reduce all results: Count GitHub events by active user
DESCRIPTION: This example demonstrates using `FT.AGGREGATE` with `GROUPBY` and `REDUCE` to count GitHub events by user (actor) and identify the most active users, sorted by the number of events in descending order. The output shows the top 10 active users.
SOURCE: https://github.com/redis/docs/blob/main/content/commands/ft.aggregate.md#_snippet_24

LANGUAGE: bash
CODE:
```
127.0.0.1:6379> FT.AGGREGATE gh "*" GROUPBY 1 @actor REDUCE COUNT 0 AS num SORTBY 2 @num DESC MAX 10
 1) (integer) 284784
 2) 1) "actor"
    2) "lombiqbot"
    3) "num"
    4) "22197"
 3) 1) "actor"
    2) "codepipeline-test"
    3) "num"
    4) "17746"
 4) 1) "actor"
    2) "direwolf-github"
    3) "num"
    4) "10683"
 5) 1) "actor"
    2) "ogate"
    3) "num"
    4) "6449"
 6) 1) "actor"
    2) "openlocalizationtest"
    3) "num"
    4) "4759"
 7) 1) "actor"
    2) "digimatic"
    3) "num"
    4) "3809"
 8) 1) "actor"
    2) "gugod"
    3) "num"
    4) "3512"
 9) 1) "actor"
    2) "xdzou"
    3) "num"
    4) "3216"
[10](10)) 1) "actor"
    2) "opstest"
    3) "num"
    4) "2863"
11) 1) "actor"
    2) "jikker"
    3) "num"
    4) "2794"
(0.59s)
```

----------------------------------------

TITLE: Add multiple fields to Redis JSON data using RDI `add_field` transformation
DESCRIPTION: This example illustrates how to add multiple new fields simultaneously to `track` objects using the `add_field` transformation. It shows adding `seconds` (calculated via SQL from `milliseconds`) and `composerlist` (a JSON array created by splitting the `composer` string with JMESPath). The output is configured to write to a `json` data type.
SOURCE: https://github.com/redis/docs/blob/main/content/integrate/redis-data-integration/data-pipelines/transform-examples/redis-add-field-example.md#_snippet_3

LANGUAGE: yaml
CODE:
```
source:
  db: chinook
  table: track
transform:
  - uses: add_field
    with:
      fields:
        - expression: floor(milliseconds / 1000)
          field: seconds
          language: sql
        - expression: split(composer)
          field: composerlist
          language: jmespath
output:
  - uses: redis.write
    with:
      connection: target
      data_type: json
      key:
        expression: concat(['track:', trackid])
        language: jmespath
```

----------------------------------------

TITLE: Python: Instantiate and Execute HybridQuery
DESCRIPTION: Demonstrates how to import and instantiate the `HybridQuery` class with various parameters for text and vector search. The example shows how to configure the query and execute it against a `SearchIndex`.
SOURCE: https://github.com/redis/docs/blob/main/content/integrate/redisvl/api/query.md#_snippet_57

LANGUAGE: python
CODE:
```
from redisvl.query import HybridQuery
from redisvl.index import SearchIndex

index = SearchIndex.from_yaml("path/to/index.yaml")

query = HybridQuery(
    text="example text",
    text_field_name="text_field",
    vector=[0.1, 0.2, 0.3],
    vector_field_name="vector_field",
    text_scorer="BM25STD",
    filter_expression=None,
    alpha=0.7,
    dtype="float32",
    num_results=10,
    return_fields=["field1", "field2"],
    stopwords="english",
    dialect=2,
)

results = index.query(query)
```

----------------------------------------

TITLE: Test Redis connection by storing and retrieving a string with Predis
DESCRIPTION: PHP example demonstrating how to store a simple string ('foo' -> 'bar') and then retrieve it from Redis to verify the connection using Predis.
SOURCE: https://github.com/redis/docs/blob/main/content/develop/clients/php/_index.md#_snippet_2

LANGUAGE: php
CODE:
```
echo $r->set('foo', 'bar'), PHP_EOL;
// >>> OK

echo $r->get('foo'), PHP_EOL;
// >>> bar
```

----------------------------------------

TITLE: Redis Enterprise Software Platform Compatibility Matrix
DESCRIPTION: This matrix outlines the supported operating systems and platforms for Redis Enterprise Software across major versions (7.4, 7.2, 6.4, 6.2), including their release and end-of-life dates. It specifies compatibility for RHEL, Ubuntu, Amazon Linux, Kubernetes, and Docker, along with important notes regarding specific distributions and usage recommendations.
SOURCE: https://github.com/redis/docs/blob/main/content/operate/rs/release-notes/rs-7-4-2-releases/rs-7-4-6-102.md#_snippet_2

LANGUAGE: APIDOC
CODE:
```
| Redis Enterprise<br />major versions | 7.4 | 7.2 | 6.4 | 6.2 |
|---------------------------------|:-----:|:-----:|:-----:|:-----:|
| **Release date** | Feb 2024 | Aug 2023 | Feb 2023 | Aug 2021 |
| [**End-of-life date**] | Determined after<br />next major release | Feb 2026 | Aug 2025 | Feb 2025 |
| **Platforms** | | | | |
| RHEL 9 &<br />compatible distros | ✅ | – | – | – |
| RHEL 8 &<br />compatible distros | ✅ | ✅ | ✅ | ✅ |
| RHEL 7 &<br />compatible distros | – | :warning: | ✅ | ✅ |
| Ubuntu 20.04 | ✅ | ✅ | ✅ | – |
| Ubuntu 18.04 | :warning: | :warning: | ✅ | ✅ |
| Ubuntu 16.04 | – | :warning: | ✅ | ✅ |
| Amazon Linux 2 | ✅ | ✅ | ✅ | – |
| Amazon Linux 1 | – | ✅ | ✅ | ✅ |
| Kubernetes | ✅ | ✅ | ✅ | ✅ |
| Docker | ✅ | ✅ | ✅ | ✅ |

Notes:
1. The RHEL-compatible distributions CentOS, CentOS Stream, Alma, and Rocky are supported if they have full RHEL compatibility. Oracle Linux running the Red Hat Compatible Kernel (RHCK) is supported, but the Unbreakable Enterprise Kernel (UEK) is not supported.
2. The server version of Ubuntu is recommended for production installations. The desktop version is only recommended for development deployments.
3. See the Redis Enterprise for Kubernetes documentation for details about support per version and Kubernetes distribution.
4. Docker images of Redis Enterprise Software are certified for development and testing only.
```

----------------------------------------

TITLE: CVE-2022-35951: XAUTOCLAIM Integer/Heap Overflow RCE
DESCRIPTION: Executing an XAUTOCLAIM command on a stream key in a specific state, with a specially crafted COUNT argument, may cause an integer overflow, a subsequent heap overflow, and potentially lead to remote code execution. The problem affects Redis versions 7.0.0 or newer.
SOURCE: https://github.com/redis/docs/blob/main/content/operate/rs/release-notes/rs-7-4-2-releases/rs-7-4-6-22.md#_snippet_12

LANGUAGE: APIDOC
CODE:
```
CVE-ID: CVE-2022-35951
Description: Executing an XAUTOCLAIM command on a stream key in a specific state, with a specially crafted COUNT argument, may cause an integer overflow, a subsequent heap overflow, and potentially lead to remote code execution.
Affected Command: XAUTOCLAIM
Affected Versions: Redis 7.0.5 (and 7.0.0 or newer)
```

----------------------------------------

TITLE: Redis Vector Distance Metrics Reference
DESCRIPTION: This section describes the three popular distance metrics supported by Redis for measuring similarity between two vectors: L2 (Euclidean distance), IP (Inner Product), and COSINE (Cosine distance). Each metric includes its description and mathematical representation.
SOURCE: https://github.com/redis/docs/blob/main/content/develop/interact/search-and-query/advanced-concepts/vectors.md#_snippet_5

LANGUAGE: APIDOC
CODE:
```
Redis Distance Metrics:
  L2:
    Description: Euclidean distance between two vectors.
    Mathematical Representation: d(u, v) = \sqrt{ \displaystyle\sum_{i=1}^n{(u_i - v_i)^2}}
  IP:
    Description: Inner product of two vectors.
    Mathematical Representation: d(u, v) = 1 -u\cdot v
  COSINE:
    Description: Cosine distance of two vectors.
    Mathematical Representation: d(u, v) = 1 -\frac{u \cdot v}{\lVert u \rVert \lVert v  \rVert}
```

----------------------------------------

TITLE: Redis Eviction Policies Reference
DESCRIPTION: Lists the available Redis eviction policies and their descriptions, detailing how Redis manages memory when limits are reached to make room for new data.
SOURCE: https://github.com/redis/docs/blob/main/content/operate/rs/databases/memory-performance/eviction-policy.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
Eviction Policies:
  noeviction:
    Description: New values aren't saved when memory limit is reached.
                 When a database uses replication, this applies to the primary database.
  allkeys-lru:
    Description: Keeps most recently used keys; removes least recently used (LRU) keys.
  allkeys-lfu:
    Description: Keeps frequently used keys; removes least frequently used (LFU) keys.
  allkeys-random:
    Description: Randomly removes keys.
  volatile-lru:
    Description: Removes least recently used keys with 'expire' field set to true.
  volatile-lfu:
    Description: Removes least frequently used keys with 'expire' field set to true.
  volatile-random:
    Description: Randomly removes keys with 'expire' field set to true.
  volatile-ttl:
    Description: Removes least frequently used keys with 'expire' field set to true and the shortest remaining time-to-live (TTL) value.
```

----------------------------------------

TITLE: List All Kubernetes Resources in Namespace
DESCRIPTION: Lists all Kubernetes resources (pods, services, deployments, etc.) within the current namespace, useful for a comprehensive overview of the cluster's state.
SOURCE: https://github.com/redis/docs/blob/main/content/operate/kubernetes/7.8.6/deployment/quick-start.md#_snippet_11

LANGUAGE: sh
CODE:
```
kubectl get all
```

----------------------------------------

TITLE: Test Redis Connectivity with redis-cli PING
DESCRIPTION: Execute `redis-cli -h <endpoint> -p <port> -a <password> PING` to perform a simple connectivity test to the Redis database. A successful PONG response indicates that the client can reach the database and authenticate, confirming basic network and authentication setup.
SOURCE: https://github.com/redis/docs/blob/main/content/operate/rs/databases/connect/troubleshooting-guide.md#_snippet_18

LANGUAGE: sh
CODE:
```
redis-cli -h <endpoint> -p <port> -a <password> PING
```

----------------------------------------

TITLE: Automatically Claiming a Single Redis Stream Message with XAUTOCLAIM
DESCRIPTION: Illustrates the use of `XAUTOCLAIM` to automatically claim a single idle message from a Redis Stream consumer group. The example shows how to specify the group, consumer, minimum idle time, and a starting ID, returning the claimed message and a cursor for further iteration.
SOURCE: https://github.com/redis/docs/blob/main/content/develop/data-types/streams.md#_snippet_38

LANGUAGE: Redis CLI
CODE:
```
XAUTOCLAIM race:italy italy_riders Alice 60000 0-0 COUNT 1
1) "0-0"
2) 1) 1) "1692632662819-0"
      2) 1) "rider"
         2) "Sam-Bodden"
```

----------------------------------------

TITLE: Step-by-Step Guide to Backing Up Redis AOF Persistence (Redis 7.0.0+)
DESCRIPTION: A detailed procedure for safely backing up Redis AOF files, specifically for Redis versions 7.0.0 and later, which use a multi-file AOF structure. The steps involve temporarily disabling automatic AOF rewrites, checking for ongoing rewrites, copying the AOF directory, and then re-enabling rewrites. It also provides options for persisting configuration changes and minimizing downtime using hard links.
SOURCE: https://github.com/redis/docs/blob/main/content/operate/oss_and_stack/management/persistence.md#_snippet_13

LANGUAGE: Redis CLI
CODE:
```
1. CONFIG SET auto-aof-rewrite-percentage 0
   (Ensure no manual BGREWRITEAOF during this time)

2. INFO persistence
   (Verify aof_rewrite_in_progress is 0; wait if 1)

3. Copy files in the `appenddirname` directory.
   (Optional: Create hard links first to minimize rewrite disable time)

4. CONFIG SET auto-aof-rewrite-percentage <prev-value>

Optional: To persist configuration changes across restarts (for steps 1 & 4):
   CONFIG REWRITE
```

----------------------------------------

TITLE: Add Data with Embeddings to Redis using C#
DESCRIPTION: This snippet demonstrates how to prepare data objects with generated embeddings and store them in Redis Hashes. It utilizes `GetPredictionEngine()` and `GetEmbedding()` (or `GetEmbeddingFromAzure()` for Azure OpenAI) to create vector representations of text content, which are then automatically indexed by Redis.
SOURCE: https://github.com/redis/docs/blob/main/content/develop/clients/dotnet/vecsearch.md#_snippet_11

LANGUAGE: csharp
CODE:
```
var predEngine = GetPredictionEngine();

var sentence1 = "That is a very happy person";

HashEntry[] doc1 = {
    new("content", sentence1),
    new("genre", "persons"),
    new("embedding", GetEmbedding(predEngine, sentence1))
};

db.HashSet("doc:1", doc1);

var sentence2 = "That is a happy dog";

HashEntry[] doc2 = {
    new("content", sentence2),
    new("genre", "pets"),
    new("embedding", GetEmbedding(predEngine, sentence2))
};

db.HashSet("doc:2", doc2);

var sentence3 = "Today is a sunny day";

HashEntry[] doc3 = {
    new("content", sentence3),
    new("genre", "weather"),
    new("embedding", GetEmbedding(predEngine, sentence3))
};

db.HashSet("doc:3", doc3);
```

----------------------------------------

TITLE: CVE-2024-31449: Lua script stack buffer overflow in Redis bit library (7.2.x)
DESCRIPTION: An authenticated user can trigger a stack buffer overflow in the Redis bit library using a specially crafted Lua script, potentially leading to remote code execution in Redis 7.2.x.
SOURCE: https://github.com/redis/docs/blob/main/content/operate/rs/release-notes/rs-7-8-releases/rs-7-8-4-18.md#_snippet_7

LANGUAGE: APIDOC
CODE:
```
Vulnerability: CVE-2024-31449
Description: An authenticated user may use a specially crafted Lua script to trigger a stack buffer overflow in the bit library, which may potentially lead to remote code execution.
Affected Component: Redis Lua bit library
Impact: Remote Code Execution (RCE), Stack Buffer Overflow
Trigger: Specially crafted Lua script
Affected Version: Redis 7.2.x
```

----------------------------------------

TITLE: Connect to Redis with JedisPool for Basic Operations
DESCRIPTION: This Java code demonstrates how to establish a connection to Redis using `JedisPool`. It shows examples of storing and retrieving a simple string using `jedis.set()` and `jedis.get()`, and storing and retrieving a HashMap using `jedis.hset()` and `jedis.hgetAll()`. The `try-with-resources` block ensures the connection is returned to the pool.
SOURCE: https://github.com/redis/docs/blob/main/content/develop/clients/jedis/connect.md#_snippet_12

LANGUAGE: java
CODE:
```
package org.example;
import redis.clients.jedis.Jedis;
import redis.clients.jedis.JedisPool;

public class Main {
    public static void main(String[] args) {
        JedisPool pool = new JedisPool("localhost", 6379);

        try (Jedis jedis = pool.getResource()) {
            // Store & Retrieve a simple string
            jedis.set("foo", "bar");
            System.out.println(jedis.get("foo")); // prints bar
            
            // Store & Retrieve a HashMap
            Map<String, String> hash = new HashMap<>();;
            hash.put("name", "John");
            hash.put("surname", "Smith");
            hash.put("company", "Redis");
            hash.put("age", "29");
            jedis.hset("user-session:123", hash);
            System.out.println(jedis.hgetAll("user-session:123"));
            // Prints: {name=John, surname=Smith, company=Redis, age=29}
        }
    }
}
```

----------------------------------------

TITLE: Manage Multiple LLM Conversations with Session Tags
DESCRIPTION: This example shows how to handle multiple concurrent conversations using `session_tag`. By providing a unique tag, messages for different users or topics can be stored and retrieved separately, ensuring conversational isolation within the same `MessageHistory` instance.
SOURCE: https://github.com/redis/docs/blob/main/content/integrate/redisvl/user_guide/message_history.md#_snippet_4

LANGUAGE: python
CODE:
```
chat_history.add_message({"role":"system", "content":"You are a helpful algebra tutor, giving simple answers to math problems."}, session_tag='student two')
chat_history.add_messages([
    {"role":"user", "content":"What is the value of x in the equation 2x + 3 = 7?"},
    {"role":"llm", "content":"The value of x is 2."},
    {"role":"user", "content":"What is the value of y in the equation 3y - 5 = 7?"},
    {"role":"llm", "content":"The value of y is 4."}],
    session_tag='student two'
    )

for math_message in chat_history.get_recent(session_tag='student two'):
    print(math_message)
```

----------------------------------------

TITLE: Perform Vector Search (KNN) on Multiple JSON Vector Embeddings
DESCRIPTION: This snippet demonstrates how to perform a K-Nearest Neighbors (KNN) vector search query on the 'itemIdx5' index, targeting the 'embeddings' field which contains multiple vectors. It searches for the two items most similar to a given query vector, where the document's distance is the minimum distance to any of its indexed vectors. The output shows the matched items and their calculated minimum distances.
SOURCE: https://github.com/redis/docs/blob/main/content/develop/interact/search-and-query/indexing/_index.md#_snippet_22

LANGUAGE: sql
CODE:
```
127.0.0.1:6379> FT.SEARCH itemIdx5 '*=>[KNN 2 @embeddings $blob AS dist]' SORTBY dist PARAMS 2 blob \x01\x01\x01\x01 DIALECT 2
1) (integer) 2
2) "item:2"
3) 1) "dist"
   2) "0.771500051022"
   3) "$"
   4) "{\"name\":\"Wireless earbuds\",\"description\":\"Wireless Bluetooth in-ear headphones\",\"price\":64.99,\"stock\":17,\"colors\":[\"black\",\"white\"],\"embeddings\":[[-0.7,-0.51,0.88,0.14],[-0.8,-0.15,0.33,-0.01]]}"
4) "item:1"
5) 1) "dist"
   2) "1.08280003071"
   3) "$"
   4) "{\"name\":\"Noise-cancelling Bluetooth headphones\",\"description\":\"Wireless Bluetooth headphones with noise-cancelling technology\",\"price\":99.98,\"stock\":25,\"colors\":[\"black\",\"silver\"],\"embeddings\":[[0.87,-0.15,0.55,0.03]]}"
```

----------------------------------------

TITLE: Redis CLI: Atomic String Counter Operations (INCR, INCRBY)
DESCRIPTION: This example demonstrates using string values as atomic counters. INCR increments the integer value of a key by one, and INCRBY increments it by a specified amount. These operations are guaranteed to be atomic, preventing race conditions.
SOURCE: https://github.com/redis/docs/blob/main/content/develop/data-types/strings.md#_snippet_3

LANGUAGE: Redis CLI
CODE:
```
> set total_crashes 0
OK
> incr total_crashes
(integer) 1
> incrby total_crashes 10
(integer) 11
```

----------------------------------------

TITLE: Bulk Loading with redis-cli Pipe Mode
DESCRIPTION: The recommended and reliable method for mass importing data into Redis using the `redis-cli` utility's pipe mode, which handles error checking and transfer confirmation.
SOURCE: https://github.com/redis/docs/blob/main/content/develop/use/patterns/bulk-loading.md#_snippet_2

LANGUAGE: Shell
CODE:
```
cat data.txt | redis-cli --pipe
```

----------------------------------------

TITLE: Set Redis User ACLs with Command Categories
DESCRIPTION: Demonstrates how to configure user permissions in Redis using command categories. This specific example grants the user 'antirez' access to all commands (+@all) while explicitly revoking access to 'dangerous' commands (-@dangerous), and allows access to all keys (~*). This method simplifies ACL management by allowing broad permissions with specific exclusions.
SOURCE: https://github.com/redis/docs/blob/main/content/operate/oss_and_stack/management/security/acl.md#_snippet_24

LANGUAGE: Redis CLI
CODE:
```
ACL SETUSER antirez on +@all -@dangerous >42a979... ~*
```

----------------------------------------

TITLE: Connect to a Local Redis Server
DESCRIPTION: Demonstrates how to connect to a Redis server running on localhost using the default port (6379) via the `redis-cli` command-line interface.
SOURCE: https://github.com/redis/docs/blob/main/content/develop/get-started/data-store.md#_snippet_0

LANGUAGE: Shell
CODE:
```
redis-cli -h 127.0.0.1 -p 6379
```

----------------------------------------

TITLE: Switching to AOF Persistence on Live Redis (Redis 2.2+)
DESCRIPTION: Step-by-step guide to safely switch a live Redis server from RDB snapshots to AOF persistence for versions 2.2 and above. This procedure involves backing up RDB, enabling AOF via `CONFIG SET`, optionally disabling RDB, updating `redis.conf`, and verifying persistence status before and after server restart to prevent data loss.
SOURCE: https://github.com/redis/docs/blob/main/content/operate/oss_and_stack/management/persistence.md#_snippet_10

LANGUAGE: Redis CLI
CODE:
```
redis-cli config set appendonly yes
redis-cli config set save ""
INFO persistence
```

----------------------------------------

TITLE: Execute Basic K-Nearest Neighbors (KNN) Query
DESCRIPTION: This snippet demonstrates a basic KNN query to find the top 10 most similar documents to a given query vector. It uses the `KNN` syntax within a RediSearch query and sorts results by distance.
SOURCE: https://github.com/redis/docs/blob/main/content/develop/interact/search-and-query/vecsim-range_queries_examples.ipynb#_snippet_5

LANGUAGE: python
CODE:
```
q = Query(f'*=>[KNN 10 @{vector_field_name} $vec_param]=>{{$yield_distance_as: dist}}').sort_by(f'dist')
res = redis_conn.ft().search(q, query_params = {'vec_param': query_vector.tobytes()})

print_results(res)
```

----------------------------------------

TITLE: Set and Retrieve a String Value in Redis
DESCRIPTION: Illustrates how to store a string value under a key (e.g., `bike:1`) using the `SET` command and retrieve it using the `GET` command in Redis.
SOURCE: https://github.com/redis/docs/blob/main/content/develop/get-started/data-store.md#_snippet_1

LANGUAGE: Redis
CODE:
```
SET bike:1 "Process 134"
GET bike:1
```

----------------------------------------

TITLE: Disable HTTP Support for Redis Enterprise API
DESCRIPTION: This command configures the Redis Enterprise cluster to disable unencrypted HTTP communication for API endpoints, enforcing HTTPS for all API requests. Ensure all scripts and proxy configurations are updated to use HTTPS before executing this command to avoid service disruption.
SOURCE: https://github.com/redis/docs/blob/main/content/operate/rs/7.8/references/rest-api/encryption.md#_snippet_0

LANGUAGE: sh
CODE:
```
rladmin cluster config http_support disabled
```

----------------------------------------

TITLE: Get Kubernetes node memory and disk pressure status
DESCRIPTION: This command retrieves the MemoryPressure and DiskPressure status for all Kubernetes nodes. It outputs the node name along with the boolean status for each pressure type, helping to identify nodes nearing eviction thresholds.
SOURCE: https://github.com/redis/docs/blob/main/content/operate/kubernetes/recommendations/pod-stability.md#_snippet_3

LANGUAGE: sh
CODE:
```
$kubectl get nodes -o jsonpath='{range .items[*]}name:{.metadata.name}{"\t"}MemoryPressure:{.status.conditions[?(@.type == "MemoryPressure")].status}{"\t"}DiskPressure:{.status.conditions[?(@.type == "DiskPressure")].status}{"\n"}{end}'
```

----------------------------------------

TITLE: Redis Shard Performance Metrics Reference
DESCRIPTION: A detailed reference of metrics used to monitor the health, performance, and resource utilization of Redis shards. These metrics cover memory, CPU, client activity, persistence, and key management, providing essential data for troubleshooting and optimization.
SOURCE: https://github.com/redis/docs/blob/main/content/embeds/rs-prometheus-metrics-v1.md#_snippet_6

LANGUAGE: APIDOC
CODE:
```
redis_active_defrag_running: Automatic memory defragmentation current aggressiveness (% cpu)
redis_allocator_active: Total used memory, including external fragmentation
redis_allocator_allocated: Total allocated memory
redis_allocator_resident: Total resident memory (RSS)
redis_aof_last_cow_size: Last AOFR, CopyOnWrite memory
redis_aof_rewrite_in_progress: The number of simultaneous AOF rewrites that are in progress
redis_aof_rewrites: Number of AOF rewrites this process executed
redis_aof_delayed_fsync: Number of times an AOF fsync caused delays in the Redis main thread (inducing latency); this can indicate that the disk is slow or overloaded
redis_blocked_clients: Count the clients waiting on a blocking call
redis_connected_clients: Number of client connections to the specific shard
redis_connected_slaves: Number of connected replicas
redis_db0_avg_ttl: Average TTL of all volatile keys
redis_db0_expires: Total count of volatile keys
redis_db0_keys: Total key count
redis_evicted_keys: Keys evicted so far (since restart)
redis_expire_cycle_cpu_milliseconds: The cumulative amount of time spent on active expiry cycles
redis_expired_keys: Keys expired so far (since restart)
redis_forwarding_state: Shard forwarding state (on or off)
redis_keys_trimmed: The number of keys that were trimmed in the current or last resharding process
redis_keyspace_read_hits: Number of read operations accessing an existing keyspace
redis_keyspace_read_misses: Number of read operations accessing an non-existing keyspace
redis_keyspace_write_hits: Number of write operations accessing an existing keyspace
redis_keyspace_write_misses: Number of write operations accessing an non-existing keyspace
redis_master_link_status: Indicates if the replica is connected to its master
redis_master_repl_offset: Number of bytes sent to replicas by the shard; calculate the throughput for a time period by comparing the value at different times
redis_master_sync_in_progress: The primary shard is synchronizing (1 true; 0 false)
redis_max_process_mem: Current memory limit configured by redis_mgr according to node free memory
redis_maxmemory: Current memory limit configured by redis_mgr according to database memory limits
redis_mem_aof_buffer: Current size of AOF buffer
redis_mem_clients_normal: Current memory used for input and output buffers of non-replica clients
redis_mem_clients_slaves: Current memory used for input and output buffers of replica clients
redis_mem_fragmentation_ratio: Memory fragmentation ratio (1.3 means 30% overhead)
redis_mem_not_counted_for_evict: Portion of used_memory (in bytes) that's not counted for eviction and OOM error
redis_mem_replication_backlog: Size of replication backlog
redis_module_fork_in_progress: A binary value that indicates if there is an active fork spawned by a module (1) or not (0)
redis_process_cpu_system_seconds_total: Shard process system CPU time spent in seconds
redis_process_cpu_usage_percent: Shard process cpu usage precentage
redis_process_cpu_user_seconds_total: Shard user CPU time spent in seconds
redis_process_main_thread_cpu_system_seconds_total: Shard main thread system CPU time spent in seconds
redis_process_main_thread_cpu_user_seconds_total: Shard main thread user CPU time spent in seconds
redis_process_max_fds: Shard maximum number of open file descriptors
redis_process_open_fds: Shard number of open file descriptors
redis_process_resident_memory_bytes: Shard resident memory size in bytes
redis_process_start_time_seconds: Shard start time of the process since unix epoch in seconds
redis_process_virtual_memory_bytes: Shard virtual memory in bytes
redis_rdb_bgsave_in_progress: Indication if bgsave is currently in progress
redis_rdb_last_cow_size: Last bgsave (or SYNC fork) used CopyOnWrite memory
redis_rdb_saves: Total count of bgsaves since process was restarted (including replica fullsync and persistence)
redis_repl_touch_bytes: Number of bytes sent to replicas as TOUCH commands by the shard as a result of a READ command that was processed; calculate the throughput for a time period by comparing the value at different times
redis_total_commands_processed: Number of commands processed by the shard; calculate the number of commands for a time period by comparing the value at different times
redis_total_connections_received: Number of connections received by the shard; calculate the number of connections for a time period by comparing the value at different times
redis_total_net_input_bytes: Number of bytes received by the shard; calculate the throughput for a time period by comparing the value at different times
```

----------------------------------------

TITLE: Initialize and Open Redis OM Client (Chained)
DESCRIPTION: This JavaScript snippet demonstrates how to create and open a Redis OM client instance in a single chained operation. It retrieves the Redis URL from environment variables (e.g., .env file) and exports the connected client for application-wide use. It leverages top-level await for asynchronous initialization.
SOURCE: https://github.com/redis/docs/blob/main/content/integrate/redisom-for-node-js/_index.md#_snippet_2

LANGUAGE: javascript
CODE:
```
import { Client } from 'redis-om'

/* pulls the Redis URL from .env */
const url = process.env.REDIS_URL

/* create and open the Redis OM Client */
const client = await new Client().open(url)

export default client
```

----------------------------------------

TITLE: Run Redis Stack Docker Container
DESCRIPTION: Command to run Redis Stack using Docker, exposing Redis and RedisInsight ports for local development.
SOURCE: https://github.com/redis/docs/blob/main/content/integrate/redisom-for-net/_index.md#_snippet_0

LANGUAGE: bash
CODE:
```
docker run -d -p 6379:6379 -p 8001:8001 redis/redis-stack
```

----------------------------------------

TITLE: AzureOpenAITextVectorizer Class API Reference
DESCRIPTION: Detailed API documentation for the `AzureOpenAITextVectorizer` class, explaining its purpose, inheritance, and key requirements for Azure OpenAI API interaction. It highlights the need for an API key, deployment endpoint, and API version, and mentions support for synchronous and asynchronous operations, along with optional caching.
SOURCE: https://github.com/redis/docs/blob/main/content/integrate/redisvl/api/vectorizer.md#_snippet_6

LANGUAGE: APIDOC
CODE:
```
AzureOpenAITextVectorizer:
  class AzureOpenAITextVectorizer(model='text-embedding-ada-002', api_config=None, dtype='float32', cache=None, *, dims=None)
  Bases: BaseVectorizer

  Description:
    The AzureOpenAITextVectorizer class utilizes AzureOpenAI’s API to generate embeddings for text data.
    This vectorizer is designed to interact with AzureOpenAI’s embeddings API, requiring an API key, an AzureOpenAI deployment endpoint and API version.
    These values can be provided directly in the api_config dictionary with the parameters ‘azure_endpoint’, ‘api_version’ and ‘api_key’ or through the environment variables ‘AZURE_OPENAI_ENDPOINT’, ‘OPENAI_API_VERSION’, and ‘AZURE_OPENAI_API_KEY’.
    Users must obtain these values from the ‘Keys and Endpoints’ section in their Azure OpenAI service.
    Additionally, the openai python client must be installed with pip install openai>=1.13.0.
    The vectorizer supports both synchronous and asynchronous operations, allowing for batch processing of texts and flexibility in handling preprocessing tasks.
    You can optionally enable caching to improve performance when generating embeddings for repeated text inputs.
```

----------------------------------------

TITLE: Python EmbeddingsCache aget Method
DESCRIPTION: Documents the `aget()` method, an asynchronous function for retrieving a cached embedding. It fetches the embedding associated with the given text and model name, and if found, it also refreshes the entry's time-to-live (TTL).
SOURCE: https://github.com/redis/docs/blob/main/content/integrate/redisvl/api/cache.md#_snippet_34

LANGUAGE: APIDOC
CODE:
```
async aget(text, model_name)
  Async get embedding by text and model name.
  Asynchronously retrieves a cached embedding for the given text and model name.
  If found, refreshes the TTL of the entry.
  Parameters:
    text (str): The text input that was embedded.
    model_name (str): The name of the embedding model.
  Returns:
    Embedding cache entry or None if not found.
  Return type:
    Optional[Dict[str, Any]]
```

----------------------------------------

TITLE: Redis Timeseries: Grouping and Reducing by Label
DESCRIPTION: This Redis command demonstrates how to find the minimum temperature per region across multiple timeseries. It uses `TS.MRANGE` to query a range, `FILTER` to select specific regions, `GROUPBY` to group results by the 'region' label, and `REDUCE` with 'min' to find the minimum value within each group.
SOURCE: https://github.com/redis/docs/blob/main/content/develop/data-types/timeseries/quickstart.md#_snippet_18

LANGUAGE: Redis
CODE:
```
TS.MRANGE - + FILTER region=(east,west) GROUPBY region REDUCE min
```

----------------------------------------

TITLE: Redis Scripting: Parameterizing Scripts with ARGV
DESCRIPTION: Illustrates the recommended way to pass arguments to Redis Lua scripts using the `ARGV` global variable. This method allows for script reuse and improves cache efficiency compared to dynamic script generation.
SOURCE: https://github.com/redis/docs/blob/main/content/develop/interact/programmability/eval-intro.md#_snippet_2

LANGUAGE: Redis CLI
CODE:
```
redis> EVAL "return ARGV[1]" 0 Hello
"Hello"
redis> EVAL "return ARGV[1]" 0 Parameterization!
"Parameterization!"
```

----------------------------------------

TITLE: Redis Query Language Syntax Reference
DESCRIPTION: This section outlines the fundamental syntax rules for constructing queries in Redis. It covers basic elements like multi-word phrases, exact phrase matching, logical operators (OR, NOT), prefix matching, and field-specific filtering for text, numeric, geo, and tag fields. It also introduces optional terms for ranking.
SOURCE: https://github.com/redis/docs/blob/main/content/develop/interact/search-and-query/administration/overview.md#_snippet_4

LANGUAGE: APIDOC
CODE:
```
Multi-word phrases:
  Description: Lists of tokens, implying intersection (logical AND) of the terms.
  Example: foo bar baz
```

LANGUAGE: APIDOC
CODE:
```
Exact phrases:
  Description: Wrapped in quotes.
  Example: "hello world"
```

LANGUAGE: APIDOC
CODE:
```
OR unions:
  Description: Expressed with a pipe (|) character.
  Example: hello|hallo|shalom|hola
```

LANGUAGE: APIDOC
CODE:
```
NOT negation:
  Description: Uses the dash (-) character for expressions or sub-queries.
  Example: hello -world
```

LANGUAGE: APIDOC
CODE:
```
Prefix matches:
  Description: All terms starting with a 2-letter or longer prefix, followed by a (*).
  Example: pre*
```

LANGUAGE: APIDOC
CODE:
```
Selection of specific fields:
  Description: Using the syntax @field:value.
  Example: @field:hello world
```

LANGUAGE: APIDOC
CODE:
```
Numeric Range matches:
  Description: On numeric fields with the syntax @field:[{min} {max}].
  Example: @field:[100 500.2]
```

LANGUAGE: APIDOC
CODE:
```
Geo radius matches:
  Description: On geo fields with the syntax @field:[{lon} {lat} {radius} {m|km|mi|ft}].
  Example: @field:[1.23 4.56 100 km]
```

LANGUAGE: APIDOC
CODE:
```
Tag field filters:
  Description: With the syntax @field:{tag | tag | ...}.
  Example: @field:{tag1 | tag2}
```

LANGUAGE: APIDOC
CODE:
```
Optional terms or clauses:
  Description: Terms that are optional but documents with them rank higher.
  Example: foo ~bar
```

----------------------------------------

TITLE: Redis Enterprise Software REST API Fundamentals
DESCRIPTION: Common concepts for sending API requests to Redis Enterprise Software, including authentication, ports, versions, headers, and response types.
SOURCE: https://github.com/redis/docs/blob/main/content/operate/rs/7.8/references/rest-api/quick-start.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
Authentication: Use Basic Auth with your cluster username (email) and password
Ports: All calls are made to port 9443 by default
Versions: Specify the version in the request URI
Headers: `Accept` and `Content-Type` should be `application/json`
Response types and error codes: A response of `200 OK` means success; otherwise, the request failed due to an error
```

----------------------------------------

TITLE: Redis Stream Concurrent Writes and Synchronization in Active-Active
DESCRIPTION: Demonstrates how Redis Streams handle concurrent XADD operations from multiple regions in an Active-Active database. It shows that after synchronization, both regions have identical streams with unique, merged IDs, even when entries are added simultaneously from different locations.
SOURCE: https://github.com/redis/docs/blob/main/content/operate/rs/7.8/databases/active-active/develop/data-types/streams.md#_snippet_0

LANGUAGE: Redis
CODE:
```
Time: t1
Region 1: XADD messages * text hello
Region 2: XADD messages * text goodbye

Time: t2
Region 1: XRANGE messages - +
          → [1589929244828-1]
Region 2: XRANGE messages - +
          → [1589929246795-2]

Time: t3
Region 1: — Sync —
Region 2: — Sync —

Time: t4
Region 1: XRANGE messages - +
          → [1589929244828-1, 1589929246795-2]
Region 2: XRANGE messages - +
          → [1589929244828-1, 1589929246795-2]
```

----------------------------------------

TITLE: Ruby script for Redis memory optimization comparison
DESCRIPTION: A Ruby program that connects to Redis and populates it with 100,000 objects. It includes a USE_OPTIMIZATION flag to switch between the memory-efficient hash-based storage and standard Redis key storage, allowing for a direct comparison of memory usage. Helper functions `hash_get_key_field`, `hash_set`, and `hash_get` are provided to implement the optimized approach.
SOURCE: https://github.com/redis/docs/blob/main/content/operate/oss_and_stack/management/optimization/memory-optimization.md#_snippet_4

LANGUAGE: Ruby
CODE:
```
require 'rubygems'
require 'redis'

USE_OPTIMIZATION = true

def hash_get_key_field(key)
  s = key.split(':')
  if s[1].length > 2
    { key: s[0] + ':' + s[1][0..-3], field: s[1][-2..-1] }
  else
    { key: s[0] + ':', field: s[1] }
  end
end

def hash_set(r, key, value)
  kf = hash_get_key_field(key)
  r.hset(kf[:key], kf[:field], value)
end

def hash_get(r, key, value)
  kf = hash_get_key_field(key)
  r.hget(kf[:key], kf[:field], value)
end

r = Redis.new
(0..100_000).each do |id|
  key = "object:#{id}"
  if USE_OPTIMIZATION
    hash_set(r, key, 'val')
  else
    r.set(key, 'val')
  end
end
```

----------------------------------------

TITLE: Connect to Redis CLI using URI
DESCRIPTION: Explains how to connect to a Redis server using a full URI string with the `-u` option, including username, password, host, port, and database number.
SOURCE: https://github.com/redis/docs/blob/main/content/develop/tools/cli.md#_snippet_8

LANGUAGE: Shell
CODE:
```
$ redis-cli -u redis://LJenkins:p%40ssw0rd@redis-16379.hosted.com:16379/0 PING
PONG
```

----------------------------------------

TITLE: Optimize Query Performance with Batch Search in Python
DESCRIPTION: This snippet demonstrates how to significantly improve query performance by using Redis's batch search capability. It executes 200 queries in batches of 10, drastically reducing the total execution time compared to sequential queries by minimizing network round trips.
SOURCE: https://github.com/redis/docs/blob/main/content/integrate/redisvl/user_guide/release_guide/0_5_0_release.md#_snippet_11

LANGUAGE: python
CODE:
```
batched_queries = [filter_query] * num_queries

start = time.time()

index.batch_search(batched_queries, batch_size=10)

end = time.time()
print(f"Time taken for {num_queries} batched queries: {end - start:.2f} seconds")
```

----------------------------------------

TITLE: Implement Asynchronous Connection Pooling with Lettuce
DESCRIPTION: Provides an example of how to set up and use asynchronous connection pooling with Lettuce, leveraging `AsyncConnectionPoolSupport`. It demonstrates acquiring, using, and releasing connections from the pool for executing Redis commands, including transaction management.
SOURCE: https://github.com/redis/docs/blob/main/content/develop/clients/lettuce/connect.md#_snippet_6

LANGUAGE: java
CODE:
```
package org.example;
import io.lettuce.core.RedisClient;
import io.lettuce.core.RedisURI;
import io.lettuce.core.TransactionResult;
import io.lettuce.core.api.StatefulRedisConnection;
import io.lettuce.core.api.async.RedisAsyncCommands;
import io.lettuce.core.codec.StringCodec;
import io.lettuce.core.support.*;

import java.util.concurrent.CompletableFuture;
import java.util.concurrent.CompletionStage;

public class Pool {
  public static void main(String[] args) {
    RedisClient client = RedisClient.create();

    String host = "localhost";
    int port = 6379;

    CompletionStage<BoundedAsyncPool<StatefulRedisConnection<String, String>>> poolFuture
        = AsyncConnectionPoolSupport.createBoundedObjectPoolAsync(
            () -> client.connectAsync(StringCodec.UTF8, RedisURI.create(host, port)),
            BoundedPoolConfig.create());

    // await poolFuture initialization to avoid NoSuchElementException: Pool exhausted when starting your application
    AsyncPool<StatefulRedisConnection<String, String>> pool = poolFuture.toCompletableFuture()
        .join();

    // execute work
    CompletableFuture<TransactionResult> transactionResult = pool.acquire()
        .thenCompose(connection -> {

          RedisAsyncCommands<String, String> async = connection.async();

          async.multi();
          async.set("key", "value");
          async.set("key2", "value2");
          System.out.println("Executed commands in pipeline");
          return async.exec().whenComplete((s, throwable) -> pool.release(connection));
        });
    transactionResult.join();

    // terminating
    pool.closeAsync();

    // after pool completion
    client.shutdownAsync();
  }
}
```

----------------------------------------

TITLE: Redis INCR Command
DESCRIPTION: Increments the integer value of a key by one. This command is supported in Redis Enterprise Standard and Active-Active, and Redis Cloud Standard and Active-Active.
SOURCE: https://github.com/redis/docs/blob/main/content/operate/rs/7.8/references/compatibility/commands/data-types.md#_snippet_66

LANGUAGE: APIDOC
CODE:
```
Command: INCR
Redis Enterprise: Standard, Active-Active
Redis Cloud: Standard, Active-Active
```

----------------------------------------

TITLE: Redis List Basic Commands Reference
DESCRIPTION: A reference for fundamental Redis commands used to manipulate list data types, including adding, removing, checking length, moving, and ranging elements.
SOURCE: https://github.com/redis/docs/blob/main/content/develop/data-types/lists.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
LPUSH: Adds a new element to the head of a list.
RPUSH: Adds a new element to the tail of a list.
LPOP: Removes and returns an element from the head of a list.
RPOP: Removes and returns an element from the tail of a list.
LLEN: Returns the length of a list.
LMOVE: Atomically moves elements from one list to another.
LRANGE: Extracts a range of elements from a list.
LTRIM: Reduces a list to the specified range of elements.
```

----------------------------------------

TITLE: Initialize a basic Redis connection in Python
DESCRIPTION: Establishes a connection to a Redis server on localhost:6379. The `decode_responses=True` parameter ensures that responses are returned as decoded strings rather than bytes.
SOURCE: https://github.com/redis/docs/blob/main/content/develop/clients/redis-py/connect.md#_snippet_0

LANGUAGE: python
CODE:
```
r = redis.Redis(host='localhost', port=6379, decode_responses=True)
```

----------------------------------------

TITLE: Redis ZRANGE by Score with LIMIT Option
DESCRIPTION: Shows how to query a sorted set using ZRANGE with BYSCORE to filter elements based on a score range and LIMIT to paginate the results, specifically demonstrating exclusion of a score and retrieving a specific element.
SOURCE: https://github.com/redis/docs/blob/main/content/commands/zrange.md#_snippet_6

LANGUAGE: Redis CLI
CODE:
```
ZADD myzset 1 "one" 2 "two" 3 "three"
ZRANGE myzset (1 +inf BYSCORE LIMIT 1 1
```

----------------------------------------

TITLE: Demonstrate Quantization Effects on Vector Values
DESCRIPTION: This snippet illustrates how different quantization modes (Q8, NOQUANT, BIN) affect the stored values of a simple 2-dimensional vector when added to a Redis vector set. It shows the `VADD` command for insertion and `VEMB` for retrieving the embedded vector values, highlighting the precision trade-offs.
SOURCE: https://github.com/redis/docs/blob/main/content/develop/data-types/vector-sets/performance.md#_snippet_0

LANGUAGE: Redis CLI
CODE:
```
> VADD quantSetQ8 VALUES 2 1.262185 1.958231 quantElement Q8
(integer) 1
> VEMB quantSetQ8 quantElement
1) "1.2643694877624512"
2) "1.958230972290039"

> VADD quantSetNoQ VALUES 2 1.262185 1.958231 quantElement NOQUANT
(integer) 1
> VEMB quantSetNoQ quantElement
1) "1.262184977531433"
2) "1.958230972290039"

> VADD quantSetBin VALUES 2 1.262185 1.958231 quantElement BIN
(integer) 1
> VEMB quantSetBin quantElement
1) "1"
2) "1"
```

----------------------------------------

TITLE: Check Redis Database Version
DESCRIPTION: This command uses `redis-cli` to connect to a Redis instance and execute the `INFO` command to retrieve server information, including the `redis_version`. Replace `<port>` with your Redis port.
SOURCE: https://github.com/redis/docs/blob/main/content/operate/rc/changelog/july-2024.md#_snippet_0

LANGUAGE: sh
CODE:
```
$ redis-cli -p <port> INFO
"# Server
redis_version:7.0.8
..."
```

----------------------------------------

TITLE: Initialize Huggingface Text Vectorizer and Embed Text
DESCRIPTION: This Python snippet demonstrates how to initialize the `HFTextVectorizer` with a specified Sentence Transformer model from Huggingface. It also shows how to embed a single sentence. The `TOKENIZERS_PARALLELISM` environment variable is set to avoid potential warnings.
SOURCE: https://github.com/redis/docs/blob/main/content/integrate/redisvl/user_guide/vectorizers.md#_snippet_12

LANGUAGE: python
CODE:
```
os.environ["TOKENIZERS_PARALLELISM"] = "false"
from redisvl.utils.vectorize import HFTextVectorizer


# create a vectorizer
# choose your model from the huggingface website
hf = HFTextVectorizer(model="sentence-transformers/all-mpnet-base-v2")

# embed a sentence
test = hf.embed("This is a test sentence.")
test[:10]
```

----------------------------------------

TITLE: Incrementing a numeric value in Redis with INCR
DESCRIPTION: Illustrates the INCR command in Redis, which atomically increments a numeric value stored at a key. It first sets 'foo' to 10, then shows successive increments.
SOURCE: https://github.com/redis/docs/blob/main/content/develop/use/patterns/twitter-clone.md#_snippet_2

LANGUAGE: Redis
CODE:
```
SET foo 10
INCR foo => 11
INCR foo => 12
INCR foo => 13
```

----------------------------------------

TITLE: Create Redis ACL using cURL and Python
DESCRIPTION: Demonstrates how to create a Redis ACL object using both cURL and Python, including authentication and JSON payload construction for the POST /v1/redis_acls endpoint.
SOURCE: https://github.com/redis/docs/blob/main/content/operate/rs/7.4/references/rest-api/requests/redis_acls/_index.md#_snippet_9

LANGUAGE: sh
CODE:
```
curl -k -u "[username]:[password]" -X POST \
     -H 'Content-Type: application/json' \
     -d '{ "name": "Geo", "acl": "~* +@geo" }' \
     https://[host][:port]/v1/redis_acls
```

LANGUAGE: python
CODE:
```
import requests
import json

url = "https://[host][:port]/v1/redis_acls"

headers = {
  'Content-Type': 'application/json'
}

payload = json.dumps({
    "name": "Geo",
    "acl": "~* +@geo"
})
auth=("[username]", "[password]")

response = requests.request("POST", url,
           auth=auth, headers=headers, payload=payload, verify=False)

print(response.text)
```

----------------------------------------

TITLE: Redis CLI: Multiple String Set and Get (MSET, MGET)
DESCRIPTION: This snippet shows how to efficiently set and retrieve multiple string key-value pairs in a single operation using MSET and MGET. MGET returns an array of values corresponding to the requested keys.
SOURCE: https://github.com/redis/docs/blob/main/content/develop/data-types/strings.md#_snippet_2

LANGUAGE: Redis CLI
CODE:
```
> mset bike:1 "Deimos" bike:2 "Ares" bike:3 "Vanth"
OK
> mget bike:1 bike:2 bike:3
1) "Deimos"
2) "Ares"
3) "Vanth"
```

----------------------------------------

TITLE: Resolve Database Endpoint on Client Machine
DESCRIPTION: Tests if the database endpoint can be resolved from the client machine using `dig`, which is crucial for verifying network connectivity and DNS configuration.
SOURCE: https://github.com/redis/docs/blob/main/content/operate/rs/7.4/databases/connect/troubleshooting-guide.md#_snippet_15

LANGUAGE: sh
CODE:
```
dig <endpoint>
```

----------------------------------------

TITLE: Upload Redis Module using Python Requests (v1)
DESCRIPTION: Python script demonstrating how to upload a Redis module using the `requests` library to the /v1/modules endpoint. It handles file upload as multipart form data and basic authentication.
SOURCE: https://github.com/redis/docs/blob/main/content/operate/rs/7.8/references/rest-api/requests/modules/_index.md#_snippet_7

LANGUAGE: python
CODE:
```
import requests

url = "https://[host][:port]/v1/modules"

files=[
    ('module',
        ('rejson.Linux-ubuntu18.04-x86_64.2.0.8.zip',
        open('/tmp/rejson.Linux-ubuntu18.04-x86_64.2.0.8.zip','rb'),
        'application/zip')
    )
]
auth=("[username]", "[password]")

response = requests.request("POST", url,
                            auth=auth, files=files, verify=False)

print(response.text)
```

----------------------------------------

TITLE: Redis Aggregate Query Parameter: APPLY
DESCRIPTION: Applies a one-to-one transformation to one or more properties, either creating a new property or replacing an existing one. The `expr` argument supports arithmetic operations, functions, or combinations thereof, evaluated dynamically for each record in the pipeline. The result is stored under the specified `AS {name}`.
SOURCE: https://github.com/redis/docs/blob/main/content/develop/interact/search-and-query/advanced-concepts/aggregations.md#_snippet_8

LANGUAGE: APIDOC
CODE:
```
Parameter: APPLY {expr} AS {name}
Description: Apply a one-to-one transformation on one or more properties, and either store the result as a new property down the pipeline, or replace any property using this transformation. expr is an expression that can be used to perform arithmetic operations on numeric properties, or functions that can be applied on properties depending on their types (see below), or any combination thereof.
Example: APPLY "sqrt(@foo)/log(@bar) + 5" AS baz" will evaluate this expression dynamically for each record in the pipeline and store the result as a new property called baz, that can be referenced by further APPLY / SORTBY / GROUPBY / REDUCE operations down the pipeline.
```

----------------------------------------

TITLE: Redis Sorted Set: Concurrent Add with Last Write Win in Active-Active DB
DESCRIPTION: Illustrates concurrent additions of the same element with different scores from two Active-Active database instances. The example shows that the score is resolved using Last Write Win (LWW) after synchronization.
SOURCE: https://github.com/redis/docs/blob/main/content/operate/rs/7.8/databases/active-active/develop/data-types/sorted-sets.md#_snippet_1

LANGUAGE: Redis CLI
CODE:
```
ZADD Z 1.1 x
ZADD Z 2.1 x
ZSCORE Z x
```

----------------------------------------

TITLE: Redis Cluster Settings Object Reference
DESCRIPTION: Defines various configurable parameters for managing Redis cluster resources and behavior, including settings for automatic recovery, shard migration, data encryption, auditing, backup processes, and failure detection.
SOURCE: https://github.com/redis/docs/blob/main/content/operate/rs/7.4/references/rest-api/objects/cluster_settings.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
ClusterSettingsObject:
  acl_pubsub_default:
    Type: resetchannels | allchannels
    Description: Default pub/sub ACL rule for all databases in the cluster:
      • resetchannels blocks access to all channels (restrictive)
      • allchannels allows access to all channels (permissive)
  auto_recovery:
    Type: boolean (default: false)
    Description: Defines whether to use automatic recovery after shard failure
  automatic_node_offload:
    Type: boolean (default: true)
    Description: Defines whether the cluster will automatically migrate shards from a node, in case the node is overbooked
  bigstore_migrate_node_threshold:
    Type: integer
    Description: Minimum free memory (excluding reserved memory) allowed on a node before automatic migration of shards from it to free more memory
  bigstore_migrate_node_threshold_p:
    Type: integer
    Description: Minimum free memory (excluding reserved memory) allowed on a node before automatic migration of shards from it to free more memory
  bigstore_provision_node_threshold:
    Type: integer
    Description: Minimum free memory (excluding reserved memory) allowed on a node before new shards can no longer be added to it
  bigstore_provision_node_threshold_p:
    Type: integer
    Description: Minimum free memory (excluding reserved memory) allowed on a node before new shards can no longer be added to it
  data_internode_encryption:
    Type: boolean
    Description: Enable/deactivate encryption of the data plane internode communication
  db_conns_auditing:
    Type: boolean
    Description: Audit connections for new databases by default if set to true.
  default_concurrent_restore_actions:
    Type: integer
    Description: Default number of restore actions allowed at the same time. Set to 0 to allow any number of simultaneous restore actions.
  default_fork_evict_ram:
    Type: boolean
    Description: If true, the bdbs should evict data from RAM to ensure successful replication or persistence
  default_non_sharded_proxy_policy:
    Type: single | all-master-shards | all-nodes
    Description: Default proxy_policy for newly created non-sharded databases' endpoints
  default_provisioned_redis_version:
    Type: string
    Description: Default Redis version
  default_sharded_proxy_policy:
    Type: single | all-master-shards | all-nodes
    Description: Default proxy_policy for newly created sharded databases' endpoints
  default_shards_placement:
    Type: dense | sparse
    Description: Default shards_placement for a newly created databases
  endpoint_rebind_propagation_grace_time:
    Type: integer
    Description: Time to wait between the addition and removal of a proxy
  failure_detection_sensitivity:
    Type: high | low
    Description: Predefined thresholds and timeouts for failure detection (previously known as watchdog_profile)
      • high (previously local-network) – high failure detection sensitivity, lower thresholds, faster failure detection and failover
      • low (previously cloud) – low failure detection sensitivity, higher tolerance for latency variance (also called network jitter)
  hide_user_data_from_log:
    Type: boolean (default: false)
    Description: Set to true to enable the hide-user-data-from-log Redis configuration setting, which avoids logging user data
  login_lockout_counter_reset_after:
    Type: integer
    Description: Number of seconds that must elapse between failed sign in attempts before the lockout counter is reset to 0.
  login_lockout_duration:
    Type: integer
    Description: Duration (in secs) of account lockout. If set to 0, the account lockout will persist until released by an admin.
  login_lockout_threshold:
    Type: integer
    Description: Number of failed sign in attempts allowed before locking a user account
  max_saved_events_per_type:
    Type: integer
    Description: Maximum saved events per event type
  max_simultaneous_backups:
    Type: integer (default: 4)
    Description: Maximum number of backup processes allowed at the same time
  parallel_shards_upgrade:
    Type: integer
    Description: Maximum number of shards to upgrade in parallel
  persistence_cleanup_scan_interval:
    Type: string
    Description: CRON expression that defines the Redis cleanup schedule
  persistent_node_removal:
    Type: boolean
    Description: When removing a node, wait for persistence files to be created for all migrated shards
  rack_aware:
    Type: boolean
    Description: Cluster operates in a rack-aware mode
  redis_migrate_node_threshold:
    Type: integer
    Description: Minimum free memory (excluding reserved memory) allowed on a node before automatic migration of shards from it to free more memory
  redis_migrate_node_threshold_p:
    Type: integer
    Description: Minimum free memory (excluding reserved memory) allowed on a node before automatic migration of shards from it to free more memory
```

----------------------------------------

TITLE: Adding elements to a numerical sorted set index
DESCRIPTION: This snippet demonstrates how to add elements to a Redis sorted set, where the score represents a numerical field (e.g., age) and the member is the item being indexed (e.g., a person's name). This creates a simple numerical secondary index.
SOURCE: https://github.com/redis/docs/blob/main/content/develop/use/patterns/indexes/index.md#_snippet_0

LANGUAGE: Redis
CODE:
```
ZADD myindex 25 Manuel
ZADD myindex 18 Anna
ZADD myindex 35 Jon
ZADD myindex 67 Helen
```

----------------------------------------

TITLE: Run Redis Stack with Docker
DESCRIPTION: Launches a Redis Stack instance as a Docker container in detached mode. It exposes Redis on port 6379 and the Redis Insight GUI on port 8001, providing a local Redis instance with Redis Query Engine features.
SOURCE: https://github.com/redis/docs/blob/main/content/integrate/redisvl/install.md#_snippet_1

LANGUAGE: shell
CODE:
```
docker run -d --name redis -p 6379:6379 -p 8001:8001 redis/redis-stack:latest
```

----------------------------------------

TITLE: Measure LLM Cache Latency and Performance Improvement
DESCRIPTION: This Python snippet calculates the average time taken to answer a question with an LLM cache enabled. It iterates multiple times, records the duration for each cached response, and then computes the average time and the percentage of time saved compared to a baseline (assumed to be 'end - start'). This helps quantify the performance benefits of caching.
SOURCE: https://github.com/redis/docs/blob/main/content/integrate/redisvl/user_guide/llmcache.md#_snippet_17

LANGUAGE: python
CODE:
```
times = []

for _ in range(10):
    cached_start = time.time()
    cached_answer = answer_question(question)
    cached_end = time.time()
    times.append(cached_end-cached_start)

avg_time_with_cache = np.mean(times)
print(f"Avg time taken with LLM cache enabled: {avg_time_with_cache}")
print(f"Percentage of time saved: {round(((end - start) - avg_time_with_cache) / (end - start) * 100, 2)}%")
```

----------------------------------------

TITLE: Generate Float Array Embeddings for JSON in C#
DESCRIPTION: This C# function, "GetFloatEmbedding", illustrates how to convert a text sentence into a float array embedding. This modification is crucial for storing vector data in JSON documents, as Redis JSON expects float arrays for vector fields, unlike binary strings used for hash indexing.
SOURCE: https://github.com/redis/docs/blob/main/content/develop/clients/dotnet/vecsearch.md#_snippet_16

LANGUAGE: cs
CODE:
```
static float[] GetFloatEmbedding(
    PredictionEngine<TextData, TransformedTextData> model, string sentence
)
{
    // Call the prediction API to convert the text into embedding vector.
    var data = new TextData()
    {
        Text = sentence
    };

    var prediction = model.Predict(data);

    float[] floatArray = Array.ConvertAll(prediction.Features, x => (float)x);
    return floatArray;
}
```

----------------------------------------

TITLE: Redis HSETNX Command
DESCRIPTION: Sets the value of a hash field only if the field does not already exist. This command is supported in Redis Enterprise Standard, Active-Active, Redis Cloud Standard, and Active-Active deployments.
SOURCE: https://github.com/redis/docs/blob/main/content/operate/rs/7.4/references/compatibility/commands/data-types.md#_snippet_15

LANGUAGE: Redis
CODE:
```
HSETNX key field value
```

----------------------------------------

TITLE: Redis SETNX Command Example
DESCRIPTION: Demonstrates the basic usage of SETNX to set a key only if it does not exist, and then attempting to set it again to show it fails, followed by retrieving the key's value.
SOURCE: https://github.com/redis/docs/blob/main/content/commands/setnx.md#_snippet_1

LANGUAGE: Redis CLI
CODE:
```
SETNX mykey "Hello"
SETNX mykey "World"
GET mykey
```

----------------------------------------

TITLE: Install Redis Open Source on Ubuntu/Debian using APT
DESCRIPTION: Adds the Redis repository to the APT index, updates it, and installs the latest Redis Open Source version along with redis-tools.
SOURCE: https://github.com/redis/docs/blob/main/content/operate/oss_and_stack/install/install-stack/apt.md#_snippet_0

LANGUAGE: bash
CODE:
```
sudo apt-get install lsb-release curl gpg
curl -fsSL https://packages.redis.io/gpg | sudo gpg --dearmor -o /usr/share/keyrings/redis-archive-keyring.gpg
sudo chmod 644 /usr/share/keyrings/redis-archive-keyring.gpg
echo "deb [signed-by=/usr/share/keyrings/redis-archive-keyring.gpg] https://packages.redis.io/deb $(lsb_release -cs) main" | sudo tee /etc/apt/sources.list.d/redis.list
sudo apt-get update
sudo apt-get install redis
```

----------------------------------------

TITLE: Perform Hybrid Query with Tag Filter in RedisVL
DESCRIPTION: This example demonstrates a hybrid query combining vector similarity search with a tag filter. It constructs a `VectorQuery` with a specific vector, target vector field, desired return fields, and a `Tag` filter to narrow results to users with a 'high' credit score. The query is then executed against the RedisVL index, and the results are printed.
SOURCE: https://github.com/redis/docs/blob/main/content/integrate/redisvl/user_guide/hybrid_queries.md#_snippet_6

LANGUAGE: python
CODE:
```
from redisvl.query import VectorQuery
from redisvl.query.filter import Tag

t = Tag("credit_score") == "high"

v = VectorQuery(
    vector=[0.1, 0.1, 0.5],
    vector_field_name="user_embedding",
    return_fields=["user", "credit_score", "age", "job", "office_location", "last_updated"],
    filter_expression=t
)

results = index.query(v)
result_print(results)
```

----------------------------------------

TITLE: Redis Enterprise Database Kubernetes API Specification
DESCRIPTION: This section details the API specification for the "RedisEnterpriseDatabase" Custom Resource Definition (CRD) used in Kubernetes. It outlines the structure and available parameters for defining a Redis Enterprise Database instance, including its memory allocation, shard count, and replication status.
SOURCE: https://github.com/redis/docs/blob/main/content/embeds/k8s/redb.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
RedisEnterpriseDatabase (Kind):
  apiVersion: app.redislabs.com/v1alpha1
  kind: RedisEnterpriseDatabase
  metadata:
    name: string
      Description: Name of the Redis Enterprise Database instance.
      Example: "redb"
    labels: object
      Description: Standard Kubernetes labels for the resource.
      Example: {"app": "redis-enterprise"}
  spec:
    memorySize: string
      Description: Memory size of the database.
      Example: "256MB"
    shardCount: integer
      Description: Number of shards in the database.
      Example: 1
    replication: boolean
      Description: Determines whether replication will be enabled for the database.
      Example: false
```

----------------------------------------

TITLE: Add Data with Embeddings using PHP hmset
DESCRIPTION: This PHP code demonstrates how to add multiple data entries to Redis, each with an associated embedding. It uses a `$extractor()` function (assumed to be defined elsewhere) to generate embeddings from content strings, applying normalization and pooling. The `hmset()` command stores the content, genre, and the binary-packed embedding vector. The `pack('g*', ...$emb[0])` function is crucial for converting the float array embedding into a binary string suitable for Redis hash fields.
SOURCE: https://github.com/redis/docs/blob/main/content/develop/clients/php/vecsearch.md#_snippet_5

LANGUAGE: php
CODE:
```
$content = "That is a very happy person";
$emb = $extractor($content, normalize: true, pooling: 'mean');

$client->hmset("doc:0",[
    "content" => $content,
    "genre" => "persons",
    "embedding" => pack('g*', ...$emb[0])
]);

$content = "That is a happy dog";
$emb = $extractor($content, normalize: true, pooling: 'mean');

$client->hmset("doc:1",[
    "content" => $content,
    "genre" => "pets",
    "embedding" => pack('g*', ...$emb[0])
]);

$content = "Today is a sunny day";
$emb = $extractor($content, normalize: true, pooling: 'mean');

$client->hmset("doc:2",[
    "content" => $content,
    "genre" => "weather",
    "embedding" => pack('g*', ...$emb[0])
]);
```

----------------------------------------

TITLE: Create Hosted Service for Redis.OM Index Creation
DESCRIPTION: This C# code defines `IndexCreationService`, an `IHostedService` that creates the Redis index for the `Person` model on application startup. It leverages `RedisConnectionProvider` to interact with Redis and ensures the index is present when the application begins.
SOURCE: https://github.com/redis/docs/blob/main/content/integrate/redisom-for-net/_index.md#_snippet_6

LANGUAGE: csharp
CODE:
```
using Redis.OM.Skeleton.Model;

namespace Redis.OM.Skeleton.HostedServices;

public class IndexCreationService : IHostedService
{
    private readonly RedisConnectionProvider _provider;
    public IndexCreationService(RedisConnectionProvider provider)
    {
        _provider = provider;
    }
    
    public async Task StartAsync(CancellationToken cancellationToken)
    {
        await _provider.Connection.CreateIndexAsync(typeof(Person));
    }

    public Task StopAsync(CancellationToken cancellationToken)
    {
        return Task.CompletedTask;
    }
}
```

----------------------------------------

TITLE: Redis Search Index Schema Changes: FT.ALTER vs. Aliasing
DESCRIPTION: Explains when to use FT.ALTER for adding new fields without rebuilding, and when to use index aliasing with FT.ALIASUPDATE for more significant schema changes like modifying or removing fields, ensuring seamless transitions.
SOURCE: https://github.com/redis/docs/blob/main/content/develop/interact/search-and-query/best-practices/index-mgmt-best-practices.md#_snippet_9

LANGUAGE: APIDOC
CODE:
```
FT.ALTER: Add new fields to an existing index without rebuilding. Cannot remove or modify existing fields.
FT.ALIASUPDATE: Seamlessly switch queries to a new index with updated schema after reindexing.
```

----------------------------------------

TITLE: Create Redis Vector Search Index Schema (Java)
DESCRIPTION: Defines and creates a Redis vector search index named `vector_idx`. The schema includes fields for `content` (text), `genre` (tag), and `embedding` (vector). The `embedding` field is configured for HNSW indexing with `Float32` values, 768 dimensions, and L2 distance metric. The index is set to operate on hash objects with a `doc:` prefix.
SOURCE: https://github.com/redis/docs/blob/main/content/develop/clients/jedis/vecsearch.md#_snippet_6

LANGUAGE: java
CODE:
```
SchemaField[] schema = {
    TextField.of("content"),
    TagField.of("genre"),
    VectorField.builder()
        .fieldName("embedding")
        .algorithm(VectorAlgorithm.HNSW)
        .attributes(
            Map.of(
                "TYPE", "FLOAT32",
                "DIM", 768,
                "DISTANCE_METRIC", "L2"
            )
        )
        .build()
};

jedis.ftCreate("vector_idx",
    FTCreateParams.createParams()
        .addPrefix("doc:")
        .on(IndexDataType.HASH),
        schema
);
```

----------------------------------------

TITLE: Execute Redis Command on Specific Database Number
DESCRIPTION: Shows how to select a specific database number (e.g., database 1 or 2) using the `-n` option with `redis-cli` before executing commands, demonstrating isolation between databases.
SOURCE: https://github.com/redis/docs/blob/main/content/develop/tools/cli.md#_snippet_7

LANGUAGE: Shell
CODE:
```
$ redis-cli FLUSHALL
OK
$ redis-cli -n 1 INCR a
(integer) 1
$ redis-cli -n 1 INCR a
(integer) 2
$ redis-cli -n 2 INCR a
(integer) 1
```

----------------------------------------

TITLE: Redis Cluster Monitoring Events and Alerts Reference
DESCRIPTION: This section provides a detailed list of system-generated events and alerts for Redis clusters. Each entry includes the event identifier, a description of what it signifies, its severity (error, warning, or info), and the alert category (e.g., node alert, cluster event). Some entries also specify parameters or additional context.
SOURCE: https://github.com/redis/docs/blob/main/content/operate/rs/7.4/clusters/logging/alerts-events.md#_snippet_17

LANGUAGE: APIDOC
CODE:
```
Event: insufficient_disk_aofrw
Description: Node has insufficient disk space for AOF rewrite
Severity: True: error, False: info
Category: node alert

Event: internal_bdb
Description: Issues with internal cluster databases
Severity: True: warning, False: info
Category: cluster alert

Event: license_added
Description: 
Severity: info
Category: cluster event

Event: license_deleted
Description: 
Severity: info
Category: cluster event

Event: license_updated
Description: 
Severity: info
Category: cluster event

Event: low_throughput
Description: Throughput is lower than <threshold> RPS (requests per second)
Severity: True: warning, False: info
Category: bdb alert; Has threshold parameter in the key/value section of the log entry.

Event: memory
Description: Node memory has reached <threshold>% of its capacity
Severity: True: warning, False: info
Category: node alert; Has global_threshold parameter in the key/value section of the log entry.

Event: multiple_nodes_down
Description: Multiple cluster nodes are down - this might cause data loss
Severity: True: warning, False: info
Category: cluster alert

Event: net_throughput
Description: Network throughput has reached <threshold>MB/s
Severity: True: warning, False: info
Category: node alert; Has global_threshold parameter in the key/value section of the log entry.

Event: node_abort_remove_request
Description: 
Severity: info
Category: node event

Event: node_joined
Description: Node joined
Severity: info
Category: cluster event

Event: node_operation_failed
Description: Node operation failed
Severity: error
Category: cluster event

Event: node_remove_abort_completed
Description: Node removed
Severity: info
Category: cluster event; The remove node is a process that can fail and can also be aborted. If aborted, the abort can succeed or fail.

Event: node_remove_abort_failed
Description: Node removed
Severity: error
Category: cluster event; The remove node is a process that can fail and can also be aborted. If aborted, the abort can succeed or fail.

Event: node_remove_completed
Description: Node removed
Severity: info
Category: cluster event; The remove node is a process that can fail and can also be aborted. If aborted, the abort can succeed or fail.

Event: node_remove_failed
Description: Node removed
Severity: error
Category: cluster event; The remove node is a process that can fail and can also be aborted. If aborted, the abort can succeed or fail.

Event: node_remove_request
Description: 
Severity: info
Category: node event
```

----------------------------------------

TITLE: Create Vector Index with FT.CREATE Command
DESCRIPTION: This command defines a vector index in Redis, applicable for use with both Redis Insight and `redis-cli`. It creates a HASH-based index with fields for text, metadata, and a FLAT vector, specifying the vector's type, dimension, and distance metric. Users must replace placeholders with their specific index and field names.
SOURCE: https://github.com/redis/docs/blob/main/content/integrate/amazon-bedrock/set-up-redis.md#_snippet_2

LANGUAGE: text
CODE:
```
FT.CREATE <index_name>                    
    ON HASH                
    SCHEMA
        "<text_field>" TEXT
        "<metadata_field>" TEXT                   
        "<vector_field>"  VECTOR FLAT     
            6                          
            "TYPE" "FLOAT32"            
            "DIM" 1536                   
            "DISTANCE_METRIC" "COSINE"
```

----------------------------------------

TITLE: Redis Pipelining Benchmark Output
DESCRIPTION: This snippet displays the console output from running the Redis pipelining benchmark script. It clearly shows the substantial reduction in execution time when using pipelining, highlighting a five-fold performance improvement even on a low-latency loopback interface.
SOURCE: https://github.com/redis/docs/blob/main/content/develop/use/pipelining/index.md#_snippet_2

LANGUAGE: Shell
CODE:
```
without pipelining 1.185238 seconds
with pipelining 0.250783 seconds
```

----------------------------------------

TITLE: RedisTimeSeries TS.ADD Command
DESCRIPTION: The `TS.ADD` command adds a new data point to a time series. It requires a key, a UNIX timestamp in milliseconds, and a numeric value. A `*` can be used for the timestamp to automatically use the current time.
SOURCE: https://github.com/redis/docs/blob/main/content/develop/data-types/timeseries/quickstart.md#_snippet_9

LANGUAGE: Redis CLI
CODE:
```
TS.ADD key timestamp value
```

LANGUAGE: Redis CLI
CODE:
```
TS.ADD sensor1 1626434637914 26
```

LANGUAGE: Redis CLI
CODE:
```
TS.ADD sensor1 * 26
```

----------------------------------------

TITLE: Redis Index Field Types
DESCRIPTION: Describes various field types available for creating indexes in Redis, explaining their primary use cases for different query patterns such as full-text, categorical, numeric, geospatial, and vector searches.
SOURCE: https://github.com/redis/docs/blob/main/content/develop/interact/search-and-query/best-practices/index-mgmt-best-practices.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
TEXT:
  Purpose: Free-text searches
  Usage: Set weights if some fields are more important.

TAG:
  Purpose: Categorical data (e.g., product categories)
  Usage: Benefits from exact matching and filtering.

NUMERIC:
  Purpose: Numeric ranges (e.g., prices, timestamps).

GEO:
  Purpose: Geospatial coordinates (e.g., latitude/longitude).

GEOSHAPE:
  Purpose: Represent locations as points, define shapes, and query interactions between points and shapes (e.g., to find all points that are contained within an enclosing shape).

VECTOR:
  Purpose: High-dimensional similarity searches.
```

----------------------------------------

TITLE: Step-by-Step Redis Cluster Node Upgrade
DESCRIPTION: This section outlines the recommended procedure for upgrading nodes in a Redis Cluster, differentiating between the simpler process for replicas and the more involved steps for masters. It details a graceful master upgrade strategy using manual failover to ensure minimal downtime and data consistency during the upgrade process.
SOURCE: https://github.com/redis/docs/blob/main/content/operate/oss_and_stack/management/scaling.md#_snippet_31

LANGUAGE: Procedural Steps
CODE:
```
Upgrading replica nodes:
1. Stop the node.
2. Restart it with an updated version of Redis.

Upgrading masters:
1. Use CLUSTER FAILOVER to trigger a manual failover of the master to one of its replicas.
   (See the Manual failover in this topic.)
2. Wait for the master to turn into a replica.
3. Finally upgrade the node as you do for replicas.
4. If you want the master to be the node you just upgraded, trigger a new manual failover in order to turn back the upgraded node into a master.
```

----------------------------------------

TITLE: Observe Redis client-side caching behavior with `redis-cli MONITOR`
DESCRIPTION: Compares the `redis-cli MONITOR` output to illustrate the effect of client-side caching. The first output shows all `GET` commands reaching the server when caching is disabled. The second output shows only the initial `GET` reaching the server when caching is enabled, as subsequent requests are served from the client-side cache.
SOURCE: https://github.com/redis/docs/blob/main/content/develop/clients/redis-py/connect.md#_snippet_6

LANGUAGE: cli
CODE:
```
1723109720.268903 [...] "SET" "city" "New York"
1723109720.269681 [...] "GET" "city"
1723109720.270205 [...] "GET" "city"
```

LANGUAGE: cli
CODE:
```
1723110248.712663 [...] "SET" "city" "New York"
1723110248.713607 [...] "GET" "city"
```

----------------------------------------

TITLE: Redis STRALGO LCS Integer Overflow (CVE-2021-29477)
DESCRIPTION: An integer overflow in Redis version 6.0 or newer can be exploited using the STRALGO LCS command, leading to heap corruption and potential remote code execution. This vulnerability affects all Redis versions starting from 6.0, including Redis 6.2.3.
SOURCE: https://github.com/redis/docs/blob/main/content/operate/rs/release-notes/rs-7-4-2-releases/rs-7-4-6-22.md#_snippet_16

LANGUAGE: APIDOC
CODE:
```
Vulnerable Command:
STRALGO LCS
```

----------------------------------------

TITLE: Troubleshoot Redis Connection Refused Error
DESCRIPTION: Provides guidance for resolving a `redis.exceptions.ConnectionError` (Error 61) indicating a connection refused to localhost:6379. This typically means the Redis server is not running and suggests starting the Redis Docker container or setting the `REDIS_OM_URL` environment variable.
SOURCE: https://github.com/redis/docs/blob/main/content/integrate/redisom-for-python/_index.md#_snippet_8

LANGUAGE: py
CODE:
```
raise ConnectionError(self._error_message(e))
redis.exceptions.ConnectionError: Error 61 connecting to localhost:6379. Connection refused.
```

----------------------------------------

TITLE: Mitigating Race Conditions with Placeholder Caching
DESCRIPTION: To prevent race conditions, this interaction flow shows a strategy where the client populates its local cache with a 'caching-in-progress' placeholder immediately upon sending a GET command. If an invalidation message arrives while the data is pending, the placeholder entry is deleted, preventing the stale data from being cached when it eventually arrives.
SOURCE: https://github.com/redis/docs/blob/main/content/develop/reference/client-side-caching.md#_snippet_11

LANGUAGE: Interaction Flow
CODE:
```
Client cache: set the local copy of "foo" to "caching-in-progress"
[D] client-> server: GET foo.
[I] server -> client: Invalidate foo (somebody else touched it)
Client cache: delete "foo" from the local cache.
[D] server -> client: "bar" (the reply of "GET foo")
Client cache: don't set "bar" since the entry for "foo" is missing.
```

----------------------------------------

TITLE: Redis Aggregate Query Parameter: PARAMS
DESCRIPTION: Defines one or more named value parameters that can be referenced within the query string using a `$` prefix (e.g., `$user`). These parameters are substituted with their corresponding values during query evaluation, providing a way to inject dynamic values. Parameters cannot be used where concrete values are not allowed, such as in field names.
SOURCE: https://github.com/redis/docs/blob/main/content/develop/interact/search-and-query/advanced-concepts/aggregations.md#_snippet_11

LANGUAGE: APIDOC
CODE:
```
Parameter: PARAMS {nargs} {name} {value}
Description: Define one or more value parameters. Each parameter has a name and a value. Parameters can be referenced in the query string by a $, followed by the parameter name, e.g., $user, and each such reference in the search query to a parameter name is substituted by the corresponding parameter value.
Limitation: Parameters cannot be referenced in the query string where concrete values are not allowed, such as in field names, e.g., @loc.
Example: with parameter definition PARAMS 4 lon 29.69465 lat 34.95126, the expression @loc:[$lon $lat 10 km] would be evaluated to @loc:[29.69465 34.95126 10 km].
```

----------------------------------------

TITLE: Distributing User Posts to Timelines in PHP with Redis
DESCRIPTION: This PHP code handles the creation and distribution of a new user post. After incrementing a post ID and storing the post content in Redis, it retrieves all followers of the current user. The post ID is then LPUSHed onto the Redis List representing the timeline of each follower, including the author's own timeline. A global timeline is also updated and capped to 1000 entries using LTRIM.
SOURCE: https://github.com/redis/docs/blob/main/content/develop/use/patterns/twitter-clone.md#_snippet_21

LANGUAGE: PHP
CODE:
```
include("retwis.php");

if (!isLoggedIn() || !gt("status")) {
    header("Location:index.php");
    exit;
}

$r = redisLink();
$postid = $r->incr("next_post_id");
$status = str_replace("\n"," ",gt("status"));
$r->hmset("post:$postid","user_id",$User['id'],"time",time(),"body",$status);
$followers = $r->zrange("followers:".$User['id'],0,-1);
$followers[] = $User['id']; /* Add the post to our own posts too */

foreach($followers as $fid) {
    $r->lpush("posts:$fid",$postid);
}
# Push the post on the timeline, and trim the timeline to the
# newest 1000 elements.
$r->lpush("timeline",$postid);
$r->ltrim("timeline",0,1000);

header("Location: index.php");
```

----------------------------------------

TITLE: Redis CLI: Check Key Existence and Delete
DESCRIPTION: Demonstrates how to use the `SET`, `EXISTS`, and `DEL` commands in Redis CLI to create a key, check its existence, and then delete it. The `DEL` command returns 1 if the key was removed, 0 otherwise.
SOURCE: https://github.com/redis/docs/blob/main/content/develop/use/keyspace.md#_snippet_0

LANGUAGE: Redis CLI
CODE:
```
> set mykey hello
OK
> exists mykey
(integer) 1
> del mykey
(integer) 1
> exists mykey
(integer) 0
```

----------------------------------------

TITLE: Execute Redis commands in a pipeline (Python)
DESCRIPTION: Demonstrates how to create a Redis pipeline, add multiple commands like `set` and `get`, and execute them in a single batch to reduce network overhead. Shows how to chain commands for conciseness.
SOURCE: https://github.com/redis/docs/blob/main/content/develop/clients/redis-py/transpipe.md#_snippet_0

LANGUAGE: Python
CODE:
```
import redis

r = redis.Redis(decode_responses=True)

# Create a pipeline object
pipe = r.pipeline()

# Add commands to the pipeline (commands are buffered)
pipe.set('mykey', 'myvalue')
pipe.get('mykey')
pipe.incr('counter')

# Execute all buffered commands
results = pipe.execute()

print(f"Pipeline results: {results}")
# Expected output: [True, 'myvalue', 1]
```

----------------------------------------

TITLE: SQL to Redis Query Engine Predicate Mapping Reference
DESCRIPTION: A detailed reference table illustrating how various SQL WHERE clause conditions, including equality, inequality, logical AND/OR, IN/NOT IN, BETWEEN, and LIKE, are translated into the corresponding Redis Query Engine syntax. Includes comments for clarity and best practices.
SOURCE: https://github.com/redis/docs/blob/main/content/develop/interact/search-and-query/advanced-concepts/query_syntax.md#_snippet_43

LANGUAGE: Redis Query Engine
CODE:
```
SQL Condition: WHERE x='foo' AND y='bar'
Redis Query Engine Equivalent: @x:foo @y:bar
Comments: for less ambiguity use (@x:foo) (@y:bar)
```

LANGUAGE: Redis Query Engine
CODE:
```
SQL Condition: WHERE x='foo' AND y!='bar'
Redis Query Engine Equivalent: @x:foo -@y:bar
```

LANGUAGE: Redis Query Engine
CODE:
```
SQL Condition: WHERE x='foo' OR y='bar'
Redis Query Engine Equivalent: (@x:foo)|(@y:bar)
```

LANGUAGE: Redis Query Engine
CODE:
```
SQL Condition: WHERE x IN ('foo', 'bar','hello world')
Redis Query Engine Equivalent: @x:(foo|bar|"hello world")
Comments: quotes mean exact phrase
```

LANGUAGE: Redis Query Engine
CODE:
```
SQL Condition: WHERE y='foo' AND x NOT IN ('foo','bar')
Redis Query Engine Equivalent: @y:foo (-@x:foo) (-@x:bar)
```

LANGUAGE: Redis Query Engine
CODE:
```
SQL Condition: WHERE x NOT IN ('foo','bar')
Redis Query Engine Equivalent: -@x:(foo|bar)
```

LANGUAGE: Redis Query Engine
CODE:
```
SQL Condition: WHERE num BETWEEN 10 AND 20
Redis Query Engine Equivalent: @num:[10 20]
```

LANGUAGE: Redis Query Engine
CODE:
```
SQL Condition: WHERE num >= 10
Redis Query Engine Equivalent: @num:[10 +inf]
```

LANGUAGE: Redis Query Engine
CODE:
```
SQL Condition: WHERE num > 10
Redis Query Engine Equivalent: @num:[(10 +inf]
```

LANGUAGE: Redis Query Engine
CODE:
```
SQL Condition: WHERE num < 10
Redis Query Engine Equivalent: @num:[-inf (10]
```

LANGUAGE: Redis Query Engine
CODE:
```
SQL Condition: WHERE num <= 10
Redis Query Engine Equivalent: @num:[-inf 10]
```

LANGUAGE: Redis Query Engine
CODE:
```
SQL Condition: WHERE num < 10 OR num > 20
Redis Query Engine Equivalent: @num:[-inf (10] | @num:[(20 +inf]
```

LANGUAGE: Redis Query Engine
CODE:
```
SQL Condition: WHERE name LIKE 'john%'
Redis Query Engine Equivalent: @name:john*
```

----------------------------------------

TITLE: Kubernetes Job and ConfigMap for Redis Replica Database Automation
DESCRIPTION: This YAML defines a Kubernetes Job and a ConfigMap to automate the creation of a Redis replica database. The Job runs a container that installs necessary tools (curl, jq, kubectl) and executes a script from the ConfigMap. The ConfigMap contains the `create.sh` script, which retrieves source database details, constructs a secret with the source URI, and then applies YAML definitions for the secret and the target RedisEnterpriseDatabase resource to create the replica.
SOURCE: https://github.com/redis/docs/blob/main/content/operate/kubernetes/7.8.6/re-databases/replica-redb.md#_snippet_9

LANGUAGE: yaml
CODE:
```
apiVersion: batch/v1
kind: Job
metadata:
  name: replica-of-database
spec:
  backoffLimit: 4
  template:
    spec:
      serviceAccountName: redis-enterprise-operator
      restartPolicy: Never
      volumes:
        - name: scripts
          configMap:
            name: replica-of-database
      containers:
        - name: createdb
          image: debian:stable-slim
          env:
            - name: MY_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: SCRIPT
              value: create.sh
            - name: SOURCE_DB
              valueFrom:
                configMapKeyRef:
                  name: replica-of-database-parameters
                  key: source
            - name: TARGET_DB
              valueFrom:
                configMapKeyRef:
                  name: replica-of-database-parameters
                  key: target
            - name: CLUSTER_SERVICE
              value: .svc.cluster.local
            - name: CLUSTER_NAME
              valueFrom:
                configMapKeyRef:
                  name: replica-of-database-parameters
                  key: cluster
            - name: CLUSTER_PORT
              value: "9443"
            - name: TARGET_CLUSTER_NAME
              valueFrom:
                configMapKeyRef:
                  name: replica-of-database-parameters
                  key: targetCluster
          volumeMounts:
            - mountPath: /opt/scripts/
              name: scripts
          command:
            - /bin/bash
            - -c
            - |
              apt-get update; apt-get install -y curl jq apt-transport-https gnupg2
              apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 6A030B21BA07F4FB
              curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key add -
              echo "deb https://apt.kubernetes.io/ kubernetes-xenial main" | tee -a /etc/apt/sources.list.d/kubernetes.list
              apt-get update
              apt-get install -y kubectl
              bash /opt/scripts/$SCRIPT
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: replica-of-database
data:
  create.sh: |
    CLUSTER_USER=`kubectl get secret/${CLUSTER_NAME} -o json | jq -r .data.username | base64 -d`
    CLUSTER_PASSWORD=`kubectl get secret/${CLUSTER_NAME} -o json | jq -r .data.password | base64 -d`
    CLUSTER_HOST=${CLUSTER_NAME}.${MY_NAMESPACE}${CLUSTER_SERVICE}
    JQ='.[] | select(.name==\"'
    JQ+="${SOURCE_DB}"
    JQ+='\") | (\"redis://admin:\" +  .authentication_admin_pass + \"@\"+.endpoints[0].dns_name+\":\"+(.endpoints[0].port|tostring))'
    URI=`curl -sf -k -u \"$CLUSTER_USER:$CLUSTER_PASSWORD\" \"https://${CLUSTER_HOST}:${CLUSTER_PORT}/v1/bdbs?fields=uid,name,endpoints,authentication_admin_pass\" | jq \"$JQ\" | sed 's/\"//g'`
    echo \"URL: ${URL}\"
    echo \"\"
    cat << EOF > /tmp/secret.yaml
    apiVersion: v1
    kind: Secret
    metadata:
      name: ${SOURCE_DB}-url
    stringData:
      uri: ${URI}
    EOF
    cat /tmp/secret.yaml
    cat << EOF > /tmp/target.yaml
    apiVersion: app.redislabs.com/v1alpha1
    kind: RedisEnterpriseDatabase
    metadata:
      name: ${TARGET_DB}
    spec:
      redisEnterpriseCluster:
        name: ${TARGET_CLUSTER_NAME}
      replicaSources:
      - replicaSourceType: SECRET
        replicaSourceName: ${SOURCE_DB}-url
    EOF
    echo \"---\"
    cat /tmp/target.yaml
    echo \"\"
    kubectl -n ${MY_NAMESPACE} apply -f /tmp/secret.yaml
    kubectl -n ${MY_NAMESPACE} apply -f /tmp/target.yaml
```

----------------------------------------

TITLE: Connect to Redis with Python redis-py client
DESCRIPTION: Shows how to connect to a Redis database from a Python application using the `redis-py` client library, setting and retrieving a key to confirm successful connection and data operations.
SOURCE: https://github.com/redis/docs/blob/main/content/operate/rs/databases/connect/test-client-connectivity.md#_snippet_1

LANGUAGE: python
CODE:
```
import redis

# Connect to the database
r = redis.Redis(host='<host>', port=<port>)

# Store a key
print("set key1 123")
print(r.set('key1', '123'))

# Retrieve the key
print("get key1")
print(r.get('key1'))
```

----------------------------------------

TITLE: Example: Test Redis Connection and Data Operations with redis-cli
DESCRIPTION: This practical example illustrates a sequence of `redis-cli` commands to test database connectivity using PING, store a string value with SET, and retrieve it with GET, demonstrating basic interaction.
SOURCE: https://github.com/redis/docs/blob/main/content/operate/rs/7.4/references/cli-utilities/redis-cli/_index.md#_snippet_6

LANGUAGE: sh
CODE:
```
$ redis-cli -h <endpoint> -p 12000 PING
PONG
$ redis-cli -h <endpoint> -p 12000 SET mykey "Hello world"
OK
$ redis-cli -h <endpoint> -p 12000 GET mykey              
"Hello world"
```

----------------------------------------

TITLE: Acquiring a Lock with Redis SET NX PX
DESCRIPTION: This Redis command attempts to acquire a lock by setting a key with a unique random value. The 'NX' option ensures the key is set only if it does not already exist, and 'PX 30000' sets an expiration of 30 seconds, providing an automatic release mechanism. The random value is crucial for safe lock release.
SOURCE: https://github.com/redis/docs/blob/main/content/develop/use/patterns/distributed-locks.md#_snippet_0

LANGUAGE: Redis
CODE:
```
SET resource_name my_random_value NX PX 30000
```

----------------------------------------

TITLE: Configure RedisVL Semantic Cache with Tag-Based Access Controls
DESCRIPTION: This Python code initializes a 'SemanticCache' named 'private_cache' and configures it with a 'filterable_fields' property to include a 'user_id' tag. It then demonstrates storing two different prompts and responses, each associated with a unique 'user_id' filter, enabling data segregation for multiple users or contexts within the same cache.
SOURCE: https://github.com/redis/docs/blob/main/content/integrate/redisvl/user_guide/llmcache.md#_snippet_20

LANGUAGE: python
CODE:
```
private_cache = SemanticCache(
    name="private_cache",
    filterable_fields=[{"name": "user_id", "type": "tag"}]
)

private_cache.store(
    prompt="What is the phone number linked to my account?",
    response="The number on file is 123-555-0000",
    filters={"user_id": "abc"},
)

private_cache.store(
    prompt="What's the phone number linked in my account?",
    response="The number on file is 123-555-1111",
    filters={"user_id": "def"},
)
```

----------------------------------------

TITLE: Store and retrieve hash data in Redis (Node.js)
DESCRIPTION: Shows how to store a hash (map) using `client.hSet` and retrieve all fields of a hash using `client.hGetAll`. The example includes the expected JSON output.
SOURCE: https://github.com/redis/docs/blob/main/content/develop/clients/nodejs/_index.md#_snippet_3

LANGUAGE: JavaScript
CODE:
```
await client.hSet('user-session:123', {
    name: 'John',
    surname: 'Smith',
    company: 'Redis',
    age: 29
})

let userSession = await client.hGetAll('user-session:123');
console.log(JSON.stringify(userSession, null, 2));
/*
{
  "surname": "Smith",
  "name": "John",
  "company": "Redis",
  "age": "29"
}
 */
```

----------------------------------------

TITLE: Redis Search: Common Query Examples
DESCRIPTION: A collection of common Redis Search query patterns demonstrating various functionalities including simple phrases, exact phrases, unions, negations, intersections, optional terms, field-specific queries, prefix/infix/suffix searches, wildcard matching, and numeric range filtering.
SOURCE: https://github.com/redis/docs/blob/main/content/develop/interact/search-and-query/advanced-concepts/query_syntax.md#_snippet_42

LANGUAGE: Redis Search Query
CODE:
```
hello world
```

LANGUAGE: Redis Search Query
CODE:
```
"hello world"
```

LANGUAGE: Redis Search Query
CODE:
```
hello|world
```

LANGUAGE: Redis Search Query
CODE:
```
hello -world
```

LANGUAGE: Redis Search Query
CODE:
```
(hello|halo) (world|werld)
```

LANGUAGE: Redis Search Query
CODE:
```
hello -(world|werld)
```

LANGUAGE: Redis Search Query
CODE:
```
(barack|barrack) obama
```

LANGUAGE: Redis Search Query
CODE:
```
obama ~barack ~michelle
```

LANGUAGE: Redis Search Query
CODE:
```
@title:"barack obama" @job:president
```

LANGUAGE: Redis Search Query
CODE:
```
@title:"hello world" @body:(foo bar) @category:(articles|biographies)
```

LANGUAGE: Redis Search Query
CODE:
```
hello worl*
```

LANGUAGE: Redis Search Query
CODE:
```
hel* *worl
```

LANGUAGE: Redis Search Query
CODE:
```
hello -*worl*
```

LANGUAGE: Redis Search Query
CODE:
```
"w'foo??bar??baz'"
```

LANGUAGE: Redis Search Query
CODE:
```
"w'???????'"
```

LANGUAGE: Redis Search Query
CODE:
```
"w'hello*world'"
```

LANGUAGE: Redis Search Query
CODE:
```
@name:tv @price:[200 500]
```

LANGUAGE: Redis Search Query
CODE:
```
@age:[(18 +inf]
```

----------------------------------------

TITLE: Load Data with Embeddings into RedisVL Index
DESCRIPTION: This Python code illustrates how to prepare and load data, including vector embeddings, into a RedisVL search index. It shows how to convert numerical arrays to byte buffers for efficient storage and then load a list of dictionaries into the index.
SOURCE: https://github.com/redis/docs/blob/main/content/integrate/redisvl/user_guide/vectorizers.md#_snippet_34

LANGUAGE: python
CODE:
```
from redisvl.redis.utils import array_to_buffer

embeddings = hf.embed_many(sentences)

data = [{"text": t,
         "embedding": array_to_buffer(v, dtype="float32")}
        for t, v in zip(sentences, embeddings)]

index.load(data)
```

----------------------------------------

TITLE: Add and Retrieve Elements from Redis Lists
DESCRIPTION: Demonstrates how to add elements to the left (head) and right (tail) of a Redis list using LPUSH and RPUSH, and how to retrieve a range of elements using LRANGE. It shows the order of elements after various push operations and explains how LRANGE indexes work, including negative indexing.
SOURCE: https://github.com/redis/docs/blob/main/content/develop/data-types/lists.md#_snippet_7

LANGUAGE: Redis CLI
CODE:
```
> RPUSH bikes:repairs bike:1
(integer) 1
> RPUSH bikes:repairs bike:2
(integer) 2
> LPUSH bikes:repairs bike:important_bike
(integer) 3
> LRANGE bikes:repairs 0 -1
1) "bike:important_bike"
2) "bike:1"
3) "bike:2"
```

----------------------------------------

TITLE: Repairing Corrupted Redis AOF Files
DESCRIPTION: Instructions on using the `redis-check-aof` utility to diagnose and fix issues in corrupted Redis Append Only Files. It is recommended to first run the utility without the `--fix` option to understand the problem, as using `--fix` can lead to significant data loss by discarding the corrupted portion of the file.
SOURCE: https://github.com/redis/docs/blob/main/content/operate/oss_and_stack/management/persistence.md#_snippet_7

LANGUAGE: Shell
CODE:
```
./redis-check-aof --fix <filename>
```

----------------------------------------

TITLE: Configure Prometheus ServiceMonitor for Redis Enterprise Kubernetes Metrics
DESCRIPTION: This YAML configuration defines a `ServiceMonitor` custom resource for the Prometheus operator. It's designed to connect Prometheus to a Redis Enterprise for Kubernetes cluster to collect metrics. Key configurations include specifying the `prometheus` port (8070), the Redis Enterprise cluster's namespace in `namespaceSelector.matchNames`, and the service label `redis.io/service: prom-metrics` in `selector.matchLabels` to target the correct Redis Enterprise metrics service. The `tlsConfig` is set to `insecureSkipVerify: true` for HTTPS. This file should be applied in the same namespace as your Redis Enterprise cluster.
SOURCE: https://github.com/redis/docs/blob/main/content/operate/kubernetes/7.8.4/re-clusters/connect-prometheus-operator.md#_snippet_0

LANGUAGE: YAML
CODE:
```
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: redis-enterprise
spec:
  endpoints:
  - interval: 15s
    port: prometheus
    scheme: https
    tlsConfig:
      insecureSkipVerify: true
  namespaceSelector:
    matchNames:
    - <your_REC_namespace>
  selector:
    matchLabels:
      redis.io/service: prom-metrics
```

----------------------------------------

TITLE: Test Redis TLS Connectivity with redis-cli PING
DESCRIPTION: For TLS-enabled Redis instances, use `redis-cli -h <endpoint> -p <port> -a <password> --tls --insecure --cert --key PING` to verify secure connectivity. This command ensures that the client can establish a TLS handshake and communicate with the database over an encrypted channel.
SOURCE: https://github.com/redis/docs/blob/main/content/operate/rs/databases/connect/troubleshooting-guide.md#_snippet_19

LANGUAGE: sh
CODE:
```
redis-cli -h <endpoint> -p <port> -a <password> --tls --insecure --cert --key PING
```

----------------------------------------

TITLE: Create Redis search index with content, genre, and vector fields
DESCRIPTION: Defines and creates a new Redis search index named `vector_idx` for hash documents. The schema includes a text field for `content`, a tag field for `genre`, and a vector field for `embedding` using HNSW algorithm, L2 distance, Float32 type, and 768 dimensions.
SOURCE: https://github.com/redis/docs/blob/main/content/develop/clients/nodejs/vecsearch.md#_snippet_4

LANGUAGE: javascript
CODE:
```
await client.ft.create('vector_idx', {
    'content': {
        type: SchemaFieldTypes.TEXT,
    },
    'genre': {
        type: SchemaFieldTypes.TAG,
    },
    'embedding': {
        type: SchemaFieldTypes.VECTOR,
        TYPE: 'FLOAT32',
        ALGORITHM: VectorAlgorithms.HNSW,
        DISTANCE_METRIC: 'L2',
        DIM: 768,
    }
}, {
    ON: 'HASH',
    PREFIX: 'doc:'
});
```

----------------------------------------

TITLE: Add Data with Vector Embeddings to Redis Hashes (Python)
DESCRIPTION: This Python snippet demonstrates how to store data, including text content, genre, and a corresponding vector embedding, into Redis hashes. It utilizes the `SentenceTransformer`'s `model.encode()` method to generate embeddings, which are then converted to `float32` and `tobytes()` for efficient storage and indexing in Redis. The `doc:` prefix is used for automatic indexing.
SOURCE: https://github.com/redis/docs/blob/main/content/develop/clients/redis-py/vecsearch.md#_snippet_5

LANGUAGE: python
CODE:
```
content = "That is a very happy person"

r.hset("doc:0", mapping={
    "content": content,
    "genre": "persons",
    "embedding": model.encode(content).astype(np.float32).tobytes(),
})

content = "That is a happy dog"

r.hset("doc:1", mapping={
    "content": content,
    "genre": "pets",
    "embedding": model.encode(content).astype(np.float32).tobytes(),
})

content = "Today is a sunny day"

r.hset("doc:2", mapping={
    "content": content,
    "genre": "weather",
    "embedding": model.encode(content).astype(np.float32).tobytes(),
})
```

----------------------------------------

TITLE: Safely Releasing a Redis Lock with Lua Script
DESCRIPTION: This Lua script ensures that a lock is only released by the client that originally acquired it. It checks if the value stored at the lock key matches the unique random value provided by the client. If they match, the key is deleted; otherwise, the deletion is prevented, avoiding the removal of a lock held by another client.
SOURCE: https://github.com/redis/docs/blob/main/content/develop/use/patterns/distributed-locks.md#_snippet_1

LANGUAGE: Lua
CODE:
```
if redis.call("get",KEYS[1]) == ARGV[1] then
    return redis.call("del",KEYS[1])
else
    return 0
end
```

----------------------------------------

TITLE: Perform Hybrid Lexical and Vector Search with RedisVL HybridQuery
DESCRIPTION: This Python example showcases the use of `HybridQuery` to perform a combined lexical (BM25) and vector search. It defines a text query and embeds it, then constructs a `HybridQuery` specifying text and vector fields, an alpha value for ranking, and desired return fields. The query is executed against the previously loaded index.
SOURCE: https://github.com/redis/docs/blob/main/content/integrate/redisvl/user_guide/release_guide/0_5_0_release.md#_snippet_1

LANGUAGE: python
CODE:
```
from redisvl.query import HybridQuery

text = "Find a job as a where you develop software"
vec = emb_model.embed(text, as_buffer=True)

query = HybridQuery(
    text=text,
    text_field_name="job_description",
    vector=vec,
    vector_field_name="job_embedding",
    alpha=0.7,
    num_results=10,
    return_fields=["job_title"],
)

results = index.query(query)
results
```

----------------------------------------

TITLE: Define a Basic Redis OM Entity Class
DESCRIPTION: This JavaScript snippet defines a simple `Person` entity by extending the `Entity` class from Redis OM. This class will serve as the data model for objects stored and retrieved from Redis, allowing for object-document mapping.
SOURCE: https://github.com/redis/docs/blob/main/content/integrate/redisom-for-node-js/_index.md#_snippet_5

LANGUAGE: javascript
CODE:
```
/* our entity */
class Person extends Entity {}
```

----------------------------------------

TITLE: Define Spring Data Redis Repository Interface
DESCRIPTION: This Java interface defines a Spring Data Redis repository for the `Person` model. By extending `RedisDocumentRepository`, it automatically inherits CRUD, Paging, and Sorting functionalities, significantly reducing boilerplate code for data access operations.
SOURCE: https://github.com/redis/docs/blob/main/content/integrate/redisom-for-java/_index.md#_snippet_9

LANGUAGE: java
CODE:
```
package com.redis.om.skeleton.models.repositories;

import com.redis.om.skeleton.models.Person;
import com.redis.om.spring.repository.RedisDocumentRepository;

public interface PeopleRepository extends RedisDocumentRepository<Person,String> {

}
```

----------------------------------------

TITLE: Python Example for OpenAITextVectorizer Usage
DESCRIPTION: Demonstrates basic usage of the `OpenAITextVectorizer` class in Python for generating text embeddings via OpenAI's API. This example shows how to initialize the vectorizer with a specified model and API key configuration.
SOURCE: https://github.com/redis/docs/blob/main/content/integrate/redisvl/api/vectorizer.md#_snippet_3

LANGUAGE: python
CODE:
```
# Basic usage with OpenAI embeddings
vectorizer = OpenAITextVectorizer(
    model="text-embedding-ada-002",
    api_config={"api_key": "your_api_key"} # OR set OPENAI_API_KEY in your env
)
embedding = vectorizer.embed("Hello, world!")
```

----------------------------------------

TITLE: Redis FT.SEARCH Basic Vector Radius Query
DESCRIPTION: Illustrates the fundamental syntax for performing a vector radius search using FT.SEARCH, specifying the index, vector field, radius, and a placeholder for binary vector data.
SOURCE: https://github.com/redis/docs/blob/main/content/develop/interact/search-and-query/query/vector-search.md#_snippet_3

LANGUAGE: Redis
CODE:
```
FT.SEARCH index "@field:[VECTOR_RANGE radius $vector]" PARAMS 2 vector "binary_data" DIALECT 2
```

----------------------------------------

TITLE: CVE-2022-36021: Redis String Matching Commands Denial-of-Service
DESCRIPTION: String matching commands (like `SCAN` or `KEYS`) with a specially crafted pattern to trigger a denial-of-service attack on Redis can cause it to hang and consume 100% CPU time. (Redis 6.0.18)
SOURCE: https://github.com/redis/docs/blob/main/content/operate/rs/release-notes/rs-7-4-2-releases/rs-7-4-2-169.md#_snippet_8

LANGUAGE: APIDOC
CODE:
```
CVE ID: CVE-2022-36021
Affected Versions: Redis 6.0.x
Vulnerability Type: Denial-of-Service (DoS)
Exploitation Method: Specially crafted pattern with 'SCAN' or 'KEYS' commands.
Impact: Redis server hangs, 100% CPU consumption.
Fixed In: Redis 6.0.18
```

----------------------------------------

TITLE: Helper Function for Semantic Cache Performance Testing
DESCRIPTION: Provides a helper Python function `answer_question` that first attempts to retrieve an answer from the semantic cache. If not found, it falls back to an external LLM (e.g., OpenAI) to generate the response, demonstrating a common caching pattern.
SOURCE: https://github.com/redis/docs/blob/main/content/integrate/redisvl/user_guide/llmcache.md#_snippet_15

LANGUAGE: python
CODE:
```
def answer_question(question: str) -> str:
    """Helper function to answer a simple question using OpenAI with a wrapper
    check for the answer in the semantic cache first.

    Args:
        question (str): User input question.

    Returns:
        str: Response.
    """
    results = llmcache.check(prompt=question)
    if results:
        return results[0]["response"]
    else:
        answer = ask_openai(question)
        return answer
```

----------------------------------------

TITLE: Redis Database Backup Configuration
DESCRIPTION: Defines the target and interval for automatic database backups, supporting various storage types like Azure Blob Storage (ABS), FTP, Google Cloud Storage (GCS), S3, SFTP, and Swift, as well as mount points.
SOURCE: https://github.com/redis/docs/blob/main/content/operate/kubernetes/7.8.4/reference/redis_enterprise_active_active_database_api.md#_snippet_7

LANGUAGE: APIDOC
CODE:
```
spec.globalConfigurations.backup:
  abs: object
  ftp: object
  gcs: object (GoogleStorage)
  interval: integer
    Backup Interval in seconds
  mount: object (MountPointStorage)
  s3: object
  sftp: object
  swift: object
```

----------------------------------------

TITLE: Perform Hybrid Query for Specific Movie Title by Rating Range
DESCRIPTION: Executes a hybrid query to find the top 10 'spiderman' movie reviews that have a rating between 5 and 7 and are most similar to a given query vector. Results are sorted by distance.
SOURCE: https://github.com/redis/docs/blob/main/content/develop/interact/search-and-query/vecsim-hybrid_queries_examples.ipynb#_snippet_7

LANGUAGE: python
CODE:
```
# Give me the top 10 reviews on a Spiderman movie that are similar to mine and got ratings between 5 and 7.
#(ids 5000-7000 divided by 5)

q = Query(f'(@{title_field_name}:spiderman @{rating_field_name}:[5 7])=>[KNN 10 @{vector_field_name} $vec_param AS dist]').sort_by('dist')
res = redis_conn.ft().search(q, query_params = {'vec_param': query_vector.tobytes()})

print_results(res)
```

----------------------------------------

TITLE: RedisEnterpriseCluster (REC) API Reference
DESCRIPTION: The RedisEnterpriseCluster (REC) custom resource defines and manages a Redis Enterprise cluster within Kubernetes. It allows users to specify the desired state of the cluster, which the operator then reconciles. This API is essential for creating and managing the core Redis Enterprise cluster, including its nodes and resources. Full details on fields and settings are available in the external API reference.
SOURCE: https://github.com/redis/docs/blob/main/content/operate/kubernetes/architecture/_index.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
RedisEnterpriseCluster (REC) Custom Resource:
  Purpose: Manages a Redis Enterprise cluster in Kubernetes.
  Usage: Defined via YAML configuration files.
  Impact: Changes prompt the operator to update the cluster.
  Required for: Standard databases (REDB) and Active-Active databases (REAADB).
  Full API Reference: Refer to the external RedisEnterpriseCluster API Reference for detailed fields and settings.
```

----------------------------------------

TITLE: Creating a RedisVL VectorQuery Object
DESCRIPTION: Illustrates the creation of a `VectorQuery` object for performing vector similarity searches. It specifies the query vector, the target vector field name, desired return fields (including `vector_distance`), and the number of results to retrieve.
SOURCE: https://github.com/redis/docs/blob/main/content/integrate/redisvl/user_guide/getting_started.md#_snippet_10

LANGUAGE: python
CODE:
```
from redisvl.query import VectorQuery

query = VectorQuery(
    vector=[0.1, 0.1, 0.5],
    vector_field_name="user_embedding",
    return_fields=["user", "age", "job", "credit_score", "vector_distance"],
    num_results=3
)
```

----------------------------------------

TITLE: CohereTextVectorizer Class API Reference
DESCRIPTION: Defines the `CohereTextVectorizer` class, which uses Cohere's API for text embeddings. It details the constructor parameters such as `model`, `api_config`, `dtype`, `cache`, and `dims`, along with potential exceptions like `ImportError` and `ValueError`. It also includes class properties like `model_config` and `type`.
SOURCE: https://github.com/redis/docs/blob/main/content/integrate/redisvl/api/vectorizer.md#_snippet_14

LANGUAGE: APIDOC
CODE:
```
class CohereTextVectorizer(model='embed-english-v3.0', api_config=None, dtype='float32', cache=None, *, dims=None)
Bases: BaseVectorizer

Initialize the Cohere vectorizer.

Parameters:
  model (str) – Model to use for embedding. Defaults to ‘embed-english-v3.0’.
  api_config (Optional[Dict], optional) – Dictionary containing the API key. Defaults to None.
  dtype (str) – the default datatype to use when embedding text as byte arrays. Used when setting as_buffer=True in calls to embed() and embed_many(). ‘float32’ will use Cohere’s float embeddings, ‘int8’ and ‘uint8’ will map to Cohere’s corresponding embedding types. Defaults to ‘float32’.
  cache (Optional[EmbeddingsCache]) – Optional EmbeddingsCache instance to cache embeddings for better performance with repeated texts. Defaults to None.
  dims (Annotated[int | None, FieldInfo(annotation=NoneType, required=True, metadata=[Strict(strict=True), Gt(gt=0)])])
Raises:
  ImportError – If the cohere library is not installed.
  ValueError – If the API key is not provided.
  ValueError – If an invalid dtype is provided.

model_config: ClassVar[ConfigDict] = {'arbitrary_types_allowed': True}
Configuration for the model, should be a dictionary conforming to [ConfigDict][pydantic.config.ConfigDict].

property type: str
Return the type of vectorizer.
```

----------------------------------------

TITLE: Store Prompt-Response Pair in Redis Session Memory
DESCRIPTION: Inserts a prompt:response pair into the session memory. A timestamp is associated with each message for sequential ordering after retrieval.
SOURCE: https://github.com/redis/docs/blob/main/content/integrate/redisvl/api/session_manager.md#_snippet_2

LANGUAGE: APIDOC
CODE:
```
store(prompt, response, session_tag=None)
  prompt (str): The user prompt to the LLM.
  response (str): The corresponding LLM response.
  session_tag (Optional[str]): Tag to be added to entries to link to a specific session. Defaults to instance ULID.
Returns: None
```

----------------------------------------

TITLE: Prometheus Query for Redis Read Hits Rate
DESCRIPTION: Rate of read operations accessing an existing key (ops/sec). This metric indicates successful key lookups.
SOURCE: https://github.com/redis/docs/blob/main/content/embeds/rs-prometheus-metrics-transition-plan.md#_snippet_38

LANGUAGE: PromQL
CODE:
```
sum by (db) (irate(redis_server_keyspace_read_hits{role="master"}[1m]))
```

----------------------------------------

TITLE: Redis Database Access Control Configuration
DESCRIPTION: Outlines different methods for controlling access to Redis databases, including unauthenticated access, password-only, and Access Control Lists (ACLs).
SOURCE: https://github.com/redis/docs/blob/main/content/operate/rs/7.8/databases/configure/_index.md#_snippet_4

LANGUAGE: APIDOC
CODE:
```
Access Control Options:
- Unauthenticated access: Access as default user without credentials.
- Password-only authentication: All connections must authenticate with AUTH command using default user password. Can be combined with ACLs.
- Access Control List (ACL): Specify user roles and Redis ACLs for database access.
    - Steps to define ACL:
        1. In Security > Access Control > Access Control List, select + Add ACL.
        2. Select a role to grant database access.
        3. Associate a Redis ACL with the role and database.
        4. Select the check mark to add the ACL.
```

----------------------------------------

TITLE: Test Redis Connection with PING Command
DESCRIPTION: Tests the connection to the Redis server by sending a PING command via redis-cli. A 'PONG' response indicates a successful connection to the Redis instance.
SOURCE: https://github.com/redis/docs/blob/main/content/operate/oss_and_stack/install/install-stack/homebrew.md#_snippet_6

LANGUAGE: bash
CODE:
```
127.0.0.1:6379> PING
PONG
```

----------------------------------------

TITLE: Run Single Redis Command with redis-cli
DESCRIPTION: Explains how to execute a single Redis command directly from the command line using `redis-cli`, specifying the endpoint and port.
SOURCE: https://github.com/redis/docs/blob/main/content/operate/rs/7.8/references/cli-utilities/redis-cli/_index.md#_snippet_5

LANGUAGE: sh
CODE:
```
$ redis-cli -h <endpoint> -p <port> <Redis command>
```

----------------------------------------

TITLE: Watch and Update a Key with Redis Transactions in JavaScript
DESCRIPTION: This snippet demonstrates how to use Redis's WATCH command to implement optimistic locking. It reads a key, modifies its value, and then attempts to write it back within a transaction. If the watched key is modified by another client before the transaction executes, the transaction aborts, and the error handler is invoked. For production, this operation should typically be retried in a loop.
SOURCE: https://github.com/redis/docs/blob/main/content/develop/clients/nodejs/transpipe.md#_snippet_3

LANGUAGE: js
CODE:
```
// Set initial value of `shellpath`.
client.set('shellpath', '/usr/syscmds/');

// Watch the key we are about to update.
await client.watch('shellpath');

const currentPath = await client.get('shellpath');
const newPath = currentPath + ':/usr/mycmds/';

// Attempt to write the watched key.
await client.multi()    
    .set('shellpath', newPath)
    .exec()
    .then((result) => {
        // This is called when the pipeline executes
        // successfully.
        console.log(result);
    }, (err) => {
        // This is called when a watched key was changed.
        // Handle the error here.
        console.log(err);
    });

const updatedPath = await client.get('shellpath');
console.log(updatedPath);
// >>> /usr/syscmds/:/usr/mycmds/
```

----------------------------------------

TITLE: `route_many` Method for Multi-Match Semantic Router Query
DESCRIPTION: Queries the semantic router for multiple matches using either a statement or a vector. It allows specifying the maximum number of matches, a distance threshold, and an aggregation method.
SOURCE: https://github.com/redis/docs/blob/main/content/integrate/redisvl/api/router.md#_snippet_14

LANGUAGE: APIDOC
CODE:
```
route_many(statement=None, vector=None, max_k=None, distance_threshold=None, aggregation_method=None)
  Parameters:
    statement (Optional[str]): The input statement to be queried.
    vector (Optional[List[float]]): The input vector to be queried.
    max_k (Optional[int]): The maximum number of top matches to return.
    distance_threshold (Optional[float]): The threshold for semantic distance.
    aggregation_method (Optional[DistanceAggregationMethod]): The aggregation method used for vector distances.
  Returns: The matching routes and their details.
  Return type: List[RouteMatch]
```

----------------------------------------

TITLE: Scan Redis database for big keys
DESCRIPTION: Illustrates how to use `redis-cli` with the `--bigkeys` option to scan the Redis database and identify large keys. This command helps in optimizing memory usage by finding keys that consume significant space. Replace `<endpoint>` and `<port>` with your Redis server details.
SOURCE: https://github.com/redis/docs/blob/main/content/operate/rs/7.4/references/cli-utilities/redis-cli/_index.md#_snippet_9

LANGUAGE: sh
CODE:
```
redis-cli -h <endpoint> -p <port> --bigkeys
```

----------------------------------------

TITLE: Acquiring Lock with GETSET in Redis
DESCRIPTION: This snippet demonstrates the use of the Redis `GETSET` command to atomically acquire a lock. It's used when a client detects an expired lock and attempts to take ownership, ensuring that only one client succeeds in acquiring the lock even if multiple clients detect the expiration simultaneously. The command sets a new expiration timestamp and returns the old value, allowing the client to verify if the lock was indeed expired before acquisition.
SOURCE: https://github.com/redis/docs/blob/main/content/commands/setnx.md#_snippet_3

LANGUAGE: Redis
CODE:
```
GETSET lock.foo <current Unix timestamp + lock timeout + 1>
```

----------------------------------------

TITLE: Redis Lua redis.call() Function for Command Execution
DESCRIPTION: The redis.call() function executes a given Redis command and returns its reply. It behaves like a direct Redis command execution, raising a runtime exception if the command fails or has incorrect arguments. It's available in scripts and functions since version 2.6.0.
SOURCE: https://github.com/redis/docs/blob/main/content/develop/interact/programmability/lua-api.md#_snippet_7

LANGUAGE: APIDOC
CODE:
```
redis.call(command [,arg...]):
  Since version: 2.6.0
  Available in scripts: yes
  Available in functions: yes
  Description: Calls a Redis command and returns its reply. Throws runtime exceptions on error.
```

LANGUAGE: Lua
CODE:
```
return redis.call('ECHO', 'Echo, echo... eco... o...')
```

LANGUAGE: Redis CLI
CODE:
```
redis> EVAL "return redis.call('ECHO', 'Echo,', 'echo... ', 'eco... ', 'o...')" 0
(error) ERR Wrong number of args calling Redis command from script script: b0345693f4b77517a711221050e76d24ae60b7f7, on @user_script:1.
```

----------------------------------------

TITLE: Redis: Indexing Objects by ID using Sorted Sets
DESCRIPTION: This section demonstrates how to create an index using Redis sorted sets where the sorted set members are object IDs, allowing for efficient retrieval of full object data from Redis hashes. This approach decouples the index from the object's data, simplifying updates.
SOURCE: https://github.com/redis/docs/blob/main/content/develop/use/patterns/indexes/index.md#_snippet_4

LANGUAGE: Redis
CODE:
```
HMSET user:1 id 1 username antirez ctime 1444809424 age 38
HMSET user:2 id 2 username maria ctime 1444808132 age 42
HMSET user:3 id 3 username jballard ctime 1443246218 age 33
```

LANGUAGE: Redis
CODE:
```
ZADD user.age.index 38 1
ZADD user.age.index 42 2
ZADD user.age.index 33 3
```

----------------------------------------

TITLE: Prometheus Query for Redis Read Misses Rate
DESCRIPTION: Rate of read operations accessing a non-existing key (ops/sec). This metric helps identify inefficient application queries or caching issues.
SOURCE: https://github.com/redis/docs/blob/main/content/embeds/rs-prometheus-metrics-transition-plan.md#_snippet_40

LANGUAGE: PromQL
CODE:
```
sum by (db) (irate(redis_server_keyspace_read_misses{role="master"}[1m]))
```

----------------------------------------

TITLE: Connect to Redis with Node.js
DESCRIPTION: Establishes a basic connection to a Redis server running on localhost:6379 using the `redis` client library. Includes error handling for connection issues.
SOURCE: https://github.com/redis/docs/blob/main/content/develop/clients/nodejs/connect.md#_snippet_0

LANGUAGE: JavaScript
CODE:
```
import { createClient } from 'redis';

const client = createClient();

client.on('error', err => console.log('Redis Client Error', err));

await client.connect();
```

----------------------------------------

TITLE: Connect to Redis using a connection string (Node.js)
DESCRIPTION: Illustrates how to connect to a Redis server using a detailed connection URL, which can specify host, port, username, and password.
SOURCE: https://github.com/redis/docs/blob/main/content/develop/clients/nodejs/_index.md#_snippet_4

LANGUAGE: JavaScript
CODE:
```
createClient({
  url: 'redis://alice:foobared@awesome.redis.server:6380'
});
```

----------------------------------------

TITLE: Connect to Redis server using go-redis options
DESCRIPTION: Demonstrates the simplest way to establish a connection to a Redis server by configuring connection options such as address, password, database, and protocol.
SOURCE: https://github.com/redis/docs/blob/main/content/develop/clients/go/_index.md#_snippet_2

LANGUAGE: Go
CODE:
```
import (
	"context"
	"fmt"
	"github.com/redis/go-redis/v9"
)

func main() {    
    client := redis.NewClient(&redis.Options{
        Addr:	  "localhost:6379",
        Password: "", // No password set
        DB:		  0,  // Use default DB
        Protocol: 2,  // Connection protocol
    })
}
```

----------------------------------------

TITLE: Retrieve Relevant Chat History from Redis
DESCRIPTION: Searches the chat history for information semantically related to a given prompt using vector similarity. It retrieves the top k most relevant previous prompts or responses to provide context for LLM calls.
SOURCE: https://github.com/redis/docs/blob/main/content/integrate/redisvl/api/session_manager.md#_snippet_1

LANGUAGE: APIDOC
CODE:
```
get_relevant(prompt, as_text=False, top_k=5, fall_back=False, session_tag=None, raw=False, distance_threshold=None)
  prompt (str): The message text to search for in session memory
  as_text (bool): Whether to return the prompts and responses as text (or as JSON)
  top_k (int): The number of previous messages to return. Default is 5.
  session_tag (Optional[str]): Tag to be added to entries to link to a specific session. Defaults to instance ULID.
  distance_threshold (Optional[float]): The threshold for semantic vector distance.
  fall_back (bool): Whether to drop back to recent conversation history if no relevant context is found.
  raw (bool): Whether to return the full Redis hash entry or just the message.
Returns: Union[List[str], List[Dict[str,str]]] - Either a list of strings, or a list of prompts and responses in JSON containing the most relevant.
Raises ValueError: if top_k is not an integer greater or equal to 0.
```

----------------------------------------

TITLE: Redis: Generic FT.SEARCH KNN Vector Query Structure
DESCRIPTION: Outlines the fundamental structure of the Redis `FT.SEARCH` command for K-Nearest Neighbors (KNN) vector search. It details the pre-filter syntax, the parameterized KNN query expression, and the use of `PARAMS` for vector binary data substitution. This structure is essential for performing vector similarity searches in Redis.
SOURCE: https://github.com/redis/docs/blob/main/content/develop/interact/search-and-query/query/vector-search.md#_snippet_0

LANGUAGE: Redis
CODE:
```
FT.SEARCH index "(*)=>[KNN num_neighbours @field $vector]" PARAMS 2 vector "binary_data" DIALECT 2
```

----------------------------------------

TITLE: Store and Retrieve String in Redis with redis-py
DESCRIPTION: Demonstrates how to store a simple string value using `r.set()` and retrieve it using `r.get()` in Redis.
SOURCE: https://github.com/redis/docs/blob/main/content/develop/clients/redis-py/_index.md#_snippet_3

LANGUAGE: python
CODE:
```
r.set('foo', 'bar')
# True
r.get('foo')
# bar
```

----------------------------------------

TITLE: Connect to Redis with custom host/port using URL in Node.js
DESCRIPTION: Configures the Redis client to connect to a specific host and port using a connection URL string, which can also include username and password for authentication.
SOURCE: https://github.com/redis/docs/blob/main/content/develop/clients/nodejs/connect.md#_snippet_3

LANGUAGE: JavaScript
CODE:
```
createClient({
  url: 'redis://alice:foobared@awesome.redis.server:6380'
});
```

----------------------------------------

TITLE: Initialize Redis Client Connection
DESCRIPTION: Establishes a connection to the Redis server using the specified host and port. This client instance (`redis_conn`) will be used for all subsequent Redis operations.
SOURCE: https://github.com/redis/docs/blob/main/content/develop/interact/search-and-query/vecsim-hybrid_queries_examples.ipynb#_snippet_1

LANGUAGE: python
CODE:
```
host = "localhost"
port = 6379

redis_conn = Redis(host = host, port = port)
```

----------------------------------------

TITLE: Redis Master Shutdown Data Loss Prevention via Failover
DESCRIPTION: Advises on minimizing data loss when shutting down a Redis master node, particularly in diskless configurations. The recommended approach involves triggering a manual `FAILOVER` or `CLUSTER FAILOVER` to demote the master and promote a replica before initiating the shutdown, ensuring data consistency.
SOURCE: https://github.com/redis/docs/blob/main/content/commands/shutdown.md#_snippet_3

LANGUAGE: Redis CLI
CODE:
```
FAILOVER
CLUSTER FAILOVER
```

----------------------------------------

TITLE: Redis FT.SEARCH Concrete Vector Radius Query Example
DESCRIPTION: Provides a practical example of a Redis FT.SEARCH radius query on 'idx:bikes_vss' with a radius of 0.5, demonstrating how to yield and sort by 'vector_dist' and return specific fields like 'vector_dist' and 'description'.
SOURCE: https://github.com/redis/docs/blob/main/content/develop/interact/search-and-query/query/vector-search.md#_snippet_5

LANGUAGE: Redis
CODE:
```
FT.SEARCH idx:bikes_vss "@vector:[VECTOR_RANGE 0.5 $query_vector]=>{$YIELD_DISTANCE_AS: vector_dist}" PARAMS 2 "query_vector" "Z\xf8\x15:\xf23\xa1\xbfZ\x1dI>\r\xca9..." SORTBY vector_dist ASC RETURN 2 vector_dist description DIALECT 2
```

----------------------------------------

TITLE: Create a RedisJSON Vector Index in Java
DESCRIPTION: This Java code demonstrates how to create a RediSearch index for JSON documents. It specifies field paths using `$.` notation, assigns aliases with `as()`, and configures a vector field for embeddings with `HNSW` algorithm and `FLOAT32` type, explicitly setting `IndexDataType.JSON`.
SOURCE: https://github.com/redis/docs/blob/main/content/develop/clients/jedis/vecsearch.md#_snippet_10

LANGUAGE: java
CODE:
```
SchemaField[] jsonSchema = {
    TextField.of("$.content").as("content"),
    TagField.of("$.genre").as("genre"),
    VectorField.builder()
        .fieldName("$.embedding").as("embedding")
        .algorithm(VectorAlgorithm.HNSW)
        .attributes(
            Map.of(
                "TYPE", "FLOAT32",
                "DIM", 768,
                "DISTANCE_METRIC", "L2"
            )
        )
        .build()
};

jedis.ftCreate("vector_json_idx",
    FTCreateParams.createParams()
        .addPrefix("jdoc:")
        .on(IndexDataType.JSON),
        jsonSchema
);
```

----------------------------------------

TITLE: Redis Commands for Managing Following/Follower Relationships
DESCRIPTION: These Redis commands demonstrate how to establish bidirectional following/follower relationships using Sorted Sets. When user 1000 follows user 5000, two `ZADD` operations are performed: one to add 5000 to 1000's 'following' set and another to add 1000 to 5000's 'followers' set. This pattern allows for efficient retrieval of followers or following lists and enables advanced features like finding common followers using `ZINTERSTORE`.
SOURCE: https://github.com/redis/docs/blob/main/content/develop/use/patterns/twitter-clone.md#_snippet_24

LANGUAGE: Redis
CODE:
```
ZADD following:1000 5000
ZADD followers:5000 1000
```

----------------------------------------

TITLE: Python: Benchmark Embedding Caching Performance
DESCRIPTION: This snippet benchmarks the performance of embedding generation with and without caching. It measures the time taken for multiple iterations of embedding a sample text, calculating speedup and latency reduction achieved by using the EmbeddingsCache.
SOURCE: https://github.com/redis/docs/blob/main/content/integrate/redisvl/user_guide/embeddings_cache.md#_snippet_15

LANGUAGE: python
CODE:
```
# Text to use for benchmarking
benchmark_text = "This is a benchmark text to measure the performance of embedding caching."

# Create a fresh cache for benchmarking
benchmark_cache = EmbeddingsCache(
    name="benchmark_cache",
    redis_url="redis://localhost:6379",
    ttl=3600  # 1 hour TTL
)
vectorizer.cache = benchmark_cache

# Number of iterations for the benchmark
n_iterations = 10

# Benchmark without caching
print("Benchmarking without caching:")
start_time = time.time()
for _ in range(n_iterations):
    embedding = vectorizer.embed(text, skip_cache=True)
no_cache_time = time.time() - start_time
print(f"Time taken without caching: {no_cache_time:.4f} seconds")
print(f"Average time per embedding: {no_cache_time/n_iterations:.4f} seconds")

# Benchmark with caching
print("\nBenchmarking with caching:")
start_time = time.time()
for _ in range(n_iterations):
    embedding = vectorizer.embed(text)
cache_time = time.time() - start_time
print(f"Time taken with caching: {cache_time:.4f} seconds")
print(f"Average time per embedding: {cache_time/n_iterations:.4f} seconds")

# Compare performance
speedup = no_cache_time / cache_time
latency_reduction = (no_cache_time/n_iterations) - (cache_time/n_iterations)
print(f"\nPerformance comparison:")
print(f"Speedup with caching: {speedup:.2f}x faster")
print(f"Time saved: {no_cache_time - cache_time:.4f} seconds ({(1 - cache_time/no_cache_time) * 100:.1f}%)")
print(f"Latency reduction: {latency_reduction:.4f} seconds per query")
```

----------------------------------------

TITLE: Search Redis index for items by multiple keywords in description
DESCRIPTION: Illustrates using FT.SEARCH to query JSON documents for items whose 'description' attribute contains multiple specified keywords, such as 'bluetooth' and 'headphones'.
SOURCE: https://github.com/redis/docs/blob/main/content/develop/interact/search-and-query/indexing/_index.md#_snippet_6

LANGUAGE: SQL
CODE:
```
127.0.0.1:6379> FT.SEARCH itemIdx '@description:(bluetooth headphones)'
```

----------------------------------------

TITLE: Redis CLI MONITOR Output With Client-Side Caching Enabled
DESCRIPTION: This `redis-cli MONITOR` output demonstrates the effect of client-side caching. Only the initial `GET` command for 'city' hits the server; the subsequent `GET` is satisfied by the client-side cache and does not appear in the server's monitor output.
SOURCE: https://github.com/redis/docs/blob/main/content/develop/clients/nodejs/connect.md#_snippet_12

LANGUAGE: text
CODE:
```
1723110248.712663 [...] "SET" "city" "New York"
1723110248.713607 [...] "GET" "city"
```

----------------------------------------

TITLE: Redis CLI Examples for LMPOP Command
DESCRIPTION: Demonstrates various use cases of the LMPOP command using redis-cli, including popping elements from left/right, with and without count, and across multiple keys.
SOURCE: https://github.com/redis/docs/blob/main/content/commands/lmpop.md#_snippet_1

LANGUAGE: redis-cli
CODE:
```
LMPOP 2 non1 non2 LEFT COUNT 10
LPUSH mylist "one" "two" "three" "four" "five"
LMPOP 1 mylist LEFT
LRANGE mylist 0 -1
LMPOP 1 mylist RIGHT COUNT 10
LPUSH mylist "one" "two" "three" "four" "five"
LPUSH mylist2 "a" "b" "c" "d" "e"
LMPOP 2 mylist mylist2 right count 3
LRANGE mylist 0 -1
LMPOP 2 mylist mylist2 right count 5
LMPOP 2 mylist mylist2 right count 10
EXISTS mylist mylist2
```

----------------------------------------

TITLE: Redis Eviction Policies Reference
DESCRIPTION: A comprehensive list of Redis eviction policies, detailing their behavior and application when a database's memory limit is reached.
SOURCE: https://github.com/redis/docs/blob/main/content/operate/rs/7.4/databases/memory-performance/eviction-policy.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
Eviction Policies:
  noeviction:
    Description: New values aren't saved when memory limit is reached.
    AppliesTo: Primary database when replication is used.
  allkeys-lru:
    Description: Keeps most recently used keys; removes least recently used (LRU) keys.
  allkeys-lfu:
    Description: Keeps frequently used keys; removes least frequently used (LFU) keys.
  allkeys-random:
    Description: Randomly removes keys.
  volatile-lru:
    Description: Removes least recently used keys with 'expire' field set to true.
  volatile-lfu:
    Description: Removes least frequently used keys with 'expire' field set to true.
  volatile-random:
    Description: Randomly removes keys with 'expire' field set to true.
  volatile-ttl:
    Description: Removes least frequently used keys with 'expire' field set to true and the shortest remaining time-to-live (TTL) value.
```

----------------------------------------

TITLE: Redis: Track User Navigation Session with Expiration
DESCRIPTION: Demonstrates how to track a user's recent page views as a navigation session in Redis. It uses `RPUSH` to add page views to a list and `EXPIRE` to set a 60-second timeout for the session key. If the user is idle for more than 60 seconds, the session key is automatically deleted.
SOURCE: https://github.com/redis/docs/blob/main/content/commands/expire.md#_snippet_3

LANGUAGE: Redis
CODE:
```
MULTI
RPUSH pagewviews.user:<userid> http://.....
EXPIRE pagewviews.user:<userid> 60
EXEC
```

----------------------------------------

TITLE: Redis KNN Vector Query Example with Price and Condition Pre-filter
DESCRIPTION: Provides a concrete example of a Redis KNN vector query that uses a pre-filter based on `@price` and `@condition`. This query searches for 3 nearest neighbors in the `idx:bikes_vss` index, specifically for items priced between 500 and 1000 and with a 'new' condition, demonstrating practical application of pre-filtering.
SOURCE: https://github.com/redis/docs/blob/main/content/develop/interact/search-and-query/query/combined.md#_snippet_14

LANGUAGE: Redis CLI
CODE:
```
FT.SEARCH idx:bikes_vss "(@price:[500 1000] @condition:{new})=>[KNN 3 @vector $query_vector]" PARAMS 2 "query_vector" "Z\xf8\x15:\xf23\xa1\xbfZ\x1dI>\r\xca9..." DIALECT 2
```

----------------------------------------

TITLE: Store and retrieve a string value with Jedis
DESCRIPTION: This Java code snippet illustrates how to use the Jedis client to store a string value with a key using `jedis.set()` and then retrieve it using `jedis.get()`, printing the results to the console.
SOURCE: https://github.com/redis/docs/blob/main/content/develop/clients/jedis/_index.md#_snippet_3

LANGUAGE: Java
CODE:
```
...

String res1 = jedis.set("bike:1", "Deimos");
System.out.println(res1); // OK

String res2 = jedis.get("bike:1");
System.out.println(res2); // Deimos

...
```

----------------------------------------

TITLE: Fixing Rate Limiter Race Condition with Redis Lua Script
DESCRIPTION: This Lua script provides a robust solution to the race condition in the counter-based rate limiter. It atomically increments the counter and sets the expiration, ensuring the key is not leaked even if the client fails after INCR.
SOURCE: https://github.com/redis/docs/blob/main/content/commands/incr.md#_snippet_4

LANGUAGE: Lua
CODE:
```
local current
current = redis.call("incr",KEYS[1])
if current == 1 then
    redis.call("expire",KEYS[1],1)
end
```

----------------------------------------

TITLE: Check Semantic Cache for Semantically Similar Questions
DESCRIPTION: Demonstrates the cache's ability to retrieve answers for semantically similar questions, even if the exact prompt was not stored. This highlights the power of semantic search in the cache.
SOURCE: https://github.com/redis/docs/blob/main/content/integrate/redisvl/user_guide/llmcache.md#_snippet_8

LANGUAGE: python
CODE:
```
question = "What actually is the capital of France?"
llmcache.check(prompt=question)[0]['response']
```

----------------------------------------

TITLE: Connect to a local Redis server in Java
DESCRIPTION: This code snippet demonstrates how to establish a basic connection to a local Redis server using `UnifiedJedis` in Java. It initializes a connection to `localhost:6379`.
SOURCE: https://github.com/redis/docs/blob/main/content/develop/clients/jedis/connect.md#_snippet_0

LANGUAGE: java
CODE:
```
package org.example;
import redis.clients.jedis.UnifiedJedis;

public class Main {
    public static void main(String[] args) {
        UnifiedJedis jedis = new UnifiedJedis("redis://localhost:6379");

        // Code that interacts with Redis...

        jedis.close();
    }
}
```

----------------------------------------

TITLE: Update Leaderboard Scores with ZADD and ZINCRBY
DESCRIPTION: Demonstrates how to update scores in a Redis sorted set using ZADD to set a score directly and ZINCRBY to increment an existing score. It shows the return values for each command, highlighting how ZADD returns 0 when a member exists and ZINCRBY returns the new score.
SOURCE: https://github.com/redis/docs/blob/main/content/develop/data-types/sorted-sets.md#_snippet_8

LANGUAGE: Redis CLI
CODE:
```
ZADD racer_scores 100 "Wood"
(integer) 1
ZADD racer_scores 100 "Henshaw"
(integer) 1
ZADD racer_scores 150 "Henshaw"
(integer) 0
ZINCRBY racer_scores 50 "Wood"
"150"
ZINCRBY racer_scores 50 "Henshaw"
"200"
```

----------------------------------------

TITLE: Redis String Counter Commands
DESCRIPTION: Commands for atomically incrementing and decrementing numerical values stored as strings in Redis. These operations are highly efficient (O(1)).
SOURCE: https://github.com/redis/docs/blob/main/content/develop/data-types/strings.md#_snippet_5

LANGUAGE: APIDOC
CODE:
```
INCR key
  Description: Atomically increments the number stored at 'key' by 1.
  Return: Integer reply: the value of 'key' after the increment.
```

LANGUAGE: APIDOC
CODE:
```
INCRBY key increment
  Description: Atomically increments the number stored at 'key' by 'increment'. Can decrement with a negative 'increment'.
  Return: Integer reply: the value of 'key' after the increment.
```

LANGUAGE: APIDOC
CODE:
```
INCRBYFLOAT key increment
  Description: Atomically increments the number stored at 'key' by 'increment'. Supports floating point numbers.
  Return: Bulk string reply: the value of 'key' after the increment.
```

----------------------------------------

TITLE: Clear All Entries from Semantic Cache
DESCRIPTION: Shows how to completely invalidate and clear all stored entries from the semantic cache using `llmcache.clear()`. A subsequent check confirms that the cache is now empty.
SOURCE: https://github.com/redis/docs/blob/main/content/integrate/redisvl/user_guide/llmcache.md#_snippet_11

LANGUAGE: python
CODE:
```
llmcache.clear()

# should be empty now
llmcache.check(prompt=question)
```

----------------------------------------

TITLE: Retrieving Semantically Relevant Context with Distance Threshold
DESCRIPTION: Shows how to set a distance threshold for semantic similarity and retrieve only the most relevant messages from the history based on a given prompt, reducing the context size for LLM calls.
SOURCE: https://github.com/redis/docs/blob/main/content/integrate/redisvl/user_guide/message_history.md#_snippet_7

LANGUAGE: python
CODE:
```
prompt = "what have I learned about the size of England?"
semantic_history.set_distance_threshold(0.35)
context = semantic_history.get_relevant(prompt)
for message in context:
    print(message)
```

----------------------------------------

TITLE: Connect to Redis database with redis-cli
DESCRIPTION: Demonstrates how to connect to a Redis database using the `redis-cli` command-line tool, set a key, and retrieve it. Replace `<endpoint>` and `<port>` with your database details.
SOURCE: https://github.com/redis/docs/blob/main/content/operate/rs/7.4/databases/connect/test-client-connectivity.md#_snippet_0

LANGUAGE: sh
CODE:
```
$ redis-cli -h <endpoint> -p <port>
127.0.0.1:16653> set key1 123
OK
127.0.0.1:16653> get key1
"123"
```

----------------------------------------

TITLE: Configure Debezium Server for MongoDB Write-behind using application.properties
DESCRIPTION: This configuration file sets up Debezium Server to stream changes from a MongoDB source to a Redis sink. It includes settings for Redis connection details (address, password, SSL, write acknowledgment), MongoDB source parameters (hosts, authentication, replication set, offset/schema history storage), and data filtering options (database, collection, and field include/exclude lists). Additionally, it defines data transformations and optional logging configurations for standalone Java processes.
SOURCE: https://github.com/redis/docs/blob/main/content/integrate/write-behind/reference/debezium/mongodb.md#_snippet_0

LANGUAGE: properties
CODE:
```
debezium.sink.type=redis
debenzium.sink.redis.message.format=extended
debenzium.sink.redis.address=<RDI_HOST>:<RDI_PORT>
# Comment the following line if not using a password for Write-behind.
debenzium.sink.redis.password=<RDI_PASSWORD>
debenzium.sink.redis.memory.limit.mb=80
# Redis SSL/TLS
#debezium.sink.redis.ssl.enabled=true
# When Redis is configured with a replica shard, these properties allow to verify that the data has been written to the replica.
#debezium.sink.redis.wait.enabled=true
#debezium.sink.redis.wait.timeout.ms=1000
#debezium.sink.redis.wait.retry.enabled=true
#debezium.sink.redis.wait.retry.delay.ms=1000
#debezium.source.database.history.redis.ssl.enabled=true
# Location of the Java keystore file containing an application process' own certificate and private key.
#javax.net.ssl.keyStore=<KEY_STORE_FILE_PATH>
# Password to access the private key from the keystore file specified by javax.net.ssl.keyStore. This password is used twice: To unlock the keystore file (store password), and To decrypt the private key stored in the keystore (key password).
#javax.net.ssl.keyStorePassword=<KEY_STORE_PASSWORD>
# Location of the Java keystore file containing the collection of CA certificates trusted by this application process (trust store).
#javax.net.ssl.trustStore=<TRUSE_STORE_FILE_PATH>
# Password to unlock the keystore file (store password) specified by javax.net.ssl.trustStore.
#javax.net.ssl.trustStorePassword=<TRUST_STORE_PASSWORD>

debenzium.source.connector.class=io.debezium.connector.mongodb.MongoDbConnector
debenzium.source.mongodb.hosts=<REPLICATION_SET_NAME>/<MONGO_DB_HOST>:<MONGO_DB_PORT>
debenzium.source.mongodb.connection.mode=replica_set
debenzium.source.mongodb.user=<MONGO_DB_USER>
debenzium.source.mongodb.password=<MONGO_DB_PASSWORD>
debenzium.source.offset.storage=io.debezium.storage.redis.offset.RedisOffsetBackingStore
debenzium.source.topic.prefix=<SOURCE_LOGICAL_SERVER_NAME>

debenzium.source.offset.flush.interval.ms=1000
debenzium.source.tombstones.on.delete=false
debenzium.source.schema.history.internal=io.debezium.storage.redis.history.RedisSchemaHistory

# Important: Do NOT use `include` and `exclude` database lists at the same time, use either `include` or `exclude`.
# An optional, comma-separated list of regular expressions that match database names to be monitored.
# By default, all databases are monitored.
#debezium.source.database.include.list=<DB_NAME1>,<DB_NAME2>...
# An optional, comma-separated list of regular expressions that match database names for which you do not want to capture changes.
#debezium.source.database.exclude.list=<DB_NAME1>,<DB_NAME2>...
# Important: Do NOT use `include` and `exclude` collection lists at the same time, use either `include` or `exclude`.
# An optional, comma-separated list of regular expressions that match collection names to be monitored.
#debezium.source.collection.include.list=<DB_NAME.COLLECTION_NAME1>,<DB_NAME.COLLECTION_NAME2>...
# An optional, comma-separated list of regular expressions that match collection names for which you do not want to capture changes.
#debezium.source.collection.exclude.list=<DB_NAME.COLLECTION_NAME1>,<DB_NAME.COLLECTION_NAME2>...

#An optional, comma-separated list of regular expressions that match field names for which you do not want to capture changes.
#debezium.source.field_exclude_list=<DB_NAME.COLLECTION_NAME1.FIELD_NAME1>,<DB_NAME.COLLECTION_NAME.FIELD_NAME2>

# Whether to include the detailed schema information generated by Debezium in each record written to RDI.
# Note: Including the schema reduces the initial sync throughput and is not recommended for large data sets.
debenzium.source.key.converter.schemas.enable=false
debenzium.source.value.converter.schemas.enable=false
# When detailed schema information is excluded, handle decimal numeric types as strings.
debenzium.source.decimal.handling.mode=string

debenzium.transforms=AddPrefix
debenzium.transforms.AddPrefix.type=org.apache.kafka.connect.transforms.RegexRouter
debenzium.transforms.AddPrefix.regex=.*
debenzium.transforms.AddPrefix.replacement=data:$0

# Logging
# Uncomment the following lines if running Debezium Server as a Java standalone process (non-containerized).
#quarkus.log.file.enable=true
#quarkus.log.file.path=<LOG_FILE_PATH>
#quarkus.log.file.rotation.max-file-size=100M
#quarkus.log.file.rotation.rotate-on-boot=true
#quarkus.log.file.rotation.file-suffix=.yyyy-MM-dd.gz
#quarkus.log.file.rotation.max-backup-index=3
```

----------------------------------------

TITLE: Run Redis Commands in redis-cli Interactive Mode
DESCRIPTION: Demonstrates how to start `redis-cli` in interactive mode and execute basic Redis commands like PING, SET, and GET. This mode allows for direct interaction with the Redis server without repeatedly typing `redis-cli`.
SOURCE: https://github.com/redis/docs/blob/main/content/operate/rs/7.8/references/cli-utilities/redis-cli/_index.md#_snippet_7

LANGUAGE: sh
CODE:
```
$ redis-cli -p 12000
127.0.0.1:12000> PING
PONG
127.0.0.1:12000> SET mykey "Hello world"
OK
127.0.0.1:12000> GET mykey
"Hello world"
```

----------------------------------------

TITLE: Start Redis Server with Configuration
DESCRIPTION: This command starts the Redis server using the `redis-full.conf` configuration file. This configuration file typically provides a comprehensive set of default settings for a full Redis instance.
SOURCE: https://github.com/redis/docs/blob/main/content/operate/oss_and_stack/install/build-stack/ubuntu-noble.md#_snippet_5

LANGUAGE: bash
CODE:
```
./src/redis-server redis-full.conf
```

----------------------------------------

TITLE: Add IP Address to Redis Set for Tracking
DESCRIPTION: This Python code snippet demonstrates how to add a new IP address to a Redis set named "ip_tracker". Using a set ensures that each IP address is stored only once, effectively tracking distinct visitors. This approach is simple and precise but can consume significant memory for very busy websites.
SOURCE: https://github.com/redis/docs/blob/main/content/develop/clients/redis-py/prob.md#_snippet_0

LANGUAGE: Python
CODE:
```
r.sadd("ip_tracker", new_ip_address)
```

----------------------------------------

TITLE: Define Person Entity with Redis OM Spring Annotations
DESCRIPTION: This Java code defines the `Person` entity, a core data model for the application. It includes various personal attributes such as name, age, and a personal statement. The entity is annotated with `@Document` for Redis persistence and uses `@Indexed` and `@Searchable` to enable efficient search capabilities on its properties, including a nested `Address` object and a set of `skills`.
SOURCE: https://github.com/redis/docs/blob/main/content/integrate/redisom-for-java/_index.md#_snippet_6

LANGUAGE: java
CODE:
```
package com.redis.om.skeleton.models;

import java.util.Set;

import org.springframework.data.annotation.Id;
import org.springframework.data.geo.Point;

import com.redis.om.spring.annotations.Document;
import com.redis.om.spring.annotations.Indexed;
import com.redis.om.spring.annotations.Searchable;

import lombok.AccessLevel;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NonNull;
import lombok.RequiredArgsConstructor;

@RequiredArgsConstructor(staticName = "of")
@AllArgsConstructor(access = AccessLevel.PROTECTED)
@Data
@Document
public class Person {
  // Id Field, also indexed
  @Id
  @Indexed
  private String id;

  // Indexed for exact text matching
  @Indexed @NonNull
  private String firstName;

  @Indexed @NonNull
  private String lastName;

  //Indexed for numeric matches
  @Indexed @NonNull
  private Integer age;

  //Indexed for Full Text matches
  @Searchable @NonNull
  private String personalStatement;

  //Indexed for Geo Filtering
  @Indexed @NonNull
  private Point homeLoc;

  // Nest indexed object
  @Indexed @NonNull
  private Address address;

  @Indexed @NonNull
  private Set<String> skills;
}
```

----------------------------------------

TITLE: Store and retrieve hash in Redis with Node.js
DESCRIPTION: Shows how to store and retrieve a hash (map) using `client.hSet()` and `client.hGetAll()`. The example includes logging the retrieved hash object.
SOURCE: https://github.com/redis/docs/blob/main/content/develop/clients/nodejs/connect.md#_snippet_2

LANGUAGE: JavaScript
CODE:
```
await client.hSet('user-session:123', {
    name: 'John',
    surname: 'Smith',
    company: 'Redis',
    age: 29
})

let userSession = await client.hGetAll('user-session:123');
console.log(JSON.stringify(userSession, null, 2));
/*
{
  "surname": "Smith",
  "name": "John",
  "company": "Redis",
  "age": "29"
}
 */
```

----------------------------------------

TITLE: Ruby: Redis Stream Consumer Group Implementation
DESCRIPTION: A comprehensive Ruby example demonstrating a robust Redis Stream consumer. It shows how to connect to Redis, read pending messages on startup, then switch to reading new messages, process them, and acknowledge them using XACK.
SOURCE: https://github.com/redis/docs/blob/main/content/develop/data-types/streams.md#_snippet_29

LANGUAGE: Ruby
CODE:
```
require 'redis'

if ARGV.length == 0
    puts "Please specify a consumer name"
    exit 1
end

ConsumerName = ARGV[0]
GroupName = "mygroup"
r = Redis.new

def process_message(id,msg)
    puts "[#{ConsumerName}] #{id} = #{msg.inspect}"
end

$lastid = '0-0'

puts "Consumer #{ConsumerName} starting..."
check_backlog = true
while true
    # Pick the ID based on the iteration: the first time we want to
    # read our pending messages, in case we crashed and are recovering.
    # Once we consumed our history, we can start getting new messages.
    if check_backlog
        myid = $lastid
    else
        myid = '>'
    end

    items = r.xreadgroup('GROUP',GroupName,ConsumerName,'BLOCK','2000','COUNT','10','STREAMS',:my_stream_key,myid)

    if items == nil
        puts "Timeout!"
        next
    end

    # If we receive an empty reply, it means we were consuming our history
    # and that the history is now empty. Let's start to consume new messages.
    check_backlog = false if items[0][1].length == 0

    items[0][1].each{|i|
        id,fields = i

        # Process the message
        process_message(id,fields)

        # Acknowledge the message as processed
        r.xack(:my_stream_key,GroupName,id)

        $lastid = id
    }
end
```

----------------------------------------

TITLE: Redis SLOWLOG GET Command API Documentation
DESCRIPTION: Detailed API documentation for the Redis SLOWLOG GET command, including its purpose, configuration directives, arguments, and the structure of its returned entries.
SOURCE: https://github.com/redis/docs/blob/main/content/commands/slowlog-get.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
Command: SLOWLOG GET
Syntax: SLOWLOG GET [count]

Arguments:
  count:
    Type: integer
    Optional: true
    Description: Limits the number of returned entries. Default is 10. -1 returns all entries.

Description:
  Returns entries from the Redis slow log in chronological order. The slow log records commands that exceed a specified execution time (excluding I/O operations). Entries are added based on 'slowlog-log-slower-than' and limited by 'slowlog-max-len'.

Slow Log Entry Structure (6 values):
  1. Unique progressive identifier
  2. Unix timestamp of processing
  3. Execution time in microseconds
  4. Array of command arguments
  5. Client IP address and port
  6. Client name (if set via CLIENT SETNAME)

Return Information:
  RESP2: Array reply - a list of slow log entries.
  RESP3: Array reply - a list of slow log entries.

Metadata:
  Complexity: O(N) where N is the number of entries returned
  Since: 2.2.12
  History:
    4.0.0: Added client IP address, port and name to the reply.
  ACL Categories: @admin, @slow, @dangerous
  Command Flags: admin, loading, stale
  Hints: request_policy:all_nodes, nondeterministic_output
```

----------------------------------------

TITLE: SENTINEL SIMULATE-FAILURE Command
DESCRIPTION: This command simulates different Sentinel crash scenarios for testing and development purposes. It can simulate crashes after an election or after a promotion.
SOURCE: https://github.com/redis/docs/blob/main/content/operate/oss_and_stack/management/sentinel.md#_snippet_33

LANGUAGE: APIDOC
CODE:
```
SENTINEL SIMULATE-FAILURE (crash-after-election|crash-after-promotion|help)
  - Options:
    - crash-after-election: Simulates a crash after a master election.
    - crash-after-promotion: Simulates a crash after a replica promotion.
    - help: Displays help information for the command.
  - Purpose: Simulates Sentinel crash scenarios.
  - Minimum Version: 3.2
```

----------------------------------------

TITLE: Redis CLUSTER KEYSLOT Command API Reference
DESCRIPTION: Detailed API documentation for the Redis CLUSTER KEYSLOT command, outlining its arguments, syntax, complexity, and return type. This reference provides a comprehensive overview of the command's behavior and properties.
SOURCE: https://github.com/redis/docs/blob/main/content/commands/cluster-keyslot.md#_snippet_1

LANGUAGE: APIDOC
CODE:
```
Command: CLUSTER KEYSLOT
Description: Returns the hash slot for a key.
Summary: Returns the hash slot for a key.
Since: 3.0.0

Arguments:
  - name: key
    type: string
    display_text: key

Syntax: CLUSTER KEYSLOT key

ACL Categories: @slow
Command Flags: stale
Complexity: O(N) where N is the number of bytes in the key
Group: cluster
Arity: 3

Return Type: Integer reply
Return Description: The hash slot number for the specified key
```

----------------------------------------

TITLE: Define Kubernetes Redis Enterprise Cluster with YAML
DESCRIPTION: This YAML manifest defines a Redis Enterprise Cluster (REC) Custom Resource. It configures a 3-node cluster with persistent storage enabled (20Gi per node), allocates 2 CPU and 4Gi memory to each node, and specifies the container image versions for Redis Enterprise, services rigger, and bootstrapper.
SOURCE: https://github.com/redis/docs/blob/main/content/embeds/k8s/openshift_rec.md#_snippet_0

LANGUAGE: yaml
CODE:
```
apiVersion: app.redislabs.com/v1
kind: RedisEnterpriseCluster
metadata:
  name: rec
  labels:
    app: redis-enterprise
spec:
  # The number of Redis Enterprise nodes in the clusters.
  nodes: 3

  persistentSpec:
    # Whether to enable persistent storage for the Redis Enterprise nodes.
    enabled: true

    # The size of the persistent volume for each Redis Enterprise node.
    volumeSize: 20Gi

  # The resources allocated to each Redis Enterprise node.
  redisEnterpriseNodeResources:
    requests:
      cpu: 2
      memory: 4Gi
    limits:
      cpu: 2
      memory: 4Gi
  redisEnterpriseImageSpec:
    repository: registry.connect.redhat.com/redislabs/redis-enterprise
    versionTag: 7.22.0-28
  redisEnterpriseServicesRiggerImageSpec:
    repository: registry.connect.redhat.com/redislabs/services-manager
  bootstrapperImageSpec:
    repository: registry.connect.redhat.com/redislabs/redis-enterprise-operator
```

----------------------------------------

TITLE: Set and Retrieve All Fields of a Redis Hash
DESCRIPTION: Demonstrates how to use HSET to set multiple fields in a hash, and HGET and HGETALL to retrieve individual fields and all field-value pairs respectively. This illustrates the basic usage of Redis hashes for object representation.
SOURCE: https://github.com/redis/docs/blob/main/content/develop/data-types/hashes.md#_snippet_0

LANGUAGE: Redis CLI
CODE:
```
> HSET bike:1 model Deimos brand Ergonom type 'Enduro bikes' price 4972
(integer) 4
> HGET bike:1 model
"Deimos"
> HGET bike:1 price
"4972"
> HGETALL bike:1
1) "model"
2) "Deimos"
3) "brand"
4) "Ergonom"
5) "type"
6) "Enduro bikes"
7) "price"
8) "4972"
```

----------------------------------------

TITLE: Connect to Redis with Python and SSL
DESCRIPTION: This Python code snippet uses the `redis-py` library to establish a secure connection to a Redis database over SSL. It requires the database hostname and the path to the SSL CA certificate. The `r.info()` method is then called to retrieve and print detailed information about the Redis server, verifying connectivity.
SOURCE: https://github.com/redis/docs/blob/main/content/operate/kubernetes/7.4.6/networking/ingress.md#_snippet_6

LANGUAGE: python
CODE:
```
import redis

r = redis.StrictRedis(host='<my-db-hostname>',
              port=443, db=0, ssl=True,
              ssl_ca_certs='/<file-path>/proxy_cert.pem')


print(r.info())
```

----------------------------------------

TITLE: Redis Scripting: redis.call() vs. redis.pcall() API
DESCRIPTION: Explains the difference between `redis.call()` and `redis.pcall()` for executing Redis commands within a Lua script. `redis.call()` propagates errors directly to the client, while `redis.pcall()` returns errors to the script's execution context for handling.
SOURCE: https://github.com/redis/docs/blob/main/content/develop/interact/programmability/eval-intro.md#_snippet_5

LANGUAGE: APIDOC
CODE:
```
redis.call(command: string, ...args: any[]): any
  Description: Executes a Redis command. If an error occurs, it is returned directly to the client that executed the script.
  Parameters:
    command: The Redis command to execute (e.g., 'SET', 'GET').
    ...args: Arguments for the Redis command.
  Returns: The result of the Redis command.

redis.pcall(command: string, ...args: any[]): any
  Description: Executes a Redis command. If an error occurs, it is returned to the script's execution context for possible handling by the script itself.
  Parameters:
    command: The Redis command to execute (e.g., 'SET', 'GET').
    ...args: Arguments for the Redis command.
  Returns: The result of the Redis command, or an error object if an error occurred.
```

----------------------------------------

TITLE: Start Redis Stack Database with Docker Compose
DESCRIPTION: Command to start a Redis Stack database using Docker Compose, creating the necessary network and container.
SOURCE: https://github.com/redis/docs/blob/main/content/integrate/redisom-for-python/_index.md#_snippet_2

LANGUAGE: bash
CODE:
```
$ docker-compose up -d
```

----------------------------------------

TITLE: Redis Sorted Set Operations: Managing Ordered Collections with Scores
DESCRIPTION: Shows how to add elements with associated floating-point scores to a Redis Sorted Set using ZADD, retrieve elements in order by score using ZRANGE, and check an element's score with ZSCORE. It highlights that elements in a Sorted Set are unique and ordered by their score.
SOURCE: https://github.com/redis/docs/blob/main/content/develop/use/patterns/twitter-clone.md#_snippet_7

LANGUAGE: Redis CLI
CODE:
```
ZADD zset 10 a
ZADD zset 5 b
ZADD zset 12.55 c
ZRANGE zset 0 -1 => b,a,c
```

LANGUAGE: Redis CLI
CODE:
```
ZSCORE zset a => 10
```

----------------------------------------

TITLE: Define and Validate Data Schema with RedisVL SearchIndex
DESCRIPTION: This Python snippet illustrates how to define a schema for a Redis SearchIndex, including text, numeric, and vector fields. It shows a `car_schema` definition with various field types and attributes. The `validate_on_load` flag, when set to `True` during index creation (though not shown in this snippet), enforces schema validation upon data loading. A `sample_data_bad` example is provided to highlight how an incorrect data type (e.g., 'twenty-two' for 'mpg') would cause a validation error.
SOURCE: https://github.com/redis/docs/blob/main/content/integrate/redisvl/user_guide/release_guide/0_5_0_release.md#_snippet_4

LANGUAGE: python
CODE:
```
# NBVAL_SKIP
from redisvl.index import SearchIndex

# sample schema
car_schema = {
    "index": {
        "name": "cars",
        "prefix": "cars",
        "storage_type": "json"
    },
    "fields": [
        {"name": "make", "type": "text"},
        {"name": "model", "type": "text"},
        {"name": "description", "type": "text"},
        {"name": "mpg", "type": "numeric"},
        {
            "name": "car_embedding",
            "type": "vector",
            "attrs": {
                "dims": 3,
                "distance_metric": "cosine",
                "algorithm": "flat",
                "datatype": "float32"
            }

        }
    ]
}

sample_data_bad = [
    {
        "make": "Toyota",
        "model": "Camry",
        "description": "A reliable sedan with great fuel economy.",
        "mpg": 28,
        "car_embedding": [0.1, 0.2, 0.3]
    },
    {
        "make": "Honda",
        "model": "CR-V",
        "description": "A practical SUV with advanced technology.",
        # incorrect type will throw an error
        "mpg": "twenty-two",
        "car_embedding": [0.4, 0.5, 0.6]
    }
]
```

----------------------------------------

TITLE: Update Redis cluster settings for mutual TLS authentication
DESCRIPTION: This request updates the cluster settings to enable mutual TLS certificate authentication and define authorized subjects. It sets `mtls_certificate_authentication` to true and specifies allowed client certificate subjects.
SOURCE: https://github.com/redis/docs/blob/main/content/operate/rs/release-notes/rs-7-8-releases/rs-7-8-4-18.md#_snippet_1

LANGUAGE: sh
CODE:
```
PUT /v1/cluster
{
  "mtls_certificate_authentication": true,
  "mtls_client_cert_subject_validation_type": "san_cn",
  "mtls_authorized_subjects": [{
    "CN": "test",
    "OU": [],
    "O": "",
    "C": "",
    "L": "",
    "ST": ""
  }]
}
```

----------------------------------------

TITLE: Apply When condition with NRedisStack HashSet
DESCRIPTION: This C# example demonstrates how to use `When.NotExists` with the `db.HashSet()` command in NRedisStack. It shows that `HashSet` with `When.NotExists` will not overwrite an existing field, while the default behavior (When.Always) will update the field.
SOURCE: https://github.com/redis/docs/blob/main/content/develop/clients/dotnet/condexec.md#_snippet_0

LANGUAGE: C#
CODE:
```
bool resp7 = db.HashSet("Details", "SerialNumber", "12345");
Console.WriteLine(resp7); // >>> true

db.HashSet("Details", "SerialNumber", "12345A", When.NotExists);
string resp8 = db.HashGet("Details", "SerialNumber");
Console.WriteLine(resp8); // >>> 12345

db.HashSet("Details", "SerialNumber", "12345A");
string resp9 = db.HashGet("Details", "SerialNumber");
Console.WriteLine(resp9); // >>> 12345A
```

----------------------------------------

TITLE: Naive Key Increment (Race Condition Example)
DESCRIPTION: Demonstrates a simple key increment operation that is prone to race conditions when multiple clients access the key concurrently. This approach can lead to incorrect final values if not handled atomically.
SOURCE: https://github.com/redis/docs/blob/main/content/develop/interact/transactions.md#_snippet_4

LANGUAGE: Redis
CODE:
```
val = GET mykey
val = val + 1
SET mykey $val
```

----------------------------------------

TITLE: Atomic Key Increment with WATCH (Optimistic Locking)
DESCRIPTION: Illustrates how to use Redis's WATCH command to implement an atomic increment operation. WATCH monitors 'mykey' and aborts the transaction if the key is modified by another client before EXEC, preventing race conditions. The operation should be retried if the transaction fails.
SOURCE: https://github.com/redis/docs/blob/main/content/develop/interact/transactions.md#_snippet_5

LANGUAGE: Redis
CODE:
```
WATCH mykey
val = GET mykey
val = val + 1
MULTI
SET mykey $val
EXEC
```

----------------------------------------

TITLE: Connect .NET application to Redis
DESCRIPTION: Demonstrates how to establish a basic connection to a Redis server using NRedisStack, either by passing a hostname:port string or a ConfigurationOptions object to specify user, password, and other settings. It shows setting and getting a string key.
SOURCE: https://github.com/redis/docs/blob/main/content/develop/clients/dotnet/connect.md#_snippet_0

LANGUAGE: csharp
CODE:
```
using NRedisStack;
using NRedisStack.RedisStackCommands;
using StackExchange.Redis;

ConfigurationOptions conf = new ConfigurationOptions {
    EndPoints = { "localhost:6379" },
    User = "yourUsername",
    Password = "yourPassword"
};

ConnectionMultiplexer redis = ConnectionMultiplexer.Connect(conf);
IDatabase db = redis.GetDatabase();

db.StringSet("foo", "bar");
Console.WriteLine(db.StringGet("foo")); // prints bar
```

----------------------------------------

TITLE: Redis Stream Consumer Group Processing Loop with XREADGROUP
DESCRIPTION: This pseudo-code demonstrates a typical loop for consuming new messages from a Redis stream using XREADGROUP. It shows how to block for new entries, iterate through messages, process them, and acknowledge them using XACK. It also briefly touches upon handling timeouts and the need for recovery logic for pending messages.
SOURCE: https://github.com/redis/docs/blob/main/content/commands/xreadgroup.md#_snippet_1

LANGUAGE: Pseudo-code
CODE:
```
WHILE true
    entries = XREADGROUP GROUP $GroupName $ConsumerName BLOCK 2000 COUNT 10 STREAMS mystream >
    if entries == nil
        puts "Timeout... try again"
        CONTINUE
    end

    FOREACH entries AS stream_entries
        FOREACH stream_entries as message
            process_message(message.id,message.fields)

            # ACK the message as processed
            XACK mystream $GroupName message.id
        END
    END
END
```

----------------------------------------

TITLE: PHP: User Login Authentication with Redis
DESCRIPTION: PHP code for handling user login. It validates username and password against Redis, retrieves the user's authentication secret, sets an authentication cookie, and redirects upon successful login, ensuring state is kept in Redis for distributed systems.
SOURCE: https://github.com/redis/docs/blob/main/content/develop/use/patterns/twitter-clone.md#_snippet_17

LANGUAGE: PHP
CODE:
```
include("retwis.php");

# Form sanity checks
if (!gt("username") || !gt("password"))
    goback("You need to enter both username and password to login.");

# The form is ok, check if the username is available
$username = gt("username");
$password = gt("password");
$r = redisLink();
$userid = $r->hget("users",$username);
if (!$userid)
    goback("Wrong username or password");
$realpassword = $r->hget("user:$userid","password");
if ($realpassword != $password)
    goback("Wrong username or password");

# Username / password OK, set the cookie and redirect to index.php
$authsecret = $r->hget("user:$userid","auth");
setcookie("auth",$authsecret,time()+3600*24*365);
header("Location: index.php");
```

----------------------------------------

TITLE: Generate client certificates for Redis TLS connection
DESCRIPTION: Provides Bash commands using OpenSSL to generate a private key, a certificate signing request (CSR), and a self-signed client certificate for secure TLS connections to Redis.
SOURCE: https://github.com/redis/docs/blob/main/content/develop/clients/php/connect.md#_snippet_4

LANGUAGE: bash
CODE:
```
openssl genrsa -out redis_user_private.key 2048
openssl req -new -key redis_user_private.key -out redis_user.csr
openssl x509 -req -days 365 -in redis_user.csr -signkey redis_user_private.key -out redis_user.crt
```

----------------------------------------

TITLE: RedisEnterpriseDatabaseSpec Object Definition
DESCRIPTION: This section defines the properties available within the RedisEnterpriseDatabaseSpec, which is used to configure and manage Redis Enterprise databases. Each property controls a specific aspect of the database, from connection settings and security to memory allocation and backup strategies.
SOURCE: https://github.com/redis/docs/blob/main/content/operate/kubernetes/reference/redis_enterprise_database_api.md#_snippet_1

LANGUAGE: APIDOC
CODE:
```
RedisEnterpriseDatabaseSpec:
  activeActive: object
    Description: Connection/ association to the Active-Active database.
    Required: false
  alertSettings: object
    Description: Settings for database alerts
    Required: false
  backup: object
    Description: Target for automatic database backups.
    Required: false
  clientAuthenticationCertificates: []string
    Description: The Secrets containing TLS Client Certificate to use for Authentication
    Required: false
  dataInternodeEncryption: boolean
    Description: Internode encryption (INE) setting. An optional boolean setting, overriding a similar cluster-wide policy. If set to False, INE is guaranteed to be turned off for this DB (regardless of cluster-wide policy). If set to True, INE will be turned on, unless the capability is not supported by the DB ( in such a case we will get an error and database creation will fail). If left unspecified, will be disabled if internode encryption is not supported by the DB (regardless of cluster default). Deleting this property after explicitly setting its value shall have no effect.
    Required: false
  databasePort: integer
    Description: Database port number. TCP port on which the database is available. Will be generated automatically if omitted. can not be changed after creation
    Required: false
  databaseSecretName: string
    Description: The name of the secret that holds the password to the database (redis databases only). If secret does not exist, it will be created. To define the password, create an opaque secret and set the name in the spec. The password will be taken from the value of the 'password' key. Use an empty string as value within the secret to disable authentication for the database. Notes - For Active-Active databases this secret will not be automatically created, and also, memcached databases must not be set with a value, and a secret/password will not be automatically created for them. Use the memcachedSaslSecretName field to set authentication parameters for memcached databases.
    Required: false
  defaultUser: boolean
    Description: Is connecting with a default user allowed?
    Required: false
  evictionPolicy: string
    Description: Database eviction policy. see more https://docs.redislabs.com/latest/rs/administering/database-operations/eviction-policy/
    Required: false
  isRof: boolean
    Description: Whether it is an RoF database or not. Applicable only for databases of type "REDIS". Assumed to be false if left blank.
    Required: false
  memcachedSaslSecretName: string
    Description: Credentials used for binary authentication in memcached databases. The credentials should be saved as an opaque secret and the name of that secret should be configured using this field. For username, use 'username' as the key and the actual username as the value. For password, use 'password' as the key and the actual password as the value. Note that connections are not encrypted.
    Required: false
  memorySize: string
    Description: memory size of database. use formats like 100MB, 0.1GB. minimum value in 100MB. When redis on flash (RoF) is enabled, this value refers to RAM+Flash memory, and it must not be below 1GB.
    Required: false
  modulesList: []object
    Description: (Description truncated in input)
    Required: false
```

----------------------------------------

TITLE: Redis Enterprise Cluster Alerts and Events Reference
DESCRIPTION: A comprehensive list of alerts and events that can appear in Redis Enterprise Cluster Manager UI logs and syslog, detailing their UI message, severity, and additional notes.
SOURCE: https://github.com/redis/docs/blob/main/content/operate/rs/clusters/logging/alerts-events.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
AlertsAndEvents:
  - alert_event: "aof_slow_disk_io"
    ui_message: "Redis performance is degraded as a result of disk I/O limits"
    severity: "True: error, False: info"
    notes: "node alert"
  - alert_event: "authentication_err"
    ui_message: ""
    severity: "error"
    notes: "bdb event; Replica of - error authenticating with the source database"
  - alert_event: "backup_delayed"
    ui_message: "Periodic backup has been delayed for longer than <threshold> minutes"
    severity: "True: warning, False: info"
    notes: "bdb alert; Has threshold parameter in the data: section of the log entry."
  - alert_event: "backup_failed"
    ui_message: ""
    severity: "error"
    notes: "bdb event"
  - alert_event: "backup_started"
    ui_message: ""
    severity: "info"
    notes: "bdb event"
  - alert_event: "backup_succeeded"
    ui_message: ""
    severity: "info"
    notes: "bdb event"
  - alert_event: "bdb_created"
    ui_message: ""
    severity: "info"
    notes: "bdb event"
  - alert_event: "bdb_deleted"
    ui_message: ""
    severity: "info"
    notes: "bdb event"
  - alert_event: "bdb_updated"
    ui_message: ""
    severity: "info"
    notes: "bdb event; Indicates that a bdb configuration has been updated"
  - alert_event: "checks_error"
    ui_message: ""
    severity: "error"
    notes: "node event; Indicates that one or more node checks have failed"
  - alert_event: "cluster_updated"
    ui_message: ""
    severity: "info"
    notes: "cluster event; Indicates that cluster settings have been updated"
  - alert_event: "compression_unsup_err"
    ui_message: ""
    severity: "error"
    notes: "bdb event; Replica of - Compression not supported by sync destination"
  - alert_event: "crossslot_err"
    ui_message: ""
    severity: "error"
    notes: "bdb event; Replica of - sharded destination does not support operation executed on source"
  - alert_event: "cpu_utilization"
    ui_message: "CPU utilization has reached <threshold>%"
    severity: "True: warning, False: info"
    notes: "node alert; Has global_threshold parameter in the key/value section of the log entry."
```

----------------------------------------

TITLE: Redis CLI: Retrieve Key Value
DESCRIPTION: Demonstrates how to use the Redis command-line interface to retrieve the value of a key, including cases where the key does not exist and setting a new key.
SOURCE: https://github.com/redis/docs/blob/main/content/commands/get.md#_snippet_0

LANGUAGE: CLI
CODE:
```
GET nonexisting
SET mykey "Hello"
GET mykey
```

----------------------------------------

TITLE: Connect to Redis with redis-cli
DESCRIPTION: Demonstrates connecting to a Redis database using the built-in command-line tool `redis-cli` and performing basic `set` and `get` operations to verify connectivity.
SOURCE: https://github.com/redis/docs/blob/main/content/operate/rs/databases/connect/test-client-connectivity.md#_snippet_0

LANGUAGE: sh
CODE:
```
$ redis-cli -h <endpoint> -p <port>
127.0.0.1:16653> set key1 123
OK
127.0.0.1:16653> get key1
"123"
```

----------------------------------------

TITLE: Store and retrieve string in Redis with Node.js
DESCRIPTION: Demonstrates how to store a simple string key-value pair using `client.set()` and retrieve its value using `client.get()`.
SOURCE: https://github.com/redis/docs/blob/main/content/develop/clients/nodejs/connect.md#_snippet_1

LANGUAGE: JavaScript
CODE:
```
await client.set('key', 'value');
const value = await client.get('key');
```

----------------------------------------

TITLE: Check Membership in Redis Sets
DESCRIPTION: Illustrates how to check for the existence of single or multiple elements within a Redis set using SISMEMBER and SMISMEMBER commands, returning 1 for existence and 0 otherwise.
SOURCE: https://github.com/redis/docs/blob/main/content/develop/data-types/sets.md#_snippet_5

LANGUAGE: Redis CLI
CODE:
```
SISMEMBER bikes:racing:france bike:1
(integer) 1
SMISMEMBER bikes:racing:france bike:2 bike:3 bike:4
1) (integer) 1
2) (integer) 1
3) (integer) 0
```

----------------------------------------

TITLE: Execute Asynchronous Vector Query
DESCRIPTION: This snippet demonstrates how to execute an asynchronous vector query against the Redis index using `index.query()`. The results are then printed using a helper function `result_print()`.
SOURCE: https://github.com/redis/docs/blob/main/content/integrate/redisvl/user_guide/getting_started.md#_snippet_14

LANGUAGE: python
CODE:
```
results = await index.query(query)
result_print(results)
```

----------------------------------------

TITLE: Conditional Use of NUMERIC Fields
DESCRIPTION: Avoid using NUMERIC fields for simple matching requirements; TAG fields are more efficient when full numeric range capabilities are not needed.
SOURCE: https://github.com/redis/docs/blob/main/content/develop/interact/search-and-query/best-practices/scalable-query-best-practices.md#_snippet_3

LANGUAGE: APIDOC
CODE:
```
NUMERIC
```

----------------------------------------

TITLE: Query Redis Vector Set for Similarity (Python)
DESCRIPTION: Query the 'famousPeople' vector set for similar data. This example generates an embedding for the query text 'actors' and uses `r.vset().vsim()` to return elements ranked by similarity. It demonstrates a basic similarity search.
SOURCE: https://github.com/redis/docs/blob/main/content/develop/clients/redis-py/vecsets.md#_snippet_6

LANGUAGE: Python
CODE:
```
query_value = "actors"

actors_results = r.vset().vsim(
    "famousPeople",
    model.encode(query_value).astype(np.float32).tobytes(),
)

print(f"'actors': {actors_results}")
```

----------------------------------------

TITLE: Simulate Redis LRU Cache Performance with redis-cli
DESCRIPTION: Execute the `redis-cli --lru-test` command to simulate LRU cache behavior. The output shows real-time statistics including Gets/sec, Hits, and Misses. The initial lines demonstrate the cache populating with a low hit rate. Subsequent lines, after the cache stabilizes or with increased `maxmemory` (e.g., 500MB), show a significantly improved hit rate, illustrating the impact of memory provisioning on cache performance. Note: This test uses pipelining and stresses the server, do not use it with production instances.
SOURCE: https://github.com/redis/docs/blob/main/content/develop/tools/cli.md#_snippet_44

LANGUAGE: Shell
CODE:
```
$ ./redis-cli --lru-test 10000000
156000 Gets/sec | Hits: 4552 (2.92%) | Misses: 151448 (97.08%)
153750 Gets/sec | Hits: 12906 (8.39%) | Misses: 140844 (91.61%)
159250 Gets/sec | Hits: 21811 (13.70%) | Misses: 137439 (86.30%)
151000 Gets/sec | Hits: 27615 (18.29%) | Misses: 123385 (81.71%)
145000 Gets/sec | Hits: 32791 (22.61%) | Misses: 112209 (77.39%)
157750 Gets/sec | Hits: 42178 (26.74%) | Misses: 115572 (73.26%)
154500 Gets/sec | Hits: 47418 (30.69%) | Misses: 107082 (69.31%)
151250 Gets/sec | Hits: 51636 (34.14%) | Misses: 99614 (65.86%)
120750 Gets/sec | Hits: 48774 (40.39%) | Misses: 71976 (59.61%)
122500 Gets/sec | Hits: 49052 (40.04%) | Misses: 73448 (59.96%)
127000 Gets/sec | Hits: 50870 (40.06%) | Misses: 76130 (59.94%)
124250 Gets/sec | Hits: 50147 (40.36%) | Misses: 74103 (59.64%)
140000 Gets/sec | Hits: 135376 (96.70%) | Misses: 4624 (3.30%)
141250 Gets/sec | Hits: 136523 (96.65%) | Misses: 4727 (3.35%)
140250 Gets/sec | Hits: 135457 (96.58%) | Misses: 4793 (3.42%)
140500 Gets/sec | Hits: 135947 (96.76%) | Misses: 4553 (3.24%)
```

----------------------------------------

TITLE: CVE-2024-31228: Denial-of-service via long string match patterns in Redis (7.2.x)
DESCRIPTION: Authenticated users can cause a denial-of-service by using extremely long string match patterns with commands like KEYS, SCAN, PSUBSCRIBE, FUNCTION LIST, COMMAND LIST, and ACL definitions, leading to unbounded recursion and process crashes in Redis 7.2.x.
SOURCE: https://github.com/redis/docs/blob/main/content/operate/rs/release-notes/rs-7-8-releases/rs-7-8-4-18.md#_snippet_8

LANGUAGE: APIDOC
CODE:
```
Vulnerability: CVE-2024-31228
Description: An authenticated user can trigger a denial-of-service by using specially crafted, long string match patterns on supported commands such as `KEYS`, `SCAN`, `PSUBSCRIBE`, `FUNCTION LIST`, `COMMAND LIST`, and ACL definitions. Matching of extremely long patterns may result in unbounded recursion, leading to stack overflow and process crashes.
Affected Commands: `KEYS`, `SCAN`, `PSUBSCRIBE`, `FUNCTION LIST`, `COMMAND LIST`, ACL definitions
Impact: Denial-of-Service (DoS), Stack Overflow, Process Crash
Trigger: Specially crafted, long string match patterns
Affected Version: Redis 7.2.x
```

----------------------------------------

TITLE: Redis CLI SET command example
DESCRIPTION: An example of the `SET` command as it would be issued directly in the `redis-cli` tool.
SOURCE: https://github.com/redis/docs/blob/main/content/develop/clients/hiredis/issue-commands.md#_snippet_1

LANGUAGE: cli
CODE:
```
SET foo bar
```

----------------------------------------

TITLE: Connect to Redis using NRedisStack
DESCRIPTION: Establishes a connection to a Redis server running on localhost:6379 using `ConnectionMultiplexer` and retrieves a database instance for operations.
SOURCE: https://github.com/redis/docs/blob/main/content/develop/clients/dotnet/_index.md#_snippet_1

LANGUAGE: csharp
CODE:
```
using NRedisStack;
using NRedisStack.RedisStackCommands;
using StackExchange.Redis;
//...
ConnectionMultiplexer redis = ConnectionMultiplexer.Connect("localhost");
IDatabase db = redis.GetDatabase();
```

----------------------------------------

TITLE: Iterate Redis keyspace with `scan_iter()` in Python
DESCRIPTION: This Python example demonstrates how to use `redis-py`'s `scan_iter()` method to iterate through all keys in the Redis keyspace. It initializes a Redis client, sets up several keys, and then loops through them, printing each key and its corresponding value. The `scan_iter()` method handles pagination automatically, simplifying the process of retrieving large numbers of keys.
SOURCE: https://github.com/redis/docs/blob/main/content/develop/clients/redis-py/scaniter.md#_snippet_0

LANGUAGE: python
CODE:
```
import redis

r = redis.Redis(decode_responses=True)

r.set("key:1", "a")
r.set("key:2", "b")
r.set("key:3", "c")
r.set("key:4", "d")
r.set("key:5", "e")

for key in r.scan_iter():
    print(f"Key: {key}, value: {r.get(key)}")
# >>> Key: key:1, value: a
# >>> Key: key:4, value: d
# >>> Key: key:3, value: c
# >>> Key: key:2, value: b
# >>> Key: key:5, value: e
```

----------------------------------------

TITLE: Perform Basic Redis Operations with redis-cli
DESCRIPTION: Provides an example of basic Redis operations (PING, SET, GET) executed sequentially using `redis-cli` to test connectivity and store/retrieve a string value.
SOURCE: https://github.com/redis/docs/blob/main/content/operate/rs/references/cli-utilities/redis-cli/_index.md#_snippet_6

LANGUAGE: sh
CODE:
```
$ redis-cli -h <endpoint> -p 12000 PING
PONG
$ redis-cli -h <endpoint> -p 12000 SET mykey "Hello world"
OK
$ redis-cli -h <endpoint> -p 12000 GET mykey              
"Hello world"
```

----------------------------------------

TITLE: Run Redis Server with Docker
DESCRIPTION: Command to start the Redis Open Source server using a Docker image, mapping port 6379 from the container to the host and running in detached mode.
SOURCE: https://github.com/redis/docs/blob/main/content/operate/oss_and_stack/install/install-stack/docker.md#_snippet_0

LANGUAGE: bash
CODE:
```
docker run -d --name redis -p 6379:6379 redis:<version>
```

----------------------------------------

TITLE: Simplified Redis Connection Pooling with JedisPooled
DESCRIPTION: This Java snippet illustrates the use of `JedisPooled`, introduced in Jedis version 4.0.0, as a more straightforward alternative to `JedisPool`. It simplifies connection management by abstracting the `try-with-resources` block, allowing direct execution of Redis commands like `set()` and `get()` on the `JedisPooled` instance.
SOURCE: https://github.com/redis/docs/blob/main/content/develop/clients/jedis/connect.md#_snippet_13

LANGUAGE: java
CODE:
```
import redis.clients.jedis.JedisPooled;

//...

JedisPooled jedis = new JedisPooled("localhost", 6379);
jedis.set("foo", "bar");
System.out.println(jedis.get("foo")); // prints "bar"
```

----------------------------------------

TITLE: Execute K-Nearest Neighbors (KNN) Vector Search Query (Python)
DESCRIPTION: This Python code illustrates how to perform a vector similarity search in Redis. It constructs a `Query` object for KNN search on the `@embedding` field, creates a query embedding from `query_text` using `model.encode()`, and then executes the search via `r.ft('vector_idx').search()`, passing the query embedding as a parameter.
SOURCE: https://github.com/redis/docs/blob/main/content/develop/clients/redis-py/vecsearch.md#_snippet_6

LANGUAGE: python
CODE:
```
q = Query(
    "*=>[KNN 3 @embedding $vec AS vector_distance]"
).return_field("score").dialect(2)

query_text = "That is a happy person"

res = r.ft("vector_idx").search(
    q, query_params={
        "vec": model.encode(query_text).astype(np.float32).tobytes()
    }
)

print(res)
```

----------------------------------------

TITLE: Initialize and Store Entries in Semantic Cache
DESCRIPTION: This snippet demonstrates how to initialize a `SemanticCache` instance with a specified `distance_threshold` and a `HFTextVectorizer`. It then stores two prompt-response pairs, 'what is the capital of france?' and 'what is the capital of morocco?', into the cache.
SOURCE: https://github.com/redis/docs/blob/main/content/integrate/redisvl/user_guide/threshold_optimization.md#_snippet_0

LANGUAGE: python
CODE:
```
from redisvl.extensions.cache.llm import SemanticCache
from redisvl.utils.vectorize import HFTextVectorizer

sem_cache = SemanticCache(
    name="sem_cache",                                       # underlying search index name
    redis_url="redis://localhost:6379",                     # redis connection url string
    distance_threshold=0.5,                                 # semantic cache distance threshold
    vectorizer=HFTextVectorizer("redis/langcache-embed-v1") # embedding model
)

paris_key = sem_cache.store(prompt="what is the capital of france?", response="paris")
rabat_key = sem_cache.store(prompt="what is the capital of morocco?", response="rabat")
```

----------------------------------------

TITLE: Create RediSearch Index with Multiple JSON Vector Embeddings
DESCRIPTION: This snippet demonstrates how to create a RediSearch index named 'itemIdx5' on JSON documents, specifically for indexing multiple vector embeddings per item. It uses the JSONPath '$.embeddings[*]' to target an array of numeric arrays as a VECTOR type. It also includes commands to set two sample JSON documents, where 'item:2' contains multiple 'embeddings' arrays.
SOURCE: https://github.com/redis/docs/blob/main/content/develop/interact/search-and-query/indexing/_index.md#_snippet_21

LANGUAGE: sql
CODE:
```
127.0.0.1:6379> FT.CREATE itemIdx5 ON JSON PREFIX 1 item: SCHEMA $.embeddings[*] AS embeddings VECTOR FLAT 6 DIM 4 DISTANCE_METRIC L2 TYPE FLOAT32
OK
127.0.0.1:6379> JSON.SET item:1 $ '{"name":"Noise-cancelling Bluetooth headphones","description":"Wireless Bluetooth headphones with noise-cancelling technology","price":99.98,"stock":25,"colors":["black","silver"],"embeddings":[[0.87,-0.15,0.55,0.03]]}'
OK
127.0.0.1:6379> JSON.SET item:2 $ '{"name":"Wireless earbuds","description":"Wireless Bluetooth in-ear headphones","price":64.99,"stock":17,"colors":["black","white"],"embeddings":[[-0.7,-0.51,0.88,0.14],[-0.8,-0.15,0.33,-0.01]]}'
OK
```

----------------------------------------

TITLE: Perform Hybrid Query Excluding Specific Movie Title
DESCRIPTION: Executes a hybrid query to find the top 10 action movie reviews that are NOT 'spiderman' and are most similar to a given query vector. Results are sorted by distance.
SOURCE: https://github.com/redis/docs/blob/main/content/develop/interact/search-and-query/vecsim-hybrid_queries_examples.ipynb#_snippet_8

LANGUAGE: python
CODE:
```
# Give me the top 10 reviews on movies that aren't Spiderman that are similar to mine.
#(all ids which are not divided by 5)

q = Query(f'(@{genre_field_name}:{{action}} -@{title_field_name}:spider*)=>[KNN 10 @{vector_field_name} $vec_param AS dist]').sort_by('dist')
res = redis_conn.ft().search(q, query_params = {'vec_param': query_vector.tobytes()})

print_results(res)
```

----------------------------------------

TITLE: SENTINEL FAILOVER Command
DESCRIPTION: Forces a failover as if the master was not reachable, without requiring agreement from other Sentinels. A new version of the configuration will be published, ensuring other Sentinels update their configurations.
SOURCE: https://github.com/redis/docs/blob/main/content/operate/oss_and_stack/management/sentinel.md#_snippet_20

LANGUAGE: APIDOC
CODE:
```
SENTINEL FAILOVER <master name>
  - Parameters:
    - <master name>: The name of the master to force failover.
```

----------------------------------------

TITLE: Redis XADD Command API Reference
DESCRIPTION: Detailed API documentation for the Redis XADD command, which appends new messages to a stream, creating the stream key if it doesn't exist. It supports various options for trimming and ID generation, and accepts multiple field-value pairs for each entry.
SOURCE: https://github.com/redis/docs/blob/main/content/commands/xadd.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
XADD Command API:
  Syntax: XADD key [NOMKSTREAM] [<MAXLEN | MINID> [= | ~] threshold [LIMIT_ count]] <* | id> field value [field value ...]
  Arguments:
    - name: key
      type: key
      display_text: key
      key_spec_index: 0
    - name: nomkstream
      type: pure-token
      display_text: nomkstream
      optional: true
      since: 6.2.0
      token: NOMKSTREAM
    - name: trim
      type: block
      optional: true
      arguments:
        - name: strategy
          type: oneof
          arguments:
            - name: maxlen
              type: pure-token
              display_text: maxlen
              token: MAXLEN
            - name: minid
              type: pure-token
              display_text: minid
              since: 6.2.0
              token: MINID
        - name: operator
          type: oneof
          optional: true
          arguments:
            - name: equal
              type: pure-token
              display_text: equal
              token: '='
            - name: approximately
              type: pure-token
              display_text: approximately
              token: '~'
        - name: threshold
          type: string
          display_text: threshold
        - name: count
          type: integer
          display_text: count
          optional: true
          since: 6.2.0
          token: LIMIT
    - name: id-selector
      type: oneof
      arguments:
        - name: auto-id
          type: pure-token
          display_text: auto-id
          token: '*'
        - name: id
          type: string
          display_text: id
    - name: data
      type: block
      multiple: true
      arguments:
        - name: field
          type: string
          display_text: field
        - name: value
          type: string
          display_text: value
  Arity: -5
  Complexity: O(1) when adding a new entry, O(N) when trimming where N being the number of entries evicted.
  Group: stream
  ACL Categories: @write, @stream, @fast
  Command Flags: write, denyoom, fast
  Hints: nondeterministic_output
  History:
    - 6.2.0: Added the NOMKSTREAM option, MINID trimming strategy and the LIMIT option.
    - 7.0.0: Added support for the <ms>-* explicit ID form.
  Key Specifications:
    - RW: true
      begin_search:
        spec:
          index: 1
        type: index
      find_keys:
        spec:
          keystep: 1
          lastkey: 0
          limit: 0
        type: range
      notes: UPDATE instead of INSERT because of the optional trimming feature
      update: true
```

----------------------------------------

TITLE: CVE-2023-22458: HRANDFIELD/ZRANDMEMBER Integer Overflow DoS
DESCRIPTION: Integer overflow in the Redis HRANDFIELD and ZRANDMEMBER commands can lead to denial-of-service.
SOURCE: https://github.com/redis/docs/blob/main/content/operate/rs/release-notes/rs-7-4-2-releases/rs-7-4-6-22.md#_snippet_9

LANGUAGE: APIDOC
CODE:
```
CVE-ID: CVE-2023-22458
Description: Integer overflow in the Redis HRANDFIELD and ZRANDMEMBER commands can lead to denial-of-service.
Affected Commands: HRANDFIELD, ZRANDMEMBER
Affected Versions: Redis 7.0.8
```

----------------------------------------

TITLE: Execute K-NN Vector Search Query in Redis with Java
DESCRIPTION: This Java code snippet demonstrates how to perform a K-nearest neighbors (KNN) vector search in Redis. It generates an embedding for the query sentence using `encode()`, constructs a `Query` object with parameters for K, the embedding BLOB, and sorts results by `distance`. The code then executes the search against a specified index and prints the ID, distance, and content of the retrieved documents.
SOURCE: https://github.com/redis/docs/blob/main/content/develop/clients/jedis/vecsearch.md#_snippet_8

LANGUAGE: java
CODE:
```
String sentence = "That is a happy person";

int K = 3;
Query q = new Query("*=>[KNN $K @embedding $BLOB AS distance]")
                .returnFields("content", "distance")
                .addParam("K", K)
                .addParam(
                    "BLOB",
                    longsToFloatsByteString(
                        sentenceTokenizer.encode(sentence)..getIds()
                    )
                )
                .setSortBy("distance", true)
                .dialect(2);

List<Document> docs = jedis.ftSearch("vector_idx", q).getDocuments();

for (Document doc: docs) {
    System.out.println(
        String.format(
            "ID: %s, Distance: %s, Content: %s",
            doc.getId(),
            doc.get("distance"),
            doc.get("content")
        )
    );
}
```

----------------------------------------

TITLE: Add NRedisStack package to C# project
DESCRIPTION: Adds the NRedisStack NuGet package to the current C# project, providing Redis client functionality.
SOURCE: https://github.com/redis/docs/blob/main/content/develop/clients/dotnet/vecsearch.md#_snippet_1

LANGUAGE: bash
CODE:
```
dotnet add package NRedisStack
```

----------------------------------------

TITLE: Adjusting Distance Threshold for Broader Semantic Context
DESCRIPTION: Illustrates how increasing the distance threshold allows for the inclusion of a wider range of semantically similar messages, providing a larger conversational context.
SOURCE: https://github.com/redis/docs/blob/main/content/integrate/redisvl/user_guide/message_history.md#_snippet_8

LANGUAGE: python
CODE:
```
semantic_history.set_distance_threshold(0.7)

larger_context = semantic_history.get_relevant(prompt)
for message in larger_context:
    print(message)
```

----------------------------------------

TITLE: Install NRedisStack via dotnet CLI
DESCRIPTION: This command adds the NRedisStack NuGet package to your .NET project, making the client library available for use.
SOURCE: https://github.com/redis/docs/blob/main/content/develop/clients/dotnet/_index.md#_snippet_0

LANGUAGE: bash
CODE:
```
dotnet add package NRedisStack
```

----------------------------------------

TITLE: Example JSON Request Body for Creating Active-Active Database
DESCRIPTION: An example JSON payload for creating an Active-Active database without TLS, configured with two participating clusters. It specifies the default database configuration, including name and memory size, and details for each cluster such as URL, credentials, and compression settings.
SOURCE: https://github.com/redis/docs/blob/main/content/operate/rs/references/rest-api/requests/crdbs/_index.md#_snippet_5

LANGUAGE: json
CODE:
```
{
    "default_db_config":
    {
        "name": "sample-crdb",
        "memory_size": 214748365
    },
    "instances":
    [
        {
            "cluster":
            {
                "url": "http://<cluster1_FQDN>:9443",
                "credentials":
                {
                    "username": "<username>",
                    "password": "<password>"
                },
                "name": "cluster-1"
            },
            "compression": 6
        },
        {
            "cluster":
            {
                "url": "http://<cluster2_FQDN>:9443",
                "credentials":
                {
                    "username": "<username>",
                    "password": "<password>"
                },
                "name": "cluster-2"
            },
            "compression": 6
        }
    ],
    "name": "sample-crdb"
}
```

----------------------------------------

TITLE: Define RedisVL Search Index Schema
DESCRIPTION: This code defines the schema for a RedisVL search index named 'user_queries'. It specifies the index's prefix, storage type (hash), and a list of fields with their respective types (tag, text, numeric, geo, and vector) and attributes, such as vector dimensions and distance metric.
SOURCE: https://github.com/redis/docs/blob/main/content/integrate/redisvl/user_guide/hybrid_queries.md#_snippet_1

LANGUAGE: python
CODE:
```
schema = {
    "index": {
        "name": "user_queries",
        "prefix": "user_queries_docs",
        "storage_type": "hash", # default setting -- HASH
    },
    "fields": [
        {"name": "user", "type": "tag"},
        {"name": "credit_score", "type": "tag"},
        {"name": "job", "type": "text"},
        {"name": "age", "type": "numeric"},
        {"name": "last_updated", "type": "numeric"},
        {"name": "office_location", "type": "geo"},
        {
            "name": "user_embedding",
            "type": "vector",
            "attrs": {
                "dims": 3,
                "distance_metric": "cosine",
                "algorithm": "flat",
                "datatype": "float32"
            }

        }
    ]
}
```

----------------------------------------

TITLE: Connect to a Redis Cluster using Lettuce
DESCRIPTION: Demonstrates how to establish a connection to a Redis cluster using Lettuce's `RedisClusterClient` and `RedisURI`. It shows the basic steps for creating a client, connecting, and then shutting down the connection.
SOURCE: https://github.com/redis/docs/blob/main/content/develop/clients/lettuce/connect.md#_snippet_4

LANGUAGE: java
CODE:
```
import io.lettuce.core.RedisURI;
import io.lettuce.core.cluster.RedisClusterClient;
import io.lettuce.core.cluster.api.StatefulRedisClusterConnection;
import io.lettuce.core.cluster.api.async.RedisAdvancedClusterAsyncCommands;

// ...

RedisURI redisUri = RedisURI.Builder.redis("localhost").withPassword("authentication").build();

RedisClusterClient clusterClient = RedisClusterClient.create(redisUri);
StatefulRedisClusterConnection<String, String> connection = clusterClient.connect();
RedisAdvancedClusterAsyncCommands<String, String> commands = connection.async();

// ...

connection.close();
clusterClient.shutdown();
```

----------------------------------------

TITLE: Configure Connection and Command Timeouts in NRedisStack C#
DESCRIPTION: Illustrates how to set custom timeouts for connection attempts (`ConnectTimeout`), synchronous commands (`SyncTimeout`), and asynchronous commands (`AsyncTimeout`) using `ConfigurationOptions` when connecting to Redis with NRedisStack. This prevents indefinite hangs due to network or server errors.
SOURCE: https://github.com/redis/docs/blob/main/content/develop/clients/dotnet/produsage.md#_snippet_1

LANGUAGE: csharp
CODE:
```
var muxer = ConnectionMultiplexer.Connect(new ConfigurationOptions {
    ConnectTimeout = 1000,  // 1 second timeout for connections.
    SyncTimeout = 2000,     // 2 seconds for synchronous commands.
    AsyncTimeout = 3000     // 3 seconds for asynchronous commands.
        .
        .
});

var db = muxer.GetDatabase();
```

----------------------------------------

TITLE: Redis Pub/Sub: Publishing a Message to a Channel (CLI)
DESCRIPTION: Shows a Redis CLI command to publish the message 'Hello' to the 'second' channel. This action triggers message delivery to subscribed clients.
SOURCE: https://github.com/redis/docs/blob/main/content/develop/interact/pubsub.md#_snippet_3

LANGUAGE: Redis CLI
CODE:
```
> PUBLISH second Hello
```

----------------------------------------

TITLE: Connect to Redis and prepare for index creation
DESCRIPTION: Establishes a connection to the Redis server. It then attempts to drop any existing search index named `vector_idx` to ensure a clean state before creating a new index. The `try-except` block handles cases where the index might not exist, preventing errors.
SOURCE: https://github.com/redis/docs/blob/main/content/develop/clients/redis-py/vecsearch.md#_snippet_3

LANGUAGE: python
CODE:
```
r = redis.Redis(decode_responses=True)

try:
    r.ft("vector_idx").dropindex(True)
except redis.exceptions.ResponseError:
    pass
```

----------------------------------------

TITLE: Redis SCAN: Filtering by TYPE option
DESCRIPTION: This example demonstrates using the TYPE option with the whole-database SCAN command to iterate and return only keys that match a specified Redis type. It also highlights a quirk where some Redis types (like GeoHashes) might be internally implemented as other types (like zset), affecting type-based filtering.
SOURCE: https://github.com/redis/docs/blob/main/content/commands/scan.md#_snippet_7

LANGUAGE: Redis CLI
CODE:
```
> GEOADD geokey 0 0 value
(integer) 1
> ZADD zkey 1000 value
(integer) 1
> TYPE geokey
zset
> TYPE zkey
zset
> SCAN 0 TYPE zset
1) "0"
2) 1) "geokey"
   2) "zkey"
```

----------------------------------------

TITLE: Redis Complex Query Examples
DESCRIPTION: Illustrative examples demonstrating how to combine various query clauses in Redis to perform complex searches. Examples include basic text search, field-specific queries, numeric range filtering, multi-brand selection, tag-based filtering, and negative clauses to exclude results.
SOURCE: https://github.com/redis/docs/blob/main/content/develop/interact/search-and-query/administration/overview.md#_snippet_5

LANGUAGE: Redis Query Language
CODE:
```
lcd tv
```

LANGUAGE: Redis Query Language
CODE:
```
@title:(lcd tv)
```

LANGUAGE: Redis Query Language
CODE:
```
@title:(lcd tv)
@price:[100 500.2]
```

LANGUAGE: Redis Query Language
CODE:
```
@title:(lcd tv)
@brand:(sony | samsung | lg)
@price:[100 500.2]
```

LANGUAGE: Redis Query Language
CODE:
```
@title:(lcd tv)
@brand:(sony | samsung | lg)
@tags:{42 inch | smart tv}
@price:[100 500.2]
```

LANGUAGE: Redis Query Language
CODE:
```
@title:(lcd tv)
@brand:(sony | samsung | lg)
@tags:{42 inch | smart tv}
@price:[100 500.2]

-@tags:{plasma | crt}
```

----------------------------------------

TITLE: Store and Access Hash Fields in Redis
DESCRIPTION: Shows how to use Redis Hashes to store multiple field-value pairs for an object (e.g., `bike:1`) using `HSET`, and retrieve individual fields with `HGET` or all fields with `HGETALL`.
SOURCE: https://github.com/redis/docs/blob/main/content/develop/get-started/data-store.md#_snippet_2

LANGUAGE: Redis
CODE:
```
HSET bike:1 model Deimos brand Ergonom type 'Enduro bikes' price 4972
HGET bike:1 model
HGET bike:1 price
HGETALL bike:1
```

----------------------------------------

TITLE: Redis CLI HMGET Usage Example
DESCRIPTION: Demonstrates the usage of the HMGET command in redis-cli to retrieve multiple fields from a hash, including a non-existent field, showing how nil values are returned for missing fields.
SOURCE: https://github.com/redis/docs/blob/main/content/commands/hmget.md#_snippet_1

LANGUAGE: cli
CODE:
```
HSET myhash field1 "Hello"
HSET myhash field2 "World"
HMGET myhash field1 field2 nofield
```

----------------------------------------

TITLE: Redis Configuration: Set All Keys LRU Eviction Policy
DESCRIPTION: This configuration directive, typically found in `redis.conf` or set via `CONFIG SET`, instructs Redis to use an approximated Least Recently Used (LRU) algorithm to evict keys from the dataset when the `maxmemory` limit is reached. This policy applies to all keys, making explicit `EXPIRE` commands unnecessary for cache management.
SOURCE: https://github.com/redis/docs/blob/main/content/operate/oss_and_stack/management/config.md#_snippet_6

LANGUAGE: Redis Config
CODE:
```
maxmemory-policy allkeys-lru
```

----------------------------------------

TITLE: Create Redis JSON Search Index with C#
DESCRIPTION: This C# code snippet demonstrates how to define a schema for indexing JSON documents in Redis, including text, tag, and vector fields. It specifies the use of "IndexDataType.JSON" and a key prefix for the index, highlighting the differences from hash indexing.
SOURCE: https://github.com/redis/docs/blob/main/content/develop/clients/dotnet/vecsearch.md#_snippet_15

LANGUAGE: cs
CODE:
```
var jsonSchema = new Schema()
    .AddTextField(new FieldName("$.content", "content"))
    .AddTagField(new FieldName("$.genre", "genre"))
    .AddVectorField(
        new FieldName("$.embedding", "embedding"),
        VectorField.VectorAlgo.HNSW,
        new Dictionary<string, object>()
        {
            ["TYPE"] = "FLOAT32",
            ["DIM"] = "150",
            ["DISTANCE_METRIC"] = "L2"
        }
    );

db.FT().Create(
    "vector_json_idx",
    new FTCreateParams()
        .On(IndexDataType.JSON)
        .Prefix("jdoc:"),
    jsonSchema
);
```

----------------------------------------

TITLE: Perform Vector Similarity Search with Normalized Distance
DESCRIPTION: This code performs a vector similarity search for job descriptions, specifically for 'Software Engineer'. It uses VectorQuery and sets normalize_vector_distance to True to ensure the returned vector_distance is normalized between 0 and 1, where 1 indicates a perfect match.
SOURCE: https://github.com/redis/docs/blob/main/content/integrate/redisvl/user_guide/release_guide/0_5_0_release.md#_snippet_12

LANGUAGE: python
CODE:
```
from redisvl.query import VectorQuery

query = VectorQuery(
    vector=emb_model.embed("Software Engineer", as_buffer=True),
    vector_field_name="job_embedding",
    return_fields=["job_title", "job_description", "posted"],
    normalize_vector_distance=True,
)

res = index.query(query)
res
```

----------------------------------------

TITLE: Recover Redis Cluster Configuration with rladmin
DESCRIPTION: Use the `rladmin cluster recover` command on the first node of the new cluster to restore the original cluster configuration from a backup file. This command requires specifying the backup `filename` and optionally the `node_uid` and `rack_id` to map the new node to its original cluster identity.
SOURCE: https://github.com/redis/docs/blob/main/content/operate/rs/7.4/clusters/cluster-recovery.md#_snippet_0

LANGUAGE: sh
CODE:
```
rladmin cluster recover filename [ <persistent_path> | <ephemeral_path> ]<filename> node_uid <node_uid> rack_id <rack_id>
```

LANGUAGE: sh
CODE:
```
rladmin cluster recover filename /tmp/persist/ccs/ccs-redis.rdb node_uid 1 rack_id 5
```

----------------------------------------

TITLE: Create RedisJSON Vector Search Index
DESCRIPTION: Defines a RediSearch index named `vss_idx` on JSON documents. It specifies a vector field `$.vector` with `FLAT` indexing, `FLOAT32` type, `DIM 4`, and `L2` distance metric, suitable for vector similarity search.
SOURCE: https://github.com/redis/docs/blob/main/content/commands/ft.profile.md#_snippet_7

LANGUAGE: redis
CODE:
```
FT.CREATE vss_idx ON JSON PREFIX 1 vec: SCHEMA $.vector AS vector VECTOR FLAT 6 TYPE FLOAT32 DIM 4 DISTANCE_METRIC L2
```

----------------------------------------

TITLE: Docker Compose Configuration for Prometheus and Grafana
DESCRIPTION: This Docker Compose YAML file defines the services for running Prometheus and Grafana. It configures port mappings, mounts the Prometheus configuration file into the Prometheus container, and sets up an administrative password and link for Grafana.
SOURCE: https://github.com/redis/docs/blob/main/content/integrate/prometheus-with-redis-cloud/_index.md#_snippet_2

LANGUAGE: yml
CODE:
```
version: '3'
services:
    prometheus-server:
        image: prom/prometheus
        ports:
            - 9090:9090
        volumes:
            - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml

    grafana-ui:
        image: grafana/grafana
        ports:
            - 3000:3000
        environment:
            - GF_SECURITY_ADMIN_PASSWORD=secret
        links:
            - prometheus-server:prometheus
```

----------------------------------------

TITLE: Using Redis WATCH with Connection Pools in JavaScript
DESCRIPTION: In concurrent environments like web servers, it's crucial to use a connection pool with Redis's WATCH and MULTI/EXEC commands. This ensures that each transaction operates on an isolated connection, preventing interference between concurrent WATCH and MULTI/EXEC calls. The example shows how to use `createClientPool` and handle `WatchError` if the transaction aborts.
SOURCE: https://github.com/redis/docs/blob/main/content/develop/clients/nodejs/transpipe.md#_snippet_4

LANGUAGE: js
CODE:
```
import { createClientPool } from 'redis';

const pool = await createClientPool()
  .on('error', err => console.error('Redis Client Pool Error', err));

try {
  await pool.execute(async client => {
    await client.watch('key');

    const multi = client.multi()
      .ping()
      .get('key');

    if (Math.random() > 0.5) {
      await client.watch('another-key');
      multi.set('another-key', await client.get('another-key') / 2);
    }

    return multi.exec();
  });
} catch (err) {
  if (err instanceof WatchError) {
    // the transaction aborted
  }
}
```

----------------------------------------

TITLE: Launch Redis CLI
DESCRIPTION: After Redis is installed and running, use this command to launch the Redis command-line interface (`redis-cli`). This allows interaction with the Redis server.
SOURCE: https://github.com/redis/docs/blob/main/content/operate/oss_and_stack/install/install-stack/snap.md#_snippet_1

LANGUAGE: bash
CODE:
```
redis-cli
```

----------------------------------------

TITLE: Generating Unique User IDs and Storing User Data in Redis
DESCRIPTION: Shows a common pattern for generating unique IDs using the INCR command and then storing user-specific data in a Redis Hash, keyed by the generated ID. This approach is fundamental for object representation in key-value stores.
SOURCE: https://github.com/redis/docs/blob/main/content/develop/use/patterns/twitter-clone.md#_snippet_10

LANGUAGE: Redis
CODE:
```
INCR next_user_id => 1000
HMSET user:1000 username antirez password p1pp0
```

----------------------------------------

TITLE: Redis SET Command API Reference
DESCRIPTION: Detailed API documentation for the Redis SET command, including its arguments, options, and behavior.
SOURCE: https://github.com/redis/docs/blob/main/content/commands/set.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
Command: SET
Description: Sets the string value of a key, ignoring its type. The key is created if it doesn't exist.
Syntax: SET key value [NX | XX] [GET] [EX_seconds | PX_milliseconds |
  EXAT_unix-time-seconds | PXAT_unix-time-milliseconds | KEEPTTL]
Arguments:
  - name: key
    type: key
    description: The key to set.
  - name: value
    type: string
    description: The string value to set.
  - name: condition (optional)
    type: oneof
    options:
      - NX: Only set the key if it does not already exist.
      - XX: Only set the key if it already exists.
  - name: get (optional)
    type: pure-token
    description: Return the old string stored at key, or nil if key did not exist. An error is returned and SET aborted if the value stored at key is not a string.
  - name: expiration (optional)
    type: oneof
    options:
      - EX seconds: Set the specified expire time, in seconds (a positive integer).
      - PX milliseconds: Set the specified expire time, in milliseconds (a positive integer).
      - EXAT timestamp-seconds: Set the specified Unix time at which the key will expire, in seconds (a positive integer).
      - PXAT timestamp-milliseconds: Set the specified Unix time at which the key will expire, in milliseconds (a positive integer).
      - KEEPTTL: Retain the time to live associated with the key.
Since: 1.0.0
History:
  - 2.6.12: Added the EX, PX, NX and XX options.
  - 6.0.0: Added the KEEPTTL option.
  - 6.2.0: Added the GET, EXAT and PXAT option.
  - 7.0.0: Allowed the NX and GET options to be used together.
Complexity: O(1)
ACL Categories: @write, @string, @slow
Command Flags: write, denyoom
```

----------------------------------------

TITLE: Rerank Semi-Structured Documents with CohereReranker
DESCRIPTION: Shows how to use `CohereReranker` to rerank documents containing additional metadata. By specifying `rank_by=["passage", "source"]`, the reranker considers both the main passage and the source field for relevance. The results are then printed, showing the reranked semi-structured documents and their scores.
SOURCE: https://github.com/redis/docs/blob/main/content/integrate/redisvl/user_guide/rerankers.md#_snippet_13

LANGUAGE: python
CODE:
```
results, scores = cohere_reranker.rank(query=query, docs=docs, rank_by=["passage", "source"])
```

LANGUAGE: python
CODE:
```
for result, score in zip(results, scores):
    print(score, " -- ", result)
```

----------------------------------------

TITLE: Redis SETEX Command API Documentation
DESCRIPTION: Detailed API specification for the Redis SETEX command, including arguments, return information, and command flags.
SOURCE: https://github.com/redis/docs/blob/main/content/commands/setex.md#_snippet_1

LANGUAGE: APIDOC
CODE:
```
Command: SETEX
Summary: Sets the string value and expiration time of a key. Creates the key if it doesn't exist.
Description: Sets the string value and expiration time of a key. Creates the key if it doesn't exist.
Syntax: SETEX key seconds value
Arguments:
  - name: key
    type: key
    description: The key to set.
  - name: seconds
    type: integer
    description: The expiration time in seconds.
  - name: value
    type: string
    description: The string value to set.
Return:
  RESP2: Simple string reply: OK.
  RESP3: Simple string reply: OK.
ACL Categories: @write, @string, @slow
Arity: 4
Categories: docs, develop, stack, oss, rs, rc, oss, kubernetes, clients
Command Flags: write, denyoom
Complexity: O(1)
Deprecated Since: 2.6.12
Doc Flags: deprecated
Group: string
Hidden: false
Key Specifications:
  - OW: true
    Begin Search:
      type: index
      spec: index 1
    Find Keys:
      type: range
      spec: keystep 1, lastkey 0, limit 0
    Update: true
Replaced By: SET with the EX argument
Since: 2.0.0
```

----------------------------------------

TITLE: Connect to Local Redis and Perform Basic Operations with Lettuce Java
DESCRIPTION: This Java example demonstrates connecting to a local Redis server (localhost:6379) using Lettuce. It shows how to create a `RedisClient`, establish a synchronous connection, set and get a string value, print the result, and properly close the connection and shut down the client.
SOURCE: https://github.com/redis/docs/blob/main/content/develop/clients/lettuce/_index.md#_snippet_2

LANGUAGE: Java
CODE:
```
import io.lettuce.core.*;
import io.lettuce.core.api.StatefulRedisConnection;
import io.lettuce.core.api.sync.RedisCommands;

public class ConnectBasicTest {

    public void connectBasic() {
        RedisURI uri = RedisURI.Builder
                .redis("localhost", 6379)
                .build();

        RedisClient client = RedisClient.create(uri);
        StatefulRedisConnection<String, String> connection = client.connect();
        RedisCommands<String, String> commands = connection.sync();

        commands.set("foo", "bar");
        String result = commands.get("foo");
        System.out.println(result); // >>> bar

        connection.close();

        client.shutdown();
    }
}
```

----------------------------------------

TITLE: Redis Cluster Configuration Parameters Reference
DESCRIPTION: A comprehensive list of configurable parameters for Redis clusters, detailing their purpose, accepted values, and default behaviors. These parameters control aspects like ACLs, node offloading, encryption, auditing, proxy policies, sharding, and security settings.
SOURCE: https://github.com/redis/docs/blob/main/content/operate/rs/7.8/references/cli-utilities/rladmin/tune.md#_snippet_1

LANGUAGE: APIDOC
CODE:
```
Parameter: acl_pubsub_default
  Type/Value: `resetchannels` | `allchannels`
  Description: Default pub/sub ACL rule for all databases in the cluster:
    - `resetchannels` blocks access to all channels (restrictive)
    - `allchannels` allows access to all channels (permissive)

Parameter: automatic_node_offload
  Type/Value: `enabled` | `disabled`
  Description: Define whether automatic node offload migration will take place

Parameter: data_internode_encryption
  Type/Value: `enabled` | `disabled`
  Description: Activates or deactivates [internode encryption](/operate/rs/7.8/security/encryption/internode-encryption) for new databases

Parameter: db_conns_auditing
  Type/Value: `enabled` | `disabled`
  Description: Activates or deactivates [connection auditing](/operate/rs/7.8/security/audit-events) by default for new databases of a cluster

Parameter: default_concurrent_restore_actions
  Type/Value: integer | `all`
  Description: Default number of concurrent actions when restoring a node from a snapshot (positive integer or "all")

Parameter: default_non_sharded_proxy_policy
  Type/Value: `single`
    `all-master-shards`
    `all-nodes`
  Description: Default [proxy policy](/operate/rs/7.8/databases/configure/proxy-policy) for newly created non-sharded databases' endpoints

Parameter: default_oss_sharding
  Type/Value: `enabled` | `disabled`
  Description: Default hashing policy to use for new databases. Set to `disabled` by default. This field is for future use only and should not be changed.

Parameter: default_redis_version
  Type/Value: version number
  Description: The default Redis database compatibility version used to create new databases.

    The value parameter should be a version number in the form of "x.y" where _x_ represents the major version number and _y_ represents the minor version number. The final value corresponds to the desired version of Redis.

    You cannot set _default_redis_version_ to a value higher than that supported by the current _redis_upgrade_policy_ value.

Parameter: default_sharded_proxy_policy
  Type/Value: `single`
    `all-master-shards`
    `all-nodes`
  Description: Default [proxy policy](/operate/rs/7.8/databases/configure/proxy-policy) for newly created sharded databases' endpoints

Parameter: default_shards_placement
  Type/Value: `dense` | `sparse`
  Description: New databases place shards according to the default [shard placement policy](/operate/rs/7.8/databases/memory-performance/shard-placement-policy)

Parameter: default_tracking_table_max_keys_policy
  Type/Value: integer (default: 1000000)
  Description: Defines the default value of the client-side caching invalidation table size for new databases. 0 makes the cache unlimited.

Parameter: expose_hostnames_for_all_suffixes
  Type/Value: `enabled` | `disabled`
  Description: Exposes hostnames for all DNS suffixes

Parameter: failure_detection_sensitivity
  Type/Value: `high` | `low`
  Description: Predefined thresholds and timeouts for failure detection (previously known as `watchdog_profile`)
    - `high` (previously `local-network`) – high failure detection sensitivity, lower thresholds, faster failure detection and failover
    - `low` (previously `cloud`) – low failure detection sensitivity, higher tolerance for latency variance (also called network jitter)

Parameter: login_lockout_counter_reset_after
  Type/Value: time in seconds
  Description: Time after failed login attempt before the counter resets to 0

Parameter: login_lockout_duration
  Type/Value: time in seconds
  Description: Time a locked account remains locked ( "0" means only an admin can unlock the account)

Parameter: login_lockout_threshold
  Type/Value: integer
  Description: Number of failed sign-in attempts to trigger locking a user account ("0" means never lock the account)

Parameter: max_saved_events_per_type
  Type/Value: integer
  Description: Maximum number of events each type saved in CCS per object type

Parameter: max_simultaneous_backups
  Type/Value: integer (default: 4)
  Description: Number of database backups allowed to run at the same time. Combines with `max_redis_forks` (set by [`tune node`](#tune-node)) to determine the number of shard backups allowed to run simultaneously.
```

----------------------------------------

TITLE: Initial Redis Cloud Terraform Provider Configuration
DESCRIPTION: This snippet provides the basic Terraform configuration for the Redis Cloud provider. It includes the provider block and an example resource definition for a Redis Cloud subscription, typically placed in a `main.tf` file.
SOURCE: https://github.com/redis/docs/blob/main/content/integrate/terraform-provider-for-redis-cloud/get-started.md#_snippet_0

LANGUAGE: Terraform HCL
CODE:
```
provider "rediscloud" {
}

# Example resource configuration
resource "rediscloud_subscription" "example" {
   # ...
}
```

----------------------------------------

TITLE: Retrieving a value from Redis with GET
DESCRIPTION: Shows how to retrieve the value associated with the key 'foo' using the GET command in Redis. The expected output is 'bar'.
SOURCE: https://github.com/redis/docs/blob/main/content/develop/use/patterns/twitter-clone.md#_snippet_1

LANGUAGE: Redis
CODE:
```
GET foo => bar
```

----------------------------------------

TITLE: Connect PHP to Redis cluster
DESCRIPTION: Configures a Predis client to connect to a Redis cluster by specifying multiple cluster nodes and setting the 'cluster' option to 'redis'. It then demonstrates fetching cluster nodes and performing a basic SET/GET operation.
SOURCE: https://github.com/redis/docs/blob/main/content/develop/clients/php/connect.md#_snippet_3

LANGUAGE: php
CODE:
```
$clusterNodes = [
    'tcp://127.0.0.1:30001', // Node 1
    'tcp://127.0.0.1:30002', // Node 2
    'tcp://127.0.0.1:30003', // Node 3
];
$options    = ['cluster' => 'redis'];

// Create a Predis client for the cluster
$rc = new PredisClient($clusterNodes, $options);

echo $rc->cluster('nodes'), PHP_EOL;
/* >>>
d8773e888e92d015b7c52fc66798fd6815afefec 127.0.0.1:30004@40004 slave cde97d1f7dce13e9253ace5cafd3fb0aa67cda63 0 1730713764217 1 connected
58fe1346de4c425d60db24e9b153926fbde0d174 127.0.0.1:30002@40002 master - 0 1730713763361 2 connected 5461-10922
015ecc8148a05377dda22f19921d16efcdd6d678 127.0.0.1:30006@40006 slave c019b75d8b52e83e7e52724eccc716ac553f71d6 0 1730713764218 3 connected
aca365963a72642e6ae0c9503aabf3be5c260806 127.0.0.1:30005@40005 slave 58fe1346de4c425d60db24e9b153926fbde0d174 0 1730713763363 2 connected
c019b75d8b52e83e7e52724eccc716ac553f71d6 127.0.0.1:30003@40003 myself,master - 0 1730713764000 3 connected 10923-16383
cde97d1f7dce13e9253ace5cafd3fb0aa67cda63 127.0.0.1:30001@40001 master - 0 1730713764113 1 connected 0-5460
*/

echo $rc->set('foo', 'bar'), PHP_EOL;
// >>> OK
echo $rc->get('foo'), PHP_EOL;
// >>> bar
```

----------------------------------------

TITLE: Execute Redis Commands with Client-Side Caching in Java
DESCRIPTION: This Java example illustrates how standard Redis commands behave when client-side caching is active. The first "get("city")" call retrieves data from the Redis server and caches it, while the subsequent "get("city")" call retrieves the data directly from the client-side cache, reducing network traffic.
SOURCE: https://github.com/redis/docs/blob/main/content/develop/clients/jedis/connect.md#_snippet_7

LANGUAGE: Java
CODE:
```
client.set("city", "New York");
client.get("city");     // Retrieved from Redis server and cached
client.get("city");     // Retrieved from cache
```

----------------------------------------

TITLE: Redis Hash Operations: HMSET and HGET
DESCRIPTION: Illustrates the use of Redis Hashes, which are like key-value maps. HMSET is used to set multiple fields and values in a hash, while HGET retrieves a specific field's value. Hashes are ideal for representing objects like user profiles.
SOURCE: https://github.com/redis/docs/blob/main/content/develop/use/patterns/twitter-clone.md#_snippet_9

LANGUAGE: Redis
CODE:
```
HMSET myuser name Salvatore surname Sanfilippo country Italy
HGET myuser surname => Sanfilippo
```

----------------------------------------

TITLE: RedisVL Search Index Schema Definition
DESCRIPTION: Defines the structure for a RedisVL search index, including its name, prefix, and field definitions. It specifies various field types like tag, text, numeric, and vector, along with vector-specific attributes such as dimensions, distance metric, algorithm, and data type.
SOURCE: https://github.com/redis/docs/blob/main/content/integrate/redisvl/user_guide/getting_started.md#_snippet_12

LANGUAGE: APIDOC
CODE:
```
{
    'index': {'name': 'user_simple', 'prefix': 'user_simple_docs'},
    'fields': [
        {'name': 'user', 'type': 'tag'},
        {'name': 'credit_score', 'type': 'tag'},
        {'name': 'job', 'type': 'text'},
        {'name': 'age', 'type': 'numeric'},
        {'name': 'user_embedding',
         'type': 'vector',
         'attrs': {
            'dims': 3,
            'distance_metric': 'cosine',
            'algorithm': 'flat',
            'datatype': 'float32'
         }
        }
    ]
}
```

----------------------------------------

TITLE: Connect and Interact with Redis using hiredis (C)
DESCRIPTION: This C code snippet demonstrates how to establish a connection to a Redis server using `hiredis`, set and retrieve a string key with `SET` and `GET` commands, and properly close the connection. It includes error handling for connection failures and memory management for replies.
SOURCE: https://github.com/redis/docs/blob/main/content/develop/clients/hiredis/_index.md#_snippet_0

LANGUAGE: c
CODE:
```
#include <stdio.h>

#include <hiredis/hiredis.h>

int main() {
    // The `redisContext` type represents the connection
    // to the Redis server. Here, we connect to the
    // default host and port.
    redisContext *c = redisConnect("127.0.0.1", 6379);

    // Check if the context is null or if a specific
    // error occurred.
    if (c == NULL || c->err) {
        if (c != NULL) {
            printf("Error: %s\n", c->errstr);
            // handle error
        } else {
            printf("Can't allocate redis context\n");
        }

        exit(1);
    }

    // Set a string key.
    redisReply *reply = redisCommand(c, "SET foo bar");
    printf("Reply: %s\n", reply->str); // >>> Reply: OK
    freeReplyObject(reply);

    // Get the key we have just stored.
    reply = redisCommand(c, "GET foo");
    printf("Reply: %s\n", reply->str); // >>> Reply: bar
    freeReplyObject(reply);

    // Close the connection.
    redisFree(c);
}
```

----------------------------------------

TITLE: Prune Incorrect Messages from Semantic Conversation History
DESCRIPTION: Demonstrates how to store a new message, identify an incorrect entry by its `entry_id` (obtained from raw context), and then remove it from the `SemanticSessionManager` to prevent passing erroneous context to the LLM.
SOURCE: https://github.com/redis/docs/blob/main/content/integrate/redisvl/user_guide/session_manager.md#_snippet_9

LANGUAGE: python
CODE:
```
semantic_session.store(
    prompt="what is the smallest country in Europe?",
    response="Monaco is the smallest country in Europe at 0.78 square miles." # Incorrect. Vatican City is the smallest country in Europe
    )

# get the key of the incorrect message
context = semantic_session.get_recent(top_k=1, raw=True)
bad_key = context[0]['entry_id']
semantic_session.drop(bad_key)

corrected_context = semantic_session.get_recent()
for message in corrected_context:
    print(message)
```

----------------------------------------

TITLE: Redis SETRANGE/SORT OOM Panic (CVE-2022-35977)
DESCRIPTION: An integer overflow in the Redis SETRANGE and SORT/SORT_RO commands can lead Redis to an Out-Of-Memory (OOM) panic, causing server instability or crash. Affects Redis 6.0.17.
SOURCE: https://github.com/redis/docs/blob/main/content/operate/rs/release-notes/rs-7-4-2-releases/rs-7-4-6-22.md#_snippet_21

LANGUAGE: APIDOC
CODE:
```
Vulnerable Commands:
- SETRANGE
- SORT
- SORT_RO
```

----------------------------------------

TITLE: Query Semantic Cache with Complex Filters
DESCRIPTION: Shows how to construct and apply complex filter expressions using `Num` and `Tag` objects from `redisvl.query.filter`. It demonstrates querying the `SemanticCache` with a combined filter to retrieve specific results based on multiple criteria, such as transaction amount greater than $100 and account type being 'checking'.
SOURCE: https://github.com/redis/docs/blob/main/content/integrate/redisvl/user_guide/llmcache.md#_snippet_24

LANGUAGE: python
CODE:
```
from redisvl.query.filter import Num

value_filter = Num("transaction_amount") > 100
account_filter = Tag("account_type") == "checking"
complex_filter = value_filter & account_filter

# check for checking account transactions over $100
complex_cache.set_threshold(0.3)
response = complex_cache.check(
    prompt="what is my most recent checking account transaction?",
    filter_expression=complex_filter,
    num_results=5
)
print(f'found {len(response)} entry')
print(response[0]["response"])
```

----------------------------------------

TITLE: AsyncSearchIndex class definition
DESCRIPTION: A search index class for interacting with Redis as a vector database in asynchronous mode. It is instantiated with a reference to a Redis database and an IndexSchema (YAML path or dictionary object) that describes settings and field configurations.
SOURCE: https://github.com/redis/docs/blob/main/content/integrate/redisvl/api/searchindex.md#_snippet_30

LANGUAGE: APIDOC
CODE:
```
class AsyncSearchIndex(schema, *, redis_url=None, redis_client=None, connection_kwargs=None, validate_on_load=False, **kwargs)
```

----------------------------------------

TITLE: Redis Set Operations: Managing Unsorted Collections
DESCRIPTION: Illustrates how to add members to a Redis Set using SADD, get the cardinality with SCARD, retrieve all members with SMEMBERS, perform set intersection with SINTER, and check for member existence with SISMEMBER. It emphasizes that Sets are unsorted collections.
SOURCE: https://github.com/redis/docs/blob/main/content/develop/use/patterns/twitter-clone.md#_snippet_6

LANGUAGE: Redis CLI
CODE:
```
SADD myset a
SADD myset b
SADD myset foo
SADD myset bar
SCARD myset => 4
SMEMBERS myset => bar,a,foo,b
```

LANGUAGE: Redis CLI
CODE:
```
SADD mynewset b
SADD mynewset foo
SADD mynewset hello
SINTER myset mynewset => foo,b
```

LANGUAGE: Redis CLI
CODE:
```
SISMEMBER myset foo => 1
SISMEMBER myset notamember => 0
```

----------------------------------------

TITLE: Redis FT.CREATE Command Syntax
DESCRIPTION: Illustrates the full syntax for the Redis `FT.CREATE` command, including options for defining field types (TAG, NUMERIC, GEO, VECTOR, TEXT), suffix trie, sortability, and indexability. It also shows how to define field aliases.
SOURCE: https://github.com/redis/docs/blob/main/content/commands/ft.create.md#_snippet_1

LANGUAGE: Redis
CODE:
```
\ | TAG | NUMERIC | GEO | VECTOR> [WITHSUFFIXTRIE] [SORTABLE [UNF]] [NOINDEX] [field_name [AS\_alias] <TEXT | TAG | NUMERIC | GEO | VECTOR> [WITHSUFFIXTRIE] [SORTABLE [UNF]] [NOINDEX] ...]"
```

----------------------------------------

TITLE: Check Redis slowlog entries
DESCRIPTION: Shows how to use `redis-cli` to retrieve a list of recent slow commands from the Redis server's slowlog. Replace `<endpoint>`, `<port>`, and `<number of entries>` with your specific Redis server details and the desired number of slowlog entries.
SOURCE: https://github.com/redis/docs/blob/main/content/operate/rs/7.4/references/cli-utilities/redis-cli/_index.md#_snippet_8

LANGUAGE: sh
CODE:
```
redis-cli -h <endpoint> -p <port> slowlog get <number of entries>
```

----------------------------------------

TITLE: Add Single and Multiple Messages to LLM History
DESCRIPTION: This example shows how to populate the `MessageHistory` object with conversational turns. Messages are stored with `role` (e.g., 'system', 'user', 'llm') and `content` fields. You can add messages one at a time using `add_message` or multiple messages simultaneously with `add_messages`.
SOURCE: https://github.com/redis/docs/blob/main/content/integrate/redisvl/user_guide/message_history.md#_snippet_1

LANGUAGE: python
CODE:
```
chat_history.add_message({"role":"system", "content":"You are a helpful geography tutor, giving simple and short answers to questions about European countries."})
chat_history.add_messages([
    {"role":"user", "content":"What is the capital of France?"},
    {"role":"llm", "content":"The capital is Paris."},
    {"role":"user", "content":"And what is the capital of Spain?"},
    {"role":"llm", "content":"The capital is Madrid."},
    {"role":"user", "content":"What is the population of Great Britain?"},
    {"role":"llm", "content":"As of 2023 the population of Great Britain is approximately 67 million people."}]
    )
```

----------------------------------------

TITLE: Redis CLI: Set Key Expiration with EXPIRE
DESCRIPTION: Shows how to set a time-to-live (TTL) for a Redis key using the `EXPIRE` command. The key automatically vanishes after the specified duration (5 seconds in this example).
SOURCE: https://github.com/redis/docs/blob/main/content/develop/use/keyspace.md#_snippet_2

LANGUAGE: Redis CLI
CODE:
```
> set key some-value
OK
> expire key 5
(integer) 1
> get key (immediately)
"some-value"
> get key (after some time)
(nil)
```

----------------------------------------

TITLE: Aggregating Redis Time Series Data
DESCRIPTION: Combine values from one or more time series using various aggregation functions like average, sum, or min. This allows for summarizing data over specified time buckets, applicable to single or multiple series.
SOURCE: https://github.com/redis/docs/blob/main/content/develop/data-types/timeseries/quickstart.md#_snippet_16

LANGUAGE: Redis CLI
CODE:
```
TS.RANGE ... AGGREGATION aggType bucketDuration...
```

LANGUAGE: Redis CLI
CODE:
```
TS.RANGE sensor1 - + + AGGREGATION avg 3600000
```

LANGUAGE: Redis CLI
CODE:
```
TS.MRANGE - + AGGREGATION avg 3600000 FILTER area_id=32
```

----------------------------------------

TITLE: Complete `person.js` Setup for Redis OM (JavaScript)
DESCRIPTION: This comprehensive snippet provides the full JavaScript code for setting up an entity, its schema, a repository, and an index using Redis OM. It includes imports, entity class definition, schema creation with various field types, repository instantiation, and the crucial index creation step, demonstrating a complete setup for interacting with Redis.
SOURCE: https://github.com/redis/docs/blob/main/content/integrate/redisom-for-node-js/_index.md#_snippet_10

LANGUAGE: javascript
CODE:
```
import { Entity, Schema } from 'redis-om'
import client from './client.js'

/* our entity */
class Person extends Entity {}

/* create a Schema for Person */
const personSchema = new Schema(Person, {
  firstName: { type: 'string' },
  lastName: { type: 'string' },
  age: { type: 'number' },
  verified: { type: 'boolean' },
  location: { type: 'point' },
  locationUpdated: { type: 'date' },
  skills: { type: 'string[]' },
  personalStatement: { type: 'text' }
})

/* use the client to create a Repository just for Persons */
export const personRepository = client.fetchRepository(personSchema)

/* create the index for Person */
await personRepository.createIndex()
```

----------------------------------------

TITLE: Execute Basic Redis Commands via CLI
DESCRIPTION: Demonstrates common Redis commands that can be executed directly in the Redis CLI, including operations for setting and retrieving keys, hashing, and floating-point increments.
SOURCE: https://github.com/redis/docs/blob/main/layouts/develop/list.html#_snippet_1

LANGUAGE: Redis CLI
CODE:
```
PING
HSET user:1 name antirez vocation artist
HGETALL user:1
SET e 2.71
INCRBYFLOAT e 0.43
RENAME e pi
GET pi
```

----------------------------------------

TITLE: Run Redis Stack Locally with Docker
DESCRIPTION: This command starts a Redis Stack instance in a Docker container, exposing Redis on port 6379 and RedisInsight on port 8001. It provides a quick way to set up a local Redis environment for development and testing.
SOURCE: https://github.com/redis/docs/blob/main/content/integrate/redisvl/user_guide/rerankers.md#_snippet_0

LANGUAGE: bash
CODE:
```
docker run -d -p 6379:6379 -p 8001:8001 redis/redis-stack:latest
```

----------------------------------------

TITLE: Redis CVE-2021-29477: STRALGO LCS Integer Overflow
DESCRIPTION: Describes an integer overflow vulnerability in Redis version 6.0 or newer, exploitable using the STRALGO LCS command. This bug can corrupt the heap and potentially result in remote code execution.
SOURCE: https://github.com/redis/docs/blob/main/content/operate/rs/release-notes/rs-6-4-2-releases/rs-6-4-2-115.md#_snippet_2

LANGUAGE: APIDOC
CODE:
```
CVE ID: CVE-2021-29477
Affected Versions: Redis 6.0+
Fixed In: Redis 6.2.3
Vulnerability Type: Integer Overflow
Impact: Heap corruption, Remote Code Execution (RCE)
Exploitation Method: Use the STRALGO LCS command with specially crafted input.
```

----------------------------------------

TITLE: Store and retrieve a string value in Redis using Java
DESCRIPTION: After establishing a connection, this snippet shows how to store a simple string key-value pair (`bike:1` -> `Deimos`) using `jedis.set()` and retrieve it using `jedis.get()` to verify the connection.
SOURCE: https://github.com/redis/docs/blob/main/content/develop/clients/jedis/connect.md#_snippet_1

LANGUAGE: java
CODE:
```
...

String res1 = jedis.set("bike:1", "Deimos");
System.out.println(res1); // OK

String res2 = jedis.get("bike:1");
System.out.println(res2); // Deimos

...
```

----------------------------------------

TITLE: Store and retrieve a string in Redis
DESCRIPTION: Illustrates how to set a simple string value in Redis using `client.Set` and then retrieve it using `client.Get`, demonstrating basic error handling for both operations.
SOURCE: https://github.com/redis/docs/blob/main/content/develop/clients/go/_index.md#_snippet_4

LANGUAGE: Go
CODE:
```
ctx := context.Background()

err := client.Set(ctx, "foo", "bar", 0).Err()
if err != nil {
    panic(err)
}

val, err := client.Get(ctx, "foo").Result()
if err != nil {
    panic(err)
}
fmt.Println("foo", val)
```

----------------------------------------

TITLE: Redis Search: Vector Range Query
DESCRIPTION: Shows how to perform a vector range query, returning all entities for which the distance between their vector field and a query vector is within a specified radius (e.g., 0.5). The distance metric is determined by the index schema.
SOURCE: https://github.com/redis/docs/blob/main/content/develop/interact/search-and-query/advanced-concepts/query_syntax.md#_snippet_35

LANGUAGE: Redis Query Language
CODE:
```
@vector_field:[VECTOR_RANGE 0.5 $query_vec]
```

----------------------------------------

TITLE: Execute GET Request for System Logs with cURL
DESCRIPTION: This `cURL` command demonstrates how to retrieve system log information from the Redis API. It performs a GET request to the `/logs` endpoint, accepting JSON output. Authentication is handled via `x-api-key` and `x-api-secret-key` headers. The response is then piped to `jq` for pretty-printing and raw output extraction. This example requires `$HOST` (e.g., `api.redislabs.com/v1`), `$ACCOUNT_KEY`, and `$SECRET_KEY` environment variables to be set.
SOURCE: https://github.com/redis/docs/blob/main/content/operate/rc/api/get-started/use-rest-api.md#_snippet_1

LANGUAGE: bash
CODE:
```
curl -s -X GET "https://$HOST/logs" \
    -H "accept: application/json" \
    -H "x-api-key: $ACCOUNT_KEY" \
    -H "x-api-secret-key: $SECRET_KEY" \
    | jq -r .
```

----------------------------------------

TITLE: Redis VectorRangeQuery Class Definition
DESCRIPTION: Defines the `VectorRangeQuery` class for performing filtered vector searches based on semantic distance. It inherits from `BaseVectorQuery` and `BaseQuery` and provides numerous parameters to control the search behavior, including the vector to query, the target vector field, return fields, filter expressions, data types, distance thresholds, result limits, and normalization options.
SOURCE: https://github.com/redis/docs/blob/main/content/integrate/redisvl/api/query.md#_snippet_25

LANGUAGE: APIDOC
CODE:
```
class VectorRangeQuery(
  vector: List[float],
  vector_field_name: str,
  return_fields: Optional[List[str]] = None,
  filter_expression: Optional[Union[str, FilterExpression]] = None,
  dtype: str = 'float32',
  distance_threshold: float = 0.2,
  epsilon: Optional[float] = None,
  num_results: int = 10,
  return_score: bool = True,
  dialect: int = 2,
  sort_by: Optional[str] = None,
  in_order: bool = False,
  hybrid_policy: Optional[str] = None,
  batch_size: Optional[int] = None,
  normalize_vector_distance: bool = False
)

Bases: BaseVectorQuery, BaseQuery

Parameters:
  vector (List[float]): The vector to perform the range query with.
  vector_field_name (str): The name of the vector field to search against in the database.
  return_fields (List[str]): The declared fields to return with search results.
  filter_expression (Union[str, FilterExpression], optional): A filter to apply along with the range query. Defaults to None.
  dtype (str, optional): The dtype of the vector. Defaults to "float32".
  distance_threshold (float): The threshold for vector distance. A smaller threshold indicates a stricter semantic search. Defaults to 0.2.
  epsilon (Optional[float]): The relative factor for vector range queries, setting boundaries for candidates within radius * (1 + epsilon). Defaults to None.
  num_results (int): The MAX number of results to return. Defaults to 10.
  return_score (bool, optional): Whether to return the vector distance. Defaults to True.
  dialect (int, optional): The RediSearch query dialect. Defaults to 2.
  sort_by (Optional[str]): The field to order the results by. Defaults to None.
  in_order (bool): Requires the terms in the field to have the same order as the terms in the query filter. Defaults to False.
  hybrid_policy (Optional[str]): Controls how filters are applied during vector search. Options are "BATCHES" or "ADHOC_BF". Defaults to None.
  batch_size (Optional[int]): When hybrid_policy is "BATCHES", controls the number of vectors to fetch in each batch. Defaults to None.
  normalize_vector_distance (bool): Converts COSINE and L2 distance to a similarity score between 0 and 1. Defaults to False.

Raises:
  TypeError: If filter_expression is not of type redisvl.query.FilterExpression
```

----------------------------------------

TITLE: Redis ZRANGE: Querying Sorted Set Elements by Score Range (BYSCORE)
DESCRIPTION: Demonstrates using the `BYSCORE` option with `ZRANGE` to retrieve elements within a specified score range. It illustrates how to define both inclusive (default) and exclusive intervals using the `(` prefix for boundaries. This allows flexible querying without knowing exact min/max scores.
SOURCE: https://github.com/redis/docs/blob/main/content/commands/zrange.md#_snippet_1

LANGUAGE: Redis
CODE:
```
ZRANGE zset (1 5 BYSCORE
```

LANGUAGE: Redis
CODE:
```
ZRANGE zset (5 (10 BYSCORE
```

----------------------------------------

TITLE: Create Redis Cloud Essentials Database using REST API
DESCRIPTION: This snippet demonstrates how to create a Redis Cloud Essentials database using the POST /fixed/subscriptions/{subscriptionId}/databases endpoint. It includes the basic required parameters like 'name' and explains how to track the creation task status.
SOURCE: https://github.com/redis/docs/blob/main/content/operate/rc/api/examples/create-database.md#_snippet_0

LANGUAGE: shell
CODE:
```
POST "https://[host]/v1/fixed/subscriptions/{subscriptionId}/databases"
{
  "name": "Basic-essentials-database-example"
}
```

LANGUAGE: APIDOC
CODE:
```
Endpoint: POST /fixed/subscriptions/{subscriptionId}/databases
Description: Creates a Redis Cloud Essentials database in the specified subscription.

Request Body Parameters:
  - name (string): The database name. A unique name per subscription that can contain only alphanumeric characters and hyphens.

Response:
  Contains the 'taskId' for the database creation task.

Related Endpoints:
  - GET /fixed/subscriptions: Get a list of Essentials subscriptions and their IDs.
  - GET /fixed/subscriptions/{subscriptionId}: View the selected plan and supported options.
  - GET /v1/tasks/{taskId}: Track the task's status.
```

----------------------------------------

TITLE: Authenticate to Redis Enterprise API with cURL
DESCRIPTION: Demonstrates how to authenticate to the Redis Enterprise Software API using Basic Auth with cURL, making a request to the /v1/bdbs endpoint.
SOURCE: https://github.com/redis/docs/blob/main/content/operate/rs/7.8/references/rest-api/_index.md#_snippet_0

LANGUAGE: bash
CODE:
```
curl -u "demo@redislabs.com:password" \
    https://localhost:9443/v1/bdbs
```

----------------------------------------

TITLE: Multi-Value Indexing of Vectors in Redis JSON
DESCRIPTION: These Redis commands demonstrate how to store multiple vectors within a single JSON document using multi-value indexing. This allows for flexible schema designs, such as storing an array of vectors or vectors within nested objects.
SOURCE: https://github.com/redis/docs/blob/main/content/develop/interact/search-and-query/advanced-concepts/vectors.md#_snippet_10

LANGUAGE: Redis
CODE:
```
JSON.SET docs:01 $ '{"doc_embedding":[[1,2,3,4], [5,6,7,8]]}'
```

LANGUAGE: Redis
CODE:
```
JSON.SET docs:01 $ '{"chunk1":{"doc_embedding":[1,2,3,4]}, "chunk2":{"doc_embedding":[5,6,7,8]}}'
```

----------------------------------------

TITLE: Check Local Redis Software Database Endpoint Availability for Load Balancers
DESCRIPTION: This API endpoint is used by load balancers with an all-nodes proxy policy to check the availability of local database endpoints on each node. Returns 200 OK if the local endpoint is available, or an error status with error_code and description if unavailable.
SOURCE: https://github.com/redis/docs/blob/main/content/operate/rs/7.8/monitoring/db-availability.md#_snippet_1

LANGUAGE: sh
CODE:
```
GET /v1/local/bdbs/<database_id>/endpoint/availability
```

----------------------------------------

TITLE: Example `config.yaml` for Redis Data Integration
DESCRIPTION: This YAML configuration file defines the setup for Redis Data Integration, including MySQL CDC sources and Redis target connections. It demonstrates how to configure database credentials using secrets, specify databases and tables for synchronization, and set advanced properties for Debezium and Quarkus.
SOURCE: https://github.com/redis/docs/blob/main/content/integrate/redis-data-integration/data-pipelines/pipeline-config.md#_snippet_0

LANGUAGE: YAML
CODE:
```
sources:
  mysql:
    type: cdc
    logging:
      level: info
    connection:
      type: mysql
      host: <DB_HOST> # e.g. localhost
      port: 3306
      # User and password are injected from the secrets.
      user: ${SOURCE_DB_USERNAME}
      password: ${SOURCE_DB_PASSWORD}
    # Additional properties for the source collector:
    # List of databases to include (optional).
    # databases:
    #   - database1
    #   - database2

    # List of tables to be synced (optional).
    # tables:
    #   If only one database is specified in the databases property above,
    #   then tables can be defined without the database prefix.
    #   <DATABASE_NAME>.<TABLE_NAME>:
    #     List of columns to be synced (optional).
    #     columns:
    #       - <COLUMN_NAME>
    #       - <COLUMN_NAME>
    #     List of columns to be used as keys (optional).
    #     keys:
    #       - <COLUMN_NAME>

    # Example: Sync specific tables.
    # tables:
    #   Sync a specific table with all its columns:
    #   redislabscdc.account: {}
    #   Sync a specific table with selected columns:
    #   redislabscdc.emp:
    #     columns:
    #       - empno
    #       - fname
    #       - lname

    # Advanced collector properties (optional):
    # advanced:
    #   Sink collector properties - see the full list at
    #     https://debezium.io/documentation/reference/stable/operations/debezium-server.html#_redis_stream
    #   sink:
    #     Optional hard limits on memory usage of RDI streams.
    #     redis.memory.limit.mb: 300
    #     redis.memory.threshold.percentage: 85

    #     Uncomment for production so RDI Collector will wait on replica
    #     when writing entries.
    #     redis.wait.enabled: true
    #     redis.wait.timeout.ms: 1000
    #     redis.wait.retry.enabled: true
    #     redis.wait.retry.delay.ms: 1000

    #   Source specific properties - see the full list at
    #     https://debezium.io/documentation/reference/stable/connectors/
    #   source:
    #     snapshot.mode: initial
    #     Uncomment if you want a snapshot to include only a subset of the rows
    #     in a table. This property affects snapshots only.
    #     snapshot.select.statement.overrides: <DATABASE_NAME>.<TABLE_NAME>
    #     The specified SELECT statement determines the subset of table rows to
    #     include in the snapshot.
    #     snapshot.select.statement.overrides.<DATABASE_NAME>.<TABLE_NAME>: <SELECT_STATEMENT>

    #     Example: Snapshot filtering by order status.
    #     To include only orders with non-pending status from customers.orders
    #     table:
    #     snapshot.select.statement.overrides: customer.orders
    #     snapshot.select.statement.overrides.customer.orders: SELECT * FROM customers.orders WHERE status != 'pending' ORDER BY order_id DESC

    #   Quarkus framework properties - see the full list at
    #     https://quarkus.io/guides/all-config
    #   quarkus:
    #     banner.enabled: "false"

targets:
  # Redis target database connections.
  # The default connection must be named 'target' and is used when no
  # connection is specified in jobs or no jobs
  # are deployed. However multiple connections can be defined here and used
  # in the job definition output blocks:
  # (e.g. target1, my-cloud-redis-db2, etc.)
  target:
    connection:
      type: redis
      # Host of the Redis database to which RDI will
      # write the processed data.
      host: <REDIS_TARGET_DB_HOST> # e.g. localhost
      # Port for the Redis database to which RDI will
      # write the processed data.
      port: <REDIS_TARGET_DB_PORT> # e.g. 12000
      # User of the Redis database to which RDI will write the processed data.
      # Uncomment if you are not using the default user.
      # user: ${TARGET_DB_USERNAME}
      # Password for Redis target database.
      password: ${TARGET_DB_PASSWORD}
      # SSL/TLS configuration: Uncomment to enable secure connections.
      # key: ${TARGET_DB_KEY}
      # key_password: ${TARGET_DB_KEY_PASSWORD}
      # cert: ${TARGET_DB_CERT}
      # cacert: ${TARGET_DB_CACERT}
processors:
  # Interval (in seconds) on which to perform retry on failure.
  # on_failed_retry_interval: 5
  # The batch size for reading data from the source database.
  # read_batch_size: 2000
  # Time (in ms) after which data will be read from stream even if
  # read_batch_size was not reached.
  # duration: 100
  # Data type to use in Redis target database: `hash` for Redis Hash,
  # `json` for JSON (which requires the RedisJSON module).
  # target_data_type: hash
```

----------------------------------------

TITLE: Embed Text with RedisVL and Cohere for Search Queries and Documents
DESCRIPTION: Illustrates how to use `CohereTextVectorizer` to embed text, emphasizing the `input_type` parameter for distinguishing between search queries and documents. It shows examples for both types.
SOURCE: https://github.com/redis/docs/blob/main/content/integrate/redisvl/user_guide/vectorizers.md#_snippet_20

LANGUAGE: python
CODE:
```
from redisvl.utils.vectorize import CohereTextVectorizer

# create a vectorizer
co = CohereTextVectorizer(
    model="embed-english-v3.0",
    api_config={"api_key": api_key},
)

# embed a search query
test = co.embed("This is a test sentence.", input_type='search_query')
print("Vector dimensions: ", len(test))
print(test[:10])

# embed a document
test = co.embed("This is a test sentence.", input_type='search_document')
print("Vector dimensions: ", len(test))
print(test[:10])
```

----------------------------------------

TITLE: Store Prompt-Response Pair in Redis Session Memory
DESCRIPTION: Inserts a user prompt and corresponding LLM response into the session memory, associating a timestamp for sequential retrieval.
SOURCE: https://github.com/redis/docs/blob/main/content/integrate/redisvl/api/session_manager.md#_snippet_11

LANGUAGE: APIDOC
CODE:
```
store(prompt, response, session_tag=None)
  Insert a prompt:response pair into the session memory. A timestamp is associated with each exchange so that they can be later sorted in sequential ordering after retrieval.

  Parameters:
    prompt (str): The user prompt to the LLM.
    response (str): The corresponding LLM response.
    session_tag (Optional[str]): Tag to be added to entries to link to a specific session. Defaults to instance ULID.
  Return type:
    None
```

----------------------------------------

TITLE: Create HNSW Vector Index in Redis
DESCRIPTION: This example demonstrates how to create an HNSW vector index named 'documents' over hashes with the key prefix 'docs:'. It defines an 'HNSW' vector field named 'doc_embedding' with specific attributes for type, dimensions, distance metric, and construction parameters.
SOURCE: https://github.com/redis/docs/blob/main/content/develop/interact/search-and-query/advanced-concepts/vectors.md#_snippet_4

LANGUAGE: Redis
CODE:
```
FT.CREATE documents
  ON HASH
  PREFIX 1 docs:
  SCHEMA doc_embedding VECTOR HNSW 10
    TYPE FLOAT64
    DIM 1536
    DISTANCE_METRIC COSINE
    M 40
    EF_CONSTRUCTION 250
```

----------------------------------------

TITLE: Create Redis ACL Object with cURL and Python
DESCRIPTION: These examples demonstrate how to programmatically create a new Redis ACL object using both cURL from the command line and a Python script with the requests library. Both methods send a POST request with a JSON payload containing the ACL name and definition.
SOURCE: https://github.com/redis/docs/blob/main/content/operate/rs/7.8/references/rest-api/requests/redis_acls/_index.md#_snippet_16

LANGUAGE: sh
CODE:
```
curl -k -u "[username]:[password]" -X POST \
     -H 'Content-Type: application/json' \
     -d '{ "name": "Geo", "acl": "~* +@geo" }' \
     https://[host][:port]/v1/redis_acls
```

LANGUAGE: python
CODE:
```
import requests
import json

url = "https://[host][:port]/v1/redis_acls"

headers = {
  'Content-Type': 'application/json'
}

payload = json.dumps({
    "name": "Geo",
    "acl": "~* +@geo"
})
auth=("[username]", "[password]")

response = requests.request("POST", url,
           auth=auth, headers=headers, payload=payload, verify=False)

print(response.text)
```

----------------------------------------

TITLE: Redis EXPIRE Command API Definition
DESCRIPTION: Detailed API documentation for the Redis EXPIRE command, including its arguments, optional conditions (NX, XX, GT, LT), command flags, complexity, and history of changes. It specifies how the command interacts with keyspaces and defines its syntax.
SOURCE: https://github.com/redis/docs/blob/main/content/commands/expire.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
acl_categories:
- '@keyspace'
- '@write'
- '@fast'
arguments:
- display_text: key
  key_spec_index: 0
  name: key
  type: key
- display_text: seconds
  name: seconds
  type: integer
- arguments:
  - display_text: nx
    name: nx
    token: NX
    type: pure-token
  - display_text: xx
    name: xx
    token: XX
    type: pure-token
  - display_text: gt
    name: gt
    token: GT
    type: pure-token
  - display_text: lt
    name: lt
    token: LT
    type: pure-token
  name: condition
  optional: true
  since: 7.0.0
  type: oneof
arity: -3
categories:
- docs
- develop
- stack
- oss
- rs
- rc
- oss
- kubernetes
- clients
command_flags:
- write
- fast
complexity: O(1)
description: Sets the expiration time of a key in seconds.
group: generic
hidden: false
history:
- - 7.0.0
  - 'Added options: `NX`, `XX`, `GT` and `LT`.'
key_specs:
- RW: true
  begin_search:
    spec:
      index: 1
    type: index
  find_keys:
    spec:
      keystep: 1
      lastkey: 0
      limit: 0
    type: range
  update: true
linkTitle: EXPIRE
since: 1.0.0
summary: Sets the expiration time of a key in seconds.
syntax_fmt: EXPIRE key seconds [NX | XX | GT | LT]
syntax_str: seconds [NX | XX | GT | LT]
title: EXPIRE
```

----------------------------------------

TITLE: Redis: Create Consumer Group from Beginning
DESCRIPTION: Example of creating a new consumer group for a stream, starting consumption from the very first entry (ID 0). This ensures all historical data is processed by the group's consumers.
SOURCE: https://github.com/redis/docs/blob/main/content/commands/xgroup-create.md#_snippet_0

LANGUAGE: Redis
CODE:
```
XGROUP CREATE mystream mygroup 0
```

----------------------------------------

TITLE: Configure Linux Kernel Memory Overcommit for Redis
DESCRIPTION: This snippet provides instructions to set the Linux kernel's `vm.overcommit_memory` parameter to 1. This is crucial for Redis to prevent background saving failures, especially during `fork()` operations. It shows how to add the setting to `/etc/sysctl.conf` for persistence across reboots and how to activate it immediately.
SOURCE: https://github.com/redis/docs/blob/main/content/operate/oss_and_stack/management/admin.md#_snippet_0

LANGUAGE: Shell
CODE:
```
vm.overcommit_memory = 1
```

LANGUAGE: Shell
CODE:
```
sysctl vm.overcommit_memory=1
```

----------------------------------------

TITLE: Iterating Redis Keys with Scan Commands
DESCRIPTION: Compares how `ioredis` and `node-redis` handle iterating over Redis keys using scan commands. `ioredis` provides `scanStream()` for readable streams, while `node-redis` uses `scanIterator()` for async iteration, which is efficient for multi-key operations.
SOURCE: https://github.com/redis/docs/blob/main/content/develop/clients/nodejs/migration.md#_snippet_12

LANGUAGE: JavaScript
CODE:
```
const client = new Redis();
// Create a readable stream (object mode)
const stream = client.scanStream();
stream.on('data', (resultKeys) => {
  // `resultKeys` is an array of strings representing key names.
  // Note that resultKeys may contain 0 keys, and that it will sometimes
  // contain duplicates due to SCAN's implementation in Redis.
  for (let i = 0; i < resultKeys.length; i++) {
    console.log(resultKeys[i]);
  }
});
stream.on('end', () => {
  console.log('all keys have been visited');
});
```

LANGUAGE: JavaScript
CODE:
```
for await (const keys of client.scanIterator()) {
  const values = await client.mGet(keys);
  // Process values...
}
```

----------------------------------------

TITLE: Creating a Person (PUT Route)
DESCRIPTION: Defines a PUT route (`/`) in `person-router.js` to create a new `Person` entity from the request body and save it to Redis using `personRepository.createAndSave()`.
SOURCE: https://github.com/redis/docs/blob/main/content/integrate/redisom-for-node-js/_index.md#_snippet_15

LANGUAGE: javascript
CODE:
```
router.put('/', async (req, res) => {
  const person = await personRepository.createAndSave(req.body)
  res.send(person)
})
```

----------------------------------------

TITLE: Add Autocomplete Suggestions with Redis FT.SUGADD
DESCRIPTION: Demonstrates how to add new suggestions to a Redis autocomplete dictionary using the `FT.SUGADD` command, assigning a score to each entry for ranking.
SOURCE: https://github.com/redis/docs/blob/main/content/develop/interact/search-and-query/advanced-concepts/autocomplete.md#_snippet_0

LANGUAGE: Redis CLI
CODE:
```
FT.SUGADD autocomplete "hello world" 100
FT.SUGADD autocomplete "hello there" 90
FT.SUGADD autocomplete "help me" 80
FT.SUGADD autocomplete "hero" 70
```

----------------------------------------

TITLE: Redis Clustered Database Multi-Key Command Limitations
DESCRIPTION: Documents the behavior and limitations of multi-key operations in Redis clustered databases, including specific commands allowed or disallowed across slots, and considerations for Geo commands, transactions, Lua scripts, and key renaming/copying.
SOURCE: https://github.com/redis/docs/blob/main/content/operate/rs/7.8/databases/durability-ha/clustering.md#_snippet_2

LANGUAGE: APIDOC
CODE:
```
Multi-key commands:
  - Clustered Database (most not allowed across slots):
    - Allowed across slots: DEL, MSET, MGET, EXISTS, UNLINK, TOUCH
  - Active-Active Databases:
    - Multi-key write commands (DEL, MSET, UNLINK) only on keys in same slot.
    - Allowed across slots: MGET, EXISTS, TOUCH
  - Commands affecting all keys/patterns (allowed): FLUSHDB, FLUSHALL, KEYS

Geo commands:
  - GEORADIUS, GEORADIUSBYMEMBER: STORE and STOREDIST options only when all affected keys reside in same slot.

Transactions:
  - All operations within WATCH / MULTI / EXEC block must be on keys mapped to same slot.

Lua scripts:
  - All keys used by script must be mapped to same slot and provided as arguments to EVAL / EVALSHA.

Renaming/Copy keys:
  - RENAME / RENAMENX / COPY allowed only when key's original and new values are mapped to same slot.
```

----------------------------------------

TITLE: Connect to Azure Managed Redis using Jedis with TokenAuthConfig and TLS
DESCRIPTION: Illustrates how to establish a connection to Azure Managed Redis using `UnifiedJedis` by integrating `TokenAuthConfig` into `DefaultJedisClientConfig`. It includes setting up TLS with a custom `SSLSocketFactory` and testing the connection by getting the database size.
SOURCE: https://github.com/redis/docs/blob/main/content/develop/clients/jedis/amr.md#_snippet_6

LANGUAGE: java
CODE:
```
TokenAuthConfig authConfig = EntraIDTokenAuthConfigBuilder.builder()
        // Chain of options...
        .build();

SSLSocketFactory sslFactory = createSslSocketFactory(
        "./truststore.jks",
        "secret!", // Use the password you specified for `keytool`
        "./redis-user-keystore.p12",
        "secret!" // Use the password you specified for `openssl`
);

JedisClientConfig config = DefaultJedisClientConfig.builder()
        // Include the `TokenAuthConfig` details.
        .authXManager(new AuthXManager(authConfig))
        .ssl(true).sslSocketFactory(sslFactory)
        .build();

UnifiedJedis jedis = new UnifiedJedis(
    new HostAndPort("<host>", <port>),
    config
);

// Test the connection.
System.out.println(String.format("Database size is %d", jedis.dbSize()));
```

----------------------------------------

TITLE: Configure Control Plane Minimum TLS Version with rladmin
DESCRIPTION: Sets the minimum TLS protocol version for the Redis Enterprise cluster's control plane using the `rladmin` CLI utility. This affects cluster administration communications. The default minimum TLS protocol is TLSv1.2. Available versions are 1.2 (for TLSv1.2) and 1.3 (for TLSv1.3).
SOURCE: https://github.com/redis/docs/blob/main/content/operate/rs/7.8/security/encryption/tls/tls-protocols.md#_snippet_0

LANGUAGE: sh
CODE:
```
rladmin cluster config min_control_TLS_version 1.2
```

----------------------------------------

TITLE: Connect to Redis with Lettuce using a basic synchronous connection in Java
DESCRIPTION: Demonstrates how to establish a basic synchronous connection to a Redis server using Lettuce, set a key-value pair, retrieve it, and then close the connection and client.
SOURCE: https://github.com/redis/docs/blob/main/content/develop/clients/lettuce/connect.md#_snippet_0

LANGUAGE: java
CODE:
```
import io.lettuce.core.*;
import io.lettuce.core.api.StatefulRedisConnection;
import io.lettuce.core.api.sync.RedisCommands;

public class ConnectBasicTest {

    public void connectBasic() {
        RedisURI uri = RedisURI.Builder
                .redis("localhost", 6379)
                .withAuthentication("default", "yourPassword")
                .build();
        RedisClient client = RedisClient.create(uri);
        StatefulRedisConnection<String, String> connection = client.connect();
        RedisCommands<String, String> commands = connection.sync();

        commands.set("foo", "bar");
        String result = commands.get("foo");
        System.out.println(result); // >>> bar

        connection.close();

        client.shutdown();
    }
}
```

----------------------------------------

TITLE: ZRANGEBYSCORE Command API Reference
DESCRIPTION: Detailed API specification for the Redis ZRANGEBYSCORE command, including its arguments, command flags, complexity, deprecation status, and historical changes. This reference outlines how the command operates and its various options.
SOURCE: https://github.com/redis/docs/blob/main/content/commands/zrangebyscore.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
Command: ZRANGEBYSCORE
Description: Returns members in a sorted set within a range of scores.
Summary: Returns members in a sorted set within a range of scores.
Syntax: ZRANGEBYSCORE key min max [WITHSCORES] [LIMIT_offset count]
Arity: -4
Group: sorted-set
Categories: @read, @sortedset, @slow, docs, develop, stack, oss, rs, rc, oss, kubernetes, clients
Command Flags: readonly
Complexity: O(log(N)+M) with N being the number of elements in the sorted set and M the number of elements being returned. If M is constant (e.g. always asking for the first 10 elements with LIMIT), you can consider it O(log(N)).
Deprecated Since: 6.2.0
Replaced By: ZRANGE with the BYSCORE argument
Since: 1.0.5

Arguments:
  - name: key
    type: key
    display_text: key
    key_spec_index: 0
  - name: min
    type: double
    display_text: min
  - name: max
    type: double
    display_text: max
  - name: withscores
    type: pure-token
    display_text: withscores
    optional: true
    since: 2.0.0
    token: WITHSCORES
  - name: limit
    type: block
    display_text: limit
    optional: true
    token: LIMIT
    arguments:
      - name: offset
        type: integer
        display_text: offset
      - name: count
        type: integer
        display_text: count

Key Specifications:
  - RO: true
    access: true
    begin_search:
      type: index
      spec:
        index: 1
    find_keys:
      type: range
      spec:
        keystep: 1
        lastkey: 0
        limit: 0

History:
  - 2.0.0: Added the WITHSCORES modifier.
```

----------------------------------------

TITLE: Implementing Numeric Range Finder in Redis OM Spring
DESCRIPTION: This snippet demonstrates how to define a custom repository method to find entities within a numeric range using Redis OM Spring. It includes the findByAgeBetween method declaration in the PeopleRepository interface and its corresponding @GetMapping controller method for exposing the functionality via a REST endpoint. The framework automatically handles the query execution.
SOURCE: https://github.com/redis/docs/blob/main/content/integrate/redisom-for-java/_index.md#_snippet_21

LANGUAGE: java
CODE:
```
public interface PeopleRepository extends RedisDocumentRepository<Person,String> {
 // Find people by age range
 Iterable<Person> findByAgeBetween(int minAge, int maxAge);
}
```

LANGUAGE: java
CODE:
```
@GetMapping("age_between")
Iterable<Person> byAgeBetween( //
    @RequestParam("min") int min, //
    @RequestParam("max") int max) {
  return repo.findByAgeBetween(min, max);
}
```

----------------------------------------

TITLE: Understanding Concurrent List Popping in Active-Active Redis
DESCRIPTION: This example demonstrates the behavior of RPOP operations on a Redis list across multiple Active-Active database instances. It highlights that while elements are popped sequentially, concurrent pops might return the same element if synchronization hasn't occurred, emphasizing that each element is popped at least once, but not necessarily only once.
SOURCE: https://github.com/redis/docs/blob/main/content/operate/rs/7.8/databases/active-active/develop/data-types/lists.md#_snippet_3

LANGUAGE: Redis CLI
CODE:
```
t1 | CRDB Instance 1: LPUSH L x y z
t2 | — Sync —
t3 | CRDB Instance 2: RPOP L => x
t4 | — Sync —
t5 | CRDB Instance 1: RPOP L => y
t6 | — Sync —
t7 | CRDB Instance 1: RPOP L => z
   | CRDB Instance 2: RPOP L => z
```

----------------------------------------

TITLE: RedisJSON Conflict: Assign Empty Object vs. Concurrent Update
DESCRIPTION: Explores a conflict where one instance adds a new field to an existing JSON object using JSON.SET, while another instance concurrently assigns a new empty object to the same path. The resolution rule states that document creation (assigning an empty object is treated as a form of creation for that path) wins over the update, resulting in an empty object.
SOURCE: https://github.com/redis/docs/blob/main/content/embeds/json-active-active-conflict-resolution.md#_snippet_9

LANGUAGE: sh
CODE:
```
JSON.GET doc $
JSON.SET doc $.colors.red ‘#ff0000’
JSON.GET doc $
```

LANGUAGE: sh
CODE:
```
JSON.GET doc $
JSON.SET doc $.colors ‘{}’
JSON.SET doc $.colors.green ‘#00ff00’
JSON.GET doc $
```

----------------------------------------

TITLE: Redis Event Notification Pattern: Consumer Logic
DESCRIPTION: This code outlines the consumer logic for an event notification pattern using Redis. It continuously attempts to retrieve elements from a Redis Set using `SPOP` and, if no elements are available, blocks using `BRPOP` on a helper key until a new event is signaled by the producer.
SOURCE: https://github.com/redis/docs/blob/main/content/commands/blpop.md#_snippet_3

LANGUAGE: Pseudocode
CODE:
```
LOOP forever
    WHILE SPOP(key) returns elements
        ... process elements ...
    END
    BRPOP helper_key
END
```

----------------------------------------

TITLE: Configure Redis Stream ID Uniqueness Mode with rladmin
DESCRIPTION: These commands demonstrate how to change the XADD ID generation mode for a Redis Active-Active database using the `rladmin` command-line utility. The modes include 'strict' (recommended, prevents duplicates), 'semi-strict' (allows full IDs, potential duplicates), and 'liberal' (allows any monotonically ascending ID, potential duplicates). Setting the mode helps manage ID uniqueness in multi-region environments.
SOURCE: https://github.com/redis/docs/blob/main/content/operate/rs/7.8/databases/active-active/develop/data-types/streams.md#_snippet_2

LANGUAGE: sh
CODE:
```
rladmin tune db crdb crdt_xadd_id_uniqueness_mode strict
```

LANGUAGE: sh
CODE:
```
rladmin tune db crdb crdt_xadd_id_uniqueness_mode semi-strict
```

LANGUAGE: sh
CODE:
```
rladmin tune db crdb crdt_xadd_id_uniqueness_mode liberal
```

----------------------------------------

TITLE: Redis FUNCTION Command API Reference
DESCRIPTION: This API documentation details the Redis FUNCTION command, including its metadata such as ACL categories, arity, complexity, and the Redis version it was introduced in. It also references the FUNCTION HELP subcommand for discovering further operations.
SOURCE: https://github.com/redis/docs/blob/main/content/commands/function.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
Command Name: FUNCTION
Description: A container for function commands.

Properties:
  acl_categories: ['@slow']
  arity: -2
  categories: ['docs', 'develop', 'stack', 'oss', 'rs', 'rc', 'oss', 'kubernetes', 'clients']
  complexity: Depends on subcommand.
  group: scripting
  hidden: true
  since: 7.0.0
  syntax_fmt: FUNCTION
  syntax_str: ''

Related Commands:
  FUNCTION HELP: Displays a list of available function commands. (See: /commands/function-help)
```

----------------------------------------

TITLE: Create RedisVL Search Index
DESCRIPTION: This snippet imports the `SearchIndex` class from `redisvl.index` and constructs a search index instance using the previously defined schema. It then creates the index in Redis, overwriting it if an index with the same name already exists.
SOURCE: https://github.com/redis/docs/blob/main/content/integrate/redisvl/user_guide/hybrid_queries.md#_snippet_2

LANGUAGE: python
CODE:
```
from redisvl.index import SearchIndex

# construct a search index from the schema
index = SearchIndex.from_dict(schema, redis_url="redis://localhost:6379")

# create the index (no data yet)
index.create(overwrite=True)
```

----------------------------------------

TITLE: Inspect JSON Objects in Redis
DESCRIPTION: Demonstrates commands for inspecting JSON objects. JSON.OBJLEN returns the number of keys in an object, and JSON.OBJKEYS returns a list of all keys within the object.
SOURCE: https://github.com/redis/docs/blob/main/content/develop/data-types/json/_index.md#_snippet_5

LANGUAGE: Redis CLI
CODE:
```
JSON.SET bike:1 $ '{"model": "Deimos", "brand": "Ergonom", "price": 4972}'
OK
JSON.OBJLEN bike:1 $
1) (integer) 3
JSON.OBJKEYS bike:1 $
1) 1) "model"
   2) "brand"
   3) "price"
```

----------------------------------------

TITLE: RedisVL: Create SearchIndex from YAML Schema
DESCRIPTION: This class method creates a RedisVL SearchIndex object by loading its schema from a specified YAML file path. It takes the path to the YAML schema file as input. The method returns a configured SearchIndex object.
SOURCE: https://github.com/redis/docs/blob/main/content/integrate/redisvl/api/searchindex.md#_snippet_51

LANGUAGE: APIDOC
CODE:
```
classmethod from_yaml(schema_path, **kwargs)
  Parameters:
    schema_path: str - Path to the YAML schema file.
  Returns: SearchIndex - A RedisVL SearchIndex object.
```

----------------------------------------

TITLE: Format Redis CLI JSON Output
DESCRIPTION: Shows how to use redis-cli with the --raw option and JSON.GET to format the output for better readability. It uses INDENT, NEWLINE, and SPACE keywords to pretty-print the JSON.
SOURCE: https://github.com/redis/docs/blob/main/content/develop/data-types/json/_index.md#_snippet_6

LANGUAGE: bash
CODE:
```
$ redis-cli --raw
> JSON.GET obj INDENT "\t" NEWLINE "\n" SPACE " " $
[
\t{
\t\t"name": "Leonard Cohen",
\t\t"lastSeen": 1478476800,
\t\t"loggedOut": true
\t}
]
```

----------------------------------------

TITLE: Configure Redis Enterprise Cluster Rack Awareness Node Label
DESCRIPTION: This YAML configuration snippet demonstrates how to set the `rackAwarenessNodeLabel` property within a `RedisEnterpriseCluster` resource. This property specifies the Kubernetes node label that the operator should use for rack zone awareness. When used, the operator automatically adjusts the `topologyKey` for anti-affinity rules unless `podAntiAffinity` is also explicitly defined. If both `rackAwarenessNodeLabel` and `podAntiAffinity` are used together, ensure the `topologyKey` in your pod anti-affinity rule is set to the specified node label name.
SOURCE: https://github.com/redis/docs/blob/main/content/operate/kubernetes/7.8.4/recommendations/node-selection.md#_snippet_13

LANGUAGE: yaml
CODE:
```
apiVersion: app.redislabs.com/v1
kind: RedisEnterpriseCluster
metadata:
  name: example-redisenterprisecluster
spec:
  nodes: 3
  rackAwarenessNodeLabel: topology.kubernetes.io/zone
```

----------------------------------------

TITLE: Execute Vector Range OR Numeric Range Query
DESCRIPTION: This example demonstrates an OR condition, fetching documents that either fall within a specified vector distance OR have a rating above a certain threshold. This allows for broader result sets based on multiple criteria.
SOURCE: https://github.com/redis/docs/blob/main/content/develop/interact/search-and-query/vecsim-range_queries_examples.ipynb#_snippet_8

LANGUAGE: python
CODE:
```
radius = 0.18
q = Query(f'@{rating_field_name}:[9.9 10] | @{vector_field_name}:[VECTOR_RANGE {radius} $vec_param]=>{{$yield_distance_as: dist}}').sort_by(f'dist').paging(0, n_vec)
res = redis_conn.ft().search(q, query_params = {'vec_param': query_vector.tobytes()})

print_results(res)
```

----------------------------------------

TITLE: Redis MGET Command Example
DESCRIPTION: Demonstrates setting keys and then retrieving their values using MGET, including a non-existing key, using the Redis CLI.
SOURCE: https://github.com/redis/docs/blob/main/content/commands/mget.md#_snippet_1

LANGUAGE: Redis CLI
CODE:
```
SET key1 "Hello"
SET key2 "World"
MGET key1 key2 nonexisting
```

----------------------------------------

TITLE: MSET Command Example
DESCRIPTION: Demonstrates the usage of the MSET command to set multiple keys atomically, followed by GET commands to retrieve their values. MSET replaces existing values and is atomic, ensuring all keys are updated simultaneously.
SOURCE: https://github.com/redis/docs/blob/main/content/commands/mset.md#_snippet_0

LANGUAGE: Redis CLI
CODE:
```
MSET key1 "Hello" key2 "World"
GET key1
GET key2
```

----------------------------------------

TITLE: MSET Command API Reference
DESCRIPTION: Detailed API specification for the Redis MSET command, including its arguments, return information, complexity, and other metadata. This command atomically creates or modifies string values for one or more keys.
SOURCE: https://github.com/redis/docs/blob/main/content/commands/mset.md#_snippet_1

LANGUAGE: APIDOC
CODE:
```
Command: MSET
Description: Atomically creates or modifies the string values of one or more keys.
Summary: Atomically creates or modifies the string values of one or more keys.
Syntax: MSET key value [key value ...]
Since: 1.0.1
Group: string
Complexity: O(N) where N is the number of keys to set.
Arity: -3
ACL Categories: @write, @string, @slow
Command Flags: write, denyoom
Hints:
  - request_policy: multi_shard
  - response_policy: all_succeeded

Arguments:
  - name: data
    type: block
    multiple: true
    arguments:
      - name: key
        type: key
        display_text: key
        key_spec_index: 0
      - name: value
        type: string
        display_text: value

Key Specifications:
  - OW: true
    begin_search:
      type: index
      spec:
        index: 1
    find_keys:
      type: range
      spec:
        keystep: 2
        lastkey: -1
        limit: 0
    update: true

Return Information:
  - RESP2: Simple string reply: always OK because MSET can't fail.
  - RESP3: Simple string reply: always OK because MSET can't fail.
```

----------------------------------------

TITLE: Apply Geo-Filter outside 10 km Radius (Python)
DESCRIPTION: This Python snippet shows how to create a geographical filter to exclude data points located within a 10 km radius of the San Francisco office. By using the inequality operator (`!=`) with `GeoRadius`, it filters for results *outside* the specified area, applying this filter to the query vector before searching the index.
SOURCE: https://github.com/redis/docs/blob/main/content/integrate/redisvl/user_guide/hybrid_queries.md#_snippet_30

LANGUAGE: Python
CODE:
```
geo_filter = Geo("office_location") != GeoRadius(-122.4194, 37.7749, 10, "km")

v.set_filter(geo_filter)
result_print(index.query(v))
```

----------------------------------------

TITLE: Define Kubernetes ClusterRoleBinding for Redis Enterprise Operator
DESCRIPTION: This YAML snippet creates a Kubernetes ClusterRoleBinding resource. It links the 'redis-enterprise-operator' ServiceAccount (which needs to be created in a specific namespace) to the 'redis-enterprise-operator' ClusterRole. This binding is crucial for the Redis Enterprise Operator to have the necessary cluster-wide permissions to deploy and manage Redis Enterprise clusters.
SOURCE: https://github.com/redis/docs/blob/main/content/embeds/k8s/rack_aware_cluster_role_binding.md#_snippet_0

LANGUAGE: yaml
CODE:
```
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: redis-enterprise-operator
  labels:
    app: redis-enterprise
subjects:
- kind: ServiceAccount
  namespace: NAMESPACE_OF_SERVICE_ACCOUNT
  name: redis-enterprise-operator
roleRef:
  kind: ClusterRole
  name: redis-enterprise-operator
  apiGroup: rbac.authorization.k8s.io
```

----------------------------------------

TITLE: Apply Numeric Filter for Exact Age Match in RedisVL
DESCRIPTION: This Python snippet illustrates how to apply an exact match numeric filter. It filters documents where the 'age' field is precisely 14, demonstrating a direct equality comparison using the `Num` object, and returning only records with an age of 14.
SOURCE: https://github.com/redis/docs/blob/main/content/integrate/redisvl/user_guide/hybrid_queries.md#_snippet_13

LANGUAGE: python
CODE:
```
# exact match query
numeric_filter = Num("age") == 14

v.set_filter(numeric_filter)
result_print(index.query(v))
```

----------------------------------------

TITLE: Create Dockerfile for Custom Debezium Server with XMLTYPE Support
DESCRIPTION: This Dockerfile defines a custom Debezium Server image based on `quay.io/debezium/server:3.0.8.Final`. It switches to the root user and copies the previously downloaded `xdb.jar` and `xmlparserv2.jar` into the `/debezium/lib` directory, enabling `XMLTYPE` column processing.
SOURCE: https://github.com/redis/docs/blob/main/content/integrate/redis-data-integration/data-pipelines/prepare-dbs/oracle.md#_snippet_14

LANGUAGE: Dockerfile
CODE:
```
FROM quay.io/debezium/server:3.0.8.Final

USER root

COPY xdb.jar /debezium/lib
COPY xmlparserv2.jar /debezium/lib
```

----------------------------------------

TITLE: Creating a Redis Stream Consumer Group
DESCRIPTION: This snippet demonstrates how to create a new consumer group named 'france_riders' for the 'race:france' stream. The '$' ID indicates that the group will only consume new messages arriving after its creation, ignoring historical messages.
SOURCE: https://github.com/redis/docs/blob/main/content/develop/data-types/streams.md#_snippet_21

LANGUAGE: Redis CLI
CODE:
```
> XGROUP CREATE race:france france_riders $
OK
```

----------------------------------------

TITLE: Database to Redis Data Type Mappings
DESCRIPTION: Detailed mappings for converting common database data types (PostgreSQL, Oracle, MySQL, SQL Server, Cassandra) to Redis data types, including conversion rules and examples.
SOURCE: https://github.com/redis/docs/blob/main/content/integrate/write-behind/reference/data-types-conversion.md#_snippet_24

LANGUAGE: APIDOC
CODE:
```
Source Type: smallint
Redis Type: number
Conversion Example: 32767 will be saved as 32767
```

LANGUAGE: APIDOC
CODE:
```
Source Type: text
Redis Type: string
```

LANGUAGE: APIDOC
CODE:
```
Source Type: time
Redis Type: number mapped to the number of seconds past midnight
Conversion Example: '14:23:46' will be converted to 51826000000 sec
```

LANGUAGE: APIDOC
CODE:
```
Source Type: PostgreSQL, Oracle, Cassandra: timestamp
MySQL, SQL Server: datetime
Redis Type: decimal mapped to ms.microsec since epoch.
SQL Server datetime format: YYYY-MM-DD hh:mm:ss[.nnn],
range: 1753-01-01 through 9999-12-31
Conversion Example: PG field value: '2018-06-20 15:13:16.945104' will be converted by Debezium to '1529507596945104'(micro seconds) and will be stored in Redis target database as 1529507596945.104
```

LANGUAGE: APIDOC
CODE:
```
Source Type: PosrgreSQL: timestamptz
Oracle: timestamp with local timezone
MySQL: timestamp
Redis Type: number converted to UTC and stored as number of ms.microsec since epoch
```

----------------------------------------

TITLE: Group query results by label with Redis Time Series
DESCRIPTION: This example demonstrates how to query all time series with a specific metric label (e.g., 'cpu'), then group the results by another label's value (e.g., 'metric_name'). For each group, it returns the maximum value and the source time series keys using TS.MRANGE with GROUPBY and REDUCE max.
SOURCE: https://github.com/redis/docs/blob/main/content/commands/ts.mrange.md#_snippet_16

LANGUAGE: bash
CODE:
```
127.0.0.1:6379> TS.ADD ts1 1548149180000 90 labels metric cpu metric_name system
(integer) 1548149180000
127.0.0.1:6379> TS.ADD ts1 1548149185000 45
(integer) 1548149185000
127.0.0.1:6379> TS.ADD ts2 1548149180000 99 labels metric cpu metric_name user
(integer) 1548149180000
```

LANGUAGE: bash
CODE:
```
127.0.0.1:6379> TS.MRANGE - + WITHLABELS FILTER metric=cpu GROUPBY metric_name REDUCE max
1) 1) "metric_name=system"
   2) 1) 1) "metric_name"
         2) "system"
      2) 1) "__reducer__"
         2) "max"
      3) 1) "__source__"
         2) "ts1"
   3) 1) 1) (integer) 1548149180000
         2) 90
      2) 1) (integer) 1548149185000
         2) 45
2) 1) "metric_name=user"
   2) 1) 1) "metric_name"
         2) "user"
      2) 1) "__reducer__"
         2) "max"
      3) 1) "__source__"
         2) "ts2"
   3) 1) 1) (integer) 1548149180000
         2) 99
```

----------------------------------------

TITLE: Redis Stream Basic Operations (XADD, XLEN, XRANGE)
DESCRIPTION: Provides a series of Redis CLI commands demonstrating basic stream operations: adding multiple entries to a stream (XADD), getting the stream's length (XLEN), and fetching the first two entries (XRANGE).
SOURCE: https://github.com/redis/docs/blob/main/content/commands/xrange.md#_snippet_8

LANGUAGE: Redis CLI
CODE:
```
XADD writers * name Virginia surname Woolf
XADD writers * name Jane surname Austen
XADD writers * name Toni surname Morrison
XADD writers * name Agatha surname Christie
XADD writers * name Ngozi surname Adichie
XLEN writers
XRANGE writers - + COUNT 2
```

----------------------------------------

TITLE: Configure Kubernetes Operator Deployment for Private Registry Image
DESCRIPTION: This YAML snippet demonstrates how to modify a Kubernetes Deployment manifest for the Redis Enterprise operator to specify an image from a private container registry. The `image` field under `containers` is updated to point to the new registry path and tag.
SOURCE: https://github.com/redis/docs/blob/main/content/operate/kubernetes/deployment/container-images.md#_snippet_4

LANGUAGE: YAML
CODE:
```
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis-enterprise-operator
spec:
  replicas: 1
  selector:
    matchLabels:
      name: redis-enterprise-operator
  template:
    metadata:
      labels:
        name: redis-enterprise-operator
    spec:
      serviceAccountName: redis-enterprise-operator
      containers:
        - name: redis-enterprise-operator
          image: gcr.io/yourproject/redislabs/operator:7.22.0-7
...
```

----------------------------------------

TITLE: GETDEL Command API Reference
DESCRIPTION: Detailed API documentation for the Redis GETDEL command, including its syntax, arguments, complexity, and return information for RESP2 and RESP3 protocols.
SOURCE: https://github.com/redis/docs/blob/main/content/commands/getdel.md#_snippet_1

LANGUAGE: APIDOC
CODE:
```
Command: GETDEL
Summary: Returns the string value of a key after deleting the key.
Description: Returns the string value of a key after deleting the key. This command is similar to GET, except for the fact that it also deletes the key on success (if and only if the key's value type is a string).
Since: 6.2.0
Complexity: O(1)
Syntax: GETDEL key
Arguments:
  - name: key
    type: key
    description: The key to get and delete.
Return Information (RESP2):
  - Bulk string reply: the value of the key.
  - Nil reply: if the key does not exist or if the key's value type is not a string.
Return Information (RESP3):
  - Bulk string reply: the value of the key.
  - Null reply: if the key does not exist or if the key's value type is not a string.
```

----------------------------------------

TITLE: Redis DEL Command Usage Examples
DESCRIPTION: Demonstrates the usage of the DEL command to remove keys. The examples show setting keys and then deleting them, along with the integer reply indicating the number of keys removed.
SOURCE: https://github.com/redis/docs/blob/main/content/commands/del.md#_snippet_1

LANGUAGE: Redis
CODE:
```
SET key1 "Hello"
"OK"
SET key2 "World"
"OK"
DEL key1 key2 key3
(integer) 2
```

LANGUAGE: Redis
CODE:
```
SET key1 "Hello"
SET key2 "World"
DEL key1 key2 key3
```

----------------------------------------

TITLE: Apply Numeric Filter for Age Range in RedisVL
DESCRIPTION: This Python example shows how to use a numeric filter to select documents where the 'age' field falls within a specified range (15 to 35). It utilizes the `Num` object from `redisvl.query.filter` to define the range and applies it to the query vector `v`, returning only records with ages between 15 and 35.
SOURCE: https://github.com/redis/docs/blob/main/content/integrate/redisvl/user_guide/hybrid_queries.md#_snippet_12

LANGUAGE: python
CODE:
```
from redisvl.query.filter import Num

numeric_filter = Num("age").between(15, 35)

v.set_filter(numeric_filter)
result_print(index.query(v))
```

----------------------------------------

TITLE: Integrate FilterExpression with VectorQuery in Python
DESCRIPTION: Shows how to incorporate a previously defined `FilterExpression` into a `VectorQuery` object. This allows for filtered vector searches, combining semantic search with structured data filtering in RedisVL.
SOURCE: https://github.com/redis/docs/blob/main/content/integrate/redisvl/api/filter.md#_snippet_2

LANGUAGE: python
CODE:
```
from redisvl.query import VectorQuery

v = VectorQuery(
    vector=[0.1, 0.1, 0.5, ...],
    vector_field_name="product_embedding",
    return_fields=["product_id", "brand", "price"],
    filter_expression=f,
)
```

----------------------------------------

TITLE: Load Data into RedisVL SearchIndex
DESCRIPTION: Load a dataset into the RedisVL `SearchIndex`. By default, `load` generates unique Redis keys using the index prefix and a random ULID. The `validate_on_load` setting, if enabled, ensures data conforms to the schema using Pydantic validation.
SOURCE: https://github.com/redis/docs/blob/main/content/integrate/redisvl/user_guide/getting_started.md#_snippet_6

LANGUAGE: python
CODE:
```
keys = index.load(data)

print(keys)
```

----------------------------------------

TITLE: RediSearch Wildcard Queries and Multi-Value Indexing
DESCRIPTION: Details new wildcard query syntax for TEXT and TAG fields, including '?' for single character and '*' for zero or more characters. Also covers multi-value indexing and querying for various attribute types via JSONPath, enabling full-text search on arrays and returning JSON from multi-value attributes. Introduces support for SORTABLE fields on JSON and FLOAT64 vector data type with range query support.
SOURCE: https://github.com/redis/docs/blob/main/content/operate/oss_and_stack/stack-with-enterprise/release-notes/redisstack/redisstack-6.2.6-release-notes.md#_snippet_17

LANGUAGE: APIDOC
CODE:
```
RediSearch Features:
- Wildcard Query Support:
  - `?`: Matches any single character
  - `*`: Matches zero or more characters
  - Escaping: Use `’` and `\` for special characters
- Multi-value Indexing & Querying (JSONPath leading to array):
  - Text: Full-text search on array of strings or JSONPath
  - Return JSON from multi-value attributes (enabled via Dialect 3)
  - `SORTABLE` fields on JSON in implicit un-normalized form (UNF)
- Vector Support:
  - `FLOAT64` as vector data type
  - Range query support
  - Query attributes for vector queries
```

----------------------------------------

TITLE: Create Kubernetes PriorityClass for Redis Enterprise Pods
DESCRIPTION: This YAML defines a Kubernetes PriorityClass with a very high value (1,000,000,000) to ensure Redis Enterprise pods are prioritized during scheduling and to prevent preemption by lower-priority workloads. This class should be created in the cluster before being referenced by Redis Enterprise CRDs.
SOURCE: https://github.com/redis/docs/blob/main/content/operate/kubernetes/7.8.6/recommendations/pod-stability.md#_snippet_1

LANGUAGE: yaml
CODE:
```
apiVersion: scheduling.k8s.io/v1
kind: PriorityClass
metadata:
  name: redis-enterprise-priority
value: 1000000000
globalDefault: false
description: "This priority class should be used for Redis Enterprise pods only."
```

----------------------------------------

TITLE: Add Custom Exceptions to redis-py Retry List
DESCRIPTION: Illustrates how to extend the default list of exceptions that trigger retries in `redis-py` by using the `retry_on_error` parameter during connection, for example, to include `BusyLoadingError`.
SOURCE: https://github.com/redis/docs/blob/main/content/develop/clients/redis-py/produsage.md#_snippet_2

LANGUAGE: Python
CODE:
```
# Add `BusyLoadingError` to the default list of exceptions.
from redis.exceptions import (
   BusyLoadingError,
)
    .
    .

r = Redis(
  retry=retry,
  retry_on_error=[BusyLoadingError],
    .
    .
)
```

----------------------------------------

TITLE: Redis HyperLogLog Basic Operations Example
DESCRIPTION: Demonstrates the fundamental Redis HyperLogLog commands: PFADD to add elements to an HLL, PFCOUNT to get the estimated unique count, and PFMERGE to combine multiple HLLs into a single one, showing how the combined count reflects unique elements across all merged HLLs.
SOURCE: https://github.com/redis/docs/blob/main/content/develop/data-types/probabilistic/hyperloglogs.md#_snippet_0

LANGUAGE: Redis CLI
CODE:
```
> PFADD bikes Hyperion Deimos Phoebe Quaoar
(integer) 1
> PFCOUNT bikes
(integer) 4
> PFADD commuter_bikes Salacia Mimas Quaoar
(integer) 1
> PFMERGE all_bikes bikes commuter_bikes
OK
> PFCOUNT all_bikes
(integer) 6
```

----------------------------------------

TITLE: Redis CLI Examples for EXISTS Command
DESCRIPTION: Illustrative examples of using the EXISTS command with redis-cli, demonstrating its basic usage and behavior with existing and non-existing keys.
SOURCE: https://github.com/redis/docs/blob/main/content/commands/exists.md#_snippet_1

LANGUAGE: redis-cli
CODE:
```
SET key1 "Hello"
EXISTS key1
EXISTS nosuchkey
SET key2 "World"
EXISTS key1 key2 nosuchkey
```

----------------------------------------

TITLE: Connect to Redis using a connection string
DESCRIPTION: Shows how to connect to a Redis server by parsing a connection URL string, including basic error handling for the parsing operation.
SOURCE: https://github.com/redis/docs/blob/main/content/develop/clients/go/_index.md#_snippet_3

LANGUAGE: Go
CODE:
```
opt, err := redis.ParseURL("redis://<user>:<pass>@localhost:6379/<db>")
if err != nil {
	panic(err)
}

client := redis.NewClient(opt)
```

----------------------------------------

TITLE: HTTP POST Request to Create Redis Database v2
DESCRIPTION: Example shell command for creating a new database in the cluster using the v2 API endpoint.
SOURCE: https://github.com/redis/docs/blob/main/content/operate/rs/references/rest-api/requests/bdbs/_index.md#_snippet_18

LANGUAGE: sh
CODE:
```
POST /v2/bdbs
```

----------------------------------------

TITLE: Example JSON Request Body for Database Creation
DESCRIPTION: Illustrates the JSON structure required to create a new Redis database, specifying its name, type, memory size, and shard count, along with an optional recovery plan.
SOURCE: https://github.com/redis/docs/blob/main/content/operate/rs/7.4/references/rest-api/requests/bdbs/_index.md#_snippet_20

LANGUAGE: json
CODE:
```
{
    "bdb": {
        "name": "test-database",
        "type": "redis",
        "memory_size": 1073741824,
        "shards_count": 1
    },
    "recovery_plan": {
        "data_files": [
            {
                "shard_slots": "0-16383",
                "node_uid": "1",
                "filename": "redis-4.rdb"
            }
        ]
    }
}
```

----------------------------------------

TITLE: Redis Query Engine Testing and Debugging Tools
DESCRIPTION: Tools and commands for validating the correctness and performance of Redis Query Engine deployments. Includes Redis CLI commands like MONITOR and FT.PROFILE, and external load simulation tools like memtier_benchmark.
SOURCE: https://github.com/redis/docs/blob/main/content/develop/interact/search-and-query/best-practices/dev-to-prod-best-practices.md#_snippet_4

LANGUAGE: APIDOC
CODE:
```
Testing Tools:
  - Redis CLI:
    - MONITOR command: Analyze commands.
    - Profiling features (in Redis Insight): Analyze commands.
  - FT.PROFILE command:
    - Purpose: Provides detailed insights into individual query execution paths.
    - Benefit: Helps identify bottlenecks and inefficiencies.
  - Load Simulation Tools:
    - memtier_benchmark: Simulate load.
    - Custom test applications: Simulate load.
  Network Considerations:
    - Minimize latency by locating test clients in the same network as Redis instance.
    - For Redis Cloud: Ensure test machines are in a VPC-peered environment with target Redis database.
```

----------------------------------------

TITLE: Executing a RediSearch KNN Query with Vector Parameter in Python
DESCRIPTION: This Python code demonstrates how to execute the previously defined KNN search query against a Redis client. It passes the vectorized query as a byte array using NumPy's 'tobytes()' method for the 'query_vector' parameter, which is crucial for handling vector data in 'FT.SEARCH' commands. The result is accessed via '.docs'.
SOURCE: https://github.com/redis/docs/blob/main/content/develop/get-started/vector-database.md#_snippet_5

LANGUAGE: python
CODE:
```
client.ft('idx:bikes_vss').search(
    query,
    {
      'query_vector': np.array(encoded_query, dtype=np.float32).tobytes()
    }
).docs
```

----------------------------------------

TITLE: Redis Query Engine Configuration Parameters
DESCRIPTION: This configuration example showcases various parameters for the Redis Query Engine. It includes settings for module loading, numeric range handling, background indexing, query dialects, garbage collection, cursor and result limits, worker thread management, and text processing options like phonetic matching and stemming. Each parameter is self-documented with its type, valid range, and default value.
SOURCE: https://github.com/redis/docs/blob/main/content/operate/oss_and_stack/management/config-file.md#_snippet_0

LANGUAGE: Redis Conf
CODE:
```
include redis.conf

loadmodule ./modules/redisbloom/redisbloom.so
loadmodule ./modules/redisearch/redisearch.so
loadmodule ./modules/redisjson/rejson.so
loadmodule ./modules/redistimeseries/redistimeseries.so

############################## QUERY ENGINE CONFIG ############################

# Keep numeric ranges in numeric tree parent nodes of leafs for `x` generations.
# numeric, valid range: [0, 2], default: 0
#
# search-_numeric-ranges-parents 0

# The number of iterations to run while performing background indexing
# before we call usleep(1) (sleep for 1 micro-second) and make sure that we
# allow redis to process other commands.
# numeric, valid range: [1, UINT32_MAX], default: 100
#
# search-bg-index-sleep-gap 100

# The default dialect used in search queries.
# numeric, valid range: [1, 4], default: 1
#
# search-default-dialect 1

# the fork gc will only start to clean when the number of not cleaned document
# will exceed this threshold.
# numeric, valid range: [1, LLONG_MAX], default: 100
#
# search-fork-gc-clean-threshold 100

# interval (in seconds) in which to retry running the forkgc after failure.
# numeric, valid range: [1, LLONG_MAX], default: 5
#
# search-fork-gc-retry-interval 5

# interval (in seconds) in which to run the fork gc (relevant only when fork
# gc is used).
# numeric, valid range: [1, LLONG_MAX], default: 30
#
# search-fork-gc-run-interval 30

# the amount of seconds for the fork GC to sleep before exiting.
# numeric, valid range: [0, LLONG_MAX], default: 0
#
# search-fork-gc-sleep-before-exit 0

# Scan this many documents at a time during every GC iteration.
# numeric, valid range: [1, LLONG_MAX], default: 100
#
# search-gc-scan-size 100

# Max number of cursors for a given index that can be opened inside of a shard.
# numeric, valid range: [0, LLONG_MAX], default: 128
#
# search-index-cursor-limit 128

# Maximum number of results from ft.aggregate command.
# numeric, valid range: [0, (1ULL << 31)], default: 1ULL << 31
#
# search-max-aggregate-results 2147483648

# Maximum prefix expansions to be used in a query.
# numeric, valid range: [1, LLONG_MAX], default: 200
#
# search-max-prefix-expansions 200

# Maximum runtime document table size (for this process).
# numeric, valid range: [1, 100000000], default: 1000000
#
# search-max-doctablesize 1000000

# max idle time allowed to be set for cursor, setting it high might cause
# high memory consumption.
# numeric, valid range: [1, LLONG_MAX], default: 300000
#
# search-cursor-max-idle 300000

# Maximum number of results from ft.search command.
# numeric, valid range: [0, 1ULL << 31], default: 1000000
#
# search-max-search-results 1000000

# Number of worker threads to use for background tasks when the server is
# in an operation event.
# numeric, valid range: [1, 16], default: 4
#
# search-min-operation-workers 4

# Minimum length of term to be considered for phonetic matching.
# numeric, valid range: [1, LLONG_MAX], default: 3
#
# search-min-phonetic-term-len 3

# the minimum prefix for expansions (`*`).
# numeric, valid range: [1, LLONG_MAX], default: 2
#
# search-min-prefix 2

# the minimum word length to stem.
# numeric, valid range: [2, UINT32_MAX], default: 4
#
# search-min-stem-len 4

# Delta used to increase positional offsets between array
# slots for multi text values.
# Can control the level of separation between phrases in different
# array slots (related to the SLOP parameter of ft.search command)"
# numeric, valid range: [1, UINT32_MAX], default: 100
#
# search-multi-text-slop 100

# Used for setting the buffer limit threshold for vector similarity tiered
# HNSW index, so that if we are using WORKERS for indexing, and the
# number of vectors waiting in the buffer to be indexed exceeds this limit,
# we insert new vectors directly into HNSW.
# numeric, valid range: [0, LLONG_MAX], default: 1024
#
# search-tiered-hnsw-buffer-limit 1024

# Query timeout.
# numeric, valid range: [1, LLONG_MAX], default: 500
#
# search-timeout 500

# minimum number of iterators in a union from which the iterator will
# will switch to heap-based implementation.
# numeric, valid range: [1, LLONG_MAX], default: 20
# switch to heap based implementation.
#
# search-union-iterator-heap 20

# The maximum memory resize for vector similarity indexes (in bytes).
# numeric, valid range: [0, UINT32_MAX], default: 0
#
# search-vss-max-resize 0

# Number of worker threads to use for query processing and background tasks.
# numeric, valid range: [0, 16], default: 0
# This configuration also affects the number of connections per shard.
#
# search-workers 0

# The number of high priority tasks to be executed at any given time by the
# worker thread pool, before executing low priority tasks. After this number
```

----------------------------------------

TITLE: Redis HGET Command Usage Examples
DESCRIPTION: Demonstrates the usage of the Redis HGET command to retrieve values from a hash, including setting a field and querying for both existing and non-existing fields. Examples are provided for both client-side and interactive console execution.
SOURCE: https://github.com/redis/docs/blob/main/content/commands/hget.md#_snippet_1

LANGUAGE: Redis
CODE:
```
HSET myhash field1 "foo"
(integer) 1
HGET myhash field1
"foo"
HGET myhash field2
(nil)
```

LANGUAGE: Redis
CODE:
```
HSET myhash field1 "foo"
HGET myhash field1
HGET myhash field2
```

----------------------------------------

TITLE: Redis XREAD: Non-blocking retrieval of stream entries
DESCRIPTION: Demonstrates the non-blocking usage of the XREAD command to fetch a specified count of new messages from a Redis stream. It explains the mandatory STREAMS option, how to specify the last seen ID (e.g., '0' for all messages), and the ability to read from multiple streams simultaneously. The output format of the command is also shown.
SOURCE: https://github.com/redis/docs/blob/main/content/develop/data-types/streams.md#_snippet_15

LANGUAGE: Redis CLI
CODE:
```
XREAD COUNT 2 STREAMS race:france 0
1) 1) "race:france"
   2) 1) 1) "1692632086370-0"
         2) 1) "rider"
            2) "Castilla"
            3) "speed"
            4) "30.2"
            5) "position"
            6) "1"
            7) "location_id"
            8) "1"
      2) 1) "1692632094485-0"
         2) 1) "rider"
            2) "Norem"
            3) "speed"
            4) "28.8"
            5) "position"
            6) "3"
            7) "location_id"
            8) "1"
```

----------------------------------------

TITLE: Python: Insert JSON Documents with Vector Embeddings
DESCRIPTION: This Python example illustrates how to add JSON documents to Redis using r.json().set(). It shows how to specify the root path and include fields like content, genre, and vector embeddings. A key difference from hash indexing is the use of tolist() for vector generation instead of tobytes() when inserting JSON data.
SOURCE: https://github.com/redis/docs/blob/main/content/develop/clients/redis-py/vecsearch.md#_snippet_9

LANGUAGE: python
CODE:
```
content = "That is a very happy person"

r.json().set("jdoc:0", Path.root_path(), {
    "content": content,
    "genre": "persons",
    "embedding": model.encode(content).astype(np.float32).tolist(),
})

content = "That is a happy dog"

r.json().set("jdoc:1", Path.root_path(), {
    "content": content,
    "genre": "pets",
    "embedding": model.encode(content).astype(np.float32).tolist(),
})

content = "Today is a sunny day"

r.json().set("jdoc:2", Path.root_path(), {
    "content": content,
    "genre": "weather",
    "embedding": model.encode(content).astype(np.float32).tolist(),
})
```

----------------------------------------

TITLE: Perform Jedis Health Check with PING Command
DESCRIPTION: This Java example shows how to implement a simple health check for a Redis server using the `PING` command with Jedis. Periodically checking the server's status helps detect connectivity problems early, preventing user-reported issues.
SOURCE: https://github.com/redis/docs/blob/main/content/develop/clients/jedis/produsage.md#_snippet_1

LANGUAGE: java
CODE:
```
try (Jedis jedis = jedisPool.getResource()) {
  if (! "PONG".equals(jedis.ping())) {
    // Report problem.
  }
}
```

----------------------------------------

TITLE: Create Redis Vector Index for JSON Documents in JavaScript
DESCRIPTION: This snippet shows how to create a Redis search index specifically for JSON documents. It defines schema fields with paths and aliases, specifies the vector algorithm and distance metric, and sets the `ON` option to `JSON` and a custom `PREFIX`.
SOURCE: https://github.com/redis/docs/blob/main/content/develop/clients/nodejs/vecsearch.md#_snippet_7

LANGUAGE: js
CODE:
```
await client.ft.create('vector_json_idx', {
    '$.content': {
        type: SchemaFieldTypes.TEXT,
        AS: 'content',
    },
    '$.genre': {
        type: SchemaFieldTypes.TAG,
        AS: 'genre',
    },
    '$.embedding': {
        type: SchemaFieldTypes.VECTOR,
        TYPE: 'FLOAT32',
        ALGORITHM: VectorAlgorithms.HNSW,
        DISTANCE_METRIC: 'L2',
        DIM: 768,
        AS: 'embedding',
    }
}, {
    ON: 'JSON',
    PREFIX: 'jdoc:'
});
```

----------------------------------------

TITLE: Redis Query Engine Scoring Algorithm Change
DESCRIPTION: The default scoring algorithm used in the Redis Query Engine has been changed from `TF-IDF` to `BM25`. This update may affect the relevance ranking of search results.
SOURCE: https://github.com/redis/docs/blob/main/content/develop/whats-new/8-0.md#_snippet_8

LANGUAGE: APIDOC
CODE:
```
Updates to scoring (BM25 is now the default instead of TF-IDF).
```

----------------------------------------

TITLE: Create and Save Redis OM Model Instance
DESCRIPTION: Provides Python code to instantiate a 'Person' object from a JSON request and persist it to Redis using the '.save()' method. It also shows how to retrieve the assigned primary key ('.pk').
SOURCE: https://github.com/redis/docs/blob/main/content/integrate/redisom-for-python/_index.md#_snippet_17

LANGUAGE: python
CODE:
```
  new_person = Person(**request.json)
  new_person.save()
  return new_person.pk
```

----------------------------------------

TITLE: Ruby Spatial Query Function for Redis ZRANGE
DESCRIPTION: This Ruby function, `spacequery`, demonstrates how to implement a spatial query. It takes bounding box coordinates (x0, y0, x1, y1) and an exponent 'exp' to define grid resolution. The function iterates through relevant grid squares, converts their coordinates into an interleaved bit representation, and constructs the appropriate ZRANGE query for Redis. It assumes 9 bits per integer for an 18-bit interleaved key.
SOURCE: https://github.com/redis/docs/blob/main/content/develop/use/patterns/indexes/index.md#_snippet_31

LANGUAGE: Ruby
CODE:
```
def spacequery(x0,y0,x1,y1,exp)
    bits=exp*2
    x_start = x0/(2**exp)
    x_end = x1/(2**exp)
    y_start = y0/(2**exp)
    y_end = y1/(2**exp)
    (x_start..x_end).each{|x|
        (y_start..y_end).each{|y|
            x_range_start = x*(2**exp)
            x_range_end = x_range_start | ((2**exp)-1)
            y_range_start = y*(2**exp)
            y_range_end = y_range_start | ((2**exp)-1)
            puts "#{x},#{y} x from #{x_range_start} to #{x_range_end}, y from #{y_range_start} to #{y_range_end}"

            # Turn it into interleaved form for ZRANGE query.
            # We assume we need 9 bits for each integer, so the final
            # interleaved representation will be 18 bits.
            xbin = x_range_start.to_s(2).rjust(9,'0')
            ybin = y_range_start.to_s(2).rjust(9,'0')
            s = xbin.split("").zip(ybin.split("")).flatten.compact.join("")
            # Now that we have the start of the range, calculate the end
            # by replacing the specified number of bits from 0 to 1.
            e = s[0..-(bits+1)]+("1"*bits)
            puts "ZRANGE myindex [#{s} [#{e} BYLEX"
        }
    }
end

spacequery(50,100,100,300,6)
```

----------------------------------------

TITLE: Redis RESP3 to Lua Type Conversion Rules
DESCRIPTION: Defines the conversion rules for various Redis RESP3 data types into their corresponding Lua representations when returned from Redis commands within Lua scripts. This includes how complex types like maps and sets are represented, as well as simple types like booleans and nulls.
SOURCE: https://github.com/redis/docs/blob/main/content/develop/interact/programmability/lua-api.md#_snippet_34

LANGUAGE: APIDOC
CODE:
```
RESP3 Type -> Lua Type Conversion:
- Map Reply: Lua table { "_map": { [field]: [value], ... } }
- Set Reply: Lua table { "_set": { [element]: true, ... } }
- Null Reply: Lua nil
- True Reply: Lua boolean true
- False Reply: Lua boolean false
- Double Reply: Lua table { "_double": [number] }
- Big Number Reply: Lua table { "_big_number": "[string]" }
- Verbatim String Reply: Lua table { "_verbatim_string": { "string": "[string]", "format": "[string]" } }

Notes:
- Big number and verbatim strings supported from Redis v7.0+.
- Attributes, streamed strings, and streamed aggregate data types are not currently supported by Redis Lua API.
```

----------------------------------------

TITLE: Configure Node.js Redis Client with Auto-Created Client-Side Cache
DESCRIPTION: To enable client-side caching, specify the RESP3 protocol and configure the cache with the `clientSideCache` parameter when connecting. This example shows how to pass a simple configuration object to let `node-redis` create and manage the cache automatically.
SOURCE: https://github.com/redis/docs/blob/main/content/develop/clients/nodejs/connect.md#_snippet_6

LANGUAGE: js
CODE:
```
const client = createClient({
  RESP: 3,
  clientSideCache: {
    ttl: 0,             // Time-to-live in milliseconds (0 = no expiration)
    maxEntries: 0,      // Maximum entries to store (0 = unlimited)
    evictPolicy: "LRU"  // Eviction policy: "LRU" or "FIFO"
  }
});
```

----------------------------------------

TITLE: Create CredentialProvider for Managed Identity (Default Configuration)
DESCRIPTION: Create a `CredentialProvider` instance using `create_from_managed_identity()` to authenticate to Azure Managed Redis with a managed identity. Specify `ManagedIdentityType.SYSTEM_ASSIGNED` or `ManagedIdentityType.USER_ASSIGNED`.
SOURCE: https://github.com/redis/docs/blob/main/content/develop/clients/redis-py/amr.md#_snippet_3

LANGUAGE: python
CODE:
```
from redis import Redis
from redis_entraid.cred_provider import *

credential_provider = create_from_managed_identity(
    identity_type=ManagedIdentityType.SYSTEM_ASSIGNED,
)
```

----------------------------------------

TITLE: PEM Certificate Chain Order
DESCRIPTION: Illustrates the correct order for chaining certificates (leaf, intermediate CA, root CA) within a .PEM file for both server and client certificates.
SOURCE: https://github.com/redis/docs/blob/main/content/operate/rs/7.8/security/certificates/create-certificates.md#_snippet_7

LANGUAGE: text
CODE:
```
-----BEGIN CERTIFICATE-----
Domain (leaf) certificate
-----END CERTIFICATE-----
-----BEGIN CERTIFICATE-----
Intermediate CA certificate
-----END CERTIFICATE----
-----BEGIN CERTIFICATE-----
Trusted Root CA certificate
-----END CERTIFICATE-----
```

----------------------------------------

TITLE: Test Redis Database Access with Python
DESCRIPTION: This snippet demonstrates how to connect to a Redis database securely using the `redis-py` library in Python. It shows how to configure SSL and retrieve server information. The subsequent shell example illustrates how to run this Python script and the expected output, including Redis server details.
SOURCE: https://github.com/redis/docs/blob/main/content/operate/kubernetes/networking/ingress.md#_snippet_8

LANGUAGE: python
CODE:
```
import redis

r = redis.StrictRedis(host='<my-db-hostname>',
              port=443, db=0, ssl=True,
              ssl_ca_certs='/<file-path>/proxy_cert.pem')


print(r.info())
```

LANGUAGE: sh
CODE:
```
$ /Users/example-user/Documents/Projects/test_client/venv3.7/bin/python \
    /Users/example-user/Documents/Projects/test_client/test_ssl.py
{
    'redis_version': '5.0.5',
    'redis_git_sha1': 0,
    'redis_git_dirty': 0,
    'redis_build_id': 0,
    'redis_mode': 'standalone',
    'os': 'Linux 4.14.154-128.181.amzn2.x86_64 x86_64',
    'arch_bits': 64,
    'multiplexing_api': 'epoll',
    'gcc_version': '7.4.0',
    'process_id': 1,
    'run_id': '3ce7721b096517057d28791aab555ed8ac02e1de',
    'tcp_port': 10811,
    'uptime_in_seconds': 316467,
    'uptime_in_days': 3,
    'hz': 10,
    'lru_clock': 0,
    'config_file': '',
    'connected_clients': 1,
    'client_longest_output_list': 0,
    'client_biggest_input_buf': 0,
    'blocked_clients': 0,
    'used_memory': 12680016,
    'used_memory_human': '12.9M',
    'used_memory_rss': 12680016,
    'used_memory_peak': 13452496,
    'used_memory_peak_human': '12.82M',
    'used_memory_lua': 151552,
    'mem_fragmentation_ratio': 1,
    'mem_allocator': 'jemalloc-5.1.0',
    'loading': 0,
    'rdb_changes_since_last_save': 0,
    'rdb_bgsave_in_progress': 0,
    'rdb_last_save_time': 1577753916,
    'rdb_last_bgsave_status': 'ok',
    'rdb_last_bgsave_time_sec': 0,
    'rdb_current_bgsave_time_sec': -1,
    'aof_enabled': 0,
    'aof_rewrite_in_progress': 0,
    'aof_rewrite_scheduled': 0,
    'aof_last_rewrite_time_sec': -1,
    'aof_current_rewrite_time_sec': -1,
    'aof_last_bgrewrite_status': 'ok',
    'aof_last_write_status': 'ok',
    'total_connections_received': 4,
    'total_commands_processed': 6,
    'instantaneous_ops_per_sec': 14,
    'total_net_input_bytes': 0,
    'total_net_output_bytes': 0,
    'instantaneous_input_kbps': 0.0,
    'instantaneous_output_kbps': 0.0,
    'rejected_connections': 0,
    'sync_full': 1,
    'sync_partial_ok': 0,
    'sync_partial_err': 0,
    'expired_keys': 0,
    'evicted_keys': 0,
    'keyspace_hits': 0,
    'keyspace_misses': 0,
    'pubsub_channels': 0,
    'pubsub_patterns': 0,
    'latest_fork_usec': 0,
    'migrate_cached_sockets': 0,
    'role': 'master',
    'connected_slaves': 1,
    'slave0': {
        'ip': '0.0.0.0',
        'port': 0,
        'state': 'online',
        'offset': 0,
        'lag': 0
    },
    'master_repl_offset': 0,
    'repl_backlog_active': 0,
    'repl_backlog_size': 1048576,
    'repl_backlog_first_byte_offset': 0,
    'repl_backlog_histlen': 0,
    'used_cpu_sys': 0.0,
    'used_cpu_user': 0.0,
    'used_cpu_sys_children': 0.0,
    'used_cpu_user_children': 0.0,
    'cluster_enabled': 0
}

Process finished with exit code 0
```

----------------------------------------

TITLE: Retrieve Fuzzy Autocomplete Suggestions with Redis FT.SUGGET
DESCRIPTION: Demonstrates how to enable fuzzy matching for autocomplete suggestions using the `FUZZY` option with `FT.SUGGET`, allowing for minor spelling mistakes.
SOURCE: https://github.com/redis/docs/blob/main/content/develop/interact/search-and-query/advanced-concepts/autocomplete.md#_snippet_3

LANGUAGE: Redis CLI
CODE:
```
redis> FT.SUGGET autocomplete hell FUZZY
1) "hello world"
2) "hello there"
3) "help me"
```

----------------------------------------

TITLE: Logging Script Variables with redis.debug() in Redis Debugger
DESCRIPTION: The `redis.debug()` command provides a powerful way to log values from within a Redis Lua script directly to the debug console. It accepts multiple arguments, including tables and nested tables, and formats them for clear observation. This function has no effect when the script is executed outside a debugging session, making it ideal for debugging-specific output.
SOURCE: https://github.com/redis/docs/blob/main/content/develop/interact/programmability/lua-debugging.md#_snippet_7

LANGUAGE: Redis Lua Debugger Console
CODE:
```
lua debugger> list
-> 1   local a = {1,2,3}
   2   local b = false
   3   redis.debug(a,b)
lua debugger> continue
<debug> line 3: {1; 2; 3}, false
```

----------------------------------------

TITLE: Redis EXPIRE Command Usage with TTL and Options
DESCRIPTION: Demonstrates the basic usage of the Redis EXPIRE command to set a timeout on a key, and how TTL reflects the remaining time. It also illustrates the behavior of EXPIRE with the NX (no expiry) and XX (existing expiry) options, showing when the command succeeds or fails based on the key's current expiry state.
SOURCE: https://github.com/redis/docs/blob/main/content/commands/expire.md#_snippet_1

LANGUAGE: Redis
CODE:
```
SET mykey "Hello"
"OK"
EXPIRE mykey 10
(integer) 1
TTL mykey
(integer) 10
SET mykey "Hello World"
"OK"
TTL mykey
(integer) -1
EXPIRE mykey 10 XX
(integer) 0
TTL mykey
(integer) -1
EXPIRE mykey 10 NX
(integer) 1
TTL mykey
(integer) 10
```

----------------------------------------

TITLE: Redis Metrics Stream Engine Prometheus v2 Endpoint
DESCRIPTION: The new metrics stream engine provides access to more accurate, real-time data via an exporter-based infrastructure. It exposes a new /v2 Prometheus scraping endpoint that you can use to export metrics to external monitoring tools such as Grafana, DataDog, NewRelic, and Dynatrace. This endpoint exports raw data instead of aggregated data to improve monitoring at scale and accuracy compared to v1 Prometheus metrics.
SOURCE: https://github.com/redis/docs/blob/main/content/operate/rs/release-notes/rs-7-8-releases/rs-7-8-2-34.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
Endpoint: /v2
```

----------------------------------------

TITLE: Configure SAML Attribute Mappings for Redis Cloud in AWS IAM Identity Center
DESCRIPTION: This snippet details the required attribute mappings for the Redis Cloud application within AWS IAM Identity Center. These mappings ensure that user attributes like email, name, and Redis Cloud account roles are correctly passed during SAML assertions. The 'redisAccountMapping' key-value pair requires your Redis Cloud Account ID and the desired lowercase role (owner, member, manager, billing_admin, or viewer).
SOURCE: https://github.com/redis/docs/blob/main/content/operate/rc/security/access-control/saml-sso/saml-integration-aws-identity-center.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
Attribute Mappings:
  Subject: ${user:email}, unspecified
  Email: ${user:email}, unspecified
  FirstName: ${user:givenName}, unspecified
  LastName: ${user:familyName}, unspecified
  redisAccountMapping: XXXXXXX=owner, unspecified
```

----------------------------------------

TITLE: Define Istio VirtualService for Redis External Routing
DESCRIPTION: Defines an Istio `VirtualService` custom resource (`redis-vs.yaml`) to manage external traffic routing for Redis Enterprise components. It configures TLS SNI-based routing for API and database hosts to their respective internal services (`rec1` and `db1`) via a specified gateway.
SOURCE: https://github.com/redis/docs/blob/main/content/operate/kubernetes/networking/istio-ingress.md#_snippet_5

LANGUAGE: yaml
CODE:
```
apiVersion: networking.istio.io/v1beta1
kind: VirtualService
metadata:
  name: redis-vs
spec:
  gateways:
  - redis-gateway
  hosts:
  - "*.istio.k8s.my.example.com"
  tls:
  - match:
    - port: 443
      sniHosts:
      - api.istio.k8s.my.example.com
    route:
    - destination:
        host: rec1
        port:
          number: 9443
  - match:
    - port: 443
      sniHosts:
      - db1.istio.k8s.my.example.com
    route:
    - destination:
        host: db1
```

----------------------------------------

TITLE: Redis Search General Tag Field Query Syntax
DESCRIPTION: Provides the general syntax for querying Redis Search tag fields. Tags within the curly braces are separated by pipes, indicating a logical OR operation.
SOURCE: https://github.com/redis/docs/blob/main/content/develop/interact/search-and-query/advanced-concepts/query_syntax.md#_snippet_21

LANGUAGE: Redis
CODE:
```
@field:{ tag | tag | ...}
```

----------------------------------------

TITLE: Redis MEMORY DOCTOR Command API Reference
DESCRIPTION: Documents the Redis `MEMORY DOCTOR` command, which provides a report on memory-related issues within the Redis server and suggests remedies. It details the command's syntax, complexity, and the format of its return value for both RESP2 and RESP3 protocols.
SOURCE: https://github.com/redis/docs/blob/main/content/commands/memory-doctor.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
Command: MEMORY DOCTOR
Description: Outputs a memory problems report.
Complexity: O(1)
Group: server
Since: 4.0.0

Return Information:
  RESP2: Bulk string reply (a memory problems report)
  RESP3: Verbatim string reply (a memory problems report)
```

----------------------------------------

TITLE: Generate Kubernetes Secret for Database Password
DESCRIPTION: This YAML defines a Kubernetes Secret named `my-db-secret` of type `Opaque`, containing a base64 encoded database password. This secret is a prerequisite for setting the global database secret in REAADB.
SOURCE: https://github.com/redis/docs/blob/main/content/operate/kubernetes/7.8.6/active-active/global-db-secret.md#_snippet_0

LANGUAGE: yaml
CODE:
```
apiVersion: v1
data:
  password: bXktcGFzcw
kind: Secret
metadata:
  name: my-db-secret
type: Opaque
```

----------------------------------------

TITLE: JSON.ARRAPPEND Command
DESCRIPTION: Appends an element to a JSON array. This command is supported in Redis Enterprise and Redis Cloud (Flexible & Annual, Free & Fixed).
SOURCE: https://github.com/redis/docs/blob/main/content/operate/oss_and_stack/stack-with-enterprise/json/commands.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
JSON.ARRAPPEND: Appends an element to a JSON array.
```

----------------------------------------

TITLE: Indexing JSON Documents with FT.CREATE
DESCRIPTION: This feature enhances the `FT.CREATE` command, allowing users to map JSONPath queries to fields within the search schema. When a JSON document is indexed, values extracted by the specified JSONPath query are indexed in the corresponding field. This capability requires the RedisJSON 2.0 module to be installed.
SOURCE: https://github.com/redis/docs/blob/main/content/operate/oss_and_stack/stack-with-enterprise/release-notes/redisearch/redisearch-2.2-release-notes.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
FT.CREATE command enhancement:
  - Capability: Map JSONPath queries to fields for indexing values from JSON documents.
  - Requirement: RedisJSON 2.0 module.
  - Schema syntax example: `FT.CREATE myIdx ON JSON SCHEMA $.path AS field_name TEXT`
```

----------------------------------------

TITLE: Enable Redis Database Persistence
DESCRIPTION: Describes how to protect against data loss in RAM by enabling data persistence. This involves storing a copy of the data on disk using either snapshots or an append-only file (AOF).
SOURCE: https://github.com/redis/docs/blob/main/content/operate/rs/databases/configure/_index.md#_snippet_5

LANGUAGE: APIDOC
CODE:
```
Data Persistence Configuration:
  - Purpose: Protect against data loss in RAM.
  - Methods:
    - Snapshots: Store data copy on disk.
    - Append-Only File (AOF): Store data copy on disk.
```

----------------------------------------

TITLE: Initialize and Rerank with VoyageAIReranker
DESCRIPTION: This example shows how to import, initialize, and use the `VoyageAIReranker` class. It configures the reranker to consider specific document attributes for ranking and then performs a reranking operation.
SOURCE: https://github.com/redis/docs/blob/main/content/integrate/redisvl/api/reranker.md#_snippet_5

LANGUAGE: python
CODE:
```
from redisvl.utils.rerank import VoyageAIReranker

# set up the VoyageAI reranker with some configuration
reranker = VoyageAIReranker(rank_by=["content"], limit=2)
# rerank raw search results based on user input/query
results = reranker.rank(
    query="your input query text here",
    docs=[
        {"content": "document 1"},
        {"content": "document 2"},
        {"content": "document 3"}
    ]
)
```

----------------------------------------

TITLE: Express.js PATCH Route for Person Location Update
DESCRIPTION: This JavaScript code defines an Express.js router that handles PATCH requests to update a person's location and the `locationUpdated` timestamp. It fetches the person using `personRepository`, updates the `location` and `locationUpdated` properties, and saves the changes back to Redis.
SOURCE: https://github.com/redis/docs/blob/main/content/integrate/redisom-for-node-js/_index.md#_snippet_41

LANGUAGE: javascript
CODE:
```
import { Router } from 'express'
import { personRepository } from '../om/person.js'

export const router = Router()

router.patch('/:id/location/:lng,:lat', async (req, res) => {

  const id = req.params.id
  const longitude = Number(req.params.lng)
  const latitude = Number(req.params.lat)

  const locationUpdated = new Date()

  const person = await personRepository.fetch(id)
  person.location = { longitude, latitude }
  person.locationUpdated = locationUpdated
  await personRepository.save(person)

  res.send({ id, locationUpdated, location: { longitude, latitude } })
})
```

----------------------------------------

TITLE: Initialize SentenceTransformer model for text embeddings
DESCRIPTION: Instantiates the `SentenceTransformer` with the `all-MiniLM-L6-v2` model. This model is used to convert text into 384-dimensional vector embeddings, which capture the semantic meaning of the input text for similarity comparisons.
SOURCE: https://github.com/redis/docs/blob/main/content/develop/clients/redis-py/vecsearch.md#_snippet_2

LANGUAGE: python
CODE:
```
model = SentenceTransformer("sentence-transformers/all-MiniLM-L6-v2")
```

----------------------------------------

TITLE: Redis Search: Inefficient Query Example
DESCRIPTION: This Redis Search query is an anti-pattern for vertical scaling. It uses wildcard projection (LOAD *), fetching all fields unnecessarily, and lacks advanced query syntax. This results in increased memory usage, slower execution, and inefficient data retrieval.
SOURCE: https://github.com/redis/docs/blob/main/content/develop/interact/search-and-query/best-practices/scalable-query-best-practices.md#_snippet_11

LANGUAGE: sh
CODE:
```
FT.AGGREGATE jsonidx:profiles '@t:[1299 1299]' LOAD * LIMIT 0 10
```

----------------------------------------

TITLE: Configure Redis maxmemory limit in redis.conf
DESCRIPTION: This snippet demonstrates how to set the maximum amount of memory Redis should use for its dataset by adding the `maxmemory` directive to the `redis.conf` file. This configuration is applied at Redis startup.
SOURCE: https://github.com/redis/docs/blob/main/content/develop/reference/eviction/index.md#_snippet_0

LANGUAGE: Redis Config
CODE:
```
maxmemory 100mb
```

----------------------------------------

TITLE: Create RedisSearch JSON Index for Bicycle Data
DESCRIPTION: This `bash` command demonstrates how to create a RedisSearch index named `idx:bicycle` on JSON documents. It specifies the `ON JSON` clause and defines the schema, mapping JSON paths to RedisSearch field types like `GEOSHAPE`, `GEO`, `TEXT`, `NUMERIC`, and `TAG` for efficient querying and filtering.
SOURCE: https://github.com/redis/docs/blob/main/content/commands/ft.profile.md#_snippet_4

LANGUAGE: bash
CODE:
```
FT.CREATE idx:bicycle ON JSON PREFIX 1 bicycle: SCORE 1.0 SCHEMA $.pickup_zone AS pickup_zone GEOSHAPE $.store_location AS store_location GEO $.brand AS brand TEXT WEIGHT 1.0 $.model AS model TEXT WEIGHT 1.0 $.description AS description TEXT WEIGHT 1.0 $.price AS price NUMERIC $.condition AS condition TAG SEPARATOR ,
```

----------------------------------------

TITLE: Perform Vector Queries with RedisVL
DESCRIPTION: Demonstrates how to construct and execute complex vector queries against a RedisVL index. It combines tag, text, and numeric filters with a vector similarity search to retrieve relevant documents. The results are then printed in a readable format.
SOURCE: https://github.com/redis/docs/blob/main/content/integrate/redisvl/user_guide/hash_vs_json.md#_snippet_10

LANGUAGE: python
CODE:
```
from redisvl.query import VectorQuery
from redisvl.query.filter import Tag, Text, Num

t = (Tag("credit_score") == "high") & (Text("job") % "enginee*") & (Num("age") > 17)

v = VectorQuery(
    vector=[0.1, 0.1, 0.5],
    vector_field_name="user_embedding",
    return_fields=["user", "credit_score", "age", "job", "office_location"],
    filter_expression=t
)


results = hindex.query(v)
result_print(results)
```

----------------------------------------

TITLE: Connect to Remote Redis Database with Password
DESCRIPTION: Demonstrates how to connect to a remote Redis database using `redis-cli` by providing the hostname, port, and password directly as command-line arguments.
SOURCE: https://github.com/redis/docs/blob/main/content/operate/rs/references/cli-utilities/redis-cli/_index.md#_snippet_0

LANGUAGE: sh
CODE:
```
$ redis-cli -h <endpoint> -p <port> -a <password>
```

----------------------------------------

TITLE: Go: Embed and Add Data to Redis Vector Index
DESCRIPTION: This code demonstrates how to generate embeddings for text sentences using the `huggingfaceembedder` and then store the data, including the generated embeddings, into Redis. It uses `HSet` with a predefined prefix to automatically index the documents, converting float embeddings to a byte buffer.
SOURCE: https://github.com/redis/docs/blob/main/content/develop/clients/go/vecsearch.md#_snippet_7

LANGUAGE: go
CODE:
```
sentences := []string{
    "That is a very happy person",
    "That is a happy dog",
    "Today is a sunny day",
}

tags := []string{
    "persons", "pets", "weather",
}

embeddings, err := hf.Embed(ctx, sentences)

if err != nil {
    panic(err)
}

for i, emb := range embeddings {
    buffer := floatsToBytes(emb.ToFloat32())

    if err != nil {
        panic(err)
    }

    _, err = rdb.HSet(ctx,
        fmt.Sprintf("doc:%v", i),
        map[string]any{
            "content":   sentences[i],
            "genre":     tags[i],
            "embedding": buffer,
        },
    ).Result()

    if err != nil {
        panic(err)
    }
}
```

----------------------------------------

TITLE: Create Active-Active Redis Database using crdb-cli
DESCRIPTION: This `crdb-cli` command creates an Active-Active Redis database. It requires specifying the database name, memory size, encryption status, and details for at least two Redis Enterprise cluster instances, including FQDN, API URL, credentials, and replication endpoints. Additional `--instance` arguments can be added for more than two participating clusters.
SOURCE: https://github.com/redis/docs/blob/main/content/operate/kubernetes/7.8.4/active-active/create-aa-crdb-cli.md#_snippet_11

LANGUAGE: sh
CODE:
```
crdb-cli crdb create \
  --name <db-name> \
  --memory-size <mem-size> \
  --encryption yes \
  --instance fqdn=<rec-hostname-01>,url=https://<api-hostname-01>,username=<username-01>,password=<password-01>,replication_endpoint=<replication-endpoint-01>,replication_tls_sni=<replication-hostname-01> \
  --instance fqdn=<rec-hostname-02>,url=https://<api-hostname-02>,username=<username-02>,password=<password-02>,replication_endpoint=<replication-endpoint-02>,replication_tls_sni=<replication-hostname-02>
```

----------------------------------------

TITLE: API: Get Relevant Messages from History
DESCRIPTION: Searches the message history for information semantically related to a specified prompt. This method uses vector similarity search to find and return the top k most relevant previous prompts or responses to include as context for the next LLM call.
SOURCE: https://github.com/redis/docs/blob/main/content/integrate/redisvl/api/message_history.md#_snippet_1

LANGUAGE: APIDOC
CODE:
```
get_relevant(prompt, as_text=False, top_k=5, fall_back=False, session_tag=None, raw=False, distance_threshold=None)

Parameters:
  prompt (str): The message text to search for in message history.
  as_text (bool): Whether to return the prompts and responses as text or as JSON.
  top_k (int): The number of previous messages to return. Default is 5.
  session_tag (Optional[str]): Tag of the entries linked to a specific conversation session. Defaults to instance ULID.
  distance_threshold (Optional[float]): The threshold for semantic vector distance.
  fall_back (bool): Whether to drop back to recent conversation history if no relevant context is found.
  raw (bool): Whether to return the full Redis hash entry or just the message.

Returns:
  Union[List[str], List[Dict[str,str]]]: Either a list of strings, or a list of prompts and responses in JSON containing the most relevant.

Raises:
  ValueError: if top_k is not an integer greater or equal to 0.
```

----------------------------------------

TITLE: Redis Eviction Policies
DESCRIPTION: A comprehensive list of Redis eviction policies, detailing their names and descriptions. These policies dictate how Redis manages memory when the configured memory limit is reached, by determining which keys to remove to make space for new data.
SOURCE: https://github.com/redis/docs/blob/main/content/embeds/rs-observability.md#_snippet_2

LANGUAGE: APIDOC
CODE:
```
noeviction: New values aren’t saved when memory limit is reached. When a database uses replication, this applies to the primary database
allkeys-lru: Keeps most recently used keys; removes least recently used (LRU) keys
allkeys-lfu: Keeps frequently used keys; removes least frequently used (LFU) keys
volatile-lru: Removes least recently used keys with the expire field set to true.
volatile-lfu: Removes least frequently used keys with the expire field set to true.
allkeys-random: Randomly removes keys to make space for the new data added.
volatile-random: Randomly removes keys with expire field set to true.
volatile-ttl: Removes keys with expire field set to true and the shortest remaining time-to-live (TTL) value.
```

----------------------------------------

TITLE: Define RedisVL IndexSchema
DESCRIPTION: Examples of defining an `IndexSchema` for RedisVL, which maintains crucial index configuration and field definitions. The schema can be constructed from a Python dictionary or a YAML file, specifying fields like `user` (tag), `credit_score` (tag), `job` (text), `age` (numeric), and `user_embedding` (vector) with specific attributes.
SOURCE: https://github.com/redis/docs/blob/main/content/integrate/redisvl/user_guide/getting_started.md#_snippet_0

LANGUAGE: yaml
CODE:
```
version: '0.1.0'

index:
  name: user_simple
  prefix: user_simple_docs

fields:
    - name: user
      type: tag
    - name: credit_score
      type: tag
    - name: job
      type: text
    - name: age
      type: numeric
    - name: user_embedding
      type: vector
      attrs:
        algorithm: flat
        dims: 3
        distance_metric: cosine
        datatype: float32
```

LANGUAGE: python
CODE:
```
schema = {
    "index": {
        "name": "user_simple",
        "prefix": "user_simple_docs",
    },
    "fields": [
        {"name": "user", "type": "tag"},
        {"name": "credit_score", "type": "tag"},
        {"name": "job", "type": "text"},
        {"name": "age", "type": "numeric"},
        {
            "name": "user_embedding",
            "type": "vector",
            "attrs": {
                "dims": 3,
                "distance_metric": "cosine",
                "algorithm": "flat",
                "datatype": "float32"
            }
        }
    ]
}
```

----------------------------------------

TITLE: VSIM: Similarity Search with Scores and Result Limit
DESCRIPTION: This example shows how to use the VSIM command to include similarity scores and limit the number of returned results. It queries 'word_embeddings' for elements similar to 'apple', returning the top 3 results along with their respective similarity scores.
SOURCE: https://github.com/redis/docs/blob/main/content/commands/vsim.md#_snippet_1

LANGUAGE: shell
CODE:
```
VSIM word_embeddings ELE apple WITHSCORES COUNT 3
1) "apple"
2) "0.9998867657923256"
3) "apples"
4) "0.8598527610301971"
5) "pear"
6) "0.8226882219314575"
```

----------------------------------------

TITLE: Identify Redis Keys by Memory Usage with redis-cli
DESCRIPTION: This command connects to a Redis instance using `redis-cli` and reports the memory usage of keys. It helps in identifying keys with large memory footprints that might be contributing to latency issues. Replace placeholders with actual connection details.
SOURCE: https://github.com/redis/docs/blob/main/content/operate/rs/7.4/databases/connect/troubleshooting-guide.md#_snippet_23

LANGUAGE: sh
CODE:
```
redis-cli -h <endpoint> -p <port> -a <password> --memkeys
```

----------------------------------------

TITLE: Redis Search FT.CREATE Command API Reference
DESCRIPTION: This documentation details the `FT.CREATE` command in Redis Search, which is used to define and create a new search index. It covers all available arguments, their types, and their purpose, along with the full command syntax. The command allows specifying the data type of documents, key prefixes, filtering rules, language settings, scoring, and a detailed schema for indexed fields.
SOURCE: https://github.com/redis/docs/blob/main/content/commands/ft.create.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
Command: FT.CREATE
Description: Creates a RediSearch index with the given specification.
Since: 1.0.0
Complexity: O(K) at creation where K is the number of fields, O(N) if scanning the keyspace is triggered, where N is the number of keys in the keyspace

Arguments:
  index (string): The name of the index to create.
  [ON HASH | JSON] (data_type, optional): Specifies the data type of the documents to index.
    HASH: Index Redis Hash objects.
    JSON: Index RedisJSON objects.
  [PREFIX count prefix [prefix ...]] (prefix, optional): Filters the keyspace to index only keys matching the given prefixes.
    count (integer): Number of prefixes.
    prefix (string): One or more prefixes.
  [FILTER {filter}] (filter, optional): A filter expression that limits which documents are indexed.
  [LANGUAGE default_lang] (default_lang, optional): The default language for the index.
  [LANGUAGE_FIELD lang_attribute] (lang_attribute, optional): The attribute name for the document's language.
  [SCORE default_score] (default_score, optional): The default score for documents.
  [SCORE_FIELD score_attribute] (score_attribute, optional): The attribute name for the document's score.
  [PAYLOAD_FIELD payload_attribute] (payload_attribute, optional): The attribute name for the document's payload.
  [MAXTEXTFIELDS] (maxtextfields, optional): For backward compatibility, ignored.
  [TEMPORARY seconds] (seconds, optional): Creates a temporary index that expires after the given seconds.
  [NOOFFSETS] (nooffsets, optional): Does not store term offsets for text fields.
  [NOHL] (nohl, optional): Does not store term offsets for highlighting.
  [NOFIELDS] (nofields, optional): Does not store field names in the index.
  [NOFREQS] (nofreqs, optional): Does not store term frequencies in the index.
  [STOPWORDS count [stopword ...]] (stopwords, optional): Defines a custom list of stopwords.
    count (integer): Number of stopwords.
    stopword (string): One or more stopwords.
  [SKIPINITIALSCAN] (skipinitialscan, optional): Prevents the initial scan of the keyspace.
  SCHEMA (schema): Marks the beginning of the schema definition.
  field_name [AS alias] <TEXT | TAG | NUMERIC | GEO | VECTOR | GEOSHAPE> [WITHSUFFIXTRIE] [INDEXEMPTY] [SORTABLE [UNF]] [NOINDEX] (field, multiple): Defines a field in the index schema.
    field_name (string): The name of the field.
    [AS alias] (alias, optional): An alias for the field name.
    field_type (oneof): The type of the field.
      TEXT: Text field.
      TAG: Tag field.
      NUMERIC: Numeric field.
      GEO: Geo-location field.
      VECTOR: Vector field.
      GEOSHAPE: Geo-shape field.
    [WITHSUFFIXTRIE] (withsuffixtrie, optional): For TEXT fields, indexes all suffixes of the field.
    [INDEXEMPTY] (indexempty, optional): For TAG fields, indexes empty values.
    [SORTABLE [UNF]] (sortable, optional): Allows sorting by this field.
      UNF: Un-normalized form for sorting.
    [NOINDEX] (noindex, optional): Does not index this field.

Syntax:
  FT.CREATE index 
  [ON HASH | JSON] 
  [PREFIX count prefix [prefix ...]] 
  [FILTER {filter}]
  [LANGUAGE default_lang] 
  [LANGUAGE_FIELD lang_attribute] 
  [SCORE default_score] 
  [SCORE_FIELD score_attribute] 
  [PAYLOAD_FIELD payload_attribute] 
  [MAXTEXTFIELDS] 
  [TEMPORARY seconds] 
  [NOOFFSETS] 
  [NOHL] 
  [NOFIELDS] 
  [NOFREQS] 
  [STOPWORDS count [stopword ...]] 
  [SKIPINITIALSCAN]
  SCHEMA field_name [AS alias] TEXT | TAG | NUMERIC | GEO | VECTOR | GEOSHAPE [ SORTABLE [UNF]] 
  [NOINDEX] [ field_name [AS alias] TEXT | TAG | NUMERIC | GEO | VECTOR | GEOSHAPE [ SORTABLE [UNF]] [NOINDEX] ...]

```

----------------------------------------

TITLE: Define Redis Enterprise Active-Active Database Custom Resource (YAML)
DESCRIPTION: This YAML snippet defines a RedisEnterpriseActiveActiveDatabase (REAADB) custom resource. It specifies the database name, global configurations like memory size and shard count, and links to the participating Redis Enterprise Cluster (RERC) resources. The databaseSecretName should be replaced with a valid Kubernetes secret.
SOURCE: https://github.com/redis/docs/blob/main/content/operate/kubernetes/7.8.4/active-active/create-reaadb.md#_snippet_5

LANGUAGE: yaml
CODE:
```
apiVersion: app.redislabs.com/v1alpha1
kind: RedisEnterpriseActiveActiveDatabase
metadata:
  name: reaadb-boeing
spec:
  globalConfigurations:
    databaseSecretName: <my-secret>
    memorySize: 200MB
    shardCount: 3
  participatingClusters:
      - name: rerc-ohare
      - name: rerc-reagan
```

----------------------------------------

TITLE: Import necessary Python libraries for Redis vector search
DESCRIPTION: Imports necessary classes from `sentence_transformers` for embedding generation, `redis.commands.search` for defining and querying the Redis index, `redis.commands.json` for JSON path operations, `numpy` for numerical operations, and `redis` for connecting to Redis.
SOURCE: https://github.com/redis/docs/blob/main/content/develop/clients/redis-py/vecsearch.md#_snippet_1

LANGUAGE: python
CODE:
```
from sentence_transformers import SentenceTransformer
from redis.commands.search.query import Query
from redis.commands.search.field import TextField, TagField, VectorField
from redis.commands.search.indexDefinition import IndexDefinition, IndexType
from redis.commands.json.path import Path

import numpy as np
import redis
```

----------------------------------------

TITLE: Redis Server Metrics API Reference
DESCRIPTION: Detailed documentation for Redis server metrics, including their user-facing names, the internal metric names used for monitoring (e.g., in Prometheus), and a description of the data they represent. These metrics provide insights into memory usage, CPU activity, replication status, and overall server performance.
SOURCE: https://github.com/redis/docs/blob/main/content/embeds/rs-prometheus-metrics-transition-plan.md#_snippet_134

LANGUAGE: APIDOC
CODE:
```
Metric Name: redis_maxmemory
Internal Name: redis_server_maxmemory
Description: Current memory limit configured by redis_mgr according to database memory limits
```

LANGUAGE: APIDOC
CODE:
```
Metric Name: redis_mem_aof_buffer
Internal Name: redis_server_mem_aof_buffer
Description: Current size of AOF buffer
```

LANGUAGE: APIDOC
CODE:
```
Metric Name: redis_mem_clients_normal
Internal Name: redis_server_mem_clients_normal
Description: Current memory used for input and output buffers of non-replica clients
```

LANGUAGE: APIDOC
CODE:
```
Metric Name: redis_mem_clients_slaves
Internal Name: redis_server_mem_clients_slaves
Description: Current memory used for input and output buffers of replica clients
```

LANGUAGE: APIDOC
CODE:
```
Metric Name: redis_mem_fragmentation_ratio
Internal Name: redis_server_mem_fragmentation_ratio
Description: Memory fragmentation ratio (1.3 means 30% overhead)
```

LANGUAGE: APIDOC
CODE:
```
Metric Name: redis_mem_not_counted_for_evict
Internal Name: redis_server_mem_not_counted_for_evict
Description: Portion of used_memory (in bytes) that's not counted for eviction and OOM error
```

LANGUAGE: APIDOC
CODE:
```
Metric Name: redis_mem_replication_backlog
Internal Name: redis_server_mem_replication_backlog
Description: Size of replication backlog
```

LANGUAGE: APIDOC
CODE:
```
Metric Name: redis_module_fork_in_progress
Internal Name: redis_server_module_fork_in_progress
Description: A binary value that indicates if there is an active fork spawned by a module (1) or not (0)
```

LANGUAGE: APIDOC
CODE:
```
Metric Name: redis_process_cpu_system_seconds_total
Internal Name: namedprocess_namegroup_cpu_seconds_total{mode="system"}
Description: Shard process system CPU time spent in seconds
```

LANGUAGE: APIDOC
CODE:
```
Metric Name: redis_process_cpu_usage_percent
Internal Name: namedprocess_namegroup_cpu_seconds_total{mode=~"system\|user"}
Description: Shard process CPU usage percentage
```

LANGUAGE: APIDOC
CODE:
```
Metric Name: redis_process_cpu_user_seconds_total
Internal Name: namedprocess_namegroup_cpu_seconds_total{mode="user"}
Description: Shard user CPU time spent in seconds
```

LANGUAGE: APIDOC
CODE:
```
Metric Name: redis_process_main_thread_cpu_system_seconds_total
Internal Name: namedprocess_namegroup_thread_cpu_seconds_total{mode="system",threadname="redis-server"}
Description: Shard main thread system CPU time spent in seconds
```

LANGUAGE: APIDOC
CODE:
```
Metric Name: redis_process_main_thread_cpu_user_seconds_total
Internal Name: namedprocess_namegroup_thread_cpu_seconds_total{mode="user",threadname="redis-server"}
Description: Shard main thread user CPU time spent in seconds
```

LANGUAGE: APIDOC
CODE:
```
Metric Name: redis_process_max_fds
Internal Name: max(namedprocess_namegroup_open_filedesc)
Description: Shard maximum number of open file descriptors
```

LANGUAGE: APIDOC
CODE:
```
Metric Name: redis_process_open_fds
Internal Name: namedprocess_namegroup_open_filedesc
Description: Shard number of open file descriptors
```

LANGUAGE: APIDOC
CODE:
```
Metric Name: redis_process_resident_memory_bytes
Internal Name: namedprocess_namegroup_memory_bytes{memtype="resident"}
Description: Shard resident memory size in bytes
```

LANGUAGE: APIDOC
CODE:
```
Metric Name: redis_process_start_time_seconds
Internal Name: namedprocess_namegroup_oldest_start_time_seconds
Description: Shard start time of the process since unix epoch in seconds
```

LANGUAGE: APIDOC
CODE:
```
Metric Name: redis_process_virtual_memory_bytes
Internal Name: namedprocess_namegroup_memory_bytes{memtype="virtual"}
Description: Shard virtual memory in bytes
```

LANGUAGE: APIDOC
CODE:
```
Metric Name: redis_rdb_bgsave_in_progress
Internal Name: redis_server_rdb_bgsave_in_progress
Description: Indication if bgsave is currently in progress
```

LANGUAGE: APIDOC
CODE:
```
Metric Name: redis_rdb_last_cow_size
Internal Name: redis_server_rdb_last_cow_size
Description: Last bgsave (or SYNC fork) used CopyOnWrite memory
```

LANGUAGE: APIDOC
CODE:
```
Metric Name: redis_rdb_saves
Internal Name: redis_server_rdb_saves
Description: Total count of bgsaves since the process was restarted (including replica fullsync and persistence)
```

LANGUAGE: APIDOC
CODE:
```
Metric Name: redis_repl_touch_bytes
Internal Name: redis_server_repl_touch_bytes
Description: Number of bytes sent to replicas as TOUCH commands by the shard as a result of a READ command that was processed; calculate the throughput for a time period by comparing the value at different times
```

LANGUAGE: APIDOC
CODE:
```
Metric Name: redis_total_commands_processed
Internal Name: redis_server_total_commands_processed
Description: Number of commands processed by the shard; calculate the number of commands for a time period by comparing the value at different times
```

----------------------------------------

TITLE: Redis CLIENT TRACKING Command Reference
DESCRIPTION: Comprehensive documentation for the Redis CLIENT TRACKING command, detailing its syntax, arguments, and their specific behaviors for managing server-assisted client-side caching.
SOURCE: https://github.com/redis/docs/blob/main/content/commands/client-tracking.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
CLIENT TRACKING Command:
  Description: Controls server-assisted client-side caching for the connection.
  Complexity: O(1). Some options may introduce additional complexity.
  Since: 6.0.0
  Syntax:
    CLIENT TRACKING <ON | OFF> [REDIRECT_client-id] [PREFIX_prefix [PREFIX prefix ...]] [BCAST] [OPTIN] [OPTOUT] [NOLOOP]
  Arguments:
    - name: status
      type: oneof
      description: Controls whether tracking is enabled or disabled for the current connection.
      values:
        - ON
        - OFF
    - name: client-id
      type: integer
      optional: true
      token: REDIRECT
      description: Specifies the ID of an existing connection to which invalidation messages should be redirected. If the redirected connection terminates, RESP3 clients with tracking enabled will receive 'tracking-redir-broken' push messages.
    - name: prefix
      type: string
      multiple: true
      optional: true
      token: PREFIX
      description: Registers a key prefix for broadcasting mode. Notifications will only be provided for keys starting with this string. This option can be specified multiple times. If broadcasting is enabled without this option, notifications for every key will be sent. Deleting a single prefix is not possible; all prefixes must be cleared by disabling and re-enabling tracking. Using this option adds O(N^2) complexity, where N is the total number of tracked prefixes.
    - name: bcast
      type: pure-token
      optional: true
      token: BCAST
      description: Enables tracking in broadcasting mode. In this mode, invalidation messages are reported for all specified prefixes, regardless of keys requested by the connection. Without broadcasting, Redis tracks keys fetched by read-only commands and reports invalidations only for those keys.
    - name: optin
      type: pure-token
      optional: true
      token: OPTIN
      description: When broadcasting is NOT active, normally keys in read-only commands are not tracked, unless they are called immediately after a CLIENT CACHING yes command.
    - name: optout
      type: pure-token
      optional: true
      token: OPTOUT
      description: When broadcasting is NOT active, normally keys in read-only commands are tracked, unless they are called immediately after a CLIENT CACHING no command.
    - name: noloop
      type: pure-token
      optional: true
      token: NOLOOP
      description: Prevents sending notifications about keys modified by the current connection itself.
```

----------------------------------------

TITLE: Redis Configuration: memory_size
DESCRIPTION: Database memory limit (0 is unlimited), expressed in bytes.
SOURCE: https://github.com/redis/docs/blob/main/content/operate/rs/references/rest-api/objects/bdb/_index.md#_snippet_42

LANGUAGE: APIDOC
CODE:
```
memory_size: integer (default: 0)
```

----------------------------------------

TITLE: Create Kubernetes Secret for Target Database SSL Certificates
DESCRIPTION: This command creates or updates a Kubernetes generic secret named `target-db-ssl` in the `rdi` namespace. It stores certificate files (CA, client certificate, and client key) from specified local file paths. The command uses `dry-run` to output YAML, which is then piped to `kubectl apply` for application.
SOURCE: https://github.com/redis/docs/blob/main/content/integrate/redis-data-integration/data-pipelines/deploy.md#_snippet_11

LANGUAGE: bash
CODE:
```
kubectl create secret generic target-db-ssl --namespace=rdi \
--from-file=ca.crt=/path/to/myca.crt \
--from-file=client.crt=/path/to/myclient.crt \
--from-file=client.key=/path/to/myclient.key \
--save-config --dry-run=client -o yaml | kubectl apply -f -
```

----------------------------------------

TITLE: Python: Store Multiple Embeddings
DESCRIPTION: Example demonstrating how to use `cache.mset` to store a list of embedding dictionaries, each containing text, model name, embedding vector, and optional metadata, into the cache.
SOURCE: https://github.com/redis/docs/blob/main/content/integrate/redisvl/api/cache.md#_snippet_73

LANGUAGE: python
CODE:
```
# Store multiple embeddings
keys = cache.mset([
    {
        "text": "What is ML?",
        "model_name": "text-embedding-ada-002",
        "embedding": [0.1, 0.2, 0.3],
        "metadata": {"source": "user"}
    },
    {
        "text": "What is AI?",
        "model_name": "text-embedding-ada-002",
        "embedding": [0.4, 0.5, 0.6],
        "metadata": {"source": "docs"}
    }
])
```

----------------------------------------

TITLE: Connect to Redis database with Python redis-py client
DESCRIPTION: Demonstrates how to connect to a Redis database from a Python application using the `redis-py` client library. It includes steps to create the file, paste the code, and run the application. Replace `<host>` and `<port>` with your database's endpoint details.
SOURCE: https://github.com/redis/docs/blob/main/content/operate/rs/7.4/databases/connect/test-client-connectivity.md#_snippet_1

LANGUAGE: sh
CODE:
```
vi redis_test.py
```

LANGUAGE: python
CODE:
```
import redis

# Connect to the database
r = redis.Redis(host='<host>', port=<port>)

# Store a key
print("set key1 123")
print(r.set('key1', '123'))

# Retrieve the key
print("get key1")
print(r.get('key1'))
```

LANGUAGE: sh
CODE:
```
python redis_test.py
```

----------------------------------------

TITLE: Monitor Redis Commands With Client-Side Caching via redis-cli
DESCRIPTION: This "redis-cli MONITOR" output shows server-side activity when client-side caching *is* enabled. Only the first "GET" command reaches the server; the second "GET" command is satisfied by the client-side cache and therefore does not appear in the server's "MONITOR" output, illustrating the caching effect.
SOURCE: https://github.com/redis/docs/blob/main/content/develop/clients/jedis/connect.md#_snippet_9

LANGUAGE: CLI
CODE:
```
1723110248.712663 [...] "SET" "city" "New York"
1723110248.713607 [...] "GET" "city"
```

----------------------------------------

TITLE: Redis ACL Rule for Replica User
DESCRIPTION: Defines the minimal set of Redis commands required for a replica user to synchronize and communicate with the master instance. This rule grants permissions for replication-specific commands like PSYNC, REPLCONF, and PING, ensuring proper data synchronization.
SOURCE: https://github.com/redis/docs/blob/main/content/operate/oss_and_stack/management/security/acl.md#_snippet_42

LANGUAGE: Redis ACL
CODE:
```
ACL setuser replica-user on >somepassword +psync +replconf +ping
```

----------------------------------------

TITLE: Connect and Test Redis Access with Python
DESCRIPTION: This Python snippet uses `redis-py` to connect to a Redis database over SSL and fetch server information. Replace `<my-db-hostname>` and `<file-path>` with your specific connection details and CA certificate path.
SOURCE: https://github.com/redis/docs/blob/main/content/operate/kubernetes/7.8.4/networking/ingress.md#_snippet_8

LANGUAGE: python
CODE:
```
import redis

r = redis.StrictRedis(host='<my-db-hostname>',
              port=443, db=0, ssl=True,
              ssl_ca_certs='/<file-path>/proxy_cert.pem')


print(r.info())
```

----------------------------------------

TITLE: Implement a Redis Stack (LIFO)
DESCRIPTION: Demonstrates how to use Redis lists to implement a last-in, first-out (LIFO) stack using LPUSH to add elements to the head and LPOP to remove from the head.
SOURCE: https://github.com/redis/docs/blob/main/content/develop/data-types/lists.md#_snippet_3

LANGUAGE: Redis CLI
CODE:
```
LPUSH bikes:repairs bike:1
(integer) 1
LPUSH bikes:repairs bike:2
(integer) 2
LPOP bikes:repairs
"bike:2"
LPOP bikes:repairs
"bike:1"
```

----------------------------------------

TITLE: Search Redis index for items by name
DESCRIPTION: Demonstrates how to use FT.SEARCH to find JSON documents where the 'name' attribute contains a specific word, like 'earbuds'.
SOURCE: https://github.com/redis/docs/blob/main/content/develop/interact/search-and-query/indexing/_index.md#_snippet_5

LANGUAGE: SQL
CODE:
```
127.0.0.1:6379> FT.SEARCH itemIdx '@name:(earbuds)'
```

----------------------------------------

TITLE: Processors Configuration Properties
DESCRIPTION: Defines various settings for data processing, including retry intervals, batch sizes, deduplication, error handling, and target Redis data types.
SOURCE: https://github.com/redis/docs/blob/main/content/integrate/redis-data-integration/reference/config-yaml-reference.md#_snippet_2

LANGUAGE: APIDOC
CODE:
```
Property: on_failed_retry_interval (Retry interval on failure)
  Type: integer, string
  Description: Number of seconds to wait before retrying a failed operation
  Default: 5
  Pattern: ^\${.*}$
  Minimum: 1

Property: read_batch_size
  Type: integer, string
  Description: Maximum number of records to process in a single batch
  Default: 2000
  Pattern: ^\${.*}$
  Minimum: 1

Property: debezium_lob_encoded_placeholder (Debezium LOB placeholder)
  Type: string
  Description: Placeholder value for LOB fields in Debezium
  Default: "__debezium_unavailable_value"

Property: dedup (Enable deduplication)
  Type: boolean
  Description: Enable the deduplication mechanism to handle duplicate records
  Default: false

Property: dedup_max_size (Deduplication set size)
  Type: integer
  Description: Maximum number of entries to store in the deduplication set
  Default: 1024
  Minimum: 1

Property: dedup_strategy (Deduplication strategy)
  Type: string
  Description: (DEPRECATED)\nProperty 'dedup_strategy' is now deprecated. The only supported strategy is 'ignore'. Please remove from the configuration.
  Default: "ignore"
  Enum: "reject", "ignore"

Property: duration (Batch duration limit)
  Type: integer, string
  Description: Maximum time in milliseconds to wait for a batch to fill before processing
  Default: 100
  Pattern: ^\${.*}$
  Minimum: 1

Property: write_batch_size
  Type: integer, string
  Description: Maximum number of records to write to target Redis database in a single batch
  Default: 200
  Pattern: ^\${.*}$
  Minimum: 1

Property: error_handling (Error handling strategy)
  Type: string
  Description: Strategy for handling errors: ignore to skip errors, dlq to store rejected messages in dead letter queue
  Default: "dlq"
  Pattern: ^\${.*}$|ignore|dlq

Property: dlq_max_messages (DLQ message limit)
  Type: integer, string
  Description: Maximum number of messages to store in dead letter queue per stream
  Default: 1000
  Pattern: ^\${.*}$
  Minimum: 1

Property: target_data_type (Target Redis data type)
  Type: string
  Description: Data type to use in Redis: hash for Redis Hash, json for RedisJSON (requires RedisJSON module)
  Default: "hash"
  Pattern: ^\${.*}$|hash|json

Property: json_update_strategy
  Type: string
  Description: (DEPRECATED)\nProperty 'json_update_strategy' will be deprecated in future releases. Use 'on_update' job-level property to define the json update strategy.
  Default: "replace"
  Pattern: ^\${.*}$|replace|merge
```

----------------------------------------

TITLE: Add JSON Data to Redis
DESCRIPTION: Iterate through the sample user data and add each user as a JSON object to Redis, using keys with the `user:` prefix to ensure automatic indexing.
SOURCE: https://github.com/redis/docs/blob/main/content/develop/clients/redis-py/queryjson.md#_snippet_4

LANGUAGE: Python
CODE:
```
for i, user in enumerate(users):
    key = f"user:{i}"
    r.json().set(key, Path.root(), user)
    print(f"Added {key}: {user}")
```

----------------------------------------

TITLE: API Reference: async amset
DESCRIPTION: Asynchronously stores multiple embeddings in a batch operation. Each item in the input list should be a dictionary with specific fields.
SOURCE: https://github.com/redis/docs/blob/main/content/integrate/redisvl/api/cache.md#_snippet_50

LANGUAGE: APIDOC
CODE:
```
async amset(items, ttl=None)
  items: List[Dict[str, Any]] - List of dictionaries, each containing:
    - 'text': The text input that was embedded
    - 'model_name': The name of the embedding model
    - 'embedding': The embedding vector
    - 'metadata': Optional metadata to store with the embedding
  ttl: int | None - Optional TTL override for these entries.
  Returns: List[str] - List of Redis keys where the embeddings were stored.
```

----------------------------------------

TITLE: Configure Prometheus to pull metrics from Redis Cloud
DESCRIPTION: This YAML configuration snippet for Prometheus defines a job to scrape metrics from Redis Cloud. It specifies the scrape interval, timeout, metrics path, scheme (HTTPS), and targets the Redis Cloud Prometheus port (8070) using the cluster's hostname. Ensure a VPC is peered between the Redis Cloud cluster and the Prometheus host.
SOURCE: https://github.com/redis/docs/blob/main/content/integrate/new-relic-with-redis-cloud/_index.md#_snippet_0

LANGUAGE: yaml
CODE:
```
  - job_name: "redis-cloud"
    scrape_interval: 30s
    scrape_timeout: 30s
    metrics_path: /
    scheme: https
    tls_config:
      insecure_skip_verify: true
    static_configs:
      # The default Redis Cloud Prometheus port is 8070. 
      # Replace REDIS_CLOUD_HOST with your cluster's hostname.
      - targets: ["REDIS_CLOUD_HOST:8070"]
```

----------------------------------------

TITLE: Connect to Redis in Docker Container with redis-cli
DESCRIPTION: This command shows how to execute `redis-cli` commands against a Redis database running inside a Docker container. It uses `docker exec` to run the utility within the specified container.
SOURCE: https://github.com/redis/docs/blob/main/content/operate/rs/7.4/references/cli-utilities/redis-cli/_index.md#_snippet_4

LANGUAGE: sh
CODE:
```
$ docker exec -it <Redis container name> redis-cli -p <port>
```

----------------------------------------

TITLE: SQL Server Data Type to Redis Conversion Details
DESCRIPTION: Provides a detailed mapping of SQL Server data types to their corresponding Redis representations, including specific conversion rules, value ranges, and examples influenced by Debezium configurations.
SOURCE: https://github.com/redis/docs/blob/main/content/integrate/write-behind/reference/data-types-conversion.md#_snippet_64

LANGUAGE: APIDOC
CODE:
```
nvarchar:
  Redis Type: string
  Description: variable-size string data, Unicode data type that can store Unicode characters
  Example/Notes: N/A

numeric:
  Redis Type: string
  Range: 10^38 +1 to 10^38
  Example/Notes: When Debezium configuration parameter `time.precision.mode = 'connect'` and `decimal.handling.mode = 'precision'`, the value `1.00E +33` will be converted by Debezium to the binary string `'SztMqFqGw1MAAAAAAAAAAA=='` and will be saved in Redis target database as the string `'1000000000000000000000000000000000'`

rowversion:
  Redis Type: string
  Description: data type that exposes automatically generated, unique binary numbers within a database. rowversion is generally used as a mechanism for version-stamping table rows.
  Example/Notes: 0x00000000000007D0

smalldatetime:
  Redis Type: string
  Description: represents the number of milliseconds past the epoch, and does not include timezone information.
  Example/Notes: `'2018-06-20 15:13:16'` will be converted by Debezium to `1529507580000` ms past the epoch and will be saved in Write-behind as the string `'1529507580000'`. Number of seconds: 16 will be not be included in the convertion and will not be saved in Redis target database

smallmoney:
  Redis Type: string
  Range: -214,748.3648 to 214,748.3647
  Example/Notes: When Debezium configuration parameter `decimal.handling.mode = 'string'` the value `-214748.3648` will be converted by Debezium to the string `'-214748.3648'` and will be saved in Redis target database as `'-214748.3648'`

Spatial Geometry Types:
  Support: not supported
  Example/Notes: N/A

Spatial Geography Types:
  Support: not supported
  Example/Notes: N/A

table:
  Support: not supported
  Example/Notes: N/A

text:
  Redis Type: Variable-length Unicode data
  Example/Notes: N/A
```

----------------------------------------

TITLE: Access Full Chat History Property
DESCRIPTION: Provides access to the full chat history stored in the session memory.
SOURCE: https://github.com/redis/docs/blob/main/content/integrate/redisvl/api/session_manager.md#_snippet_3

LANGUAGE: APIDOC
CODE:
```
property messages: List[str] | List[Dict[str, str]]
Returns: The full chat history.
```

----------------------------------------

TITLE: Find Large Redis Keys with redis-cli
DESCRIPTION: This command uses `redis-cli` to connect to a Redis instance and identify the largest keys by data type. It's useful for pinpointing keys that consume significant memory and could be a source of performance bottlenecks. Replace placeholders with actual connection details.
SOURCE: https://github.com/redis/docs/blob/main/content/operate/rs/7.4/databases/connect/troubleshooting-guide.md#_snippet_24

LANGUAGE: sh
CODE:
```
redis-cli -h <endpoint> -p <port> -a <password> --bigkeys
```

----------------------------------------

TITLE: Add JSON Data to Redis with Automatic Indexing (Node.js)
DESCRIPTION: Adds the previously defined user data as JSON objects to Redis using `client.json.set`. Keys are prefixed with `user:` to ensure automatic indexing. The operations are pipelined for efficiency.
SOURCE: https://github.com/redis/docs/blob/main/content/develop/clients/nodejs/queryjson.md#_snippet_4

LANGUAGE: js
CODE:
```
const [user1Reply, user2Reply, user3Reply] = await Promise.all([
    client.json.set('user:1', '$', user1),
    client.json.set('user:2', '$', user2),
    client.json.set('user:3', '$', user3)
]);
```

----------------------------------------

TITLE: Store LLM Prompt and Response Pairs
DESCRIPTION: For typical LLM prompt-response flows, the `store()` convenience function simplifies adding conversational turns. This example demonstrates how to use `store()` to add a user prompt and the corresponding LLM response as a pair, then retrieve the updated history.
SOURCE: https://github.com/redis/docs/blob/main/content/integrate/redisvl/user_guide/message_history.md#_snippet_3

LANGUAGE: python
CODE:
```
prompt = "what is the size of England compared to Portugal?"
response = "England is larger in land area than Portal by about 15000 square miles."
chat_history.store(prompt, response)

context = chat_history.get_recent(top_k=6)
for message in context:
    print(message)
```

----------------------------------------

TITLE: Push Multiple Elements to Redis Lists (Variadic)
DESCRIPTION: Illustrates the use of variadic LPUSH and RPUSH commands, allowing multiple elements to be added to a Redis list in a single call. This snippet demonstrates how to efficiently populate a list and then verifies the list content using LRANGE.
SOURCE: https://github.com/redis/docs/blob/main/content/develop/data-types/lists.md#_snippet_8

LANGUAGE: Redis CLI
CODE:
```
> RPUSH bikes:repairs bike:1 bike:2 bike:3
(integer) 3
> LPUSH bikes:repairs bike:important_bike bike:very_important_bike
> LRANGE bikes:repairs 0 -1
1) "bike:very_important_bike"
2) "bike:important_bike"
3) "bike:1"
4) "bike:2"
5) "bike:3"
```

----------------------------------------

TITLE: Query People by Age Range using Python
DESCRIPTION: Demonstrates how to use the `Person.find` class method to filter results based on a minimum and maximum age. The snippet also shows how to sort the retrieved `Person` objects by their age field before retrieving all matches.
SOURCE: https://github.com/redis/docs/blob/main/content/integrate/redisom-for-python/_index.md#_snippet_25

LANGUAGE: python
CODE:
```
  people = Person.find(
      (Person.age >= min_age) &
      (Person.age <= max_age)
  ).sort_by("age").all()
```

----------------------------------------

TITLE: Store and retrieve a dictionary (hash) in Redis with Python
DESCRIPTION: Shows how to store a Python dictionary as a Redis hash using `r.hset()` with a mapping and retrieve all fields and values using `r.hgetall()`. Responses are decoded into a Python dictionary.
SOURCE: https://github.com/redis/docs/blob/main/content/develop/clients/redis-py/connect.md#_snippet_2

LANGUAGE: python
CODE:
```
r.hset('user-session:123', mapping={
    'name': 'John',
    "surname": 'Smith',
    "company": 'Redis',
    "age": 29
})
# True

r.hgetall('user-session:123')
# {'surname': 'Smith', 'name': 'John', 'company': 'Redis', 'age': '29'}
```

----------------------------------------

TITLE: Pruning Incorrect Information from Semantic Message History
DESCRIPTION: Demonstrates how to store a message, identify an incorrect entry by its key, and then remove it from the `SemanticMessageHistory` to prevent passing erroneous context to the LLM.
SOURCE: https://github.com/redis/docs/blob/main/content/integrate/redisvl/user_guide/message_history.md#_snippet_9

LANGUAGE: python
CODE:
```
semantic_history.store(
    prompt="what is the smallest country in Europe?",
    response="Monaco is the smallest country in Europe at 0.78 square miles." # Incorrect. Vatican City is the smallest country in Europe
    )

# get the key of the incorrect message
context = semantic_history.get_recent(top_k=1, raw=True)
bad_key = context[0]['entry_id']
semantic_history.drop(bad_key)

corrected_context = semantic_history.get_recent()
for message in corrected_context:
    print(message)
```

----------------------------------------

TITLE: Generate Embeddings with RedisVL Vectorizer
DESCRIPTION: Demonstrates how to generate single and batch embeddings using a RedisVL vectorizer, highlighting cache retrieval for repeated calls to improve performance.
SOURCE: https://github.com/redis/docs/blob/main/content/integrate/redisvl/api/vectorizer.md#_snippet_19

LANGUAGE: python
CODE:
```
embedding2 = vectorizer.embed("Hello, world!")

embeddings = vectorizer.embed_many(["Hello", "World"], batch_size=2)
```

----------------------------------------

TITLE: Connect to Redis database using redis-cli inside Docker
DESCRIPTION: This command uses `docker exec` to start an interactive `redis-cli` session directly within the running Redis Enterprise Software container. This allows users to interact with their Redis database using the command-line interface from within the same Docker network.
SOURCE: https://github.com/redis/docs/blob/main/content/operate/rs/7.8/installing-upgrading/quickstarts/docker-quickstart.md#_snippet_1

LANGUAGE: sh
CODE:
```
$ docker exec -it redis-cli -h redis-12000.cluster.local -p 12000
```

----------------------------------------

TITLE: Visualize Redis Latency Distribution with redis-cli --latency-dist
DESCRIPTION: The `--latency-dist` option provides an advanced visualization of latency distribution using color terminals. It displays a spectrum of latencies with different ASCII characters indicating various latency figures and percentages of samples. This mode requires a color terminal for proper output.
SOURCE: https://github.com/redis/docs/blob/main/content/develop/tools/cli.md#_snippet_39

LANGUAGE: shell
CODE:
```
$ redis-cli --latency-dist
(output not displayed, requires a color terminal, try it!)
```

----------------------------------------

TITLE: Explicitly Cache a Key in Redis Opt-in Mode
DESCRIPTION: This sequence demonstrates how to explicitly mark a key for caching in 'opt-in' mode. The `CLIENT CACHING YES` command affects only the immediately following command (or a transaction/script), indicating that its keys should be tracked and cached.
SOURCE: https://github.com/redis/docs/blob/main/content/develop/reference/client-side-caching.md#_snippet_6

LANGUAGE: Redis
CODE:
```
CLIENT CACHING YES
+OK
GET foo
"bar"
```

----------------------------------------

TITLE: Check Redis Software Database Availability for Monitoring
DESCRIPTION: This API endpoint allows monitoring tools to verify if a Redis Software database is available for read/write operations and can respond to client queries. If the OSS Cluster API is enabled, it verifies all database endpoints; otherwise, it checks for at least one available endpoint. Returns 200 OK if available, or an error status with error_code and description if unavailable.
SOURCE: https://github.com/redis/docs/blob/main/content/operate/rs/7.8/monitoring/db-availability.md#_snippet_0

LANGUAGE: sh
CODE:
```
GET /v1/bdbs/<database_id>/availability
```

----------------------------------------

TITLE: Define Kubernetes Secret for database password
DESCRIPTION: This YAML snippet defines a Kubernetes Secret resource named `my-db-secret` of type `Opaque`. It contains a base64-encoded password, intended for use as a database secret within the REAADB global configurations.
SOURCE: https://github.com/redis/docs/blob/main/content/operate/kubernetes/7.4.6/active-active/global-config.md#_snippet_3

LANGUAGE: yaml
CODE:
```
apiVersion: v1
 data:
  password: bXktcGFzcw
kind: Secret
metadata:
  name: my-db-secret
type: Opaque
```

----------------------------------------

TITLE: Perform CRUD Operations with Spring Data Redis Repository
DESCRIPTION: This Java `CommandLineRunner` bean demonstrates basic CRUD operations using the `PeopleRepository`. It clears existing data, creates a `Person` object with associated `Address` and `Point` data, and then saves it to Redis upon application startup, showcasing object mapping.
SOURCE: https://github.com/redis/docs/blob/main/content/integrate/redisom-for-java/_index.md#_snippet_11

LANGUAGE: java
CODE:
```
public class SkeletonApplication {

 @Bean
 CommandLineRunner loadTestData(PeopleRepository repo) {
   return args -> {
     repo.deleteAll();

     String thorSays = "The Rabbit Is Correct, And Clearly The Smartest One Among You.";

     // Serendipity, 248 Seven Mile Beach Rd, Broken Head NSW 2481, Australia
     Address thorsAddress = Address.of("248", "Seven Mile Beach Rd", "Broken Head", "NSW", "2481", "Australia");

     Person thor = Person.of("Chris", "Hemsworth", 38, thorSays, new Point(153.616667, -28.716667), thorsAddress, Set.of("hammer", "biceps", "hair", "heart"));

     repo.save(thor);
   };
 }

```

----------------------------------------

TITLE: Redis List: Command Behavior on Non-existent Keys
DESCRIPTION: Demonstrates that read-only commands like LLEN and element-removing commands like LPOP behave consistently as if the key holds an empty list when the key does not exist. DEL is used to ensure the key is absent before the commands are executed, showing their predictable output (0 for length, nil for pop).
SOURCE: https://github.com/redis/docs/blob/main/content/develop/data-types/lists.md#_snippet_15

LANGUAGE: Redis
CODE:
```
> DEL bikes:repairs
(integer) 0
> LLEN bikes:repairs
(integer) 0
> LPOP bikes:repairs
(nil)
```

----------------------------------------

TITLE: Redis Eviction Policies Overview
DESCRIPTION: A list of available eviction policies and their descriptions, detailing how Redis handles memory limits when a database reaches its capacity.
SOURCE: https://github.com/redis/docs/blob/main/content/operate/rs/7.8/databases/memory-performance/eviction-policy.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
Eviction Policies:
  - Policy: noeviction
    Description: New values aren't saved when memory limit is reached.
    When a database uses replication, this applies to the primary database.
  - Policy: allkeys-lru
    Description: Keeps most recently used keys; removes least recently used (LRU) keys.
  - Policy: allkeys-lfu
    Description: Keeps frequently used keys; removes least frequently used (LFU) keys.
  - Policy: allkeys-random
    Description: Randomly removes keys.
  - Policy: volatile-lru
    Description: Removes least recently used keys with `expire` field set to true.
  - Policy: volatile-lfu
    Description: Removes least frequently used keys with `expire` field set to true.
  - Policy: volatile-random
    Description: Randomly removes keys with `expire` field set to true.
  - Policy: volatile-ttl
    Description: Removes least frequently used keys with `expire` field set to true and the shortest remaining time-to-live (TTL) value.
```

----------------------------------------

TITLE: Redis Protocol: Basic SET Commands
DESCRIPTION: Example of simple SET commands formatted for the Redis protocol, showing key-value pairs ready for bulk import.
SOURCE: https://github.com/redis/docs/blob/main/content/develop/use/patterns/bulk-loading.md#_snippet_0

LANGUAGE: Redis Protocol
CODE:
```
SET Key0 Value0
SET Key1 Value1
...
SET KeyN ValueN
```

----------------------------------------

TITLE: Perform Multi-Key Operations with Redis Hash Tags
DESCRIPTION: This snippet demonstrates a valid multi-key operation using `MSET` with hash tags. By enclosing a common part of the key in curly braces (e.g., `{user:1000}`), all keys are guaranteed to hash to the same slot, allowing multi-key commands to execute successfully in a Redis Cluster.
SOURCE: https://github.com/redis/docs/blob/main/content/operate/oss_and_stack/reference/cluster-spec.md#_snippet_14

LANGUAGE: redis-cli
CODE:
```
MSET {user:1000}.name Angela {user:1000}.surname White
```

----------------------------------------

TITLE: Test Redis connection with Set and Get operations in Go
DESCRIPTION: Illustrates how to test an established Redis connection by performing a simple `SET` operation to store a string and a `GET` operation to retrieve it. It uses `context.Background()` for the operation context.
SOURCE: https://github.com/redis/docs/blob/main/content/develop/clients/go/connect.md#_snippet_2

LANGUAGE: go
CODE:
```
ctx := context.Background()

err := client.Set(ctx, "foo", "bar", 0).Err()
if err != nil {
    panic(err)
}

val, err := client.Get(ctx, "foo").Result()
if err != nil {
    panic(err)
}
fmt.Println("foo", val)
```

----------------------------------------

TITLE: Redis MEMORY USAGE Command Definition
DESCRIPTION: Defines the Redis MEMORY USAGE command, including its arguments, arity, complexity, and syntax. It estimates the memory usage of a key, with an optional SAMPLES argument for nested data types. The command is read-only and available since Redis 4.0.0.
SOURCE: https://github.com/redis/docs/blob/main/content/commands/memory-usage.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
Command: MEMORY USAGE
Description: Estimates the memory usage of a key.
Summary: Estimates the memory usage of a key.
Syntax: MEMORY USAGE key [SAMPLES_count]
Arguments:
  - name: key
    type: key
    description: The key to estimate memory usage for.
  - name: count
    type: integer
    optional: true
    token: SAMPLES
    description: Number of sampled nested values for nested data types. Default is 5. Use 0 to sample all.
Arity: -3
Complexity: O(N) where N is the number of samples.
Since: 4.0.0
Command Flags: readonly
Group: server
ACL Categories: @read, @slow
```

----------------------------------------

TITLE: Add Single and Multiple Messages to LLM Session
DESCRIPTION: Store messages in the session manager, aligning with common LLM APIs that use 'role' and 'content' fields. Supported roles include 'system', 'user', and 'llm'. Messages can be added one at a time using `add_message` or in batches using `add_messages`.
SOURCE: https://github.com/redis/docs/blob/main/content/integrate/redisvl/user_guide/session_manager.md#_snippet_1

LANGUAGE: python
CODE:
```
chat_session.add_message({"role":"system", "content":"You are a helpful geography tutor, giving simple and short answers to questions about Europen countries."})
chat_session.add_messages([
    {"role":"user", "content":"What is the capital of France?"},
    {"role":"llm", "content":"The capital is Paris."},
    {"role":"user", "content":"And what is the capital of Spain?"},
    {"role":"llm", "content":"The capital is Madrid."},
    {"role":"user", "content":"What is the population of Great Britain?"},
    {"role":"llm", "content":"As of 2023 the population of Great Britain is approximately 67 million people."}]
    )
```

----------------------------------------

TITLE: Measure Intrinsic System Latency with redis-cli
DESCRIPTION: Demonstrates how to use `redis-cli --intrinsic-latency` to measure the maximum time the kernel does not provide CPU time to the `redis-cli` process itself. This helps identify the system's baseline latency without Redis server involvement. The example shows a run on a Linode instance, highlighting higher latencies in virtualized environments compared to physical machines.
SOURCE: https://github.com/redis/docs/blob/main/content/operate/oss_and_stack/management/optimization/latency.md#_snippet_4

LANGUAGE: Shell
CODE:
```
$ ./redis-cli --intrinsic-latency 100
Max latency so far: 573 microseconds.
Max latency so far: 695 microseconds.
Max latency so far: 919 microseconds.
Max latency so far: 1606 microseconds.
Max latency so far: 3191 microseconds.
Max latency so far: 9243 microseconds.
Max latency so far: 9671 microseconds.
```