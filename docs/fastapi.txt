TITLE: Creating a Basic FastAPI Application - Python
DESCRIPTION: This Python snippet defines a minimal FastAPI application. It initializes the FastAPI app and creates a root ('/') endpoint that returns a simple JSON message 'Hello World'. This serves as the foundation for any FastAPI project.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/first-steps.md#_snippet_0

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI

app = FastAPI()

@app.get("/")
async def read_root():
    return {"message": "Hello World"}
```

----------------------------------------

TITLE: Declaring a Dependency in FastAPI Path Operations
DESCRIPTION: This snippet demonstrates how to declare the `common_parameters` dependency within FastAPI path operation functions (`read_items` and `read_users`). By using `Annotated[dict, Depends(common_parameters)]`, FastAPI automatically calls the dependency and injects its return value into the `commons` parameter, streamlining shared logic.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/dependencies/index.md#_snippet_2

LANGUAGE: Python
CODE:
```
@app.get("/items/")
async def read_items(commons: Annotated[dict, Depends(common_parameters)]):
    return commons

@app.get("/users/")
async def read_users(commons: Annotated[dict, Depends(common_parameters)]):
    return commons
```

----------------------------------------

TITLE: Creating FastAPI Endpoints with Asynchronous Functions - Python
DESCRIPTION: This snippet demonstrates how to define FastAPI route handlers using `async def` for asynchronous operations. It includes two GET endpoints, similar to the synchronous version, but optimized for non-blocking I/O operations, which is beneficial for performance in web applications.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/index.md#_snippet_4

LANGUAGE: Python
CODE:
```
from typing import Union

from fastapi import FastAPI

app = FastAPI()


@app.get("/")
async def read_root():
    return {"Hello": "World"}


@app.get("/items/{item_id}")
async def read_item(item_id: int, q: Union[str, None] = None):
    return {"item_id": item_id, "q": q}
```

----------------------------------------

TITLE: Defining a Pydantic Data Model for Request Body in Python
DESCRIPTION: This code defines an `Item` class that inherits from Pydantic's `BaseModel`. It specifies the expected data structure for a request body, including required fields (`name`, `price`) and optional fields (`description`, `tax`) with default `None` values, leveraging Python type hints for validation and clear data contracts.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/body.md#_snippet_1

LANGUAGE: Python
CODE:
```
class Item(BaseModel):
    name: str
    description: str | None = None
    price: float
    tax: float | None = None
```

----------------------------------------

TITLE: Defining a GET Endpoint in FastAPI
DESCRIPTION: This snippet illustrates how to define a GET API endpoint in FastAPI using the @app.get() decorator. It shows a basic route definition that returns a JSON response, highlighting FastAPI's declarative approach to routing and automatic documentation.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/alternatives.md#_snippet_1

LANGUAGE: Python
CODE:
```
@app.get("/some/url")
def read_url():
    return {"message": "Hello World"}
```

----------------------------------------

TITLE: Basic FastAPI Application Structure
DESCRIPTION: This Python code defines a simple FastAPI application with two endpoints: a root endpoint (`/`) returning 'Hello: World' and an item endpoint (`/items/{item_id}`) demonstrating path parameters and optional query parameters. It uses `FastAPI` and `Union` for type hinting.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/deployment/docker.md#_snippet_3

LANGUAGE: Python
CODE:
```
from typing import Union

from fastapi import FastAPI

app = FastAPI()


@app.get("/")
def read_root():
    return {"Hello": "World"}


@app.get("/items/{item_id}")
def read_item(item_id: int, q: Union[str, None] = None):
    return {"item_id": item_id, "q": q}
```

----------------------------------------

TITLE: Installing FastAPI with Standard Dependencies
DESCRIPTION: This command installs the FastAPI framework along with its standard dependencies. The `[standard]` extra ensures that necessary components like an ASGI server (e.g., Uvicorn or Hypercorn) are also installed, which are crucial for running FastAPI applications.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/index.md#_snippet_0

LANGUAGE: Console
CODE:
```
$ pip install "fastapi[standard]"
```

----------------------------------------

TITLE: Installing FastAPI with Standard Dependencies
DESCRIPTION: This command installs FastAPI along with its default optional standard dependencies, which include common libraries like Uvicorn and Pydantic. An alternative command `pip install fastapi` is available for a minimal installation without these extras.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/index.md#_snippet_1

LANGUAGE: console
CODE:
```
$ pip install "fastapi[standard]"

---> 100%
```

----------------------------------------

TITLE: Defining Multiple User Models for Input, Output, and Database - Python
DESCRIPTION: This snippet defines three distinct Pydantic models for user data: `UserIn` for input (including plaintext password), `UserOut` for output (excluding password), and `UserInDB` for database storage (including hashed password). It also shows a basic flow for hashing and saving user data, demonstrating how different models serve different purposes in an application's lifecycle.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/extra-models.md#_snippet_0

LANGUAGE: Python
CODE:
```
from typing import Optional
from pydantic import BaseModel
from fastapi import FastAPI

app = FastAPI()

class UserIn(BaseModel):
    username: str
    password: str
    email: Optional[str] = None
    full_name: Optional[str] = None

class UserOut(BaseModel):
    username: str
    email: Optional[str] = None
    full_name: Optional[str] = None

class UserInDB(BaseModel):
    username: str
    hashed_password: str
    email: Optional[str] = None
    full_name: Optional[str] = None

def fake_password_hasher(password: str):
    return "supersecret" + password + "hash"

def fake_save_user(user_in_db: UserInDB):
    print("Saving user to DB:", user_in_db.username)
    return user_in_db

@app.post("/users/", response_model=UserOut)
async def create_user(user_in: UserIn):
    hashed_password = fake_password_hasher(user_in.password)
    user_in_db = UserInDB(**user_in.dict(), hashed_password=hashed_password)
    saved_user_in_db = fake_save_user(user_in_db)
    return saved_user_in_db
```

----------------------------------------

TITLE: Defining a FastAPI SQLModel Session Dependency
DESCRIPTION: Creates a FastAPI dependency `get_session` that yields a new SQLModel `Session` for each request, ensuring proper session management. `SessionDep` is an `Annotated` type alias for this dependency, simplifying its use in route functions.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/tutorial/sql-databases.md#_snippet_4

LANGUAGE: python
CODE:
```
from typing import Annotated

from fastapi import Depends
from sqlmodel import Session

def get_session():
    with Session(engine) as session:
        yield session


SessionDep = Annotated[Session, Depends(get_session)]
```

----------------------------------------

TITLE: Implementing Partial Updates with PATCH in FastAPI
DESCRIPTION: Provides a comprehensive example of a PATCH endpoint in FastAPI for performing partial updates. It combines fetching existing data, creating a Pydantic model from it, extracting only the set fields from the incoming request using `exclude_unset`, updating the stored model with `copy(update=...)`, and finally converting the updated model to a JSON-compatible format using `jsonable_encoder` before saving.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/body-updates.md#_snippet_4

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI, status, HTTPException
from pydantic import BaseModel
from typing import Optional
from datetime import datetime
from fastapi.encoders import jsonable_encoder

app = FastAPI()

class Item(BaseModel):
    name: Optional[str] = None
    description: Optional[str] = None
    price: Optional[float] = None
    tax: Optional[float] = None
    created_at: Optional[datetime] = None

# In-memory database for demonstration
items = {
    "foo": {"name": "Foo", "price": 50.2, "tax": 10.5, "created_at": datetime.now().isoformat()},
    "bar": {"name": "Bar", "price": 62.0, "tax": 20.2, "created_at": datetime.now().isoformat()},
}

@app.patch("/items/{item_id}")
async def update_item_partial(item_id: str, item: Item):
    if item_id not in items:
        raise HTTPException(status_code=404, detail="Item not found")
    
    # Retrieve the currently stored data for the item
    stored_item_data = items[item_id]
    # Create a Pydantic model instance from the stored data
    stored_item_model = Item(**stored_item_data)
    
    # Create a dictionary with only the fields that were explicitly sent in the request
    # This excludes fields that were not set, even if they have default values
    update_data = item.dict(exclude_unset=True)
    
    # Create a new Pydantic model instance by copying the stored model
    # and updating it with the partial data from the request
    updated_item = stored_item_model.copy(update=update_data)
    
    # Convert the updated Pydantic model back to a JSON-compatible dictionary
    # for storage, handling types like datetime
    items[item_id] = jsonable_encoder(updated_item)
    
    return updated_item
```

----------------------------------------

TITLE: Reducing Model Duplication with Inheritance - Python
DESCRIPTION: This snippet demonstrates how to reduce code duplication by defining a `UserBase` Pydantic model and then inheriting from it to create specialized models like `UserIn`, `UserOut`, and `UserInDB`. This approach promotes reusability and maintainability by declaring common attributes once.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/extra-models.md#_snippet_12

LANGUAGE: Python
CODE:
```
from typing import Optional
from pydantic import BaseModel
from fastapi import FastAPI

app = FastAPI()

class UserBase(BaseModel):
    username: str
    email: Optional[str] = None
    full_name: Optional[str] = None

class UserIn(UserBase):
    password: str

class UserOut(UserBase):
    pass

class UserInDB(UserBase):
    hashed_password: str
```

----------------------------------------

TITLE: Defining Pydantic Settings Class in FastAPI
DESCRIPTION: This Python class `Settings` inherits from `BaseSettings` to define application configuration. It includes default values for `app_name` and `items_per_user`, and requires `admin_email` to be set. The `model_config` specifies that settings can be loaded from a .env file.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/advanced/settings.md#_snippet_11

LANGUAGE: Python
CODE:
```
from functools import lru_cache

from pydantic_settings import BaseSettings, SettingsConfigDict


class Settings(BaseSettings):
    app_name: str = "Awesome API"
    admin_email: str
    items_per_user: int = 50

    model_config = SettingsConfigDict(env_file=".env")
```

----------------------------------------

TITLE: Defining a GET Path Operation in FastAPI (Python)
DESCRIPTION: This snippet illustrates how to define a GET path operation in FastAPI. It uses the '@app.get()' decorator to associate the 'read_url' function with the '/some/url' endpoint, returning a JSON response. This demonstrates FastAPI's server-side API definition, mirroring the intuitive design of the 'requests' library for server-side operations. It requires an initialized FastAPI 'app' instance.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/alternatives.md#_snippet_1

LANGUAGE: Python
CODE:
```
@app.get("/some/url")
def read_url():
    return {"message": "Hello World"}
```

----------------------------------------

TITLE: Using a Nested Model as a Field Type (Python)
DESCRIPTION: This snippet shows how to use a previously defined Pydantic model (`Image`) as the type for a field (`image`) within another model (`Item`). This allows for deeply nested JSON structures, with FastAPI providing automatic validation and documentation for the nested object.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/tutorial/body-nested-models.md#_snippet_6

LANGUAGE: Python
CODE:
```
image: Image
```

----------------------------------------

TITLE: Defining a GET Path Operation
DESCRIPTION: This snippet illustrates how to define a path operation using the `@app.get("/")` decorator. This decorator registers the `read_root` function to handle HTTP GET requests to the root path (`/`), returning a JSON response.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/first-steps.md#_snippet_7

LANGUAGE: Python
CODE:
```
@app.get("/")
async def read_root():
    return {"Hello": "World"}
```

----------------------------------------

TITLE: Running FastAPI Development Server - Console
DESCRIPTION: This console command starts the FastAPI development server using 'fastapi dev'. It automatically detects changes in 'main.py' and reloads the server, making it ideal for development. The server typically runs on http://127.0.0.1:8000.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/first-steps.md#_snippet_1

LANGUAGE: Console
CODE:
```
fastapi dev main.py
```

----------------------------------------

TITLE: Declaring Basic Path Parameters in FastAPI (Python)
DESCRIPTION: This snippet demonstrates how to declare a basic path parameter `item_id` in a FastAPI application. The value from the URL path is automatically passed as an argument to the asynchronous function. FastAPI handles the routing based on the path string.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/path-params.md#_snippet_0

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI

app = FastAPI()

@app.get("/items/{item_id}")
async def read_item(item_id):
    return {"item_id": item_id}
```

----------------------------------------

TITLE: Defining Asynchronous GET Path Operation (Python)
DESCRIPTION: This snippet demonstrates how to define an asynchronous GET path operation for the root URL (`/`) using the `@app.get()` decorator. The function `root` is marked `async def`, indicating it can perform non-blocking operations, and returns a dictionary which FastAPI automatically converts to JSON.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/first-steps.md#_snippet_1

LANGUAGE: Python
CODE:
```
@app.get("/")
async def root():
    return {"message": "Hello World"}
```

----------------------------------------

TITLE: Defining a Python Function with Type Hints
DESCRIPTION: This snippet defines the `get_full_name` function with explicit type hints for its parameters (`first_name: str, last_name: str`). This enables editors to provide intelligent autocompletion and static analysis, significantly improving developer experience and code quality.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/python-types.md#_snippet_3

LANGUAGE: Python
CODE:
```
def get_full_name(first_name: str, last_name: str):
    return f"{first_name.title()} {last_name.title()}"

print(get_full_name("john", "doe"))
```

----------------------------------------

TITLE: Defining Optional Query Parameter in FastAPI
DESCRIPTION: This snippet demonstrates a basic FastAPI application with an optional query parameter 'q' of type string. The parameter has a default value of None, making it optional for API calls.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/tutorial/query-params-str-validations.md#_snippet_0

LANGUAGE: Python
CODE:
```
from typing import Union

from fastapi import FastAPI

app = FastAPI()


@app.get("/items/")
async def read_items(q: Union[str, None] = None):
    return {"q": q}
```

----------------------------------------

TITLE: Running FastAPI with Gunicorn and Uvicorn Workers
DESCRIPTION: This command starts the Gunicorn server, which then manages four Uvicorn worker processes to serve the FastAPI application. It specifies the application entry point (`main:app`), the number of workers, the Uvicorn worker class, and the binding address and port for the server to listen on, enabling efficient handling of concurrent requests.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/deployment/server-workers.md#_snippet_1

LANGUAGE: Shell
CODE:
```
gunicorn main:app --workers 4 --worker-class uvicorn.workers.UvicornWorker --bind 0.0.0.0:80
```

----------------------------------------

TITLE: Creating a Basic FastAPI Application
DESCRIPTION: This Python code demonstrates how to create a minimal FastAPI application. It initializes the `FastAPI` app and defines two GET endpoints: a root path (`/`) and an item path (`/items/{item_id}`). Both synchronous (`def`) and asynchronous (`async def`) versions are provided, showcasing how to handle different types of operations within FastAPI.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/index.md#_snippet_2

LANGUAGE: Python
CODE:
```
from typing import Union

from fastapi import FastAPI

app = FastAPI()


@app.get("/")
def read_root():
    return {"Hello": "World"}


@app.get("/items/{item_id}")
def read_item(item_id: int, q: Union[str, None] = None):
    return {"item_id": item_id, "q": q}
```

LANGUAGE: Python
CODE:
```
from typing import Union

from fastapi import FastAPI

app = FastAPI()


@app.get("/")
async def read_root():
    return {"Hello": "World"}


@app.get("/items/{item_id}")
async def read_item(item_id: int, q: Union[str, None] = None):
    return {"item_id": item_id, "q": q}
```

----------------------------------------

TITLE: Defining the Main FastAPI Application (Python)
DESCRIPTION: This snippet initializes the main FastAPI application instance and defines a basic path operation for its root endpoint. It serves as the primary entry point for the overall application structure.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/advanced/sub-applications.md#_snippet_0

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI

app = FastAPI()

@app.get("/")
async def read_main():
    return {"message": "Hello Main App"}
```

----------------------------------------

TITLE: Importing FastAPI Class
DESCRIPTION: This Python statement imports the `FastAPI` class from the `fastapi` library. This class is the foundation for building all FastAPI applications, providing the core functionalities for routing and request handling.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/first-steps.md#_snippet_7

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI
```

----------------------------------------

TITLE: FastAPI HTTP Method Decorators (Python)
DESCRIPTION: FastAPI provides decorators for all standard HTTP methods, allowing developers to define specific handlers for `POST`, `PUT`, `DELETE`, `OPTIONS`, `HEAD`, `PATCH`, and `TRACE` requests. These decorators are used similarly to `@app.get()` to route incoming requests to the appropriate function.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/first-steps.md#_snippet_3

LANGUAGE: Python
CODE:
```
@app.post()
@app.put()
@app.delete()
@app.options()
@app.head()
@app.patch()
@app.trace()
```

----------------------------------------

TITLE: Declaring a Complex Model Parameter in FastAPI
DESCRIPTION: This snippet shows how to declare a complex `Item` model as a parameter in FastAPI using Python type hints. This allows FastAPI to automatically validate and convert incoming JSON data into the `Item` object.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/index.md#_snippet_9

LANGUAGE: Python
CODE:
```
item: Item
```

----------------------------------------

TITLE: Creating a Basic FastAPI Application with GET Endpoints - Python
DESCRIPTION: This snippet defines a basic FastAPI application with two GET endpoints: one for the root path ('/') returning a simple JSON, and another for '/items/{item_id}' that accepts an integer path parameter and an optional string query parameter. It demonstrates how to use `FastAPI` and define route handlers.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/index.md#_snippet_3

LANGUAGE: Python
CODE:
```
from typing import Union

from fastapi import FastAPI

app = FastAPI()


@app.get("/")
def read_root():
    return {"Hello": "World"}


@app.get("/items/{item_id}")
def read_item(item_id: int, q: Union[str, None] = None):
    return {"item_id": item_id, "q": q}
```

----------------------------------------

TITLE: Running Uvicorn Directly for Debugging in Python
DESCRIPTION: This snippet demonstrates how to run a FastAPI application using Uvicorn directly from the Python script. By placing `uvicorn.run()` inside the `if __name__ == "__main__":` block, the server can be started for debugging purposes when the file is executed directly, but not when imported as a module.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/debugging.md#_snippet_0

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI
import uvicorn

app = FastAPI()

@app.get("/")
def read_root():
    return {"Hello": "World"}

if __name__ == "__main__":
    uvicorn.run(app, host="0.0.0.0", port=8000)
```

----------------------------------------

TITLE: Defining Pydantic User Models (FastAPI)
DESCRIPTION: Defines Pydantic `BaseModel` classes for `User` and `UserInDB`. The `User` model represents public user data, while `UserInDB` extends it to include sensitive information like a hashed password, typically used for internal database operations.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/security/get-current-user.md#_snippet_1

LANGUAGE: Python
CODE:
```
from pydantic import BaseModel

class User(BaseModel):
    username: str
    email: str | None = None
    full_name: str | None = None
    disabled: bool | None = None

class UserInDB(User):
    hashed_password: str
```

----------------------------------------

TITLE: Activating Virtual Environment (Linux/macOS Shell)
DESCRIPTION: This command activates a virtual environment on Linux and macOS. It sources the `activate` script, which modifies the shell's `PATH` environment variable to prioritize the virtual environment's executables, ensuring project-specific tools are used.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/virtual-environments.md#_snippet_22

LANGUAGE: Shell
CODE:
```
source .venv/bin/activate
```

----------------------------------------

TITLE: Accessing Pydantic Model Attributes in FastAPI Path Operation in Python
DESCRIPTION: This complete FastAPI example demonstrates how to access and utilize the attributes of a Pydantic model (`Item`) received as a request body within a path operation. It shows how to convert the model to a dictionary, perform conditional logic based on optional fields, and return a modified response, leveraging the type hints for robust code and editor assistance.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/body.md#_snippet_3

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI
from pydantic import BaseModel

app = FastAPI()

class Item(BaseModel):
    name: str
    description: str | None = None
    price: float
    tax: float | None = None

@app.post("/items/")
async def create_item(item: Item):
    item_dict = item.dict()
    if item.tax:
        price_with_tax = item.price + item.tax
        item_dict.update({"price_with_tax": price_with_tax})
    return item_dict
```

----------------------------------------

TITLE: Implementing User Retrieval Logic (FastAPI)
DESCRIPTION: Provides a simplified, in-memory database (`fake_users_db`) and a `fake_decode_token` function to simulate user lookup. The `get_current_user` dependency then uses this logic to retrieve and return a `UserInDB` model, raising an `HTTPException` if authentication fails.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/security/get-current-user.md#_snippet_3

LANGUAGE: Python
CODE:
```
from fastapi import HTTPException, status

# Assuming UserInDB Pydantic model is defined and imported
# from .tutorial002 import UserInDB

fake_users_db = {
    "john_doe": {
        "username": "john_doe",
        "email": "john@example.com",
        "full_name": "John Doe",
        "hashed_password": "fakehashedpassword"
    }
}

def fake_decode_token(token: str):
    user_data = fake_users_db.get(token)
    if user_data:
        return UserInDB(**user_data)
    return None

# This part would be inside async def get_current_user(...):
user = fake_decode_token(token)
if not user:
    raise HTTPException(
        status_code=status.HTTP_401_UNAUTHORIZED,
        detail="Invalid authentication credentials",
        headers={"WWW-Authenticate": "Bearer"},
    )
return user
```

----------------------------------------

TITLE: Defining Settings in a Separate `config.py` Module
DESCRIPTION: This Python code defines the `Settings` class and instantiates the `settings` object within a dedicated `config.py` module. This approach promotes modularity by centralizing application configuration, making it easier to manage and reuse settings across different parts of a larger application.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/advanced/settings.md#_snippet_15

LANGUAGE: Python
CODE:
```
from pydantic_settings import BaseSettings


class Settings(BaseSettings):
    app_name: str = "Awesome API"
    admin_email: str
    items_per_user: int = 50


settings = Settings()
```

----------------------------------------

TITLE: Installing Uvicorn ASGI Server
DESCRIPTION: This command specifically installs Uvicorn, a popular ASGI server, which is required to serve FastAPI applications. The `[standard]` extra includes common dependencies for Uvicorn, ensuring a complete setup for running your web service.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/index.md#_snippet_1

LANGUAGE: Console
CODE:
```
$ pip install "uvicorn[standard]"
```

----------------------------------------

TITLE: Defining Synchronous GET Path Operation (Python)
DESCRIPTION: This snippet illustrates how to define a synchronous GET path operation for the root URL (`/`). Unlike the asynchronous version, the function `root` is defined with `def`, meaning it will block the event loop if it performs long-running I/O operations. It also returns a dictionary that FastAPI serializes to JSON.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/first-steps.md#_snippet_2

LANGUAGE: Python
CODE:
```
@app.get("/")
def root():
    return {"message": "Hello World"}
```

----------------------------------------

TITLE: FastAPI Path Operation with Async Def and Await
DESCRIPTION: Demonstrates how to declare a FastAPI path operation function using `async def` when the function needs to `await` the result of a third-party library call. This is suitable for I/O-bound operations that support asynchronous execution.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/async.md#_snippet_0

LANGUAGE: Python
CODE:
```
@app.get('/')
async def read_results():
    results = await some_library()
    return results
```

----------------------------------------

TITLE: Defining Data Models with Pydantic in Python
DESCRIPTION: This snippet illustrates how to define a function with type hints and a Pydantic BaseModel for structured data. It shows the use of 'str' for function parameters and 'int', 'str', 'date' for Pydantic model fields, leveraging standard Python types for data validation and editor support.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/features.md#_snippet_0

LANGUAGE: Python
CODE:
```
from datetime import date

from pydantic import BaseModel

# Declare a variable as a str
# and get editor support inside the function
def main(user_id: str):
    return user_id


# A Pydantic model
class User(BaseModel):
    id: int
    name: str
    joined: date
```

----------------------------------------

TITLE: Run FastAPI Application with Uvicorn
DESCRIPTION: This console command initiates the FastAPI application using `fastapi dev`, which leverages Uvicorn to serve the `app/main.py` file. It provides the local URL where the application can be accessed.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/bigger-applications.md#_snippet_19

LANGUAGE: console
CODE:
```
$ fastapi dev app/main.py
```

----------------------------------------

TITLE: Relative Import of Sub-Routers in FastAPI
DESCRIPTION: This code snippet shows how to perform a relative import of `items` and `users` sub-modules from the `routers` package within a FastAPI application's main file (`app/main.py`). This allows the main application to access the `APIRouter` instances defined within these sub-modules, facilitating modular application design.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/tutorial/bigger-applications.md#_snippet_3

LANGUAGE: Python
CODE:
```
from .routers import items, users
```

----------------------------------------

TITLE: Declaring Optional String Type in Python (3.6+)
DESCRIPTION: Demonstrates how to declare a parameter that can be `str` or `None` using `Optional[str]` from the `typing` module. This helps type checkers identify potential `None` related issues. `Optional[str]` is a shorthand for `Union[str, None]`.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/python-types.md#_snippet_17

LANGUAGE: Python
CODE:
```
from typing import Optional

def process_name(name: Optional[str]):
    if name is None:
        print("Name is not provided.")
    else:
        print(f"Processing name: {name}")
```

----------------------------------------

TITLE: Implementing OAuth2 Token Endpoint (Python)
DESCRIPTION: This FastAPI endpoint (`/token`) handles user login requests using `OAuth2PasswordRequestForm`. It verifies the provided username and password against stored credentials. If valid, it generates a new access token using `create_access_token` with a specified expiration time and returns it along with the token type, enabling client-side authentication.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/security/oauth2-jwt.md#_snippet_5

LANGUAGE: Python
CODE:
```
from fastapi import APIRouter, Depends, HTTPException, status
from fastapi.security import OAuth2PasswordRequestForm
from datetime import timedelta

# Assume create_access_token, verify_password, get_user, ACCESS_TOKEN_EXPIRE_MINUTES
# and fake_users_db are defined elsewhere.
# from .security import create_access_token, verify_password, get_user, ACCESS_TOKEN_EXPIRE_MINUTES
# from .database import fake_users_db
# from .models import Token

router = APIRouter()

@router.post("/token", response_model=Token)
async def login_for_access_token(form_data: OAuth2PasswordRequestForm = Depends()):
    user = get_user(fake_users_db, form_data.username)
    if not user or not verify_password(form_data.password, user["hashed_password"]):
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="Incorrect username or password",
            headers={"WWW-Authenticate": "Bearer"},
        )
    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)
    access_token = create_access_token(
        data={"sub": user["username"]}, expires_delta=access_token_expires
    )
    return {"access_token": access_token, "token_type": "bearer"}
```

----------------------------------------

TITLE: Extended FastAPI App with Headers and Error Handling (Python 3.10+ Annotated)
DESCRIPTION: This extended FastAPI application demonstrates path operations with required `X-Token` headers and error handling using `HTTPException`. It includes a GET endpoint and a POST endpoint, both validating the token and the POST endpoint also validating item data, utilizing Python 3.10+ `Annotated` syntax.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/testing.md#_snippet_4



----------------------------------------

TITLE: Include APIRouter Instances in FastAPI Application
DESCRIPTION: This snippet demonstrates how to integrate `APIRouter` instances from different submodules into the main `FastAPI` application. Using `app.include_router()` adds all path operations defined within `users.router` and `items.router` to the main application's routing table.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/bigger-applications.md#_snippet_15

LANGUAGE: Python
CODE:
```
app.include_router(users.router)
app.include_router(items.router)
```

----------------------------------------

TITLE: Declaring Request Body Parameter in FastAPI Path Operation in Python
DESCRIPTION: This snippet shows how to declare a request body parameter within a FastAPI path operation function. By type-hinting the parameter `item` with the previously defined `Item` Pydantic model, FastAPI automatically handles JSON parsing, data validation, and provides comprehensive editor support for the incoming request body.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/body.md#_snippet_2

LANGUAGE: Python
CODE:
```
async def create_item(item: Item):
```

----------------------------------------

TITLE: Install FastAPI with Standard Dependencies
DESCRIPTION: Instructions to install FastAPI along with its standard dependencies using pip, ensuring all necessary components like Uvicorn and Pydantic are included. The quotes around 'fastapi[standard]' are important for cross-terminal compatibility.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/README.md#_snippet_0

LANGUAGE: console
CODE:
```
$ pip install "fastapi[standard]"
```

----------------------------------------

TITLE: Include APIRouter with Custom Configuration
DESCRIPTION: This example shows how to include an existing `APIRouter` (like `admin.admin_router`) into a `FastAPI` application while applying custom configurations such as a URL `prefix`, `tags` for documentation, `dependencies` for security, and custom `responses`. This allows modifying the router's behavior in the current app without altering its original definition.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/bigger-applications.md#_snippet_17

LANGUAGE: Python
CODE:
```
from fastapi import Depends # Assuming get_token_header is defined elsewhere

app.include_router(
    admin.admin_router,
    prefix="/admin",
    tags=["admin"],
    dependencies=[Depends(get_token_header)],
    responses={418: {"description": "I'm a teapot"}}
)
```

----------------------------------------

TITLE: Running Uvicorn with Multiple Workers (Console)
DESCRIPTION: This console command demonstrates how to launch a Uvicorn application with four worker processes. The `--workers 4` argument enables Uvicorn to manage multiple concurrent processes, improving the application's ability to handle more requests and providing resilience against individual worker failures. It specifies the application entry point (`main:app`), binds to all network interfaces (`0.0.0.0`), and listens on port `8080`.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/deployment/server-workers.md#_snippet_3

LANGUAGE: console
CODE:
```
$ uvicorn main:app --host 0.0.0.0 --port 8080 --workers 4
<font color="#A6E22E">INFO</font>:     Uvicorn running on <b>http://0.0.0.0:8080</b> (Press CTRL+C to quit)
<font color="#A6E22E">INFO</font>:     Started parent process [<font color="#A1EFE4"><b>27365</b></font>]
<font color="#A6E22E">INFO</font>:     Started server process [<font color="#A1EFE4">27368</font>]
<font color="#A6E22E">INFO</font>:     Waiting for application startup.
<font color="#A6E22E">INFO</font>:     Application startup complete.
<font color="#A6E22E">INFO</font>:     Started server process [<font color="#A1EFE4">27369</font>]
<font color="#A6E22E">INFO</font>:     Waiting for application startup.
<font color="#A6E22E">INFO</font>:     Application startup complete.
<font color="#A6E22E">INFO</font>:     Started server process [<font color="#A1EFE4">27370</font>]
<font color="#A6E22E">INFO</font>:     Waiting for application startup.
<font color="#A6E22E">INFO</font>:     Application startup complete.
<font color="#A6E22E">INFO</font>:     Started server process [<font color="#A1EFE4">27367</font>]
<font color="#A6E22E">INFO</font>:     Waiting for application startup.
<font color="#A6E22E">INFO</font>:     Application startup complete.
```

----------------------------------------

TITLE: Filtering Sensitive Data with Separate Response Model - FastAPI Python
DESCRIPTION: This snippet demonstrates using distinct Pydantic models for input (`UserIn` with password) and output (`UserOut` without password). Even if the path operation returns the full `UserIn` object, FastAPI's `response_model=UserOut` ensures that only fields defined in `UserOut` are included in the API response, effectively filtering out sensitive data like passwords.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ko/docs/tutorial/response-model.md#_snippet_2

LANGUAGE: Python
CODE:
```
class UserIn(BaseModel):
    username: str
    password: str


class UserOut(BaseModel):
    username: str


app = FastAPI()


@app.post("/user/", response_model=UserOut)
async def create_user(user: UserIn):
    return user
```

----------------------------------------

TITLE: Importing FastAPI and Initializing the Application (Python)
DESCRIPTION: This snippet shows the basic setup for a FastAPI application, including importing the `FastAPI` class and creating an instance of it. This `app` instance is then used to define API endpoints.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/first-steps.md#_snippet_0

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI

app = FastAPI()
```

----------------------------------------

TITLE: Basic Dockerfile for FastAPI Application
DESCRIPTION: This Dockerfile provides a standard setup for a FastAPI application, starting from a Python base image, setting the working directory, copying dependencies, installing them, copying the application code, and defining the Uvicorn server command. It demonstrates an optimized layering strategy to leverage Docker's build cache.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ko/docs/deployment/docker.md#_snippet_0

LANGUAGE: Dockerfile
CODE:
```
FROM python:3.9

WORKDIR /code

COPY ./requirements.txt /code/requirements.txt

RUN pip install --no-cache-dir --upgrade -r /code/requirements.txt

COPY ./app /code/app

CMD ["uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "80"]
```

----------------------------------------

TITLE: Basic FastAPI Application (main.py)
DESCRIPTION: A minimal FastAPI application demonstrating how to define a root endpoint and an item endpoint with path and optional query parameters using `FastAPI`.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/deployment/docker.md#_snippet_3

LANGUAGE: Python
CODE:
```
from typing import Union

from fastapi import FastAPI

app = FastAPI()


@app.get("/")
def read_root():
    return {"Hello": "World"}


@app.get("/items/{item_id}")
def read_item(item_id: int, q: Union[str, None] = None):
    return {"item_id": item_id, "q": q}
```

----------------------------------------

TITLE: Configure CORSMiddleware in FastAPI Application
DESCRIPTION: Demonstrates how to import and apply `CORSMiddleware` to a FastAPI application. It shows how to define a list of allowed origins and configure various CORS parameters like credentials, methods, and headers to enable secure cross-origin requests.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/cors.md#_snippet_0

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI
from fastapi.middleware.cors import CORSMiddleware

app = FastAPI()

origins = [
    "http://localhost:8080",
    "http://localhost",
    "https://example.org",
    "https://www.example.org",
]

app.add_middleware(
    CORSMiddleware,
    allow_origins=origins,
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)
```

----------------------------------------

TITLE: Building FastAPI Docker Image
DESCRIPTION: This Dockerfile defines the steps to build a Docker image for a FastAPI application. It uses a Python 3.9 base image, sets the working directory, copies `requirements.txt` to install Python dependencies, and then copies the application code. The `CMD` instruction specifies how to run the FastAPI application using `fastapi run` on port 80, with a commented-out alternative for proxy headers.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/deployment/docker.md#_snippet_0

LANGUAGE: Dockerfile
CODE:
```
FROM python:3.9

WORKDIR /code

COPY ./requirements.txt /code/requirements.txt

RUN pip install --no-cache-dir --upgrade -r /code/requirements.txt

COPY ./app /code/app

CMD ["fastapi", "run", "app/main.py", "--port", "80"]

# If running behind a proxy like Nginx or Traefik add --proxy-headers
# CMD ["fastapi", "run", "app/main.py", "--port", "80", "--proxy-headers"]
```

----------------------------------------

TITLE: Recommended Query Default with Annotated
DESCRIPTION: This snippet shows the recommended approach for defining a default query parameter using `Annotated`. The actual default value is assigned directly to the function parameter, making it clear and consistent.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/query-params-str-validations.md#_snippet_11

LANGUAGE: Python
CODE:
```
q: Annotated[str, Query()] = "rick"
```

----------------------------------------

TITLE: Declaring Dependencies with Annotated (Python 3.8+)
DESCRIPTION: This snippet shows the recommended way to declare a dependency using `Annotated` for explicit type hinting in Python 3.8+. It clearly indicates that `commons` will be an instance of `CommonQueryParams` provided by `Depends(CommonQueryParams)`, enhancing editor support and static analysis.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/dependencies/classes-as-dependencies.md#_snippet_5

LANGUAGE: Python
CODE:
```
from typing import Annotated
from fastapi import Depends

# Assuming CommonQueryParams is defined elsewhere
# class CommonQueryParams: ...

commons: Annotated[CommonQueryParams, Depends(CommonQueryParams)]
```

----------------------------------------

TITLE: Create Basic FastAPI Application with Asynchronous Endpoints
DESCRIPTION: This Python code demonstrates how to define a simple FastAPI application using `async def` for its GET endpoints, suitable for asynchronous operations. It includes a root endpoint and an item endpoint with path and query parameters.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/README.md#_snippet_2

LANGUAGE: Python
CODE:
```
from typing import Union

from fastapi import FastAPI

app = FastAPI()


@app.get("/")
async def read_root():
    return {"Hello": "World"}


@app.get("/items/{item_id}")
async def read_item(item_id: int, q: Union[str, None] = None):
    return {"item_id": item_id, "q": q}
```

----------------------------------------

TITLE: Verifying Hashed Passwords for User Authentication in FastAPI
DESCRIPTION: This snippet illustrates the concept of password hashing and verification, crucial for secure user authentication. Instead of storing plain passwords, a hashed version is used. The `verify_password` function compares a provided plain password against its stored hash, returning `True` if they match, without revealing the original password.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/security/simple-oauth2.md#_snippet_4

LANGUAGE: Python
CODE:
```
from passlib.context import CryptContext

# This is a placeholder for a real password hashing context
# In a real application, you would configure this with a strong algorithm like bcrypt
pwd_context = CryptContext(schemes=["bcrypt"], deprecated="auto")

def verify_password(plain_password: str, hashed_password: str) -> bool:
    # In a real application, use pwd_context.verify(plain_password, hashed_password)
    # For this example, a simple comparison (NOT SECURE FOR PRODUCTION)
    return plain_password == "secret" and hashed_password == "fakehashedsecret"

def get_password_hash(password: str) -> str:
    # In a real application, use pwd_context.hash(password)
    # For this example, a simple placeholder (NOT SECURE FOR PRODUCTION)
    return "fakehashedsecret"
```

----------------------------------------

TITLE: Creating a Session Dependency in FastAPI
DESCRIPTION: This snippet defines a FastAPI dependency `get_session` using `yield` to provide a new SQLModel `Session` for each request, ensuring a single session per request. It then creates an `Annotated` type alias `SessionDep` for simplified dependency injection in route functions.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/sql-databases.md#_snippet_4

LANGUAGE: Python
CODE:
```
def get_session():
    with Session(engine) as session:
        yield session

SessionDep = Annotated[Session, Depends(get_session)]
```

----------------------------------------

TITLE: Creating a Hero with FastAPI and SQLModel
DESCRIPTION: Defines a FastAPI POST endpoint `/heroes/` to create a new `Hero` entry in the database. It takes a `Hero` object from the request body, adds it to the session, commits the transaction, refreshes the object with database-generated values (like `id`), and returns the created hero.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/tutorial/sql-databases.md#_snippet_6

LANGUAGE: python
CODE:
```
@app.post("/heroes/", response_model=Hero)
def create_hero(hero: Hero, session: SessionDep):
    session.add(hero)
    session.commit()
    session.refresh(hero)
    return hero
```

----------------------------------------

TITLE: Nesting APIRouter in another APIRouter in FastAPI
DESCRIPTION: Demonstrates how to include one APIRouter instance within another APIRouter. This allows for hierarchical organization of path operations. It is crucial to include the nested router before the parent router is added to the FastAPI application to ensure all path operations from the nested router are properly registered.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/bigger-applications.md#_snippet_20

LANGUAGE: Python
CODE:
```
router.include_router(other_router)
```

----------------------------------------

TITLE: Reading Multiple Heroes with FastAPI and SQLModel
DESCRIPTION: Implements a FastAPI GET endpoint `/heroes/` to retrieve a list of heroes from the database. It supports pagination using `offset` and `limit` query parameters, executing a `select` statement on the `Hero` model and returning the results.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/tutorial/sql-databases.md#_snippet_7

LANGUAGE: python
CODE:
```
from typing import List
from sqlmodel import select

@app.get("/heroes/", response_model=List[Hero])
def read_heroes(session: SessionDep, offset: int = 0, limit: int = 100):
    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()
    return heroes
```

----------------------------------------

TITLE: Basic FastAPI Application Testing with TestClient
DESCRIPTION: This snippet demonstrates the fundamental usage of `TestClient` to test a FastAPI application. It initializes a `TestClient` with the FastAPI app, defines a test function following `pytest` conventions, and asserts the HTTP status code and JSON response from a GET request.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/tutorial/testing.md#_snippet_1

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI
from fastapi.testclient import TestClient

app = FastAPI()

@app.get("/")
async def read_main():
    return {"msg": "Hello World"}

client = TestClient(app)

def test_read_main():
    response = client.get("/")
    assert response.status_code == 200
    assert response.json() == {"msg": "Hello World"}
```

----------------------------------------

TITLE: Installing Uvicorn and Gunicorn for Production
DESCRIPTION: This command installs both Uvicorn with its standard dependencies for optimal performance and Gunicorn, which will act as the process manager. These are essential prerequisites for deploying a FastAPI application with multiple Uvicorn workers in a production environment.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/deployment/server-workers.md#_snippet_0

LANGUAGE: Shell
CODE:
```
pip install "uvicorn[standard]" gunicorn
```

----------------------------------------

TITLE: Activando Entorno Virtual en Linux/macOS
DESCRIPTION: Comando de consola para activar un entorno virtual de Python en sistemas operativos Linux y macOS. Al ejecutar este comando, el script 'activate' modifica la variable de entorno PATH de la sesión actual para incluir el directorio 'bin' del entorno virtual, asegurando que los ejecutables del proyecto sean los primeros en ser encontrados.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/virtual-environments.md#_snippet_1

LANGUAGE: console
CODE:
```
$ source .venv/bin/activate
```

----------------------------------------

TITLE: Annotated Dockerfile for FastAPI Deployment
DESCRIPTION: A detailed Dockerfile for building a FastAPI application image, with comments explaining each step: selecting a base Python image, setting the working directory, copying and installing dependencies, and copying the application code.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/deployment/docker.md#_snippet_4

LANGUAGE: Dockerfile
CODE:
```
# (1)
FROM python:3.9

# (2)
WORKDIR /code

# (3)
COPY ./requirements.txt /code/requirements.txt

# (4)
RUN pip install --no-cache-dir --upgrade -r /code/requirements.txt

# (5)
COPY ./app /code/app
```

----------------------------------------

TITLE: Defining Python Types and Pydantic Models
DESCRIPTION: This snippet illustrates how FastAPI leverages standard Python type hints for function parameters and defines data models using Pydantic's BaseModel. It shows how type annotations provide editor support and how Pydantic models structure and validate data.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/features.md#_snippet_0

LANGUAGE: Python
CODE:
```
from datetime import date

from pydantic import BaseModel

# Declare a variable as a str
# and get editor support inside the function
def main(user_id: str):
    return user_id


# A Pydantic model
class User(BaseModel):
    id: int
    name: str
    joined: date
```

----------------------------------------

TITLE: Declaring Typed Path Parameters in FastAPI (Python)
DESCRIPTION: This snippet illustrates how to add a type annotation (`int`) to a path parameter in FastAPI. This enables automatic data conversion from the URL string to the specified Python type and provides editor support for type checking and validation.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/path-params.md#_snippet_2

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI

app = FastAPI()

@app.get("/items/{item_id}")
async def read_item(item_id: int):
    return {"item_id": item_id}
```

----------------------------------------

TITLE: Defining Application Settings with Pydantic BaseSettings
DESCRIPTION: Shows how to define a settings class 'Settings' by inheriting from 'BaseSettings'. It demonstrates declaring typed attributes with default values, which Pydantic automatically loads from environment variables (e.g., 'APP_NAME' maps to 'app_name').
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/advanced/settings.md#_snippet_5

LANGUAGE: Python
CODE:
```
from pydantic_settings import BaseSettings


class Settings(BaseSettings):
    app_name: str = "Awesome API"
    admin_email: str
    items_per_user: int = 50


settings = Settings()
```

----------------------------------------

TITLE: Hashing and Verifying Passwords with Passlib (Python)
DESCRIPTION: This snippet demonstrates how to use `passlib`'s `CryptContext` to securely hash and verify user passwords using the bcrypt algorithm. It includes utility functions for hashing a plain password and verifying if a given plain password matches a stored hash, along with a simplified `get_user` function to retrieve user data from a fake database.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/security/oauth2-jwt.md#_snippet_2

LANGUAGE: Python
CODE:
```
from passlib.context import CryptContext
from typing import Optional

pwd_context = CryptContext(schemes=["bcrypt"], deprecated="auto")

def verify_password(plain_password: str, hashed_password: str) -> bool:
    return pwd_context.verify(plain_password, hashed_password)

def get_password_hash(password: str) -> str:
    return pwd_context.hash(password)

# A simplified fake database for demonstration
fake_users_db = {
    "johndoe": {
        "username": "johndoe",
        "full_name": "John Doe",
        "email": "john@example.com",
        "hashed_password": "$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW", # Example hash
        "disabled": False,
    }
}

def get_user(db: dict, username: str):
    if username in db:
        user_dict = db[username]
        # In a real app, you'd convert user_dict to a Pydantic model
        return user_dict # Returning dict for simplicity here
    return None
```

----------------------------------------

TITLE: Create Basic FastAPI Application with Synchronous Endpoints
DESCRIPTION: This Python code defines a simple FastAPI application with two synchronous GET endpoints: a root endpoint returning 'Hello World' and an item endpoint that accepts an integer `item_id` and an optional string query parameter `q`.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/README.md#_snippet_1

LANGUAGE: Python
CODE:
```
from typing import Union

from fastapi import FastAPI

app = FastAPI()


@app.get("/")
def read_root():
    return {"Hello": "World"}


@app.get("/items/{item_id}")
def read_item(item_id: int, q: Union[str, None] = None):
    return {"item_id": item_id, "q": q}
```

----------------------------------------

TITLE: Running a FastAPI Application with `fastapi dev`
DESCRIPTION: Provides the command to run the FastAPI application using `fastapi dev`. This command starts the Uvicorn server, making the API accessible, and typically includes hot-reloading for development.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/tutorial/sql-databases.md#_snippet_10

LANGUAGE: console
CODE:
```
$ fastapi dev main.py
```

----------------------------------------

TITLE: Running FastAPI Development Server
DESCRIPTION: This snippet demonstrates how to start the FastAPI development server using the `fastapi dev` command. It shows the command to execute and the typical console output indicating that Uvicorn is running and listening on `http://127.0.0.1:8000`.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/sql-databases.md#_snippet_13

LANGUAGE: console
CODE:
```
$ fastapi dev main.py

<span style="color: green;">INFO</span>:     Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)
```

----------------------------------------

TITLE: Running FastAPI Application in Development Mode
DESCRIPTION: This command starts the FastAPI application in development mode using `fastapi dev`. It runs the `main.py` file, making the API accessible at `http://127.0.0.1:8000` and enabling automatic interactive documentation at `/docs`.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/security/first-steps.md#_snippet_1

LANGUAGE: Console
CODE:
```
fastapi dev main.py
```

----------------------------------------

TITLE: Creating Virtual Environment with venv (Console)
DESCRIPTION: This command utilizes Python's built-in `venv` module to create a new virtual environment. It creates a `.venv` directory within the current project, isolating project dependencies from the global Python installation. This is a one-time setup per project.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/virtual-environments.md#_snippet_1

LANGUAGE: console
CODE:
```
$ python -m venv .venv
```

----------------------------------------

TITLE: Importing FastAPI Class (Python)
DESCRIPTION: This snippet demonstrates how to import the `FastAPI` class from the `fastapi` library. This is the fundamental first step to creating a web application using the FastAPI framework, making the `FastAPI` class available for instantiation and use.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/reference/fastapi.md#_snippet_0

LANGUAGE: python
CODE:
```
from fastapi import FastAPI
```

----------------------------------------

TITLE: Install FastAPI with Standard Dependencies
DESCRIPTION: Command to install FastAPI along with its recommended 'standard' group of optional dependencies, including tools for email validation, HTTP client, templating, form parsing, and the Uvicorn server.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/README.md#_snippet_9

LANGUAGE: Shell
CODE:
```
pip install "fastapi[standard]"
```

----------------------------------------

TITLE: Installing FastAPI with Standard Dependencies (Shell)
DESCRIPTION: This command installs FastAPI along with its 'standard' group of optional dependencies. These dependencies provide common functionalities such as email validation, HTTP client for testing, templating, form parsing, and a high-performance ASGI server (Uvicorn) with its own standard dependencies.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/index.md#_snippet_13

LANGUAGE: Shell
CODE:
```
pip install "fastapi[standard]"
```

----------------------------------------

TITLE: Initializing a Basic FastAPI Application
DESCRIPTION: This snippet demonstrates the standard way to initialize a FastAPI application and define a simple path operation. It sets up the core application instance and registers an endpoint, forming the foundation for further OpenAPI schema customization.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/how-to/extending-openapi.md#_snippet_0

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI

app = FastAPI()

@app.get("/items/")
async def read_items():
    return [{"name": "Foo"}]
```

----------------------------------------

TITLE: Creating a FastAPI Application Instance
DESCRIPTION: This snippet shows how to create an instance of the `FastAPI` class, typically assigned to a variable named `app`. This instance serves as the main entry point for defining all API routes and operations.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/first-steps.md#_snippet_6

LANGUAGE: Python
CODE:
```
app = FastAPI()
```

----------------------------------------

TITLE: Running FastAPI Development Server
DESCRIPTION: This command starts the FastAPI development server, watching for changes in `main.py` and providing URLs for the application and its documentation. It's intended for local development, with a tip for production use, and logs server activity.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/index.md#_snippet_0

LANGUAGE: console
CODE:
```
$ fastapi dev main.py

  FastAPI   Starting development server 🚀

             Searching for package file structure from directories
             with __init__.py files
             Importing from /home/user/code/awesomeapp

   module   🐍 main.py

     code   Importing the FastAPI app object from the module with
             the following code:

             from main import app

      app   Using import string: main:app

   server   Server started at http://127.0.0.1:8000
   server   Documentation at http://127.0.0.1:8000/docs

      tip   Running in development mode, for production use:
             fastapi run

             Logs:

     INFO   Will watch for changes in these directories:
             ['/home/user/code/awesomeapp']
     INFO   Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C
             to quit)
     INFO   Started reloader process [383138] using WatchFiles
     INFO   Started server process [383153]
     INFO   Waiting for application startup.
     INFO   Application startup complete.
```

----------------------------------------

TITLE: Creating a Hero with FastAPI and SQLModel
DESCRIPTION: This FastAPI endpoint handles the creation of a new `Hero` object. It uses the `SessionDep` dependency to interact with the database, adds the new hero, commits the changes, refreshes the object to get updated data (like an auto-generated ID), and then returns the created hero.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/tutorial/sql-databases.md#_snippet_2

LANGUAGE: Python
CODE:
```
@app.post("/heroes/", response_model=Hero)
def create_hero(*, session: SessionDep, hero: Hero):
    session.add(hero)
    session.commit()
    session.refresh(hero)
    return hero
```

----------------------------------------

TITLE: Running FastAPI Application with Uvicorn
DESCRIPTION: This command starts the Uvicorn server, serving the FastAPI application named `app` from `main.py`. It binds the server to all network interfaces (`0.0.0.0`) on port `80`. The output shows the server is running.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/deployment/manually.md#_snippet_2

LANGUAGE: console
CODE:
```
uvicorn main:app --host 0.0.0.0 --port 80
```

----------------------------------------

TITLE: Testing FastAPI Endpoints Asynchronously with Pytest and AnyIO (Python)
DESCRIPTION: This snippet demonstrates how to write asynchronous tests for a FastAPI application using `pytest` and `httpx.AsyncClient`. The `@pytest.mark.anyio` decorator enables the test function to run in an asynchronous context, allowing `await` calls for HTTP requests.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/advanced/async-tests.md#_snippet_1

LANGUAGE: Python
CODE:
```
import pytest
from httpx import AsyncClient
from app.main import app

@pytest.mark.anyio
async def test_read_root():
    async with AsyncClient(app=app, base_url="http://test") as client:
        response = await client.get("/")
    assert response.status_code == 200
    assert response.json() == {"Hello": "World"}
```

----------------------------------------

TITLE: Reading a Single Hero by ID in FastAPI
DESCRIPTION: This FastAPI GET endpoint fetches a single `Hero` by its `id`. It uses `session.get()` to retrieve the hero and raises an `HTTPException` with a 404 status if no hero is found for the given ID; otherwise, it returns the found hero.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/sql-databases.md#_snippet_8

LANGUAGE: Python
CODE:
```
@router.get("/heroes/{hero_id}", response_model=Hero)
def read_hero(hero_id: int, session: SessionDep):
    hero = session.get(Hero, hero_id)
    if not hero:
        raise HTTPException(status_code=404, detail="Hero not found")
    return hero
```

----------------------------------------

TITLE: Using Custom Context Managers in FastAPI Yield Dependencies
DESCRIPTION: This Python snippet illustrates how to integrate a custom Python context manager (defined by `__enter__` and `__exit__` methods) within a FastAPI dependency function that uses `yield`. The `with` statement ensures that the resource managed by `DatabaseSessionManager` (e.g., a database session) is properly opened before the path operation runs and closed afterwards, even if exceptions occur.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/dependencies/dependencies-with-yield.md#_snippet_8

LANGUAGE: Python
CODE:
```
# This is a hypothetical reconstruction based on the context
# of using custom context managers within FastAPI dependencies with yield.

class DatabaseSessionManager:
    def __enter__(self):
        # Logic to open a resource, e.g., a database connection
        print("Opening database session")
        return {"db_connection": "active"}

    def __exit__(self, exc_type, exc_val, exc_tb):
        # Logic to close/clean up the resource
        print("Closing database session")
        if exc_type:
            print(f"An exception occurred: {exc_type.__name__}")

# This FastAPI dependency uses the custom context manager
def get_db_session():
    with DatabaseSessionManager() as db:
        yield db
```

----------------------------------------

TITLE: Declaring Basic Path Parameters in FastAPI (Python)
DESCRIPTION: Demonstrates how to declare a simple path parameter `item_id` in a FastAPI path operation. The value passed in the URL path will be directly used as the function argument.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/path-params.md#_snippet_1

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI

app = FastAPI()

@app.get("/items/{item_id}")
async def read_item(item_id):
    return {"item_id": item_id}
```

----------------------------------------

TITLE: Installing Python Packages from requirements.txt with uv
DESCRIPTION: Demonstrates how to install all packages listed in a `requirements.txt` file using `uv`. This provides an alternative to `pip` for dependency management.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/virtual-environments.md#_snippet_14

LANGUAGE: console
CODE:
```
$ uv pip install -r requirements.txt
---> 100%
```

----------------------------------------

TITLE: Declaring Query Parameters with Default Values in FastAPI
DESCRIPTION: This snippet demonstrates how to declare query parameters in a FastAPI application. Parameters like `skip` and `limit` are automatically recognized as query parameters when they are not part of the path. They are given default integer values, making them optional.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/query-params.md#_snippet_0

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI

app = FastAPI()

@app.get("/items/")
async def read_items(skip: int = 0, limit: int = 10):
    return {"skip": skip, "limit": limit}
```

----------------------------------------

TITLE: Configuring Pydantic Settings to Read from .env (v2)
DESCRIPTION: This Python snippet updates the Pydantic `Settings` class to read configuration values from a `.env` file. By setting `model_config = SettingsConfigDict(env_file=".env")`, Pydantic v2 automatically loads environment variables defined in the specified file, making it easier to manage settings across different environments.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/advanced/settings.md#_snippet_5

LANGUAGE: Python
CODE:
```
from pydantic import BaseSettings
from pydantic_settings import SettingsConfigDict

class Settings(BaseSettings):
    admin_email: str
    app_name: str

    model_config = SettingsConfigDict(env_file=".env")
```

----------------------------------------

TITLE: Creating Database Tables on FastAPI Startup
DESCRIPTION: This code snippet demonstrates how to create all defined database tables using `SQLModel.metadata.create_all(engine)` when the FastAPI application starts up. This is achieved by decorating a function with `@app.on_event("startup")`, ensuring the database schema is initialized before handling requests.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/sql-databases.md#_snippet_5

LANGUAGE: Python
CODE:
```
@app.on_event("startup")
def on_startup():
    SQLModel.metadata.create_all(engine)
```

----------------------------------------

TITLE: Defining Path Operations with APIRouter
DESCRIPTION: Illustrates how to define path operations (GET, POST, etc.) using an `APIRouter` instance, similar to how they are defined directly on a `FastAPI` application, supporting all the same parameters.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/bigger-applications.md#_snippet_4

LANGUAGE: Python
CODE:
```
from fastapi import APIRouter

router = APIRouter()

@router.get("/users/", tags=["users"])
async def read_users():
    return [{"username": "Rick"}, {"username": "Morty"}]


@router.get("/users/me", tags=["users"])
async def read_user_me():
    return {"username": "current user"}


@router.get("/users/{username}", tags=["users"])
async def read_user(username: str):
    return {"username": username}
```

----------------------------------------

TITLE: Defining a SQLModel Hero Table Model in Python
DESCRIPTION: Defines the `Hero` class as a SQLModel table, mapping it to a database table. It specifies fields like `id` (primary key), `name` (indexed), `secret_name`, and `age` (indexed), inheriting from `SQLModel` and using `Field` for database column configuration.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/tutorial/sql-databases.md#_snippet_1

LANGUAGE: python
CODE:
```
from typing import Optional

from sqlmodel import Field, SQLModel


class Hero(SQLModel, table=True):
    id: Optional[int] = Field(default=None, primary_key=True)
    name: str = Field(index=True)
    secret_name: str
    age: Optional[int] = Field(default=None, index=True)
```

----------------------------------------

TITLE: Path and Query Parameter Numeric Validation: Floats and Ranges
DESCRIPTION: This comprehensive snippet demonstrates numeric validations for both path and query parameters, including float values. It applies `gt` (greater than) and `lt` (less than) to a `float` query parameter `size`, ensuring it's strictly between 0 and 10.5, while also showing validations for `item_id` and `q`.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/path-params-numeric-validations.md#_snippet_8

LANGUAGE: Python
CODE:
```
async def read_items(
    item_id: Annotated[int, Path(title="The ID of the item to get", gt=0, le=1000)],
    q: Annotated[str, Query(alias="item-query", min_length=3, max_length=50, regex="^fixedquery$")] | None = None,
    size: Annotated[float, Query(gt=0, lt=10.5)] = 0
):
```

----------------------------------------

TITLE: Defining a SQLModel Table Model for Heroes
DESCRIPTION: This Python class defines a `Hero` table model using SQLModel. It specifies `id` as the primary key (auto-incrementing integer), `name` as an indexed string, and `secret_name` as a required string. The `table=True` attribute marks it as a database table.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/sql-databases.md#_snippet_1

LANGUAGE: Python
CODE:
```
from typing import Optional

from sqlmodel import Field, SQLModel


class Hero(SQLModel, table=True):
    id: Optional[int] = Field(default=None, primary_key=True)
    name: str = Field(index=True)
    secret_name: str
    age: Optional[int] = Field(default=None, index=True)
```

----------------------------------------

TITLE: Setting FastAPI Application Command in Dockerfile
DESCRIPTION: This Docker `CMD` instruction defines the default command to execute when the container starts. It runs the FastAPI application using `fastapi run`, which internally uses Uvicorn, on port 80. Using the 'exec' form (list of strings) is crucial for proper signal handling and graceful application shutdown.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/deployment/docker.md#_snippet_5

LANGUAGE: Dockerfile
CODE:
```
CMD ["fastapi", "run", "app/main.py", "--port", "80"]
```

----------------------------------------

TITLE: Creating a Pydantic v1 `Settings` Object
DESCRIPTION: This Python code defines a `Settings` class inheriting from `BaseSettings` (Pydantic v1), allowing the application to load configuration from environment variables. It declares typed attributes with optional default values, enabling Pydantic's validation and type conversion for settings like `app_name`, `admin_email`, and `items_per_user`.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/advanced/settings.md#_snippet_12

LANGUAGE: Python
CODE:
```
from pydantic import BaseSettings


class Settings(BaseSettings):
    app_name: str = "Awesome API"
    admin_email: str
    items_per_user: int = 50


settings = Settings()
```

----------------------------------------

TITLE: Database Session Dependency with Yield in FastAPI
DESCRIPTION: This dependency function `get_db` creates a database session. The session is yielded for use in path operations. The `finally` block ensures the session is closed after the response is generated, demonstrating resource cleanup with `yield`.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/dependencies/dependencies-with-yield.md#_snippet_0

LANGUAGE: Python
CODE:
```
from sqlalchemy.orm import Session
from fastapi import Depends, FastAPI

# Assume SessionLocal is configured, e.g.:
# from sqlalchemy import create_engine
# from sqlalchemy.orm import sessionmaker
# SQLALCHEMY_DATABASE_URL = "sqlite:///./sql_app.db"
# engine = create_engine(SQLALCHEMY_DATABASE_URL, connect_args={"check_same_thread": False})
# SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)

def get_db():
    db = SessionLocal()
    try:
        yield db # This value is injected
    finally:
        db.close() # This runs after response
```

----------------------------------------

TITLE: FastAPI CMD with TLS Termination Proxy Support
DESCRIPTION: This Docker `CMD` instruction configures the FastAPI application to correctly handle requests when deployed behind a TLS termination proxy (e.g., Nginx, Traefik). The `--proxy-headers` option instructs Uvicorn (via the FastAPI CLI) to trust X-Forwarded-For/Proto headers, ensuring correct identification of the client's IP and protocol.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/deployment/docker.md#_snippet_8

LANGUAGE: Dockerfile
CODE:
```
CMD ["fastapi", "run", "app/main.py", "--proxy-headers", "--port", "80"]
```

----------------------------------------

TITLE: Securing FastAPI Endpoint with OAuth2 Dependency
DESCRIPTION: This snippet demonstrates how to secure a FastAPI path operation by injecting the 'oauth2_scheme' as a dependency. FastAPI automatically checks for an 'Authorization' header with a Bearer token. If valid, the token string is passed to the 'token' parameter; otherwise, a 401 Unauthorized error is returned.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/security/first-steps.md#_snippet_4

LANGUAGE: Python
CODE:
```
async def read_users_me(token: str = Depends(oauth2_scheme)):
```

----------------------------------------

TITLE: Defining HeroBase Model for Shared Fields
DESCRIPTION: This snippet defines `HeroBase`, a SQLModel class that serves as a base for other hero-related models. It includes common fields like `name` (string) and `age` (optional integer), promoting code reuse and consistency across different model variations.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/sql-databases.md#_snippet_11

LANGUAGE: Python
CODE:
```
class HeroBase(SQLModel):
    name: str
    age: int | None = None
```

----------------------------------------

TITLE: Running FastAPI Application with Uvicorn
DESCRIPTION: This command starts the FastAPI application using Uvicorn, a lightning-fast ASGI server. The '--reload' flag enables automatic server restarts upon code changes, which is useful for development. The output confirms the server is running and accessible at the specified URL.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/advanced/sub-applications.md#_snippet_3

LANGUAGE: Bash
CODE:
```
uvicorn main:app --reload
```

----------------------------------------

TITLE: Configure APIRouter with prefix, tags, responses, and dependencies for items
DESCRIPTION: This snippet illustrates how to use FastAPI's `APIRouter` to group related path operations for 'items'. It demonstrates applying common configurations such as a path prefix (`/items`), tags (`items`), extra responses, and shared dependencies (like the `X-Token` dependency) directly to the router, reducing redundancy in individual path operation definitions.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/bigger-applications.md#_snippet_5

LANGUAGE: Python
CODE:
```
from typing import Annotated

from fastapi import APIRouter, Depends, HTTPException

from ..dependencies import get_token_header

router = APIRouter(
    prefix="/items",
    tags=["items"],
    dependencies=[Depends(get_token_header)],
    responses={404: {"description": "Not found"}},
)


@router.get("/")
async def read_items():
    return [{"item_id": "Foo"}, {"item_id": "Bar"}]


@router.get("/{item_id}")
async def read_item(item_id: str):
    return {"item_id": item_id}

```

----------------------------------------

TITLE: Add Process Time Header with FastAPI Middleware
DESCRIPTION: Provides a complete example of an HTTP middleware that measures the time taken to process a request and adds it as an X-Process-Time header to the response. This demonstrates executing code both before (start_time) and after (process_time, response.headers) the path operation.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/middleware.md#_snippet_1

LANGUAGE: Python
CODE:
```
import time
from fastapi import FastAPI, Request
from starlette.responses import Response

app = FastAPI()

@app.middleware("http")
async def add_process_time_header(request: Request, call_next):
    start_time = time.perf_counter()
    response = await call_next(request)
    process_time = time.perf_counter() - start_time
    response.headers["X-Process-Time"] = str(process_time)
    return response

# Example path operation to test the middleware
@app.get("/")
async def read_root():
    return {"message": "Hello World"}
```

----------------------------------------

TITLE: Dockerfile for FastAPI Application
DESCRIPTION: This Dockerfile defines the steps to build a Docker image for a FastAPI application. It starts from a Python 3.9 base image, sets the working directory, copies `requirements.txt`, installs dependencies, and then copies the application code into the image.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/deployment/docker.md#_snippet_4

LANGUAGE: Dockerfile
CODE:
```
# (1)!
FROM python:3.9

# (2)!
WORKDIR /code

# (3)!
COPY ./requirements.txt /code/requirements.txt

# (4)!
RUN pip install --no-cache-dir --upgrade -r /code/requirements.txt

# (5)!
COPY ./app /code/app
```

----------------------------------------

TITLE: Returning Data from FastAPI Endpoint
DESCRIPTION: This Python snippet demonstrates a return statement within a FastAPI endpoint. It constructs a dictionary containing `item_name` (accessed from an `item` object, likely a Pydantic model) and `item_id` (a path parameter), which FastAPI automatically serializes into a JSON response.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/index.md#_snippet_8

LANGUAGE: Python
CODE:
```
    return {"item_name": item.name, "item_id": item_id}
```

----------------------------------------

TITLE: Implementing FastAPI Lifespan Function Definition (Python)
DESCRIPTION: This code defines the `lifespan` async function, decorated with `@asynccontextmanager`, which is used by FastAPI to manage application startup and shutdown. The `yield` keyword separates the startup logic (executed before requests) from the shutdown logic (executed after requests), allowing for proper resource initialization and cleanup.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/advanced/events.md#_snippet_1

LANGUAGE: Python
CODE:
```
@asynccontextmanager
async def lifespan(app: FastAPI):
    # Load the ML model
    print("Loading ML model")
    models["my_model"] = "Some ML Model" # Simulate loading
    yield
```

----------------------------------------

TITLE: Importing Depends for Dependency Injection in FastAPI
DESCRIPTION: This snippet shows how to import the `Depends` function from the `fastapi` library. `Depends` is primarily used for declaring dependencies that FastAPI will resolve and inject into path operation functions, enabling dependency injection for various purposes like database sessions, authentication, or configuration.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/reference/dependencies.md#_snippet_0

LANGUAGE: python
CODE:
```
from fastapi import Depends
```

----------------------------------------

TITLE: Defining Pydantic Models (Python 3.6+)
DESCRIPTION: Introduces Pydantic models, demonstrating how to define a data model by inheriting from `BaseModel` and specifying field types. This model can then be used for data validation and parsing, compatible with Python 3.6 and newer.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/python-types.md#_snippet_8

LANGUAGE: Python
CODE:
```
from pydantic import BaseModel
from typing import Optional

class Item(BaseModel):
    name: str
    description: Optional[str] = None
    price: float
    tax: Optional[float] = None
```

----------------------------------------

TITLE: Defining File Parameters with UploadFile in FastAPI
DESCRIPTION: Illustrates how to define a file parameter in a FastAPI path operation function using the `UploadFile` type hint. This approach utilizes a 'spooled' temporary file, making it highly efficient for handling large files without excessive memory consumption.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/request-files.md#_snippet_3

LANGUAGE: Python
CODE:
```
async def create_upload_file(file: UploadFile):
```

----------------------------------------

TITLE: Defining a Basic FastAPI Application with Models
DESCRIPTION: This snippet defines a simple FastAPI application with a `POST` endpoint for creating items. It uses Pydantic models `Item` for request body validation and `MessageResponse` for the response model, demonstrating how FastAPI automatically generates OpenAPI schema from these definitions.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/advanced/generate-clients.md#_snippet_0

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI
from pydantic import BaseModel

class Item(BaseModel):
    name: str
    price: float

class MessageResponse(BaseModel):
    message: str

app = FastAPI()

@app.post("/items/", response_model=MessageResponse)
async def create_item(item: Item):
    return {"message": f"Item '{item.name}' with price {item.price} created."}
```

----------------------------------------

TITLE: Declaring Optional Query Parameters - FastAPI Python
DESCRIPTION: Shows how to define optional query parameters by setting their default value to None. If the parameter is not provided in the URL, its value will be None.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/query-params.md#_snippet_1

LANGUAGE: Python
CODE:
```
from typing import Optional
from fastapi import FastAPI

app = FastAPI()

@app.get("/items/{item_id}")
async def read_item(item_id: str, q: Optional[str] = None):
    if q:
        return {"item_id": item_id, "q": q}
    return {"item_id": item_id}
```

----------------------------------------

TITLE: Inheriting Pydantic Models for User Operations
DESCRIPTION: This snippet demonstrates Pydantic model inheritance, defining UserBase as a common base. UserCreate extends it with a required password, UserUpdate makes the password optional for updates, and UserInDB includes a hashed password, showcasing model reuse and specialization for different API operations.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/extra-models.md#_snippet_7

LANGUAGE: Python
CODE:
```
from typing import Optional
from pydantic import BaseModel

class UserBase(BaseModel):
    username: str
    email: Optional[str] = None
    full_name: Optional[str] = None

class UserCreate(UserBase):
    password: str

class UserUpdate(UserBase):
    password: Optional[str] = None

class UserInDB(UserBase):
    hashed_password: str
```

----------------------------------------

TITLE: Basic FastAPI Application Code
DESCRIPTION: This Python code defines a simple FastAPI application with two endpoints: a root endpoint (`/`) returning 'Hello World' and an item endpoint (`/items/{item_id}`) demonstrating path parameters and optional query parameters. It serves as the entry point for the web service.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/deployment/docker.md#_snippet_3

LANGUAGE: Python
CODE:
```
from typing import Union

from fastapi import FastAPI

app = FastAPI()


@app.get("/")
def read_root():
    return {"Hello": "World"}


@app.get("/items/{item_id}")
def read_item(item_id: int, q: Union[str, None] = None):
    return {"item_id": item_id, "q": q}
```

----------------------------------------

TITLE: Setting a Dependency Override in FastAPI for Testing
DESCRIPTION: This snippet demonstrates how to replace an original dependency function with a mock implementation using `app.dependency_overrides`. This is crucial for testing specific parts of your application in isolation, allowing you to control the behavior of external services or complex logic without actual calls.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/advanced/testing-dependencies.md#_snippet_0

LANGUAGE: Python
CODE:
```
app.dependency_overrides[get_current_active_user] = override_get_current_active_user
```

----------------------------------------

TITLE: Importing Depends for Dependency Injection in FastAPI
DESCRIPTION: This snippet shows the essential import statement for `Depends` from the `fastapi` module. `Depends` is the core utility used to declare and inject dependencies into FastAPI path operation functions, enabling the framework to manage their lifecycle and provision.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/dependencies/index.md#_snippet_1

LANGUAGE: Python
CODE:
```
from fastapi import Depends
```

----------------------------------------

TITLE: Defining Path Operation with Extra Data Types in FastAPI
DESCRIPTION: This snippet demonstrates a FastAPI path operation that utilizes various advanced Python data types as parameters, including UUID, datetime objects (datetime, date, time, timedelta), and Set. FastAPI, powered by Pydantic, automatically handles data conversion, validation, and documentation for these types, allowing developers to use native Python types directly.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/extra-data-types.md#_snippet_0

LANGUAGE: Python
CODE:
```
from datetime import datetime, date, time, timedelta
from typing import Set
from uuid import UUID

from fastapi import FastAPI

app = FastAPI()

@app.put("/items/{item_id}")
async def update_item(
    item_id: UUID,
    start_datetime: datetime,
    end_date: date,
    process_after: time,
    repeat_at: timedelta,
    items_set: Set[str],
):
    return {
        "item_id": item_id,
        "start_datetime": start_datetime,
        "end_date": end_date,
        "process_after": process_after,
        "repeat_at": repeat_at,
        "items_set": list(items_set),
    }
```

----------------------------------------

TITLE: Reading Multiple Heroes with Pagination in FastAPI
DESCRIPTION: This FastAPI GET endpoint retrieves a list of `Hero` objects from the database. It supports pagination through `offset` and `limit` query parameters, allowing clients to fetch heroes in chunks. The `select(Hero)` statement is used to query the database via the `SessionDep`.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/tutorial/sql-databases.md#_snippet_3

LANGUAGE: Python
CODE:
```
@app.get("/heroes/", response_model=list[Hero])
def read_heroes(session: SessionDep, offset: int = 0, limit: int = Field(default=100, le=100)):
    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()
    return heroes
```

----------------------------------------

TITLE: Testing a Basic FastAPI Application with TestClient
DESCRIPTION: This snippet demonstrates how to use `TestClient` to test a simple FastAPI application. It shows importing `TestClient`, initializing it with the FastAPI app, defining a test function following `pytest` conventions, and making a GET request to assert the response status code and JSON content.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/testing.md#_snippet_0

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI
from fastapi.testclient import TestClient

app = FastAPI()

@app.get("/")
async def read_main():
    return {"msg": "Hello World"}

client = TestClient(app)

def test_read_main():
    response = client.get("/")
    assert response.status_code == 200
    assert response.json() == {"msg": "Hello World"}
```

----------------------------------------

TITLE: Defining Multiple Levels of Nested Pydantic Models
DESCRIPTION: This comprehensive example demonstrates defining multiple interconnected Pydantic models (`Image`, `Item`, `Offer`) to create deeply nested data structures. This allows for robust validation and serialization of complex hierarchical data, such as an offer containing multiple items, each with its own images.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/body-nested-models.md#_snippet_10

LANGUAGE: Python
CODE:
```
from typing import List, Optional
from pydantic import BaseModel, HttpUrl

class Image(BaseModel):
    url: HttpUrl
    name: str

class Item(BaseModel):
    name: str
    description: Optional[str] = None
    price: float
    tax: Optional[float] = None
    tags: List[str] = []
    images: Optional[List[Image]] = None

class Offer(BaseModel):
    name: str
    description: Optional[str] = None
    price: float
    items: List[Item]
```

----------------------------------------

TITLE: Creating a Hero in FastAPI with SQLModel
DESCRIPTION: This FastAPI route handles the creation of a new `Hero` object. It receives a `Hero` instance from the request body, adds it to the database session, commits the changes, refreshes the `hero` object to get its database-generated ID, and then returns the created hero.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/sql-databases.md#_snippet_6

LANGUAGE: Python
CODE:
```
@router.post("/heroes/", response_model=Hero)
def create_hero(hero: Hero, session: SessionDep):
    session.add(hero)
    session.commit()
    session.refresh(hero)
    return hero
```

----------------------------------------

TITLE: Defining FastAPI Application with Item Model and Endpoints (Python)
DESCRIPTION: This Python code defines a FastAPI application with a `BaseModel` for `Item` data validation and three endpoints: a root GET endpoint, a GET endpoint for items with path and optional query parameters, and a PUT endpoint for updating items. It demonstrates type hints and Pydantic for data modeling.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/index.md#_snippet_5

LANGUAGE: Python
CODE:
```
from typing import Union

from fastapi import FastAPI
from pydantic import BaseModel

app = FastAPI()


class Item(BaseModel):
    name: str
    price: float
    is_offer: Union[bool, None] = None


@app.get("/")
def read_root():
    return {"Hello": "World"}


@app.get("/items/{item_id}")
def read_item(item_id: int, q: Union[str, None] = None):
    return {"item_id": item_id, "q": q}


@app.put("/items/{item_id}")
def update_item(item_id: int, item: Item):
    return {"item_name": item.name, "item_id": item_id}
```

----------------------------------------

TITLE: Applying String Length Validation with Query (Python 3.10+)
DESCRIPTION: This snippet demonstrates applying a `max_length` validation to an optional query parameter `q` using `Query` within `Annotated` in Python 3.10+. FastAPI will ensure the string length does not exceed 50 characters and provide clear error messages if violated.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/tutorial/query-params-str-validations.md#_snippet_7

LANGUAGE: Python
CODE:
```
q: Annotated[str | None, Query(max_length=50)] = None
```

----------------------------------------

TITLE: Generating Secure JWT Secret Key with OpenSSL
DESCRIPTION: This console command uses OpenSSL to generate a 32-byte hexadecimal string, suitable for use as a cryptographically secure secret key for signing JWT tokens. The output should be copied and assigned to the `SECRET_KEY` variable in your application.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/security/oauth2-jwt.md#_snippet_3

LANGUAGE: console
CODE:
```
$ openssl rand -hex 32
```

----------------------------------------

TITLE: Importing Path and Annotated in FastAPI
DESCRIPTION: This snippet demonstrates how to import `FastAPI` and `Path` from the `fastapi` library, along with `Annotated` from the `typing` module. `Annotated` is recommended for declaring metadata and validations in FastAPI versions 0.95.0 and above.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/path-params-numeric-validations.md#_snippet_0

LANGUAGE: Python
CODE:
```
from typing import Annotated
from fastapi import FastAPI, Path
```

----------------------------------------

TITLE: Importing Path and Annotated in FastAPI
DESCRIPTION: This snippet imports `Annotated` from `typing` and `FastAPI`, `Path` from `fastapi`. `Annotated` is crucial for adding metadata to type hints in FastAPI versions 0.95.0+, enabling clearer and more robust parameter definitions. This setup is a prerequisite for using advanced validation features.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ru/docs/tutorial/path-params-numeric-validations.md#_snippet_0

LANGUAGE: Python
CODE:
```
from typing import Annotated

from fastapi import FastAPI, Path
```

----------------------------------------

TITLE: Combining Pydantic Dataclasses with Nested Structures in FastAPI
DESCRIPTION: This snippet demonstrates using `pydantic.dataclasses` as a drop-in replacement for standard `dataclasses` to define complex, nested data structures in FastAPI. It shows how to define `Item` and `Author` dataclasses, where `Author` contains a list of `Item`s. The example also illustrates using these dataclasses for both request bodies (list of `Item`s) and response models (list of `Author`s), showcasing FastAPI's ability to serialize and validate complex data.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/advanced/dataclasses.md#_snippet_2

LANGUAGE: Python
CODE:
```
from dataclasses import field
from typing import List, Optional

from fastapi import FastAPI
from pydantic.dataclasses import dataclass


@dataclass
class Item:
    name: str
    price: float
    tags: List[str] = field(default_factory=list)


@dataclass
class Author:
    name: str
    items: List[Item]


app = FastAPI()


@app.post("/authors/", response_model=List[Author])
def create_authors(authors: List[Author]):
    return authors


@app.post("/items/", response_model=List[Item])
async def create_items(items: List[Item]):
    return items


@app.get("/authors/me/", response_model=Author)
async def get_me():
    return {
        "name": "John Doe",
        "items": [
            {"name": "Foo", "price": 42},
            {"name": "Bar", "price": 24}
        ]
    }


@app.get("/items/me/", response_model=List[Item])
def get_my_items():
    return [
        {"name": "Foo", "price": 42},
        {"name": "Bar", "price": 24}
    ]
```

----------------------------------------

TITLE: Importing Query and Annotated for FastAPI Validation (Python)
DESCRIPTION: This snippet shows the necessary imports for adding advanced validation to FastAPI parameters. It imports `Annotated` from the `typing` module, used for adding metadata to type hints, and `Query` from `fastapi`, which is essential for defining query parameter specific validations.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/query-params-str-validations.md#_snippet_1

LANGUAGE: Python
CODE:
```
from typing import Annotated
from fastapi import FastAPI, Query
```

----------------------------------------

TITLE: Declaring Response Model in FastAPI
DESCRIPTION: This snippet demonstrates how to declare a response model using the `response_model` parameter in a FastAPI path operation decorator. The `Item` Pydantic model is used to define the structure and validation for the API's response data.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/tutorial/response-model.md#_snippet_0

LANGUAGE: Python
CODE:
```
from typing import Union

from fastapi import FastAPI
from pydantic import BaseModel

app = FastAPI()


class Item(BaseModel):
    name: str
    description: Union[str, None] = None
    price: float
    tax: Union[float, None] = None


@app.post("/items/", response_model=Item)
async def create_item(item: Item):
    return item
```

----------------------------------------

TITLE: Importing Depends for Dependency Injection in FastAPI
DESCRIPTION: This snippet shows the essential import statement for `Depends` from the `fastapi` module. `Depends` is used to declare dependencies within FastAPI path operation functions, enabling the framework to manage and inject required values.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/dependencies/index.md#_snippet_1

LANGUAGE: Python
CODE:
```
from fastapi import Depends
```

----------------------------------------

TITLE: Deleting a Single Hero by ID with FastAPI and SQLModel
DESCRIPTION: Implements a FastAPI DELETE endpoint `/heroes/{hero_id}` to remove a hero from the database by their ID. It retrieves the hero, raises a 404 if not found, then deletes the hero from the session, commits the change, and returns a success message.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/tutorial/sql-databases.md#_snippet_9

LANGUAGE: python
CODE:
```
@app.delete("/heroes/{hero_id}")
def delete_hero(hero_id: int, session: SessionDep):
    hero = session.get(Hero, hero_id)
    if not hero:
        raise HTTPException(status_code=404, detail="Hero not found")
    session.delete(hero)
    session.commit()
    return {"ok": True}
```

----------------------------------------

TITLE: Configuring CORS Middleware in FastAPI (Python)
DESCRIPTION: This snippet demonstrates how to add and configure `CORSMiddleware` to a FastAPI application. It defines a list of allowed origins and sets parameters to permit credentials, all HTTP methods, and all headers for cross-origin requests. This setup is crucial for enabling web applications hosted on different domains to interact with the FastAPI backend.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/cors.md#_snippet_0

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI
from starlette.middleware.cors import CORSMiddleware

app = FastAPI()

origins = [
    "http://localhost",
    "http://localhost:8080",
]

app.add_middleware(
    CORSMiddleware,
    allow_origins=origins,
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)


@app.get("/")
async def main():
    return {"message": "Hello World"}
```

----------------------------------------

TITLE: Defining a Class-Based FastAPI Dependency
DESCRIPTION: This snippet defines the `CommonQueryParams` class, designed to be used as a FastAPI dependency. Its `__init__` method parameters (`q`, `skip`, `limit`) are automatically resolved by FastAPI from query parameters, providing structured access and improved type hinting compared to dictionary-based dependencies.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/dependencies/classes-as-dependencies.md#_snippet_3

LANGUAGE: Python
CODE:
```
from typing import Union

class CommonQueryParams:
    def __init__(self, q: Union[str, None] = None, skip: int = 0, limit: int = 100):
        self.q = q
        self.skip = skip
        self.limit = limit
```

----------------------------------------

TITLE: Incorrect Order of Path Operations in FastAPI (Python)
DESCRIPTION: Demonstrates a common pitfall where a general path operation (`/users/{user_id}`) is defined before a specific one (`/users/me`). In this scenario, the general path will always match first, preventing the specific path from ever being reached.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/path-params.md#_snippet_7

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI

app = FastAPI()

@app.get("/users/{user_id}")
async def read_user(user_id: str):
    return {"user_id": user_id}

@app.get("/users/me")
async def read_user_me():
    return {"user_id": "the current user"}
```

----------------------------------------

TITLE: Defining Custom Dependencies in FastAPI
DESCRIPTION: Shows how to define a custom dependency function in FastAPI, which can be used to validate headers or perform other common tasks across multiple path operations. This example validates an 'X-Token' header.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/bigger-applications.md#_snippet_5

LANGUAGE: Python
CODE:
```
from fastapi import Header, HTTPException

async def get_token_header(x_token: str = Header()):
    if x_token != "fake-super-secret-token":
        raise HTTPException(status_code=400, detail="X-Token header invalid")
```

----------------------------------------

TITLE: Implementing StreamingResponse in FastAPI
DESCRIPTION: Demonstrates how to use StreamingResponse in FastAPI to stream content using an asynchronous generator. This is useful for large files, real-time data, or any scenario where the response body needs to be sent in chunks rather than all at once.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/advanced/custom-response.md#_snippet_10

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI
from fastapi.responses import StreamingResponse
import asyncio

app = FastAPI()

async def generate_big_file():
    for i in range(10):
        yield f"line {i}\\n"
        await asyncio.sleep(0.1)

@app.get("/stream-file")
async def stream_file():
    return StreamingResponse(generate_big_file(), media_type="text/plain")
```

----------------------------------------

TITLE: Upgrading FastAPI Application with PUT Request Body and Pydantic - Python
DESCRIPTION: This snippet enhances the FastAPI application by adding a `PUT` endpoint (`/items/{item_id}`) that accepts a request body. It introduces `Pydantic` to define a `BaseModel` (`Item`) for data validation and serialization of the incoming JSON payload, demonstrating how to handle structured request bodies.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/index.md#_snippet_7

LANGUAGE: Python
CODE:
```
from typing import Union

from fastapi import FastAPI
from pydantic import BaseModel

app = FastAPI()


class Item(BaseModel):
    name: str
    price: float
    is_offer: Union[bool, None] = None


@app.get("/")
def read_root():
    return {"Hello": "World"}


@app.get("/items/{item_id}")
def read_item(item_id: int, q: Union[str, None] = None):
    return {"item_id": item_id, "q": q}


@app.put("/items/{item_id}")
def update_item(item_id: int, item: Item):
    return {"item_name": item.name, "item_id": item_id}
```

----------------------------------------

TITLE: Defining Hero Table Model with Inheritance
DESCRIPTION: This snippet defines the `Hero` table model, which inherits from `HeroBase` to include shared fields and adds specific fields like `id` (primary key, auto-generated) and `secret_name`. Setting `table=True` designates it as a database table model in SQLModel, combining Pydantic validation with ORM capabilities.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/sql-databases.md#_snippet_12

LANGUAGE: Python
CODE:
```
class HeroBase(SQLModel):
    name: str
    age: int | None = None

class Hero(HeroBase, table=True):
    id: int | None = Field(default=None, primary_key=True)
    secret_name: str
```

----------------------------------------

TITLE: Testing FastAPI with TestClient and Context Manager - Python
DESCRIPTION: This snippet demonstrates how to initialize FastAPI's `TestClient` and use it as a context manager (`with client:`) within a test function. Using `TestClient` as a context manager automatically triggers the application's `startup` and `shutdown` event handlers, ensuring a complete test environment. It then performs a GET request to the root endpoint and asserts the response status code and JSON content.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/advanced/testing-events.md#_snippet_0

LANGUAGE: Python
CODE:
```
client = TestClient(app)

def test_read_root():
    with client:
        response = client.get("/")
        assert response.status_code == 200
        assert response.json() == {"Hello": "World"}
```

----------------------------------------

TITLE: Defining API Responses with Union Types (anyOf) - Python
DESCRIPTION: This snippet illustrates how to use `typing.Union` in FastAPI's `response_model` to declare that an API endpoint can return one of several possible Pydantic model types. This translates to `anyOf` in the OpenAPI schema, providing flexibility in response structures. It's important to list more specific types before less specific ones within the `Union` for proper validation.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ko/docs/tutorial/extra-models.md#_snippet_3

LANGUAGE: Python
CODE:
```
from typing import Union
from fastapi import FastAPI
from pydantic import BaseModel

app = FastAPI()

class CarItem(BaseModel):
    name: str
    type: str = "car"

class PlaneItem(BaseModel):
    name: str
    type: str = "plane"
    wings: int

@app.get("/items/{item_id}", response_model=Union[PlaneItem, CarItem])
async def read_item(item_id: str):
    if item_id == "plane":
        return PlaneItem(name="Boeing 747", wings=4)
    return CarItem(name="Tesla Model S")
```

----------------------------------------

TITLE: Creating Database Tables with SQLModel
DESCRIPTION: Defines a function `create_db_and_tables` that uses `SQLModel.metadata.create_all(engine)` to create all defined table models in the database connected via the engine. This function ensures the database schema matches the defined SQLModel classes.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/tutorial/sql-databases.md#_snippet_3

LANGUAGE: python
CODE:
```
def create_db_and_tables():
    SQLModel.metadata.create_all(engine)
```

----------------------------------------

TITLE: Running FastAPI in Development Mode with CLI
DESCRIPTION: This command initiates the FastAPI development server using `fastapi dev`. It automatically detects the FastAPI application instance (e.g., `app` from `main.py`), enables auto-reload for code changes, and listens on `127.0.0.1` (localhost). It's suitable for local development due to its resource-intensive auto-reload feature and provides immediate feedback on code modifications.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/fastapi-cli.md#_snippet_0

LANGUAGE: console
CODE:
```
$ fastapi dev main.py

  FastAPI   Starting development server 🚀

             Searching for package file structure from directories with
             __init__.py files
             Importing from /home/user/code/awesomeapp

   module   🐍 main.py

     code   Importing the FastAPI app object from the module with the
             following code:

             from main import app

      app   Using import string: main:app

   server   Server started at http://127.0.0.1:8000
   server   Documentation at http://127.0.0.1:8000/docs

      tip   Running in development mode, for production use:
             fastapi run

             Logs:

     INFO   Will watch for changes in these directories:
             ['/home/user/code/awesomeapp']
     INFO   Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to
             quit)
     INFO   Started reloader process [383138] using WatchFiles
     INFO   Started server process [383153]
     INFO   Waiting for application startup.
     INFO   Application startup complete.
```

----------------------------------------

TITLE: Declaring Query Parameters with Pydantic Model in FastAPI
DESCRIPTION: This snippet demonstrates how to define a group of related query parameters using a Pydantic `BaseModel`. The model fields automatically become query parameters, allowing for structured validation and reusability. The `Query(...)` dependency injects an instance of the model populated with request query data.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/query-param-models.md#_snippet_0

LANGUAGE: Python
CODE:
```
from typing import Optional

from fastapi import FastAPI, Query
from pydantic import BaseModel

app = FastAPI()


class CommonQueryParams(BaseModel):
    q: Optional[str] = None
    skip: int = 0
    limit: int = 100


@app.get("/items/")
async def read_items(commons: CommonQueryParams = Query(...)):
    response = {}
    if commons.q:
        response.update({"q": commons.q})
    items = [{"item_id": "Foo"}, {"item_id": "Bar"}]
    response.update({"items": items[commons.skip : commons.skip + commons.limit]})
    return response
```

----------------------------------------

TITLE: Defining a List of Nested Models (Python)
DESCRIPTION: This snippet shows how to define a field (`images`) as a list of nested Pydantic models (`List[Image]`). This allows the request body to contain an array of complex objects, with FastAPI handling validation and documentation for each item in the list.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/tutorial/body-nested-models.md#_snippet_9

LANGUAGE: Python
CODE:
```
images: List[Image]
```

----------------------------------------

TITLE: Running FastAPI with Uvicorn and Root Path (Console)
DESCRIPTION: This command starts the Uvicorn ASGI server for a FastAPI application, specifying `/api/v1` as the `root-path`. This ensures that the FastAPI application correctly generates URLs and handles requests when served behind a reverse proxy that strips this prefix.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/advanced/behind-a-proxy.md#_snippet_8

LANGUAGE: console
CODE:
```
uvicorn main:app --root-path /api/v1

<span style="color: green;">INFO</span>:     Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)
```

----------------------------------------

TITLE: Run FastAPI Development Server with Auto-Reload
DESCRIPTION: This console command shows how to start the FastAPI development server using `fastapi dev main.py`. It automatically detects the application, enables auto-reload for local development, and displays server information including the serving URL and API documentation links.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/README.md#_snippet_3

LANGUAGE: Console
CODE:
```
$ fastapi dev main.py

 ╭────────── FastAPI CLI - Development mode ───────────╮
 │                                                     │
 │  Serving at: http://127.0.0.1:8000                  │
 │                                                     │
 │  API docs: http://127.0.0.1:8000/docs               │
 │                                                     │
 │  Running in development mode, for production use:   │
 │                                                     │
 │  fastapi run                                        │
 │                                                     │
 ╰─────────────────────────────────────────────────────╯

INFO:     Will watch for changes in these directories: ['/home/user/code/awesomeapp']
INFO:     Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)
INFO:     Started reloader process [2248755] using WatchFiles
INFO:     Started server process [2248757]
INFO:     Waiting for application startup.
INFO:     Application startup complete.
```

----------------------------------------

TITLE: Running a FastAPI Application in Development Mode - Console
DESCRIPTION: This console command shows how to start the FastAPI development server using `fastapi dev main.py`. This command automatically detects the FastAPI application in `main.py` and runs it with Uvicorn, enabling auto-reload for local development. It outputs server URLs and status information.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/index.md#_snippet_5

LANGUAGE: console
CODE:
```
$ fastapi dev main.py

 ╭────────── FastAPI CLI - Development mode ───────────╮
 │                                                     │
 │  Serving at: http://127.0.0.1:8000                  │
 │                                                     │
 │  API docs: http://127.0.0.1:8000/docs               │
 │                                                     │
 │  Running in development mode, for production use:   │
 │                                                     │
 │  fastapi run                                        │
 │                                                     │
 ╰─────────────────────────────────────────────────────╯

INFO:     Will watch for changes in these directories: ['/home/user/code/awesomeapp']
INFO:     Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)
INFO:     Started reloader process [2248755] using WatchFiles
INFO:     Started server process [2248757]
INFO:     Waiting for application startup.
INFO:     Application startup complete.
```

----------------------------------------

TITLE: Performing Asynchronous HTTP Requests with httpx.AsyncClient (Python)
DESCRIPTION: This snippet demonstrates how to make an asynchronous GET request to a FastAPI application using `httpx.AsyncClient`. The `async with` statement ensures proper client lifecycle management, and `await` is used to wait for the response from the asynchronous endpoint.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/advanced/async-tests.md#_snippet_4

LANGUAGE: Python
CODE:
```
async with AsyncClient(app=app, base_url="http://test") as client:
    response = await client.get("/")
```

----------------------------------------

TITLE: Raising HTTPException for Not Found Items in FastAPI
DESCRIPTION: This snippet shows how to raise an `HTTPException` with a 404 status code and a custom detail message when a requested item is not found. This immediately terminates the request and sends the HTTP error to the client.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ja/docs/tutorial/handling-errors.md#_snippet_1

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI, HTTPException

app = FastAPI()

items = {"foo": "The Foo Wrestlers"}

@app.get("/items/{item_id}")
async def read_item(item_id: str):
    if item_id not in items:
        raise HTTPException(status_code=404, detail="Item not found")
    return {"item": items[item_id]}
```

----------------------------------------

TITLE: Optimizing Settings Loading with lru_cache in FastAPI
DESCRIPTION: This comprehensive snippet demonstrates the full integration of Pydantic settings with FastAPI, emphasizing the use of `@lru_cache` on `get_settings()`. This decorator ensures that the `Settings` object is instantiated and the .env file is read only once, improving performance by caching the result for subsequent calls.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/advanced/settings.md#_snippet_16

LANGUAGE: Python
CODE:
```
from functools import lru_cache

from fastapi import Depends, FastAPI
from pydantic_settings import BaseSettings, SettingsConfigDict
from typing_extensions import Annotated


class Settings(BaseSettings):
    app_name: str = "Awesome API"
    admin_email: str
    items_per_user: int = 50

    model_config = SettingsConfigDict(env_file=".env")


@lru_cache
def get_settings():
    return Settings()


app = FastAPI()


@app.get("/info")
async def info(settings: Annotated[Settings, Depends(get_settings)]):
    return {
        "app_name": settings.app_name,
        "admin_email": settings.admin_email,
        "items_per_user": settings.items_per_user,
    }
```

----------------------------------------

TITLE: Type Hinting with a Custom Model in Python
DESCRIPTION: This snippet illustrates how to use a custom class, `Item`, as a type hint for a variable `item`. FastAPI leverages such model type hints (e.g., Pydantic models) to automatically validate request bodies and generate API schemas.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/index.md#_snippet_7

LANGUAGE: Python
CODE:
```
item: Item
```

----------------------------------------

TITLE: Creating Database Tables on FastAPI Startup
DESCRIPTION: This Python code demonstrates how to create database tables when the FastAPI application starts up. It uses the `@app.on_event("startup")` decorator to execute the `create_db_and_tables()` function, which initializes the SQLModel metadata, ensuring the database schema is ready.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/tutorial/sql-databases.md#_snippet_1

LANGUAGE: Python
CODE:
```
@app.on_event("startup")
def on_startup():
    create_db_and_tables()
```

----------------------------------------

TITLE: Define a Shared APIRouter for Admin Operations
DESCRIPTION: This Python code defines a simple `APIRouter` named `admin_router` within `app/internal/admin.py`. This router is designed to be shared across multiple projects, containing specific path operations for administrative tasks without project-specific configurations.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/bigger-applications.md#_snippet_16

LANGUAGE: Python
CODE:
```
from fastapi import APIRouter

admin_router = APIRouter()

@admin_router.get("/admin_info")
async def get_admin_info():
    return {"message": "Admin info from admin router"}
```

----------------------------------------

TITLE: Full Path Operation with User Dependency (FastAPI)
DESCRIPTION: Illustrates a complete FastAPI path operation that leverages the `get_current_user` dependency. It shows how the resolved `User` object is received as a parameter and can be directly returned or used within the function, simplifying API endpoint logic.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/security/get-current-user.md#_snippet_5

LANGUAGE: Python
CODE:
```
@app.get("/users/me/")
async def read_users_me(current_user: User = Depends(get_current_user)):
    return current_user
```

----------------------------------------

TITLE: Reducing Model Duplication with Pydantic Inheritance - Python
DESCRIPTION: This example demonstrates how to use Pydantic model inheritance to minimize code duplication when defining multiple related models. By creating a `UserBase` model, common fields and their types are defined once and then inherited by specific models like `UserIn`, `UserOut`, and `UserInDB`, ensuring consistency and maintainability across different user data representations.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ko/docs/tutorial/extra-models.md#_snippet_2

LANGUAGE: Python
CODE:
```
from typing import Optional
from pydantic import BaseModel
from fastapi import FastAPI

app = FastAPI()

class UserBase(BaseModel):
    username: str
    email: Optional[str] = None
    full_name: Optional[str] = None

class UserIn(UserBase):
    password: str

class UserOut(UserBase):
    pass

class UserInDB(UserBase):
    hashed_password: str

def fake_password_hasher(password: str):
    return "supersecret" + password

def fake_save_user(user: UserInDB):
    # Imagine this saves to a database
    return user

@app.post("/users/", response_model=UserOut)
async def create_user(user_in: UserIn):
    hashed_password = fake_password_hasher(user_in.password)
    user_in_db = UserInDB(**user_in.model_dump(), hashed_password=hashed_password)
    user_saved = fake_save_user(user_in_db)
    return user_saved
```

----------------------------------------

TITLE: Defining Asynchronous Path Operation in FastAPI
DESCRIPTION: This snippet shows how to define an asynchronous path operation in FastAPI using `async def`. It correctly demonstrates the use of `await` to call another `async` function (`get_burgers`) from within an `async` path operation, ensuring proper asynchronous execution.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/async.md#_snippet_7

LANGUAGE: Python
CODE:
```
@app.get('/burgers')
async def read_burgers():
    burgers = await get_burgers(2)
    return burgers
```

----------------------------------------

TITLE: Configuring APIRouter Inclusion with Prefix, Tags, Dependencies, and Responses
DESCRIPTION: This example demonstrates how to include an APIRouter while applying additional configurations like a URL prefix, tags for OpenAPI documentation, global dependencies, and custom response definitions. These parameters override or extend the router's internal settings for the included routes.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/bigger-applications.md#_snippet_13

LANGUAGE: Python
CODE:
```
from fastapi import APIRouter

router = APIRouter()

@router.get("/some-admin-path")
def read_admin_path():
    return {"message": "Admin
```

----------------------------------------

TITLE: Running Uvicorn with Proxy Headers in Docker
DESCRIPTION: This `uvicorn` command is used when the FastAPI application is deployed behind a reverse proxy (e.g., Nginx, Traefik). The `--proxy-headers` flag instructs `uvicorn` to trust `X-Forwarded-For` and `X-Forwarded-Proto` headers, which are typically added by proxies to convey the original client's IP and protocol. This is crucial for correct IP logging and HTTPS detection when proxied.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/deployment/docker.md#_snippet_18

LANGUAGE: Dockerfile
CODE:
```
CMD ["uvicorn", "app.main:app", "--proxy-headers", "--host", "0.0.0.0", "--port", "80"]
```

----------------------------------------

TITLE: Declaring Scopes in FastAPI Path Operations and Dependencies (Python)
DESCRIPTION: This snippet demonstrates how to use `Security` to declare required scopes for both a path operation (`/users/me/items/` requiring `items`) and a sub-dependency (`get_current_active_user` requiring `me`). It shows how scopes can be nested and enforced at different levels of the dependency chain.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/advanced/security/oauth2-scopes.md#_snippet_0

LANGUAGE: Python
CODE:
```
from typing import Annotated
from fastapi import FastAPI, Depends, HTTPException, Security
from pydantic import BaseModel

app = FastAPI()

# Assume User and TokenData models are defined elsewhere
class User(BaseModel):
    username: str
    email: str | None = None
    full_name: str | None = None
    disabled: bool | None = None
    scopes: list[str] = []

# Assume get_current_user is defined elsewhere and handles token validation
async def get_current_user(token: str): # Simplified for this snippet's focus
    # ... token validation and user retrieval ...
    return User(username="testuser", scopes=["me", "items"])

async def get_current_active_user(
    current_user: Annotated[User, Security(get_current_user, scopes=["me"])]
):
    if current_user.disabled:
        raise HTTPException(status_code=400, detail="Inactive user")
    return current_user

@app.get("/users/me/items/")
async def read_own_items(
    current_user: Annotated[User, Security(get_current_active_user, scopes=["items"])]
):
    return {"message": f"Hello {current_user.username}, here are your items!"}
```

----------------------------------------

TITLE: Understanding Optional Type Hint for Required Parameters in Python
DESCRIPTION: This snippet demonstrates a function where a parameter is type-hinted as `Optional[str]` but is still required because it lacks a default value. It highlights that `Optional` means 'can be `None`', not 'is optional to provide', which can be a common point of confusion.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/python-types.md#_snippet_21

LANGUAGE: Python
CODE:
```
from typing import Optional

def say_hi(name: Optional[str]):
    if name is None:
        print("Hello, World!")
    else:
        print(f"Hello, {name}!")
```

----------------------------------------

TITLE: Numeric Path Validation: Greater Than and Less Than or Equal (gt, le)
DESCRIPTION: This snippet applies multiple numeric validations to the `item_id` path parameter. `gt=0` ensures the value is strictly greater than 0, and `le=1000` ensures it is less than or equal to 1000. FastAPI enforces these combined constraints, providing robust input validation and automatically generating appropriate error responses for invalid inputs.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ru/docs/tutorial/path-params-numeric-validations.md#_snippet_7

LANGUAGE: Python
CODE:
```
    item_id: Annotated[int, Path(title="The ID of the item to get", gt=0, le=1000)]
```

----------------------------------------

TITLE: Registering APIRouters with FastAPI Application
DESCRIPTION: This code shows how to integrate APIRouter instances into the main FastAPI application. The 'app.include_router()' method adds all defined routes from the router to the application's routing table.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/bigger-applications.md#_snippet_12

LANGUAGE: Python
CODE:
```
app.include_router(users.router)
app.include_router(items.router)
```

----------------------------------------

TITLE: Deactivating and Activating New Virtual Environment
DESCRIPTION: This sequence of commands shows how to properly switch between project virtual environments. It first deactivates the current environment, then activates the virtual environment for the new project, ensuring the correct Python and packages are used.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/virtual-environments.md#_snippet_11

LANGUAGE: console
CODE:
```
$ cd ~/code/prisoner-of-azkaban

// 你不需要在旧目录中操作停用，你可以在任何地方操作停用，甚至在转到另一个工程之后 😎
$ deactivate

// 激活 prisoner-of-azkaban/.venv 中的虚拟环境 🚀
$ source .venv/bin/activate

// 现在当你运行 python 时，它会在这个虚拟环境中找到安装的 sirius 包 ✨
$ python main.py

I solemnly swear 🐺
```

----------------------------------------

TITLE: Running FastAPI Application with Uvicorn (Console)
DESCRIPTION: This command starts the FastAPI application using Uvicorn. `main:app` specifies that the `app` object from `main.py` should be used. The `--reload` flag enables auto-reloading of the server when code changes are detected, which is useful for development.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/index.md#_snippet_3

LANGUAGE: console
CODE:
```
$ uvicorn main:app --reload

INFO:     Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)
INFO:     Started reloader process [28720]
INFO:     Started server process [28722]
INFO:     Waiting for application startup.
INFO:     Application startup complete.
```

----------------------------------------

TITLE: Creating a Session Dependency with FastAPI and SQLModel
DESCRIPTION: This Python snippet defines a FastAPI dependency using `yield` to provide a new `Session` for each request, ensuring a single session per request. It then creates an `Annotated` type alias `SessionDep` for simplified use throughout the application.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/tutorial/sql-databases.md#_snippet_0

LANGUAGE: Python
CODE:
```
def get_session():
    with Session(engine) as session:
        yield session


SessionDep = Annotated[Session, Depends(get_session)]
```

----------------------------------------

TITLE: Running FastAPI Application with Uvicorn
DESCRIPTION: This console command starts the FastAPI application using Uvicorn. `main:app` specifies that the `app` instance is located in `main.py`. The `--reload` flag enables automatic server restarts upon code changes, ideal for development.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/first-steps.md#_snippet_4

LANGUAGE: console
CODE:
```
$ uvicorn main:app --reload

INFO:     Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)
INFO:     Started reloader process [28720]
INFO:     Started server process [28722]
INFO:     Waiting for application startup.
INFO:     Application startup complete.
```

----------------------------------------

TITLE: Basic FastAPI Application Testing with TestClient
DESCRIPTION: This snippet demonstrates how to set up basic tests for a FastAPI application using `TestClient`. It shows importing `TestClient`, creating an instance with the FastAPI app, defining a `pytest` compatible test function, and making a GET request to assert the response status code and JSON content.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/testing.md#_snippet_1

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI
from fastapi.testclient import TestClient

app = FastAPI()

@app.get("/")
async def read_main():
    return {"msg": "Hello World"}

def test_read_main():
    client = TestClient(app)
    response = client.get("/")
    assert response.status_code == 200
    assert response.json() == {"msg": "Hello World"}
```

----------------------------------------

TITLE: Declaring Required Scopes for Path Operations and Dependencies
DESCRIPTION: This snippet illustrates how to enforce specific OAuth2 scopes for both a path operation (`/users/me/items/`) and a nested dependency (`get_current_active_user`). By using `Security` with a list of required scopes, FastAPI automatically validates the user's permissions, ensuring that only users with the `items` scope can access the items, and users with the `me` scope can be considered 'active'.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/advanced/security/oauth2-scopes.md#_snippet_2

LANGUAGE: Python
CODE:
```
from fastapi import Depends, Security
from pydantic import BaseModel
from typing import List, Optional

# Assume User model and get_current_user are defined elsewhere
class User(BaseModel):
    username: str
    email: Optional[str] = None
    full_name: Optional[str] = None
    disabled: Optional[bool] = None
    items: List[str] = [] # Example user data

# This dependency requires the 'me' scope
async def get_current_active_user(
    current_user: User = Security(get_current_user, scopes=["me"])
):
    return current_user

# This path operation requires the 'items' scope
@app.get("/users/me/items/")
async def read_own_items(
    current_user: User = Security(get_current_active_user, scopes=["items"])
):
    return current_user.items
```

----------------------------------------

TITLE: Reading a Single Hero by ID with FastAPI and SQLModel
DESCRIPTION: Defines a FastAPI GET endpoint `/heroes/{hero_id}` to fetch a single hero by their ID. It uses `session.get()` to retrieve the hero and raises an `HTTPException` with a 404 status if the hero is not found.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/tutorial/sql-databases.md#_snippet_8

LANGUAGE: python
CODE:
```
from fastapi import HTTPException

@app.get("/heroes/{hero_id}", response_model=Hero)
def read_hero(hero_id: int, session: SessionDep):
    hero = session.get(Hero, hero_id)
    if not hero:
        raise HTTPException(status_code=404, detail="Hero not found")
    return hero
```

----------------------------------------

TITLE: Dockerfile for Single-File FastAPI Application
DESCRIPTION: This Dockerfile defines the steps to build a Docker image for a FastAPI application where the main application file (main.py) is directly in the project root, not within an app directory. It sets the base image, working directory, copies requirements.txt for dependency installation leveraging caching, and then copies the main.py file.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/deployment/docker.md#_snippet_12

LANGUAGE: Dockerfile
CODE:
```
FROM python:3.9

WORKDIR /code

COPY ./requirements.txt /code/requirements.txt

RUN pip install --no-cache-dir --upgrade -r /code/requirements.txt

# (1)
COPY ./main.py /code/
```

----------------------------------------

TITLE: Starting Multiple Workers with `uvicorn` Command (Console)
DESCRIPTION: This snippet illustrates how to directly use the `uvicorn` command to run a FastAPI application with multiple worker processes. It includes options for specifying the host, port, and the number of workers, providing a direct way to manage the server's concurrency.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/deployment/server-workers.md#_snippet_1

LANGUAGE: Shell
CODE:
```
uvicorn main:app --host 0.0.0.0 --port 8080 --workers 4
```

----------------------------------------

TITLE: FastAPI Parameter Type Declaration: Complex Model
DESCRIPTION: Illustrates declaring a complex data model type, 'Item', for a request body or parameter in FastAPI. This leverages Pydantic for automatic data validation, serialization, and interactive documentation.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/README.md#_snippet_7

LANGUAGE: Python
CODE:
```
item: Item
```

----------------------------------------

TITLE: Define a custom X-Token header dependency in FastAPI
DESCRIPTION: This snippet demonstrates how to create a simple dependency function in FastAPI to read a custom `X-Token` header. It shows three variations for different Python versions and `Annotated` usage. This dependency can then be applied to path operations or routers to enforce header presence.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/bigger-applications.md#_snippet_4

LANGUAGE: Python
CODE:
```
from typing import Annotated

from fastapi import Header, HTTPException


async def get_token_header(x_token: Annotated[str, Header()]):
    if x_token != "fake-super-secret-token":
        raise HTTPException(status_code=400, detail="X-Token header invalid")

```

LANGUAGE: Python
CODE:
```
from fastapi import Header, HTTPException


async def get_token_header(x_token: str = Header(...)):
    if x_token != "fake-super-secret-token":
        raise HTTPException(status_code=400, detail="X-Token header invalid")

```

LANGUAGE: Python
CODE:
```
from fastapi import Header, HTTPException


async def get_token_header(x_token: str = Header(..., alias="X-Token")):
    if x_token != "fake-super-secret-token":
        raise HTTPException(status_code=400, detail="X-Token header invalid")

```

----------------------------------------

TITLE: Defining OAuth2 Scopes and Scheme in FastAPI
DESCRIPTION: This snippet initializes the `OAuth2PasswordBearer` scheme, explicitly defining the available scopes (`me`, `items`) and their descriptions. These scopes are then advertised in the OpenAPI documentation, allowing clients to understand and request specific permissions during the authentication flow.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/advanced/security/oauth2-scopes.md#_snippet_0

LANGUAGE: Python
CODE:
```
from fastapi.security import OAuth2PasswordBearer

scopes = {
    "me": "Read information about the current user.",
    "items": "Read items."
}

oauth2_scheme = OAuth2PasswordBearer(tokenUrl="token", scopes=scopes)
```

----------------------------------------

TITLE: Recommended Docker CMD for FastAPI (Exec Form)
DESCRIPTION: This snippet demonstrates the recommended 'exec' form for the Docker `CMD` instruction when running a FastAPI application. This format ensures that the process receives signals correctly, allowing FastAPI to shut down gracefully and trigger lifespan events, which is vital for application stability and resource management.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/deployment/docker.md#_snippet_6

LANGUAGE: Dockerfile
CODE:
```
CMD ["fastapi", "run", "app/main.py", "--port", "80"]
```

----------------------------------------

TITLE: Defining a Sub-FastAPI Application in Python
DESCRIPTION: This snippet defines a separate FastAPI application instance, 'subapi', which will function as a sub-application. It includes its own path operation, demonstrating that sub-applications can have independent routes and logic.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/advanced/sub-applications.md#_snippet_1

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI

subapi = FastAPI()

@subapi.get("/sub")
def read_sub():
    return {"message": "Hello from sub API"}
```

----------------------------------------

TITLE: Using Pydantic's `exclude_unset` for Partial Data Extraction
DESCRIPTION: Illustrates how to use the `exclude_unset=True` parameter with a Pydantic model's `.dict()` method. This creates a dictionary containing only the fields that were explicitly provided in the input, excluding fields with default values that were not set.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/body-updates.md#_snippet_2

LANGUAGE: Python
CODE:
```
# Assuming 'item' is a Pydantic model instance received from a request body
# For example, if 'item' was created from {"name": "New Name"},
# item.dict(exclude_unset=True) would return {"name": "New Name"}
# even if the model has other fields with default values.
update_data = item.dict(exclude_unset=True)
```

----------------------------------------

TITLE: Running Uvicorn with Proxy Headers (Dockerfile)
DESCRIPTION: This CMD instruction is used when deploying the Docker container behind a proxy (like Nginx or Traefik). The --proxy-headers flag tells Uvicorn to trust the incoming proxy headers, which is necessary for the application to correctly identify the client's IP address and other request details when running behind a load balancer or reverse proxy.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/deployment/docker.md#_snippet_6

LANGUAGE: Dockerfile
CODE:
```
CMD ["uvicorn", "app.main:app", "--proxy-headers", "--host", "0.0.0.0", "--port", "80"]
```

----------------------------------------

TITLE: Using ORJSONResponse for Performance in FastAPI
DESCRIPTION: This snippet demonstrates how to configure a FastAPI path operation to use `ORJSONResponse` for improved performance. By specifying `ORJSONResponse` as the `response_class`, FastAPI will use the `orjson` library for JSON serialization, which can be significantly faster for large responses. The content returned from the path operation function will be automatically serialized by `orjson`.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/advanced/custom-response.md#_snippet_0

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI
from fastapi.responses import ORJSONResponse

app = FastAPI()

@app.get("/items/", response_class=ORJSONResponse)
async def read_items():
    return {"message": "Hello World"}
```

----------------------------------------

TITLE: Performing Teardown Operations in FastAPI Dependencies
DESCRIPTION: This snippet demonstrates the code executed after the `yield` statement within a FastAPI dependency. This 'teardown' code, typically placed in a `finally` block, runs after the response has been delivered, ensuring resources like database connections are properly closed.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/dependencies/dependencies-with-yield.md#_snippet_2

LANGUAGE: Python
CODE:
```
finally:
    db.close()
```

----------------------------------------

TITLE: Declaring Response Model for POST Request - FastAPI Python
DESCRIPTION: This snippet demonstrates how to declare a `response_model` for a FastAPI POST path operation. By setting `response_model=Item`, FastAPI ensures the output data conforms to the `Item` Pydantic model, providing validation and schema generation.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ko/docs/tutorial/response-model.md#_snippet_0

LANGUAGE: Python
CODE:
```
@app.post("/items/", response_model=Item)
```

----------------------------------------

TITLE: Protecting Against Host Header Attacks with TrustedHostMiddleware
DESCRIPTION: This snippet shows how to integrate `TrustedHostMiddleware` into a FastAPI application to prevent HTTP Host Header attacks. It configures the middleware to only allow requests from specified hostnames, such as `example.com` and its subdomains. Requests with invalid `Host` headers will receive a `400` response, enhancing application security.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/advanced/middleware.md#_snippet_3

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI
from starlette.middleware.trustedhost import TrustedHostMiddleware

app = FastAPI()

app.add_middleware(TrustedHostMiddleware, allowed_hosts=["example.com", "*.example.com"])

@app.get("/")
async def read_root():
    return {"Hello": "World"}
```

----------------------------------------

TITLE: Implementing Trusted Host Middleware in FastAPI
DESCRIPTION: This snippet shows how to integrate `TrustedHostMiddleware` into a FastAPI application. This middleware protects against HTTP Host header attacks by validating the `Host` header against a list of `allowed_hosts`. Requests with an invalid `Host` header will receive a 400 response.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/advanced/middleware.md#_snippet_3

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI
from starlette.middleware.trustedhost import TrustedHostMiddleware

app = FastAPI()

app.add_middleware(TrustedHostMiddleware, allowed_hosts=["example.com", "*.example.com"])
```

----------------------------------------

TITLE: Declaring Query Parameters with Pydantic Model - Python
DESCRIPTION: This snippet demonstrates how to declare a group of related query parameters using a Pydantic BaseModel. FastAPI automatically extracts individual fields from the request's query string and populates the model instance, allowing for centralized validation and metadata declaration. The model is then used as a dependency with Query(...).
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh-hant/docs/tutorial/query-param-models.md#_snippet_0

LANGUAGE: Python
CODE:
```
from typing import Optional
from fastapi import FastAPI, Query
from pydantic import BaseModel

app = FastAPI()

class ItemQueryParams(BaseModel):
    name: str
    description: Optional[str] = None
    price: float
    tax: Optional[float] = None

@app.get("/items/")
async def read_items(
    params: ItemQueryParams = Query(...),
):
    return {
        "name": params.name,
        "description": params.description,
        "price": params.price,
        "tax": params.tax,
    }
```

----------------------------------------

TITLE: Defining User Models with Pydantic for FastAPI
DESCRIPTION: This snippet defines Pydantic models (UserBase, UserIn, UserOut, UserInDB) to structure user data for FastAPI applications. UserIn includes a plain password for input, UserOut is for safe output, and UserInDB stores a hashed password, demonstrating how to handle sensitive information and different data representations.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/extra-models.md#_snippet_0

LANGUAGE: Python
CODE:
```
from typing import Optional
from pydantic import BaseModel

class UserBase(BaseModel):
    username: str
    email: Optional[str] = None
    full_name: Optional[str] = None

class UserIn(UserBase):
    password: str

class UserOut(UserBase):
    pass

class UserInDB(UserBase):
    hashed_password: str
```

----------------------------------------

TITLE: Defining Multiple User Models for Input, Output, and Database - Python
DESCRIPTION: This snippet demonstrates how to define distinct Pydantic models for different stages of user data handling: `UserIn` for input (including plain password), `UserOut` for output (excluding password), and `UserInDB` for database storage (with hashed password). This approach ensures data integrity and security by controlling which fields are exposed or stored at each step.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ko/docs/tutorial/extra-models.md#_snippet_0

LANGUAGE: Python
CODE:
```
from typing import Optional
from pydantic import BaseModel
from fastapi import FastAPI

app = FastAPI()

class UserIn(BaseModel):
    username: str
    password: str
    email: Optional[str] = None
    full_name: Optional[str] = None

class UserOut(BaseModel):
    username: str
    email: Optional[str] = None
    full_name: Optional[str] = None

class UserInDB(BaseModel):
    username: str
    hashed_password: str
    email: Optional[str] = None
    full_name: Optional[str] = None

def fake_password_hasher(password: str):
    return "supersecret" + password

def fake_save_user(user: UserInDB):
    # Imagine this saves to a database
    return user

@app.post("/users/", response_model=UserOut)
async def create_user(user_in: UserIn):
    hashed_password = fake_password_hasher(user_in.password)
    user_in_db = UserInDB(**user_in.model_dump(), hashed_password=hashed_password)
    user_saved = fake_save_user(user_in_db)
    return user_saved
```

----------------------------------------

TITLE: WebSocket Endpoint with Dependencies and Exception Handling
DESCRIPTION: This example demonstrates how to integrate FastAPI's dependency injection system (e.g., `Depends`, `Path`, `Query`) into a WebSocket endpoint. It also shows how to handle errors specific to WebSockets by raising a `WebSocketException`, providing a structured way to close connections with specific error codes and reasons.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/advanced/websockets.md#_snippet_4

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI, WebSocket, WebSocketException, Depends, Path, Query
from typing import Annotated

app = FastAPI()

async def get_token(token: Annotated[str, Query()]):
    if token != "some-secret-token":
        raise WebSocketException(code=1008, reason="Invalid token")
    return token

@app.websocket("/ws/{item_id}")
async def websocket_endpoint_with_deps(
    websocket: WebSocket,
    item_id: Annotated[str, Path()],
    q: Annotated[int | None, Query()] = None,
    token: Annotated[str, Depends(get_token)],
):
    await websocket.accept()
    try:
        while True:
            data = await websocket.receive_text()
            await websocket.send_text(f"Message text was: {data}, item_id: {item_id}, q: {q}, token: {token}")
    except WebSocketException as e:
        await websocket.close(code=e.code, reason=e.reason)
    except Exception:
        await websocket.close(code=1011)
```

----------------------------------------

TITLE: Declaring BackgroundTasks in FastAPI Path Operations
DESCRIPTION: This snippet demonstrates how to import `FastAPI` and `BackgroundTasks`, initialize the FastAPI application, and declare a parameter of type `BackgroundTasks` in a path operation function. FastAPI automatically injects an instance of `BackgroundTasks` into this parameter, allowing you to register functions to be run in the background.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/background-tasks.md#_snippet_0

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI, BackgroundTasks

app = FastAPI()

def write_notification(email: str, message: str = ""):
    with open("log.txt", mode="a") as log:
        log.write(f"notification for {email}: {message}\n")

@app.post("/send-notification/{email}")
async def send_notification(email: str, background_tasks: BackgroundTasks):
```

----------------------------------------

TITLE: Declaring Header Parameters with Pydantic Model in FastAPI (Python)
DESCRIPTION: This snippet demonstrates how to define a group of related HTTP header parameters using a Pydantic BaseModel. The CommonHeaders model specifies x_token and x_api_key as optional string headers. FastAPI automatically extracts these headers from the request and injects them as an instance of CommonHeaders into the path operation function, enabling structured validation and reusability.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/header-param-models.md#_snippet_0

LANGUAGE: Python
CODE:
```
from typing import Annotated

from fastapi import FastAPI, Header
from pydantic import BaseModel

class CommonHeaders(BaseModel):
    x_token: Annotated[str | None, Header()] = None
    x_api_key: Annotated[str | None, Header()] = None

app = FastAPI()

@app.post("/items/")
async def read_items(common_headers: CommonHeaders):
    return common_headers
```

----------------------------------------

TITLE: Registering FastAPI Startup Event Handler - Python
DESCRIPTION: This code demonstrates how to register a function to be executed during the application's startup phase using the `@app.on_event("startup")` decorator. This function runs once before the application begins accepting requests, suitable for initial setup tasks.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/advanced/events.md#_snippet_4

LANGUAGE: Python
CODE:
```
@app.on_event("startup")
```

----------------------------------------

TITLE: FastAPI Application Structure for Testing
DESCRIPTION: This snippet shows a typical `main.py` file containing a FastAPI application. It defines a simple GET endpoint, illustrating how the application is structured when tests are placed in a separate file within the same Python package.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/testing.md#_snippet_1

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI

app = FastAPI()

@app.get("/items/{item_id}")
async def read_item(item_id: int, q: str = None):
    return {"item_id": item_id, "q": q}
```

----------------------------------------

TITLE: Organizing Path Operations with Tags in FastAPI
DESCRIPTION: This FastAPI application demonstrates the use of `tags` to group related path operations. By assigning tags like 'items' and 'users' to different endpoints, the generated OpenAPI documentation and client code will categorize operations, leading to better organization and readability.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/advanced/generate-clients.md#_snippet_4

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI, Depends
from pydantic import BaseModel

app = FastAPI()

class Item(BaseModel):
    name: str
    price: float

class User(BaseModel):
    username: str
    email: str

@app.post("/items/", tags=["items"])
async def create_item(item: Item):
    return {"message": f"Item '{item.name}' created."}

@app.get("/items/", tags=["items"])
async def read_items():
    return [{"name": "Plumbus", "price": 5.0}]

@app.post("/users/", tags=["users"])
async def create_user(user: User):
    return {"message": f"User '{user.username}' created."}

@app.get("/users/", tags=["users"])
async def read_users():
    return [{"username": "Rick", "email": "rick@example.com"}]
```

----------------------------------------

TITLE: Mounting a Sub-Application in FastAPI (Python)
DESCRIPTION: This snippet demonstrates how to integrate the `subapi` into the main `app` using `app.mount()`. The sub-application will be accessible at the `/subapi` path, allowing it to handle all requests under that prefix independently.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/advanced/sub-applications.md#_snippet_2

LANGUAGE: Python
CODE:
```
subapi = FastAPI()
app.mount("/subapi", subapi)
```

----------------------------------------

TITLE: Forbidding Extra Query Parameters with Pydantic Config - Python
DESCRIPTION: This snippet shows how to restrict query parameters to only those explicitly defined in the Pydantic model. By setting Config.extra = "forbid" within the model, FastAPI will return an error if the client sends any additional, undeclared query parameters, ensuring strict input validation.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh-hant/docs/tutorial/query-param-models.md#_snippet_1

LANGUAGE: Python
CODE:
```
from typing import Optional
from fastapi import FastAPI, Query
from pydantic import BaseModel

app = FastAPI()

class ItemQueryParams(BaseModel):
    name: str
    description: Optional[str] = None

    class Config:
        extra = "forbid"

@app.get("/items/")
async def read_items(params: ItemQueryParams = Query(...)):
    return {
        "name": params.name,
        "description": params.description,
    }
```

----------------------------------------

TITLE: Including Attributes in FastAPI Response Model (Set)
DESCRIPTION: This snippet demonstrates using `response_model_include` with a `set` of strings to specify which attributes of the `Item` Pydantic model should be included in the JSON response. Only 'name' and 'description' will be returned, even if the underlying `Item` object has more attributes. This requires a FastAPI application instance (`app`), a Pydantic `BaseModel` (`Item`), and a dictionary of items (`items`).
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/response-model.md#_snippet_5

LANGUAGE: Python
CODE:
```
@app.get("/items/{item_id}", response_model=Item,
         response_model_include={"name", "description"})
async def read_item_include(item_id: str):
    return items[item_id]
```

----------------------------------------

TITLE: Defining Optional File Uploads in FastAPI
DESCRIPTION: This snippet illustrates how to make file uploads optional by using `Optional` from `typing` and setting the default value of the `File` dependency to `None`. This allows the endpoint to be called without a file, handling cases where the file might not be provided.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/request-files.md#_snippet_5

LANGUAGE: Python
CODE:
```
@app.post("/files/")
async def create_file(file: Optional[bytes] = File(None)):
    return {"file_size": len(file) if file else 0}

@app.post("/uploadfile/")
async def create_upload_file(file: Optional[UploadFile] = File(None)):
    return {"filename": file.filename if file else None, "content_type": file.content_type if file else None}
```

----------------------------------------

TITLE: Defining FastAPI Lifespan Context Manager - Python
DESCRIPTION: This snippet defines an asynchronous context manager function using `@asynccontextmanager` that handles application startup and shutdown events. Code before `yield` runs during startup (e.g., loading ML models), and code after `yield` runs during shutdown (e.g., cleaning up resources).
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/advanced/events.md#_snippet_0

LANGUAGE: Python
CODE:
```
from contextlib import asynccontextmanager
from typing import Dict

ml_models: Dict[str, str] = {}

@asynccontextmanager
async def lifespan(app: FastAPI):
    # Load the ML model
    ml_models["regression_model"] = "some_model_data"
    print("ML model loaded")
    yield
    # Clean up the ML model
    ml_models.clear()
    print("ML model unloaded")
```

----------------------------------------

TITLE: Copying Requirements File for Caching (Dockerfile)
DESCRIPTION: This COPY instruction copies only the requirements.txt file into the /code directory within the Docker image. By copying this file separately and early in the Dockerfile, Docker can cache this layer. If requirements.txt doesn't change, subsequent builds will reuse this cached layer, avoiding re-downloading and reinstalling dependencies, which significantly speeds up build times.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/deployment/docker.md#_snippet_7

LANGUAGE: Dockerfile
CODE:
```
COPY ./requirements.txt /code/requirements.txt
```

----------------------------------------

TITLE: Copying Application Code (Dockerfile)
DESCRIPTION: This COPY instruction copies the entire ./app directory, containing the main application code, into the /code/app directory within the Docker image. This step is placed late in the Dockerfile because the application code changes most frequently. By placing it last, Docker's build cache for previous layers (like dependency installation) can be utilized, even if the application code changes.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/deployment/docker.md#_snippet_9

LANGUAGE: Dockerfile
CODE:
```
COPY ./app /code/app
```

----------------------------------------

TITLE: Injecting Current User into Path Operation (FastAPI)
DESCRIPTION: Demonstrates how to inject the `User` model, returned by the `get_current_user` dependency, directly into a path operation function. FastAPI automatically resolves and provides the `current_user` object, which is type-hinted as `User`.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/security/get-current-user.md#_snippet_4

LANGUAGE: Python
CODE:
```
async def read_users_me(current_user: User = Depends(get_current_user)):
```

----------------------------------------

TITLE: Clearing All Dependency Overrides in FastAPI
DESCRIPTION: This code snippet shows how to reset all dependency overrides by assigning an empty dictionary to `app.dependency_overrides`. This is typically done after a test case or a suite of tests to ensure that subsequent tests run with the original, unmocked dependencies, preventing side effects between tests.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/advanced/testing-dependencies.md#_snippet_1

LANGUAGE: Python
CODE:
```
app.dependency_overrides = {}
```

----------------------------------------

TITLE: Implementing Scope Validation with SecurityScopes
DESCRIPTION: This dependency function (`get_current_user`) is responsible for validating the access token and ensuring the user possesses all required OAuth2 scopes. It uses `SecurityScopes` to retrieve the scopes declared by the calling path operation or its dependencies, then compares them against the scopes present in the user's JWT, raising an `HTTPException` if any required scope is missing.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/advanced/security/oauth2-scopes.md#_snippet_3

LANGUAGE: Python
CODE:
```
import jwt # Assuming pyjwt
from fastapi import Depends, HTTPException, status
from fastapi.security import OAuth2PasswordBearer, SecurityScopes
from pydantic import BaseModel
from typing import List, Optional

# Assume these are defined elsewhere:
# SECRET_KEY, ALGORITHM, oauth2_scheme, get_user, fake_users_db

class TokenData(BaseModel):
    username: Optional[str] = None
    scopes: List[str] = []

async def get_current_user(
    security_scopes: SecurityScopes, token: str = Depends(oauth2_scheme)
):
    # Construct WWW-Authenticate header for error response
    authenticate_value = f"Bearer scope=\"{security_scopes.scope_str}\"";
    credentials_exception = HTTPException(
        status_code=status.HTTP_401_UNAUTHORIZED,
        detail="Could not validate credentials",
        headers={"WWW-Authenticate": authenticate_value},
    )
    try:
        # Decode JWT
        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])
        username: str = payload.get("sub")
        if username is None:
            raise credentials_exception
        # Extract scopes from token payload
        token_scopes = payload.get("scopes", [])
        token_data = TokenData(scopes=token_scopes, username=username)
    except jwt.PyJWTError: # Use jwt.PyJWTError for pyjwt
        raise credentials_exception

    # Retrieve user from database
    user = get_user(fake_users_db, token_data.username)
    if user is None:
        raise credentials_exception

    # Validate if all required scopes are present in the token
    for scope in security_scopes.scopes:
        if scope not in token_data.scopes:
            raise HTTPException(
                status_code=status.HTTP_401_UNAUTHORIZED,
                detail="Not enough permissions",
                headers={"WWW-Authenticate": authenticate_value},
            )
    return user
```

----------------------------------------

TITLE: Declaring Additional Response with Pydantic Model in FastAPI
DESCRIPTION: This snippet demonstrates how to define an additional HTTP response for a FastAPI path operation, specifically for a 404 Not Found status code. It uses a Pydantic model ('Message') to describe the structure of the error response, which FastAPI then uses to generate the OpenAPI schema. The path operation returns a JSONResponse with the specified status code and content when an item is not found.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/advanced/additional-responses.md#_snippet_0

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI
from fastapi.responses import JSONResponse
from pydantic import BaseModel

class Message(BaseModel):
    message: str

class Item(BaseModel):
    id: str
    value: str

app = FastAPI()

@app.get(
    "/items/{item_id}",
    response_model=Item,
    responses={
        404: {"model": Message, "description": "The item was not found"}
    }
)
async def read_item(item_id: str):
    if item_id == "foo":
        return {"id": "foo", "value": "The Foo Wrestlers"}
    return JSONResponse(status_code=404, content={"message": "Item not found"})
```

----------------------------------------

TITLE: Initializing OAuth2PasswordBearer in FastAPI
DESCRIPTION: This line initializes an OAuth2PasswordBearer instance. The 'tokenUrl' parameter specifies the relative URL where the client (e.g., web UI) will send the username and password to obtain an access token. This instance is then used as a dependency to secure API endpoints.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/security/first-steps.md#_snippet_2

LANGUAGE: Python
CODE:
```
oauth2_scheme = OAuth2PasswordBearer(tokenUrl="token")
```

----------------------------------------

TITLE: Starting a Docker Container - Console
DESCRIPTION: This console command runs a new Docker container based on the `myimage` image. The `-d` flag runs the container in detached mode (in the background), `--name mycontainer` assigns a readable name, and `-p 80:80` maps port 80 of the host to port 80 of the container, making the FastAPI application accessible.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/deployment/docker.md#_snippet_13

LANGUAGE: console
CODE:
```
docker run -d --name mycontainer -p 80:80 myimage
```

----------------------------------------

TITLE: CORSMiddleware Class Initialization Parameters
DESCRIPTION: Detailed documentation for the parameters available when initializing `CORSMiddleware` in FastAPI. It covers options for controlling allowed origins (specific or regex), HTTP methods, request headers, support for credentials, response headers to expose, and the maximum age for caching CORS responses.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/cors.md#_snippet_1

LANGUAGE: APIDOC
CODE:
```
CORSMiddleware:
  __init__(
    allow_origins: list[str] | None = None,
    allow_origin_regex: str | None = None,
    allow_methods: list[str] = ['GET'],
    allow_headers: list[str] = [],
    allow_credentials: bool = False,
    expose_headers: list[str] = [],
    max_age: int = 600
  )
    allow_origins: A list of origins that should be permitted to make cross-origin requests. E.g. ['https://example.org', 'https://www.example.org']. You can use ['*'] to allow any origin.
    allow_origin_regex: A regex string to match against origins that should be permitted to make cross-origin requests. e.g. 'https://.*\\.example\\.org'.
    allow_methods: A list of HTTP methods that should be allowed for cross-origin requests. Defaults to ['GET']. You can use ['*'] to allow all standard methods.
    allow_headers: A list of HTTP request headers that should be supported for cross-origin requests. Defaults to []. You can use ['*'] to allow all headers. The Accept, Accept-Language, Content-Language and Content-Type headers are always allowed for simple CORS requests.
    allow_credentials: Indicate that cookies should be supported for cross-origin requests. Defaults to False. None of allow_origins, allow_methods and allow_headers can be set to ['*'] if allow_credentials is set to True.
    expose_headers: Indicate any response headers that should be made accessible to the browser. Defaults to [].
    max_age: Sets a maximum time in seconds for browsers to cache CORS responses. Defaults to 600.
```

----------------------------------------

TITLE: Handling Multiple Pydantic Models in FastAPI Body
DESCRIPTION: This example illustrates how FastAPI processes requests containing multiple Pydantic models as body parameters. FastAPI automatically uses the parameter names (`item` and `user`) as keys in the expected JSON body, allowing for structured and validated input from different models within a single request.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/body-multiple-params.md#_snippet_1

LANGUAGE: Python
CODE:
```
from typing import Union
from fastapi import FastAPI
from pydantic import BaseModel

class Item(BaseModel):
    name: str
    description: Union[str, None] = None
    price: float
    tax: Union[float, None] = None

class User(BaseModel):
    username: str
    full_name: Union[str, None] = None

app = FastAPI()

@app.put("/items/{item_id}")
async def update_item(item_id: int, item: Item, user: User):
    results = {"item_id": item_id, "item": item.dict(), "user": user.dict()}
    return results
```

----------------------------------------

TITLE: FastAPI Project Directory Structure
DESCRIPTION: Illustrates the recommended directory structure for a FastAPI project intended for Dockerization. It shows the main project directory containing the 'app' folder (with '__init__.py' and 'main.py'), 'Dockerfile', and 'requirements.txt'.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ko/docs/deployment/docker.md#_snippet_2

LANGUAGE: Text
CODE:
```
.
├── app
│   ├── __init__.py
│   └── main.py
├── Dockerfile
└── requirements.txt
```

----------------------------------------

TITLE: Building FastAPI Docker Image
DESCRIPTION: This Dockerfile defines the steps to build a Docker image for a FastAPI application. It starts from a Python base image, sets up the working directory, copies and installs dependencies, and then copies the application code. The `CMD` instruction specifies how to run the application using Uvicorn.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/deployment/docker.md#_snippet_0

LANGUAGE: Dockerfile
CODE:
```
FROM python:3.9

WORKDIR /code

COPY ./requirements.txt /code/requirements.txt

RUN pip install --no-cache-dir --upgrade -r /code/requirements.txt

COPY ./app /code/app

CMD ["uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "80"]

# If running behind a proxy like Nginx or Traefik add --proxy-headers
# CMD ["uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "80", "--proxy-headers"]
```

----------------------------------------

TITLE: FastAPI Dockerfile Preview
DESCRIPTION: A concise Dockerfile example for packaging a FastAPI application, showing steps for setting up the Python environment, installing dependencies, and running the Uvicorn server.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/deployment/docker.md#_snippet_0

LANGUAGE: Dockerfile
CODE:
```
FROM python:3.9

WORKDIR /code

COPY ./requirements.txt /code/requirements.txt

RUN pip install --no-cache-dir --upgrade -r /code/requirements.txt

COPY ./app /code/app

CMD ["uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "80"]

# If running behind a proxy like Nginx or Traefik add --proxy-headers
# CMD ["uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "80", "--proxy-headers"]
```

----------------------------------------

TITLE: Overriding Request Validation Error Handler in FastAPI
DESCRIPTION: This snippet demonstrates how to customize the default error response for `RequestValidationError` (Pydantic validation errors). By registering a handler with `@app.exception_handler(RequestValidationError)`, developers can return a custom `JSONResponse` with specific error details and status code.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/handling-errors.md#_snippet_8

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI, Request, status
from fastapi.exceptions import RequestValidationError
from fastapi.responses import JSONResponse

app = FastAPI()

@app.exception_handler(RequestValidationError)
async def validation_exception_handler(request: Request, exc: RequestValidationError):
    return JSONResponse(
        status_code=status.HTTP_422_UNPROCESSABLE_ENTITY,
        content={"detail": exc.errors(), "body": exc.body},
    )
```

----------------------------------------

TITLE: Configuring Multiple Uvicorn Workers in a Docker Container
DESCRIPTION: This Dockerfile demonstrates how to build a Docker image for a FastAPI application that runs with multiple Uvicorn worker processes inside a single container. It sets up the Python environment, installs dependencies from `requirements.txt`, copies the application code, and then uses the `CMD` instruction to start the FastAPI application with 4 workers. This configuration is particularly useful for single-server deployments or Docker Compose setups where cluster-level replication is not managed by an external orchestrator.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/deployment/docker.md#_snippet_17

LANGUAGE: Dockerfile
CODE:
```
FROM python:3.9

WORKDIR /code

COPY ./requirements.txt /code/requirements.txt

RUN pip install --no-cache-dir --upgrade -r /code/requirements.txt

COPY ./app /code/app

# (1)!
CMD ["fastapi", "run", "app/main.py", "--port", "80", "--workers", "4"]
```

----------------------------------------

TITLE: Adding Summary and Description to FastAPI Operations
DESCRIPTION: This example demonstrates how to add a `summary` and `description` to a FastAPI path operation using parameters in the decorator. These fields provide concise and detailed explanations of the operation's purpose, enhancing the clarity of the generated OpenAPI documentation.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/path-operation-configuration.md#_snippet_3

LANGUAGE: Python
CODE:
```
@app.post(
    "/items/",
    summary="Create an item",
    description="Create an item with all the information, name, description, price, tax and a tag",
)
async def create_item(name: str):
    return {"name": name}
```

----------------------------------------

TITLE: Running a Python Program in Virtual Environment
DESCRIPTION: Shows how to execute a Python script (`main.py`) within an active virtual environment. This ensures the program uses the Python interpreter and packages installed in that specific environment.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/virtual-environments.md#_snippet_16

LANGUAGE: console
CODE:
```
$ python main.py

Hello World
```

----------------------------------------

TITLE: Handling Multiple File Uploads in FastAPI
DESCRIPTION: This snippet demonstrates how to handle multiple file uploads in FastAPI by declaring a parameter as a `List[bytes]` or `List[UploadFile]`. This allows the API to receive and process multiple files sent under the same form field.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/tutorial/request-files.md#_snippet_5

LANGUAGE: Python
CODE:
```
@app.post("/files/")
async def create_files(files: List[bytes] = File(...)):
    return {"file_sizes": [len(file) for file in files]}


@app.post("/uploadfiles/")
async def create_upload_files(files: List[UploadFile]):
    return {"filenames": [file.filename for file in files]}
```

----------------------------------------

TITLE: Combining Path and Query Parameters in FastAPI
DESCRIPTION: This example illustrates how FastAPI can handle multiple path and query parameters simultaneously within a single route. `user_id` and `item_id` are path parameters, while `q` (optional string) and `short` (boolean with default) are query parameters, demonstrating flexible API endpoint definitions.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/query-params.md#_snippet_3

LANGUAGE: Python
CODE:
```
from typing import Union
from fastapi import FastAPI

app = FastAPI()

@app.get("/users/{user_id}/items/{item_id}")
async def read_user_item(
    user_id: int, item_id: str, q: Union[str, None] = None, short: bool = False
):
    item = {"item_id": item_id, "user_id": user_id}
    if q:
        item.update({"q": q})
    if short:
        item.update(
            {"description": "This is an amazing item that has a long description."}
        )
    return item
```

----------------------------------------

TITLE: Type Hinting List Elements (Python 3.9+)
DESCRIPTION: In Python 3.9 and later, you can directly use the built-in `list` type with square brackets to specify the type of its elements, simplifying type hints for collections.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/body-nested-models.md#_snippet_2

LANGUAGE: Python
CODE:
```
my_list: list[str]
```

----------------------------------------

TITLE: Rendering Jinja2 Templates in FastAPI
DESCRIPTION: This Python snippet demonstrates how to set up and use `Jinja2Templates` in a FastAPI application. It initializes templates from a directory, defines a path operation that accepts a `Request` object, and renders an HTML template (`item.html`) with dynamic context data.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/advanced/templates.md#_snippet_1

LANGUAGE: python
CODE:
```
from fastapi import FastAPI, Request
from fastapi.responses import HTMLResponse
from fastapi.templating import Jinja2Templates

app = FastAPI()

templates = Jinja2Templates(directory="templates")

@app.get("/items/{id}", response_class=HTMLResponse)
async def read_item(request: Request, id: str):
    return templates.TemplateResponse(
        name="item.html",
        request=request,
        context={
            "id": id
        }
    )
```

----------------------------------------

TITLE: Running the FastAPI Application (Console)
DESCRIPTION: This command line instruction shows how to start the FastAPI development server using `fastapi dev`. It specifies `main.py` as the entry file, making the main application and its mounted sub-applications accessible via HTTP.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/advanced/sub-applications.md#_snippet_3

LANGUAGE: Console
CODE:
```
$ fastapi dev main.py
```

----------------------------------------

TITLE: Declaring a List with a Specific Subtype (Python)
DESCRIPTION: This example illustrates the standard Python syntax for declaring a list with a specified subtype, using `List[str]` from the `typing` module. This ensures that the list is expected to contain only string elements, improving type checking and clarity.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/tutorial/body-nested-models.md#_snippet_2

LANGUAGE: Python
CODE:
```
from typing import List

my_list: List[str]
```

----------------------------------------

TITLE: Defining List of Pydantic Models for API Endpoints
DESCRIPTION: This snippet shows how to define an API endpoint that expects or returns a list of Pydantic models using typing.List (or list in Python 3.9+). This is crucial for handling collections of structured data in FastAPI requests and responses, automatically generating the correct OpenAPI schema for arrays.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/extra-models.md#_snippet_10

LANGUAGE: Python
CODE:
```
from typing import List
from fastapi import FastAPI
from pydantic import BaseModel

app = FastAPI()

class Item(BaseModel):
    name: str
    price: float

@app.post("/items/", response_model=List[Item])
async def create_items(items: List[Item]):
    return items
```

----------------------------------------

TITLE: Raising HTTPException for Resource Not Found in FastAPI
DESCRIPTION: This example shows how to raise an `HTTPException` with a `404 Not Found` status code when a requested item ID does not exist. The `detail` parameter provides a custom error message to the client. This is crucial for informing clients about invalid requests.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/handling-errors.md#_snippet_1

LANGUAGE: Python
CODE:
```
@app.get("/items/{item_id}")
async def read_item(item_id: str):
    items = {"foo": "The Foo Wrestlers", "bar": "The Bar Fighters"}
    if item_id not in items:
        raise HTTPException(status_code=404, detail="Item not found")
    return {"item": items[item_id]}
```

----------------------------------------

TITLE: Declaring Optional Body Parameters in FastAPI
DESCRIPTION: This snippet demonstrates how to define an optional request body parameter in a FastAPI path operation. By setting the parameter's default value to None (or using Union[Type, None]), FastAPI understands that the body is optional. If the body is provided, it will be validated against the Item Pydantic model; otherwise, the item parameter will be None.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/body-multiple-params.md#_snippet_0

LANGUAGE: Python
CODE:
```
async def update_item(item_id: int, item: Item | None = None):
```

----------------------------------------

TITLE: Overriding FastAPI Dependencies for Testing
DESCRIPTION: This code demonstrates how to override a FastAPI dependency (`get_settings`) for testing purposes. A `get_settings_override` function is defined to return a `Settings` instance with a specific `admin_email` for tests. The override is applied to `app.dependency_overrides` and then cleared after the test.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/advanced/settings.md#_snippet_13

LANGUAGE: Python
CODE:
```
def get_settings_override():
    return Settings(admin_email="testing_admin@example.com")


app.dependency_overrides[get_settings] = get_settings_override

# ...

app.dependency_overrides.clear()
```

----------------------------------------

TITLE: Defining a Dictionary-Returning Dependency Function in FastAPI
DESCRIPTION: This snippet defines a standard Python function `common_parameters` used as a dependency in FastAPI. It returns a dictionary containing query parameters, which are then injected into the route function. This approach is contrasted with using classes as dependencies.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/dependencies/classes-as-dependencies.md#_snippet_0

LANGUAGE: Python
CODE:
```
def common_parameters(q: str | None = None, skip: int = 0, limit: int = 100):
    return {"q": q, "skip": skip, "limit": limit}
```

----------------------------------------

TITLE: Defining a Reusable Dependency Function in Python
DESCRIPTION: This snippet defines a dependency function `common_parameters` that takes optional query parameters `q`, `skip`, and `limit`. It's designed to be reused across multiple path operations to provide common parameter handling, returning a dictionary of these parameters.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/dependencies/index.md#_snippet_0

LANGUAGE: Python
CODE:
```
def common_parameters(q: str | None = None, skip: int = 0, limit: int = 100):
    return {"q": q, "skip": skip, "limit": limit}
```

----------------------------------------

TITLE: Declaring a Dependency in a FastAPI Path Operation
DESCRIPTION: This snippet demonstrates how to integrate a dependency into a FastAPI path operation. The `read_items` function uses `Depends(common_parameters)` to automatically call the `common_parameters` dependency and inject its returned dictionary into the `commons` parameter, simplifying parameter handling for the route.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/dependencies/index.md#_snippet_2

LANGUAGE: Python
CODE:
```
@app.get("/items/")
async def read_items(commons: dict = Depends(common_parameters)):
    return commons
```

----------------------------------------

TITLE: Setting Custom Response Status Code in FastAPI (Python)
DESCRIPTION: This snippet demonstrates how to explicitly set an HTTP response status code for a FastAPI path operation. By adding the `status_code` parameter to the `@app.post()` decorator, the API will return `201 Created` upon successful item creation, overriding the default `200 OK` for POST requests. This is crucial for accurately reflecting the outcome of an operation in the HTTP response.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/response-status-code.md#_snippet_0

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI

app = FastAPI()

@app.post("/items/", status_code=201)
async def create_item(name: str):
    return {"name": name}
```

----------------------------------------

TITLE: Upgrade FastAPI App with Pydantic Model and PUT Endpoint
DESCRIPTION: This Python code demonstrates how to enhance a FastAPI application by defining a Pydantic `BaseModel` for request body validation and adding a `PUT` endpoint. The `update_item` function accepts an `item_id` and an `Item` object, showcasing how to receive and process structured data in API requests.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/README.md#_snippet_5

LANGUAGE: Python
CODE:
```
from typing import Union

from fastapi import FastAPI
from pydantic import BaseModel

app = FastAPI()


class Item(BaseModel):
    name: str
    price: float
    is_offer: Union[bool, None] = None


@app.get("/")
def read_root():
    return {"Hello": "World"}


@app.get("/items/{item_id}")
def read_item(item_id: int, q: Union[str, None] = None):
    return {"item_id": item_id, "q": q}


@app.put("/items/{item_id}")
def update_item(item_id: int, item: Item):
    return {"item_name": item.name, "item_id": item_id}
```

----------------------------------------

TITLE: Declaring Annotated Dependency Type Alias in FastAPI
DESCRIPTION: This snippet demonstrates how to declare a dependency using `Annotated` and `Depends()` in FastAPI. It shows a type alias `commons` that encapsulates a dictionary type and a dependency on `common_parameters`. This approach allows for code reusability and preserves type information for editor autocompletion and static analysis tools like `mypy`.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/dependencies/index.md#_snippet_3

LANGUAGE: Python
CODE:
```
commons: Annotated[dict, Depends(common_parameters)]
```

----------------------------------------

TITLE: Retrieving Current User from JWT (Python)
DESCRIPTION: This asynchronous function `get_current_user` is a FastAPI dependency that extracts and validates a JWT from the request header using `OAuth2PasswordBearer`. It decodes the token, verifies its signature and expiration, and extracts the username (subject claim). If the token is invalid or missing, it raises an `HTTPException`.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/security/oauth2-jwt.md#_snippet_4

LANGUAGE: Python
CODE:
```
from fastapi import Depends, HTTPException, status
from fastapi.security import OAuth2PasswordBearer
from jose import JWTError, jwt
from pydantic import BaseModel # Assuming TokenData is defined

# Re-use SECRET_KEY and ALGORITHM from previous snippet
# SECRET_KEY = "your-secret-key"
# ALGORITHM = "HS256"

oauth2_scheme = OAuth2PasswordBearer(tokenUrl="token")

# Assume TokenData model is defined as in previous snippet
# class TokenData(BaseModel):
#     username: Optional[str] = None

async def get_current_user(token: str = Depends(oauth2_scheme)):
    credentials_exception = HTTPException(
        status_code=status.HTTP_401_UNAUTHORIZED,
        detail="Could not validate credentials",
        headers={"WWW-Authenticate": "Bearer"},
    )
    try:
        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])
        username: str = payload.get("sub")
        if username is None:
            raise credentials_exception
        token_data = TokenData(username=username)
    except JWTError:
        raise credentials_exception
    # In a real app, you'd fetch the user from a DB using token_data.username
    # For this example, we'll just return the username from the token
    return token_data.username # Or a User object if fetched
```

----------------------------------------

TITLE: Verifying Required Scopes in Token (Python)
DESCRIPTION: This snippet demonstrates the final step of scope verification within the `get_current_user` dependency. It iterates through the `security_scopes.scopes` (which contains all required scopes from the current dependency and its dependants) and checks if each required scope is present in the `token_data.scopes`. If any required scope is missing, an `HTTPException` with a 403 Forbidden status is raised.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/advanced/security/oauth2-scopes.md#_snippet_4

LANGUAGE: Python
CODE:
```
from fastapi import HTTPException
from fastapi.security import SecurityScopes

async def get_current_user(
    security_scopes: SecurityScopes, token: Annotated[str, Depends(oauth2_scheme)]
):
    # ... token_data and username extraction ...
    # ... authenticate_value and credentials_exception definition ...

    # Verify scopes
    for scope in security_scopes.scopes:
        if scope not in token_data.scopes:
            raise HTTPException(
                status_code=403,
                detail="Not enough permissions",
                headers={
                    "WWW-Authenticate": authenticate_value
                },
            )
    # ... rest of the function logic ...
    pass
```

----------------------------------------

TITLE: Declaring Union Types with typing.Union (Python 3.6+)
DESCRIPTION: Demonstrates how to declare a variable that can be one of several types using `typing.Union`. This approach is compatible with Python 3.6 and newer versions up to 3.9, and also works in 3.10+.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/python-types.md#_snippet_0

LANGUAGE: Python
CODE:
```
from typing import Union

def get_item(item: Union[int, str]):
    return item
```

----------------------------------------

TITLE: Using Standard Dataclass as Response Model in FastAPI
DESCRIPTION: This snippet illustrates how to use a standard Python `dataclass` as the `response_model` for a FastAPI path operation. The `Item` dataclass defines the structure of the response. FastAPI automatically converts the dataclass to a Pydantic dataclass internally, ensuring its schema appears correctly in the API documentation and handles serialization.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/advanced/dataclasses.md#_snippet_1

LANGUAGE: Python
CODE:
```
from dataclasses import dataclass

from fastapi import FastAPI


@dataclass
class Item:
    name: str
    price: float


app = FastAPI()


@app.get("/items/", response_model=Item)
async def get_item():
    return {"name": "Foo", "price": 42}
```

----------------------------------------

TITLE: Defining a Common Parameters Dependency in FastAPI
DESCRIPTION: This snippet defines a Python function `common_parameters` that acts as a reusable dependency. It takes optional query parameters `q`, `skip`, and `limit`, returning them as a dictionary. This function can be injected into multiple path operations to provide consistent parameter handling.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/dependencies/index.md#_snippet_0

LANGUAGE: Python
CODE:
```
def common_parameters(q: Annotated[str | None, Query(max_length=50)] = None, skip: int = 0, limit: int = 100):
    return {"q": q, "skip": skip, "limit": limit}
```

----------------------------------------

TITLE: Running FastAPI Application with Uvicorn (Python)
DESCRIPTION: Demonstrates a complete FastAPI application with a `uvicorn.run()` call encapsulated within an `if __name__ == "__main__":` block. This setup ensures the Uvicorn server starts only when the script is executed directly, not when imported as a module. The application listens on `0.0.0.0:8000`.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/debugging.md#_snippet_0

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI
import uvicorn

app = FastAPI()

@app.get("/")
async def read_root():
    return {"message": "Hello World"}

@app.get("/items/{item_id}")
async def read_item(item_id: int, q: str = None):
    return {"item_id": item_id, "q": q}

if __name__ == "__main__":
    uvicorn.run(app, host="0.0.0.0", port=8000)
```

----------------------------------------

TITLE: Creating a SQLModel Database Engine for SQLite
DESCRIPTION: Initializes the SQLModel engine to connect to a SQLite database file named 'database.db'. The `check_same_thread=False` argument is crucial for allowing FastAPI to use the same SQLite database across different threads, which can occur during request processing.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/tutorial/sql-databases.md#_snippet_2

LANGUAGE: python
CODE:
```
from sqlmodel import create_engine

sqlite_file_name = "database.db"
sqlite_url = f"sqlite:///{sqlite_file_name}"

engine = create_engine(sqlite_url, echo=True, connect_args={"check_same_thread": False})
```

----------------------------------------

TITLE: Partial Dockerfile for FastAPI Application Setup
DESCRIPTION: This partial Dockerfile illustrates the initial steps for building a FastAPI application image. It specifies the base Python image, sets the working directory, copies the `requirements.txt` file, installs dependencies, and then copies the application code. This sequence ensures dependencies are installed before the application code is added.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/deployment/docker.md#_snippet_4

LANGUAGE: Dockerfile
CODE:
```
FROM python:3.9

WORKDIR /code

COPY ./requirements.txt /code/requirements.txt

RUN pip install --no-cache-dir --upgrade -r /code/requirements.txt

COPY ./app /code/app
```

----------------------------------------

TITLE: Pinning Pydantic Version - Minor Range (requirements.txt)
DESCRIPTION: This snippet demonstrates how to pin the Pydantic dependency to a specific minor version range (e.g., 2.7.x) in `requirements.txt`. Since Pydantic versions above 1.0.0 are generally compatible with FastAPI, this allows for controlled updates within a stable major release.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/deployment/versions.md#_snippet_3

LANGUAGE: txt
CODE:
```
pydantic>=2.7.0,<3.0.0
```

----------------------------------------

TITLE: Function with Type Hints for Error Checking
DESCRIPTION: This snippet defines a function `get_name_and_age` with type hints (`name: str, age: int`). It demonstrates how type hints enable editors to perform static analysis and highlight potential type mismatches, such as passing a string where an integer is expected, before runtime.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/python-types.md#_snippet_5

LANGUAGE: Python
CODE:
```
def get_name_and_age(name: str, age: int):
    return f"Hello {name}, you are {age}"
```

----------------------------------------

TITLE: Declaring List Type Annotations (Python 3.8+)
DESCRIPTION: This snippet illustrates how to declare a variable as a list of strings using `List` imported from the `typing` module. For Python versions 3.8 and older, `List[str]` is used to specify a list containing string elements, providing type checking capabilities.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/python-types.md#_snippet_10

LANGUAGE: Python
CODE:
```
items: List[str]
```

----------------------------------------

TITLE: FastAPI Asynchronous Path Operation
DESCRIPTION: Example of a FastAPI path operation defined with `async def`. This enables the endpoint to perform asynchronous operations, such as `await get_burgers(2)`, without blocking the server, improving concurrency for web applications.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/async.md#_snippet_6

LANGUAGE: Python
CODE:
```
@app.get('/burgers')
async def read_burgers():
    burgers = await get_burgers(2)
    return burgers
```

----------------------------------------

TITLE: Running a FastAPI Application
DESCRIPTION: This console command demonstrates how to run a FastAPI application using `fastapi dev main.py`. It starts the Uvicorn server, making the application accessible at `http://127.0.0.1:8000`. This is typically used for development purposes.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/tutorial/sql-databases.md#_snippet_6

LANGUAGE: Console
CODE:
```
$ fastapi dev main.py

<span style="color: green;">INFO</span>:     Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)
```

----------------------------------------

TITLE: Forbidding Extra Form Fields in FastAPI Pydantic Models
DESCRIPTION: Configures a Pydantic model to reject any form fields not explicitly declared. By setting `model_config = ConfigDict(extra='forbid')` within the `User` model, FastAPI will return a validation error if clients send unexpected or undeclared form data.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/request-form-models.md#_snippet_2

LANGUAGE: Python
CODE:
```
from typing import Annotated
from fastapi import FastAPI, Form
from pydantic import BaseModel, ConfigDict

app = FastAPI()

class User(BaseModel):
    username: str
    password: str
    model_config = ConfigDict(extra='forbid')

@app.post("/login/")
async def login(user: Annotated[User, Form()]):
    return {"message": "User logged in successfully", "username": user.username}
```

----------------------------------------

TITLE: Pinning FastAPI Version - Exact Match (requirements.txt)
DESCRIPTION: This snippet demonstrates how to pin the FastAPI version to an exact release (e.g., 0.112.0) in a `requirements.txt` file. This ensures that your application always uses a specific, tested version, preventing unexpected breaking changes from newer releases.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/deployment/versions.md#_snippet_0

LANGUAGE: txt
CODE:
```
fastapi[standard]==0.112.0
```

----------------------------------------

TITLE: Defining and Handling WebSocket Endpoint
DESCRIPTION: This code defines a WebSocket endpoint in a FastAPI application. It demonstrates how to accept a WebSocket connection and then enter a loop to continuously receive text messages from the client and echo them back, illustrating fundamental bidirectional communication over WebSockets.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/advanced/websockets.md#_snippet_2

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI, WebSocket

app = FastAPI()

@app.websocket("/ws")
async def websocket_endpoint(websocket: WebSocket):
    await websocket.accept()
    while True:
        data = await websocket.receive_text()
        await websocket.send_text(f"Message text was: {data}")
```

----------------------------------------

TITLE: Setting Application Metadata in FastAPI
DESCRIPTION: This snippet demonstrates how to configure global metadata for a FastAPI application, including title, description, version, terms of service, contact information, and license details. These parameters are passed directly to the `FastAPI` instance during initialization to enrich the auto-generated OpenAPI documentation.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/metadata.md#_snippet_0

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI

app = FastAPI(
    title="My Super Project",
    description="This is a very fancy project, with auto docs for the API and everything",
    version="2.5.0",
    terms_of_service="http://example.com/terms/",
    contact={
        "name": "Deadpoolio the Amazing",
        "url": "http://x-force.example.com/contact/",
        "email": "dp@x-force.example.com",
    },
    license_info={
        "name": "Apache 2.0",
        "url": "https://www.apache.org/licenses/LICENSE-2.0.html",
    },
)
```

----------------------------------------

TITLE: Defining an Enum for Predefined Path Parameter Values (Python)
DESCRIPTION: Shows how to create a Python `Enum` class that inherits from `str` and `Enum`. This allows defining a set of predefined, valid string values for a path parameter, which FastAPI uses for validation and documentation.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/path-params.md#_snippet_8

LANGUAGE: Python
CODE:
```
from enum import Enum
from fastapi import FastAPI

class ModelName(str, Enum):
    alexnet = "alexnet"
    resnet = "resnet"
    lenet = "lenet"

app = FastAPI()
```

----------------------------------------

TITLE: Declaring Optional Body Parameters in FastAPI
DESCRIPTION: This snippet demonstrates how to define an optional request body parameter in a FastAPI path operation. By setting the default value of a Pydantic model parameter to `None`, FastAPI understands that the body is not strictly required for the request. It also shows how to mix path and query parameters with an optional body.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/body-multiple-params.md#_snippet_0

LANGUAGE: Python
CODE:
```
from typing import Union
from fastapi import FastAPI, Path, Query
from pydantic import BaseModel

class Item(BaseModel):
    name: str
    description: Union[str, None] = None
    price: float
    tax: Union[float, None] = None

app = FastAPI()

@app.put("/items/{item_id}")
async def update_item(
    item_id: int = Path(..., gt=0),
    q: Union[str, None] = None,
    item: Union[Item, None] = None,
):
    results = {"item_id": item_id}
    if q:
        results.update({"q": q})
    if item:
        results.update({"item": item.dict()})
    return results
```

----------------------------------------

TITLE: Copying Python Dependencies for Docker Cache - Dockerfile
DESCRIPTION: This Dockerfile instruction copies the `requirements.txt` file into the `/code` directory of the Docker image. This is done early in the Dockerfile to leverage Docker's build cache, as this file changes less frequently than the application code, allowing subsequent steps to use cached layers.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/deployment/docker.md#_snippet_9

LANGUAGE: Dockerfile
CODE:
```
COPY ./requirements.txt /code/requirements.txt
```

----------------------------------------

TITLE: Creating and Configuring JWT Tokens (Python)
DESCRIPTION: This snippet defines the configuration for JSON Web Tokens (JWT), including a secret key, algorithm, and token expiration time. It also defines Pydantic models for `Token` and `TokenData` and provides a `create_access_token` function to generate new JWTs, encoding user data and an expiration timestamp.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/security/oauth2-jwt.md#_snippet_3

LANGUAGE: Python
CODE:
```
from datetime import datetime, timedelta
from typing import Optional

from jose import JWTError, jwt
from pydantic import BaseModel

# Configuration for JWT
SECRET_KEY = "your-secret-key" # Replace with a strong, random key
ALGORITHM = "HS256"
ACCESS_TOKEN_EXPIRE_MINUTES = 30

class Token(BaseModel):
    access_token: str
    token_type: str

class TokenData(BaseModel):
    username: Optional[str] = None

def create_access_token(data: dict, expires_delta: Optional[timedelta] = None):
    to_encode = data.copy()
    if expires_delta:
        expire = datetime.utcnow() + expires_delta
    else:
        expire = datetime.utcnow() + timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)
    to_encode.update({"exp": expire})
    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)
    return encoded_jwt
```

----------------------------------------

TITLE: Load application settings from .env file with Pydantic
DESCRIPTION: This section demonstrates how to use Pydantic to load application configurations from a `.env` file. It includes an example `.env` file and shows the necessary Python code for both Pydantic v1 and v2 to configure the `Settings` class to read from it.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/advanced/settings.md#_snippet_3

LANGUAGE: Bash
CODE:
```
ADMIN_EMAIL="deadpool@example.com"
APP_NAME="ChimichangApp"
```

LANGUAGE: Python
CODE:
```
from pydantic_settings import BaseSettings, SettingsConfigDict

class Settings(BaseSettings):
    model_config = SettingsConfigDict(env_file=".env")

    app_name: str = "Awesome API"
    admin_email: str = "admin@example.com"
```

LANGUAGE: Python
CODE:
```
from pydantic import BaseSettings

class Settings(BaseSettings):
    class Config:
        env_file = ".env"

    app_name: str = "Awesome API"
    admin_email: str = "admin@example.com"
```

----------------------------------------

TITLE: Adding Custom ASGI Middleware to FastAPI Application
DESCRIPTION: This snippet illustrates the recommended way to add an ASGI middleware, `UnicornMiddleware`, to a FastAPI application using `app.add_middleware()`. This method ensures proper handling of server errors and custom exception handlers, providing a simpler and more robust integration compared to manually wrapping the app. The `some_config` parameter is passed directly to the middleware class.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/advanced/middleware.md#_snippet_1

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI
from unicorn import UnicornMiddleware

app = FastAPI()

app.add_middleware(UnicornMiddleware, some_config="rainbow")
```

----------------------------------------

TITLE: Implementing OAuth2 Password Bearer Flow in FastAPI
DESCRIPTION: This snippet sets up a basic FastAPI application with OAuth2 password bearer authentication. It defines an OAuth2PasswordBearer instance pointing to a 'tokenUrl' and uses it as a dependency for an endpoint to secure it. The endpoint expects an 'Authorization' header with a Bearer token.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/security/first-steps.md#_snippet_0

LANGUAGE: Python
CODE:
```
from fastapi import Depends, FastAPI
from fastapi.security import OAuth2PasswordBearer

app = FastAPI()

oauth2_scheme = OAuth2PasswordBearer(tokenUrl="token")

@app.get("/users/me")
async def read_users_me(token: str = Depends(oauth2_scheme)):
    return {"token": token}
```

----------------------------------------

TITLE: Pinning FastAPI Version - Minor Range (requirements.txt)
DESCRIPTION: This snippet shows how to pin FastAPI to a range of versions within a minor release (e.g., 0.112.x) using `requirements.txt`. This allows for bug fixes and non-breaking patch updates while preventing major or minor breaking changes.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/deployment/versions.md#_snippet_1

LANGUAGE: txt
CODE:
```
fastapi[standard]>=0.112.0,<0.113.0
```

----------------------------------------

TITLE: Function Parameters with Type Hints
DESCRIPTION: This snippet demonstrates the addition of type hints to function parameters, changing `first_name, last_name` to `first_name: str, last_name: str`. By explicitly declaring `str` types, editors can provide better autocompletion and static analysis, improving code development.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/python-types.md#_snippet_2

LANGUAGE: Python
CODE:
```
first_name: str, last_name: str
```

----------------------------------------

TITLE: Testing FastAPI App with Relative Import
DESCRIPTION: This snippet demonstrates how to test a FastAPI application when the test file is located within the same Python package as the application. It uses a relative import to access the `app` instance and then proceeds with standard `TestClient` usage and `pytest` assertions.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/tutorial/testing.md#_snippet_3

LANGUAGE: Python
CODE:
```
from fastapi.testclient import TestClient
from .main import app

client = TestClient(app)

def test_read_main():
    response = client.get("/")
    assert response.status_code == 200
    assert response.json() == {"msg": "Hello World"}
```

----------------------------------------

TITLE: Mounting Static Files in FastAPI
DESCRIPTION: This snippet demonstrates how to serve static files in a FastAPI application. It imports `FastAPI` and `StaticFiles`, initializes a FastAPI app, and then "mounts" a `StaticFiles` instance at the `/static` path. The `directory="static"` parameter specifies the local directory containing the static files, and `name="static"` provides an internal reference name for the mounted application.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/static-files.md#_snippet_0

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI
from fastapi.staticfiles import StaticFiles

app = FastAPI()

app.mount("/static", StaticFiles(directory="static"), name="static")
```

----------------------------------------

TITLE: Importing List from Typing Module (Python)
DESCRIPTION: This snippet demonstrates importing the `List` type from Python's standard `typing` module. This is a prerequisite for declaring lists with specific element types, enabling more precise type hints and validation.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/tutorial/body-nested-models.md#_snippet_1

LANGUAGE: Python
CODE:
```
from typing import List
```

----------------------------------------

TITLE: Handling Dependency Errors with HTTPException in FastAPI
DESCRIPTION: These snippets show how dependency functions can raise `HTTPException` to signal errors, such as invalid header values. When an exception is raised by a dependency, the path operation is not executed, and FastAPI automatically returns an HTTP error response to the client.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/tutorial/dependencies/dependencies-in-path-operation-decorators.md#_snippet_2

LANGUAGE: Python
CODE:
```
from typing import Annotated
from fastapi import Header, HTTPException

async def verify_key(x_key: Annotated[str, Header()]):
    if x_key != "fake-super-secret-key":
        raise HTTPException(status_code=400, detail="X-Key header invalid")
    return x_key

async def verify_token(x_token: Annotated[str, Header()]):
    if x_token != "fake-super-secret-token":
        raise HTTPException(status_code=400, detail="X-Token header invalid")
    return x_token
```

----------------------------------------

TITLE: Running Uvicorn in Docker for FastAPI
DESCRIPTION: This command specifies the entry point for the Docker container, running the `uvicorn` server. It tells `uvicorn` to serve the `app` instance from the `main.py` module within the `app` package, listening on all network interfaces (`0.0.0.0`) on port 80. This is typically the final command in a production Docker image.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/deployment/docker.md#_snippet_17

LANGUAGE: Dockerfile
CODE:
```
CMD ["uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "80"]
```

----------------------------------------

TITLE: Defining Asynchronous Functions with `async def` in Python
DESCRIPTION: This snippet illustrates the declaration of an asynchronous function using `async def`. This keyword signals to Python that the function is a coroutine, capable of being paused and resumed, and may contain `await` expressions. Such functions are essential for non-blocking operations, allowing the program to perform other work while waiting for I/O-bound tasks to complete.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/async.md#_snippet_4

LANGUAGE: Python
CODE:
```
async def get_burgers(number: int):
    # Do some asynchronous stuff to create the burgers
    return burgers
```

----------------------------------------

TITLE: Overriding FastAPI Settings Dependency for Testing
DESCRIPTION: This test snippet demonstrates how to override the `get_settings` dependency in FastAPI for testing purposes. A new `Settings` object with a modified `admin_email` is returned by `override_get_settings`, ensuring that tests can run with specific configurations without affecting the main application.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/advanced/settings.md#_snippet_3

LANGUAGE: Python
CODE:
```
from fastapi.testclient import TestClient
from main import app, get_settings
from config import Settings

def override_get_settings():
    return Settings(admin_email="testing@example.com")

app.dependency_overrides[get_settings] = override_get_settings

client = TestClient(app)

def test_info():
    response = client.get("/info")
    assert response.status_code == 200
    assert response.json() == {
        "app_name": "My App",
        "admin_email": "testing@example.com",
    }
```

----------------------------------------

TITLE: Override FastAPI settings dependency for testing
DESCRIPTION: This Python test snippet shows how to override the `get_settings` dependency using FastAPI's `app.dependency_overrides` for testing purposes. A custom `Settings` object with a modified `admin_email` is provided, and the test asserts that the overridden value is used.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/advanced/settings.md#_snippet_2

LANGUAGE: Python
CODE:
```
from fastapi.testclient import TestClient

from main import app, get_settings
from config import Settings

def override_get_settings():
    return Settings(admin_email="testing_admin@example.com")

app.dependency_overrides[get_settings] = override_get_settings

client = TestClient(app)

def test_info_override_admin_email():
    response = client.get("/info")
    assert response.status_code == 200
    assert response.json() == {
        "app_name": "Awesome API",
        "admin_email": "testing_admin@example.com",
    }
```

----------------------------------------

TITLE: Using Settings from `config.py` in `main.py`
DESCRIPTION: This `main.py` file demonstrates how to import and use the `settings` object from a separate `config.py` module. By importing `settings` from `.config`, the FastAPI application can access its configuration values, promoting a clean separation of concerns and making the application structure more organized.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/advanced/settings.md#_snippet_16

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI

from .config import settings

app = FastAPI()


@app.get("/info")
async def info():
    return {
        "app_name": settings.app_name,
        "admin_email": settings.admin_email,
        "items_per_user": settings.items_per_user,
    }
```

----------------------------------------

TITLE: Importing and Instantiating APIRouter in FastAPI
DESCRIPTION: Shows how to import the `APIRouter` class from `fastapi` and create an instance of it within a module, which will be used to define path operations.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/bigger-applications.md#_snippet_2

LANGUAGE: Python
CODE:
```
from fastapi import APIRouter

router = APIRouter()
```

----------------------------------------

TITLE: Understanding Optional vs. Union in Function Parameters (Python 3.6+)
DESCRIPTION: Illustrates a common pitfall when using `Optional[str]` without a default value, showing that the parameter is still required unless explicitly passed `None`. It highlights the distinction between a type allowing `None` and a parameter being optional.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/python-types.md#_snippet_5

LANGUAGE: Python
CODE:
```
from typing import Optional

def say_hi(name: Optional[str]):
    if name:
        print(f"Hi {name}!")
    else:
        print("Hi!")
```

----------------------------------------

TITLE: Importing HTTPException in FastAPI
DESCRIPTION: This snippet demonstrates how to import the `HTTPException` class from the `fastapi` module, which is essential for raising HTTP-specific errors in FastAPI applications.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ja/docs/tutorial/handling-errors.md#_snippet_0

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI, HTTPException
```

----------------------------------------

TITLE: Handling Exceptions and Ensuring Cleanup in FastAPI Dependencies
DESCRIPTION: This example illustrates how to use `try` and `finally` blocks within a FastAPI dependency that uses `yield`. The `try` block allows catching exceptions that occur during the dependency's usage, while the `finally` block guarantees that cleanup code (like closing a database session) is executed regardless of whether an exception occurred.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/dependencies/dependencies-with-yield.md#_snippet_3

LANGUAGE: Python
CODE:
```
async def get_db():
    db = DBSession()
    try:
        yield db
    finally:
        db.close()
```

----------------------------------------

TITLE: Mixing Required, Default, and Optional Query Parameters in FastAPI
DESCRIPTION: This example demonstrates the flexibility of FastAPI in defining query parameters with varying requirements. It includes a required parameter (`needy`), a parameter with a default value (`skip`), and an entirely optional parameter (`limit`), showcasing how FastAPI intelligently handles their presence and types.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/query-params.md#_snippet_5

LANGUAGE: Python
CODE:
```
from typing import Union
from fastapi import FastAPI

app = FastAPI()

@app.get("/items/{item_id}")
async def read_user_item(
    item_id: str, needy: str, skip: int = 0, limit: Union[int, None] = None
):
    item = {"item_id": item_id, "needy": needy, "skip": skip, "limit": limit}
    return item
```

----------------------------------------

TITLE: Defining FastAPI Lifespan Startup Logic (Python)
DESCRIPTION: This snippet illustrates the startup logic within an `asynccontextmanager` for FastAPI's lifespan events. Code before `yield` executes during application startup (e.g., loading an ML model). While not shown in this specific snippet, code after `yield` would execute during shutdown, ensuring resources are managed efficiently.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/advanced/events.md#_snippet_0

LANGUAGE: Python
CODE:
```
# Load the ML model
print("Loading ML model")
models["my_model"] = "Some ML Model" # Simulate loading
yield
```

----------------------------------------

TITLE: Validating Token Data with Pydantic and Scopes (Python)
DESCRIPTION: This snippet shows how to enhance a Pydantic model (`TokenData`) to include a `scopes` property, allowing for robust validation of the token's payload. It demonstrates catching `ValidationError` during token data parsing and raising a standardized `HTTPException` if the data shape or content is invalid, ensuring data integrity and security.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/advanced/security/oauth2-scopes.md#_snippet_3

LANGUAGE: Python
CODE:
```
from pydantic import BaseModel, ValidationError
from fastapi import HTTPException

class TokenData(BaseModel):
    username: str | None = None
    scopes: list[str] = [] # New property to validate scopes

async def get_current_user(
    security_scopes: SecurityScopes, token: Annotated[str, Depends(oauth2_scheme)]
):
    # ... credentials_exception definition ...
    try:
        # In a real app, this would involve decoding a JWT
        # For demonstration, assume token_data is parsed from 'token'
        token_data = TokenData(username="testuser", scopes=["me", "items"])
        username = token_data.username
        if username is None:
            raise credentials_exception
    except ValidationError: # Catch Pydantic validation errors
        raise credentials_exception
    except Exception: # Catch other decoding/parsing errors
        raise credentials_exception
    # ... rest of the function logic ...
    pass
```

----------------------------------------

TITLE: Declaring List Response Model in FastAPI (Python)
DESCRIPTION: This snippet demonstrates how to declare a FastAPI response that returns a list of Pydantic models. By setting `response_model=List[Item]`, FastAPI automatically generates an OpenAPI schema indicating an array of `Item` objects. This is suitable for endpoints returning collections of structured data.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/extra-models.md#_snippet_15

LANGUAGE: Python
CODE:
```
from typing import List

from fastapi import FastAPI
from pydantic import BaseModel

app = FastAPI()

class Item(BaseModel):
    name: str
    price: float

@app.get("/items/", response_model=List[Item])
async def read_items():
    return [
        {"name": "Foo", "price": 42},
        {"name": "Bar", "price": 24}
    ]
```

----------------------------------------

TITLE: Adding Third-Party Middleware to FastAPI App
DESCRIPTION: This example shows the recommended way to add a third-party ASGI middleware, `UnicornMiddleware`, to a FastAPI application using `app.add_middleware()`. This method correctly integrates the middleware with FastAPI's internal handling of requests and custom exceptions.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/advanced/middleware.md#_snippet_1

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI
from unicorn import UnicornMiddleware

app = FastAPI()

app.add_middleware(UnicornMiddleware, some_config="rainbow")
```

----------------------------------------

TITLE: Dynamically Setting HTTP Status Code in FastAPI
DESCRIPTION: This snippet demonstrates how to dynamically set the HTTP status code of a FastAPI response using the `Response` parameter. It allows for returning different status codes (e.g., `200 OK` or `201 CREATED`) based on business logic, while still leveraging `response_model` for data filtering and conversion. The `Response` object is temporary, used by FastAPI to extract status, cookies, and headers before the final response.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/advanced/response-change-status-code.md#_snippet_0

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI, Response, status
from pydantic import BaseModel

app = FastAPI()

class Item(BaseModel):
    name: str
    description: str | None = None

items_db = {}

@app.post("/items/{item_id}", response_model=Item)
async def create_item(item_id: str, item: Item, response: Response):
    if item_id in items_db:
        response.status_code = status.HTTP_200_OK
        return items_db[item_id]
    else:
        items_db[item_id] = item
        response.status_code = status.HTTP_201_CREATED
        return item
```

----------------------------------------

TITLE: Defining Required Query Parameter with Default Value and Min Length in FastAPI Python
DESCRIPTION: This snippet shows how to define a required query parameter `q` that has a default value of 'fixedquery' and a `min_length` validation of 3. Even though it has a default, it's considered required because it's not `None` and `Query` is used without `default=None`.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/query-params-str-validations.md#_snippet_14

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI, Query

app = FastAPI()


@app.get("/items/")
async def read_items(q: str = Query(default="fixedquery", min_length=3)):
    results = {"items": [{"item_id": "Foo"}, {"item_id": "Bar"}]}
    if q:
        results.update({"q
```

----------------------------------------

TITLE: Importing HTTPSRedirectMiddleware in FastAPI (Python)
DESCRIPTION: This snippet illustrates how to import the HTTPSRedirectMiddleware from FastAPI. This middleware automatically redirects all incoming HTTP requests to their HTTPS equivalents, ensuring secure communication for your application.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/reference/middleware.md#_snippet_2

LANGUAGE: python
CODE:
```
from fastapi.middleware.httpsredirect import HTTPSRedirectMiddleware
```

----------------------------------------

TITLE: Handling Union Types for API Responses in FastAPI
DESCRIPTION: This snippet demonstrates how to use typing.Union in FastAPI's response_model to indicate that an endpoint can return one of several Pydantic model types (PlaneItem or CarItem). This generates OpenAPI anyOf schema, allowing flexible API responses based on logic.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/extra-models.md#_snippet_8

LANGUAGE: Python
CODE:
```
from typing import Union
from fastapi import FastAPI
from pydantic import BaseModel

app = FastAPI()

class CarItem(BaseModel):
    type: str = "car"
    model: str

class PlaneItem(BaseModel):
    type: str = "plane"
    model: str
    wingspan: float

@app.get("/items/{item_id}", response_model=Union[PlaneItem, CarItem])
async def read_item(item_id: str):
    if item_id == "plane":
        return PlaneItem(model="Boeing 747", wingspan=64.4)
    return CarItem(model="Tesla Model S")
```

----------------------------------------

TITLE: Defining Optional Query Parameter in FastAPI (Python 3.10+)
DESCRIPTION: This snippet demonstrates how to define an optional query parameter `q` in a FastAPI application using Python 3.10+ type hints (`str | None`). The parameter defaults to `None`, making it non-required. FastAPI automatically handles its extraction and type conversion.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/tutorial/query-params-str-validations.md#_snippet_0

LANGUAGE: Python
CODE:
```
q: str | None = None
```

----------------------------------------

TITLE: Declaring Optional Query Parameter with Query Default in FastAPI Python
DESCRIPTION: This snippet shows how to explicitly declare an optional query parameter `q` using `Query(default=None)`. This is functionally equivalent to `q: Union[str, None] = None` but allows for additional metadata and validations to be applied later.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/query-params-str-validations.md#_snippet_8

LANGUAGE: Python
CODE:
```
q: Union[str, None] = Query(default=None)
```

----------------------------------------

TITLE: Using Pydantic's HttpUrl Type for Validation (Python)
DESCRIPTION: This snippet demonstrates using Pydantic's `HttpUrl` type for the `url` field in the `Image` model. This provides automatic validation to ensure the string is a valid URL and enhances the generated OpenAPI documentation accordingly.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/tutorial/body-nested-models.md#_snippet_8

LANGUAGE: Python
CODE:
```
from pydantic import BaseModel, HttpUrl

# ... other code ...

class Image(BaseModel):
    url: HttpUrl
    name: str | None = None
```

----------------------------------------

TITLE: Initializing Database Tables on FastAPI Startup
DESCRIPTION: Registers a startup event handler for the FastAPI application that calls `create_db_and_tables()`. This ensures that all necessary database tables are created automatically when the FastAPI application starts, preparing the database for operations.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/tutorial/sql-databases.md#_snippet_5

LANGUAGE: python
CODE:
```
from fastapi import FastAPI

app = FastAPI()


@app.on_event("startup")
def on_startup():
    create_db_and_tables()
```

----------------------------------------

TITLE: Reading Multiple Heroes with Pagination in FastAPI
DESCRIPTION: This FastAPI GET endpoint retrieves a list of `Hero` objects from the database. It uses `sqlmodel.select()` with optional `offset` and `limit` parameters for pagination, allowing clients to fetch heroes in batches. The results are returned as a list of `Hero` instances.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/sql-databases.md#_snippet_7

LANGUAGE: Python
CODE:
```
@router.get("/heroes/", response_model=List[Hero])
def read_heroes(session: SessionDep, offset: int = 0, limit: int = 100):
    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()
    return heroes
```

----------------------------------------

TITLE: Run Docker Container for FastAPI
DESCRIPTION: Command to run a Docker container based on the previously built 'myimage'. The '-d' flag runs the container in detached mode, '--name mycontainer' assigns a name, and '-p 80:80' maps port 80 of the host to port 80 of the container.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ko/docs/deployment/docker.md#_snippet_4

LANGUAGE: Shell
CODE:
```
docker run -d --name mycontainer -p 80:80 myimage
```

----------------------------------------

TITLE: Applying String Length Validation with Annotated and Query (Python)
DESCRIPTION: This snippet demonstrates how to add string length validation to an optional query parameter `q` using `Annotated` and `Query` in FastAPI. By including `Query(max_length=50)` within `Annotated`, it enforces that the provided string for `q` must not exceed 50 characters, while still allowing the parameter to be optional.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/query-params-str-validations.md#_snippet_6

LANGUAGE: Python
CODE:
```
async def read_items(q: Annotated[str | None, Query(max_length=50)] = None):
```

----------------------------------------

TITLE: Using BackgroundTasks with Dependency Injection
DESCRIPTION: This example illustrates how `BackgroundTasks` can be integrated with FastAPI's dependency injection system. It demonstrates injecting `BackgroundTasks` directly into a path operation and also through a dependency function. FastAPI ensures that all tasks added via any injected `BackgroundTasks` object (whether direct or from a dependency) are collected and executed together after the response is sent.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/background-tasks.md#_snippet_3

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI, BackgroundTasks, Depends

app = FastAPI()

def write_log(message: str):
    with open("log.txt", mode="a") as log:
        log.write(f"Log: {message}\n")

def get_background_tasks_dependency(background_tasks: BackgroundTasks):
    background_tasks.add_task(write_log, "Task from dependency: Before response")
    return background_tasks

@app.post("/send-notification/{email}")
async def send_notification(
    email: str,
    background_tasks_direct: BackgroundTasks,
    background_tasks_from_dep: BackgroundTasks = Depends(get_background_tasks_dependency)
):
    background_tasks_direct.add_task(write_log, f"Task from path operation: Email for {email}")
    return {"message": "Notification sent in the background"}
```

----------------------------------------

TITLE: Handling Exceptions in FastAPI Yield Dependencies with Try/Finally
DESCRIPTION: This example shows how to use `try` and `finally` blocks in a `yield`-based dependency. The `finally` block guarantees that cleanup code (like closing a database connection) is executed, even if an exception occurs during the path operation or other dependencies.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/dependencies/dependencies-with-yield.md#_snippet_1

LANGUAGE: Python
CODE:
```
def dependency_with_try_finally():
    print("Dependency setup")
    try:
        yield "resource"
    except Exception as e:
        print(f"An error occurred: {e}")
        # Optionally re-raise or handle
        raise
    finally:
        print("Cleanup code executed")
```

----------------------------------------

TITLE: Handling Multiple File Uploads in FastAPI
DESCRIPTION: This snippet demonstrates how to handle multiple file uploads by type-hinting the parameter as a `List[bytes]` or `List[UploadFile]`. FastAPI automatically processes each uploaded file, allowing the endpoint to receive and iterate over a collection of files.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/request-files.md#_snippet_7

LANGUAGE: Python
CODE:
```
@app.post("/files/")
async def create_files(files: List[bytes] = File(...)):
    return {"file_sizes": [len(file) for file in files]}

@app.post("/uploadfiles/")
async def create_upload_files(files: List[UploadFile]):
    return {"filenames": [file.filename for file in files], "content_types": [file.content_type for file in files]}
```

----------------------------------------

TITLE: Importing Security for OAuth2 Scopes in FastAPI
DESCRIPTION: This snippet demonstrates importing the `Security` function from `fastapi`. While `Depends` handles general dependencies, `Security` is specifically used when declaring OAuth2 scopes in addition to regular dependency injection, often for more granular access control in API security.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/reference/dependencies.md#_snippet_1

LANGUAGE: python
CODE:
```
from fastapi import Security
```

----------------------------------------

TITLE: Handling Multiple File Uploads in FastAPI
DESCRIPTION: This snippet illustrates how to accept multiple file uploads in a single FastAPI endpoint. By declaring the parameter as a 'List[UploadFile]', FastAPI automatically handles parsing multiple files sent under the same form field name.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/request-files.md#_snippet_8

LANGUAGE: Python
CODE:
```
from typing import List
from fastapi import FastAPI, UploadFile

app = FastAPI()

@app.post("/uploadfiles/")
async def create_upload_files(files: List[UploadFile]):
    return [{"filename": file.filename, "content_type": file.content_type} for file in files]
```

----------------------------------------

TITLE: Declaring a Synchronous FastAPI Path Operation
DESCRIPTION: This snippet shows how to define a FastAPI path operation function using a standard `def`. This approach is suitable for CPU-bound operations that do not involve `await`, or for I/O-bound operations using synchronous libraries. FastAPI will run these functions in a separate thread pool to prevent blocking the main event loop.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/async.md#_snippet_2

LANGUAGE: Python
CODE:
```
@app.get('/')
def results():
    results = some_library()
    return results
```

----------------------------------------

TITLE: Define Pydantic Settings class for application configuration
DESCRIPTION: This Python file defines a Pydantic `Settings` class to manage application configurations like `app_name` and `admin_email`. It does not create a default instance, allowing for dependency injection.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/advanced/settings.md#_snippet_0

LANGUAGE: Python
CODE:
```
from pydantic_settings import BaseSettings

class Settings(BaseSettings):
    app_name: str = "Awesome API"
    admin_email: str = "admin@example.com"
```

----------------------------------------

TITLE: Building a Docker Image - Console
DESCRIPTION: This console command builds a Docker image from the `Dockerfile` in the current directory (`.`). The `-t myimage` flag tags the resulting image with the name `myimage`, making it easy to reference later. This command initiates the image creation process based on the Dockerfile instructions.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/deployment/docker.md#_snippet_12

LANGUAGE: console
CODE:
```
docker build -t myimage .
```

----------------------------------------

TITLE: Defining Application Settings with Pydantic (Initial)
DESCRIPTION: This snippet defines the `Settings` class using Pydantic's `BaseSettings` to manage application configurations like `admin_email` and `app_name`. Unlike previous examples, it does not create a default instance of `Settings` at the module level.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/advanced/settings.md#_snippet_0

LANGUAGE: Python
CODE:
```
from pydantic import BaseSettings

class Settings(BaseSettings):
    admin_email: str = "admin@example.com"
    app_name: str = "My App"
```

----------------------------------------

TITLE: Adding Max Length Validation to Optional Query Parameter in FastAPI Python
DESCRIPTION: This snippet extends the previous example by using `Query` to define the `q` parameter. It sets a `max_length` validation of 50 characters, ensuring that if `q` is provided, its length does not exceed 50. The `default=None` argument explicitly marks the parameter as optional while applying validations.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/query-params-str-validations.md#_snippet_7

LANGUAGE: Python
CODE:
```
from typing import Union

from fastapi import FastAPI, Query

app = FastAPI()


@app.get("/items/")
async def read_items(q: Union[str, None] = Query(default=None, max_length=50)):
    results = {"items": [{"item_id": "Foo"}, {"item_id": "Bar"}]}
    if q:
        results.update({"q": q})
    return results
```

----------------------------------------

TITLE: Implementing Nested Data Structures with Pydantic Dataclasses in FastAPI
DESCRIPTION: This snippet demonstrates using `pydantic.dataclasses` to create complex, nested data structures for both request bodies and response models in FastAPI. It shows how to combine dataclasses with standard type annotations (like `List`) and how FastAPI handles serialization of dictionaries into dataclass-defined responses, even when the path operation returns raw dictionaries.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/advanced/dataclasses.md#_snippet_2

LANGUAGE: Python
CODE:
```
from dataclasses import field
from typing import List, Optional

from fastapi import FastAPI
from pydantic.dataclasses import dataclass

app = FastAPI()

@dataclass
class Item:
    name: str
    price: float
    tags: List[str] = field(default_factory=list)

@dataclass
class Author:
    name: str
    items: List[Item] = field(default_factory=list)

@app.post("/authors/", response_model=Author)
def create_author(author: Author):
    return author

@app.post("/items_list/", response_model=List[Item])
def create_items_list(items: List[Item]):
    return items

@app.get("/authors_list/", response_model=List[Author])
def get_authors_list():
    return [
        {"name": "Author 1", "items": [{"name": "Item A", "price": 10.0}]},
        {"name": "Author 2", "items": [{"name": "Item B", "price": 20.0}]},
    ]
```

----------------------------------------

TITLE: Adding Min and Max Length Validation to Query Parameter in FastAPI
DESCRIPTION: This snippet extends the previous example by adding a `min_length` validation of 3 characters to the 'q' query parameter, ensuring its value is between 3 and 50 characters long if provided.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/tutorial/query-params-str-validations.md#_snippet_3

LANGUAGE: Python
CODE:
```
from typing import Union

from fastapi import FastAPI, Query

app = FastAPI()


@app.get("/items/")
async def read_items(q: Union[str, None] = Query(default=None, min_length=3, max_length=50)):
    return {"q": q}
```

----------------------------------------

TITLE: Testing FastAPI Startup/Shutdown Events with TestClient in Python
DESCRIPTION: This snippet demonstrates how to test FastAPI's `startup` and `shutdown` event handlers. By instantiating `TestClient` with the FastAPI application and using it within a `with` statement, the `startup` event is triggered upon entering the context, and the `shutdown` event is triggered upon exiting it. This ensures that any resource initialization or cleanup logic defined in these handlers is executed during tests.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/advanced/testing-events.md#_snippet_0

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI
from fastapi.testclient import TestClient

app = FastAPI()

@app.on_event("startup")
async def startup_event():
    print("Application startup event triggered.")
    app.state.initialized_resource = "resource_data"

@app.on_event("shutdown")
async def shutdown_event():
    print("Application shutdown event triggered.")
    if hasattr(app.state, "initialized_resource"):
        del app.state.initialized_resource

@app.get("/")
async def read_root():
    return {"message": "Hello", "resource": app.state.initialized_resource}

client = TestClient(app)

def test_read_main():
    with client:
        # The startup event runs here
        response = client.get("/")
        assert response.status_code == 200
        assert response.json() == {"message": "Hello", "resource": "resource_data"}
    # The shutdown event runs here after the 'with' block exits
```

----------------------------------------

TITLE: Declaring `get_current_user` Dependency (FastAPI)
DESCRIPTION: Declares the `get_current_user` asynchronous dependency function. It receives the raw authentication token as a string, which is automatically injected by FastAPI using the `oauth2_scheme`.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/security/get-current-user.md#_snippet_2

LANGUAGE: Python
CODE:
```
async def get_current_user(token: str = Depends(oauth2_scheme)):
```

----------------------------------------

TITLE: Asynchronous Testing with pytest-anyio and HTTPX (test_main.py)
DESCRIPTION: This snippet demonstrates how to write asynchronous tests for a FastAPI application using `pytest.mark.anyio` and `httpx.AsyncClient`. It includes a test function that makes an asynchronous GET request to the application and asserts the response.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/advanced/async-tests.md#_snippet_1

LANGUAGE: Python
CODE:
```
import pytest
from httpx import AsyncClient

from app.main import app

@pytest.mark.anyio
async def test_read_main():
    async with AsyncClient(app=app, base_url="http://test") as client:
        response = await client.get("/")
    assert response.status_code == 200
    assert response.json() == {"message": "Hello Bigger Applications!"}
```

----------------------------------------

TITLE: Optional Query Parameter with Annotated and Validations
DESCRIPTION: This snippet demonstrates how to declare an optional query parameter `q` using `Annotated`, allowing it to be `str` or `None`, and applying a `min_length` validation. The default value is `None`.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/query-params-str-validations.md#_snippet_18

LANGUAGE: Python
CODE:
```
q: Annotated[str | None, Query(min_length=3)] = None
```

----------------------------------------

TITLE: Wrapping Optional String with Annotated (Python 3.10+)
DESCRIPTION: This snippet demonstrates how to wrap an optional string type hint (`str | None`) with `Annotated` in Python 3.10+. This prepares the parameter `q` to receive additional metadata or validation rules from FastAPI, while still maintaining its optional nature with a default of `None`.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/query-params-str-validations.md#_snippet_4

LANGUAGE: Python
CODE:
```
q: Annotated[str | None] = None
```

----------------------------------------

TITLE: Incorrectly Calling an `async def` Function
DESCRIPTION: Highlights that an `async def` function must be `await`ed when called from another `async def` function or run by an event loop. Directly calling it without `await` returns a coroutine object, not its result.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/async.md#_snippet_5

LANGUAGE: Python
CODE:
```
burgers = get_burgers(2)
```

----------------------------------------

TITLE: Adding a Task to BackgroundTasks
DESCRIPTION: This snippet shows how to register a background task within a path operation function. The `background_tasks.add_task()` method is used, taking the task function (`write_notification`) as its first argument, followed by any positional arguments (like `email`), and then keyword arguments (like `message`).
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/background-tasks.md#_snippet_2

LANGUAGE: Python
CODE:
```
    background_tasks.add_task(write_notification, email, message="some notification")
```

----------------------------------------

TITLE: Verifying Virtual Environment Activation on Linux/macOS/Bash (Console)
DESCRIPTION: This command checks if the virtual environment is correctly activated on Linux, macOS, and Windows Bash. It uses `which python` to display the path of the `python` executable currently being used. A successful activation will show the path pointing to the `python` binary inside the project's `.venv` directory.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/virtual-environments.md#_snippet_6

LANGUAGE: console
CODE:
```
$ which python

/home/user/code/awesome-project/.venv/bin/python
```

----------------------------------------

TITLE: Installing Pytest
DESCRIPTION: This command installs the `pytest` testing framework using pip, which is a prerequisite for running the provided FastAPI application tests.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/testing.md#_snippet_5

LANGUAGE: Shell
CODE:
```
pip install pytest
```

----------------------------------------

TITLE: Declaring an Async FastAPI Path Operation
DESCRIPTION: This example illustrates how to declare a FastAPI path operation function using `async def`. This is the appropriate choice when the function performs I/O-bound operations that involve `await`ing results from an asynchronous library, allowing FastAPI to handle other requests concurrently without blocking the event loop.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/async.md#_snippet_1

LANGUAGE: Python
CODE:
```
@app.get('/')
async def read_results():
    results = await some_library()
    return results
```

----------------------------------------

TITLE: Declaring a Required Query Parameter
DESCRIPTION: This snippet shows how to declare a required query parameter by simply providing its type hint without assigning a default value, making it mandatory for clients.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/query-params-str-validations.md#_snippet_17

LANGUAGE: Python
CODE:
```
q: str
```

----------------------------------------

TITLE: Defining a Simple FastAPI Application in main.py
DESCRIPTION: This code defines a simple FastAPI application in `main.py` with a single GET endpoint. This structure is typical for larger applications, allowing the application object to be imported and tested from other files, promoting modularity.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/testing.md#_snippet_2

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI

app = FastAPI()

@app.get("/")
async def read_main():
    return {"msg": "Hello Bigger Applications!"}
```

----------------------------------------

TITLE: Running Uvicorn with Docker CMD for FastAPI
DESCRIPTION: This Dockerfile `CMD` instruction defines the entry point for a containerized FastAPI application, initiating the Uvicorn server. It configures Uvicorn to serve the `app` instance from the `main` module, bind to all available network interfaces (`0.0.0.0`), and listen on port `80`. This command ensures the FastAPI application starts automatically when the Docker container is launched.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/deployment/docker.md#_snippet_13

LANGUAGE: Shell
CODE:
```
CMD ["uvicorn", "main:app", "--host", "0.0.0.0", "--port", "80"]
```

----------------------------------------

TITLE: Installing FastAPI with All Dependencies
DESCRIPTION: This command installs FastAPI along with all its optional dependencies, including Uvicorn, which is used to run the application. This comprehensive installation is recommended for a full development setup.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/index.md#_snippet_1

LANGUAGE: console
CODE:
```
pip install "fastapi[all]"
```

----------------------------------------

TITLE: Running FastAPI Application with Uvicorn
DESCRIPTION: This command starts the FastAPI application using Uvicorn, a fast ASGI server. The '--reload' flag enables auto-reloading on code changes, which is useful during development. It serves the 'app' instance from the 'main.py' file.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/security/first-steps.md#_snippet_1

LANGUAGE: console
CODE:
```
uvicorn main:app --reload
```

----------------------------------------

TITLE: Dynamically Setting Status Code with FastAPI Response Object
DESCRIPTION: This snippet demonstrates how to dynamically set the HTTP status code for a FastAPI path operation. By declaring a `Response` object as a parameter, you can modify its `status_code` attribute based on conditional logic, such as creating a resource (201 Created) or updating an existing one (200 OK). The `response_model` is still used for automatic data validation and serialization of the returned value.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/advanced/response-change-status-code.md#_snippet_0

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI, Response
from pydantic import BaseModel

app = FastAPI()

class Item(BaseModel):
    name: str
    description: str | None = None
    price: float
    tax: float | None = None

# In-memory database for demonstration
items_db = {
    "foo": {"name": "Foo", "price": 50.2},
    "bar": {"name": "Bar", "price": 62, "tax": 20.2}
}

@app.put("/items/{item_id}", response_model=Item)
async def update_item(item_id: str, item: Item, response: Response):
    if item_id not in items_db:
        response.status_code = 201  # Created
        items_db[item_id] = item.model_dump()
        return item
    else:
        response.status_code = 200  # OK
        items_db[item_id].update(item.model_dump())
        return items_db[item_id]
```

----------------------------------------

TITLE: Numeric Validation: Greater Than (`gt`) and Less Than or Equal (`le`) - Python
DESCRIPTION: This example illustrates the use of `gt` (greater than) and `le` (less than or equal) for numeric validations. The `item_id` must be an integer strictly greater than 0 and less than or equal to 100.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/path-params-numeric-validations.md#_snippet_5

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI, Path

app = FastAPI()

@app.get("/items/{item_id}")
async def read_items(item_id: int = Path(gt=0, le=100)): 
```

----------------------------------------

TITLE: Awaiting Asynchronous Function Calls in Python
DESCRIPTION: This snippet demonstrates the use of the `await` keyword to pause the execution of an asynchronous function until the `get_burgers(2)` coroutine completes. This allows the Python event loop to handle other tasks concurrently, improving application responsiveness, especially for I/O-bound operations. The result is then assigned to the `burgers` variable.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/async.md#_snippet_3

LANGUAGE: Python
CODE:
```
burgers = await get_burgers(2)
```

----------------------------------------

TITLE: Defining Async Path Operation with Await - FastAPI Python
DESCRIPTION: This FastAPI path operation function is defined using `async def` because it internally calls an `await`-able third-party library function. This pattern is suitable for I/O-bound operations, ensuring the FastAPI application remains non-blocking while waiting for external resources.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/tr/docs/async.md#_snippet_1

LANGUAGE: Python
CODE:
```
@app.get('/')
async def read_results():
    results = await some_library()
    return results
```

----------------------------------------

TITLE: Declaring Pydantic Model Examples (Pydantic v2)
DESCRIPTION: This snippet demonstrates how to declare examples for a Pydantic model using `model_config` and `json_schema_extra` in Pydantic v2. These examples are embedded directly into the generated JSON Schema, improving API documentation. It requires Pydantic v2 and FastAPI.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/schema-extra-example.md#_snippet_0

LANGUAGE: Python
CODE:
```
from pydantic import BaseModel

class Item(BaseModel):
    name: str
    description: str | None = None
    price: float
    tax: float | None = None

    model_config = {
        "json_schema_extra": {
            "examples": [
                {
                    "name": "Foo",
                    "description": "A very nice Item",
                    "price": 35.4,
                    "tax": 3.2,
                }
            ]
        }
    }
```

----------------------------------------

TITLE: Running FastAPI Application with Uvicorn - Console
DESCRIPTION: This console command starts the Uvicorn ASGI server, loading the `app` instance from the `main.py` module. It configures Uvicorn to listen on all network interfaces (`0.0.0.0`) on port `80`, making the FastAPI application accessible.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/deployment/manually.md#_snippet_2

LANGUAGE: console
CODE:
```
$ uvicorn main:app --host 0.0.0.0 --port 80
```

----------------------------------------

TITLE: Running FastAPI Application with `fastapi run` Command
DESCRIPTION: This command initiates a FastAPI application using the built-in `fastapi run` utility. It automatically locates the application object (e.g., 'app' from 'main.py') and launches an ASGI server (like Uvicorn) to serve it. This method is suitable for both development and production environments.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/deployment/manually.md#_snippet_0

LANGUAGE: bash
CODE:
```
fastapi run main.py
```

----------------------------------------

TITLE: Python Set Literal for Field Inclusion/Exclusion
DESCRIPTION: This snippet shows a Python set literal containing string elements. In FastAPI, `response_model_include` and `response_model_exclude` parameters expect a `set` of strings to specify which fields to include or exclude from the response model. This is a concise way to define such a set.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/response-model.md#_snippet_3

LANGUAGE: Python
CODE:
```
{"name", "description"}
```

----------------------------------------

TITLE: Configuring FastAPI with Root Path and Additional Servers (Python)
DESCRIPTION: This snippet demonstrates how to initialize a FastAPI application with a specified `root_path` for proxy environments and a custom list of `servers`. FastAPI automatically prepends the `root_path` as a server URL in the OpenAPI schema, allowing the same documentation UI to interact with different environments like staging and production.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/advanced/behind-a-proxy.md#_snippet_9

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI

app = FastAPI(
    root_path="/api/v1",
    servers=[
        {"url": "https://stag.example.com", "description": "Staging environment"},
        {"url": "https://prod.example.com", "description": "Production environment"}
    ]
)
```

----------------------------------------

TITLE: Defining Path Parameters with Advanced Python Types in FastAPI
DESCRIPTION: This snippet demonstrates how to define a FastAPI path operation with parameters using advanced Python standard library types such as `UUID`, `datetime` objects (`datetime`, `date`, `time`, `timedelta`), `frozenset`, `bytes`, and `Decimal`. FastAPI automatically handles the parsing, validation, and serialization of these types, providing robust data handling out of the box.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/extra-data-types.md#_snippet_0

LANGUAGE: Python
CODE:
```
from datetime import datetime, date, time, timedelta
from uuid import UUID
from decimal import Decimal
from typing import frozenset

from fastapi import FastAPI

app = FastAPI()

@app.put("/items/{item_id}")
async def update_item(
    item_id: UUID,
    start_datetime: datetime,
    end_date: date,
    process_at: time,
    duration: timedelta,
    items: frozenset[str],
    data: bytes,
    price: Decimal
):
    pass
```

----------------------------------------

TITLE: Overriding Request Validation Error Handler in FastAPI
DESCRIPTION: This snippet demonstrates how to override FastAPI's default handler for `RequestValidationError`. It allows customizing the response for invalid request data, returning a `JSONResponse` with a 422 status code and detailed validation errors.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ja/docs/tutorial/handling-errors.md#_snippet_7

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI, Request, status
from fastapi.exceptions import RequestValidationError
from fastapi.responses import JSONResponse
from pydantic import BaseModel

app = FastAPI()

@app.exception_handler(RequestValidationError)
async def validation_exception_handler(request: Request, exc: RequestValidationError):
    return JSONResponse(
        status_code=status.HTTP_422_UNPROCESSABLE_ENTITY,
        content={"detail": exc.errors()},
    )

class Item(BaseModel):
    title: str
    size: int

@app.post("/items/{item_id}")
async def create_item(item_id: int, item: Item):
    return {"item_id": item_id, **item.dict()}
```

----------------------------------------

TITLE: Declaring Pydantic Model Attributes with Field - Python
DESCRIPTION: This code illustrates how to use `Field` within a Pydantic `BaseModel` to declare attributes with default values, validation rules, and metadata. It shows how `Field` functions similarly to FastAPI's parameter functions (`Query`, `Path`, `Body`) for adding constraints and information to model fields.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/body-fields.md#_snippet_1

LANGUAGE: Python
CODE:
```
from typing import Optional
from pydantic import BaseModel, Field

class Item(BaseModel):
    name: str
    description: Optional[str] = Field(default=None, max_length=300)
    price: float = Field(gt=0)
    tax: Optional[float] = None
```

----------------------------------------

TITLE: Declaring an Integer Path Parameter in FastAPI
DESCRIPTION: This snippet demonstrates how to declare a path parameter `item_id` with an integer type using standard Python type hints in FastAPI. This declaration enables automatic type validation and editor support.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/index.md#_snippet_8

LANGUAGE: Python
CODE:
```
item_id: int
```

----------------------------------------

TITLE: Resetting FastAPI Dependency Overrides in Python
DESCRIPTION: This code snippet shows how to clear all active dependency overrides in a FastAPI application. By assigning an empty dictionary to `app.dependency_overrides`, all previously set mock dependencies are removed, restoring the application's original dependency resolution behavior. This is crucial for maintaining test isolation and ensuring that each test runs with a clean state.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/advanced/testing-dependencies.md#_snippet_0

LANGUAGE: Python
CODE:
```
app.dependency_overrides = {}
```

----------------------------------------

TITLE: Testing FastAPI App with Relative Imports in test_main.py
DESCRIPTION: This snippet demonstrates how to test a FastAPI application when the tests are in a separate file within the same Python package. It uses a relative import to bring in the `app` instance from `main.py` and then proceeds with standard `TestClient` usage for making requests and assertions.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/testing.md#_snippet_3

LANGUAGE: Python
CODE:
```
from fastapi.testclient import TestClient
from .main import app

client = TestClient(app)

def test_read_main():
    response = client.get("/")
    assert response.status_code == 200
    assert response.json() == {"msg": "Hello Bigger Applications!"}
```

----------------------------------------

TITLE: Using Settings Dependency in FastAPI Path Operation
DESCRIPTION: This FastAPI path operation function demonstrates how to inject the `Settings` object as a dependency using `Depends(get_settings)`. It then accesses the `app_name` and `admin_email` from the injected settings, returning them as part of the API response.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/advanced/settings.md#_snippet_2

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI, Depends

app = FastAPI()

@app.get("/info")
def info(settings: Settings = Depends(get_settings)):
    return {
        "app_name": settings.app_name,
        "admin_email": settings.admin_email,
    }
```

----------------------------------------

TITLE: Testing FastAPI Endpoints with Headers and JSON Payloads
DESCRIPTION: This snippet provides comprehensive tests for a FastAPI application with GET and POST endpoints requiring an `X-Token` header. It demonstrates how to send headers and JSON payloads with `TestClient` and assert responses for both successful and erroneous scenarios.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/testing.md#_snippet_4

LANGUAGE: Python
CODE:
```
from fastapi.testclient import TestClient
from .main import app

client = TestClient(app)

def test_read_items():
    response = client.get("/items/", headers={"X-Token": "fake-super-secret-token"})
    assert response.status_code == 200
    assert response.json() == [{"item_id": "Foo"}, {"item_id": "Bar"}]

def test_read_items_bad_token():
    response = client.get("/items/", headers={"X-Token": "bad-token"})
    assert response.status_code == 400
    assert response.json() == {"detail": "X-Token header invalid"}

def test_create_item():
    response = client.post(
        "/items/",
        headers={"X-Token": "fake-super-secret-token"},
        json={"id": "Foo", "title": "Bar"},
    )
    assert response.status_code == 200
    assert response.json() == {"id": "Foo", "title": "Bar"}

def test_create_item_bad_token():
    response = client.post(
        "/items/",
        headers={"X-Token": "bad-token"},
        json={"id": "Foo", "title": "Bar"},
    )
    assert response.status_code == 400
    assert response.json() == {"detail": "X-Token header invalid"}
```

----------------------------------------

TITLE: Installing HTTPX for TestClient
DESCRIPTION: This command installs the `httpx` library, which is a required dependency for using Starlette's `TestClient` to test FastAPI applications. It should be installed within a virtual environment for best practice.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/tutorial/testing.md#_snippet_0

LANGUAGE: console
CODE:
```
pip install httpx
```

----------------------------------------

TITLE: Applying Dependencies via Path Operation Decorator in FastAPI
DESCRIPTION: This snippet demonstrates how to attach dependencies directly to a FastAPI path operation decorator using the `dependencies` parameter. The `verify_key` and `verify_token` functions will be executed before `read_items`, but their return values will not be passed to `read_items`.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/tutorial/dependencies/dependencies-in-path-operation-decorators.md#_snippet_0

LANGUAGE: Python
CODE:
```
@app.get("/items/", dependencies=[Depends(verify_key), Depends(verify_token)])
```

----------------------------------------

TITLE: Importing HTTPException and WebSocketException in FastAPI (Python)
DESCRIPTION: This snippet demonstrates how to import the `HTTPException` and `WebSocketException` classes directly from the `fastapi` library. These classes are essential for raising standard HTTP and WebSocket errors, respectively, within a FastAPI application, allowing for proper error responses to clients.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/reference/exceptions.md#_snippet_0

LANGUAGE: Python
CODE:
```
from fastapi import HTTPException, WebSocketException
```

----------------------------------------

TITLE: Example Hello World JSON Response
DESCRIPTION: This is the expected JSON response when accessing the root endpoint (`/`) of the basic FastAPI application. It demonstrates a simple key-value pair returned by the API.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/first-steps.md#_snippet_5

LANGUAGE: JSON
CODE:
```
{"message": "Hello World"}
```

----------------------------------------

TITLE: Creating a Pydantic v2 `Settings` Object
DESCRIPTION: This Python code defines a `Settings` class inheriting from `BaseSettings` (Pydantic v2), allowing the application to load configuration from environment variables. It declares typed attributes with optional default values, enabling Pydantic's validation and type conversion for settings like `app_name`, `admin_email`, and `items_per_user`.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/advanced/settings.md#_snippet_11

LANGUAGE: Python
CODE:
```
from pydantic_settings import BaseSettings


class Settings(BaseSettings):
    app_name: str = "Awesome API"
    admin_email: str
    items_per_user: int = 50


settings = Settings()
```

----------------------------------------

TITLE: Ordering Path Operations for Specificity in FastAPI (Python)
DESCRIPTION: This snippet demonstrates the importance of declaration order for path operations in FastAPI. A more specific fixed path (`/users/me`) must be declared before a more general parameterized path (`/users/{user_id}`) to ensure the correct handler is invoked, preventing the parameter from incorrectly capturing the fixed path.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/path-params.md#_snippet_5

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI

app = FastAPI()

@app.get("/users/me")
async def read_user_me():
    return {"user_id": "the current user"}

@app.get("/users/{user_id}")
async def read_user(user_id: str):
    return {"user_id": user_id}
```

----------------------------------------

TITLE: Configuring API Metadata in FastAPI
DESCRIPTION: This snippet demonstrates how to configure global API metadata for a FastAPI application. It sets properties like title, summary, description (supporting Markdown), version, terms of service, contact information, and license details, which are then used to generate the OpenAPI specification and interactive API documentation (Swagger UI/ReDoc). The `FastAPI` instance is initialized with these parameters.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/metadata.md#_snippet_0

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI

app = FastAPI(
    title="My Super Project",
    summary="This is a very fancy project, with auto docs for the API and everything",
    description="This is a very **long** description with *many* characters.\n\nAnd many lines of text, even some `code`:\n\n```python\nprint('Hello')\n```\n\nAnd some other stuff.",
    version="0.0.1",
    terms_of_service="http://example.com/terms/",
    contact={
        "name": "Deadpoolio the Amazing",
        "url": "http://x-force.example.com/contact/",
        "email": "dp@x-force.example.com",
    },
    license_info={
        "name": "Apache 2.0",
        "url": "https://www.apache.org/licenses/LICENSE-2.0.html",
    },
)
```

----------------------------------------

TITLE: Using Python's Standard Context Manager - Python
DESCRIPTION: This example illustrates the basic usage of a standard Python context manager with the `with` statement. It ensures that resources, such as files, are properly managed (opened and closed) when entering and exiting the `with` block.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/advanced/events.md#_snippet_2

LANGUAGE: Python
CODE:
```
with open("file.txt") as file:
    file.read()
```

----------------------------------------

TITLE: Demonstrating Standard Python Context Manager (Python)
DESCRIPTION: This example illustrates a standard Python context manager using the `with` statement, commonly seen with `open()`. It ensures that resources (like file handles) are properly acquired before entering the block and automatically released upon exiting, even if errors occur.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/advanced/events.md#_snippet_3

LANGUAGE: Python
CODE:
```
with open("file.txt") as file:
    file.read()
```

----------------------------------------

TITLE: Type Hinting an Integer in Python
DESCRIPTION: This snippet demonstrates how to declare a variable `item_id` with an integer type hint (`int`) in Python. FastAPI uses these standard Python type hints for automatic data validation and documentation generation.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/index.md#_snippet_6

LANGUAGE: Python
CODE:
```
item_id: int
```

----------------------------------------

TITLE: Importing Pydantic BaseModel in Python
DESCRIPTION: This snippet demonstrates how to import `BaseModel` from the Pydantic library. `BaseModel` is the foundational class for creating data models that define the structure and types of request bodies in FastAPI applications, enabling robust data validation and serialization.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/body.md#_snippet_0

LANGUAGE: Python
CODE:
```
from pydantic import BaseModel
```

----------------------------------------

TITLE: Declaring Required Header Parameters in FastAPI
DESCRIPTION: This snippet shows how to declare a required HTTP header parameter, `X-Token`, using `Header(...)` within a FastAPI path operation function. FastAPI automatically extracts the value from the `X-Token` HTTP header of the incoming request and maps it to the `x_token` parameter.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/header-params.md#_snippet_1

LANGUAGE: Python
CODE:
```
async def read_items(x_token: str = Header(...)):
```

----------------------------------------

TITLE: FastAPI Lifespan Imports and Async Context Manager Decorator (Python)
DESCRIPTION: This snippet shows the necessary imports, including `asynccontextmanager` from `contextlib`, and the global `models` dictionary used to simulate shared resources. The `@asynccontextmanager` decorator is applied to the `lifespan` function, transforming it into an async context manager suitable for FastAPI's `lifespan` parameter.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/advanced/events.md#_snippet_2

LANGUAGE: Python
CODE:
```
from contextlib import asynccontextmanager
from typing import Dict
from fastapi import FastAPI

# This is a placeholder for a real ML model
# In a real application, you would load your model here
# For example, using:
# from transformers import pipeline
# model = pipeline("sentiment-analysis")

# This dictionary will hold our "models"
# It's defined globally to be accessible by the lifespan function
# and later by path operations
models: Dict[str, str] = {}

@asynccontextmanager
```

----------------------------------------

TITLE: Instantiating FastAPI Application
DESCRIPTION: This line creates an instance of the `FastAPI` class, typically assigned to a variable named `app`. This `app` object is the central point for defining API routes, middleware, and other application-level configurations.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/first-steps.md#_snippet_8

LANGUAGE: Python
CODE:
```
app = FastAPI()
```

----------------------------------------

TITLE: Using Same Model for Input and Output
DESCRIPTION: This FastAPI path operation uses the `UserIn` model for both input (request body) and output (response model). This demonstrates a scenario where sensitive data, like a password, could be inadvertently returned in the API response if not properly filtered.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/tutorial/response-model.md#_snippet_2

LANGUAGE: Python
CODE:
```
@app.post("/user/", response_
```

----------------------------------------

TITLE: Declaring Multiple Pydantic Body Parameters in FastAPI
DESCRIPTION: This snippet illustrates how to declare multiple Pydantic models as body parameters in a single FastAPI path operation. FastAPI automatically recognizes each Pydantic model as a distinct body parameter and expects the request body to be a JSON object where keys correspond to the parameter names (e.g., item and user), each containing the respective model's data.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/body-multiple-params.md#_snippet_1

LANGUAGE: Python
CODE:
```
async def update_item(item_id: int, item: Item, user: User):
```

----------------------------------------

TITLE: Adding Min and Max Length Validations to Optional Query Parameter in FastAPI Python
DESCRIPTION: This snippet expands on string validations by adding both `min_length` (3) and `max_length` (50) constraints to the optional query parameter `q` using `Query`. If `q` is provided, its length must be between 3 and 50 characters, inclusive.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/query-params-str-validations.md#_snippet_12

LANGUAGE: Python
CODE:
```
from typing import Union

from fastapi import FastAPI, Query

app = FastAPI()


@app.get("/items/")
async def read_items(
    q: Union[str, None] = Query(default=None, min_length=3, max_length=50)
):
    results = {"items": [{"item_id": "Foo"}, {"item_id": "Bar"}]}
    if q:
        results.update({"q": q})
    return results
```

----------------------------------------

TITLE: Importing CORSMiddleware in FastAPI (Python)
DESCRIPTION: This snippet demonstrates how to import the CORSMiddleware from FastAPI. This middleware is used to handle Cross-Origin Resource Sharing (CORS) requests, allowing or restricting web browser access to resources from different origins.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/reference/middleware.md#_snippet_0

LANGUAGE: python
CODE:
```
from fastapi.middleware.cors import CORSMiddleware
```

----------------------------------------

TITLE: Comparing Path Parameter Enum Member in FastAPI
DESCRIPTION: This snippet shows how to compare the received `model_name` (an Enum member) directly with a specific Enum member (`ModelName.alexnet`). This allows for conditional logic based on the predefined path parameter value, ensuring type-safe comparisons within the application.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/path-params.md#_snippet_9

LANGUAGE: Python
CODE:
```
if model_name is ModelName.alexnet:
    return {"model_name": model_name, "message": "Deep Learning FTW!"}
```

----------------------------------------

TITLE: Marking FastAPI Path Operations as Deprecated (Python)
DESCRIPTION: This snippet demonstrates how to mark a FastAPI path operation as deprecated using the `deprecated=True` parameter. When an operation is marked as deprecated, it will be visually indicated as such in the OpenAPI documentation (Swagger UI), signaling to API consumers that it is obsolete and should be avoided in new implementations.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/path-operation-configuration.md#_snippet_6

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI

app = FastAPI()

@app.get("/items/", deprecated=True)
async def read_items():
    return [{"name": "Old Item"}]

@app.get("/new-items/")
async def read_new_items():
    return [{"name": "New Item"}]
```

----------------------------------------

TITLE: Declaring Required Query Parameters - FastAPI Python
DESCRIPTION: Explains how to make a query parameter required by not assigning it a default value (not even None). If the required parameter is missing from the URL, FastAPI will return a validation error.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/query-params.md#_snippet_4

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI

app = FastAPI()

@app.get("/items/{item_id}")
async def read_user_item(item_id: str, needy: str):
    return {"item_id": item_id, "needy": needy}
```

----------------------------------------

TITLE: Applying GZip Compression Middleware in FastAPI
DESCRIPTION: This snippet demonstrates how to add `GZipMiddleware` to a FastAPI application. This middleware automatically compresses responses for clients that support GZip encoding, improving performance. It can be configured with a `minimum_size` to only compress responses larger than a specified byte count.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/advanced/middleware.md#_snippet_4

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI
from starlette.middleware.gzip import GZipMiddleware

app = FastAPI()

app.add_middleware(GZipMiddleware, minimum_size=1000)
```

----------------------------------------

TITLE: Enforcing HTTPS/WSS with HTTPSRedirectMiddleware in FastAPI
DESCRIPTION: This snippet demonstrates how to add `HTTPSRedirectMiddleware` to a FastAPI application. This middleware automatically redirects all incoming `http` or `ws` requests to their secure `https` or `wss` counterparts, ensuring that all communication occurs over a secure channel. It helps enforce secure connections across the application.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/advanced/middleware.md#_snippet_2

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI
from starlette.middleware.httpsredirect import HTTPSRedirectMiddleware

app = FastAPI()

app.add_middleware(HTTPSRedirectMiddleware)

@app.get("/")
async def read_root():
    return {"Hello": "World"}
```

----------------------------------------

TITLE: Setting Query Parameter Description in FastAPI (Python)
DESCRIPTION: Illustrates how to provide a detailed description for a query parameter using FastAPI's `Query` function. This description enhances the OpenAPI documentation, helping users understand the parameter's purpose and expected values.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/query-params-str-validations.md#_snippet_1

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI, Query

app = FastAPI()


@app.get("/items/")
async def read_items(
    q: str | None = Query(
        default=None, description="Query string for the items to search in the database that has a good description."
    )
):
    results = {"items": [{"item_id": "Foo"}, {"item_id": "Bar"}]}
    if q:
        results.update({"q": q})
    return results
```

----------------------------------------

TITLE: Updating Data with PUT using jsonable_encoder in FastAPI
DESCRIPTION: Demonstrates how to implement a PUT endpoint in FastAPI to fully replace an existing resource. It utilizes `jsonable_encoder` to convert the Pydantic model instance into a JSON-compatible dictionary, handling types like `datetime` for storage.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/body-updates.md#_snippet_0

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI, status, HTTPException
from pydantic import BaseModel
from typing import Optional
from datetime import datetime
from fastapi.encoders import jsonable_encoder

app = FastAPI()

class Item(BaseModel):
    name: Optional[str] = None
    description: Optional[str] = None
    price: Optional[float] = None
    tax: Optional[float] = None
    created_at: Optional[datetime] = None

# In-memory database for demonstration
items = {
    "foo": {"name": "Foo", "price": 50.2, "tax": 10.5, "created_at": datetime.now().isoformat()},
    "bar": {"name": "Bar", "price": 62.0, "tax": 20.2, "created_at": datetime.now().isoformat()},
}

@app.put("/items/{item_id}")
async def update_item(item_id: str, item: Item):
    if item_id not in items:
        raise HTTPException(status_code=404, detail="Item not found")
    
    # Convert the Pydantic model to a JSON-compatible dictionary
    # This handles types like datetime, converting them to strings
    update_data = jsonable_encoder(item)
    
    # Replace the existing item data with the new data
    items[item_id] = update_data
    
    return update_data
```

----------------------------------------

TITLE: Extended FastAPI App with Header and Error Handling (Python 3.10+ Annotated)
DESCRIPTION: This extended FastAPI application demonstrates path operations requiring an `X-Token` header for authentication. It includes a GET endpoint that returns an error for an invalid token and a POST endpoint that handles both invalid tokens and specific item data errors, utilizing `Annotated` for dependency injection.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/tutorial/testing.md#_snippet_4

LANGUAGE: Python
CODE:
```
from typing import Annotated

from fastapi import FastAPI, Header, HTTPException

app = FastAPI()

@app.get("/items/")
async def read_items(x_token: Annotated[str, Header()]):
    if x_token != "fake-super-secret-token":
        raise HTTPException(status_code=400, detail="X-Token header invalid")
    return {"message": "Hello World"}

@app.post("/items/")
async def create_item(item: dict, x_token: Annotated[str, Header()]):
    if x_token != "fake-super-secret-token":
        raise HTTPException(status_code=400, detail="X-Token header invalid")
    if item.get("name") == "invalid":
        raise HTTPException(status_code=400, detail="Item name invalid")
    return {"item": item, "message": "Item created"}
```

----------------------------------------

TITLE: Using Class as Dependency in Path Operation - Python
DESCRIPTION: This example demonstrates how to inject a `CommonQueryParams` class instance as a dependency into a FastAPI path operation. FastAPI calls the `CommonQueryParams` class, creates an instance, and passes it as the `commons` argument to the `read_items` function, providing structured access to query parameters.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/tutorial/dependencies/classes-as-dependencies.md#_snippet_3

LANGUAGE: Python
CODE:
```
@app.get("/items/")
async def read_items(commons: CommonQueryParams = Depends(CommonQueryParams)):
    return commons
```

----------------------------------------

TITLE: Using a Class as a Dependency in a FastAPI Path Operation
DESCRIPTION: This snippet demonstrates how to declare and use the `CommonQueryParams` class as a dependency within a FastAPI path operation. FastAPI instantiates the class and injects the instance into the `commons` parameter, allowing access to its attributes (`q`, `skip`, `limit`).
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/dependencies/classes-as-dependencies.md#_snippet_7

LANGUAGE: Python
CODE:
```
@app.get("/items/")
async def read_items(commons: CommonQueryParams = Depends(CommonQueryParams)):
    response = {"q": commons.q, "skip": commons.skip, "limit": commons.limit}
    return response
```

----------------------------------------

TITLE: Using `fastapi.status` for Semantic Status Codes (Python)
DESCRIPTION: This example illustrates using `fastapi.status` to set HTTP response codes, improving code readability and maintainability. Instead of using raw numeric codes like `201`, `status.HTTP_201_CREATED` provides a semantic name, making the code self-documenting and less prone to errors. This approach leverages editor autocompletion for convenience.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/response-status-code.md#_snippet_1

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI, status

app = FastAPI()

@app.post("/items/", status_code=status.HTTP_201_CREATED)
async def create_item(name: str):
    return {"name": name}
```

----------------------------------------

TITLE: Defining a Base Dependency in FastAPI
DESCRIPTION: This snippet defines a simple asynchronous dependency function, `query_extractor`, which takes a string query parameter `q` and returns it. This function serves as a foundational dependency that can be reused by other, more complex dependencies.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/dependencies/sub-dependencies.md#_snippet_0

LANGUAGE: Python
CODE:
```
async def query_extractor(q: str):
    return q
```

----------------------------------------

TITLE: Query Parameter with Default Value and Minimum Length Validation
DESCRIPTION: This snippet demonstrates how to define a query parameter `q` with a default value of 'fixedquery' and a `min_length` validation of 3, using `Annotated` and `Query`.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/query-params-str-validations.md#_snippet_16

LANGUAGE: Python
CODE:
```
q: Annotated[str, Query(min_length=3)] = "fixedquery"
```

----------------------------------------

TITLE: Defining a List of Strings Field in FastAPI (Python)
DESCRIPTION: This snippet shows how to define a field as a list of strings (`List[str]`) within a Pydantic model. This provides explicit type hinting for the list elements, enabling FastAPI to perform precise validation and generate accurate OpenAPI documentation.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/tutorial/body-nested-models.md#_snippet_3

LANGUAGE: Python
CODE:
```
tags: List[str]
```

----------------------------------------

TITLE: Importing HTTPException in FastAPI
DESCRIPTION: This snippet demonstrates how to import the `HTTPException` class from the `fastapi` library, which is essential for raising HTTP errors in FastAPI applications.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/handling-errors.md#_snippet_0

LANGUAGE: Python
CODE:
```
from fastapi import HTTPException
```

----------------------------------------

TITLE: Defining a Simple FastAPI Application (main.py)
DESCRIPTION: This snippet defines a basic FastAPI application with a single endpoint `/` that returns a JSON message. It serves as the application under test for asynchronous testing examples.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/advanced/async-tests.md#_snippet_0

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI

app = FastAPI()

@app.get("/")
async def read_root():
    return {"message": "Hello Bigger Applications!"}
```

----------------------------------------

TITLE: Including/Excluding Fields with Set in Response Model - FastAPI Python
DESCRIPTION: This snippet demonstrates `response_model_include` and `response_model_exclude` parameters using Python sets. `response_model_include={'name', 'description'}` ensures only 'name' and 'description' are in the response, while `response_model_exclude={'tax', 'tags'}` removes 'tax' and 'tags' from the response.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ko/docs/tutorial/response-model.md#_snippet_4

LANGUAGE: Python
CODE:
```
@app.post("/items/include/", response_model=Item, response_model_include={"name", "description"})
async def create_item_include(item: Item):
    return item


@app.post("/items/exclude/", response_model=Item, response_model_exclude={"tax", "tags"})
async def create_item_exclude(item: Item):
```

----------------------------------------

TITLE: Declaring Optional String Type in Python (3.8+)
DESCRIPTION: This snippet, applicable for Python 3.8 and above, demonstrates how to declare a parameter that can be `str` or `None` using `Optional[str]` from the `typing` module. It serves the same purpose as in Python 3.6+, ensuring type safety for nullable values.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/python-types.md#_snippet_19

LANGUAGE: Python
CODE:
```
from typing import Optional

def process_name(name: Optional[str]):
    if name is None:
        print("Name is not provided.")
    else:
        print(f"Processing name: {name}")
```

----------------------------------------

TITLE: Marking Query Parameters as Deprecated in FastAPI (Python)
DESCRIPTION: Explains how to mark a query parameter as `deprecated=True` using FastAPI's `Query` function. This signals to API consumers, typically via OpenAPI documentation, that the parameter is obsolete and should no longer be used, without removing it immediately.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/query-params-str-validations.md#_snippet_3

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI, Query

app = FastAPI()


@app.get("/items/")
async def read_items(
    q: str | None = Query(default=None, deprecated=True)
):
    results = {"items": [{"item_id": "Foo"}, {"item_id": "Bar"}]}
    if q:
        results.update({"q": q})
    return results
```

----------------------------------------

TITLE: Defining HeroBase Model in SQLModel
DESCRIPTION: This SQLModel class `HeroBase` serves as a base model for `Hero` entities, containing common fields like `name`, `secret_name`, and `age`. It inherits from `SQLModel` but does not set `table=True`, indicating it's a Pydantic-like data model rather than a database table.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/tutorial/sql-databases.md#_snippet_7

LANGUAGE: Python
CODE:
```
class HeroBase(SQLModel):
    name: str = Field(index=True)
    secret_name: str
    age: int | None = Field(default=None, index=True)
```

----------------------------------------

TITLE: Using Enum as Path Parameter Type
DESCRIPTION: Explains how to declare a path parameter in FastAPI using a custom `Enum` class as its type annotation. This enables FastAPI to automatically validate input against the enum's predefined values and enhance interactive API documentation.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/tutorial/path-params.md#_snippet_3

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI
from enum import Enum

app = FastAPI()

class ModelName(str, Enum):
    alexnet = "alexnet"
    resnet = "resnet"
    lenet = "lenet"

@app.get("/models/{model_name}")
async def get_model(model_name: ModelName):
    # ... rest of the function
```

----------------------------------------

TITLE: FastAPI Dependencies for Current User and Active User Retrieval
DESCRIPTION: This snippet defines two FastAPI dependencies: `get_current_user` and `get_current_active_user`. `get_current_user` extracts and decodes the bearer token from the request, retrieving the associated user. `get_current_active_user` then reuses `get_current_user` and adds a check to ensure the retrieved user is not disabled, raising an `HTTPException` if the user is invalid or inactive.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/security/simple-oauth2.md#_snippet_6

LANGUAGE: Python
CODE:
```
from fastapi import Depends, HTTPException, status
from fastapi.security import OAuth2PasswordBearer
from pydantic import BaseModel

# Placeholder for User and UserInDB models
class User(BaseModel):
    username: str
    email: str | None = None
    full_name: str | None = None
    disabled: bool | None = None

class UserInDB(User):
    hashed_password: str

# In a real application, this would be a real token URL
oauth2_scheme = OAuth2PasswordBearer(tokenUrl="token")

# Placeholder for user lookup (from previous snippets)
fake_users_db = {
    "johndoe": {
        "username": "johndoe",
        "full_name": "John Doe",
        "email": "johndoe@example.com",
        "hashed_password": "fakehashedsecret",
        "disabled": False,
    }
}

def get_user(db, username: str):
    if username in db:
        user_dict = db[username]
        return UserInDB(**user_dict)
    return None

async def get_current_user(token: str = Depends(oauth2_scheme)):
    # In a real app, you would decode the JWT here
    # For this example, the token is just the username
    user = get_user(fake_users_db, token)
    if not user:
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="Invalid authentication credentials",
            headers={"WWW-Authenticate": "Bearer"},
        )
    return user

async def get_current_active_user(current_user: User = Depends(get_current_user)):
    if current_user.disabled:
        raise HTTPException(status_code=status.HTTP_400_BAD_REQUEST, detail="Inactive user")
    return current_user

# Example usage in a path operation (uncomment to use)
# @router.get("/users/me/")
# async def read_users_me(current_user: User = Depends(get_current_active_user)):
#     return current_user
```

----------------------------------------

TITLE: Using OAuth2PasswordBearer as a Dependency in FastAPI (Python)
DESCRIPTION: This snippet shows how to integrate the `oauth2_scheme` as a dependency in a FastAPI path operation. It automatically extracts the bearer token from the `Authorization` header, providing it as a string to the `token` parameter, and handles 401 Unauthorized responses if the token is missing or invalid.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/security/first-steps.md#_snippet_4

LANGUAGE: Python
CODE:
```
async def read_items(token: str = Depends(oauth2_scheme)):
```

----------------------------------------

TITLE: Defining a FastAPI Endpoint for File and Form Data
DESCRIPTION: This example demonstrates how to create a FastAPI POST endpoint that accepts both file uploads (`bytes` and `UploadFile`) and a standard form field (`Form`). It shows how to declare these parameters in the function signature and access their values, returning details about the uploaded files and form data.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/request-forms-and-files.md#_snippet_1

LANGUAGE: python
CODE:
```
@app.post("/files/")
async def create_file(file: bytes = File(...), fileb: UploadFile = File(...), token: str = Form(...)):
    return {
        "file_size": len(file),
        "fileb_content_type": fileb.content_type,
        "token": token
    }
```

----------------------------------------

TITLE: Setting Response Status Code in FastAPI
DESCRIPTION: This snippet demonstrates how to set a custom HTTP response status code for a FastAPI path operation using the `status_code` parameter in the decorator. It uses `status.HTTP_201_CREATED` for a successful item creation, which is then reflected in the OpenAPI schema.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/path-operation-configuration.md#_snippet_0

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI, status

app = FastAPI()


@app.post("/items/", status_code=status.HTTP_201_CREATED)
async def create_item(name: str):
    return {"name": name}
```

----------------------------------------

TITLE: Path Operation with Shorthand Class Dependency Declaration
DESCRIPTION: This snippet shows a FastAPI path operation utilizing the new shorthand syntax for class dependencies (`commons: CommonQueryParams = Depends()`). This is the recommended and most concise way to declare class dependencies, leveraging type hints for clarity and IDE support.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/dependencies/classes-as-dependencies.md#_snippet_15

LANGUAGE: Python
CODE:
```
@app.get("/items/")
async def read_items(commons: CommonQueryParams = Depends()):
    response = {"q": commons.q, "skip": commons.skip, "limit": commons.limit}
    return response
```

----------------------------------------

TITLE: Installing FastAPI with Standard Dependencies
DESCRIPTION: This command installs FastAPI along with its standard dependencies, which typically include `uvicorn` for serving applications and `pydantic` for data validation. The package name `"fastapi[standard]"` must be enclosed in double quotes to ensure it is correctly parsed in various shell environments.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/index.md#_snippet_2

LANGUAGE: Shell
CODE:
```
$ pip install \"fastapi[standard]\"
```

----------------------------------------

TITLE: Setting HTTP Status Code for FastAPI Path Operations (Python)
DESCRIPTION: This snippet demonstrates how to set the HTTP status code for FastAPI path operations. It shows examples of using both a direct integer value (e.g., 404) and the `status` enum from `fastapi.status` (e.g., `status.HTTP_201_CREATED`) to define the default response status code for an endpoint. This code will be used in the response and added to the OpenAPI schema.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/path-operation-configuration.md#_snippet_0

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI, status

app = FastAPI()

@app.post("/items/", status_code=status.HTTP_201_CREATED)
async def create_item(name: str):
    return {"name": name}

@app.get("/users/{user_id}", status_code=404)
async def read_user(user_id: int):
    if user_id == 1:
        return {"user_id": user_id}
    return {"message": "User not found"}

@app.delete("/products/{product_id}", status_code=status.HTTP_204_NO_CONTENT)
async def delete_product(product_id: int):
    # Perform deletion logic
    return None
```

----------------------------------------

TITLE: Running Uvicorn with Default Host and Port (Dockerfile)
DESCRIPTION: This CMD instruction defines the command that will be executed when the Docker container starts. It runs the uvicorn server, serving the FastAPI application located at app.main:app on all network interfaces (0.0.0.0) and port 80. This command is executed from the WORKDIR defined previously in the Dockerfile.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/deployment/docker.md#_snippet_5

LANGUAGE: Dockerfile
CODE:
```
CMD ["uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "80"]
```

----------------------------------------

TITLE: Installing FastAPI with Standard Dependencies
DESCRIPTION: This command installs FastAPI with its standard set of dependencies, suitable for production environments where specific optional packages might not be needed. It provides a lighter installation compared to the 'all' option.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/index.md#_snippet_2

LANGUAGE: console
CODE:
```
pip install "fastapi[standard]"
```

----------------------------------------

TITLE: Marking FastAPI Path Operations as Deprecated
DESCRIPTION: This snippet demonstrates how to mark a FastAPI path operation as deprecated using the `deprecated=True` parameter in the decorator. This flag signals to API consumers that the endpoint is obsolete and should not be used for new development, while still keeping it functional for backward compatibility.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/path-operation-configuration.md#_snippet_6

LANGUAGE: Python
CODE:
```
@app.get("/items/", deprecated=True)
async def read_items():
    return ["Portal gun", "Plumbus"]
```

----------------------------------------

TITLE: Integrating Pydantic Settings into a FastAPI Application
DESCRIPTION: Demonstrates how to import and use the 'settings' object (an instance of 'Settings') within a FastAPI application to access configured values like 'app_name' and 'admin_email' via API endpoints.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/advanced/settings.md#_snippet_6

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI

from .config import settings


app = FastAPI()


@app.get("/info")
async def info():
    return {
        "app_name": settings.app_name,
        "admin_email": settings.admin_email,
        "items_per_user": settings.items_per_user,
    }
```

----------------------------------------

TITLE: Reading a Single Hero by ID in FastAPI
DESCRIPTION: This FastAPI GET endpoint retrieves a single `Hero` object by its `hero_id`. It uses `session.get(Hero, hero_id)` to fetch the hero directly. If the hero is not found, it raises an `HTTPException` with a 404 status code.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/tutorial/sql-databases.md#_snippet_4

LANGUAGE: Python
CODE:
```
@app.get("/heroes/{hero_id}", response_model=Hero)
def read_hero(*, hero_id: int, session: SessionDep):
    hero = session.get(Hero, hero_id)
    if not hero:
        raise HTTPException(status_code=404, detail="Hero not found")
    return hero
```

----------------------------------------

TITLE: FastAPI Path Operation Order
DESCRIPTION: Demonstrates the importance of path operation order in FastAPI. Specific paths like '/users/me' must be declared before more general paths like '/users/{user_id}' to ensure correct routing and prevent the generic path from capturing specific values.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/tutorial/path-params.md#_snippet_0

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI

app = FastAPI()

@app.get("/users/me")
async def read_user_me():
    return {"user_id": "the current user"}

@app.get("/users/{user_id}")
async def read_user(user_id: str):
    return {"user_id": user_id}
```

----------------------------------------

TITLE: Defining Dependency Functions with Header Requirements in FastAPI
DESCRIPTION: Illustrates how to define asynchronous dependency functions in FastAPI that require specific HTTP headers. These functions can be used to validate incoming requests based on header values before the main path operation is executed.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/dependencies/dependencies-in-path-operation-decorators.md#_snippet_1

LANGUAGE: Python
CODE:
```
from fastapi import Header, HTTPException

async def verify_key(x_key: str = Header()):
    if x_key != "fake-super-secret-key":
        raise HTTPException(status_code=400, detail="X-Key header invalid")
    return x_key

async def verify_token(x_token: str = Header()):
    if x_token != "fake-super-secret-token":
        raise HTTPException(status_code=400, detail="X-Token header invalid")
    return x_token
```

----------------------------------------

TITLE: FastAPI Application File Structure with Explanatory Comments
DESCRIPTION: Detailed breakdown of a FastAPI application's file structure, explaining each file and directory's role as Python packages, subpackages, and modules, and how they relate to imports.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/bigger-applications.md#_snippet_1

LANGUAGE: text
CODE:
```
.
├── app                  # "app" is a Python package
│   ├── __init__.py      # this file makes "app" a "Python package"
│   ├── main.py          # "main" module, e.g. import app.main
│   ├── dependencies.py  # "dependencies" module, e.g. import app.dependencies
│   └── routers          # "routers" is a "Python subpackage"
│   │   ├── __init__.py  # makes "routers" a "Python subpackage"
│   │   ├── items.py     # "items" submodule, e.g. import app.routers.items
│   │   └── users.py     # "users" submodule, e.g. import app.routers.users
│   └── internal         # "internal" is a "Python subpackage"
│       ├── __init__.py  # makes "internal" a "Python subpackage"
│       └── admin.py     # "admin" submodule, e.g. import app.internal.admin
```

----------------------------------------

TITLE: Defining File Parameters with Bytes in FastAPI
DESCRIPTION: Demonstrates how to define a file parameter in a FastAPI path operation function using the `bytes` type hint and the `File()` dependency. When `bytes` is used, FastAPI reads the entire file content into memory, which is suitable for small files.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/request-files.md#_snippet_2

LANGUAGE: Python
CODE:
```
async def create_upload_file(file: bytes = File()):
```

----------------------------------------

TITLE: Customizing Docs URLs and Disabling ReDoc in FastAPI (Python)
DESCRIPTION: This snippet illustrates how to customize the URL for Swagger UI (e.g., to `/documentation`) and completely disable the ReDoc interface by setting the `docs_url` and `redoc_url` parameters, respectively, during FastAPI application initialization.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/metadata.md#_snippet_5

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI

app = FastAPI(docs_url="/documentation", redoc_url=None)
```

----------------------------------------

TITLE: Configuring Pydantic Settings to Load from .env
DESCRIPTION: This Python snippet demonstrates how to configure a Pydantic `Settings` class to load values from a .env file. By setting `model_config = SettingsConfigDict(env_file=".env")`, Pydantic automatically reads environment variables from the specified file.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/advanced/settings.md#_snippet_15

LANGUAGE: Python
CODE:
```
class Settings(BaseSettings):
    app_name: str = "Awesome API"
    admin_email: str
    items_per_user: int = 50

    model_config = SettingsConfigDict(env_file=".env")
```

----------------------------------------

TITLE: Registering Custom Exception Handler in FastAPI
DESCRIPTION: This snippet illustrates how to define and register a custom exception handler for a specific exception type (`UnicornException`). The handler intercepts the exception and returns a custom `JSONResponse` with a specific status code and content, overriding FastAPI's default error handling for that exception.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ja/docs/tutorial/handling-errors.md#_snippet_5

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI, Request
from fastapi.responses import JSONResponse

class UnicornException(Exception):
    def __init__(self, name: str):
        self.name = name

app = FastAPI()

@app.exception_handler(UnicornException)
async def unicorn_exception_handler(request: Request, exc: UnicornException):
    return JSONResponse(
        status_code=418,
        content={"message": f"Oops! {exc.name} did something. There goes a rainbow..."},
    )

@app.get("/unicorns/{name}")
async def read_unicorn(name: str):
    if name == "yolo":
        raise UnicornException(name=name)
    return {"unicorn_name": name}
```

----------------------------------------

TITLE: Defining a FastAPI Dependency with Yield (Setup)
DESCRIPTION: This snippet shows the initial part of a FastAPI dependency using `yield`. The code before `yield` is executed during the setup phase, before the request is processed and the response is sent. It initializes a database session.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/dependencies/dependencies-with-yield.md#_snippet_0

LANGUAGE: Python
CODE:
```
db = DBSession()
try:
    yield db
```

----------------------------------------

TITLE: Defining a Nested Pydantic Model (Python)
DESCRIPTION: This snippet defines an `Image` Pydantic model, which can be used as a nested object within other models. It specifies `url` as a required string and `name` as an optional string, providing a structured way to represent image data.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/tutorial/body-nested-models.md#_snippet_5

LANGUAGE: Python
CODE:
```
class Image(BaseModel):
    url: str
    name: str | None = None
```

----------------------------------------

TITLE: Adding Metadata to Multiple UploadFiles in FastAPI
DESCRIPTION: This snippet shows how to apply extra metadata, such as a description, to multiple `UploadFile` parameters when handling multiple file uploads. This is achieved by using `Annotated` with `List[UploadFile]` and `File()`.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/tutorial/request-files.md#_snippet_6

LANGUAGE: Python
CODE:
```
@app.post("/files/")
async def create_files(
    files: Annotated[
        List[UploadFile], File(description="Multiple files as UploadFile")
    ],
):
    return {"filenames": [file.filename for file in files]}
```

----------------------------------------

TITLE: Importing APIRouter class in Python
DESCRIPTION: This snippet demonstrates how to import the `APIRouter` class directly from the `fastapi` library. `APIRouter` is a core component in FastAPI for organizing routes and endpoints, facilitating modular and scalable API development.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/reference/apirouter.md#_snippet_0

LANGUAGE: Python
CODE:
```
from fastapi import APIRouter
```

----------------------------------------

TITLE: Installing python-jose for JWT Handling (console)
DESCRIPTION: This command installs the `python-jose` library, specifically with the `cryptography` extra, which is required for creating and verifying JSON Web Tokens (JWT) in Python applications. It provides cryptographic primitives necessary for secure token operations.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/security/oauth2-jwt.md#_snippet_0

LANGUAGE: console
CODE:
```
$ pip install "python-jose[cryptography]"
```

----------------------------------------

TITLE: Registering FastAPI Shutdown Event Handler - Python
DESCRIPTION: This snippet shows how to register a function to be executed when the application is shutting down using the `@app.on_event("shutdown")` decorator. This function is ideal for cleanup operations, such as closing database connections or writing logs, after the application has finished processing requests.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/advanced/events.md#_snippet_5

LANGUAGE: Python
CODE:
```
@app.on_event("shutdown")
```

----------------------------------------

TITLE: Extended FastAPI App with Header and Error Handling (Python 3.8+)
DESCRIPTION: This extended FastAPI application demonstrates path operations requiring an `X-Token` header for authentication. It includes a GET endpoint that returns an error for an invalid token and a POST endpoint that handles both invalid tokens and specific item data errors, using standard type hints for dependency injection.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/tutorial/testing.md#_snippet_5

LANGUAGE: Python
CODE:
```
from typing import Optional

from fastapi import FastAPI, Header, HTTPException

app = FastAPI()

@app.get("/items/")
async def read_items(x_token: str = Header(...)):
    if x_token != "fake-super-secret-token":
        raise HTTPException(status_code=400, detail="X-Token header invalid")
    return {"message": "Hello World"}

@app.post("/items/")
async def create_item(item: dict, x_token: str = Header(...)):
    if x_token != "fake-super-secret-token":
        raise HTTPException(status_code=400, detail="X-Token header invalid")
    if item.get("name") == "invalid":
        raise HTTPException(status_code=400, detail="Item name invalid")
    return {"item": item, "message": "Item created"}
```

----------------------------------------

TITLE: Defining a List of Pydantic Submodels
DESCRIPTION: This snippet shows how to define an attribute as a list of Pydantic submodels (e.g., `list[Image]`). This allows the request body to contain an array of complex objects, where each object conforms to the `Image` model's structure, enabling validation and documentation for collections of nested data.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/body-nested-models.md#_snippet_10

LANGUAGE: Python
CODE:
```
images: list[Image]
```

----------------------------------------

TITLE: Using Chained Dependencies in a FastAPI Path Operation
DESCRIPTION: This snippet demonstrates how to integrate the `query_or_cookie_extractor` chained dependency into a FastAPI path operation. FastAPI automatically resolves the entire dependency chain, ensuring `query_extractor` is called first, then `query_or_cookie_extractor`, before the `read_query` endpoint is executed.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/dependencies/sub-dependencies.md#_snippet_2

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI, Depends

# Assuming query_extractor and query_or_cookie_extractor are defined as above

app = FastAPI()

@app.get("/items/")
async def read_query(combined_value: dict = Depends(query_or_cookie_extractor)):
    return combined_value
```

----------------------------------------

TITLE: Importing Query Dependency in FastAPI Python
DESCRIPTION: This snippet demonstrates the necessary import statement to use the `Query` dependency from the `fastapi` module. `Query` is used to declare query parameters and apply additional validations or metadata to them.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/query-params-str-validations.md#_snippet_6

LANGUAGE: Python
CODE:
```
from typing import Union

from fastapi import FastAPI, Query
```

----------------------------------------

TITLE: Import shared dependencies using relative path in FastAPI router module
DESCRIPTION: This snippet shows the correct way to import a dependency function (`get_token_header`) from a sibling or parent module (`app.dependencies`) into a router module (`app.routers.items`) using a relative import (`..dependencies`). This is crucial for modular FastAPI applications.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/bigger-applications.md#_snippet_7

LANGUAGE: Python
CODE:
```
from typing import Annotated

from fastapi import APIRouter, Depends, HTTPException

from ..dependencies import get_token_header

router = APIRouter(
    prefix="/items",
    tags=["items"],
    dependencies=[Depends(get_token_header)],
    responses={404: {"description": "Not found"}},
)


@router.get("/")
async def read_items():
    return [{"item_id": "Foo"}, {"item_id": "Bar"}]


@router.get("/{item_id}")
async def read_item(item_id: str):
    return {"item_id": item_id}

```

----------------------------------------

TITLE: Installing passlib for Password Hashing (console)
DESCRIPTION: This command installs the `passlib` library with the `bcrypt` extra, which is a recommended password hashing algorithm. `passlib` supports various hashing schemes and simplifies the process of securely hashing and verifying user passwords.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/security/oauth2-jwt.md#_snippet_1

LANGUAGE: console
CODE:
```
$ pip install "passlib[bcrypt]"
```

----------------------------------------

TITLE: Importing UploadFile for File Uploads in FastAPI
DESCRIPTION: This snippet demonstrates how to import the `UploadFile` class from the `fastapi` library. `UploadFile` is essential for defining parameters in path operation functions, enabling FastAPI applications to receive and process uploaded files from client requests, providing access to file metadata and content.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/reference/uploadfile.md#_snippet_0

LANGUAGE: python
CODE:
```
from fastapi import UploadFile
```

----------------------------------------

TITLE: Declaring Examples with Pydantic `Field`
DESCRIPTION: This snippet shows how to add examples directly to a Pydantic model field using the `examples` argument within `Field()`. These examples are integrated into the field's JSON Schema definition, providing specific example values for individual parameters. It requires Pydantic and FastAPI.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/schema-extra-example.md#_snippet_2

LANGUAGE: Python
CODE:
```
from typing import Annotated
from pydantic import BaseModel, Field

class Item(BaseModel):
    name: Annotated[
        str,
        Field(examples=["Foo"])
    ]
    description: str | None = None
    price: Annotated[
        float,
        Field(examples=[35.4])
    ]
    tax: float | None = None
```

----------------------------------------

TITLE: Importing TestClient for FastAPI Testing (Python)
DESCRIPTION: This snippet demonstrates how to import the `TestClient` class from the `fastapi.testclient` module. `TestClient` is a crucial dependency for writing unit and integration tests for FastAPI applications, enabling direct interaction with the application's code.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/reference/testclient.md#_snippet_0

LANGUAGE: python
CODE:
```
from fastapi.testclient import TestClient
```

----------------------------------------

TITLE: Adding Tags to FastAPI Path Operations
DESCRIPTION: This example illustrates how to assign tags to FastAPI path operations using the `tags` parameter. Tags help organize API documentation in the OpenAPI schema, allowing related operations to be grouped together for better navigation and clarity.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/path-operation-configuration.md#_snippet_1

LANGUAGE: Python
CODE:
```
@app.post("/items/", tags=["items"])
async def create_item(name: str):
    return {"name": name}


@app.get("/users/", tags=["users"])
async def get_users():
    return ["Rick", "Morty"]
```

----------------------------------------

TITLE: Running FastAPI with `main:app` Parameter
DESCRIPTION: This command re-emphasizes how Uvicorn uses the `main:app` parameter to locate and run the FastAPI application. `main` refers to the Python file `main.py`, and `app` refers to the `FastAPI` instance within that file.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/first-steps.md#_snippet_9

LANGUAGE: console
CODE:
```
$ uvicorn main:app --reload

INFO:     Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)
```

----------------------------------------

TITLE: Example of path operation relative to APIRouter prefix
DESCRIPTION: This small snippet demonstrates how a path operation defined within an `APIRouter` (e.g., `@router.get("/{item_id}")`) will have its effective path constructed by combining the router's prefix with the path specified in the decorator. The prefix must not include a final slash.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/bigger-applications.md#_snippet_6

LANGUAGE: Python
CODE:
```
@router.get("/{item_id}")
async def read_item(item_id: str):
    ...

```

----------------------------------------

TITLE: Installing PassLib with Bcrypt for Password Hashing - Console
DESCRIPTION: This command installs the `PassLib` library along with the `bcrypt` hashing algorithm, which is recommended for secure password hashing. PassLib provides utilities to hash and verify passwords securely.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/security/oauth2-jwt.md#_snippet_1

LANGUAGE: console
CODE:
```
$ pip install "passlib[bcrypt]"
```

----------------------------------------

TITLE: Returning Sensitive Input Model - FastAPI Python
DESCRIPTION: This example shows a `UserIn` Pydantic model with a plaintext password. The path operation `create_user` is declared to return `UserIn` as its `response_model`, which means the API will echo the password back in the response, posing a security risk if used for general user retrieval.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ko/docs/tutorial/response-model.md#_snippet_1

LANGUAGE: Python
CODE:
```
class UserIn(BaseModel):
    username: str
    password: str


app = FastAPI()


@app.post("/user/", response_model=UserIn)
async def create_user(user: UserIn):
```

----------------------------------------

TITLE: Defining Hero Table Model in SQLModel
DESCRIPTION: This SQLModel class `Hero` defines the actual database table model. It inherits from `HeroBase` to include common fields and adds specific fields like `id` (as a primary key). Setting `table=True` marks it as a SQLModel table, enabling database interactions.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/tutorial/sql-databases.md#_snippet_8

LANGUAGE: Python
CODE:
```
class Hero(HeroBase, table=True):
    id: int | None = Field(default=None, primary_key=True)
```

----------------------------------------

TITLE: Installing `pydantic-settings`
DESCRIPTION: This command installs the `pydantic-settings` package, which is required for managing application settings and environment variables using Pydantic's `BaseSettings` functionality. It's a standalone package for Pydantic v2.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/advanced/settings.md#_snippet_9

LANGUAGE: console
CODE:
```
pip install pydantic-settings
```

----------------------------------------

TITLE: Wrapping Optional String with Annotated (Python 3.8+)
DESCRIPTION: This snippet shows how to wrap an optional string type hint (`Union[str, None]`) with `Annotated` in Python 3.8+. This prepares the parameter for additional metadata or validation rules, while still maintaining its optional nature.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/tutorial/query-params-str-validations.md#_snippet_6

LANGUAGE: Python
CODE:
```
q: Annotated[Union[str, None]] = None
```

----------------------------------------

TITLE: Combining Required, Default, and Optional Query Parameters - FastAPI Python
DESCRIPTION: Demonstrates how to define a mix of required, optional (with None default), and optional (with a non-None default) query parameters in a single endpoint. FastAPI correctly handles all combinations.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/query-params.md#_snippet_5

LANGUAGE: Python
CODE:
```
from typing import Optional
from fastapi import FastAPI

app = FastAPI()

@app.get("/items/{item_id}")
async def read_user_item(
    item_id: str, needy: str, skip: int = 0, limit: Optional[int] = None
):
    item = {"item_id": item_id, "needy": needy, "skip": skip, "limit": limit}
    return item
```

----------------------------------------

TITLE: Ordering Parameters with Annotated in FastAPI (Python 3.9+)
DESCRIPTION: This snippet demonstrates flexible parameter ordering when `Annotated` is utilized. Since `Annotated` does not assign a default value directly to the function parameter, the order of `q` (a required query parameter) and `item_id` (a path parameter with metadata) can be freely arranged without causing Python syntax errors. This approach simplifies function signatures and improves readability.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ru/docs/tutorial/path-params-numeric-validations.md#_snippet_3

LANGUAGE: Python
CODE:
```
async def read_items(q: str, item_id: Annotated[int, Path(title="The ID of the item to get")]):
```

----------------------------------------

TITLE: Deleting a Hero by ID in FastAPI
DESCRIPTION: This FastAPI DELETE endpoint removes a `Hero` object from the database based on its `hero_id`. It first retrieves the hero using `session.get()`, raises a 404 error if not found, then deletes the hero using `session.delete()`, commits the transaction, and returns a success message.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/tutorial/sql-databases.md#_snippet_5

LANGUAGE: Python
CODE:
```
@app.delete("/heroes/{hero_id}")
def delete_hero(*, session: SessionDep, hero_id: int):
    hero = session.get(Hero, hero_id)
    if not hero:
        raise HTTPException(status_code=404, detail="Hero not found")
    session.delete(hero)
    session.commit()
    return {"ok": True}
```

----------------------------------------

TITLE: Importing APIRouter in FastAPI
DESCRIPTION: Demonstrates how to import `APIRouter` from `fastapi` and initialize an instance, enabling modular application design by defining separate sets of API routes.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/bigger-applications.md#_snippet_3

LANGUAGE: Python
CODE:
```
from fastapi import APIRouter

router = APIRouter()
```

----------------------------------------

TITLE: Importing BackgroundTasks in FastAPI (Python)
DESCRIPTION: This snippet shows the standard way to import the `BackgroundTasks` class directly from the `fastapi` library. This class is used to declare and manage background tasks within your FastAPI application.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/reference/background.md#_snippet_0

LANGUAGE: python
CODE:
```
from fastapi import BackgroundTasks
```

----------------------------------------

TITLE: Returning Custom Status Codes with JSONResponse in FastAPI
DESCRIPTION: This snippet demonstrates how to return different HTTP status codes based on the outcome of an operation. It uses `JSONResponse` to explicitly set a 200 (OK) status code if an item already exists, and a 201 (Created) status code if a new item is successfully created. This approach provides fine-grained control over API responses and is crucial for conveying precise semantic meaning.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/advanced/additional-status-codes.md#_snippet_0

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI
from fastapi.responses import JSONResponse

app = FastAPI()

items = {"foo": "The Foo Wrestlers"}

@app.put("/items/{item_id}")
async def create_item(item_id: str):
    if item_id in items:
        return JSONResponse(status_code=200, content={"message": "Item already exists", "item": items[item_id]})
    else:
        items[item_id] = {"name": f"New Item {item_id}"}
        return JSONResponse(status_code=201, content={"message": "Item created", "item": items[item_id]})
```

----------------------------------------

TITLE: Declaring Optional Types with typing.Optional (Python 3.6+)
DESCRIPTION: Shows how to define a type that can either be a specific type (e.g., `str`) or `None` using `typing.Optional`. This is the standard way to indicate optional values in Python versions prior to 3.10.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/python-types.md#_snippet_2

LANGUAGE: Python
CODE:
```
from typing import Optional

def get_name(name: Optional[str]):
    return name
```

----------------------------------------

TITLE: Defining Path Operations with FastAPI APIRouter
DESCRIPTION: Demonstrates how to declare multiple path operations (GET requests) using an `APIRouter` instance, allowing for modular organization of API endpoints within a larger FastAPI application.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/bigger-applications.md#_snippet_3

LANGUAGE: Python
CODE:
```
@router.get("/users/", tags=["users"])
async def read_users():
    return [{"username": "Rick"}, {"username": "Morty"}]

@router.get("/users/me", tags=["users"])
async def read_user_me():
    return {"username": "current user"}

@router.get("/users/{username}", tags=["users"])
async def read_user(username: str):
    return {"username": username}
```

----------------------------------------

TITLE: Defining File Parameter with UploadFile in FastAPI
DESCRIPTION: This snippet defines a path operation function `create_upload_file` that accepts an uploaded file using `UploadFile`. This method is preferred for larger files as it uses spooled temporary files, preventing excessive memory usage and providing file metadata and async file-like methods.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/tutorial/request-files.md#_snippet_2

LANGUAGE: Python
CODE:
```
@app.post("/uploadfile/")
async def create_upload_file(file: UploadFile):
    return {"filename": file.filename, "content_type": file.content_type}
```

----------------------------------------

TITLE: Using Dependencies in WebSocket Endpoints
DESCRIPTION: This example demonstrates how to integrate FastAPI's dependency injection system with WebSocket endpoints. It shows the use of `Path`, `Query`, `Cookie`, and `Header` parameters, along with `Depends` for authentication. A custom dependency `get_cookie_or_token` is used to validate client authentication, raising a `WebSocketException` on failure.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/advanced/websockets.md#_snippet_3

LANGUAGE: python
CODE:
```
from fastapi import FastAPI, WebSocket, WebSocketException, status, Depends, Cookie, Header, Path, Query
from typing import Optional

app = FastAPI()

async def get_cookie_or_token(
    websocket: WebSocket,
    session: Optional[str] = Cookie(None),
    token: Optional[str] = Header(None),
):
    if session is None and token is None:
        raise WebSocketException(code=status.WS_1008_POLICY_VIOLATION, reason="Not authenticated")
    return session or token

@app.websocket("/ws/{client_id}")
async def websocket_endpoint(
    websocket: WebSocket,
    client_id: int,
    q: Optional[str] = Query(None),
    cookie_or_token: str = Depends(get_cookie_or_token),
):
    await websocket.accept()
    try:
        while True:
            data = await websocket.receive_text()
            await websocket.send_text(f"Message text was: {data}, client_id: {client_id}, q: {q}, token: {cookie_or_token}")
    except WebSocketException as e:
        await websocket.close(code=e.code, reason=e.reason)
    except Exception:
        await websocket.close(code=status.WS_1011_INTERNAL_ERROR)
```

----------------------------------------

TITLE: Mounting a Sub-FastAPI Application in Python
DESCRIPTION: This snippet demonstrates how to mount the 'subapi' instance onto the main 'app' at a specific path ('/subapi'). After mounting, all path operations defined within 'subapi' will be accessible under the '/subapi' prefix, allowing for modular API design.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/advanced/sub-applications.md#_snippet_2

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI

app = FastAPI()

@app.get("/app")
def read_main():
    return {"message": "Hello from main app"}

subapi = FastAPI()

@subapi.get("/sub")
def read_sub():
    return {"message": "Hello from sub API"}

app.mount("/subapi", subapi)
```

----------------------------------------

TITLE: Defining Arbitrarily Deeply Nested Pydantic Models (Python)
DESCRIPTION: This snippet demonstrates defining multiple levels of nested Pydantic models: `Image` nested in `Item`, `Item` nested in `Offer`, and `Offer` nested in `User`. This showcases FastAPI's ability to handle complex, multi-level data structures for request bodies with full validation and documentation.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/tutorial/body-nested-models.md#_snippet_11

LANGUAGE: Python
CODE:
```
class Item(BaseModel):
    # ... other fields ...
    images: List[Image] | None = None

class Offer(BaseModel):
    # ... other fields ...
    items: List[Item]

class User(BaseModel):
    # ... other fields ...
    offers: List[Offer] | None = None
```

----------------------------------------

TITLE: Defining a Class-Based Dependency in FastAPI
DESCRIPTION: This snippet defines `CommonQueryParams`, a Python class intended to be used as a dependency in FastAPI. Its `__init__` method takes parameters (`q`, `skip`, `limit`) that FastAPI will automatically resolve from query parameters, similar to how function dependencies work.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/dependencies/classes-as-dependencies.md#_snippet_4

LANGUAGE: Python
CODE:
```
class CommonQueryParams:
    def __init__(self, q: str | None = None, skip: int = 0, limit: int = 100):
        self.q = q
        self.skip = skip
        self.limit = limit
```

----------------------------------------

TITLE: Hashing and Verifying Passwords with PassLib - Python
DESCRIPTION: This Python snippet demonstrates how to use `PassLib` with the `bcrypt` algorithm to securely hash user passwords and verify them against stored hashes. It includes functions for creating a password hash and verifying a plaintext password against a hash.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/security/oauth2-jwt.md#_snippet_2

LANGUAGE: Python
CODE:
```
from passlib.context import CryptContext

pwd_context = CryptContext(schemes=["bcrypt"], deprecated="auto")

def verify_password(plain_password: str, hashed_password: str) -> bool:
    return pwd_context.verify(plain_password, hashed_password)

def get_password_hash(password: str) -> str:
    return pwd_context.hash(password)
```

----------------------------------------

TITLE: Chaining Sub-dependencies with Yield in FastAPI
DESCRIPTION: This demonstrates how FastAPI correctly manages the execution order of 'exit code' in nested `yield`-based sub-dependencies. Dependencies `c`, `b`, and `a` are chained, and FastAPI ensures their cleanup code runs in the correct reverse order of their setup, maintaining resource availability for subsequent cleanup.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/dependencies/dependencies-with-yield.md#_snippet_2

LANGUAGE: Python
CODE:
```
from fastapi import Depends, FastAPI

app = FastAPI()

async def dependency_a():
    print("Opening dep_a")
    try:
        yield "dep_a_value"
    finally:
        print("Closing dep_a")

async def dependency_b(dep_a: str = Depends(dependency_a)):
    print(f"Opening dep_b, using {dep_a}")
    try:
        yield "dep_b_value"
    finally:
        print("Closing dep_b")

async def dependency_c(dep_b: str = Depends(dependency_b)):
    print(f"Opening dep_c, using {dep_b}")
    try:
        yield "dep_c_value"
    finally:
        print("Closing dep_c")

@app.get("/test-sub-dependencies/")
async def test_sub_dependencies(val: str = Depends(dependency_c)):
    return {"message": f"Used value from dep_c: {val}"}
```

----------------------------------------

TITLE: FastAPI Python Dependencies (requirements.txt)
DESCRIPTION: Example `requirements.txt` file specifying common Python packages and their version constraints required for a FastAPI application, including `fastapi`, `pydantic`, and `uvicorn`.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/deployment/docker.md#_snippet_1

LANGUAGE: text
CODE:
```
fastapi>=0.68.0,<0.69.0
pydantic>=1.8.0,<2.0.0
uvicorn>=0.15.0,<0.16.0
```

----------------------------------------

TITLE: Importing Form for Request Data - Python
DESCRIPTION: This snippet demonstrates how to import the `Form` class from the `fastapi` module. `Form` is essential for declaring form data parameters in path operation functions, enabling FastAPI to correctly parse data from `application/x-www-form-urlencoded` or `multipart/form-data` content types.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/request-forms.md#_snippet_0

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI, Form
```

----------------------------------------

TITLE: Accessing Enum Values in FastAPI Path Operations (Python)
DESCRIPTION: Shows how to retrieve the underlying string value of an Enum member using the `.value` attribute for comparison or other operations.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/path-params.md#_snippet_11

LANGUAGE: Python
CODE:
```
if model_name.value == "lenet":
    return {"model_name": model_name, "message": "LeNet is a classic!"}
```

----------------------------------------

TITLE: Activating Virtual Environment (Linux/macOS)
DESCRIPTION: This command activates the Python virtual environment on Linux and macOS by sourcing the `activate` script. It modifies the `PATH` environment variable to prioritize the virtual environment's Python executable and installed packages.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/virtual-environments.md#_snippet_0

LANGUAGE: console
CODE:
```
$ source .venv/bin/activate
```

----------------------------------------

TITLE: Nesting an Image Model within an Item Model
DESCRIPTION: This snippet demonstrates how to use the previously defined `Image` model as a type for a field within another Pydantic model (`Item`). This creates a nested data structure, allowing FastAPI to validate the `image` field against the `Image` model's schema.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/body-nested-models.md#_snippet_7

LANGUAGE: Python
CODE:
```
from typing import Optional
from pydantic import BaseModel

class Image(BaseModel):
    url: str
    name: str

class Item(BaseModel):
    name: str
    description: Optional[str] = None
    price: float
    tax: Optional[float] = None
    tags: list = []
    image: Optional[Image] = None
```

----------------------------------------

TITLE: Combining Response Information in FastAPI
DESCRIPTION: This example illustrates how to combine `response_model`, `status_code`, and `responses` parameters in FastAPI. It defines a `200` response with a Pydantic model and a custom example, and a `404` response with a different model and description. FastAPI merges this information into the OpenAPI schema, providing detailed documentation for various response scenarios.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/advanced/additional-responses.md#_snippet_3

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI
from pydantic import BaseModel

class Item(BaseModel):
    id: str
    value: str

class Message(BaseModel):
    message: str

app = FastAPI()

@app.get(
    "/items/{item_id}",
    response_model=Item,
    responses={
        404: {"model": Message, "description": "The item was not found"},
        200: {
            "description": "The item was found",
            "content": {
                "application/json": {
                    "example": {"id": "foo", "value": "The Foo Wrestlers"}
                }
            }
        }
    },
)
async def read_item(item_id: str):
    if item_id == "foo":
        return {"id": "foo", "value": "The Foo Wrestlers"}
    else:
        return {"message": "Item not found"}
```

----------------------------------------

TITLE: Injecting Dependency Value in FastAPI
DESCRIPTION: This snippet highlights the `yield` keyword in a FastAPI dependency. The value yielded (`db` in this case) is what gets injected into the path operation function or other dependent functions, making the resource available for use.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/dependencies/dependencies-with-yield.md#_snippet_1

LANGUAGE: Python
CODE:
```
yield db
```

----------------------------------------

TITLE: Running FastAPI Application with Root Path
DESCRIPTION: This console command starts the FastAPI application using Uvicorn, specifying a '--root-path /api/v1'. This option informs FastAPI that it is being served behind a proxy that handles the '/api/v1' prefix, allowing it to correctly generate URLs and handle requests when accessed through the proxy.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/advanced/behind-a-proxy.md#_snippet_6

LANGUAGE: Console
CODE:
```
$ fastapi run main.py --root-path /api/v1

<span style="color: green;">INFO</span>:     Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)
```

----------------------------------------

TITLE: Installing HTTPX for TestClient
DESCRIPTION: This command installs the `httpx` library, which is a required dependency for using Starlette's `TestClient` to test FastAPI applications. It is recommended to install it within a virtual environment to manage project dependencies effectively.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/testing.md#_snippet_0

LANGUAGE: console
CODE:
```
pip install httpx
```

----------------------------------------

TITLE: Defining Request Body with Standard Dataclass in FastAPI
DESCRIPTION: This snippet demonstrates how to use a standard Python `dataclass` to define the structure of a request body in a FastAPI application. FastAPI, backed by Pydantic, automatically handles data validation and serialization for the `Item` dataclass, which includes `name` and `price` fields. The `create_item` path operation function accepts an `item` of type `Item`.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/advanced/dataclasses.md#_snippet_0

LANGUAGE: Python
CODE:
```
from dataclasses import dataclass

from fastapi import FastAPI


@dataclass
class Item:
    name: str
    price: float


app = FastAPI()


@app.post("/items/")
async def create_item(item: Item):
    return item
```

----------------------------------------

TITLE: Instantiating Pydantic Models
DESCRIPTION: This example demonstrates two ways to create instances of a Pydantic model. It shows direct instantiation with keyword arguments and using dictionary unpacking (**) to pass data to the model constructor, which is useful for dynamic data.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/features.md#_snippet_1

LANGUAGE: Python
CODE:
```
my_user: User = User(id=3, name="John Doe", joined="2018-07-19")

second_user_data = {
    "id": 4,
    "name": "Mary",
    "joined": "2018-11-30"
}

my_second_user: User = User(**second_user_data)
```

----------------------------------------

TITLE: Excluding Path Operations from OpenAPI Schema - Python
DESCRIPTION: This snippet illustrates how to prevent a specific path operation from being included in the generated OpenAPI schema (and thus the automatic interactive documentation like Swagger UI) by setting the `include_in_schema` parameter to `False` in the path operation decorator.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/advanced/path-operation-advanced-configuration.md#_snippet_2

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI

app = FastAPI()

@app.get("/secret-items/", include_in_schema=False)
async def read_secret_items():
    return {"message": "You found the secret!"}
```

----------------------------------------

TITLE: Custom Request Validation Error JSON Response
DESCRIPTION: This JSON snippet shows the customized error response for a `RequestValidationError`. It provides a structured `detail` array, indicating the location, message, and type of each validation error, which is more informative than the default.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ja/docs/tutorial/handling-errors.md#_snippet_8

LANGUAGE: JSON
CODE:
```
{
    "detail": [
        {
            "loc": [
                "path",
                "item_id"
            ],
            "msg": "value is not a valid integer",
            "type": "type_error.integer"
        }
    ]
}
```

----------------------------------------

TITLE: Adding Dependencies to FastAPI Path Operation Decorator
DESCRIPTION: Demonstrates how to attach a list of dependencies directly to a FastAPI path operation decorator. These dependencies are executed before the path operation, but their return values are not passed as parameters to the path function, useful for validation or side effects.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/dependencies/dependencies-in-path-operation-decorators.md#_snippet_0

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI, Depends, Header, HTTPException

async def verify_key(x_key: str = Header()):
    if x_key != "fake-super-secret-key":
        raise HTTPException(status_code=400, detail="X-Key header invalid")
    return x_key

async def verify_token(x_token: str = Header()):
    if x_token != "fake-super-secret-token":
        raise HTTPException(status_code=400, detail="X-Token header invalid")
    return x_token

app = FastAPI()

@app.get("/items/", dependencies=[Depends(verify_key), Depends(verify_token)])
async def read_items():
    return {"message": "Hello, items!"}
```

----------------------------------------

TITLE: Implementing Streaming Response in FastAPI
DESCRIPTION: This snippet demonstrates how to create a streaming response using `StreamingResponse`. It takes an asynchronous generator as content, allowing the server to send data in chunks, which is useful for large files or real-time data streams. The `media_type` parameter specifies the content type, such as `video/mp4`.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/advanced/custom-response.md#_snippet_10

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI
from fastapi.responses import StreamingResponse

app = FastAPI()

async def fake_video_streamer():
    for i in range(10):
        yield b"some fake video bytes\n"

@app.get("/stream")
async def stream_video():
    return StreamingResponse(fake_video_streamer(), media_type="video/mp4")
```

----------------------------------------

TITLE: Path Parameter Numeric Validation: Greater Than and Less Than or Equal
DESCRIPTION: This snippet shows how to apply multiple numeric validations to a path parameter `item_id` using `Path(gt=0, le=1000)`. This ensures `item_id` is an integer strictly greater than 0 and less than or equal to 1000, defining a valid range.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/path-params-numeric-validations.md#_snippet_7

LANGUAGE: Python
CODE:
```
async def read_items(item_id: Annotated[int, Path(gt=0, le=1000)]):
```

----------------------------------------

TITLE: Correct Order of Path Operations in FastAPI (Python)
DESCRIPTION: Illustrates the importance of defining more specific path operations (like `/users/me`) before more general ones (like `/users/{user_id}`) to ensure the correct handler is invoked. FastAPI matches paths in the order they are declared.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/path-params.md#_snippet_6

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI

app = FastAPI()

@app.get("/users/me")
async def read_user_me():
    return {"user_id": "the current user"}

@app.get("/users/{user_id}")
async def read_user(user_id: str):
    return {"user_id": user_id}
```

----------------------------------------

TITLE: Adding Custom Headers to HTTPException in FastAPI
DESCRIPTION: This snippet demonstrates how to include custom HTTP headers in an `HTTPException` response. The `headers` parameter takes a dictionary of header names and values, allowing for additional error context or security information.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ja/docs/tutorial/handling-errors.md#_snippet_4

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI, HTTPException

app = FastAPI()

@app.get("/items/{item_id}")
async def read_item(item_id: str):
    if item_id != "foo":
        raise HTTPException(
            status_code=404,
            detail="Item not found",
            headers={"X-Error": "There goes my error"},
        )
    return {"item": "The Foo Wrestlers"}
```

----------------------------------------

TITLE: Creating a Cached Settings Dependency in FastAPI
DESCRIPTION: This Python snippet defines `get_settings`, a FastAPI dependency function that returns an instance of `config.Settings`. The `@lru_cache()` decorator ensures that the `Settings` object is created only once and then reused for subsequent calls, optimizing performance.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/advanced/settings.md#_snippet_1

LANGUAGE: Python
CODE:
```
from functools import lru_cache
from .config import Settings

@lru_cache()
def get_settings():
    return Settings()
```

----------------------------------------

TITLE: Registering Custom Exception Handlers in FastAPI
DESCRIPTION: This code illustrates how to register a custom exception handler using `@app.exception_handler()`. It allows specific application-defined exceptions, like `UnicornException`, to be caught globally and handled with a custom HTTP response, providing more control over error presentation.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/handling-errors.md#_snippet_5

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI, Request
from fastapi.responses import JSONResponse

class UnicornException(Exception):
    def __init__(self, name: str):
        self.name = name

app = FastAPI()

@app.exception_handler(UnicornException)
async def unicorn_exception_handler(request: Request, exc: UnicornException):
    return JSONResponse(
        status_code=418,
        content={"message": f"Oops! {exc.name} did something. There goes a rainbow..."}
    )

@app.get("/unicorns/{name}")
async def read_unicorn(name: str):
    if name == "yolo":
        raise UnicornException(name=name)
    return {"unicorn_name": name}
```

----------------------------------------

TITLE: Importing Pydantic's Field for Model Attributes - Python
DESCRIPTION: This snippet demonstrates how to import the `Field` class directly from the `pydantic` library. `Field` is used to define extra validation and metadata for attributes within Pydantic models, distinguishing it from FastAPI's `Query`, `Path`, and `Body` which are imported from `fastapi`.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/body-fields.md#_snippet_0

LANGUAGE: Python
CODE:
```
from pydantic import Field
```

----------------------------------------

TITLE: Updating Pydantic Models with `copy(update=...)`
DESCRIPTION: Shows how to update an existing Pydantic model instance using its `.copy()` method with the `update` parameter. This allows merging new data (typically from a partial update dictionary) into an existing model, creating a new model instance with the combined data.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/body-updates.md#_snippet_3

LANGUAGE: Python
CODE:
```
# Assuming 'stored_item_model' is an existing Pydantic model instance
# and 'update_data' is a dictionary containing the fields to update (e.g., from exclude_unset)
updated_item = stored_item_model.copy(update=update_data)
```

----------------------------------------

TITLE: Declaring a List of Nested Pydantic Models
DESCRIPTION: This snippet illustrates how to define a field as a list of custom Pydantic models (e.g., `List[Image]`). This allows the API to accept an array of complex objects, where each object is validated against the specified nested model's schema.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/body-nested-models.md#_snippet_9

LANGUAGE: Python
CODE:
```
from typing import List, Optional
from pydantic import BaseModel, HttpUrl

class Image(BaseModel):
    url: HttpUrl
    name: str

class Item(BaseModel):
    name: str
    description: Optional[str] = None
    price: float
    tax: Optional[float] = None
    tags: List[str] = []
    images: Optional[List[Image]] = None
```

----------------------------------------

TITLE: Numeric Validation: Float Values with `gt` and `lt` - Python
DESCRIPTION: This snippet demonstrates applying numeric validations to `float` path parameters. Using `gt=0` and `lt=1` ensures that `item_id` is a floating-point number strictly between 0 and 1 (e.g., 0.5 is valid, but 0.0 or 1.0 are not).
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/path-params-numeric-validations.md#_snippet_6

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI, Path

app = FastAPI()

@app.get("/items/{item_id}")
async def read_items(item_id: float = Path(gt=0, lt=1)): 
```

----------------------------------------

TITLE: Numeric Path Validation: Greater Than or Equal (ge)
DESCRIPTION: This line demonstrates how to apply numeric validation to a path parameter using `Path`. By setting `ge=1` (greater than or equal to 1), the `item_id` parameter is constrained to accept only integer values that are 1 or greater. FastAPI automatically validates incoming requests against this constraint, returning a 422 Unprocessable Entity error if the condition is not met.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ru/docs/tutorial/path-params-numeric-validations.md#_snippet_6

LANGUAGE: Python
CODE:
```
    item_id: Annotated[int, Path(title="The ID of the item to get", ge=1)]
```

----------------------------------------

TITLE: Testing FastAPI Startup Events with TestClient in Python
DESCRIPTION: This snippet demonstrates how to test FastAPI applications that use `startup` event handlers. It shows the definition of a `startup` event and how to use `TestClient` to simulate requests, ensuring the event handler is triggered. The `TestClient` automatically handles the application lifecycle, including `startup` and `shutdown` events, when the client object is created.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ko/docs/advanced/testing-events.md#_snippet_0

LANGUAGE: Python
CODE:
```
@app.on_event("startup")
async def startup_event():
    print("Starting up...")

client = TestClient(app)

def test_read_main():
    response = client.get("/")
    assert response.status_code == 200
    assert response.json() == {"Hello": "World"}
```

----------------------------------------

TITLE: Overriding HTTPException Handler for Plain Text Response
DESCRIPTION: This snippet demonstrates how to override FastAPI's default `HTTPException` handler to return a `PlainTextResponse` instead of JSON. This allows for custom plain text error messages, useful for specific client requirements or debugging.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ja/docs/tutorial/handling-errors.md#_snippet_10

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI, HTTPException, Request
from fastapi.responses import PlainTextResponse

app = FastAPI()

@app.exception_handler(HTTPException)
async def http_exception_handler(request: Request, exc: HTTPException):
    return PlainTextResponse(str(exc.detail), status_code=exc.status_code)

@app.get("/items/{item_id}")
async def read_item(item_id: str):
    if item_id == "bar":
        raise HTTPException(status_code=404, detail="Oops! Item 'bar' not found.")
    return {"item_id": item_id}
```

----------------------------------------

TITLE: Handling Username and Password with OAuth2PasswordRequestForm in FastAPI
DESCRIPTION: This snippet demonstrates how to use FastAPI's `OAuth2PasswordRequestForm` as a dependency in a path operation. It automatically handles the parsing of `username`, `password`, and optional `scope` fields from the request body, simplifying the implementation of the OAuth2 password grant type.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/security/simple-oauth2.md#_snippet_3

LANGUAGE: Python
CODE:
```
from fastapi import APIRouter, Depends, HTTPException, status
from fastapi.security import OAuth2PasswordRequestForm
from pydantic import BaseModel

# Placeholder for user data and password hashing (will be defined later)
class UserInDB(BaseModel):
    username: str
    hashed_password: str
    email: str | None = None
    full_name: str | None = None
    disabled: bool | None = None

# In a real application, this would come from a database
fake_users_db = {
    "johndoe": {
        "username": "johndoe",
        "full_name": "John Doe",
        "email": "johndoe@example.com",
        "hashed_password": "fakehashedsecret", # In a real app, this would be a real hash
        "disabled": False,
    }
}

router = APIRouter()

@router.post("/token")
async def login_for_access_token(form_data: OAuth2PasswordRequestForm = Depends()):
    # This function will be expanded to include user lookup and password verification
    # For now, just demonstrate form data access
    username = form_data.username
    password = form_data.password
    scopes = form_data.scopes # This is a list of strings
    grant_type = form_data.grant_type # Usually "password" for this flow
    client_id = form_data.client_id
    client_secret = form_data.client_secret

    # Placeholder for actual authentication logic
    user = fake_users_db.get(username)
    if not user:
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="Incorrect username or password",
            headers={"WWW-Authenticate": "Bearer"},
        )
    # Placeholder for password verification (replace with actual hashing library)
    if password != "secret": # Replace with actual password verification
         raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="Incorrect username or password",
            headers={"WWW-Authenticate": "Bearer"},
        )

    # Placeholder for token creation (will be expanded later)
    access_token = username # In a real app, this would be a JWT
    return {"access_token": access_token, "token_type": "bearer"}
```

----------------------------------------

TITLE: Flexible Parameter Ordering with Annotated (Python 3.9+)
DESCRIPTION: When using `Annotated`, the order of parameters like `item_id` (a path parameter with `Path` metadata) and `q` (a required query parameter) can be freely arranged without special syntax. This is because `Annotated` does not assign a default value to the function parameter itself, eliminating the need for workarounds like `*` for parameter ordering. This results in cleaner and more intuitive function definitions.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ru/docs/tutorial/path-params-numeric-validations.md#_snippet_5

LANGUAGE: Python
CODE:
```
async def read_items(item_id: Annotated[int, Path(title="The ID of the item to get")], q: str):
```

----------------------------------------

TITLE: Creating an Independent FastAPI Sub-Application (Python)
DESCRIPTION: This code defines a separate FastAPI application instance, `subapi`, which will be mounted under a specific path in the main application. It includes its own distinct path operation, demonstrating its independent functionality.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/advanced/sub-applications.md#_snippet_1

LANGUAGE: Python
CODE:
```
subapi = FastAPI()

@subapi.get("/items/")
async def read_items():
    return {"message": "Hello from sub API"}
```

----------------------------------------

TITLE: Handling Custom Exceptions with FastAPI Exception Handler
DESCRIPTION: This snippet illustrates how to register a custom exception handler for `UnicornException` using `@app.exception_handler()`. The handler intercepts the custom exception, allowing the application to return a custom `JSONResponse` with a specific status code and message.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/handling-errors.md#_snippet_6

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI, Request
from fastapi.responses import JSONResponse

app = FastAPI()

@app.exception_handler(UnicornException)
async def unicorn_exception_handler(request: Request, exc: UnicornException):
    return JSONResponse(
        status_code=418,
        content={"message": f"Oops! {exc.name} did something. There goes a rainbow..."}
    )

@app.get("/unicorns/{name}")
async def read_unicorn(name: str):
    if name == "yolo":
        raise UnicornException(name=name)
    return {"unicorn_name": name}
```

----------------------------------------

TITLE: Custom Request Validation Error Text Output
DESCRIPTION: This text snippet illustrates the custom error response format after overriding the `RequestValidationError` handler. Instead of the default JSON, it provides a simplified, human-readable text output indicating the validation error details.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/handling-errors.md#_snippet_9

LANGUAGE: text
CODE:
```
1 validation error
path -> item_id
  value is not a valid integer (type=type_error.integer)
```

----------------------------------------

TITLE: Numeric Validation: Greater Than or Equal (`ge`) - Python
DESCRIPTION: This snippet shows how to apply a 'greater than or equal' numeric validation to a path parameter using `ge` within `Path`. Here, `item_id` must be an integer with a value of 1 or more.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/path-params-numeric-validations.md#_snippet_4

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI, Path

app = FastAPI()

@app.get("/items/{item_id}")
async def read_items(item_id: int = Path(ge=1)): 
```

----------------------------------------

TITLE: Declaring a List Query Parameter in FastAPI
DESCRIPTION: This snippet demonstrates how to define a query parameter 'q' that can accept multiple values, which FastAPI automatically parses into a Python list. It uses 'Query' with a type hint of 'list[str]' to explicitly declare the parameter as a list of strings, allowing URLs like '?q=foo&q=bar'.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/query-params-str-validations.md#_snippet_21

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI, Query

app = FastAPI()

@app.get("/items/")
async def read_items(q: list[str] | None = Query(default=None)):
    if q:
        return {"q": q}
    return {"message": "Provide one or more 'q' query parameters"}
```

----------------------------------------

TITLE: Returning Enum Members from FastAPI Path Operations (Python)
DESCRIPTION: Explains how to return an Enum member directly from a path operation. FastAPI automatically converts the Enum member to its underlying value (e.g., string) before sending the JSON response to the client.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/path-params.md#_snippet_12

LANGUAGE: Python
CODE:
```
@app.get("/models/{model_name}")
async def get_model(model_name: ModelName):
    if model_name is ModelName.alexnet:
        return {"model_name": model_name, "message": "Deep Learning FTW!"}
    elif model_name.value == "lenet":
        return {"model_name": model_name, "message": "LeNet is a classic!"}
    else: # model_name is ModelName.resnet
        return {"model_name": model_name, "message": "Have some residuals"}
```

----------------------------------------

TITLE: Using Aliases for Query Parameters in FastAPI (Python)
DESCRIPTION: Shows how to define an `alias` for a query parameter using `Query`. This allows the Python variable name (e.g., `item_query`) to differ from the actual query parameter name used in the URL (e.g., `item-query`), accommodating naming conventions or external API requirements.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/query-params-str-validations.md#_snippet_2

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI, Query

app = FastAPI()


@app.get("/items/")
async def read_items(
    item_query: str | None = Query(default=None, alias="item-query")
):
    results = {"items": [{"item_id": "Foo"}, {"item_id": "Bar"}]}
    if item_query:
        results.update({"item_query": item_query})
    return results
```

----------------------------------------

TITLE: Accepting a Top-Level List of Models as Request Body
DESCRIPTION: This snippet demonstrates how to define a FastAPI path operation that accepts an entire list of Pydantic models (e.g., `List[Image]`) directly as the request body. FastAPI automatically handles the parsing, validation, and documentation for each item in the list.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/body-nested-models.md#_snippet_11

LANGUAGE: Python
CODE:
```
undefined
```

----------------------------------------

TITLE: Accessing Request Body in Validation Errors (FastAPI)
DESCRIPTION: This snippet shows how to access the `body` attribute of a `RequestValidationError` within a custom exception handler. It demonstrates returning a JSON response that includes both the validation error details (`exc.errors()`) and the original invalid request body (`exc.body`), which is useful for debugging or providing detailed feedback to the client.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/handling-errors.md#_snippet_11

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI, Request, status
from fastapi.exceptions import RequestValidationError
from fastapi.responses import JSONResponse
from pydantic import BaseModel

app = FastAPI()

class Item(BaseModel):
    title: str
    size: int

@app.exception_handler(RequestValidationError)
async def validation_exception_handler(request: Request, exc: RequestValidationError):
    return JSONResponse(status_code=status.HTTP_400_BAD_REQUEST, content={"detail": exc.errors(), "body": exc.body})
```

----------------------------------------

TITLE: Define and use FastAPI dependency for application settings
DESCRIPTION: This Python snippet defines `get_settings`, a FastAPI dependency function that returns a new `config.Settings()` instance. It also demonstrates how to inject this dependency into a path operation function and use the settings object within the endpoint. This approach facilitates easy overriding of settings, especially for testing.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/advanced/settings.md#_snippet_1

LANGUAGE: Python
CODE:
```
from functools import lru_cache

from fastapi import Depends, FastAPI

from . import config

@lru_cache()
def get_settings():
    return config.Settings()
```

LANGUAGE: Python
CODE:
```
app = FastAPI()

@app.get("/info")
def info(settings: config.Settings = Depends(get_settings)):
    return {
        "app_name": settings.app_name,
        "admin_email": settings.admin_email,
    }
```

----------------------------------------

TITLE: Declaring Typed Path Parameters in FastAPI (Python)
DESCRIPTION: Shows how to add type annotations to path parameters (e.g., `item_id: int`). FastAPI uses these annotations for automatic data conversion, validation, and generating interactive API documentation.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/path-params.md#_snippet_3

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI

app = FastAPI()

@app.get("/items/{item_id}")
async def read_item(item_id: int):
    return {"item_id": item_id}
```

----------------------------------------

TITLE: Raising Exceptions in FastAPI Dependencies
DESCRIPTION: Shows how dependency functions can raise `HTTPException` to abort the request processing and return an error response. This is crucial for implementing validation and security checks within dependencies.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/dependencies/dependencies-in-path-operation-decorators.md#_snippet_2

LANGUAGE: Python
CODE:
```
from fastapi import Header, HTTPException

async def verify_key(x_key: str = Header()):
    if x_key != "fake-super-secret-key":
        raise HTTPException(status_code=400, detail="X-Key header invalid")

async def verify_token(x_token: str = Header()):
    if x_token != "fake-super-secret-token":
        raise HTTPException(status_code=400, detail="X-Token header invalid")
```

----------------------------------------

TITLE: FastAPI APIRouter GET Path Operation
DESCRIPTION: Defines a basic GET path operation using an APIRouter instance, demonstrating how to capture a path parameter. This snippet illustrates how individual routes are defined within a router.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/bigger-applications.md#_snippet_6

LANGUAGE: Python
CODE:
```
@router.get("/{item_id}")
async def read_item(item_id: str):
    ...
```

----------------------------------------

TITLE: Declaring Required Query Parameters in FastAPI
DESCRIPTION: This snippet shows how to define a required query parameter in FastAPI by simply omitting a default value. The `needy` parameter, declared as `str` without a default, must be provided in the URL for the endpoint to be successfully accessed, otherwise, a validation error occurs.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/query-params.md#_snippet_4

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI

app = FastAPI()

@app.get("/items/{item_id}")
async def read_user_item(item_id: str, needy: str):
    return {"item_id": item_id, "needy": needy}
```

----------------------------------------

TITLE: Initializing OAuth2PasswordBearer Scheme in FastAPI (Python)
DESCRIPTION: This snippet initializes an instance of `OAuth2PasswordBearer`, specifying the `tokenUrl` where clients will send credentials to obtain a token. This setup declares the endpoint for token acquisition in OpenAPI documentation, but does not create the actual path operation.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/security/first-steps.md#_snippet_2

LANGUAGE: Python
CODE:
```
oauth2_scheme = OAuth2PasswordBearer(tokenUrl="token")
```

----------------------------------------

TITLE: Running Uvicorn with Root Path
DESCRIPTION: This console command shows how to start a Uvicorn server for a FastAPI application, explicitly setting the `--root-path` argument. This is crucial when the application is served behind a proxy that exposes it under a specific URL subpath, ensuring FastAPI generates correct URLs.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/advanced/behind-a-proxy.md#_snippet_1

LANGUAGE: Console
CODE:
```
uvicorn main:app --root-path /api/v1

INFO:     Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)
```

----------------------------------------

TITLE: Configuring HTTPS Redirect Middleware in FastAPI
DESCRIPTION: This snippet demonstrates how to add `HTTPSRedirectMiddleware` to a FastAPI application. This middleware automatically redirects all incoming HTTP and WebSocket requests to their secure HTTPS and WSS counterparts, ensuring secure communication.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/advanced/middleware.md#_snippet_2

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI
from starlette.middleware.httpsredirect import HTTPSRedirectMiddleware

app = FastAPI()

app.add_middleware(HTTPSRedirectMiddleware)
```

----------------------------------------

TITLE: Demonstrating Async Python Context Manager (Python)
DESCRIPTION: This snippet shows how an async context manager is typically used with an `async with` statement in asynchronous Python code. It's similar to a standard context manager but designed for asynchronous operations, ensuring proper setup and teardown of async resources.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/advanced/events.md#_snippet_4

LANGUAGE: Python
CODE:
```
async with lifespan(app):
    await do_stuff()
```

----------------------------------------

TITLE: Declaring a Required Query Parameter with Validations
DESCRIPTION: This snippet shows how to declare a query parameter `q` as required while applying validations (e.g., `min_length`) using `Annotated` and `Query`, by simply omitting a default value.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/query-params-str-validations.md#_snippet_19

LANGUAGE: Python
CODE:
```
q: Annotated[str, Query(min_length=3)]
```

----------------------------------------

TITLE: Declaring a Basic Python List in a Pydantic Model
DESCRIPTION: This snippet demonstrates how to declare a field as a generic Python list within a Pydantic model. While it indicates a list, it does not explicitly specify the type of elements it contains, allowing for flexible input.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/body-nested-models.md#_snippet_0

LANGUAGE: Python
CODE:
```
from pydantic import BaseModel

class Item(BaseModel):
    name: str
    description: str | None = None
    price: float
    tax: float | None = None
    tags: list
```

----------------------------------------

TITLE: Defining a Generic List Field in FastAPI Pydantic Model
DESCRIPTION: This snippet demonstrates how to define a model attribute as a generic Python list. This allows the `tags` field to accept a list of items, without specifying the type of elements within the list. It's a basic way to declare a list field in a FastAPI request body.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/body-nested-models.md#_snippet_0

LANGUAGE: Python
CODE:
```
tags: list
```

----------------------------------------

TITLE: Absolute Import of Sub-Routers in FastAPI
DESCRIPTION: This snippet provides an alternative to relative imports by demonstrating an absolute import of `items` and `users` sub-modules from the `app.routers` package. Absolute imports specify the full path from the project's root, offering clarity and making the import location explicit, regardless of the current module's position.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/tutorial/bigger-applications.md#_snippet_4

LANGUAGE: Python
CODE:
```
from app.routers import items, users
```

----------------------------------------

TITLE: Excluding Query Parameters from OpenAPI Schema in FastAPI
DESCRIPTION: This snippet shows how to prevent a query parameter from appearing in the generated OpenAPI documentation by setting 'include_in_schema=False' in the 'Query' function. This is useful for internal or sensitive parameters that should not be exposed in public API documentation.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/query-params-str-validations.md#_snippet_28

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI, Query

app = FastAPI()

@app.get("/items/")
async def read_items(
    hidden_query: str | None = Query(default=None, include_in_schema=False)
):
    if hidden_query:
        return {"hidden_query": hidden_query}
    return {"message": "No hidden query"}
```

----------------------------------------

TITLE: Running FastAPI Application with Uvicorn
DESCRIPTION: This command starts the FastAPI application using `fastapi dev`, which automatically reloads the server on code changes. It uses Uvicorn as the ASGI server, typically running on `http://127.0.0.1:8000`. This is suitable for development environments.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/tutorial/sql-databases.md#_snippet_0

LANGUAGE: Shell
CODE:
```
$ fastapi dev main.py

<span style="color: green;">INFO</span>:     Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)
```

----------------------------------------

TITLE: Re-raising Exceptions in FastAPI Yield Dependencies (Python)
DESCRIPTION: This snippet shows how to properly re-raise a caught exception within a FastAPI dependency using `yield`. Re-raising ensures that FastAPI's exception handlers or internal server error logging mechanisms can process the error, providing crucial server-side visibility while the client still receives an HTTP 500 error.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/dependencies/dependencies-with-yield.md#_snippet_6

LANGUAGE: Python
CODE:
```
        raise
```

----------------------------------------

TITLE: FastAPI Response: Returning Dictionary with Item Attributes
DESCRIPTION: Shows a typical FastAPI endpoint return statement, constructing a dictionary using attributes from a declared 'item' object and an 'item_id'. This highlights how FastAPI facilitates accessing typed object attributes for response generation and editor auto-completion.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/README.md#_snippet_8

LANGUAGE: Python
CODE:
```
    return {"item_name": item.name, "item_id": item_id}
```

----------------------------------------

TITLE: Building a Basic FastAPI Docker Image with Uvicorn/Gunicorn
DESCRIPTION: This Dockerfile provides a basic structure for building a FastAPI application image using the `tiangolo/uvicorn-gunicorn-fastapi` base image. It copies application dependencies from `requirements.txt` and the application code into the `/app` directory within the image.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/deployment/docker.md#_snippet_14

LANGUAGE: Dockerfile
CODE:
```
FROM tiangolo/uvicorn-gunicorn-fastapi:python3.9

COPY ./requirements.txt /app/requirements.txt

RUN pip install --no-cache-dir --upgrade -r /app/requirements.txt

COPY ./app /app
```

----------------------------------------

TITLE: Declaring Optional Query Parameter with Python 3.10+ Union and Query Default
DESCRIPTION: This snippet demonstrates the Python 3.10+ syntax for declaring an optional query parameter `q` using the `str | None` union type. It combines this modern type hint with `Query(default=None)` to enable FastAPI's validation features while maintaining optionality.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/query-params-str-validations.md#_snippet_10

LANGUAGE: Python
CODE:
```
q: str | None = Query(default=None)
```

----------------------------------------

TITLE: Running FastAPI Application with Hypercorn
DESCRIPTION: This command starts the Hypercorn server, serving the FastAPI application named `app` from `main.py`. It binds the server to all network interfaces (`0.0.0.0`) on port `80`. The output shows the server is running.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/deployment/manually.md#_snippet_3

LANGUAGE: console
CODE:
```
hypercorn main:app --bind 0.0.0.0:80
```

----------------------------------------

TITLE: Asynchronously Reading UploadFile Contents
DESCRIPTION: Shows how to asynchronously read the contents of an `UploadFile` object within an `async` path operation function. The `await myfile.read()` method retrieves the file's content, which is useful for processing uploaded data in an asynchronous context.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/request-files.md#_snippet_4

LANGUAGE: Python
CODE:
```
contents = await myfile.read()
```

----------------------------------------

TITLE: Accessing and Using Security Scopes for Error Handling (Python)
DESCRIPTION: This snippet illustrates how to access the required scopes from the `security_scopes` object within a dependency. It demonstrates using `security_scopes.scope_str` to format the required scopes into a space-separated string for the `WWW-Authenticate` header of an `HTTPException`, which is crucial for proper error reporting in OAuth2.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/advanced/security/oauth2-scopes.md#_snippet_2

LANGUAGE: Python
CODE:
```
from fastapi import HTTPException
from fastapi.security import SecurityScopes

async def get_current_user(
    security_scopes: SecurityScopes, token: Annotated[str, Depends(oauth2_scheme)]
):
    authenticate_value = f"Bearer scope=\"{security_scopes.scope_str}\"";
    credentials_exception = HTTPException(
        status_code=401,
        detail="Could not validate credentials",
        headers={
            "WWW-Authenticate": authenticate_value
        },
    )
    # ... rest of the function logic ...
    pass
```

----------------------------------------

TITLE: Receiving File as UploadFile in FastAPI
DESCRIPTION: This snippet defines an endpoint to receive a file using `UploadFile`. `UploadFile` is preferred for larger files as it spools content to disk, preventing excessive memory usage. It provides file-like asynchronous methods for reading, writing, and seeking.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/request-files.md#_snippet_2

LANGUAGE: Python
CODE:
```
@app.post("/uploadfile/")
async def create_upload_file(file: UploadFile):
    return {"filename": file.filename, "content_type": file.content_type}
```

----------------------------------------

TITLE: Defining Python Project Dependencies
DESCRIPTION: This snippet specifies the required Python packages and their version ranges. These dependencies are typically installed using pip from a `requirements.txt` file, ensuring a consistent environment for the project. Each line defines a package and its acceptable version constraints.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/requirements-github-actions.txt#_snippet_0

LANGUAGE: Python
CODE:
```
PyGithub>=2.3.0,<3.0.0
pydantic>=2.5.3,<3.0.0
pydantic-settings>=2.1.0,<3.0.0
httpx>=0.27.0,<0.28.0
pyyaml >=5.3.1,<7.0.0
smokeshow
```

----------------------------------------

TITLE: Detailed Request Validation Error Response JSON
DESCRIPTION: This JSON snippet illustrates the detailed error response returned by FastAPI when a `RequestValidationError` occurs. It includes the location of the error, the error message, the error type, and the original invalid request body.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/handling-errors.md#_snippet_12

LANGUAGE: JSON
CODE:
```
{
  "detail": [
    {
      "loc": [
        "body",
        "size"
      ],
      "msg": "value is not a valid integer",
      "type": "type_error.integer"
    }
  ],
  "body": {
    "title": "towel",
    "size": "XL"
  }
}
```

----------------------------------------

TITLE: Streaming File-like Objects with FastAPI StreamingResponse (Python)
DESCRIPTION: Demonstrates how to use `StreamingResponse` with a file-like object by creating a generator function. This approach avoids loading the entire file into memory, making it suitable for large files or interactions with cloud storage. The `with` block ensures the file is properly closed after the response is sent.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/advanced/custom-response.md#_snippet_11

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI, StreamingResponse
from typing import Generator

app = FastAPI()

def iterfile() -> Generator[bytes, None, None]:
    with open("large-file.txt", mode="rb") as file_like:
        yield from file_like

@app.get("/stream-file")
def stream_file():
    return StreamingResponse(iterfile(), media_type="text/plain")
```

----------------------------------------

TITLE: Importing File and UploadFile in FastAPI
DESCRIPTION: This line imports the necessary `FastAPI`, `File`, and `UploadFile` classes from the `fastapi` library, which are essential for defining file upload parameters in API endpoints.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/request-files.md#_snippet_0

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI, File, UploadFile
```

----------------------------------------

TITLE: Forbidding Extra Query Parameters with Pydantic in FastAPI
DESCRIPTION: This snippet shows how to configure a Pydantic model to reject any query parameters not explicitly defined in the model. By setting `model_config = ConfigDict(extra='forbid')`, FastAPI will return an error if the client sends unexpected query parameters, enhancing API strictness and security.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/query-param-models.md#_snippet_1

LANGUAGE: Python
CODE:
```
from typing import Optional

from fastapi import FastAPI, Query
from pydantic import BaseModel, ConfigDict

app = FastAPI()


class CommonQueryParams(BaseModel):
    model_config = ConfigDict(extra="forbid")

    q: Optional[str] = None
    skip: int = 0
    limit: int = 100


@app.get("/items/")
async def read_items(commons: CommonQueryParams = Query(...)):
    response = {}
    if commons.q:
        response.update({"q": commons.q})
    items = [{"item_id": "Foo"}, {"item_id": "Bar"}]
    response.update({"items": items[commons.skip : commons.skip + commons.limit]})
    return response
```

----------------------------------------

TITLE: Relative Import (Single Dot) in Python
DESCRIPTION: This snippet demonstrates a relative import using a single dot (.), which signifies importing a module from the same package. It's used here to import `get_token_header` from a `dependencies` module expected to reside in the same directory as the current file (`app/routers/items.py`). This method is concise for intra-package imports.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/tutorial/bigger-applications.md#_snippet_0

LANGUAGE: Python
CODE:
```
from .dependencies import get_token_header
```

----------------------------------------

TITLE: Using Dataclass as Response Model in FastAPI
DESCRIPTION: This example illustrates how to use a `dataclass` with FastAPI's `response_model` parameter. FastAPI automatically converts the dataclass into a Pydantic-compatible structure for response serialization and generates corresponding API documentation, ensuring data consistency and proper schema display.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/advanced/dataclasses.md#_snippet_1

LANGUAGE: Python
CODE:
```
from dataclasses import dataclass

from fastapi import FastAPI

app = FastAPI()


@dataclass
class Item:
    name: str
    price: float
    is_offer: bool = False
    product_id: str = "product"


@app.post("/items/", response_model=Item)
async def create_item(item: Item):
    return item
```

----------------------------------------

TITLE: Handling WebSocket Disconnections and Broadcasting
DESCRIPTION: This example demonstrates how to gracefully handle client disconnections in a FastAPI WebSocket application. It shows catching the `WebSocketDisconnect` exception when a client closes the connection and then broadcasting a message to other active clients about the disconnection. It uses a simple in-memory list to manage connected clients for demonstration purposes.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/advanced/websockets.md#_snippet_4

LANGUAGE: python
CODE:
```
from fastapi import FastAPI, WebSocket, WebSocketDisconnect
from typing import List

app = FastAPI()

# In a real application, you would use a proper message broker like Redis Pub/Sub
# or a library like `broadcaster` for managing multiple connections.
# This is a simplified in-memory list for demonstration purposes.
connected_clients: List[WebSocket] = []

@app.websocket("/ws")
async def websocket_endpoint(websocket: WebSocket):
    await websocket.accept()
    connected_clients.append(websocket)
    try:
        while True:
            data = await websocket.receive_text()
            # Broadcast message to all connected clients
            for client in connected_clients:
                await client.send_text(f"Message from client {id(websocket)}: {data}")
    except WebSocketDisconnect:
        connected_clients.remove(websocket)
        # Broadcast disconnect message
        for client in connected_clients:
            await client.send_text(f"Client {id(websocket)} left the chat")
    except Exception as e:
        print(f"Error: {e}")
        connected_clients.remove(websocket)
```

----------------------------------------

TITLE: Pinning Pydantic Version Range in requirements.txt
DESCRIPTION: This snippet demonstrates how to pin Pydantic to a compatible version range (e.g., `>=1.2.0,<2.0.0`) in `requirements.txt`. This ensures compatibility with FastAPI, which relies on Pydantic for data validation, allowing for updates within the 1.x series but preventing upgrades to Pydantic 2.0.0 which might have breaking changes.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/deployment/versions.md#_snippet_3

LANGUAGE: txt
CODE:
```
pydantic>=1.2.0,<2.0.0
```

----------------------------------------

TITLE: Defining a Nested Pydantic Image Model
DESCRIPTION: This snippet defines a `BaseModel` for an `Image`, specifying its `url` and `name` attributes. This model can then be nested within other Pydantic models to represent complex data structures, enabling structured validation for image-related data.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/body-nested-models.md#_snippet_6

LANGUAGE: Python
CODE:
```
from pydantic import BaseModel

class Image(BaseModel):
    url: str
    name: str
```

----------------------------------------

TITLE: Including Attributes in FastAPI Response Model (List)
DESCRIPTION: This snippet illustrates using `response_model_include` with a `list` of strings. FastAPI automatically converts the list to a set internally, so it functions identically to providing a set. This method allows filtering response attributes, ensuring only 'name' and 'description' are returned. It depends on a FastAPI app, a Pydantic `Item` model, and an `items` dictionary.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/response-model.md#_snippet_6

LANGUAGE: Python
CODE:
```
@app.get("/items/{item_id}", response_model=Item,
         response_model_include=["name", "description"])
async def read_item_list_include(item_id: str):
    return items[item_id]
```

----------------------------------------

TITLE: Using `jsonable_encoder` with `JSONResponse` in FastAPI
DESCRIPTION: This snippet demonstrates how to manually convert data, such as a Pydantic model or a dictionary containing `datetime` objects, into a JSON-compatible format using FastAPI's `jsonable_encoder`. The converted data is then explicitly passed to a `JSONResponse` object, which is returned directly from the route operation. This approach is necessary when bypassing FastAPI's automatic serialization to gain fine-grained control over the response content.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/advanced/response-directly.md#_snippet_0

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI
from fastapi.responses import JSONResponse
from fastapi.encoders import jsonable_encoder
from datetime import datetime

app = FastAPI()

@app.get("/items/")
async def read_items():
    # Example data with a datetime object
    data = {"message": "Hello World", "timestamp": datetime.now()}
    # Convert data to JSON-compatible format using jsonable_encoder
    json_compatible_data = jsonable_encoder(data)
    # Return a JSONResponse directly
    return JSONResponse(content=json_compatible_data)
```

----------------------------------------

TITLE: Installing Python Dependencies with pip
DESCRIPTION: This console command demonstrates how to install the Python package dependencies listed in a `requirements.txt` file using `pip`. The `-r` flag specifies the file containing the list of packages to install, and the output shows successful installation.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/deployment/docker.md#_snippet_2

LANGUAGE: console
CODE:
```
$ pip install -r requirements.txt
---> 100%
Successfully installed fastapi pydantic
```

----------------------------------------

TITLE: Defining a Set of Strings in FastAPI Pydantic Model
DESCRIPTION: This snippet demonstrates how to define a model attribute as a set of strings (`set[str]`). Using a set ensures that all elements in the `tags` field are unique, automatically handling duplicate entries by converting them to a set of unique items during data processing.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/body-nested-models.md#_snippet_5

LANGUAGE: Python
CODE:
```
tags: set[str]
```

----------------------------------------

TITLE: Declaring Arbitrary Dict Body with Specific Types
DESCRIPTION: Illustrates how to declare a request body as an arbitrary dictionary where keys are integers and values are floats. FastAPI, leveraging Pydantic, automatically converts string keys from JSON to integers and validates the float values, providing strong typing even for dynamic dictionary structures.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/body-nested-models.md#_snippet_15

LANGUAGE: Python
CODE:
```
weights: dict[int, float]
```

----------------------------------------

TITLE: Declaring Required Path and Optional Query Parameters - Python
DESCRIPTION: This example shows how to declare a required path parameter `item_id` using `Path(...)` and an optional query parameter `title`. The `Path(...)` ensures `item_id` is mandatory.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/path-params-numeric-validations.md#_snippet_1

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI, Path, Query

app = FastAPI()

@app.get("/items/{item_id}")
async def read_items(item_id: int = Path(...), title: str | None = None):
```

----------------------------------------

TITLE: Handling Request Validation Errors with Try/Except in FastAPI
DESCRIPTION: This Python snippet demonstrates the basic structure for handling `RequestValidationError` within a custom route handler or middleware. It shows the `try` block where request body processing would occur, followed by an `except` block to catch validation errors, allowing for custom error responses.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/how-to/custom-request-and-route.md#_snippet_2

LANGUAGE: Python
CODE:
```
try:
    # ... process request body ...
except RequestValidationError as exc:
```

----------------------------------------

TITLE: Making Query Parameter Optional with Query(default=None) (Python)
DESCRIPTION: This snippet demonstrates how to explicitly declare an optional query parameter `q` using `Query(default=None)` as its default value. This achieves the same optionality as simply setting `q = None`, but explicitly marks it as a query parameter for FastAPI.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/query-params-str-validations.md#_snippet_8

LANGUAGE: Python
CODE:
```
q: str | None = Query(default=None)
```

----------------------------------------

TITLE: Adding Minimum Length Validation to Query Parameter
DESCRIPTION: This snippet demonstrates how to add a `min_length` validation to a query parameter using `Query` within `Annotated`, ensuring the input string meets a minimum length requirement.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/query-params-str-validations.md#_snippet_13

LANGUAGE: Python
CODE:
```
q: Annotated[str, Query(min_length=3)]
```

----------------------------------------

TITLE: Using FastAPI Shortcut for Annotated Class Dependency - Python 3.8+
DESCRIPTION: This snippet illustrates the FastAPI shortcut for declaring class-based dependencies using `Annotated`. By using `Depends()` without arguments, FastAPI automatically infers the dependency from the type hint, eliminating code repetition.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/dependencies/classes-as-dependencies.md#_snippet_12

LANGUAGE: Python
CODE:
```
commons: Annotated[CommonQueryParams, Depends()]
```

----------------------------------------

TITLE: Using Alias for Query Parameter Name in FastAPI
DESCRIPTION: This snippet demonstrates how to use the `alias` parameter in `Query` to map a URL query parameter name (e.g., `item-query`) to a different, valid Python variable name (e.g., `item_query`). This allows for flexible URL naming while maintaining Pythonic code.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/tutorial/query-params-str-validations.md#_snippet_13

LANGUAGE: Python
CODE:
```
from typing import Union

from fastapi import FastAPI, Query

app = FastAPI()


@app.get("/items/")
async def read_items(item_query: Union[str, None] = Query(default=None, alias="item-query")):
    return {"item_query": item_query}
```

----------------------------------------

TITLE: Using a Pydantic Submodel as an Attribute Type
DESCRIPTION: This snippet demonstrates how to use a previously defined Pydantic model (e.g., `Image`) as the type for an attribute within another model. This allows for nested JSON objects in the request body, providing structured data validation and documentation for the `image` field.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/body-nested-models.md#_snippet_7

LANGUAGE: Python
CODE:
```
image: Image
```

----------------------------------------

TITLE: Receiving File as Bytes in FastAPI
DESCRIPTION: This snippet defines an endpoint to receive a file as raw bytes. The `File(...)` dependency indicates that the parameter `file` should be extracted from the request body as a file, and `bytes` type hints that the entire file content will be loaded into memory. This is suitable for small files.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/request-files.md#_snippet_1

LANGUAGE: Python
CODE:
```
@app.post("/files/")
async def create_file(file: bytes = File(...)):
    return {"file_size": len(file)}
```

----------------------------------------

TITLE: Running FastAPI Application with Uvicorn
DESCRIPTION: This command starts a FastAPI application using Uvicorn, enabling auto-reloading for development. It assumes the application instance is named 'app' within 'main.py' and listens on http://127.0.0.1:8000.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/index.md#_snippet_0

LANGUAGE: console
CODE:
```
uvicorn main:app --reload
```

----------------------------------------

TITLE: Define FastAPI App with Tags
DESCRIPTION: Illustrates how to structure a FastAPI application using `tags` to group path operations, such as for 'items' and 'users'. This organization helps in categorizing API endpoints and influences how client code is generated, typically creating separate service classes per tag.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/advanced/generate-clients.md#_snippet_3

LANGUAGE: python
CODE:
```
from fastapi import FastAPI
from pydantic import BaseModel

app = FastAPI(
    title="My Super Project",
    version="2.5.0",
    openapi_tags=[
        {"name": "items", "description": "Operations with items."},
        {"name": "users", "description": "Operations with users."}
    ]
)

class Item(BaseModel):
    name: str
    price: float

class User(BaseModel):
    username: str
    email: str

@app.post("/items/", tags=["items"])
async def create_item(item: Item):
    return item

@app.get("/items/", tags=["items"])
async def read_items():
    return [{"name": "Foo", "price": 42}]

@app.post("/users/", tags=["users"])
async def create_user(user: User):
    return user

@app.get("/users/", tags=["users"])
async def read_users():
    return [{"username": "Rick"}, {"username": "Morty"}]
```

----------------------------------------

TITLE: Example Request Body for PUT Operation
DESCRIPTION: An example JSON request body for a PUT operation. When used with a PUT request, any fields not included in this body (like 'tax' in the original example) will be removed or reset to their default values in the stored resource, as PUT implies a full replacement.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/body-updates.md#_snippet_1

LANGUAGE: Python
CODE:
```
{
    "name": "Barz",
    "price": 3,
    "description": None,
}
```

----------------------------------------

TITLE: Defining FastAPI Application Dependencies
DESCRIPTION: This snippet shows a `requirements.txt` file, which lists the Python package dependencies for a FastAPI application, including specific version ranges for `fastapi` and `pydantic`. This file is commonly used by `pip` to install project dependencies.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/deployment/docker.md#_snippet_1

LANGUAGE: text
CODE:
```
fastapi[standard]>=0.113.0,<0.114.0
pydantic>=2.7.0,<3.0.0
```

----------------------------------------

TITLE: Performing Date Arithmetic with FastAPI Typed Parameters
DESCRIPTION: This snippet illustrates a common operation within a FastAPI path function: performing arithmetic on `datetime` and `timedelta` parameters. Because FastAPI ensures these parameters are correctly typed upon receipt, developers can directly apply standard Python operations, such as adding a `timedelta` to a `datetime` object, without manual type conversion.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/extra-data-types.md#_snippet_1

LANGUAGE: Python
CODE:
```
    future_datetime = start_datetime + duration
```

----------------------------------------

TITLE: Testing WebSocket Connections with TestClient in Python
DESCRIPTION: This snippet demonstrates how to establish a WebSocket connection using FastAPI's `TestClient` within a `with` statement. It connects to a WebSocket endpoint, receives a message, and asserts its content, ensuring the WebSocket communication functions as expected. This requires an initialized `TestClient` instance.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/advanced/testing-websockets.md#_snippet_0

LANGUAGE: Python
CODE:
```
def test_websocket_connection():
    with client.websocket_connect("/ws") as websocket:
        data = websocket.receive_text()
        assert data == "Hello WebSocket"
```

----------------------------------------

TITLE: Running Uvicorn with Inline Environment Variables
DESCRIPTION: Shows how to start a Uvicorn server while setting environment variables ('ADMIN_EMAIL', 'APP_NAME') directly in the command line, which are then picked up by the Pydantic 'Settings' class for application configuration.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/advanced/settings.md#_snippet_7

LANGUAGE: console
CODE:
```
$ ADMIN_EMAIL="deadpool@example.com" APP_NAME="ChimichangApp" uvicorn main:app

<span style="color: green;">INFO</span>:     Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)
```

----------------------------------------

TITLE: Simple FastAPI Application for Testing
DESCRIPTION: This code defines a basic FastAPI application with a single GET endpoint. It serves as the application under test when separating tests into a dedicated test file, allowing for modular testing practices.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/tutorial/testing.md#_snippet_2

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI

app = FastAPI()

@app.get("/")
async def read_main():
    return {"msg": "Hello World"}
```

----------------------------------------

TITLE: Customizing OpenAPI Response Schema with openapi_extra - Python
DESCRIPTION: This snippet demonstrates how to manually define a custom response schema within the `openapi_extra` parameter for a path operation. This is useful for scenarios where the response type is not directly inferable by Pydantic, such as binary data, allowing for precise OpenAPI documentation.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/advanced/path-operation-advanced-configuration.md#_snippet_6

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI, Response
from pydantic import BaseModel

app = FastAPI()

class MagicData(BaseModel):
    value: str

def magic_data_reader(data: bytes) -> MagicData:
    # Simulate some complex parsing
    return MagicData(value=data.decode())

@app.post("/magic-data/",
    openapi_extra={
        "responses": {
            "200": {
                "description": "Magic data processed successfully",
                "content": {
                    "application/octet-stream": {
                        "schema": {
                            "type": "string",
                            "format": "binary"
                        }
                    }
                }
            }
        }
    }
)
async def process_magic_data(response: Response):
    response.headers["X-Magic-Header"] = "true"
    return b"some_binary_data"
```

----------------------------------------

TITLE: Importing FastAPI Application in Another Script (Python)
DESCRIPTION: Demonstrates importing a FastAPI application from `myapp.py` into a different Python file, including additional code. This scenario highlights that when `myapp.py` is imported, its `__name__` variable will not be `"__main__"`, thus preventing the `uvicorn.run()` call within `myapp.py` from executing.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/debugging.md#_snippet_3

LANGUAGE: Python
CODE:
```
from myapp import app

# Some more code
```

----------------------------------------

TITLE: Executing Python with and without Environment Variables (PowerShell)
DESCRIPTION: This console snippet demonstrates the execution of a Python script (`main.py`) in a Windows PowerShell environment. It shows the script's output when `MY_NAME` is not set (using the default value) and then after `MY_NAME` is defined using `$Env:`, illustrating how the script reads the environment variable.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/environment-variables.md#_snippet_4

LANGUAGE: PowerShell
CODE:
```
// Here we don't set the env var yet
$ python main.py

// As we didn't set the env var, we get the default value

Hello World from Python

// But if we create an environment variable first
$ $Env:MY_NAME = "Wade Wilson"

// And then call the program again
$ python main.py

// Now it can read the environment variable

Hello Wade Wilson from Python
```

----------------------------------------

TITLE: Declaring Single Body Example in FastAPI
DESCRIPTION: This snippet demonstrates how to declare a single example for a request body using the `examples` parameter in FastAPI's `Body()` function. This example is added to the body's JSON Schema within the OpenAPI specification, improving API documentation for the request payload. It requires FastAPI.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/schema-extra-example.md#_snippet_3

LANGUAGE: Python
CODE:
```
from typing import Annotated
from fastapi import Body
from pydantic import BaseModel

class Item(BaseModel):
    name: str
    description: str | None = None
    price: float
    tax: float | None = None

# Example of usage in a path operation
async def create_item(
    item: Annotated[
        Item,
        Body(
            examples=[
                {
                    "name": "Foo",
                    "description": "A very nice Item",

```

----------------------------------------

TITLE: Using SecurityScopes in FastAPI Dependencies (Python)
DESCRIPTION: This snippet shows how to update a dependency function (`get_current_user`) to accept `SecurityScopes` as a parameter. `SecurityScopes` allows the dependency to receive all scopes required by itself and its dependants, enabling centralized scope validation. It also clarifies when to use `Depends` (no scope requirements) versus `Security` (with scope requirements).
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/advanced/security/oauth2-scopes.md#_snippet_1

LANGUAGE: Python
CODE:
```
from typing import Annotated
from fastapi import Depends
from fastapi.security import OAuth2PasswordBearer, SecurityScopes

oauth2_scheme = OAuth2PasswordPasswordBearer(tokenUrl="token")

async def get_current_user(
    security_scopes: SecurityScopes, token: Annotated[str, Depends(oauth2_scheme)]
):
    # ... logic to validate token and user ...
    pass
```

----------------------------------------

TITLE: Configuring Pydantic Settings to Read from .env (v1)
DESCRIPTION: This Python snippet updates the Pydantic `Settings` class to read configuration values from a `.env` file using the Pydantic v1 syntax. By defining an inner `Config` class with `env_file = ".env"`, Pydantic automatically loads environment variables from the specified file, simplifying environment-specific configurations.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/advanced/settings.md#_snippet_6

LANGUAGE: Python
CODE:
```
from pydantic import BaseSettings

class Settings(BaseSettings):
    admin_email: str
    app_name: str

    class Config:
        env_file = ".env"
```

----------------------------------------

TITLE: Declaring a Set of Strings in a Pydantic Model
DESCRIPTION: This snippet shows how to define a field as a `set` of strings (`Set[str]`) using Pydantic. Sets automatically handle unique values, ensuring that the `tags` field contains only distinct string elements, which is useful for non-repeating categories.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/body-nested-models.md#_snippet_5

LANGUAGE: Python
CODE:
```
from typing import Set
from pydantic import BaseModel

class Item(BaseModel):
    name: str
    description: str | None = None
    price: float
    tax: float | None = None
    tags: Set[str] = set()
```

----------------------------------------

TITLE: Declaring Simple Python Types
DESCRIPTION: This snippet illustrates the declaration of various fundamental Python types as type hints for function parameters, including `int`, `float`, `bool`, and `bytes`. These simple type declarations provide clear expectations for variable types, aiding readability and static analysis.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/python-types.md#_snippet_7

LANGUAGE: Python
CODE:
```
def process_data(count: int, price: float, is_active: bool, raw_data: bytes):
    # Function body would process data based on types
    pass
```

----------------------------------------

TITLE: Declaring Union Types with Vertical Bar (Python 3.10+)
DESCRIPTION: This snippet demonstrates the new simplified syntax for declaring union types in Python 3.10+, using the vertical bar (`|`) to separate possible types. This allows a variable to accept multiple distinct types (e.g., `int` or `str`) without needing to import `Union` from `typing`.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/python-types.md#_snippet_15

LANGUAGE: Python
CODE:
```
item: int | str = 1
```

----------------------------------------

TITLE: Python Relative Import: Routers Subpackage
DESCRIPTION: Shows how to use a single-dot relative import to bring in APIRouter submodules (`items` and `users`) from the `routers` subpackage into the main `app/main.py` file.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/bigger-applications.md#_snippet_11

LANGUAGE: Python
CODE:
```
from .routers import items, users
```

----------------------------------------

TITLE: Basic Optional String Type Hint (Python 3.10+)
DESCRIPTION: This snippet illustrates the standard Python 3.10+ syntax for defining an optional string parameter `q`. The `str | None` type hint indicates that `q` can be either a string or `None`, and its default value of `None` makes it optional.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/query-params-str-validations.md#_snippet_2

LANGUAGE: Python
CODE:
```
q: str | None = None
```

----------------------------------------

TITLE: Declaring Optional Header Parameters with Default Values in FastAPI
DESCRIPTION: This example shows how to declare an optional HTTP header parameter named `x_token` using `Header`, setting its default value to `None`. This allows FastAPI to automatically extract the header value from incoming requests, making the header optional.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/header-params.md#_snippet_1

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI, Header

app = FastAPI()

@app.get("/items/")
async def read_items(x_token: str | None = Header(default=None)):
    return {"X-Token": x_token}
```

----------------------------------------

TITLE: Defining Class-Based Dependency - Python
DESCRIPTION: This snippet defines `CommonQueryParams`, a Python class intended to be used as a FastAPI dependency. Its `__init__` method mirrors the parameters of the previous function-based dependency, allowing FastAPI to extract, validate, and document query parameters (`q`, `skip`, `limit`) when an instance of this class is created.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/tutorial/dependencies/classes-as-dependencies.md#_snippet_2

LANGUAGE: Python
CODE:
```
class CommonQueryParams:
    def __init__(self, q: Optional[str] = None, skip: int = 0, limit: int = 100):
        self.q = q
        self.skip = skip
        self.limit = limit
```

----------------------------------------

TITLE: Defining Enum for Predefined Path Parameters
DESCRIPTION: Shows how to create a Python `Enum` class that inherits from `str` and `Enum`. This allows defining a set of predefined, valid string values for path parameters, which FastAPI can use for validation and API documentation.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/tutorial/path-params.md#_snippet_2

LANGUAGE: Python
CODE:
```
from enum import Enum

class ModelName(str, Enum):
    alexnet = "alexnet"
    resnet = "resnet"
    lenet = "lenet"
```

----------------------------------------

TITLE: Direct Model Conversion and Instantiation - Python
DESCRIPTION: This concise line shows how to directly convert one Pydantic model (`user_in`) to a dictionary and immediately use that dictionary to instantiate another Pydantic model (`UserInDB`), leveraging Python's dictionary unpacking feature.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/extra-models.md#_snippet_9

LANGUAGE: Python
CODE:
```
UserInDB(**user_in.dict())
```

----------------------------------------

TITLE: Declaring a Path Parameter with an Enum Type in FastAPI
DESCRIPTION: This snippet demonstrates how to declare a path parameter `model_name` in a FastAPI path operation, using the previously defined `ModelName` Enum as its type annotation. This ensures that the `model_name` parameter will only accept values from the `ModelName` enumeration, providing automatic validation and documentation.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/path-params.md#_snippet_8

LANGUAGE: Python
CODE:
```
@app.get("/models/{model_name}")
async def get_model(model_name: ModelName):
    # ...
```

----------------------------------------

TITLE: Defining Synchronous Path Operation - FastAPI Python
DESCRIPTION: This FastAPI path operation function is defined using a regular `def` because it calls a synchronous third-party library function that does not support `await`. This approach is typically used for CPU-bound operations or when interacting with libraries that are not designed for asynchronous execution, such as many current database libraries.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/tr/docs/async.md#_snippet_2

LANGUAGE: Python
CODE:
```
@app.get('/')
def results():
    results = some_library()
    return results
```

----------------------------------------

TITLE: Creating a Chained Dependency in FastAPI
DESCRIPTION: This snippet defines `query_or_cookie_extractor`, a dependency that itself depends on `query_extractor`. It retrieves the `q` value from `query_extractor` and also accepts an optional `last_query` from a cookie, demonstrating how dependencies can be chained and combine multiple sources.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/dependencies/sub-dependencies.md#_snippet_1

LANGUAGE: Python
CODE:
```
from typing import Optional
from fastapi import Depends, Cookie

async def query_extractor(q: str):
    return q

async def query_or_cookie_extractor(
    q: str = Depends(query_extractor),
    last_query: Optional[str] = Cookie(None),
):
    return {"q": q, "last_query": last_query}
```

----------------------------------------

TITLE: Importing FastAPI App for Uvicorn - Python
DESCRIPTION: This Python snippet illustrates the underlying import logic for the `uvicorn main:app` command. It directly imports the `app` object, which is typically the `FastAPI()` instance, from the `main` module (e.g., `main.py`). This clarifies how Uvicorn locates the application.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/deployment/manually.md#_snippet_3

LANGUAGE: Python
CODE:
```
from main import app
```

----------------------------------------

TITLE: Pinning FastAPI Version Range in requirements.txt
DESCRIPTION: This snippet shows how to specify a compatible version range for FastAPI in `requirements.txt`. It allows using version 0.45.0 or newer, but strictly less than 0.46.0, accommodating bug fixes within the 0.45.x series while avoiding potential breaking changes from 0.46.0.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/deployment/versions.md#_snippet_1

LANGUAGE: txt
CODE:
```
fastapi>=0.45.0,<0.46.0
```

----------------------------------------

TITLE: Defining Pydantic Models with Pipe Operator (Python 3.10+)
DESCRIPTION: Demonstrates Pydantic model definition using the Python 3.10+ pipe operator for union types (e.g., `str | None`). This modern syntax simplifies type declarations within Pydantic models, enhancing readability.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/python-types.md#_snippet_10

LANGUAGE: Python
CODE:
```
from pydantic import BaseModel

class Item(BaseModel):
    name: str
    description: str | None = None
    price: float
    tags: list[str] = []
```

----------------------------------------

TITLE: Pinning Exact FastAPI Version in requirements.txt
DESCRIPTION: This snippet demonstrates how to pin an exact version of FastAPI (e.g., 0.45.0) in a `requirements.txt` file. This practice ensures that your application always uses this specific version, preventing unexpected changes or incompatibilities that might arise from newer releases.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/deployment/versions.md#_snippet_0

LANGUAGE: txt
CODE:
```
fastapi==0.45.0
```

----------------------------------------

TITLE: Defining Form Parameters in FastAPI Path Operations - Python
DESCRIPTION: This example illustrates how to define parameters that expect form data using `Form` within a FastAPI path operation. It sets up a POST endpoint to handle `username` and `password` fields, commonly used in authentication flows like OAuth2, ensuring the data is parsed from the request body as form data.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/request-forms.md#_snippet_1

LANGUAGE: Python
CODE:
```
app = FastAPI()

@app.post("/login/")
async def login(username: str = Form(...), password: str = Form(...)):
    return {"username": username}
```

----------------------------------------

TITLE: Applying Validation to Singular Body Parameters in FastAPI
DESCRIPTION: This snippet demonstrates how to apply validation constraints to singular values declared as part of the request body using Body(). Similar to Query and Path parameters, Body() accepts additional validation arguments (e.g., gt=0 for 'greater than zero'). FastAPI will automatically validate the incoming importance value against this constraint, returning an error if it's not met.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/body-multiple-params.md#_snippet_3

LANGUAGE: Python
CODE:
```
async def update_item(item_id: int, item: Item, user: User, importance: int = Body(gt=0)):
```

----------------------------------------

TITLE: Importing Header for FastAPI Parameters
DESCRIPTION: This snippet demonstrates how to import the `Header` class from the `fastapi` module. `Header` is essential for defining HTTP header parameters in FastAPI path operations, similar to how `Query` and `Path` are used for other parameter types.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/header-params.md#_snippet_0

LANGUAGE: Python
CODE:
```
from fastapi import Header
```

----------------------------------------

TITLE: Including/Excluding Fields with List in Response Model - FastAPI Python
DESCRIPTION: This snippet shows that `response_model_include` and `response_model_exclude` parameters can accept Python lists (or tuples) of attribute names. FastAPI internally converts these lists to sets for processing, allowing flexible control over which fields are included or excluded from the API response.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ko/docs/tutorial/response-model.md#_snippet_5

LANGUAGE: Python
CODE:
```
@app.post("/items/include/", response_model=Item, response_model_include=["name", "description"])
async def create_item_include(item: Item):
    return item


@app.post("/items/exclude/", response_model=Item, response_model_exclude=["tax", "tags"])
async def create_item_exclude(item: Item):
```

----------------------------------------

TITLE: Returning JSONResponse in FastAPI
DESCRIPTION: Demonstrates explicitly returning a JSONResponse object in FastAPI. While FastAPI defaults to JSONResponse for dictionary returns, explicitly using it allows setting custom status codes or headers, ensuring the response is always application/json.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/advanced/custom-response.md#_snippet_6

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI
from fastapi.responses import JSONResponse

app = FastAPI()

@app.get("/items/{item_id}")
async def read_item(item_id: str):
    return JSONResponse(content={"item_id": item_id, "message": "Hello World"})
```

----------------------------------------

TITLE: Declaring Union Response Model in FastAPI (Python)
DESCRIPTION: This snippet demonstrates how to declare a FastAPI response model using `typing.Union` to allow for multiple possible response types, such as `PlaneItem` or `CarItem`. The `response_model` argument is set to `Union[PlaneItem, CarItem]`, ensuring the OpenAPI schema reflects the `anyOf` construct. It's crucial to list the more specific type first in the `Union`.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/extra-models.md#_snippet_13

LANGUAGE: Python
CODE:
```
from typing import Union

from fastapi import FastAPI
from pydantic import BaseModel

app = FastAPI()

class PlaneItem(BaseModel):
    size: int
    weight: float

class CarItem(BaseModel):
    brand: str
    model: str

@app.post("/items/", response_model=Union[PlaneItem, CarItem])
async def create_item(item: Union[PlaneItem, CarItem]):
    return item
```

----------------------------------------

TITLE: Using `Settings` Object in FastAPI Endpoint
DESCRIPTION: This FastAPI endpoint demonstrates how to access and use the `settings` object, which contains validated configuration values loaded from environment variables. The `info` endpoint returns the application name, admin email, and items per user, showcasing how these settings are integrated into the application logic.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/advanced/settings.md#_snippet_13

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI

app = FastAPI()


@app.get("/info")
async def info():
    return {
        "app_name": settings.app_name,
        "admin_email": settings.admin_email,
        "items_per_user": settings.items_per_user,
    }
```

----------------------------------------

TITLE: Returning a Generic Response Object in FastAPI
DESCRIPTION: Illustrates how to return a generic Response object directly from a FastAPI path operation. This allows full control over content, status_code, headers, and media_type, providing flexibility for custom response types not covered by specific Response subclasses.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/advanced/custom-response.md#_snippet_4

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI, Response

app = FastAPI()

@app.get("/legacy-data")
async def get_legacy_data():
    data = "This is some legacy data that is not JSON or HTML."
    return Response(content=data, media_type="text/plain", status_code=200)

@app.get("/custom-header")
async def get_custom_header():
    content = "Hello World"
    headers = {"X-Custom-Header": "SomeValue"}
    return Response(content=content, headers=headers, media_type="text/plain")
```

----------------------------------------

TITLE: Declaring Required Query Parameter with Validation in FastAPI
DESCRIPTION: This snippet shows how to make a query parameter 'q' required when using `Query`. By omitting the `default` argument in `Query`, the parameter becomes mandatory, while still applying `min_length` validation.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/tutorial/query-params-str-validations.md#_snippet_6

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI, Query

app = FastAPI()


@app.get("/items/")
async def read_items(q: str = Query(min_length=3)):
    return {"q": q}
```

----------------------------------------

TITLE: Importing Settings from a Separate Config Module
DESCRIPTION: Shows how to import the 'settings' object from a dedicated 'config.py' module into the main application file ('main.py'), allowing the application to access the configured values in a structured way.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/advanced/settings.md#_snippet_9

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI

from .config import settings


app = FastAPI()


@app.get("/info")
async def info():
    return {
        "app_name": settings.app_name,
        "admin_email": settings.admin_email,
        "items_per_user": settings.items_per_user,
    }
```