TITLE: Apply Title Template with Prefix/Suffix in Next.js
DESCRIPTION: This snippet demonstrates how to use `title.template` in Next.js to add a consistent prefix or suffix to titles defined in child route segments. It shows configuration in both `layout.tsx` and `layout.js`, requiring a `title.default` when a template is used, and how a child page's title is then augmented.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/04-functions/generate-metadata.mdx#_snippet_5

LANGUAGE: tsx
CODE:
```
import type { Metadata } from 'next'

export const metadata: Metadata = {
  title: {
    template: '%s | Acme',
    default: 'Acme', // a default is required when creating a template
  },
}
```

LANGUAGE: jsx
CODE:
```
export const metadata = {
  title: {
    template: '%s | Acme',
    default: 'Acme', // a default is required when creating a template
  },
}
```

LANGUAGE: tsx
CODE:
```
import type { Metadata } from 'next'

export const metadata: Metadata = {
  title: 'About',
}

// Output: <title>About | Acme</title>
```

LANGUAGE: jsx
CODE:
```
export const metadata = {
  title: 'About',
}

// Output: <title>About | Acme</title>
```

----------------------------------------

TITLE: Create Next.js App Router root layout
DESCRIPTION: Define the root layout component for the Next.js App Router, which is required and must contain `<html>` and `<body>` tags.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/01-installation.mdx#_snippet_3

LANGUAGE: tsx
CODE:
```
export default function RootLayout({
  children,
}: {
  children: React.ReactNode
}) {
  return (
    <html lang="en">
      <body>{children}</body>
    </html>
  )
}
```

LANGUAGE: jsx
CODE:
```
export default function RootLayout({ children }) {
  return (
    <html lang="en">
      <body>{children}</body>
    </html>
  )
}
```

----------------------------------------

TITLE: Implement Cached User Authentication in Data Access Layer
DESCRIPTION: This TypeScript snippet demonstrates how to implement a cached `getCurrentUser` helper function within the Data Access Layer. It uses `react`'s `cache` and `next/headers` `cookies` to securely retrieve and decrypt an authentication token, returning a `User` object. This approach centralizes user authentication, prevents sensitive data exposure to client components, and allows for efficient reuse across server components.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/data-security.mdx#_snippet_1

LANGUAGE: ts
CODE:
```
import { cache } from 'react'\nimport { cookies } from 'next/headers'\n\n// Cached helper methods makes it easy to get the same value in many places\n// without manually passing it around. This discourages passing it from Server\n// Component to Server Component which minimizes risk of passing it to a Client\n// Component.\nexport const getCurrentUser = cache(async () => {\n  const token = cookies().get('AUTH_TOKEN')\n  const decodedToken = await decryptAndValidate(token)\n  // Don't include secret tokens or private information as public fields.\n  // Use classes to avoid accidentally passing the whole object to the client.\n  return new User(decodedToken.id)\n})
```

----------------------------------------

TITLE: Create Next.js App with Default Template
DESCRIPTION: Command to start the interactive `create-next-app` process, prompting the user for project configuration details.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/06-cli/create-next-app.mdx#_snippet_2

LANGUAGE: bash
CODE:
```
npx create-next-app@latest
```

----------------------------------------

TITLE: Implementing Sequential Data Fetching with React Suspense
DESCRIPTION: Demonstrates a sequential data fetching pattern where the `<Playlists>` component fetches data only after the `<Artist>` component has completed its fetch, as `<Playlists>` depends on the `artistID` prop. React `<Suspense>` is used to show a fallback UI while data is being fetched, improving user experience and enabling streaming.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/07-fetching-data.mdx#_snippet_8

LANGUAGE: tsx
CODE:
```
export default async function Page({
  params,
}: {
  params: Promise<{ username: string }>
}) {
  const { username } = await params
  // Get artist information
  const artist = await getArtist(username)

  return (
    <>
      <h1>{artist.name}</h1>
      {/* Show fallback UI while the Playlists component is loading */}
      <Suspense fallback={<div>Loading...</div>}>
        {/* Pass the artist ID to the Playlists component */}
        <Playlists artistID={artist.id} />
      </Suspense>
    </>
  )
}

async function Playlists({ artistID }: { artistID: string }) {
  // Use the artist ID to fetch playlists
  const playlists = await getArtistPlaylists(artistID)

  return (
    <ul>
      {playlists.map((playlist) => (
        <li key={playlist.id}>{playlist.name}</li>
      ))}
    </ul>
  )
}
```

LANGUAGE: jsx
CODE:
```
export default async function Page({ params }) {
  const { username } = await params
  // Get artist information
  const artist = await getArtist(username)

  return (
    <>
      <h1>{artist.name}</h1>
      {/* Show fallback UI while the Playlists component is loading */}
      <Suspense fallback={<div>Loading...</div>}>
        {/* Pass the artist ID to the Playlists component */}
        <Playlists artistID={artist.id} />
      </Suspense>
    </>
  )
}

async function Playlists({ artistID }) {
  // Use the artist ID to fetch playlists
  const playlists = await getArtistPlaylists(artistID)

  return (
    <ul>
      {playlists.map((playlist) => (
        <li key={playlist.id}>{playlist.name}</li>
      ))}
    </ul>
  )
}
```

----------------------------------------

TITLE: Configure Next.js for Incremental Partial Prerendering
DESCRIPTION: This configuration enables incremental Partial Prerendering (PPR) in Next.js 15 by setting the `ppr` option to `incremental` within the `experimental` object in `next.config.js`. This is a crucial step for opting into PPR.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/05-config/01-next-config-js/ppr.mdx#_snippet_0

LANGUAGE: JavaScript
CODE:
```
/** @type {import('next').NextConfig} */
const nextConfig = {
  experimental: {
    ppr: 'incremental',
  },
}

module.exports = nextConfig
```

----------------------------------------

TITLE: Create a Submit Button with React useFormStatus Hook
DESCRIPTION: This snippet shows how to create a reusable `SubmitButton` component that leverages the `useFormStatus` hook. This hook provides access to the pending state of the nearest parent form, allowing the button to be disabled automatically during form submission. This approach requires nesting the button component inside the form.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/forms.mdx#_snippet_7

LANGUAGE: tsx
CODE:
```
'use client'

import { useFormStatus } from 'react-dom'

export function SubmitButton() {
  const { pending } = useFormStatus()

  return (
    <button disabled={pending} type="submit">
      Sign Up
    </button>
  )
}
```

LANGUAGE: jsx
CODE:
```
'use client'

import { useFormStatus } from 'react-dom'

export function SubmitButton() {
  const { pending } = useFormStatus()

  return (
    <button disabled={pending} type="submit">
      Sign Up
    </button>
  )
}
```

----------------------------------------

TITLE: Define Server Functions at File Top with `use server` (Next.js/React)
DESCRIPTION: The `use server` directive placed at the top of a file designates all functions within that file to be executed on the server side. This example demonstrates creating a `createUser` server function that interacts with a database client to persist user data.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/01-directives/use-server.mdx#_snippet_0

LANGUAGE: jsx
CODE:
```
'use server'
import { db } from '@/lib/db' // Your database client

export async function createUser(data) {
  const user = await db.user.create({ data })
  return user
}
```

----------------------------------------

TITLE: Set Document Title as a Simple String in Next.js
DESCRIPTION: This snippet demonstrates how to set the document title using a simple string within the `metadata` object in Next.js. It shows the configuration in `layout.js` or `page.js` and the resulting HTML output in the `<head>` section.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/04-functions/generate-metadata.mdx#_snippet_3

LANGUAGE: jsx
CODE:
```
export const metadata = {
  title: 'Next.js',
}
```

LANGUAGE: html
CODE:
```
<title>Next.js</title>
```

----------------------------------------

TITLE: Next.js Server Components for Data Fetching (App Router)
DESCRIPTION: Highlights the benefits of using Server Components for efficient server-side data fetching in the App Router.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/production-checklist.mdx#_snippet_6

LANGUAGE: APIDOC
CODE:
```
Concept: Server Components
  Purpose: Efficient server-side data fetching
```

----------------------------------------

TITLE: Install server-only Package to Prevent Client-Side Execution
DESCRIPTION: These commands demonstrate how to install the `server-only` package using different package managers (npm, yarn, pnpm). This package is crucial for marking modules that should strictly run on the server, ensuring that proprietary code or internal business logic is not inadvertently bundled or executed on the client.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/data-security.mdx#_snippet_9

LANGUAGE: Bash
CODE:
```
npm install server-only
```

LANGUAGE: Bash
CODE:
```
yarn add server-only
```

LANGUAGE: Bash
CODE:
```
pnpm add server-only
```

----------------------------------------

TITLE: Set Intrinsic Image Dimensions with width and height
DESCRIPTION: The `width` and `height` properties define the intrinsic pixel size of an image, crucial for browsers to infer the correct aspect ratio and prevent layout shifts during loading. These properties do not control the rendered size, which is managed by CSS. They are mandatory unless the image is statically imported or uses the `fill` property.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/02-components/image.mdx#_snippet_5

LANGUAGE: jsx
CODE:
```
<Image src="/profile.png" width={500} height={500} />
```

----------------------------------------

TITLE: Revalidating Cache Tag in Next.js Server Action
DESCRIPTION: Demonstrates how to use `revalidateTag` within a Next.js Server Action to invalidate cached data after an operation, such as adding a new post. This example shows the typical pattern of importing `revalidateTag` from 'next/cache' and calling it with a specific tag like 'posts' to ensure data freshness.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/04-functions/revalidateTag.mdx#_snippet_1

LANGUAGE: ts
CODE:
```
'use server'

import { revalidateTag } from 'next/cache'

export default async function submit() {
  await addPost()
  revalidateTag('posts')
}
```

LANGUAGE: js
CODE:
```
'use server'

import { revalidateTag } from 'next/cache'

export default async function submit() {
  await addPost()
  revalidateTag('posts')
}
```

----------------------------------------

TITLE: Next.js Link Component for Navigation
DESCRIPTION: Explains the usage of the <Link> component for client-side navigation and prefetching in both App Router and Pages Router environments.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/production-checklist.mdx#_snippet_0

LANGUAGE: APIDOC
CODE:
```
Component: <Link>
  Purpose: Client-side navigation and prefetching
  Applicability: App Router, Pages Router
```

----------------------------------------

TITLE: Run Next.js Development Server
DESCRIPTION: Provides commands to start the Next.js development server using npm, yarn, pnpm, or bun. The server will be accessible at http://localhost:3000.
SOURCE: https://github.com/vercel/next.js/blob/canary/packages/create-next-app/templates/default-tw/ts/README-template.md#_snippet_0

LANGUAGE: bash
CODE:
```
npm run dev
# or
yarn dev
# or
pnpm dev
# or
bun dev
```

----------------------------------------

TITLE: Invoke Server Function with HTML Form Action
DESCRIPTION: This snippet demonstrates how to trigger a Next.js Server Function by assigning it directly to the "action" prop of an HTML <form> element. The Server Function automatically receives the FormData object, allowing easy extraction of form inputs. This method is suitable for both Server and Client Components.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/08-updating-data.mdx#_snippet_5

LANGUAGE: tsx
CODE:
```
import { createPost } from '@/app/actions'

export function Form() {
  return (
    <form action={createPost}>
      <input type="text" name="title" />
      <input type="text" name="content" />
      <button type="submit">Create</button>
    </form>
  )
}
```

LANGUAGE: jsx
CODE:
```
import { createPost } from '@/app/actions'

export function Form() {
  return (
    <form action={createPost}>
      <input type="text" name="title" />
      <input type="text" name="content" />
      <button type="submit">Create</button>
    </form>
  )
}
```

LANGUAGE: ts
CODE:
```
'use server'

export async function createPost(formData: FormData) {
  const title = formData.get('title')
  const content = formData.get('content')

  // Update data
  // Revalidate cache
}
```

LANGUAGE: js
CODE:
```
'use server'

export async function createPost(formData) {
  const title = formData.get('title')
  const content = formData.get('content')

  // Update data
  // Revalidate cache
}
```

----------------------------------------

TITLE: Revalidate Cached Data On-Demand with `revalidateTag` in Server Actions
DESCRIPTION: Illustrates how to invalidate cached data associated with a specific tag using `revalidateTag`. This is typically done in a Server Action or Route Handler after an operation that modifies the underlying data, ensuring users see the most up-to-date information.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/04-functions/cacheTag.mdx#_snippet_2

LANGUAGE: tsx
CODE:
```
'use server'

import { revalidateTag } from 'next/cache'

export default async function submit() {
  await addPost()
  revalidateTag('my-data')
}
```

LANGUAGE: jsx
CODE:
```
'use server'

import { revalidateTag } from 'next/cache'

export default async function submit() {
  await addPost()
  revalidateTag('my-data')
}
```

----------------------------------------

TITLE: Secure Next.js API Route with Authentication and Role-Based Authorization
DESCRIPTION: This snippet demonstrates how to implement robust security for Next.js API Routes. It includes checks for user authentication using `getSession` and then verifies if the authenticated user possesses the required 'admin' role, returning 401 Unauthorized errors if conditions are not met.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/authentication.mdx#_snippet_34

LANGUAGE: typescript
CODE:
```
import { NextApiRequest, NextApiResponse } from 'next'

export default async function handler(
  req: NextApiRequest,
  res: NextApiResponse
) {
  const session = await getSession(req)

  // Check if the user is authenticated
  if (!session) {
    res.status(401).json({
      error: 'User is not authenticated',
    })
    return
  }

  // Check if the user has the 'admin' role
  if (session.user.role !== 'admin') {
    res.status(401).json({
      error: 'Unauthorized access: User does not have admin privileges.',
    })
    return
  }

  // Proceed with the route for authorized users
  // ... implementation of the API Route
}
```

LANGUAGE: javascript
CODE:
```
export default async function handler(req, res) {
  const session = await getSession(req)

  // Check if the user is authenticated
  if (!session) {
    res.status(401).json({
      error: 'User is not authenticated',
    })
    return
  }

  // Check if the user has the 'admin' role
  if (session.user.role !== 'admin') {
    res.status(401).json({
      error: 'Unauthorized access: User does not have admin privileges.',
    })
    return
  }

  // Proceed with the route for authorized users
  // ... implementation of the API Route
}
```

----------------------------------------

TITLE: Creating Dynamic Navigation Links with Next.js Link Component
DESCRIPTION: This code snippet illustrates how to use the Next.js `<Link>` component to create a list of navigable blog posts. It imports `Link` from `next/link` and iterates through a collection of posts, generating a list item for each. Each list item contains a `<Link>` component with a dynamically constructed `href` based on the post's slug, enabling efficient client-side navigation and prefetching.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/03-layouts-and-pages.mdx#_snippet_6

LANGUAGE: tsx
CODE:
```
import Link from 'next/link'

export default async function Post({ post }) {
  const posts = await getPosts()

  return (
    <ul>
      {posts.map((post) => (
        <li key={post.slug}>
          <Link href={`/blog/${post.slug}`}>{post.title}</Link>
        </li>
      ))}
    </ul>
  )
}
```

LANGUAGE: jsx
CODE:
```
import Link from 'next/link'

export default async function Post({ post }) {
  const posts = await getPosts()

  return (
    <ul>
      {posts.map((post) => (
        <li key={post.slug}>
          <Link href={`/blog/${post.slug}`}>{post.title}</Link>
        </li>
      ))}
    </ul>
  )
}
```

----------------------------------------

TITLE: Configure Module Path Aliases with Base URL
DESCRIPTION: In addition to `baseUrl`, the `paths` option can be used within `compilerOptions` in `tsconfig.json` or `jsconfig.json` to create specific module aliases. This configuration maps `@/styles/*` and `@/components/*` to directories relative to the `baseUrl` location, further simplifying import paths.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/01-installation.mdx#_snippet_13

LANGUAGE: json
CODE:
```
{
  "compilerOptions": {
    "baseUrl": "src/",
    "paths": {
      "@/styles/*": ["styles/*"],
      "@/components/*": ["components/*"]
    }
  }
}
```

----------------------------------------

TITLE: Passing Data from Server to Client Components via Props
DESCRIPTION: This snippet demonstrates how to pass data from a Server Component to a Client Component using props. It shows a Server Component fetching post data asynchronously and then rendering a 'LikeButton' Client Component, passing the fetched 'likes' count as a prop. Props passed to Client Components must be serializable by React.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/05-server-and-client-components.mdx#_snippet_4

LANGUAGE: tsx
CODE:
```
import LikeButton from '@/app/ui/like-button'
import { getPost } from '@/lib/data'

export default async function Page({ params }: { params: { id: string } }) {
  const post = await getPost(params.id)

  return <LikeButton likes={post.likes} />
}
```

LANGUAGE: jsx
CODE:
```
import LikeButton from '@/app/ui/like-button'
import { getPost } from '@/lib/data'

export default async function Page({ params }) {
  const post = await getPost(params.id)

  return <LikeButton likes={post.likes} />
}
```

LANGUAGE: tsx
CODE:
```
'use client'

export default function LikeButton({ likes }: { likes: number }) {
  // ...
}
```

LANGUAGE: jsx
CODE:
```
'use client'

export default function LikeButton({ likes }) {
  // ...
}
```

----------------------------------------

TITLE: Using `useSearchParams` in Next.js App Directory in JSX
DESCRIPTION: This snippet shows the simplified usage of `useSearchParams` from `next/navigation` when a component is exclusively used within the Next.js `app` directory. In this context, the `next/compat/router` is no longer needed, and `searchParams` are immediately available, streamlining the code.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/04-api-reference/03-functions/use-router.mdx#_snippet_21

LANGUAGE: jsx
CODE:
```
import { useSearchParams } from 'next/navigation'
const MyComponent = () => {
  const searchParams = useSearchParams()
  // As this component is only used in `app/`, the compat router can be removed.
  const search = searchParams.get('search')
  // ...
}
```

----------------------------------------

TITLE: Importing Global Styles in Root Layout (App Router - TypeScript)
DESCRIPTION: Import the global CSS file (`./globals.css`) into your root layout file (`app/layout.tsx`) to apply styles across all routes in your Next.js application when using the App Router. This ensures Tailwind's styles are available throughout your project.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/tailwind-css.mdx#_snippet_3

LANGUAGE: typescript
CODE:
```
import type { Metadata } from 'next'

// These styles apply to every route in the application
import './globals.css'

export const metadata: Metadata = {
  title: 'Create Next App',
  description: 'Generated by create next app',
}

export default function RootLayout({
  children,
}: {
  children: React.ReactNode
}) {
  return (
    <html lang="en">
      <body>{children}</body>
    </html>
  )
}
```

----------------------------------------

TITLE: Run Next.js Development Server
DESCRIPTION: Commands to start the local development server for a Next.js application using various package managers like npm, yarn, pnpm, or bun. The server will typically run on http://localhost:3000.
SOURCE: https://github.com/vercel/next.js/blob/canary/packages/create-next-app/templates/app-api/js/README-template.md#_snippet_0

LANGUAGE: bash
CODE:
```
npm run dev
```

LANGUAGE: bash
CODE:
```
yarn dev
```

LANGUAGE: bash
CODE:
```
pnpm dev
```

LANGUAGE: bash
CODE:
```
bun dev
```

----------------------------------------

TITLE: Next.js App Router Routing File Conventions
DESCRIPTION: Details the specific file conventions used within the Next.js App Router for defining layouts, pages, loading states, error boundaries, API routes, and parallel routes.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/02-project-structure.mdx#_snippet_2

LANGUAGE: APIDOC
CODE:
```
layout: .js .jsx .tsx | Layout
page: .js .jsx .tsx | Page
loading: .js .jsx .tsx | Loading UI
not-found: .js .jsx .tsx | Not found UI
error: .js .jsx .tsx | Error UI
global-error: .js .jsx .tsx | Global error UI
route: .js .ts | API endpoint
template: .js .jsx .tsx | Re-rendered layout
default: .js .jsx .tsx | Parallel route fallback page
```

----------------------------------------

TITLE: Render Third-Party Client Components within an Existing Next.js Client Component
DESCRIPTION: This example demonstrates how to successfully integrate a third-party component, such as <Carousel />, which relies on client-only features like useState, by using it inside an existing Next.js Client Component. This approach ensures the component functions correctly and avoids errors that would occur if directly used within a Server Component.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/05-server-and-client-components.mdx#_snippet_9

LANGUAGE: tsx
CODE:
```
'use client'

import { useState } from 'react'
import { Carousel } from 'acme-carousel'

export default function Gallery() {
  const [isOpen, setIsOpen] = useState(false)

  return (
    <div>
      <button onClick={() => setIsOpen(true)}>View pictures</button>
      {/* Works, since Carousel is used within a Client Component */}
      {isOpen && <Carousel />}
    </div>
  )
}
```

LANGUAGE: jsx
CODE:
```
'use client'

import { useState } from 'react'
import { Carousel } from 'acme-carousel'

export default function Gallery() {
  const [isOpen, setIsOpen] = useState(false)

  return (
    <div>
      <button onClick={() => setIsOpen(true)}>View pictures</button>
      {/*  Works, since Carousel is used within a Client Component */}
      {isOpen && <Carousel />}
    </div>
  )
}
```

----------------------------------------

TITLE: Next.js Tainting for Sensitive Data Protection
DESCRIPTION: Prevent sensitive data from being exposed to the client by tainting data objects or specific values in Next.js applications.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/production-checklist.mdx#_snippet_19

LANGUAGE: APIDOC
CODE:
```
Next.js Tainting:
  Purpose: Prevent sensitive server-side data from reaching the client.
  Mechanism: Mark data objects or specific values as 'tainted'.
```

----------------------------------------

TITLE: Install Next.js automatically with create-next-app
DESCRIPTION: Use the `create-next-app` CLI to quickly scaffold a new Next.js project with interactive prompts for configuration.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/01-installation.mdx#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app@latest
```

LANGUAGE: txt
CODE:
```
What is your project named? my-app
Would you like to use TypeScript? No / Yes
Would you like to use ESLint? No / Yes
Would you like to use Tailwind CSS? No / Yes
Would you like your code inside a \`src/\` directory? No / Yes
Would you like to use App Router? (recommended) No / Yes
Would you like to use Turbopack for \`next dev\`?  No / Yes
Would you like to customize the import alias (\`@/*\` by default)? No / Yes
What import alias would you like configured? @/*
```

----------------------------------------

TITLE: Next.js Server Component Fetching Data and Using Client Component
DESCRIPTION: This example demonstrates a Next.js Server Component (`Page`) that asynchronously fetches data and passes it as props to a Client Component (`LikeButton`). It illustrates how Server Components can handle data fetching efficiently on the server while delegating interactive UI elements to Client Components.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/05-server-and-client-components.mdx#_snippet_0

LANGUAGE: tsx
CODE:
```
import LikeButton from '@/app/ui/like-button'
import { getPost } from '@/lib/data'

export default async function Page({ params }: { params: { id: string } }) {
  const post = await getPost(params.id)

  return (
    <div>
      <main>
        <h1>{post.title}</h1>
        {/* ... */}
        <LikeButton likes={post.likes} />
      </main>
    </div>
  )
}
```

LANGUAGE: jsx
CODE:
```
import LikeButton from '@/app/ui/like-button'
import { getPost } from '@/lib/data'

export default async function Page({ params }) {
  const post = await getPost(params.id)

  return (
    <div>
      <main>
        <h1>{post.title}</h1>
        {/* ... */}
        <LikeButton likes={post.likes} />
      </main>
    </div>
  )
}
```

----------------------------------------

TITLE: Creating Client Components with 'use client' Directive
DESCRIPTION: This snippet demonstrates how to declare a React component as a Client Component in Next.js by adding the 'use client' directive at the top of the file, above imports. It shows a simple interactive counter component that uses React's useState hook, highlighting the boundary between Server and Client module graphs.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/05-server-and-client-components.mdx#_snippet_2

LANGUAGE: tsx
CODE:
```
'use client'

import { useState } from 'react'

export default function Counter() {
  const [count, setCount] = useState(0)

  return (
    <div>
      <p>{count} likes</p>
      <button onClick={() => setCount(count + 1)}>Click me</button>
    </div>
  )
}
```

LANGUAGE: jsx
CODE:
```
'use client'

import { useState } from 'react'

export default function Counter() {
  const [count, setCount] = useState(0)

  return (
    <div>
      <p>{count} likes</p>
      <button onClick={() => setCount(count + 1)}>Click me</button>
    </div>
  )
}
```

----------------------------------------

TITLE: Run Next.js Development Server
DESCRIPTION: Commands to start the Next.js development server using various package managers. The server will be accessible locally at http://localhost:3000, and the page will auto-update upon file edits.
SOURCE: https://github.com/vercel/next.js/blob/canary/packages/create-next-app/templates/default/ts/README-template.md#_snippet_0

LANGUAGE: bash
CODE:
```
npm run dev
# or
yarn dev
# or
pnpm dev
# or
bun dev
```

----------------------------------------

TITLE: Consume User Promise with React `use` Hook in Client Component
DESCRIPTION: This snippet illustrates how a Client Component (`Profile`) can consume the `userPromise` provided via the `UserContext`. It uses the custom `useUser` hook to retrieve the promise and then unwraps the promise's value using React's `use` hook, allowing the component to suspend until the data is resolved.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/single-page-applications.mdx#_snippet_2

LANGUAGE: tsx
CODE:
```
'use client'

import { use } from 'react'
import { useUser } from './user-provider'

export function Profile() {
  const { userPromise } = useUser()
  const user = use(userPromise)

  return '...'
}
```

LANGUAGE: jsx
CODE:
```
'use client'

import { use } from 'react'
import { useUser } from './user-provider'

export function Profile() {
  const { userPromise } = useUser()
  const user = use(userPromise)

  return '...'
}
```

----------------------------------------

TITLE: Next.js App Router Server-Side Rendering with `fetch()` and `no-store` Cache
DESCRIPTION: Illustrates how to achieve server-side rendering behavior in the Next.js App Router, similar to `getServerSideProps`. Data is fetched directly within an `async` Server Component using `fetch()` with `cache: 'no-store'`, ensuring data is refetched on every request and reducing client-side JavaScript.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/migrating/app-router-migration.mdx#_snippet_16

LANGUAGE: tsx
CODE:
```
// `app` directory

// This function can be named anything
async function getProjects() {
  const res = await fetch(`https://...`, { cache: 'no-store' })
  const projects = await res.json()

  return projects
}

export default async function Dashboard() {
  const projects = await getProjects()

  return (
    <ul>
      {projects.map((project) => (
        <li key={project.id}>{project.name}</li>
      ))}
    </ul>
  )
}
```

LANGUAGE: jsx
CODE:
```
// `app` directory

// This function can be named anything
async function getProjects() {
  const res = await fetch(`https://...`, { cache: 'no-store' })
  const projects = await res.json()

  return projects
}

export default async function Dashboard() {
  const projects = await getProjects()

  return (
    <ul>
      {projects.map((project) => (
        <li key={project.id}>{project.name}</li>
      ))}
    </ul>
  )
}
```

----------------------------------------

TITLE: Creating a Next.js Page Component
DESCRIPTION: Demonstrates how to define a page in Next.js by creating a `page` file inside the `app` directory and default exporting a React component. This component will render UI for a specific route.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/03-layouts-and-pages.mdx#_snippet_0

LANGUAGE: tsx
CODE:
```
export default function Page() {
  return <h1>Hello Next.js!</h1>
}
```

LANGUAGE: jsx
CODE:
```
export default function Page() {
  return <h1>Hello Next.js!</h1>
}
```

----------------------------------------

TITLE: Configure Next.js Build and Start Scripts in package.json
DESCRIPTION: This JSON snippet illustrates the essential `scripts` configuration within a `package.json` file for a Next.js application. It defines commands for development (`dev`), production build (`build`), and starting the production server (`start`), which are crucial for deploying Next.js as a Node.js server.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/16-deploying.mdx#_snippet_0

LANGUAGE: JSON
CODE:
```
{
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start"
  }
}
```

----------------------------------------

TITLE: Dynamically Load External Library (fuse.js) in Next.js App Router
DESCRIPTION: Illustrates how to dynamically load an external JavaScript library like `fuse.js` on demand within a Next.js App Router component. The library is imported only when needed (e.g., on user input), reducing the initial bundle size. The component uses the `'use client'` directive.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/lazy-loading.mdx#_snippet_3

LANGUAGE: JSX
CODE:
```
'use client'

import { useState } from 'react'

const names = ['Tim', 'Joe', 'Bel', 'Lee']

export default function Page() {
  const [results, setResults] = useState()

  return (
    <div>
      <input
        type="text"
        placeholder="Search"
        onChange={async (e) => {
          const { value } = e.currentTarget
          // Dynamically load fuse.js
          const Fuse = (await import('fuse.js')).default
          const fuse = new Fuse(names)

          setResults(fuse.search(value))
        }}
      />
      <pre>Results: {JSON.stringify(results, null, 2)}</pre>
    </div>
  )
}
```

----------------------------------------

TITLE: Navigate with Next.js Link Component
DESCRIPTION: Demonstrates basic client-side navigation in Next.js using the `Link` component to create links to static pages like Home, About Us, and a specific blog post.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/03-building-your-application/01-routing/03-linking-and-navigating.mdx#_snippet_0

LANGUAGE: jsx
CODE:
```
import Link from 'next/link'

function Home() {
  return (
    <ul>
      <li>
        <Link href="/">Home</Link>
      </li>
      <li>
        <Link href="/about">About Us</Link>
      </li>
      <li>
        <Link href="/blog/hello-world">Blog Post</Link>
      </li>
    </ul>
  )
}

export default Home
```

----------------------------------------

TITLE: Accessing Runtime Environment Variables in App Router
DESCRIPTION: This example demonstrates how to safely access environment variables at runtime within the Next.js App Router. By using dynamic rendering features, such as importing `connection` from `next/server` or other Dynamic APIs (cookies, headers), the environment variable `process.env.MY_VALUE` is evaluated at request time on the server, allowing for different values across environments without rebuilding.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/environment-variables.mdx#_snippet_11

LANGUAGE: tsx
CODE:
```
import { connection } from 'next/server'

export default async function Component() {
  await connection()
  // cookies, headers, and other Dynamic APIs
  // will also opt into dynamic rendering, meaning
  // this env variable is evaluated at runtime
  const value = process.env.MY_VALUE
  // ...
}
```

LANGUAGE: jsx
CODE:
```
import { connection } from 'next/server'

export default async function Component() {
  await connection()
  // cookies, headers, and other Dynamic APIs
  // will also opt into dynamic rendering, meaning
  // this env variable is evaluated at runtime
  const value = process.env.MY_VALUE
  // ...
}
```

----------------------------------------

TITLE: Next.js Image Component `src` Prop Usage Examples
DESCRIPTION: Provides code examples demonstrating various ways to define the `src` prop for the `next/image` component, including relative paths, external URLs, and importing static image files.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/02-components/image.mdx#_snippet_3

LANGUAGE: jsx
CODE:
```
<Image src="/profile.png" />
```

LANGUAGE: jsx
CODE:
```
<Image src="https://example.com/profile.png" />
```

LANGUAGE: jsx
CODE:
```
import profile from './profile.png'

export default function Page() {
  return <Image src={profile} />
}
```

----------------------------------------

TITLE: Revalidate Cache Entries by Tag
DESCRIPTION: Shows how to use `revalidateTag` to purge cache entries associated with a specific tag. This function can be employed in Route Handlers for third-party events or Server Actions for user interactions to invalidate the cache.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/caching.mdx#_snippet_22

LANGUAGE: jsx
CODE:
```
revalidateTag('a')
```

----------------------------------------

TITLE: Using Next.js Image Component for Display
DESCRIPTION: Illustrates the basic usage of the Next.js `Image` component to embed an image. It specifies the image source, alternative text for accessibility, and explicit width and height for layout shift prevention and optimization.
SOURCE: https://github.com/vercel/next.js/blob/canary/test/e2e/app-dir/mdx/app/image/page.mdx#_snippet_1

LANGUAGE: JSX
CODE:
```
<Image src="/test.jpg" alt="Next.js Logo" width={180} height={37} />
```

----------------------------------------

TITLE: Implement Various HTTP Methods in Route Handlers
DESCRIPTION: Shows how to define handlers for all supported HTTP methods (GET, HEAD, POST, PUT, DELETE, PATCH, OPTIONS) in a Next.js route file. Next.js automatically handles OPTIONS if not explicitly defined.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/03-file-conventions/route.mdx#_snippet_1

LANGUAGE: ts
CODE:
```
export async function GET(request: Request) {}

export async function HEAD(request: Request) {}

export async function POST(request: Request) {}

export async function PUT(request: Request) {}

export async function DELETE(request: Request) {}

export async function PATCH(request: Request) {}

// If `OPTIONS` is not defined, Next.js will automatically implement `OPTIONS` and set the appropriate Response `Allow` header depending on the other methods defined in the Route Handler.
export async function OPTIONS(request: Request) {}
```

LANGUAGE: js
CODE:
```
export async function GET(request) {}

export async function HEAD(request) {}

export async function POST(request) {}

export async function PUT(request) {}

export async function DELETE(request) {}

export async function PATCH(request) {}

// If `OPTIONS` is not defined, Next.js will automatically implement `OPTIONS` and set the appropriate Response `Allow` header depending on the other methods defined in the Route Handler.
export async function OPTIONS(request) {}
```

----------------------------------------

TITLE: Implement Role-Based Access Control (RBAC) in Next.js Server Components
DESCRIPTION: This snippet demonstrates how to use Server Components in Next.js for role-based access control. It shows how to verify a user's session and conditionally render different dashboard components (Admin or User) based on their assigned role, redirecting unauthorized users to a login page.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/authentication.mdx#_snippet_27

LANGUAGE: tsx
CODE:
```
import { verifySession } from '@/app/lib/dal'

export default function Dashboard() {
  const session = await verifySession()
  const userRole = session?.user?.role // Assuming 'role' is part of the session object

  if (userRole === 'admin') {
    return <AdminDashboard />
  } else if (userRole === 'user') {
    return <UserDashboard />
  } else {
    redirect('/login')
  }
}
```

LANGUAGE: jsx
CODE:
```
import { verifySession } from '@/app/lib/dal'

export default function Dashboard() {
  const session = await verifySession()
  const userRole = session.role // Assuming 'role' is part of the session object

  if (userRole === 'admin') {
    return <AdminDashboard />
  } else if (userRole === 'user') {
    return <UserDashboard />
  } else {
    redirect('/login')
  }
}
```

----------------------------------------

TITLE: Defining a Next.js Layout Component
DESCRIPTION: Illustrates how to create a shared UI layout in Next.js by defining a `layout` file in the `app` directory. The layout component accepts a `children` prop to render nested pages or layouts, preserving state and interactivity on navigation. Root layouts are required and must include `html` and `body` tags.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/03-layouts-and-pages.mdx#_snippet_1

LANGUAGE: tsx
CODE:
```
export default function DashboardLayout({
  children,
}: {
  children: React.ReactNode
}) {
  return (
    <html lang="en">
      <body>
        {/* Layout UI */}
        {/* Place children where you want to render a page or nested layout */}
        <main>{children}</main>
      </body>
    </html>
  )
}
```

LANGUAGE: jsx
CODE:
```
export default function DashboardLayout({ children }) {
  return (
    <html lang="en">
      <body>
        {/* Layout UI */}
        {/* Place children where you want to render a page or nested layout */}
        <main>{children}</main>
      </body>
    </html>
  )
}
```

----------------------------------------

TITLE: Read HTTP Cookies in Next.js Server Component
DESCRIPTION: This code snippet demonstrates how to import and use the `cookies` function from `next/headers` to read an incoming HTTP cookie named 'theme' within a Next.js Server Component.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/04-functions/cookies.mdx#_snippet_0

LANGUAGE: tsx
CODE:
```
import { cookies } from 'next/headers'

export default async function Page() {
  const cookieStore = await cookies()
  const theme = cookieStore.get('theme')
  return '...'
}
```

LANGUAGE: js
CODE:
```
import { cookies } from 'next/headers'

export default async function Page() {
  const cookieStore = await cookies()
  const theme = cookieStore.get('theme')
  return '...'
}
```

----------------------------------------

TITLE: Fetch Data in Next.js Server Components with `fetch` API
DESCRIPTION: This snippet demonstrates how to fetch data in a Next.js Server Component using the native `fetch` API. The component is made asynchronous, and the `fetch` call is awaited to retrieve and parse JSON data, which is then rendered as a list of posts.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/07-fetching-data.mdx#_snippet_0

LANGUAGE: tsx
CODE:
```
export default async function Page() {
  const data = await fetch('https://api.vercel.app/blog')
  const posts = await data.json()
  return (
    <ul>
      {posts.map((post) => (
        <li key={post.id}>{post.title}</li>
      ))}
    </ul>
  )
}
```

LANGUAGE: jsx
CODE:
```
export default async function Page() {
  const data = await fetch('https://api.vercel.app/blog')
  const posts = await data.json()
  return (
    <ul>
      {posts.map((post) => (
        <li key={post.id}>{post.title}</li>
      ))}
    </ul>
  )
}
```

----------------------------------------

TITLE: Next.js `getStaticPaths` and `getStaticProps` with `fallback: false`
DESCRIPTION: This example demonstrates pre-rendering blog posts using `getStaticPaths` and `getStaticProps` in Next.js. It fetches a list of posts from an API, generates static paths for each, and sets `fallback: false` to ensure that only these specific paths are built at compile time, resulting in a 404 for any unlisted routes. `getStaticProps` then fetches the detailed data for each post.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/04-api-reference/03-functions/get-static-paths.mdx#_snippet_2

LANGUAGE: jsx
CODE:
```
function Post({ post }) {
  // Render post...
}

// This function gets called at build time
export async function getStaticPaths() {
  // Call an external API endpoint to get posts
  const res = await fetch('https://.../posts')
  const posts = await res.json()

  // Get the paths we want to pre-render based on posts
  const paths = posts.map((post) => ({
    params: { id: post.id },
  }))

  // We'll pre-render only these paths at build time.
  // { fallback: false } means other routes should 404.
  return { paths, fallback: false }
}

// This also gets called at build time
export async function getStaticProps({ params }) {
  // params contains the post `id`.
  // If the route is like /posts/1, then params.id is 1
  const res = await fetch(`https://.../posts/${params.id}`)
  const post = await res.json()

  // Pass post data to the page via props
  return { props: { post } }
}

export default Post
```

----------------------------------------

TITLE: Next.js Dynamic Route File Conventions
DESCRIPTION: Outlines the file naming conventions for defining dynamic route segments in Next.js, including single dynamic segments, catch-all segments, and optional catch-all segments.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/02-project-structure.mdx#_snippet_4

LANGUAGE: APIDOC
CODE:
```
`[folder]`: Dynamic route segment
`[...folder]`: Catch-all route segment
`[[...folder]]`: Optional catch-all route segment
```

----------------------------------------

TITLE: Call a Server Action from a Next.js Client Component
DESCRIPTION: This snippet shows how to import and invoke a Server Action directly from a Next.js Client Component. It demonstrates the simplified pattern for triggering server-side logic from the client without needing to define separate API routes.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/single-page-applications.mdx#_snippet_8

LANGUAGE: tsx
CODE:
```
'use client'

import { create } from './actions'

export function Button() {
  return <button onClick={() => create()}>Create</button>
}
```

LANGUAGE: jsx
CODE:
```
'use client'

import { create } from './actions'

export function Button() {
  return <button onClick={() => create()}>Create</button>
}
```

----------------------------------------

TITLE: Implement Global Error Boundary in Next.js Root Layout (TS/JS)
DESCRIPTION: This example shows how to define a global error boundary using `global-error.tsx` or `global-error.js` in the root `app` directory of a Next.js application. This component handles errors that bubble up to the root layout, replacing the entire application UI, and must include its own `<html>` and `<body>` tags.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/10-error-handling.mdx#_snippet_6

LANGUAGE: tsx
CODE:
```
'use client' // Error boundaries must be Client Components

export default function GlobalError({
  error,
  reset,
}: {
  error: Error & { digest?: string }
  reset: () => void
}) {
  return (
    // global-error must include html and body tags
    <html>
      <body>
        <h2>Something went wrong!</h2>
        <button onClick={() => reset()}>Try again</button>
      </body>
    </html>
  )
}
```

LANGUAGE: jsx
CODE:
```
'use client' // Error boundaries must be Client Components

export default function GlobalError({ error, reset }) {
  return (
    // global-error must include html and body tags
    <html>
      <body>
        <h2>Something went wrong!</h2>
        <button onClick={() => reset()}>Try again</button>
      </body>
    </html>
  )
}
```

----------------------------------------

TITLE: Revalidate Data and Re-render Route Segments by Path
DESCRIPTION: Provides an example of `revalidatePath`, which simultaneously revalidates the Data Cache and invalidates the Full Route Cache, leading to a re-render of route segments below the specified path. It's useful in Route Handlers for external events or Server Actions for user-driven updates.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/caching.mdx#_snippet_23

LANGUAGE: jsx
CODE:
```
revalidatePath('/')
```

----------------------------------------

TITLE: Handle Async `params` and `searchParams` in Next.js Synchronous Layouts
DESCRIPTION: This snippet demonstrates how to handle `params` and `searchParams` (which are Promises) within synchronous Next.js layouts. The `use` hook from React is employed to unwrap these Promises and access their underlying values.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/upgrading/version-15.mdx#_snippet_10

LANGUAGE: tsx
CODE:
```
// Before
type Params = { slug: string }

export default function Layout({
  children,
  params,
}: {
  children: React.ReactNode
  params: Params
}) {
  const { slug } = params
}

// After
import { use } from 'react'

type Params = Promise<{ slug: string }>

export default function Layout(props: {
  children: React.ReactNode
  params: Params
}) {
  const params = use(props.params)
  const slug = params.slug
}
```

LANGUAGE: jsx
CODE:
```
// Before
export default function Layout({ children, params }) {
  const { slug } = params
}

// After
import { use } from 'react'
export default async function Layout(props) {
  const params = use(props.params)
  const slug = params.slug
}
```

----------------------------------------

TITLE: Resolve Next.js Crypto API SSR Issue with React Suspense Fallback
DESCRIPTION: This solution demonstrates how to wrap a Client Component that synchronously calls a crypto API (e.g., `crypto.randomUUID()`) with a React `Suspense` boundary. By providing a `fallback` UI, Next.js can prerender a placeholder during Server-Side Rendering (SSR) and then hydrate the actual component with a unique random value once the page is requested by the user, ensuring the value is not fixed.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/next-prerender-crypto-client.mdx#_snippet_0

LANGUAGE: jsx
CODE:
```
'use client'

export default function Page() {
  const newBlogId = crypto.randomUUID()
  return <BlogAuthoringView id={newBlogId} />
}
```

LANGUAGE: jsx
CODE:
```
"use client"

import { Suspense } from 'react'

export default function Page() {
  return (
    <Suspense fallback={<BlogAuthorSkeleton />}>
      <DynamicAuthoringView />
    </Suspense>
  )
}

function BlogAuthorSkeleton() {
  ...
}

function DynamicAuthoringView() {
  const newBlogId = crypto.randomUUID()
  return <BlogAuthoringView id={newBlogId} />
}
```

----------------------------------------

TITLE: Basic Usage of Next.js Link Component
DESCRIPTION: Demonstrates how to import and use the `Link` component for simple client-side navigation to a dashboard route in Next.js applications, applicable for both App Router and Pages Router.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/02-components/link.mdx#_snippet_0

LANGUAGE: tsx
CODE:
```
import Link from 'next/link'

export default function Page() {
  return <Link href="/dashboard">Dashboard</Link>
}
```

LANGUAGE: jsx
CODE:
```
import Link from 'next/link'

export default function Page() {
  return <Link href="/dashboard">Dashboard</Link>
}
```

----------------------------------------

TITLE: Basic Usage of create-next-app CLI
DESCRIPTION: Shows the fundamental command structure for initializing a Next.js project using `create-next-app` with optional project name and configuration flags.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/06-cli/create-next-app.mdx#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app@latest [project-name] [options]
```

----------------------------------------

TITLE: Calling revalidateTag to invalidate cache entries in Next.js
DESCRIPTION: `revalidateTag` is used to invalidate cache entries associated with a specific tag. It should be called within a Route Handler or Server Action after a data mutation event. This example demonstrates revalidating all entries tagged 'user' after an update.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/09-caching-and-revalidating.mdx#_snippet_6

LANGUAGE: tsx
CODE:
```
import { revalidateTag } from 'next/cache'

export async function updateUser(id: string) {
  // Mutate data
  revalidateTag('user')
}
```

LANGUAGE: jsx
CODE:
```
import { revalidateTag } from 'next/cache'

export async function updateUser(id) {
  // Mutate data
  revalidateTag('user')
}
```

----------------------------------------

TITLE: generateStaticParams Return Type
DESCRIPTION: Describes the expected return type of `generateStaticParams`, which is an array of objects where each object represents the populated dynamic segments for a single route, with property names matching segment names and values being the segment content.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/04-functions/generate-static-params.mdx#_snippet_2

LANGUAGE: APIDOC
CODE:
```
generateStaticParams should return an array of objects where each object represents the populated dynamic segments of a single route.

- Each property in the object is a dynamic segment to be filled in for the route.
- The properties name is the segment's name, and the properties value is what that segment should be filled in with.

Example Route: /product/[id]
  Return Type: { id: string }[]
Example Route: /products/[category]/[product]
  Return Type: { category: string, product: string }[]
Example Route: /products/[...slug]
  Return Type: { slug: string[] }[]
```

----------------------------------------

TITLE: Configure CORS Headers in Next.js Middleware
DESCRIPTION: This snippet demonstrates how to set CORS headers in Next.js Middleware to allow cross-origin requests. It handles both simple and preflighted (OPTIONS) requests, checking if the request origin is allowed and setting appropriate 'Access-Control-Allow-Origin', 'Access-Control-Allow-Methods', and 'Access-Control-Allow-Headers'.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/03-file-conventions/middleware.mdx#_snippet_19

LANGUAGE: tsx
CODE:
```
import { NextRequest, NextResponse } from 'next/server'

const allowedOrigins = ['https://acme.com', 'https://my-app.org']

const corsOptions = {
  'Access-Control-Allow-Methods': 'GET, POST, PUT, DELETE, OPTIONS',
  'Access-Control-Allow-Headers': 'Content-Type, Authorization',
}

export function middleware(request: NextRequest) {
  // Check the origin from the request
  const origin = request.headers.get('origin') ?? ''
  const isAllowedOrigin = allowedOrigins.includes(origin)

  // Handle preflighted requests
  const isPreflight = request.method === 'OPTIONS'

  if (isPreflight) {
    const preflightHeaders = {
      ...(isAllowedOrigin && { 'Access-Control-Allow-Origin': origin }),
      ...corsOptions,
    }
    return NextResponse.json({}, { headers: preflightHeaders })
  }

  // Handle simple requests
  const response = NextResponse.next()

  if (isAllowedOrigin) {
    response.headers.set('Access-Control-Allow-Origin', origin)
  }

  Object.entries(corsOptions).forEach(([key, value]) => {
    response.headers.set(key, value)
  })

  return response
}

export const config = {
  matcher: '/api/:path*',
}
```

LANGUAGE: jsx
CODE:
```
import { NextResponse } from 'next/server'

const allowedOrigins = ['https://acme.com', 'https://my-app.org']

const corsOptions = {
  'Access-Control-Allow-Methods': 'GET, POST, PUT, DELETE, OPTIONS',
  'Access-Control-Allow-Headers': 'Content-Type, Authorization',
}

export function middleware(request) {
  // Check the origin from the request
  const origin = request.headers.get('origin') ?? ''
  const isAllowedOrigin = allowedOrigins.includes(origin)

  // Handle preflighted requests
  const isPreflight = request.method === 'OPTIONS'

  if (isPreflight) {
    const preflightHeaders = {
      ...(isAllowedOrigin && { 'Access-Control-Allow-Origin': origin }),
      ...corsOptions,
    }
    return NextResponse.json({}, { headers: preflightHeaders })
  }

  // Handle simple requests
  const response = NextResponse.next()

  if (isAllowedOrigin) {
    response.headers.set('Access-Control-Allow-Origin', origin)
  }

  Object.entries(corsOptions).forEach(([key, value]) => {
    response.headers.set(key, value)
  })

  return response
}

export const config = {
  matcher: '/api/:path*',
}
```

----------------------------------------

TITLE: useParams Hook Return Value Reference
DESCRIPTION: Describes the object returned by the `useParams` hook, which contains the current route's filled-in dynamic parameters. It explains the structure of the returned object, including property names, values (string or array of strings), and behavior for routes without dynamic parameters or in Pages Router, along with examples.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/04-functions/use-params.mdx#_snippet_2

LANGUAGE: APIDOC
CODE:
```
useParams() returns: object
  Properties:
    - Each property corresponds to an active dynamic segment.
    - Property name: The segment's name.
    - Property value: What the segment is filled in with (string or array of strings).
  Behavior:
    - If no dynamic parameters: Returns an empty object {}.
    - In Pages Router: Returns null on initial render, then updates with properties.
  Examples:
    - Route: app/shop/page.js, URL: /shop, useParams(): {}
    - Route: app/shop/[slug]/page.js, URL: /shop/1, useParams(): { slug: '1' }
    - Route: app/shop/[tag]/[item]/page.js, URL: /shop/1/2, useParams(): { tag: '1', item: '2' }
    - Route: app/shop/[...slug]/page.js, URL: /shop/1/2, useParams(): { slug: ['1', '2'] }
```

----------------------------------------

TITLE: Starting Next.js Development Server (Bash)
DESCRIPTION: This command starts the Next.js development server, making the application accessible locally, typically at `http://localhost:3000`. It enables hot-reloading and other development features, allowing developers to see changes in real-time. This command requires all project dependencies to be installed.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-supabase/README.md#_snippet_5

LANGUAGE: bash
CODE:
```
npm run dev
```

----------------------------------------

TITLE: Creating Responsive Next.js Images from Static Imports
DESCRIPTION: Demonstrates how to make a Next.js `Image` responsive when importing a static image file. Next.js automatically sets width/height, and `style={{ width: '100%', height: 'auto' }}` makes it responsive while preserving aspect ratio.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/02-components/image.mdx#_snippet_42

LANGUAGE: jsx
CODE:
```
import Image from 'next/image'
import mountains from '../public/mountains.jpg'

export default function Responsive() {
  return (
    <div style={{ display: 'flex', flexDirection: 'column' }}>
      <Image
        alt="Mountains"
        // Importing an image will
        // automatically set the width and height
        src={mountains}
        sizes="100vw"
        // Make the image display full width
        // and preserve its aspect ratio
        style={{
          width: '100%',
          height: 'auto',
        }}
      />
    </div>
  )
}
```

----------------------------------------

TITLE: Next.js Full Route Cache: Server-side Caching
DESCRIPTION: This documentation explains the default behavior of Next.js regarding server-side caching within the Full Route Cache. It clarifies that Next.js caches the rendered result, comprising the React Server Component Payload and HTML, for routes rendered statically at build time or during revalidation.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/caching.mdx#_snippet_7

LANGUAGE: APIDOC
CODE:
```
The default behavior of Next.js is to cache the rendered result (React Server Component Payload and HTML) of a route on the server. This applies to statically rendered routes at build time, or during revalidation.
```

----------------------------------------

TITLE: Implementing Server-Side Form Validation with Zod (TypeScript)
DESCRIPTION: This TypeScript snippet extends a Next.js API Route to include server-side form validation using the Zod library. It defines a Zod schema to validate the request body. The `schema.parse(req.body)` call will throw an error if validation fails, ensuring data integrity before further processing.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/02-guides/forms.mdx#_snippet_4

LANGUAGE: ts
CODE:
```
import type { NextApiRequest, NextApiResponse } from 'next'
import { z } from 'zod'

const schema = z.object({
  // ...
})

export default async function handler(
  req: NextApiRequest,
  res: NextApiResponse
) {
  const parsed = schema.parse(req.body)
  // ...
}
```

----------------------------------------

TITLE: Create Active Navigation Links with usePathname
DESCRIPTION: This code defines a client component, `NavLinks`, that uses the `usePathname` hook from `next/navigation` to determine the current path. It dynamically applies an 'active' class to `Link` components based on the current URL, enabling visual indication of the active navigation item. This component should be extracted into a separate client file.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/03-file-conventions/layout.mdx#_snippet_15

LANGUAGE: tsx
CODE:
```
'use client'

import { usePathname } from 'next/navigation'
import Link from 'next/link'

export function NavLinks() {
  const pathname = usePathname()

  return (
    <nav>
      <Link className={`link ${pathname === '/' ? 'active' : ''}`} href="/">
        Home
      </Link>

      <Link
        className={`link ${pathname === '/about' ? 'active' : ''}`}
        href="/about"
      >
        About
      </Link>
    </nav>
  )
}
```

LANGUAGE: jsx
CODE:
```
'use client'

import { usePathname } from 'next/navigation'
import Link from 'next/link'

export function Links() {
  const pathname = usePathname()

  return (
    <nav>
      <Link className={`link ${pathname === '/' ? 'active' : ''}`} href="/">
        Home
      </Link>

      <Link
        className={`link ${pathname === '/about' ? 'active' : ''}`}
        href="/about"
      >
        About
      </Link>
    </nav>
  )
}
```

----------------------------------------

TITLE: Redirect User After Data Mutation in Next.js Server Action
DESCRIPTION: This snippet demonstrates how to use the `redirect` function within a Next.js Server Action to navigate the user to a new URL after a successful data mutation, such as creating a post. It also shows how to use `revalidatePath` to update the cache for related data.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/redirecting.mdx#_snippet_1

LANGUAGE: typescript
CODE:
```
'use server'\n\nimport { redirect } from 'next/navigation'\nimport { revalidatePath } from 'next/cache'\n\nexport async function createPost(id: string) {\n  try {\n    // Call database\n  } catch (error) {\n    // Handle errors\n  }\n\n  revalidatePath('/posts') // Update cached posts\n  redirect(`/post/${id}`) // Navigate to the new post page\n}
```

LANGUAGE: javascript
CODE:
```
'use server'\n\nimport { redirect } from 'next/navigation'\nimport { revalidatePath } from 'next/cache'\n\nexport async function createPost(id) {\n  try {\n    // Call database\n  } catch (error) {\n    // Handle errors\n  }\n\n  revalidatePath('/posts') // Update cached posts\n  redirect(`/post/${id}`) // Navigate to the new post page\n}
```

----------------------------------------

TITLE: Define Next.js Layout for Parallel Routes
DESCRIPTION: This code defines a Next.js layout component that accepts `children` and named slots (e.g., `team`, `analytics`) as props. These props represent different parallel route segments, allowing them to be rendered simultaneously within the same layout. This pattern is crucial for creating dashboards or other highly dynamic application sections.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/03-file-conventions/parallel-routes.mdx#_snippet_0

LANGUAGE: tsx
CODE:
```
export default function Layout({
  children,
  team,
  analytics,
}: {
  children: React.ReactNode
  analytics: React.ReactNode
  team: React.ReactNode
}) {
  return (
    <>
      {children}
      {team}
      {analytics}
    </>
  )
}
```

LANGUAGE: jsx
CODE:
```
export default function Layout({ children, team, analytics }) {
  return (
    <>
      {children}
      {team}
      {analytics}
    </>
  )
}
```

----------------------------------------

TITLE: Display Server-Side Validation Errors with React useActionState
DESCRIPTION: This React component, `SignupForm`, demonstrates how to use the `useActionState` hook to manage form state and display server-side validation errors. It connects to the `signup` Server Action and conditionally renders error messages for name, email, and password fields based on the state returned from the action.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/authentication.mdx#_snippet_4

LANGUAGE: tsx
CODE:
```
'use client'

import { signup } from '@/app/actions/auth'
import { useActionState } from 'react'

export default function SignupForm() {
  const [state, action, pending] = useActionState(signup, undefined)

  return (
    <form action={action}>
      <div>
        <label htmlFor="name">Name</label>
        <input id="name" name="name" placeholder="Name" />
      </div>
      {state?.errors?.name && <p>{state.errors.name}</p>}

      <div>
        <label htmlFor="email">Email</label>
        <input id="email" name="email" placeholder="Email" />
      </div>
      {state?.errors?.email && <p>{state.errors.email}</p>}

      <div>
        <label htmlFor="password">Password</label>
        <input id="password" name="password" type="password" />
      </div>
      {state?.errors?.password && (
        <div>
          <p>Password must:</p>
          <ul>
            {state.errors.password.map((error) => (
              <li key={error}>- {error}</li>
            ))}
          </ul>
        </div>
      )}
      <button disabled={pending} type="submit">
        Sign Up
      </button>
    </form>
  )
}
```

LANGUAGE: jsx
CODE:
```
'use client'

import { signup } from '@/app/actions/auth'
import { useActionState } from 'react'

export default function SignupForm() {
  const [state, action, pending] = useActionState(signup, undefined)

  return (
    <form action={action}>
      <div>
        <label htmlFor="name">Name</label>
        <input id="name" name="name" placeholder="Name" />
      </div>
      {state?.errors?.name && <p>{state.errors.name}</p>}


```

----------------------------------------

TITLE: Fetch User Data in Next.js Layouts
DESCRIPTION: Demonstrates how to fetch user data within a Next.js `app/layout` component. This approach allows the layout to access user information while deferring the actual authentication check to a separate Data Access Layer (DAL) function, ensuring the check is performed closer to the data source.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/authentication.mdx#_snippet_28

LANGUAGE: tsx
CODE:
```
export default async function Layout({
  children,
}: {
  children: React.ReactNode;
}) {
  const user = await getUser();

  return (
    // ...
  )
}
```

LANGUAGE: jsx
CODE:
```
export default async function Layout({ children }) {
  const user = await getUser();

  return (
    // ...
  )
}
```

----------------------------------------

TITLE: Implement Global Error Handling with Next.js global-error.js
DESCRIPTION: The `global-error.js` file in Next.js allows you to handle errors at the root layout or template level. It must be located in the root app directory and define its own `<html>` and `<body>` tags, replacing the root layout when active. Error boundaries must be Client Components.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/03-file-conventions/error.mdx#_snippet_3

LANGUAGE: tsx
CODE:
```
'use client' // Error boundaries must be Client Components

export default function GlobalError({
  error,
  reset,
}: {
  error: Error & { digest?: string }
  reset: () => void
}) {
  return (
    // global-error must include html and body tags
    <html>
      <body>
        <h2>Something went wrong!</h2>
        <button onClick={() => reset()}>Try again</button>
      </body>
    </html>
  )
}
```

LANGUAGE: jsx
CODE:
```
'use client' // Error boundaries must be Client Components

export default function GlobalError({ error, reset }) {
  return (
    // global-error must include html and body tags
    <html>
      <body>
        <h2>Something went wrong!</h2>
        <button onClick={() => reset()}>Try again</button>
      </body>
    </html>
  )
}
```

----------------------------------------

TITLE: Secure Next.js Route Handlers with Authentication and Authorization
DESCRIPTION: Illustrates how to implement a two-tier security check in Next.js Route Handlers. It first verifies the user's session for authentication and then checks their role for authorization, returning appropriate HTTP status codes (401 for unauthenticated, 403 for unauthorized) if checks fail.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/authentication.mdx#_snippet_31

LANGUAGE: ts
CODE:
```
import { verifySession } from '@/app/lib/dal'

export async function GET() {
  // User authentication and role verification
  const session = await verifySession()

  // Check if the user is authenticated
  if (!session) {
    // User is not authenticated
    return new Response(null, { status: 401 })
  }

  // Check if the user has the 'admin' role
  if (session.user.role !== 'admin') {
    // User is authenticated but does not have the right permissions
    return new Response(null, { status: 403 })
  }

  // Continue for authorized users
}
```

LANGUAGE: js
CODE:
```
import { verifySession } from '@/app/lib/dal'

export async function GET() {
  // User authentication and role verification
  const session = await verifySession()

  // Check if the user is authenticated
  if (!session) {
    // User is not authenticated
    return new Response(null, { status: 401 })
  }

  // Check if the user has the 'admin' role
  if (session.user.role !== 'admin') {
    // User is authenticated but does not have the right permissions
    return new Response(null, { status: 403 })
  }

  // Continue for authorized users
}
```

----------------------------------------

TITLE: Next.js Client and Server Components Composition (App Router)
DESCRIPTION: Recommendations for composing Server and Client Components, emphasizing the strategic placement of "use client" boundaries to optimize client-side JavaScript bundle size.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/production-checklist.mdx#_snippet_3

LANGUAGE: APIDOC
CODE:
```
Concepts:
  - Server Components
  - Client Components
Directive: "use client"
Recommendation: Follow composition patterns, optimize "use client" boundary placement to reduce client-side JS bundle.
```

----------------------------------------

TITLE: Running Next.js in Development Mode with npm
DESCRIPTION: These commands first install project dependencies using `npm install` and then start the Next.js development server with `npm run dev`. This allows the application to be accessed locally, typically at `http://localhost:3000`.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-mongodb-mongoose/README.md#_snippet_5

LANGUAGE: bash
CODE:
```
npm install
npm run dev
```

----------------------------------------

TITLE: Next.js Streaming with Loading UI and Suspense (App Router)
DESCRIPTION: Describes how to use Loading UI and React Suspense to progressively send UI from the server to the client, preventing route blocking during data fetching.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/production-checklist.mdx#_snippet_8

LANGUAGE: APIDOC
CODE:
```
Concepts:
  - Streaming
  - Loading UI
  - React Suspense
Purpose: Progressively send UI from server to client, prevent route blocking during data fetching.
```

----------------------------------------

TITLE: Redirecting Users After Server Action Completion in Next.js
DESCRIPTION: This snippet demonstrates how to redirect a user to a different page after a Server Function completes an update operation. It utilizes the `redirect` function from `next/navigation` to programmatically navigate the user to a specified path, such as '/posts', ensuring a smooth post-action user experience.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/08-updating-data.mdx#_snippet_9

LANGUAGE: TypeScript
CODE:
```
'use server'

import { redirect } from 'next/navigation'

export async function createPost(formData: FormData) {
  // Update data
  // ...

  redirect('/posts')
}
```

LANGUAGE: JavaScript
CODE:
```
'use server'

import { redirect } from 'next/navigation'

export async function createPost(formData) {
  // Update data
  // ...

  redirect('/posts')
}
```

----------------------------------------

TITLE: Using next/image component for optimized images
DESCRIPTION: Demonstrates the basic usage of the `next/image` component to display an image, leveraging Next.js's automatic image optimization for improved performance. This is the recommended approach to fix the `no-img-element` error.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/no-img-element.mdx#_snippet_0

LANGUAGE: jsx
CODE:
```
import Image from 'next/image'

function Home() {
  return (
    <Image
      src="https://example.com/hero.jpg"
      alt="Landscape picture"
      width={800}
      height={500}
    />
  )
}

export default Home
```

----------------------------------------

TITLE: Using revalidatePath in a Next.js Server Action
DESCRIPTION: This snippet shows how to integrate `revalidatePath` within a Next.js server action to trigger cache revalidation after an operation, such as form submission.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/04-functions/revalidatePath.mdx#_snippet_5

LANGUAGE: ts
CODE:
```
'use server'

import { revalidatePath } from 'next/cache'

export default async function submit() {
  await submitForm()
  revalidatePath('/')
}
```

----------------------------------------

TITLE: Correct: Using `next/link` for Next.js internal page navigation
DESCRIPTION: This snippet demonstrates the recommended approach for internal page navigation in Next.js, utilizing the `Link` component from `next/link` to enable efficient client-side route transitions and a single-page application experience.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/no-html-link-for-pages.mdx#_snippet_1

LANGUAGE: jsx
CODE:
```
import Link from 'next/link'

function Home() {
  return (
    <div>
      <Link href="/about">About Us</Link>
    </div>
  )
}

export default Home
```

----------------------------------------

TITLE: Next.js Form `action` (function) Props - App Router
DESCRIPTION: Documents the props supported by the Next.js `<Form>` component when its `action` prop is a function (Server Action), specifically for the App Router. It details the `action` prop and notes that `replace` and `scroll` are ignored.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/02-components/form.mdx#_snippet_4

LANGUAGE: APIDOC
CODE:
```
<Form> Component Props (App Router - action as function):

action:
  Type: function (Server Action)
  Required: Yes
  Description: The Server Action to be called when the form is submitted.
  Note: When action is a function, the 'replace' and 'scroll' props are ignored.
```

----------------------------------------

TITLE: Generate Dynamic Open Graph Images with Next.js ImageResponse
DESCRIPTION: This example demonstrates how to create dynamic Open Graph images for blog posts using Next.js's `ImageResponse`. It shows how to define image metadata like size and content type, fetch post-specific data, and render a JSX element within `ImageResponse` to display dynamic content like a post title.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/14-metadata-and-og-images.mdx#_snippet_6

LANGUAGE: tsx
CODE:
```
import { ImageResponse } from 'next/og'
import { getPost } from '@/app/lib/data'

// Image metadata
export const size = {
  width: 1200,
  height: 630,
}

export const contentType = 'image/png'

// Image generation
export default async function Image({ params }: { params: { slug: string } }) {
  const post = await getPost(params.slug)

  return new ImageResponse(
    (
      // ImageResponse JSX element
      <div
        style={{
          fontSize: 128,
          background: 'white',
          width: '100%',
          height: '100%',
          display: 'flex',
          alignItems: 'center',
          justifyContent: 'center',
        }}
      >
        {post.title}
      </div>
    )
  )
}
```

LANGUAGE: jsx
CODE:
```
import { ImageResponse } from 'next/og'
import { getPost } from '@/app/lib/data'

// Image metadata
export const size = {
  width: 1200,
  height: 630,
}

export const contentType = 'image/png'

// Image generation
export default async function Image({ params }) {
  const post = await getPost(params.slug)

  return new ImageResponse(
    (
      // ImageResponse JSX element
      <div
        style={{
          fontSize: 128,
          background: 'white',
          width: '100%',
          height: '100%',
          display: 'flex',
          alignItems: 'center',
          justifyContent: 'center',
        }}
      >
        {post.title}
      </div>
    )
  )
}
```

----------------------------------------

TITLE: Initialize Next.js Project with create-next-app
DESCRIPTION: This snippet demonstrates how to bootstrap a new Next.js project using the `create-next-app` command-line tool. It initializes a 'hello-world-app' based on the 'hello-world' example, supporting npm, Yarn, and pnpm package managers. This command sets up the basic project structure and dependencies.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/hello-world/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example hello-world hello-world-app
```

LANGUAGE: bash
CODE:
```
yarn create next-app --example hello-world hello-world-app
```

LANGUAGE: bash
CODE:
```
pnpm create next-app --example hello-world hello-world-app
```

----------------------------------------

TITLE: Implement Client-Side Instrumentation in Next.js
DESCRIPTION: This code demonstrates how to set up client-side performance monitoring, analytics initialization, and error tracking within the `instrumentation-client.js|ts` file. This code runs early in the application lifecycle, before the main frontend code, making it ideal for observability tools.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/03-file-conventions/instrumentation-client.mdx#_snippet_0

LANGUAGE: ts
CODE:
```
// Set up performance monitoring
performance.mark('app-init')

// Initialize analytics
console.log('Analytics initialized')

// Set up error tracking
window.addEventListener('error', (event) => {
  // Send to your error tracking service
  reportError(event.error)
})
```

LANGUAGE: js
CODE:
```
// Set up performance monitoring
performance.mark('app-init')

// Initialize analytics
console.log('Analytics initialized')

// Set up error tracking
window.addEventListener('error', (event) => {
  // Send to your error tracking service
  reportError(event.error)
})
```

----------------------------------------

TITLE: Correctly Using Node.js Modules with getStaticProps in Next.js
DESCRIPTION: This snippet demonstrates the correct way to use Node.js-specific modules, like 'ioredis', within Next.js. By placing the usage inside `getStaticProps`, `getStaticPaths`, or `getServerSideProps`, the code is guaranteed to run only in the Node.js environment, preventing 'Module Not Found' errors that would occur if these modules were bundled for the browser.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/module-not-found.mdx#_snippet_2

LANGUAGE: js
CODE:
```
import Redis from 'ioredis'

const redis = new Redis(process.env.REDIS_URL)

export default redis
```

LANGUAGE: jsx
CODE:
```
import redis from '../lib/redis'

export async function getStaticProps() {
  const message = await redis.get('message')
  return {
    message,
  }
}

export default function Home({ message }) {
  return <h1>{message}</h1>
}
```

----------------------------------------

TITLE: Running Next.js Application in Development Mode
DESCRIPTION: These commands are used to install project dependencies and then start the Next.js development server. The application will typically be accessible at http://localhost:3000 after successful execution, allowing for local development and testing.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-nhost-auth-realtime-graphql/README.md#_snippet_1

LANGUAGE: bash
CODE:
```
npm install
npm run dev
```

LANGUAGE: bash
CODE:
```
yarn install
yarn dev
```

LANGUAGE: bash
CODE:
```
pnpm install
pnpm dev
```

----------------------------------------

TITLE: Wrap useSearchParams with Suspense in Next.js App Router
DESCRIPTION: Demonstrates how to correctly wrap the `useSearchParams` hook within a `Suspense` boundary. This prevents the entire page from being opted into client-side rendering, ensuring that the page content is not blank while client-side JavaScript loads, and maintains server-side rendering capabilities.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/missing-suspense-with-csr-bailout.mdx#_snippet_0

LANGUAGE: tsx
CODE:
```
'use client'

import { useSearchParams } from 'next/navigation'
import { Suspense } from 'react'

function Search() {
  const searchParams = useSearchParams()

  return <input placeholder="Search..." />
}

export function Searchbar() {
  return (
    // You could have a loading skeleton as the `fallback` too
    <Suspense>
      <Search />
    </Suspense>
  )
}
```

LANGUAGE: jsx
CODE:
```
'use client'

import { useSearchParams } from 'next/navigation'
import { Suspense } from 'react'

function Search() {
  const searchParams = useSearchParams()

  return <input placeholder="Search..." />
}

export function Searchbar() {
  return (
    // You could have a loading skeleton as the `fallback` too
    <Suspense>
      <Search />
    </Suspense>
  )
}
```

----------------------------------------

TITLE: Define a Dynamic Route Segment Page Component in Next.js
DESCRIPTION: This code defines a Next.js page component that utilizes a dynamic route segment, `[slug]`. The `slug` parameter is asynchronously extracted from the `params` prop and rendered, demonstrating how to create routes from dynamic data.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/03-file-conventions/dynamic-routes.mdx#_snippet_0

LANGUAGE: tsx
CODE:
```
export default async function Page({
  params,
}: {
  params: Promise<{ slug: string }>
}) {
  const { slug } = await params
  return <div>My Post: {slug}</div>
}
```

LANGUAGE: jsx
CODE:
```
export default async function Page({ params }) {
  const { slug } = await params
  return <div>My Post: {slug}</div>
}
```

----------------------------------------

TITLE: Client-Side Login Form Component in Next.js
DESCRIPTION: This React component, `LoginPage`, provides a user interface for logging in. It captures email and password inputs, prevents default form submission, and sends the credentials as JSON to a `/api/auth/login` endpoint. Upon a successful response, the user is redirected to the `/profile` page using Next.js's `useRouter`.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/authentication.mdx#_snippet_8

LANGUAGE: tsx
CODE:
```
import { FormEvent } from 'react'
import { useRouter } from 'next/router'

export default function LoginPage() {
  const router = useRouter()

  async function handleSubmit(event: FormEvent<HTMLFormElement>) {
    event.preventDefault()

    const formData = new FormData(event.currentTarget)
    const email = formData.get('email')
    const password = formData.get('password')

    const response = await fetch('/api/auth/login', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ email, password }),
    })

    if (response.ok) {
      router.push('/profile')
    } else {
      // Handle errors
    }
  }

  return (
    <form onSubmit={handleSubmit}>
      <input type="email" name="email" placeholder="Email" required />
      <input type="password" name="password" placeholder="Password" required />
      <button type="submit">Login</button>
    </form>
  )
}
```

LANGUAGE: jsx
CODE:
```
import { FormEvent } from 'react'
import { useRouter } from 'next/router'

export default function LoginPage() {
  const router = useRouter()

  async function handleSubmit(event) {
    event.preventDefault()

    const formData = new FormData(event.currentTarget)
    const email = formData.get('email')
    const password = formData.get('password')

    const response = await fetch('/api/auth/login', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ email, password }),
    })

    if (response.ok) {
      router.push('/profile')
    } else {
      // Handle errors
    }
  }

  return (
```

----------------------------------------

TITLE: Defining `next.config.js` with Type Hinting
DESCRIPTION: This JavaScript snippet illustrates the standard structure for `next.config.js`. It includes a JSDoc type annotation (`@type {import('next').NextConfig}`) to leverage Next.js's built-in type checking, helping developers catch invalid configuration options or typos early.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/invalid-next-config.mdx#_snippet_0

LANGUAGE: js
CODE:
```
/**
 * @type {import('next').NextConfig}
 */
const nextConfig = {
  /* config options here */
}

module.exports = nextConfig
```

----------------------------------------

TITLE: Opt-in Caching for Next.js `fetch` Requests
DESCRIPTION: This snippet demonstrates the new default behavior where `fetch` requests in Next.js are no longer cached by default. To enable caching for specific requests, the `cache: 'force-cache'` option must be explicitly passed. This provides more control over data freshness.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/upgrading/version-15.mdx#_snippet_17

LANGUAGE: js
CODE:
```
export default async function RootLayout() {
  const a = await fetch('https://...') // Not Cached
  const b = await fetch('https://...', { cache: 'force-cache' }) // Cached

  // ...
}
```

----------------------------------------

TITLE: Implement ISR with Next.js Pages Router
DESCRIPTION: This example demonstrates Incremental Static Regeneration using the Pages Router. It uses `getStaticPaths` to pre-render specific blog post paths at build time and `getStaticProps` to fetch post data. The `revalidate` property within `getStaticProps` configures the cache invalidation period for the static page.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/incremental-static-regeneration.mdx#_snippet_1

LANGUAGE: tsx
CODE:
```
import type { GetStaticPaths, GetStaticProps } from 'next'

interface Post {
  id: string
  title: string
  content: string
}

interface Props {
  post: Post
}

export const getStaticPaths: GetStaticPaths = async () => {
  const posts = await fetch('https://api.vercel.app/blog').then((res) =>
    res.json()
  )
  const paths = posts.map((post: Post) => ({
    params: { id: String(post.id) },
  }))

  // We'll prerender only these paths at build time.
  // { fallback: 'blocking' } will server-render pages
  // on-demand if the path doesn't exist.
  return { paths, fallback: false }
}

export const getStaticProps: GetStaticProps<Props> = async ({
  params,
}: {
  params: { id: string }
}) => {
  const post = await fetch(`https://api.vercel.app/blog/${params.id}`).then(
    (res) => res.json()
  )

  return {
    props: { post },
    // Next.js will invalidate the cache when a
    // request comes in, at most once every 60 seconds.
    revalidate: 60,
  }
}

export default function Page({ post }: Props) {
  return (
    <main>
      <h1>{post.title}</h1>
      <p>{post.content}</p>
    </main>
  )
}
```

LANGUAGE: jsx
CODE:
```
export async function getStaticPaths() {
  const posts = await fetch('https://api.vercel.app/blog').then((res) =>
    res.json()
  )
  const paths = posts.map((post) => ({
    params: { id: post.id },
  }))

  // We'll prerender only these paths at build time.
  // { fallback: false } means other routes should 404.
  return { paths, fallback: false }
}

export async function getStaticProps({ params }) {
  const post = await fetch(`https://api.vercel.app/blog/${params.id}`).then(
    (res) => res.json()
  )

  return {
    props: { post },
    // Next.js will invalidate the cache when a
    // request comes in, at most once every 60 seconds.
    revalidate: 60,
  }
}

export default function Page({ post }) {
  return (
    <main>
      <h1>{post.title}</h1>
      <p>{post.content}</p>
    </main>
  )
}
```

----------------------------------------

TITLE: Next.js `generateMetadata` Function Parameters Reference
DESCRIPTION: Detailed reference for the parameters accepted by the `generateMetadata` function in Next.js, including `props` (with `params` and `searchParams`) and `parent`, along with their types and examples.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/04-functions/generate-metadata.mdx#_snippet_2

LANGUAGE: APIDOC
CODE:
```
generateMetadata function accepts the following parameters:
- `props`: An object containing the parameters of the current route:
  - `params`: An object containing the dynamic route parameters object from the root segment down to the segment `generateMetadata` is called from.
    Examples:
      Route: `app/shop/[slug]/page.js`, URL: `/shop/1`, `params`: `{ slug: '1' }`
      Route: `app/shop/[tag]/[item]/page.js`, URL: `/shop/1/2`, `params`: `{ tag: '1', item: '2' }`
      Route: `app/shop/[...slug]/page.js`, URL: `/shop/1/2`, `params`: `{ slug: ['1', '2'] }`
  - `searchParams`: An object containing the current URL's search params.
    Examples:
      URL: `/shop?a=1`, `searchParams`: `{ a: '1' }`
      URL: `/shop?a=1&b=2`, `searchParams`: `{ a: '1', b: '2' }`
      URL: `/shop?a=1&a=2`, `searchParams`: `{ a: ['1', '2'] }`
- `parent`: A promise of the resolved metadata from parent route segments.
```

----------------------------------------

TITLE: Define Base Metadata in Next.js Root Layout
DESCRIPTION: Sets up default metadata for the entire application within `app/layout.js`, including a global title and Open Graph properties. This serves as the base for child pages to inherit or overwrite.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/04-functions/generate-metadata.mdx#_snippet_47

LANGUAGE: jsx
CODE:
```
export const metadata = {
  title: 'Acme',
  openGraph: {
    title: 'Acme',
    description: 'Acme is a...',}
}
```

----------------------------------------

TITLE: Invoke Server Functions from Client Components (TypeScript/JavaScript)
DESCRIPTION: Demonstrates how a Client Component can import and invoke a Server Function defined in a separate file. The example uses the formAction prop on a button to trigger the server-side createPost function.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/08-updating-data.mdx#_snippet_3

LANGUAGE: tsx
CODE:
```
'use client'

import { createPost } from '@/app/actions'

export function Button() {
  return <button formAction={createPost}>Create</button>
}
```

LANGUAGE: jsx
CODE:
```
'use client'

import { createPost } from '@/app/actions'

export function Button() {
  return <button formAction={createPost}>Create</button>
}
```

----------------------------------------

TITLE: Pass Server Functions as props to Client Components (TypeScript/JavaScript)
DESCRIPTION: Illustrates how a Server Function can be passed as a prop from a Server Component to a Client Component. The Client Component then uses this prop (e.g., updateItemAction) as the action for a form, allowing server-side logic to be triggered from the client.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/08-updating-data.mdx#_snippet_4

LANGUAGE: tsx
CODE:
```
'use client'

export default function ClientComponent({
  updateItemAction,
}: {
  updateItemAction: (formData: FormData) => void
}) {
  return <form action={updateItemAction}>{/* ... */}</form>
}
```

LANGUAGE: jsx
CODE:
```
'use client'

export default function ClientComponent({ updateItemAction }) {
  return <form action={updateItemAction}>{/* ... */}</form>
}
```

----------------------------------------

TITLE: Redirecting in Next.js Server Component
DESCRIPTION: Demonstrates how to use the `redirect` function within a Next.js Server Component to redirect users based on data fetching results. This example shows how `redirect` internally throws an error to terminate rendering of the route segment.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/04-functions/redirect.mdx#_snippet_1

LANGUAGE: tsx
CODE:
```
import { redirect } from 'next/navigation'

async function fetchTeam(id: string) {
  const res = await fetch('https://...')
  if (!res.ok) return undefined
  return res.json()
}

export default async function Profile({
  params,
}: {
  params: Promise<{ id: string }>
}) {
  const { id } = await params
  const team = await fetchTeam(id)

  if (!team) {
    redirect('/login')
  }

  // ...
}
```

LANGUAGE: jsx
CODE:
```
import { redirect } from 'next/navigation'

async function fetchTeam(id) {
  const res = await fetch('https://...')
  if (!res.ok) return undefined
  return res.json()
}

export default async function Profile({ params }) {
  const { id } = await params
  const team = await fetchTeam(id)

  if (!team) {
    redirect('/login')
  }

  // ...
}
```

----------------------------------------

TITLE: Next.js Edge API Route for Proxying
DESCRIPTION: This snippet shows how to use an Edge API Route to proxy requests to an external backend API. It demonstrates setting the runtime to 'edge' and forwarding headers like 'authorization' from cookies.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/middleware-upgrade-guide.mdx#_snippet_6

LANGUAGE: ts
CODE:
```
import { type NextRequest } from 'next/server'

export const config = {
  runtime: 'edge',
}

export default async function handler(req: NextRequest) {
  const authorization = req.cookies.get('authorization')
  return fetch('https://backend-api.com/api/protected', {
    method: req.method,
    headers: {
      authorization,
    },
    redirect: 'manual',
  })
}
```

----------------------------------------

TITLE: Update Next.js to Latest Version
DESCRIPTION: Instructions to update the Next.js framework to version 13.4 or greater using npm, a prerequisite for using the `app` directory.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/migrating/app-router-migration.mdx#_snippet_3

LANGUAGE: bash
CODE:
```
npm install next@latest
```

----------------------------------------

TITLE: Next.js Time-based Revalidation for Blog Posts (App Router)
DESCRIPTION: This example demonstrates how to implement time-based revalidation in a Next.js App Router page. It fetches and displays a list of blog posts, with the cache invalidated every hour, triggering a background regeneration of the page on the next visit.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/incremental-static-regeneration.mdx#_snippet_3

LANGUAGE: tsx
CODE:
```
interface Post {
  id: string
  title: string
  content: string
}

export const revalidate = 3600 // invalidate every hour

export default async function Page() {
  const data = await fetch('https://api.vercel.app/blog')
  const posts: Post[] = await data.json()
  return (
    <main>
      <h1>Blog Posts</h1>
      <ul>
        {posts.map((post) => (
          <li key={post.id}>{post.title}</li>
        ))}
      </ul>
    </main>
  )
}
```

LANGUAGE: jsx
CODE:
```
export const revalidate = 3600 // invalidate every hour

export default async function Page() {
  const data = await fetch('https://api.vercel.app/blog')
  const posts = await data.json()
  return (
    <main>
      <h1>Blog Posts</h1>
      <ul>
        {posts.map((post) => (
          <li key={post.id}>{post.title}</li>
        ))}
      </ul>
    </main>
  )
}
```

----------------------------------------

TITLE: Integrate Dynamic Components with Partial Prerendering using Suspense
DESCRIPTION: This snippet illustrates how to use React's `Suspense` to wrap a dynamic component (like `<User />`) within a page that uses Partial Prerendering. This allows the static parts of the page to be prerendered while the dynamic component is streamed, maintaining PPR benefits.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/06-partial-prerendering.mdx#_snippet_4

LANGUAGE: tsx
CODE:
```
import { Suspense } from 'react'
import { User, AvatarSkeleton } from './user'

export const experimental_ppr = true

export default function Page() {
  return (
    <section>
      <h1>This will be prerendered</h1>
      <Suspense fallback={<AvatarSkeleton />}>
        <User />
      </Suspense>
    </section>
  )
}
```

LANGUAGE: jsx
CODE:
```
import { Suspense } from 'react'
import { User, AvatarSkeleton } from './user'

export const experimental_ppr = true

export default function Page() {
  return (
    <section>
      <h1>This will be prerendered</h1>
      <Suspense fallback={<AvatarSkeleton />}>
        <User />
      </Suspense>
    </section>
  )
}
```

----------------------------------------

TITLE: Next.js Layouts for Shared UI (App Router)
DESCRIPTION: Details how to use layouts in the App Router to share UI across pages and enable partial rendering during navigation.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/production-checklist.mdx#_snippet_1

LANGUAGE: APIDOC
CODE:
```
File Convention: app/layout.js
  Purpose: Share UI across pages
  Feature: Partial rendering on navigation
```

----------------------------------------

TITLE: Update Next.js Server Action Signature for React useActionState
DESCRIPTION: Illustrates how the signature of a Next.js server action changes when integrated with React's `useActionState` hook. The server function now accepts an `initialState` or `prevState` parameter as its first argument.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/forms.mdx#_snippet_4

LANGUAGE: tsx
CODE:
```
'use server'

import { z } from 'zod'

export async function createUser(initialState: any, formData: FormData) {
  const validatedFields = schema.safeParse({
    email: formData.get('email'),
  })
  // ...
}
```

LANGUAGE: jsx
CODE:
```
'use server'

import { z } from 'zod'

// ...

export async function createUser(initialState, formData) {
  const validatedFields = schema.safeParse({
    email: formData.get('email'),
  })
  // ...
}
```

----------------------------------------

TITLE: Migrating Synchronous Request API Access to Async in Next.js 15
DESCRIPTION: Next.js 15 makes `cookies()`, `headers()`, and `draftMode()` asynchronous, returning Promises. This snippet demonstrates how to update a synchronous utility function and its consumer to correctly await these APIs, resolving `@next-codemod-error` issues.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/next-prerender-sync-headers.mdx#_snippet_0

LANGUAGE: jsx
CODE:
```
export function getToken() {
  // @next-codemod-error ...
  return cookies().get('token')
}
```

LANGUAGE: jsx
CODE:
```
import { getToken } from '.../token-utils'

export default function Page() {
  const token = getToken();
  validateToken(token)
  return ...
}
```

LANGUAGE: jsx
CODE:
```
export async function getToken() {
  return (await cookies()).get('token')
}
```

LANGUAGE: jsx
CODE:
```
import { getToken } from '.../token-utils'

export default async function Page() {
  const token = await getToken();
  validateToken(token)
  return ...
}
```

----------------------------------------

TITLE: Migrate next/dynamic to separate module imports
DESCRIPTION: This snippet demonstrates how to refactor `next/dynamic` usage from loading multiple modules within a single call to using separate `dynamic` calls for each module. The 'Before' example shows the deprecated pattern where `modules` property is used, while the 'After' example illustrates the recommended approach with individual `dynamic` imports for each component, aligning with React's `lazy` and `Suspense`.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/next-dynamic-modules.mdx#_snippet_0

LANGUAGE: jsx
CODE:
```
import dynamic from 'next/dynamic'

const HelloBundle = dynamic({
  modules: () => {
    const components = {
      Hello1: () => import('../components/hello1').then((m) => m.default),
      Hello2: () => import('../components/hello2').then((m) => m.default),
    }

    return components
  },
  render: (props, { Hello1, Hello2 }) => (
    <div>
      <h1>{props.title}</h1>
      <Hello1 />
      <Hello2 />
    </div>
  ),
})

function DynamicBundle() {
  return <HelloBundle title="Dynamic Bundle" />
}

export default DynamicBundle
```

LANGUAGE: jsx
CODE:
```
import dynamic from 'next/dynamic'

const Hello1 = dynamic(() => import('../components/hello1'))
const Hello2 = dynamic(() => import('../components/hello2'))

function HelloBundle({ title }) {
  return (
    <div>
      <h1>{title}</h1>
      <Hello1 />
      <Hello2 />
    </div>
  )
}

function DynamicBundle() {
  return <HelloBundle title="Dynamic Bundle" />
}

export default DynamicBundle
```

----------------------------------------

TITLE: Installing Node.js Dependencies (Yarn)
DESCRIPTION: This command installs all required Node.js project dependencies listed in `package.json` using the Yarn package manager. It's an alternative to npm for installing project dependencies.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-edgedb/README.md#_snippet_8

LANGUAGE: bash
CODE:
```
yarn
```

----------------------------------------

TITLE: Integrate Client Component into Next.js Server Component Page
DESCRIPTION: This example illustrates how to create a default Server Component page (`page.tsx`) in the Next.js `app` directory. It shows how to import and render a Client Component within it, and how to perform data fetching directly within the Server Component using the new `fetch` API before passing data as props to the Client Component.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/migrating/app-router-migration.mdx#_snippet_11

LANGUAGE: tsx
CODE:
```
// Import your Client Component
import HomePage from './home-page'

async function getPosts() {
  const res = await fetch('https://...')
  const posts = await res.json()
  return posts
}

export default async function Page() {
  // Fetch data directly in a Server Component
  const recentPosts = await getPosts()
  // Forward fetched data to your Client Component
  return <HomePage recentPosts={recentPosts} />
}
```

LANGUAGE: jsx
CODE:
```
// Import your Client Component
import HomePage from './home-page'

async function getPosts() {
  const res = await fetch('https://...')
  const posts = await res.json()
  return posts
}

export default async function Page() {
  // Fetch data directly in a Server Component
  const recentPosts = await getPosts()
  // Forward fetched data to your Client Component
  return <HomePage recentPosts={recentPosts} />
}
```

----------------------------------------

TITLE: Invoking Next.js Server Actions with React useEffect
DESCRIPTION: This snippet demonstrates how to trigger a Next.js Server Action from a client component using React's `useEffect` hook. It's useful for scenarios where a mutation needs to be automatically invoked, such as updating a view count on component mount, and shows how to manage pending states with `useTransition` for user feedback.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/08-updating-data.mdx#_snippet_11

LANGUAGE: TSX
CODE:
```
'use client'

import { incrementViews } from './actions'
import { useState, useEffect, useTransition } from 'react'

export default function ViewCount({ initialViews }: { initialViews: number }) {
  const [views, setViews] = useState(initialViews)
  const [isPending, startTransition] = useTransition()

  useEffect(() => {
    startTransition(async () => {
      const updatedViews = await incrementViews()
      setViews(updatedViews)
    })
  }, [])

  // You can use `isPending` to give users feedback
  return <p>Total Views: {views}</p>
}
```

LANGUAGE: JSX
CODE:
```
'use client'

import { incrementViews } from './actions'
import { useState, useEffect, useTransition } from 'react'

export default function ViewCount({ initialViews }) {
  const [views, setViews] = useState(initialViews)
  const [isPending, startTransition] = useTransition()

  useEffect(() => {
    startTransition(async () => {
      const updatedViews = await incrementViews()
      setViews(updatedViews)
    })
  }, [])

  // You can use `isPending` to give users feedback
  return <p>Total Views: {views}</p>
}
```

----------------------------------------

TITLE: Create Next.js Home Page Component
DESCRIPTION: This snippet demonstrates how to create the main home page component (`/`) in Next.js using file-system routing. The `Page` component is exported as the default, rendering a simple H1 tag.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/01-installation.mdx#_snippet_5

LANGUAGE: tsx
CODE:
```
export default function Page() {
  return <h1>Hello, Next.js!</h1>
}
```

LANGUAGE: jsx
CODE:
```
export default function Page() {
  return <h1>Hello, Next.js!</h1>
}
```

----------------------------------------

TITLE: Implementing Partial Prerendering with Suspense in Next.js
DESCRIPTION: This example demonstrates how to enable Partial Prerendering and use React Suspense to define dynamic boundaries within a Next.js page. Static components render immediately, while dynamic components wrapped in Suspense are streamed asynchronously, improving initial page load performance.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/06-partial-prerendering.mdx#_snippet_0

LANGUAGE: JSX
CODE:
```
import { Suspense } from 'react'
import StaticComponent from './StaticComponent'
import DynamicComponent from './DynamicComponent'
import Fallback from './Fallback'

export const experimental_ppr = true

export default function Page() {
  return (
    <>
      <StaticComponent />
      <Suspense fallback={<Fallback />}>
        <DynamicComponent />
      </Suspense>
    </>
  )
}
```

----------------------------------------

TITLE: Implement Optimistic Authentication Checks with Next.js Middleware
DESCRIPTION: This code snippet demonstrates how to use Next.js Middleware to perform optimistic authentication checks. It defines protected and public routes, decrypts the user session from a cookie, and redirects users based on their authentication status. For unauthenticated users on protected routes, it redirects to '/login'. For authenticated users on public routes (excluding '/dashboard'), it redirects to '/dashboard'. The `config.matcher` is used to specify routes where Middleware should run, excluding API routes, static assets, and images. This approach prioritizes performance by avoiding database lookups within the Middleware.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/authentication.mdx#_snippet_23

LANGUAGE: tsx
CODE:
```
import { NextRequest, NextResponse } from 'next/server'
import { decrypt } from '@/app/lib/session'
import { cookies } from 'next/headers'

// 1. Specify protected and public routes
const protectedRoutes = ['/dashboard']
const publicRoutes = ['/login', '/signup', '/']

export default async function middleware(req: NextRequest) {
  // 2. Check if the current route is protected or public
  const path = req.nextUrl.pathname
  const isProtectedRoute = protectedRoutes.includes(path)
  const isPublicRoute = publicRoutes.includes(path)

  // 3. Decrypt the session from the cookie
  const cookie = (await cookies()).get('session')?.value
  const session = await decrypt(cookie)

  // 4. Redirect to /login if the user is not authenticated
  if (isProtectedRoute && !session?.userId) {
    return NextResponse.redirect(new URL('/login', req.nextUrl))
  }

  // 5. Redirect to /dashboard if the user is authenticated
  if (
    isPublicRoute &&
    session?.userId &&
    !req.nextUrl.pathname.startsWith('/dashboard')
  ) {
    return NextResponse.redirect(new URL('/dashboard', req.nextUrl))
  }

  return NextResponse.next()
}

// Routes Middleware should not run on
export const config = {
  matcher: ['/((?!api|_next/static|_next/image|.*\.png$).*)']
}
```

LANGUAGE: js
CODE:
```
import { NextResponse } from 'next/server'
import { decrypt } from '@/app/lib/session'
import { cookies } from 'next/headers'

// 1. Specify protected and public routes
const protectedRoutes = ['/dashboard']
const publicRoutes = ['/login', 'signup', '/']

export default async function middleware(req) {
  // 2. Check if the current route is protected or public
  const path = req.nextUrl.pathname
  const isProtectedRoute = protectedRoutes.includes(path)
  const isPublicRoute = publicRoutes.includes(path)

  // 3. Decrypt the session from the cookie
  const cookie = (await cookies()).get('session')?.value
  const session = await decrypt(cookie)

  // 5. Redirect to /login if the user is not authenticated
  if (isProtectedRoute && !session?.userId) {
    return NextResponse.redirect(new URL('/login', req.nextUrl))
  }

  // 6. Redirect to /dashboard if the user is authenticated
  if (
    isPublicRoute &&
    session?.userId &&
    !req.nextUrl.pathname.startsWith('/dashboard')
  ) {
    return NextResponse.redirect(new URL('/dashboard', req.nextUrl))
  }

  return NextResponse.next()
}

// Routes Middleware should not run on
export const config = {
  matcher: ['/((?!api|_next/static|_next/image|.*\.png$).*)']
}
```

----------------------------------------

TITLE: Define `fetchUsers` Server Function with `use server` (Next.js/React)
DESCRIPTION: This snippet shows how to define a server function, `fetchUsers`, in a dedicated file using the `use server` directive. This function is designed to retrieve all users from a database on the server side.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/01-directives/use-server.mdx#_snippet_1

LANGUAGE: tsx
CODE:
```
'use server'
import { db } from '@/lib/db' // Your database client

export async function fetchUsers() {
  const users = await db.user.findMany()
  return users
}
```

LANGUAGE: jsx
CODE:
```
'use server'
import { db } from '@/lib/db' // Your database client

export async function fetchUsers() {
  const users = await db.user.findMany()
  return users
}
```

----------------------------------------

TITLE: Invoke Server Function from Client Component Event Handler
DESCRIPTION: This example shows how to call a Next.js Server Function from a Client Component using an event handler, such as "onClick". The function's return value can then be used to update the component's local state, providing dynamic UI feedback.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/08-updating-data.mdx#_snippet_6

LANGUAGE: tsx
CODE:
```
'use client'

import { incrementLike } from './actions'
import { useState } from 'react'

export default function LikeButton({ initialLikes }: { initialLikes: number }) {
  const [likes, setLikes] = useState(initialLikes)

  return (
    <>
      <p>Total Likes: {likes}</p>
      <button
        onClick={async () => {
          const updatedLikes = await incrementLike()
          setLikes(updatedLikes)
        }}
      >
        Like
      </button>
    </>
  )
}
```

LANGUAGE: jsx
CODE:
```
'use client'

import { incrementLike } from './actions'
import { useState } from 'react'

export default function LikeButton({ initialLikes }) {
  const [likes, setLikes] = useState(initialLikes)

  return (
    <>
      <p>Total Likes: {likes}</p>
      <button
        onClick={async () => {
          const updatedLikes = await incrementLike()
          setLikes(updatedLikes)
        }}
      >
        Like
      </button>
    </>
  )
}
```

----------------------------------------

TITLE: Next.js Environment Variables Management
DESCRIPTION: Properly manage environment variables by adding `.env.*` files to `.gitignore` and prefixing only public variables with `NEXT_PUBLIC_`.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/production-checklist.mdx#_snippet_21

LANGUAGE: APIDOC
CODE:
```
Next.js Environment Variables:
  Security Best Practices:
    - Add `.env.*` files to `.gitignore`.
    - Prefix public variables with `NEXT_PUBLIC_`.
```

----------------------------------------

TITLE: Wrap Third-Party Components for Next.js Server Component Compatibility
DESCRIPTION: This snippet illustrates how to create a dedicated Client Component wrapper for a third-party component that does not inherently include the 'use client' directive. By doing so, the wrapped component becomes compatible with Next.js Server Components, allowing it to be imported and used without issues related to client-only features.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/05-server-and-client-components.mdx#_snippet_10

LANGUAGE: tsx
CODE:
```
'use client'

import { Carousel } from 'acme-carousel'

export default Carousel
```

LANGUAGE: jsx
CODE:
```
'use client'

import { Carousel } from 'acme-carousel'

export default Carousel
```

----------------------------------------

TITLE: Define getStaticPaths and getStaticProps for Dynamic Routes in Next.js
DESCRIPTION: This snippet demonstrates how to export `getStaticPaths` and `getStaticProps` in a Next.js page for dynamic routes. `getStaticPaths` specifies the dynamic paths to pre-render, while `getStaticProps` fetches data for those paths. It includes examples in both TypeScript and JavaScript.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/04-api-reference/03-functions/get-static-paths.mdx#_snippet_0

LANGUAGE: tsx
CODE:
```
import type {
  InferGetStaticPropsType,
  GetStaticProps,
  GetStaticPaths,
} from 'next'

type Repo = {
  name: string
  stargazers_count: number
}

export const getStaticPaths = (async () => {
  return {
    paths: [
      {
        params: {
          name: 'next.js',
        },
      },
    ],
    fallback: true,
  }
}) satisfies GetStaticPaths

export const getStaticProps = (async (context) => {
  const res = await fetch('https://api.github.com/repos/vercel/next.js')
  const repo = await res.json()
  return { props: { repo } }
}) satisfies GetStaticProps<{
  repo: Repo
}>

export default function Page({
  repo,
}: InferGetStaticPropsType<typeof getStaticProps>) {
  return repo.stargazers_count
}
```

LANGUAGE: jsx
CODE:
```
export async function getStaticPaths() {
  return {
    paths: [
      {
        params: {
          name: 'next.js',
        },
      },
    ],
    fallback: true,
  }
}

export async function getStaticProps() {
  const res = await fetch('https://api.github.com/repos/vercel/next.js')
  const repo = await res.json()
  return { props: { repo } }
}

export default function Page({ repo }) {
  return repo.stargazers_count
}
```

----------------------------------------

TITLE: Optimizing Client Bundle Size by Selective Client Components
DESCRIPTION: This example illustrates how to reduce JavaScript bundle size by applying the 'use client' directive only to specific interactive components, rather than marking large parts of your UI. It demonstrates a Server Component layout importing a Client Component search bar, allowing most of the UI to remain a Server Component while enabling interactivity where needed.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/05-server-and-client-components.mdx#_snippet_3

LANGUAGE: tsx
CODE:
```
// Client Component
import Search from './search'
// Server Component
import Logo from './logo'

// Layout is a Server Component by default
export default function Layout({ children }: { children: React.ReactNode }) {
  return (
    <>
      <nav>
        <Logo />
        <Search />
      </nav>
      <main>{children}</main>
    </>
  )
}
```

LANGUAGE: jsx
CODE:
```
// Client Component
import Search from './search'
// Server Component
import Logo from './logo'

// Layout is a Server Component by default
export default function Layout({ children }) {
  return (
    <>
      <nav>
        <Logo />
        <Search />
      </nav>
      <main>{children}</main>
    </>
  )
}
```

LANGUAGE: tsx
CODE:
```
'use client'

export default function Search() {
  // ...
}
```

LANGUAGE: jsx
CODE:
```
'use client'

export default function Search() {
  // ...
}
```

----------------------------------------

TITLE: Configure Default `fetch` Caching with `fetchCache` Option
DESCRIPTION: This snippet shows how to use the `export const fetchCache = 'default-cache'` segment config option to enable caching for all `fetch` requests within a layout or page by default. Individual `fetch` requests can still override this setting with their own `cache` option.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/upgrading/version-15.mdx#_snippet_18

LANGUAGE: js
CODE:
```
// Since this is the root layout, all fetch requests in the app
// that don't set their own cache option will be cached.
export const fetchCache = 'default-cache'

export default async function RootLayout() {
  const a = await fetch('https://...') // Cached
  const b = await fetch('https://...', { cache: 'no-store' }) // Not cached

  // ...
}
```

----------------------------------------

TITLE: Nest Client Components within Server Components (React/Next.js)
DESCRIPTION: This snippet demonstrates how to combine Server Components and Client Components in a Next.js application. A Server Component (`Header`) handles static content, while a Client Component (`Counter`) provides interactivity. This composition allows for building performant applications by leveraging the strengths of both server-side and client-side rendering.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/01-directives/use-client.mdx#_snippet_2

LANGUAGE: tsx
CODE:
```
import Header from './header'
import Counter from './counter' // This is a Client Component

export default function Page() {
  return (
    <div>
      <Header />
      <Counter />
    </div>
  )
}
```

LANGUAGE: jsx
CODE:
```
import Header from './header'
import Counter from './counter' // This is a Client Component

export default function Page() {
  return (
    <div>
      <Header />
      <Counter />
    </div>
  )
}
```

----------------------------------------

TITLE: Configure Next.js scripts in package.json
DESCRIPTION: Add essential development, build, start, and lint scripts to your `package.json` file for Next.js application management.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/01-installation.mdx#_snippet_2

LANGUAGE: json
CODE:
```
{
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start",
    "lint": "next lint"
  }
}
```

----------------------------------------

TITLE: Asynchronous Access to Next.js 15 `params` and `searchParams` (After)
DESCRIPTION: Demonstrates the corrected asynchronous access pattern for `params` and `searchParams` in Next.js Page components, compatible with Next.js 15. This is the recommended approach after running the upgrade codemod, ensuring `params` and `searchParams` are awaited.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/next-prerender-sync-params.mdx#_snippet_1

LANGUAGE: jsx
CODE:
```
export default async function ComponentThatWillBeExportedAsPage({ params, searchParams }) {
  const { slug } = await params;
  const { page } = await searchParams
  return <RenderList slug={slug} page={page}>
}
```

LANGUAGE: jsx
CODE:
```
export * from '.../some-file'
```

----------------------------------------

TITLE: Handling Client-Side Form Submission (TypeScript React)
DESCRIPTION: This TypeScript React component demonstrates how to handle form submissions on the client-side. The `onSubmit` function prevents default form behavior, creates `FormData` from the current target, and sends a POST request to `/api/submit` using `fetch`. It then handles the JSON response from the API.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/02-guides/forms.mdx#_snippet_2

LANGUAGE: tsx
CODE:
```
import { FormEvent } from 'react'

export default function Page() {
  async function onSubmit(event: FormEvent<HTMLFormElement>) {
    event.preventDefault()

    const formData = new FormData(event.currentTarget)
    const response = await fetch('/api/submit', {
      method: 'POST',
      body: formData,
    })

    // Handle response if necessary
    const data = await response.json()
    // ...
  }

  return (
    <form onSubmit={onSubmit}>
      <input type="text" name="name" />
      <button type="submit">Submit</button>
    </form>
  )
}
```

----------------------------------------

TITLE: Implement Authentication for Server Functions (Next.js/React)
DESCRIPTION: It is crucial to implement authentication and authorization checks within server functions to protect sensitive operations. This example demonstrates how to authenticate a user token before allowing a `createUser` operation to proceed, throwing an error if unauthorized.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/01-directives/use-server.mdx#_snippet_4

LANGUAGE: tsx
CODE:
```
'use server'

import { db } from '@/lib/db' // Your database client
import { authenticate } from '@/lib/auth' // Your authentication library

export async function createUser(
  data: { name: string; email: string },
  token: string
) {
  const user = authenticate(token)
  if (!user) {
    throw new Error('Unauthorized')
  }
  const newUser = await db.user.create({ data })
  return newUser
}
```

LANGUAGE: jsx
CODE:
```
'use server'

import { db } from '@/lib/db' // Your database client
import { authenticate } from '@/lib/auth' // Your authentication library

export async function createUser(data, token) {
  const user = authenticate(token)
  if (!user) {
    throw new Error('Unauthorized')
  }
  const newUser = await db.user.create({ data })
  return newUser
}
```

----------------------------------------

TITLE: Validate Form Fields in Next.js Server Action
DESCRIPTION: This code demonstrates how to integrate Zod schema validation within a Next.js Server Action. The `signup` function uses `SignupFormSchema.safeParse` to validate incoming `FormData`. If validation fails, it returns early with flattened field errors, preventing unnecessary calls to an authentication provider or database.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/authentication.mdx#_snippet_3

LANGUAGE: typescript
CODE:
```
import { SignupFormSchema, FormState } from '@/app/lib/definitions'

export async function signup(state: FormState, formData: FormData) {
  // Validate form fields
  const validatedFields = SignupFormSchema.safeParse({
    name: formData.get('name'),
    email: formData.get('email'),
    password: formData.get('password'),
  })

  // If any form fields are invalid, return early
  if (!validatedFields.success) {
    return {
      errors: validatedFields.error.flatten().fieldErrors,
    }
  }

  // Call the provider or db to create a user...
}
```

LANGUAGE: javascript
CODE:
```
import { SignupFormSchema } from '@/app/lib/definitions'

export async function signup(state, formData) {
  // Validate form fields
  const validatedFields = SignupFormSchema.safeParse({
    name: formData.get('name'),
    email: formData.get('email'),
    password: formData.get('password'),
  })

  // If any form fields are invalid, return early
  if (!validatedFields.success) {
    return {
      errors: validatedFields.error.flatten().fieldErrors,
    }
  }

  // Call the provider or db to create a user...
}
```

----------------------------------------

TITLE: Handle Mutations with Next.js Server Actions (GOOD Example)
DESCRIPTION: This example demonstrates the recommended way to perform mutations in Next.js using Server Actions. By encapsulating the mutation logic (e.g., `logout`) within a Server Action and invoking it via a `<form>` element, side-effects are properly managed, preventing accidental triggers from GET requests and enhancing security.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/data-security.mdx#_snippet_17

LANGUAGE: tsx
CODE:
```
// GOOD: Using Server Actions to handle mutations
import { logout } from './actions'

export default function Page() {
  return (
    <>
      <UserProfile />
      <form action={logout}>
        <button type="submit">Logout</button>
      </form>
    </>
  )
}
```

----------------------------------------

TITLE: Fetch Data in Next.js Server Components
DESCRIPTION: Demonstrates how to use the extended `fetch` API within Next.js Server Components to retrieve data from an external API and render it. This example shows fetching blog posts and displaying their titles.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/04-functions/fetch.mdx#_snippet_0

LANGUAGE: tsx
CODE:
```
export default async function Page() {
  let data = await fetch('https://api.vercel.app/blog')
  let posts = await data.json()
  return (
    <ul>
      {posts.map((post) => (
        <li key={post.id}>{post.title}</li>
      ))}
    </ul>
  )
}
```

LANGUAGE: jsx
CODE:
```
export default async function Page() {
  let data = await fetch('https://api.vercel.app/blog')
  let posts = await data.json()
  return (
    <ul>
      {posts.map((post) => (
        <li key={post.id}>{post.title}</li>
      ))}
    </ul>
  )
}
```

----------------------------------------

TITLE: Parallel Data Fetching with Promise.all in Next.js
DESCRIPTION: This snippet illustrates how to perform parallel data fetching in a Next.js page by initiating multiple `async` requests concurrently and resolving them together using `Promise.all`. This approach prevents requests from blocking each other, significantly improving performance. It also notes that `Promise.allSettled` can be used for more robust error handling where individual request failures do not cause the entire operation to fail.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/07-fetching-data.mdx#_snippet_10

LANGUAGE: TypeScript
CODE:
```
import Albums from './albums'

async function getArtist(username: string) {
  const res = await fetch(`https://api.example.com/artist/${username}`)
  return res.json()
}

async function getAlbums(username: string) {
  const res = await fetch(`https://api.example.com/artist/${username}/albums`)
  return res.json()
}

export default async function Page({
  params,
}: {
  params: Promise<{ username: string }>
}) {
  const { username } = await params
  const artistData = getArtist(username)
  const albumsData = getAlbums(username)

  // Initiate both requests in parallel
  const [artist, albums] = await Promise.all([artistData, albumsData])

  return (
    <>
      <h1>{artist.name}</h1>
      <Albums list={albums} />
    </>
  )
}
```

LANGUAGE: JavaScript
CODE:
```
import Albums from './albums'

async function getArtist(username) {
  const res = await fetch(`https://api.example.com/artist/${username}`)
  return res.json()
}

async function getAlbums(username) {
  const res = await fetch(`https://api.example.com/artist/${username}/albums`)
  return res.json()
}

export default async function Page({ params }) {
  const { username } = await params
  const artistData = getArtist(username)
  const albumsData = getAlbums(username)

  // Initiate both requests in parallel
  const [artist, albums] = await Promise.all([artistData, albumsData])

  return (
    <>
      <h1>{artist.name}</h1>
      <Albums list={albums} />
    </>
  )
}
```

----------------------------------------

TITLE: Configure Robots Metadata for SEO in Next.js
DESCRIPTION: This snippet illustrates how to configure the `robots` metadata to control search engine crawling and indexing behavior. It includes general robot directives (index, follow, nocache) and specific Googlebot directives (noimageindex, max-video-preview, max-image-preview, max-snippet) for fine-grained control. This configuration is typically defined in `layout.tsx` or `page.tsx` to generate the corresponding `<meta>` tags in the HTML `<head>`.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/04-functions/generate-metadata.mdx#_snippet_13

LANGUAGE: tsx
CODE:
```
import type { Metadata } from 'next'

export const metadata: Metadata = {
  robots: {
    index: true,
    follow: true,
    nocache: false,
    googleBot: {
      index: true,
      follow: true,
      noimageindex: false,
      'max-video-preview': -1,
      'max-image-preview': 'large',
      'max-snippet': -1,
    },
  },
}
```

LANGUAGE: html
CODE:
```
<meta name="robots" content="index, follow" />
<meta
  name="googlebot"
  content="index, follow, max-video-preview:-1, max-image-preview:large, max-snippet:-1"
/>
```

----------------------------------------

TITLE: Lazy Load Client Components with next/dynamic
DESCRIPTION: Demonstrates how to use `next/dynamic` to lazy load Client Components in Next.js. It shows examples of immediate loading into a separate bundle, on-demand loading based on a condition, and client-side only loading by disabling Server-Side Rendering (SSR) for specific components.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/lazy-loading.mdx#_snippet_0

LANGUAGE: jsx
CODE:
```
'use client'

import { useState } from 'react'
import dynamic from 'next/dynamic'

// Client Components:
const ComponentA = dynamic(() => import('../components/A'))
const ComponentB = dynamic(() => import('../components/B'))
const ComponentC = dynamic(() => import('../components/C'), { ssr: false })

export default function ClientComponentExample() {
  const [showMore, setShowMore] = useState(false)

  return (
    <div>
      {/* Load immediately, but in a separate client bundle */}
      <ComponentA />

      {/* Load on demand, only when/if the condition is met */}
      {showMore && <ComponentB />}
      <button onClick={() => setShowMore(!showMore)}>Toggle</button>

      {/* Load only on the client side */}
      <ComponentC />
    </div>
  )
}
```

----------------------------------------

TITLE: Parse Request Body in Next.js Route Handlers
DESCRIPTION: Explains how to read the request body using standard Web API methods like `request.json()`. The `POST` handler parses the incoming JSON body and returns it as a JSON response, demonstrating basic request payload processing.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/03-file-conventions/route.mdx#_snippet_17

LANGUAGE: TypeScript
CODE:
```
export async function POST(request: Request) {
  const res = await request.json()
  return Response.json({ res })
}
```

LANGUAGE: JavaScript
CODE:
```
export async function POST(request) {
  const res = await request.json()
  return Response.json({ res })
}
```

----------------------------------------

TITLE: Manage Cookies in Next.js Middleware
DESCRIPTION: This snippet demonstrates how to interact with cookies in Next.js middleware. It shows how to retrieve cookies from an incoming `NextRequest` using `get`, `getAll`, `has`, and `delete`, and how to set cookies on an outgoing `NextResponse` using `set`. The `RequestCookies` and `ResponseCookies` APIs are utilized for these operations.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/03-file-conventions/middleware.mdx#_snippet_17

LANGUAGE: typescript
CODE:
```
import { NextResponse } from 'next/server'
import type { NextRequest } from 'next/server'

export function middleware(request: NextRequest) {
  // Assume a "Cookie:nextjs=fast" header to be present on the incoming request
  // Getting cookies from the request using the `RequestCookies` API
  let cookie = request.cookies.get('nextjs')
  console.log(cookie) // => { name: 'nextjs', value: 'fast', Path: '/' }
  const allCookies = request.cookies.getAll()
  console.log(allCookies) // => [{ name: 'nextjs', value: 'fast' }]

  request.cookies.has('nextjs') // => true
  request.cookies.delete('nextjs')
  request.cookies.has('nextjs') // => false

  // Setting cookies on the response using the `ResponseCookies` API
  const response = NextResponse.next()
  response.cookies.set('vercel', 'fast')
  response.cookies.set({
    name: 'vercel',
    value: 'fast',
    path: '/',
  })
  cookie = response.cookies.get('vercel')
  console.log(cookie) // => { name: 'vercel', value: 'fast', Path: '/' }
  // The outgoing response will have a `Set-Cookie:vercel=fast;path=/` header.

  return response
}
```

LANGUAGE: javascript
CODE:
```
import { NextResponse } from 'next/server'

export function middleware(request) {
  // Assume a "Cookie:nextjs=fast" header to be present on the incoming request
  // Getting cookies from the request using the `RequestCookies` API
  let cookie = request.cookies.get('nextjs')
  console.log(cookie) // => { name: 'nextjs', value: 'fast', Path: '/' }
  const allCookies = request.cookies.getAll()
  console.log(allCookies) // => [{ name: 'nextjs', value: 'fast' }]

  request.cookies.has('nextjs') // => true
  request.cookies.delete('nextjs')
  request.cookies.has('nextjs') // => false

  // Setting cookies on the response using the `ResponseCookies` API
  const response = NextResponse.next()
  response.cookies.set('vercel', 'fast')
  response.cookies.set({
    name: 'vercel',
    value: 'fast',
    path: '/',
  })
  cookie = response.cookies.get('vercel')
  console.log(cookie) // => { name: 'vercel', value: 'fast', Path: '/' }
  // The outgoing response will have a `Set-Cookie:vercel=fast;path=/test` header.

  return response
}
```

----------------------------------------

TITLE: Fetch Data in Next.js Server Component for Streaming
DESCRIPTION: This snippet demonstrates fetching data in a Server Component without awaiting the promise. The promise is then passed as a prop to a Client Component, enabling data streaming and allowing React's Suspense to manage loading states.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/07-fetching-data.mdx#_snippet_2

LANGUAGE: tsx
CODE:
```
import Posts from '@/app/ui/posts
import { Suspense } from 'react'

export default function Page() {
  // Don't await the data fetching function
  const posts = getPosts()

  return (
    <Suspense fallback={<div>Loading...</div>}>
      <Posts posts={posts} />
    </Suspense>
  )
}
```

LANGUAGE: jsx
CODE:
```
import Posts from '@/app/ui/posts
import { Suspense } from 'react'

export default function Page() {
  // Don't await the data fetching function
  const posts = getPosts()

  return (
    <Suspense fallback={<div>Loading...</div>}>
      <Posts posts={posts} />
    </Suspense>
  )
}
```

----------------------------------------

TITLE: Create reusable cached data fetching utility
DESCRIPTION: This utility demonstrates creating a reusable `preload` function and a cached `getItem` function using React's `cache` and the `server-only` package. This ensures data fetching is optimized and executed exclusively on the server, preventing client-side execution.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/07-fetching-data.mdx#_snippet_12

LANGUAGE: ts
CODE:
```
import { cache } from 'react'
import 'server-only'
import { getItem } from '@/lib/data'

export const preload = (id: string) => {
  void getItem(id)
}

export const getItem = cache(async (id: string) => {
  // ...
})
```

LANGUAGE: js
CODE:
```
import { cache } from 'react'
import 'server-only'
import { getItem } from '@/lib/data'

export const preload = (id) => {
  void getItem(id)
}

export const getItem = cache(async (id) => {
  // ...
})
```

----------------------------------------

TITLE: Set Cache Lifetime with options.next.revalidate
DESCRIPTION: Shows how to use the `revalidate` option within `options.next` to specify the cache lifetime of a fetched resource in seconds. This allows fine-grained control over data revalidation.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/04-functions/fetch.mdx#_snippet_2

LANGUAGE: ts
CODE:
```
fetch(`https://...`, { next: { revalidate: false | 0 | number } })
```

----------------------------------------

TITLE: Run Next.js Development Server
DESCRIPTION: This command initiates the Next.js development server, allowing you to run and test your application locally. It provides options for different package managers commonly used in JavaScript projects.
SOURCE: https://github.com/vercel/next.js/blob/canary/packages/create-next-app/templates/app-api/ts/README-template.md#_snippet_0

LANGUAGE: bash
CODE:
```
npm run dev
# or
yarn dev
# or
pnpm dev
# or
bun dev
```

----------------------------------------

TITLE: Run Next.js Development Server
DESCRIPTION: Commands to start the Next.js development server locally. The server will typically run on http://localhost:3000 and automatically update the page in the browser as you edit files.
SOURCE: https://github.com/vercel/next.js/blob/canary/packages/create-next-app/templates/default/js/README-template.md#_snippet_0

LANGUAGE: bash
CODE:
```
npm run dev
# or
yarn dev
# or
pnpm dev
# or
bun dev
```

----------------------------------------

TITLE: Server-side Form Validation with Zod in Next.js Server Actions
DESCRIPTION: Demonstrates server-side form validation using the Zod library in Next.js server actions. It defines a schema for email validation and uses `safeParse` to check form data, returning errors if validation fails.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/forms.mdx#_snippet_3

LANGUAGE: tsx
CODE:
```
'use server'

import { z } from 'zod'

const schema = z.object({
  email: z.string({
    invalid_type_error: 'Invalid Email',
  }),
})

export default async function createUser(formData: FormData) {
  const validatedFields = schema.safeParse({
    email: formData.get('email'),
  })

  // Return early if the form data is invalid
  if (!validatedFields.success) {
    return {
      errors: validatedFields.error.flatten().fieldErrors,
    }
  }

  // Mutate data
}
```

LANGUAGE: jsx
CODE:
```
'use server'

import { z } from 'zod'

const schema = z.object({
  email: z.string({
    invalid_type_error: 'Invalid Email',
  }),
})

export default async function createsUser(formData) {
  const validatedFields = schema.safeParse({
    email: formData.get('email'),
  })

  // Return early if the form data is invalid
  if (!validatedFields.success) {
    return {
      errors: validatedFields.error.flatten().fieldErrors,
    }
  }

  // Mutate data
}
```

----------------------------------------

TITLE: Running Next.js in Development Mode (Bash)
DESCRIPTION: These commands install project dependencies (`npm install` or `yarn install`) and then start the Next.js development server (`npm run dev` or `yarn dev`), making the application accessible locally at `http://localhost:3000`.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-datocms/README.md#_snippet_5

LANGUAGE: bash
CODE:
```
npm install
npm run dev

# or

yarn install
yarn dev
```

----------------------------------------

TITLE: Implement Streaming with Suspense in Next.js App Router
DESCRIPTION: This example demonstrates how to use React's `Suspense` component within the Next.js App Router to manage asynchronous UI components. It allows for displaying a fallback UI (e.g., 'Loading feed...') while data is being fetched, improving the perceived performance through streaming server rendering and selective hydration.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/03-file-conventions/loading.mdx#_snippet_3

LANGUAGE: tsx
CODE:
```
import { Suspense } from 'react'
import { PostFeed, Weather } from './Components'

export default function Posts() {
  return (
    <section>
      <Suspense fallback={<p>Loading feed...</p>}>
        <PostFeed />
      </Suspense>
      <Suspense fallback={<p>Loading weather...</p>}>
        <Weather />
      </Suspense>
    </section>
  )
}
```

LANGUAGE: jsx
CODE:
```
import { Suspense } from 'react'
import { PostFeed, Weather } from './Components'

export default function Posts() {
  return (
    <section>
      <Suspense fallback={<p>Loading feed...</p>}>
        <PostFeed />
      </Suspense>
      <Suspense fallback={<p>Loading weather...</p>}>
        <Weather />
      </Suspense>
    </section>
  )
}
```

----------------------------------------

TITLE: Next.js Link Component Basic Usage in App Router (TSX)
DESCRIPTION: Illustrates a minimum working example of the Next.js `<Link>` component, including the necessary import statement, for use within the App Router. This code is runnable without additional configuration.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/04-community/01-contribution-guide.mdx#_snippet_8

LANGUAGE: tsx
CODE:
```
import Link from 'next/link'

export default function Page() {
  return <Link href="/about">About</Link>
}
```

----------------------------------------

TITLE: Define a Basic Server Action in Next.js
DESCRIPTION: This snippet illustrates how to define a simple Server Action in Next.js by marking an asynchronous function with `'use server'`. Server Actions allow for direct server-side logic execution without manual API endpoint creation.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/single-page-applications.mdx#_snippet_7

LANGUAGE: tsx
CODE:
```
'use server'

export async function create() {}
```

LANGUAGE: js
CODE:
```
'use server'

export async function create() {}
```

----------------------------------------

TITLE: Migrate Next.js Link Component Usage
DESCRIPTION: This code snippet illustrates the change in the Next.js Link component's usage between version 12 and 13. In Next.js 13, the `<a>` tag is no longer required as a direct child of `<Link>`, simplifying its syntax and always rendering an `<a>` tag under the hood.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/migrating/app-router-migration.mdx#_snippet_2

LANGUAGE: jsx
CODE:
```
import Link from 'next/link'

// Next.js 12: `<a>` has to be nested otherwise it's excluded
<Link href="/about">
  <a>About</a>
</Link>

// Next.js 13: `<Link>` always renders `<a>` under the hood
<Link href="/about">
  About
</Link>
```

----------------------------------------

TITLE: Next.js Nested Route File Conventions
DESCRIPTION: Defines the file and folder naming conventions for creating nested routes in Next.js applications, where each folder represents a route segment.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/02-project-structure.mdx#_snippet_3

LANGUAGE: APIDOC
CODE:
```
`folder`: Route segment
`folder/folder`: Nested route segment
```

----------------------------------------

TITLE: Define Server Functions in dedicated files (TypeScript/JavaScript)
DESCRIPTION: Demonstrates how to define Server Functions in a dedicated file (e.g., app/lib/actions.ts or .js) by placing the 'use server' directive at the top of asynchronous functions. These functions can then be imported and used for data mutations like creating or deleting posts.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/08-updating-data.mdx#_snippet_0

LANGUAGE: ts
CODE:
```
export async function createPost(formData: FormData) {
  'use server'
  const title = formData.get('title')
  const content = formData.get('content')

  // Update data
  // Revalidate cache
}

export async function deletePost(formData: FormData) {
  'use server'
  const id = formData.get('id')

  // Update data
  // Revalidate cache
}
```

LANGUAGE: js
CODE:
```
export async function createPost(formData) {
  'use server'
  const title = formData.get('title')
  const content = formData.get('content')

  // Update data
  // Revalidate cache
}

export async function deletePost(formData) {
  'use server'
  const id = formData.get('id')

  // Update data
  // Revalidate cache
}
```

----------------------------------------

TITLE: Convert React Class Component to Function Component in Next.js
DESCRIPTION: This snippet demonstrates how to refactor a React Class Component into a Function Component, which is compatible with Next.js Server Components. This is the recommended approach to resolve the error of rendering a class component directly in a server component.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/class-component-in-server-component.mdx#_snippet_0

LANGUAGE: jsx
CODE:
```
export default class Page extends React.Component {
  render() {
    return <p>Hello world</p>
  }
}
```

LANGUAGE: jsx
CODE:
```
export default function Page() {
  return <p>Hello world</p>
}
```

----------------------------------------

TITLE: Create a Nested Layout for a Route Segment in Next.js
DESCRIPTION: This snippet illustrates how to create a nested layout for a specific route segment, such as `/blog`. By adding a `layout.tsx` or `layout.js` file inside the `app/blog` directory, this layout will automatically wrap all child pages and layouts within that segment, receiving `children` as a prop.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/03-layouts-and-pages.mdx#_snippet_4

LANGUAGE: tsx
CODE:
```
export default function BlogLayout({
  children,
}: {
  children: React.ReactNode
}) {
  return <section>{children}</section>
}
```

LANGUAGE: jsx
CODE:
```
export default function BlogLayout({ children }) {
  return <section>{children}</section>
}
```

----------------------------------------

TITLE: Configure Time-based Revalidation with fetch
DESCRIPTION: Demonstrates how to set a time-based revalidation interval for fetched data using the `next.revalidate` option in Next.js, ensuring data is revalidated after a specified duration.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/caching.mdx#_snippet_2

LANGUAGE: js
CODE:
```
// Revalidate at most every hour
fetch('https://...', { next: { revalidate: 3600 } })
```

----------------------------------------

TITLE: Handle Webhook for Route Revalidation in Next.js
DESCRIPTION: This Route Handler demonstrates how to receive a webhook notification from a third-party application, such as a CMS, to trigger a route revalidation. It verifies a secret token and a tag parameter before calling `revalidateTag` to update cached content.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/backend-for-frontend.mdx#_snippet_10

LANGUAGE: typescript
CODE:
```
import { type NextRequest, NextResponse } from 'next/server'

export async function GET(request: NextRequest) {
  const token = request.nextUrl.searchParams.get('token')

  if (token !== process.env.REVALIDATE_SECRET_TOKEN) {
    return NextResponse.json({ success: false }, { status: 401 })
  }

  const tag = request.nextUrl.searchParams.get('tag')

  if (!tag) {
    return NextResponse.json({ success: false }, { status: 400 })
  }

  revalidateTag(tag)

  return NextResponse.json({ success: true })
}
```

LANGUAGE: javascript
CODE:
```
import { NextResponse } from 'next/server'

export async function GET(request) {
  const token = request.nextUrl.searchParams.get('token')

  if (token !== process.env.REVALIDATE_SECRET_TOKEN) {
    return NextResponse.json({ success: false }, { status: 401 })
  }

  const tag = request.nextUrl.searchParams.get('tag')

  if (!tag) {
    return NextResponse.json({ success: false }, { status: 400 })
  }

  revalidateTag(tag)

  return NextResponse.json({ success: true })
}
```

----------------------------------------

TITLE: Next.js App Directory: generateStaticParams Function API
DESCRIPTION: API reference for the `generateStaticParams` function in the Next.js `app` directory, detailing its purpose, return shape, and usage context.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/migrating/app-router-migration.mdx#_snippet_24

LANGUAGE: APIDOC
CODE:
```
generateStaticParams(): Array<Object>
  Description: Replaces getStaticPaths in the app directory. Used to define dynamic paths that should be pre-rendered at build time.
  Return Shape: An array of segment objects (e.g., [{ id: '1' }, { id: '2' }]).
  Usage Context: Can be used inside layouts.
```

----------------------------------------

TITLE: Link to Dynamic Paths using String Interpolation in Next.js
DESCRIPTION: Illustrates how to construct links for dynamic route segments in Next.js by using JavaScript string interpolation with the `Link` component. It also highlights the use of `encodeURIComponent` for URL safety.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/03-building-your-application/01-routing/03-linking-and-navigating.mdx#_snippet_1

LANGUAGE: jsx
CODE:
```
import Link from 'next/link'

function Posts({ posts }) {
  return (
    <ul>
      {posts.map((post) => (
        <li key={post.id}>
          <Link href={`/blog/${encodeURIComponent(post.slug)}`}>
            {post.title}
          </Link>
        </li>
      ))}
    </ul>
  )
}

export default Posts
```

----------------------------------------

TITLE: Update `package.json` Scripts for Next.js
DESCRIPTION: Provides the essential `scripts` configuration for `package.json` to run Next.js development, build, and start commands.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/migrating/from-vite.mdx#_snippet_17

LANGUAGE: json
CODE:
```
{
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start"
  }
}
```

----------------------------------------

TITLE: Rewrite URL with NextResponse
DESCRIPTION: Produces a response that internally rewrites (proxies) the request to a different URL while preserving the original URL shown in the browser.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/04-functions/next-response.mdx#_snippet_16

LANGUAGE: TypeScript
CODE:
```
import { NextResponse } from 'next/server'

// Incoming request: /about, browser shows /about
// Rewritten request: /proxy, browser shows /about
return NextResponse.rewrite(new URL('/proxy', request.url))
```

----------------------------------------

TITLE: Performing Redirects with NextResponse - JavaScript
DESCRIPTION: The `NextResponse.redirect` static method creates a `NextResponse` instance configured for an HTTP redirect. It validates the provided URL and ensures the status code is one of the allowed redirect types (301, 302, 303, 307, 308). It sets the 'Location' header and returns a new `NextResponse` with the specified status.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/next-response/output.md#_snippet_16

LANGUAGE: JavaScript
CODE:
```
    static redirect(url, init) {
        const status = typeof init === 'number' ? init : (init == null ? void 0 : init.status) ?? 307;
        if (!REDIRECTS.has(status)) {
            throw new RangeError('Failed to execute "redirect" on "response": Invalid status code');
        }
        const initObj = typeof init === 'object' ? init : {};
        const headers = new Headers(initObj == null ? void 0 : initObj.headers);
        headers.set('Location', validateURL(url));
        return new NextResponse(null, {
            ...initObj,
            headers,
            status
        });
    }
```

----------------------------------------

TITLE: Server-Side User Signup Function in Next.js
DESCRIPTION: This asynchronous function, `signup`, is designed for server-side user registration. It takes form state and data, validates fields, hashes the user's password using `bcrypt`, and inserts the new user's details into a database. It returns a message indicating success or failure of the account creation.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/authentication.mdx#_snippet_7

LANGUAGE: tsx
CODE:
```
export async function signup(state: FormState, formData: FormData) {
  // 1. Validate form fields
  // ...

  // 2. Prepare data for insertion into database
  const { name, email, password } = validatedFields.data
  // e.g. Hash the user's password before storing it
  const hashedPassword = await bcrypt.hash(password, 10)

  // 3. Insert the user into the database or call an Auth Library's API
  const data = await db
    .insert(users)
    .values({
      name,
      email,
      password: hashedPassword,
    })
    .returning({ id: users.id })

  const user = data[0]

  if (!user) {
    return {
      message: 'An error occurred while creating your account.',
    }
  }

  // TODO:
  // 4. Create user session
  // 5. Redirect user
}
```

LANGUAGE: jsx
CODE:
```
export async function signup(state, formData) {
  // 1. Validate form fields
  // ...

  // 2. Prepare data for insertion into database
  const { name, email, password } = validatedFields.data
  // e.g. Hash the user's password before storing it
  const hashedPassword = await bcrypt.hash(password, 10)

  // 3. Insert the user into the database or call an Library API
  const data = await db
    .insert(users)
    .values({
      name,
      email,
      password: hashedPassword,
    })
    .returning({ id: users.id })

  const user = data[0]

  if (!user) {
    return {
      message: 'An error occurred while creating your account.',
    }
  }

  // TODO:
  // 4. Create user session
  // 5. Redirect user
}
```

----------------------------------------

TITLE: Set Cache-Control Headers in Next.js getServerSideProps
DESCRIPTION: This code snippet demonstrates how to configure HTTP `Cache-Control` headers within the `getServerSideProps` function in a Next.js page. It sets a public cache with a fresh duration of 10 seconds (`s-maxage=10`) and allows stale content to be served for up to 59 seconds while a revalidation occurs in the background (`stale-while-revalidate=59`). This helps optimize performance by caching server-side rendered content.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/03-building-your-application/03-data-fetching/03-get-server-side-props.mdx#_snippet_1

LANGUAGE: jsx
CODE:
```
// This value is considered fresh for ten seconds (s-maxage=10).
// If a request is repeated within the next 10 seconds, the previously
// cached value will still be fresh. If the request is repeated before 59 seconds,
// the cached value will be stale but still render (stale-while-revalidate=59).
//
// In the background, a revalidation request will be made to populate the cache
// with a fresh value. If you refresh the page, you will see the new value.
export async function getServerSideProps({ req, res }) {
  res.setHeader(
    'Cache-Control',
    'public, s-maxage=10, stale-while-revalidate=59'
  )

  return {
    props: {},
  }
}
```

----------------------------------------

TITLE: Next.js Route Handlers (App Router)
DESCRIPTION: Explains the use of Route Handlers for accessing backend resources from Client Components, with a caution against calling them from Server Components.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/production-checklist.mdx#_snippet_7

LANGUAGE: APIDOC
CODE:
```
File Convention: app/api/route.js (Route Handlers)
  Usage: Access backend resources from Client Components
  Caution: Avoid calling from Server Components (prevents additional server requests)
```

----------------------------------------

TITLE: Submit Form with Next.js Server Action
DESCRIPTION: This code demonstrates how to create a client-side form that utilizes a Next.js Server Action for data mutations. The `action` prop of the `Form` component is directly assigned to a server-side function, `createPost`, which will handle the form submission.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/02-components/form.mdx#_snippet_12

LANGUAGE: tsx
CODE:
```
import Form from 'next/form'
import { createPost } from '@/posts/actions'

export default function Page() {
  return (
    <Form action={createPost}>
      <input name="title" />
      {/* ... */}
      <button type="submit">Create Post</button>
    </Form>
  )
}
```

LANGUAGE: jsx
CODE:
```
import Form from 'next/form'
import { createPost } from '@/posts/actions'

export default function Page() {
  return (
    <Form action={createPost}>
      <input name="title" />
      {/* ... */}
      <button type="submit">Create Post</button>
    </Form>
  )
}
```

----------------------------------------

TITLE: Next.js Metadata Tag Handling Recommendations
DESCRIPTION: This section provides recommendations for handling various standard HTML metadata tags within a Next.js application. It outlines the preferred methods, such as using specific Next.js functions or rendering tags directly in layouts/pages, to ensure compatibility and optimal performance.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/04-functions/generate-metadata.mdx#_snippet_39

LANGUAGE: APIDOC
CODE:
```
Metadata Tag Recommendations:
  <meta http-equiv="...">: Use appropriate HTTP Headers via redirect(), Middleware, Security Headers
  <base>: Render the tag in the layout or page itself.
  <noscript>: Render the tag in the layout or page itself.
  <style>: Learn more about styling in Next.js
  <script>: Learn more about using scripts
  <link rel="stylesheet" />: import stylesheets directly in the layout or page itself.
  <link rel="preload />: Use ReactDOM preload method
  <link rel="preconnect" />: Use ReactDOM preconnect method
  <link rel="dns-prefetch" />: Use ReactDOM prefetchDNS method
```

----------------------------------------

TITLE: Fetch Data in Next.js Server Components with ORM or Database
DESCRIPTION: This example illustrates how to perform direct database queries within a Next.js Server Component using an ORM or database client. Since Server Components run on the server, direct database access is secure. The component is an asynchronous function that awaits a database call to retrieve all posts, which are then rendered.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/07-fetching-data.mdx#_snippet_1

LANGUAGE: tsx
CODE:
```
import { db, posts } from '@/lib/db'

export default async function Page() {
  const allPosts = await db.select().from(posts)
  return (
    <ul>
      {allPosts.map((post) => (
        <li key={post.id}>{post.title}</li>
      ))}
    </ul>
  )
}
```

LANGUAGE: jsx
CODE:
```
import { db, posts } from '@/lib/db'

export default async function Page() {
  const allPosts = await db.select().from(posts)
  return (
    <ul>
      {allPosts.map((post) => (
        <li key={post.id}>{post.title}</li>
      ))}
    </ul>
  )
}
```

----------------------------------------

TITLE: Define Next.js Client Component in App Directory
DESCRIPTION: This snippet demonstrates how to create a Client Component within the Next.js `app` directory. By adding the `'use client'` directive, the component gains access to browser APIs, state, and effects, similar to components in the `pages` directory, while still benefiting from server-side prerendering.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/migrating/app-router-migration.mdx#_snippet_10

LANGUAGE: tsx
CODE:
```
'use client'

// This is a Client Component (same as components in the `pages` directory)
// It receives data as props, has access to state and effects, and is
// prerendered on the server during the initial page load.
export default function HomePage({ recentPosts }) {
  return (
    <div>
      {recentPosts.map((post) => (
        <div key={post.id}>{post.title}</div>
      ))}
    </div>
  )
}
```

LANGUAGE: jsx
CODE:
```
'use client'

// This is a Client Component. It receives data as props and
// has access to state and effects just like Page components
// in the `pages` directory.
export default function HomePage({ recentPosts }) {
  return (
    <div>
      {recentPosts.map((post) => (
        <div key={post.id}>{post.title}</div>
      ))}
    </div>
  )
}
```

----------------------------------------

TITLE: Upgrading Next.js Dependencies to Version 14 (Bash)
DESCRIPTION: Provides commands to upgrade Next.js, React, React DOM, and `eslint-config-next` to their version 14 compatible releases. These commands should be run in your project's terminal using your preferred package manager (npm, yarn, pnpm, or bun). Ensure `@types/react` and `@types/react-dom` are also updated if using TypeScript.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/upgrading/version-14.mdx#_snippet_0

LANGUAGE: bash
CODE:
```
npm i next@next-14 react@18 react-dom@18 && npm i eslint-config-next@next-14 -D
```

LANGUAGE: bash
CODE:
```
yarn add next@next-14 react@18 react-dom@18 && yarn add eslint-config-next@next-14 -D
```

LANGUAGE: bash
CODE:
```
pnpm i next@next-14 react@18 react-dom@18 && pnpm i eslint-config-next@next-14 -D
```

LANGUAGE: bash
CODE:
```
bun add next@next-14 react@18 react-dom@18 && bun add eslint-config-next@next-14 -D
```

----------------------------------------

TITLE: Secure Server Actions with Next.js unauthorized function
DESCRIPTION: Illustrates how to integrate the `unauthorized` function into Next.js Server Actions to protect mutations. It ensures that only authenticated users can perform specific data modifications by checking the session and invoking `unauthorized()` if the user is not authenticated.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/04-functions/unauthorized.mdx#_snippet_3

LANGUAGE: ts
CODE:
```
'use server'

import { verifySession } from '@/app/lib/dal'
import { unauthorized } from 'next/navigation'
import db from '@/app/lib/db'

export async function updateProfile(data: FormData) {
  const session = await verifySession()

  // If the user is not authenticated, return a 401
  if (!session) {
    unauthorized()
  }

  // Proceed with mutation
  // ...
}
```

LANGUAGE: js
CODE:
```
'use server'

import { verifySession } from '@/app/lib/dal'
import { unauthorized } from 'next/navigation'
import db from '@/app/lib/db'

export async function updateProfile(data) {
  const session = await verifySession()

  // If the user is not authenticated, return a 401
  if (!session) {
    unauthorized()
  }

  // Proceed with mutation
  // ...
}
```

----------------------------------------

TITLE: Next.js App Directory: Nested Layouts (After getLayout Migration)
DESCRIPTION: Demonstrates how the `getLayout` pattern is replaced by native nested layouts in the Next.js `app` directory. It includes the new page component, a client-side layout component, and a server-side layout component that wraps it.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/migrating/app-router-migration.mdx#_snippet_7

LANGUAGE: jsx
CODE:
```
export default function Page() {
  return <p>My Page</p>
}
```

LANGUAGE: jsx
CODE:
```
'use client' // this directive should be at top of the file, before any imports.

// This is a Client Component
export default function DashboardLayout({ children }) {
  return (
    <div>
      <h2>My Dashboard</h2>
      {children}
    </div>
  )
}
```

LANGUAGE: jsx
CODE:
```
import DashboardLayout from './DashboardLayout'

// This is a Server Component
export default function Layout({ children }) {
  return <DashboardLayout>{children}</DashboardLayout>
}
```

----------------------------------------

TITLE: Loading Google Analytics for All Routes with `@next/third-parties`
DESCRIPTION: This snippet demonstrates how to integrate Google Analytics 4 (GA4) across all routes of a Next.js application by including the `GoogleAnalytics` component from `@next/third-parties/google` in the root layout. It requires passing your GA4 measurement ID (`gaId`) to the component. By default, the script fetches after hydration, optimizing performance.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/next-script-for-ga.mdx#_snippet_0

LANGUAGE: TypeScript
CODE:
```
import { GoogleAnalytics } from '@next/third-parties/google'

export default function RootLayout({
  children,
}: {
  children: React.ReactNode
}) {
  return (
    <html lang="en">
      <body>{children}</body>
      <GoogleAnalytics gaId="G-XYZ" />
    </html>
  )
}
```

LANGUAGE: JavaScript
CODE:
```
import { GoogleAnalytics } from '@next/third-parties/google'

export default function RootLayout({ children }) {
  return (
    <html lang="en">
      <body>{children}</body>
      <GoogleAnalytics gaId="G-XYZ" />
    </html>
  )
}
```

----------------------------------------

TITLE: Implement Streaming Responses with AI SDK in Next.js Route Handlers
DESCRIPTION: Shows how to use the `@ai-sdk/openai` and `ai` libraries to stream text responses, commonly used with Large Language Models (LLMs). The `POST` handler processes incoming messages and streams the AI-generated content back to the client.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/03-file-conventions/route.mdx#_snippet_15

LANGUAGE: TypeScript
CODE:
```
import { openai } from '@ai-sdk/openai'
import { StreamingTextResponse, streamText } from 'ai'

export async function POST(req: Request) {
  const { messages } = await req.json()
  const result = await streamText({
    model: openai('gpt-4-turbo'),
    messages,
  })

  return new StreamingTextResponse(result.toAIStream())
}
```

LANGUAGE: JavaScript
CODE:
```
import { openai } from '@ai-sdk/openai'
import { StreamingTextResponse, streamText } from 'ai'

export async function POST(req) {
  const { messages } = await req.json()
  const result = await streamText({
    model: openai('gpt-4-turbo'),
    messages,
  })

  return new StreamingTextResponse(result.toAIStream())
}
```

----------------------------------------

TITLE: Redirecting to Localized Paths using Next.js Middleware
DESCRIPTION: This Next.js middleware function handles internationalized routing by redirecting users to a locale-prefixed path if one is not already present. It checks if the incoming request's pathname contains a supported locale and, if not, prepends the determined preferred locale to the URL before redirecting, ensuring all requests are locale-aware.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/internationalization.mdx#_snippet_1

LANGUAGE: javascript
CODE:
```
import { NextResponse } from "next/server";

let locales = ['en-US', 'nl-NL', 'nl']

// Get the preferred locale, similar to the above or using a library
function getLocale(request) { ... }

export function middleware(request) {
  // Check if there is any supported locale in the pathname
  const { pathname } = request.nextUrl
  const pathnameHasLocale = locales.some(
    (locale) => pathname.startsWith(`/${locale}/`) || pathname === `/${locale}`
  )

  if (pathnameHasLocale) return

  // Redirect if there is no locale
  const locale = getLocale(request)
  request.nextUrl.pathname = `/${locale}${pathname}`
  // e.g. incoming request is /products
  // The new URL is now /en-US/products
  return NextResponse.redirect(request.nextUrl)
}

export const config = {
  matcher: [
    // Skip all internal paths (_next)
    '/((?!_next).* )',
    // Optional: only run on root (/) URL
    // '/'
  ]
}
```

----------------------------------------

TITLE: Store Session Secret Key in Environment Variables
DESCRIPTION: An example of how to store the generated session secret key in a `.env` file. This makes the key accessible to the application as an environment variable, promoting secure configuration.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/authentication.mdx#_snippet_12

LANGUAGE: Bash
CODE:
```
SESSION_SECRET=your_secret_key
```

----------------------------------------

TITLE: create-next-app CLI Command-Line Options Reference
DESCRIPTION: Reference for `create-next-app` command-line arguments, enabling non-interactive project setup. Options cover project type (TS/JS), styling (Tailwind), linting (ESLint), routing (App Router), directory structure, build tools (Turbopack), import aliases, package managers, and example bootstrapping.
SOURCE: https://github.com/vercel/next.js/blob/canary/packages/create-next-app/README.md#_snippet_1

LANGUAGE: APIDOC
CODE:
```
Usage: create-next-app [project-directory] [options]

Options:
  -V, --version                        output the version number
  --ts, --typescript

    Initialize as a TypeScript project. (default)

  --js, --javascript

    Initialize as a JavaScript project.

  --tailwind

    Initialize with Tailwind CSS config. (default)

  --eslint

    Initialize with ESLint config.

  --app

    Initialize as an App Router project.

  --src-dir

    Initialize inside a `src/` directory.

  --turbopack

    Enable Turbopack by default for development.

  --import-alias <alias-to-configure>

    Specify import alias to use (default "@/*").

  --empty

    Initialize an empty project.

  --use-npm

    Explicitly tell the CLI to bootstrap the application using npm

  --use-pnpm

    Explicitly tell the CLI to bootstrap the application using pnpm

  --use-yarn

    Explicitly tell the CLI to bootstrap the application using Yarn

  --use-bun

    Explicitly tell the CLI to bootstrap the application using Bun

  -e, --example [name]|[github-url]

    An example to bootstrap the app with. You can use an example name
    from the official Next.js repo or a GitHub URL. The URL can use
    any branch and/or subdirectory

  --example-path <path-to-example>

    In a rare case, your GitHub URL might contain a branch name with
    a slash (e.g. bug/fix-1) and the path to the example (e.g. foo/bar).
    In this case, you must specify the path to the example separately:
    --example-path foo/bar

  --reset-preferences

    Explicitly tell the CLI to reset any stored preferences

  --skip-install

    Explicitly tell the CLI to skip installing packages

  --disable-git

    Explicitly tell the CLI to skip initializing a git repository.

  --yes

    Use previous preferences or defaults for all options that were not
    explicitly specified, without prompting.

  -h, --help                           display help for command
```

----------------------------------------

TITLE: Conditional Redirect with NextResponse.redirect in Next.js Middleware
DESCRIPTION: Demonstrates how to use `NextResponse.redirect` within Next.js Middleware to conditionally redirect users, for example, redirecting unauthenticated users to a login page. The middleware is configured to apply to specific paths using `config.matcher`.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/redirecting.mdx#_snippet_6

LANGUAGE: ts
CODE:
```
import { NextResponse, NextRequest } from 'next/server'
import { authenticate } from 'auth-provider'

export function middleware(request: NextRequest) {
  const isAuthenticated = authenticate(request)

  // If the user is authenticated, continue as normal
  if (isAuthenticated) {
    return NextResponse.next()
  }

  // Redirect to login page if not authenticated
  return NextResponse.redirect(new URL('/login', request.url))
}

export const config = {
  matcher: '/dashboard/:path*',
}
```

LANGUAGE: js
CODE:
```
import { NextResponse } from 'next/server'
import { authenticate } from 'auth-provider'

export function middleware(request) {
  const isAuthenticated = authenticate(request)

  // If the user is authenticated, continue as normal
  if (isAuthenticated) {
    return NextResponse.next()
  }

  // Redirect to login page if not authenticated
  return NextResponse.redirect(new URL('/login', request.url))
}

export const config = {
  matcher: '/dashboard/:path*',
}
```

----------------------------------------

TITLE: Validating Client Input in Next.js
DESCRIPTION: This snippet demonstrates the importance of validating client-side input, such as searchParams, to prevent vulnerabilities. It contrasts an insecure approach of directly trusting client data with a secure method that re-verifies user authorization using server-side cookies and an authentication utility.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/data-security.mdx#_snippet_12

LANGUAGE: tsx
CODE:
```
// BAD: Trusting searchParams directly
export default async function Page({ searchParams }) {
  const isAdmin = searchParams.get('isAdmin')
  if (isAdmin === 'true') {
    // Vulnerable: relies on untrusted client data
    return <AdminPanel />
  }
}

// GOOD: Re-verify every time
import { cookies } from 'next/headers'
import { verifyAdmin } from './auth'

export default async function Page() {
  const token = cookies().get('AUTH_TOKEN')
  const isAdmin = await verifyAdmin(token)

  if (isAdmin) {
    return <AdminPanel />
  }
}
```

----------------------------------------

TITLE: Correct usage: Mark component as Client Component with 'use client'
DESCRIPTION: This code snippet demonstrates the correct way to use a React client hook like `useEffect` by explicitly marking the component as a Client Component. Adding `'use client'` at the top of the file allows the component to use client-side features without error.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/react-client-hook-in-server-component.mdx#_snippet_1

LANGUAGE: jsx
CODE:
```
'use client'

import { useEffect } from 'react'

export default function Example() {
  useEffect(() => {
    console.log('in useEffect')
  })
  return <p>Hello world</p>
}
```

----------------------------------------

TITLE: Define a Next.js Dashboard Layout
DESCRIPTION: This snippet demonstrates how to create a `layout` file for a specific route segment, such as a dashboard. It accepts `children` as a prop to render nested content within the layout.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/03-file-conventions/layout.mdx#_snippet_0

LANGUAGE: tsx
CODE:
```
export default function DashboardLayout({
  children,
}: {
  children: React.ReactNode
}) {
  return <section>{children}</section>
}
```

LANGUAGE: jsx
CODE:
```
export default function DashboardLayout({ children }) {
  return <section>{children}</section>
}
```

----------------------------------------

TITLE: Create Data Transfer Object (DTO) for User Profile
DESCRIPTION: This `tsx` snippet defines `getProfileDTO`, a function within the Data Access Layer responsible for fetching user data and transforming it into a Data Transfer Object (DTO). It uses `getCurrentUser` for authorization checks and applies privacy rules (`canSeeUsername`, `canSeePhoneNumber`) to selectively expose data. This ensures only relevant and authorized information is returned, adhering to API minimization principles and preventing over-fetching or sensitive data exposure.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/data-security.mdx#_snippet_2

LANGUAGE: tsx
CODE:
```
import 'server-only'\nimport { getCurrentUser } from './auth'\n\nfunction canSeeUsername(viewer: User) {\n  // Public info for now, but can change\n  return true\n}\n\nfunction canSeePhoneNumber(viewer: User, team: string) {\n  // Privacy rules\n  return viewer.isAdmin || team === viewer.team\n}\n\nexport async function getProfileDTO(slug: string) {\n  // Don't pass values, read back cached values, also solves context and easier to make it lazy\n\n  // use a database API that supports safe templating of queries\n  const [rows] = await sql`SELECT * FROM user WHERE slug = ${slug}`\n  const userData = rows[0]\n\n  const currentUser = await getCurrentUser()\n\n  // only return the data relevant for this query and not everything\n  // <https://www.w3.org/2001/tag/doc/APIMinimization>\n  return {\n    username: canSeeUsername(currentUser) ? userData.username : null,\n    phonenumber: canSeePhoneNumber(currentUser, userData.team)\n      ? userData.phonenumber\n      : null,\n  }\n}
```

----------------------------------------

TITLE: Statically Importing Local Images for Automatic Sizing in Next.js
DESCRIPTION: Shows how Next.js automatically determines the `width` and `height` of an image when it is statically imported into a component. This approach helps prevent Cumulative Layout Shift (CLS) by providing intrinsic dimensions and can optionally enable a blur-up placeholder during loading.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/12-images.mdx#_snippet_2

LANGUAGE: tsx
CODE:
```
import Image from 'next/image'
import ProfileImage from './profile.png'

export default function Page() {
  return (
    <Image
      src={ProfileImage}
      alt="Picture of the author"
      // width={500} automatically provided
      // height={500} automatically provided
      // blurDataURL="data:..." automatically provided
      // placeholder="blur" // Optional blur-up while loading
    />
  )
}
```

LANGUAGE: jsx
CODE:
```
import Image from 'next/image'
import ProfileImage from './profile.png'

export default function Page() {
  return (
    <Image
      src={ProfileImage}
      alt="Picture of the author"
      // width={500} automatically provided
      // height={500} automatically provided
      // blurDataURL="data:..." automatically provided
      // placeholder="blur" // Optional blur-up while loading
    />
  )
}
```

----------------------------------------

TITLE: Adding HTML and Body Tags to Next.js Root Layout (TypeScript)
DESCRIPTION: This snippet demonstrates the correct way to define the `<html>` and `<body>` tags within a Next.js Root Layout component. It shows how to wrap the `children` prop with these essential HTML tags, which is crucial for resolving the 'Missing Root Layout tags' error and ensuring proper page structure and rendering in a Next.js application.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/missing-root-layout-tags.mdx#_snippet_0

LANGUAGE: TypeScript
CODE:
```
export default function Layout({ children }: { children: React.ReactNode }) {
  return (
    <html>
      <body>
        {children}
      </body>
    </html>
  )
}
```

----------------------------------------

TITLE: Define Inline Cache Profile with `cacheLife` in Next.js
DESCRIPTION: Demonstrates how to set a custom cache profile directly within a function or file using the `unstable_cacheLife` function. The profile is defined as an object with `stale`, `revalidate`, and `expire` properties, allowing fine-grained control over caching behavior for specific use cases.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/04-functions/cacheLife.mdx#_snippet_7

LANGUAGE: tsx
CODE:
```
'use cache'
import { unstable_cacheLife as cacheLife } from 'next/cache'

export default async function Page() {
  cacheLife({
    stale: 3600, // 1 hour
    revalidate: 900, // 15 minutes
    expire: 86400, // 1 day
  })

  return <div>Page</div>
}
```

LANGUAGE: jsx
CODE:
```
'use cache'
import { unstable_cacheLife as cacheLife } from 'next/cache'

export default async function Page() {
  cacheLife({
    stale: 3600, // 1 hour
    revalidate: 900, // 15 minutes
    expire: 86400, // 1 day
  })

  return <div>Page</div>
}
```

----------------------------------------

TITLE: Defining a Basic Next.js Page Component in JavaScript
DESCRIPTION: This snippet defines a default exported function named 'Page', which is the standard way to create a page component in Next.js. It returns a simple paragraph element containing the text 'hello world', demonstrating basic JSX rendering within a functional component.
SOURCE: https://github.com/vercel/next.js/blob/canary/test/e2e/example-file.txt#_snippet_0

LANGUAGE: JavaScript
CODE:
```
export default function Page() {
    return <p>hello world</p>
}
```

----------------------------------------

TITLE: Next.js App Router Data Fetching with `fetch()` and Caching Strategies
DESCRIPTION: Demonstrates how to fetch data in the Next.js App Router using `fetch()` with different caching behaviors: `force-cache` for static data (like `getStaticProps`), `no-store` for dynamic data (like `getServerSideProps`), and `next: { revalidate: N }` for time-based revalidation.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/migrating/app-router-migration.mdx#_snippet_14

LANGUAGE: tsx
CODE:
```
export default async function Page() {
  // This request should be cached until manually invalidated.
  // Similar to `getStaticProps`.
  // `force-cache` is the default and can be omitted.
  const staticData = await fetch(`https://...`, { cache: 'force-cache' })

  // This request should be refetched on every request.
  // Similar to `getServerSideProps`.
  const dynamicData = await fetch(`https://...`, { cache: 'no-store' })

  // This request should be cached with a lifetime of 10 seconds.
  // Similar to `getStaticProps` with the `revalidate` option.
  const revalidatedData = await fetch(`https://...`, {
    next: { revalidate: 10 },
  })

  return <div>...</div>
}
```

LANGUAGE: jsx
CODE:
```
export default async function Page() {
  // This request should be cached until manually invalidated.
  // Similar to `getStaticProps`.
  // `force-cache` is the default and can be omitted.
  const staticData = await fetch(`https://...`, { cache: 'force-cache' })

  // This request should be refetched on every request.
  // Similar to `getServerSideProps`.
  const dynamicData = await fetch(`https://...`, { cache: 'no-store' })

  // This request should be cached with a lifetime of 10 seconds.
  // Similar to `getStaticProps` with the `revalidate` option.
  const revalidatedData = await fetch(`https://...`, {
    next: { revalidate: 10 },
  })

  return <div>...</div>
}
```

----------------------------------------

TITLE: Install Next.js, React, and React DOM manually
DESCRIPTION: Manually install the core Next.js, React, and React DOM packages using various package managers.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/01-installation.mdx#_snippet_1

LANGUAGE: pnpm
CODE:
```
pnpm i next@latest react@latest react-dom@latest
```

LANGUAGE: npm
CODE:
```
npm i next@latest react@latest react-dom@latest
```

LANGUAGE: yarn
CODE:
```
yarn add next@latest react@latest react-dom@latest
```

LANGUAGE: bun
CODE:
```
bun add next@latest react@latest react-dom@latest
```

----------------------------------------

TITLE: Run Next.js Development Server
DESCRIPTION: Commands to start the local development server for a Next.js application. This allows you to view the application in your browser at http://localhost:3000 and enables hot-reloading for development.
SOURCE: https://github.com/vercel/next.js/blob/canary/packages/create-next-app/templates/app-tw/js/README-template.md#_snippet_0

LANGUAGE: bash
CODE:
```
npm run dev
# or
yarn dev
# or
pnpm dev
# or
bun dev
```

----------------------------------------

TITLE: Running Next.js Application in Development (Yarn)
DESCRIPTION: This command starts the Next.js development server using `yarn`, making the application accessible locally, typically at `localhost:3000`, with hot-reloading enabled for development.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-mysql/README.md#_snippet_15

LANGUAGE: bash
CODE:
```
yarn dev
```

----------------------------------------

TITLE: Next.js Project Auditing Checklist
DESCRIPTION: This section provides a comprehensive checklist for auditing Next.js projects, focusing on security and best practices. It highlights key areas such as the Data Access Layer, client and server components, input validation in dynamic routes, and the critical `middleware.tsx` and `route.tsx` files, recommending regular penetration testing.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/data-security.mdx#_snippet_18

LANGUAGE: APIDOC
CODE:
```
Auditing Next.js Projects Recommendations:
- Data Access Layer:
  - Establish an isolated Data Access Layer.
  - Verify database packages and environment variables are not imported outside the Data Access Layer.
- "use client" files:
  - Check if Component props expect private data.
  - Assess if type signatures are overly broad.
- "use server" files:
  - Validate Action arguments within the action or Data Access Layer.
  - Ensure user re-authorization inside the action.
- Dynamic Routes (e.g., /[param]/):
  - Validate all user input parameters.
- middleware.tsx and route.tsx:
  - Conduct thorough audits using traditional security techniques.
  - Implement regular Penetration Testing or Vulnerability Scanning.
```

----------------------------------------

TITLE: Reference Static Assets in Next.js Public Folder
DESCRIPTION: This snippet demonstrates how to reference static assets, such as images, stored in the `public` folder. The `next/image` component is used to display `profile.png` by referencing it from the root path.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/01-installation.mdx#_snippet_8

LANGUAGE: tsx
CODE:
```
import Image from 'next/image'

export default function Page() {
  return <Image src="/profile.png" alt="Profile" width={100} height={100} />
}
```

LANGUAGE: jsx
CODE:
```
import Image from 'next/image'

export default function Page() {
  return <Image src="/profile.png" alt="Profile" width={100} height={100} />
}
```

----------------------------------------

TITLE: Migrate Next.js Link component usage to v13
DESCRIPTION: Illustrates the simplified usage of the Next.js <Link> component in version 13. Unlike version 12, the <a> tag is no longer required as a direct child, as <Link> now automatically renders it and allows prop forwarding.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/02-guides/upgrading/version-13.mdx#_snippet_1

LANGUAGE: jsx
CODE:
```
import Link from 'next/link'

// Next.js 12: `<a>` has to be nested otherwise it's excluded
<Link href="/about">
  <a>About</a>
</Link>

// Next.js 13: `<Link>` always renders `<a>` under the hood
<Link href="/about">
  About
</Link>
```

----------------------------------------

TITLE: Implement Dynamic API Routes in Next.js
DESCRIPTION: This example demonstrates how to create dynamic API routes in Next.js, following the same file naming conventions as dynamic pages. It shows how to access dynamic parameters from the request query and use them in the response, enabling flexible routing based on URL segments.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/03-building-your-application/01-routing/07-api-routes.mdx#_snippet_16

LANGUAGE: ts
CODE:
```
import type { NextApiRequest, NextApiResponse } from 'next'

export default function handler(req: NextApiRequest, res: NextApiResponse) {
  const { pid } = req.query
  res.end(`Post: ${pid}`)
}
```

LANGUAGE: js
CODE:
```
export default function handler(req, res) {
  const { pid } = req.query
  res.end(`Post: ${pid}`)
}
```

----------------------------------------

TITLE: Creating JSON Responses with NextResponse (JavaScript)
DESCRIPTION: The static `json` method is a convenient way to create a `NextResponse` instance that sends a JSON payload. It leverages the standard `Response.json` method and then wraps the resulting response body and initialization options within a new `NextResponse` instance. This is commonly used in API routes or middleware to return structured data.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/next-response/output.md#_snippet_28

LANGUAGE: JavaScript
CODE:
```
    static json(body, init) {
        const response = Response.json(body, init);
        return new NextResponse(response.body, response);
    }
```

----------------------------------------

TITLE: Define Server Actions with Automatic Dead Code Elimination
DESCRIPTION: This example demonstrates how to define Server Actions using the `'use server'` directive. It highlights Next.js's built-in security features: Server Actions that are actually used in the application (like `updateUserAction`) receive secure, encrypted IDs for client reference, while unused actions (like `deleteUserAction`) are automatically removed during the build process, preventing them from becoming publicly accessible endpoints.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/data-security.mdx#_snippet_11

LANGUAGE: JSX
CODE:
```
// app/actions.js
'use server'

// If this action **is** used in our application, Next.js
// will create a secure ID to allow the client to reference
// and call the Server Action.
export async function updateUserAction(formData) {}

// If this action **is not** used in our application, Next.js
// will automatically remove this code during `next build`
// and will not create a public endpoint.
export async function deleteUserAction(formData) {}
```

----------------------------------------

TITLE: Next.js Routing and Rewrite Application Order
DESCRIPTION: This documentation outlines the precise order in which Next.js processes incoming requests, including the application of headers, redirects, different types of rewrites (`beforeFiles`, `afterFiles`, `fallback`), and the serving of static and dynamic content. Understanding this order is crucial for correctly configuring routing logic.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/05-config/01-next-config-js/rewrites.mdx#_snippet_3

LANGUAGE: APIDOC
CODE:
```
Next.js Request Processing Order:
1. Headers: Checked and applied.
2. Redirects: Checked and applied.
3. beforeFiles Rewrites: Checked and applied before all files.
4. Static Files: Served from public directory, _next/static, and non-dynamic pages.
5. afterFiles Rewrites: Checked and applied after pages/public files, before dynamic routes. Dynamic routes/static files checked after each match.
6. Fallback Rewrites: Checked and applied before 404 page, after dynamic routes/all static assets. Note: Not run if getStaticPaths uses fallback: true/'blocking'.
```

----------------------------------------

TITLE: Next.js `cacheLife` Configuration: Longer Duration (After)
DESCRIPTION: Demonstrates adjusting `unstable_cacheLife` to a slightly longer duration (1 minute). This duration is typically sufficient for Next.js to produce a fully or partially prerendered page, improving initial load performance while still providing caching benefits.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/next-prerender-missing-suspense.mdx#_snippet_6

LANGUAGE: jsx
CODE:
```
import { unstable_cacheLife as cacheLife } from 'next/cache'

async function getDashboard() {
  "use cache"
  // This cache will revalidate after 1 minute. It's long enough that
  // Next.js will still produce a fully or partially prerendered page
  cacheLife('minutes')
  return db.query(...)
}

export default async function Page() {
  const data = await getDashboard(token);
  return <Dashboard data={data}>
}
```

----------------------------------------

TITLE: Define Client-Only Component in Next.js
DESCRIPTION: This snippet illustrates how to define a Client Component in Next.js using the 'use client' directive. It imports a client-side App component dynamically with ssr: false to disable server-side rendering for this part of the application, ensuring it runs exclusively on the client.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/migrating/from-vite.mdx#_snippet_9

LANGUAGE: tsx
CODE:
```
'use client'

import React from 'react'
import dynamic from 'next/dynamic'

const App = dynamic(() => import('../../App'), { ssr: false })

export function ClientOnly() {
  return <App />
}
```

LANGUAGE: jsx
CODE:
```
'use client'

import React from 'react'
import dynamic from 'next/dynamic'

const App = dynamic(() => import('../../App'), { ssr: false })

export function ClientOnly() {
  return <App />
}
```

----------------------------------------

TITLE: Read Active Route Segment with useSelectedLayoutSegment
DESCRIPTION: This example demonstrates how to use the `useSelectedLayoutSegment` hook in a Client Component to read the active route segment one level below the layout. It imports the hook from `next/navigation` and displays the current segment.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/04-functions/use-selected-layout-segment.mdx#_snippet_0

LANGUAGE: tsx
CODE:
```
'use client'

import { useSelectedLayoutSegment } from 'next/navigation'

export default function ExampleClientComponent() {
  const segment = useSelectedLayoutSegment()

  return <p>Active segment: {segment}</p>
}
```

LANGUAGE: jsx
CODE:
```
'use client'

import { useSelectedLayoutSegment } from 'next/navigation'

export default function ExampleClientComponent() {
  const segment = useSelectedLayoutSegment()

  return <p>Active segment: {segment}</p>
}
```

----------------------------------------

TITLE: Implement POST Route Handler with Error Handling
DESCRIPTION: Shows how to create a `POST` Route Handler in Next.js, incorporating `try/catch` blocks to manage potential exceptions during operations and return appropriate HTTP status codes based on success or failure.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/backend-for-frontend.mdx#_snippet_2

LANGUAGE: ts
CODE:
```
import { submit } from '@/lib/submit'

export function POST(request: Request) {
  try {
    await submit(request)
    return new Response(null, { status: 204 })
  } catch (reason) {
    const message =
      reason instanceof Error ? reason.message : 'Unexpected error'

    return new Response(message, { status: 500 })
  }
}
```

LANGUAGE: js
CODE:
```
import { submit } from '@/lib/submit'

export function POST(request) {
  try {
    await submit(request)
    return new Response(null, { status: 204 })
  } catch (reason) {
    const message =
      reason instanceof Error ? reason.message : 'Unexpected error'

    return new Response(message, { status: 500 })
  }
}
```

----------------------------------------

TITLE: Access Dynamic Route Parameters (params) in Next.js Page
DESCRIPTION: The `params` prop is a promise that resolves to an object containing dynamic route parameters from the root segment down to the current page. Since it's a promise, you must use `async/await` or React's `use` function to access its values.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/03-file-conventions/page.mdx#_snippet_1

LANGUAGE: tsx
CODE:
```
export default async function Page({
  params,
}: {
  params: Promise<{ slug: string }>
}) {
  const { slug } = await params
}
```

LANGUAGE: jsx
CODE:
```
export default async function Page({ params }) {
  const { slug } = await params
}
```

----------------------------------------

TITLE: Configuring PostCSS for Tailwind CSS in Next.js
DESCRIPTION: Create a `postcss.config.mjs` file in your project root to configure PostCSS. This configuration adds the `@tailwindcss/postcss` plugin, which is necessary for Tailwind CSS to process your styles correctly within the Next.js build pipeline.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/tailwind-css.mdx#_snippet_1

LANGUAGE: javascript
CODE:
```
/** @type {import('tailwindcss').Config} */
export default {
  plugins: {
    '@tailwindcss/postcss': {},
  },
}
```

----------------------------------------

TITLE: Implementing Web Push Server Actions in JavaScript
DESCRIPTION: This JavaScript code defines server actions for managing web push subscriptions and sending notifications. It initializes `web-push` with VAPID details and provides functions to subscribe, unsubscribe, and send notifications to a user's push subscription. In a production environment, subscriptions should be persisted in a database.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/progressive-web-apps.mdx#_snippet_6

LANGUAGE: JavaScript
CODE:
```
'use server';

import webpush from 'web-push';

webpush.setVapidDetails(
  '<mailto:your-email@example.com>',
  process.env.NEXT_PUBLIC_VAPID_PUBLIC_KEY!,
  process.env.VAPID_PRIVATE_KEY!
);

let subscription= null;

export async function subscribeUser(sub) {
  subscription = sub;
  // In a production environment, you would want to store the subscription in a database
  // For example: await db.subscriptions.create({ data: sub })
  return { success: true };
}

export async function unsubscribeUser() {
  subscription = null;
  // In a production environment, you would want to remove the subscription from the database
  // For example: await db.subscriptions.delete({ where: { ... } })
  return { success: true };
}

export async function sendNotification(message) {
  if (!subscription) {
    throw new Error('No subscription available');
  }

  try {
    await webpush.sendNotification(
      subscription,
      JSON.stringify({
        title: 'Test Notification',
        body: message,
        icon: '/icon.png',
      })
    );
    return { success: true };
  } catch (error) {
    console.error('Error sending push notification:', error);
    return { success: false, error: 'Failed to send notification' };
  }
}
```

----------------------------------------

TITLE: Next.js Top-Level File Conventions
DESCRIPTION: Lists essential top-level files in a Next.js project used for configuration, dependency management, middleware, instrumentation, and environment variables.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/02-project-structure.mdx#_snippet_1

LANGUAGE: APIDOC
CODE:
```
next.config.js: Configuration file for Next.js
package.json: Project dependencies and scripts
instrumentation.ts: OpenTelemetry and Instrumentation file
middleware.ts: Next.js request middleware
.env: Environment variables
.env.local: Local environment variables
.env.production: Production environment variables
.env.development: Development environment variables
.eslintrc.json: Configuration file for ESLint
.gitignore: Git files and folders to ignore
next-env.d.ts: TypeScript declaration file for Next.js
tsconfig.json: Configuration file for TypeScript
jsconfig.json: Configuration file for JavaScript
```

----------------------------------------

TITLE: Next.js Server Actions Security Practices
DESCRIPTION: Ensure users are authorized to call Server Actions by reviewing and implementing recommended security practices for Next.js Server Components and Actions.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/production-checklist.mdx#_snippet_20

LANGUAGE: APIDOC
CODE:
```
Next.js Server Actions (Security):
  Purpose: Ensure authorization for Server Action calls.
  Recommendation: Implement robust authorization checks.
```

----------------------------------------

TITLE: Preventing Full Page Client-Side Rendering with useSearchParams and Suspense in Next.js
DESCRIPTION: This example demonstrates how to prevent an entire Next.js page from being deopted into client-side rendering when using `useSearchParams` in a statically rendered route. By wrapping the component that uses `useSearchParams` (e.g., `SearchBar`) in a React `Suspense` boundary, only the dynamic portion is client-side rendered, allowing the rest of the page to remain static. The `SearchBarFallback` component provides a placeholder while the dynamic content loads.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/deopted-into-client-rendering.mdx#_snippet_0

LANGUAGE: tsx
CODE:
```
'use client'

import { useSearchParams } from 'next/navigation'

export default function SearchBar() {
  const searchParams = useSearchParams()

  const search = searchParams.get('search')

  // This will not be logged on the server when using static rendering
  console.log(search)

  return <>Search: {search}</>
}
```

LANGUAGE: tsx
CODE:
```
import { Suspense } from 'react'
import SearchBar from './search-bar'

// This component passed as fallback to the Suspense boundary
// will be rendered in place of the search bar in the initial HTML.
// When the value is available during React hydration the fallback
// will be replaced with the `<SearchBar>` component.
function SearchBarFallback() {
  return <>placeholder</>
}

export default function Page() {
  return (
    <>
      <nav>
        <Suspense fallback={<SearchBarFallback />}>
          <SearchBar />
        </Suspense>
      </nav>
      <h1>Dashboard</h1>
    </>
  )
}
```

----------------------------------------

TITLE: Access Dynamic Route Parameters in Async Layouts
DESCRIPTION: This snippet illustrates how to access dynamic route parameters (`params`) within an asynchronous Next.js layout component. The `params` prop is a promise that resolves to an object containing the route segments. The example shows destructuring the `team` parameter and using it to display dynamic content in the header.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/03-file-conventions/layout.mdx#_snippet_17

LANGUAGE: tsx
CODE:
```
export default async function DashboardLayout({
  children,
  params,
}: {
  children: React.ReactNode
  params: Promise<{ team: string }>
}) {
  const { team } = await params

  return (
    <section>
      <header>
        <h1>Welcome to {team}'s Dashboard</h1>
      </header>
      <main>{children}</main>
    </section>
  )
}
```

LANGUAGE: jsx
CODE:
```
export default async function DashboardLayout({ children, params }) {
  const { team } = await params

  return (
    <section>
      <header>
        <h1>Welcome to {team}'s Dashboard</h1>
      </header>
      <main>{children}</main>
    </section>
  )
}
```

----------------------------------------

TITLE: Define getStaticPaths and getStaticProps for Dynamic Routes in Next.js
DESCRIPTION: This example demonstrates how to use `getStaticPaths` to specify paths for static pre-rendering and `getStaticProps` to fetch data for those paths in a Next.js dynamic route page. It fetches repository data from GitHub API and renders the stargazers count.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/03-building-your-application/03-data-fetching/02-get-static-paths.mdx#_snippet_0

LANGUAGE: tsx
CODE:
```
import type {
  InferGetStaticPropsType,
  GetStaticProps,
  GetStaticPaths,
} from 'next'

type Repo = {
  name: string
  stargazers_count: number
}

export const getStaticPaths = (async () => {
  return {
    paths: [
      {
        params: {
          name: 'next.js',
        },
      },
    ],
    fallback: true,
  }
}) satisfies GetStaticPaths

export const getStaticProps = (async (context) => {
  const res = await fetch('https://api.github.com/repos/vercel/next.js')
  const repo = await res.json()
  return { props: { repo } }
}) satisfies GetStaticProps<{
  repo: Repo
}>

export default function Page({
  repo,
}: InferGetStaticPropsType<typeof getStaticProps>) {
  return repo.stargazers_count
}
```

LANGUAGE: jsx
CODE:
```
export async function getStaticPaths() {
  return {
    paths: [
      {
        params: {
          name: 'next.js',
        },
      },
    ],
    fallback: true,
  }
}

export async function getStaticProps() {
  const res = await fetch('https://api.github.com/repos/vercel/next.js')
  const repo = await res.json()
  return { props: { repo } }
}

export default function Page({ repo }) {
  return repo.stargazers_count
}
```

----------------------------------------

TITLE: revalidateTag Function Signature and Usage
DESCRIPTION: Defines the `revalidateTag` function signature, its single `tag` parameter, and its return type. The `tag` parameter is a case-sensitive string up to 256 characters used to identify cached data for revalidation. It also includes an example of how to add tags to `fetch` requests for caching.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/04-functions/revalidateTag.mdx#_snippet_0

LANGUAGE: APIDOC
CODE:
```
revalidateTag(tag: string): void;

Parameters:
  tag: A string representing the cache tag associated with the data you want to revalidate. Must be less than or equal to 256 characters. This value is case-sensitive.

Returns:
  void (does not return a value)

Example of adding tags to fetch:
fetch(url, { next: { tags: [...] } });
```

----------------------------------------

TITLE: Next.js `<Image>` Component API Overview
DESCRIPTION: Overview of the Next.js `<Image>` component, highlighting its benefits like automatic optimization and dimension setting, and potential issues with styling. It also notes the option to migrate from standard `<img>` tags.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/migrating/from-vite.mdx#_snippet_19

LANGUAGE: APIDOC
CODE:
```
Next.js `<Image>` component:
  - Benefits: Automatic image optimization, automatic `width` and `height` attributes (prevents layout shifts).
  - Potential Issues: Can cause distortion if only one dimension is styled without the other styled to `auto`.
  - Usage: Can be used directly with static image imports or migrate from existing `<img>` tags.
  - Optimization: Supports configuring a loader or using the default Next.js server for automatic image optimization.
```

----------------------------------------

TITLE: Create Next.js App Router home page
DESCRIPTION: Set up the initial home page component for the Next.js App Router, which will be rendered at the root path.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/01-installation.mdx#_snippet_4

LANGUAGE: tsx
CODE:
```
export default function Page() {
  return <h1>Hello, Next.js!</h1>
}
```

LANGUAGE: jsx
CODE:
```
export default function Page() {
  return <h1>Hello, Next.js!</h1>
}
```

----------------------------------------

TITLE: Access Environment Variables in ORM Configuration
DESCRIPTION: Example of how to import the `envConfig` setup and access loaded environment variables, such as `DATABASE_URL`, within an ORM configuration file, demonstrating usage outside the Next.js runtime.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/environment-variables.mdx#_snippet_6

LANGUAGE: tsx
CODE:
```
import './envConfig.ts'

export default defineConfig({
  dbCredentials: {
    connectionString: process.env.DATABASE_URL!,
  },
})
```

LANGUAGE: jsx
CODE:
```
import './envConfig.js'

export default defineConfig({
  dbCredentials: {
    connectionString: process.env.DATABASE_URL,
  },
})
```

----------------------------------------

TITLE: Tagging unstable_cache functions for cache revalidation in Next.js
DESCRIPTION: Alternatively, `unstable_cache` functions can be marked with the `tags` option to associate their cached output with specific tags. This enables targeted revalidation using `revalidateTag`. The example shows tagging a cached database query for users with the 'user' tag.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/09-caching-and-revalidating.mdx#_snippet_5

LANGUAGE: tsx
CODE:
```
export const getUserById = unstable_cache(
  async (id: string) => {
    return db.query.users.findFirst({ where: eq(users.id, id) })
  },
  ['user'], // Needed if variables are not passed as parameters
  {
    tags: ['user'],
  }
)
```

LANGUAGE: jsx
CODE:
```
export const getUserById = unstable_cache(
  async (id) => {
    return db.query.users.findFirst({ where: eq(users.id, id) })
  },
  ['user'], // Needed if variables are not passed as parameters
  {
    tags: ['user'],
  }
)
```

----------------------------------------

TITLE: Access Request Data in Next.js App Directory with headers and cookies
DESCRIPTION: Illustrates how to use the `headers` and `cookies` functions from `next/headers` within Server Components in the `app` directory to retrieve request headers and cookies.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/migrating/app-router-migration.mdx#_snippet_18

LANGUAGE: typescript
CODE:
```
// `app` directory
import { cookies, headers } from 'next/headers'

async function getData() {
  const authHeader = (await headers()).get('authorization')

  return '...'
}

export default async function Page() {
  // You can use `cookies` or `headers` inside Server Components
  // directly or in your data fetching function
  const theme = (await cookies()).get('theme')
  const data = await getData()
  return '...'
}
```

LANGUAGE: javascript
CODE:
```
// `app` directory
import { cookies, headers } from 'next/headers'

async function getData() {
  const authHeader = (await headers()).get('authorization')

  return '...'
}

export default async function Page() {
  // You can use `cookies` or `headers` inside Server Components
  // directly or in your data fetching function
  const theme = (await cookies()).get('theme')
  const data = await getData()
  return '...'
}
```

----------------------------------------

TITLE: Next.js Page Component `searchParams` Prop API Reference
DESCRIPTION: Detailed API reference for the `searchParams` prop available to Next.js page components. It's a promise that resolves to an object containing the search parameters of the current URL.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/03-file-conventions/page.mdx#_snippet_5

LANGUAGE: APIDOC
CODE:
```
searchParams (optional)
  Type: Promise<object>
  Description: A promise that resolves to an object containing the search parameters of the current URL.
  Access: Since the `searchParams` prop is a promise. You must use `async/await` or React's `use` function to access the values.
  Note: In version 14 and earlier, `searchParams` was synchronous. Synchronous access is deprecated in Next.js 15.
  Behavior: `searchParams` is a Dynamic API whose values cannot be known ahead of time. Using it will opt the page into dynamic rendering at request time.
  Format: `searchParams` is a plain JavaScript object, not a `URLSearchParams` instance.

  Examples:
  | Example URL     | `searchParams`                |
  | --------------- | ----------------------------- |
  | `/shop?a=1`     | `Promise<{ a: '1' }>`         |
  | `/shop?a=1&b=2` | `Promise<{ a: '1', b: '2' }>` |
  | `/shop?a=1&a=2` | `Promise<{ a: ['1', '2'] }>`  |
```

----------------------------------------

TITLE: Set Response Headers in Next.js API Routes
DESCRIPTION: This snippet demonstrates how to set custom HTTP headers in a Next.js API route by returning a new `Response` object with the desired headers. This is the method for sending outgoing headers to the client.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/03-file-conventions/route.mdx#_snippet_9

LANGUAGE: typescript
CODE:
```
import { headers } from 'next/headers'

export async function GET(request: Request) {
  const headersList = await headers()
  const referer = headersList.get('referer')

  return new Response('Hello, Next.js!', {
    status: 200,
    headers: { referer: referer },
  })
}
```

LANGUAGE: javascript
CODE:
```
import { headers } from 'next/headers'

export async function GET(request) {
  const headersList = await headers()
  const referer = headersList.get('referer')

  return new Response('Hello, Next.js!', {
    status: 200,
    headers: { referer: referer },
  })
}
```

----------------------------------------

TITLE: Perform Client-Side Data Fetching with SWR in Next.js
DESCRIPTION: This example illustrates client-side data fetching in a Next.js page using the SWR library. It leverages the `useSWR` hook to manage data fetching, caching, and revalidation. The component handles loading and error states gracefully, displaying 'Loading...' or 'Failed to load.' before rendering the fetched data.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/03-building-your-application/02-rendering/05-client-side-rendering.mdx#_snippet_1

LANGUAGE: jsx
CODE:
```
import useSWR from 'swr'

export function Page() {
  const { data, error, isLoading } = useSWR(
    'https://api.example.com/data',
    fetcher
  )

  if (error) return <p>Failed to load.</p>
  if (isLoading) return <p>Loading...</p>

  return <p>Your Data: {data}</p>
}
```

----------------------------------------

TITLE: Next.js Parallel Data Fetching and Preloading (App Router)
DESCRIPTION: Recommendations for reducing network waterfalls by fetching data in parallel and preloading data where appropriate in the App Router.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/production-checklist.mdx#_snippet_9

LANGUAGE: APIDOC
CODE:
```
Strategies:
  - Parallel Data Fetching
  - Data Preloading
Purpose: Reduce network waterfalls, optimize data fetching.
```

----------------------------------------

TITLE: Upgrade Next.js to Latest Stable Release
DESCRIPTION: Use these commands to upgrade your Next.js project to the latest stable release. This is generally recommended for production applications to ensure you have the newest features and bug fixes.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/version-staleness.mdx#_snippet_1

LANGUAGE: bash
CODE:
```
npm i next@latest
```

LANGUAGE: bash
CODE:
```
yarn add next@latest
```

LANGUAGE: bash
CODE:
```
pnpm add next@latest
```

LANGUAGE: bash
CODE:
```
bun add next@latest
```

----------------------------------------

TITLE: Next.js: Fetching Draft Content with getStaticProps in Preview Mode
DESCRIPTION: Demonstrates how to conditionally fetch draft content from a CMS API endpoint within getStaticProps by checking context.preview, enabling dynamic content retrieval.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/02-guides/preview-mode.mdx#_snippet_5

LANGUAGE: js
CODE:
```
export async function getStaticProps(context) {
  // If context.preview is true, append "/preview" to the API endpoint
  // to request draft data instead of published data. This will vary
  // based on which headless CMS you're using.
  const res = await fetch(`https://.../${context.preview ? 'preview' : ''}`)
  // ...
}
```

----------------------------------------

TITLE: HTML Login Form for User Authentication
DESCRIPTION: A basic HTML form for user login, capturing email and password. On submission, it triggers a POST request to the `/api/auth/login` API route, handled by a `handleSubmit` function.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/authentication.mdx#_snippet_9

LANGUAGE: HTML
CODE:
```
    <form onSubmit={handleSubmit}>
      <input type="email" name="email" placeholder="Email" required />
      <input type="password" name="password" placeholder="Password" required />
      <button type="submit">Login</button>
    </form>
```

----------------------------------------

TITLE: Integrate Submit Button with React Form Actions
DESCRIPTION: This snippet demonstrates how to integrate the `SubmitButton` component, which uses `useFormStatus`, into a form. By nesting `SubmitButton` inside the `form` element, it automatically inherits the pending status of the form action, providing a clean way to manage button states during submission.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/forms.mdx#_snippet_8

LANGUAGE: tsx
CODE:
```
import { SubmitButton } from './button'
import { createUser } from '@/app/actions'

export function Signup() {
  return (
    <form action={createUser}>
      {/* Other form elements */}
      <SubmitButton />
    </form>
  )
}
```

LANGUAGE: jsx
CODE:
```
import { SubmitButton } from './button'
import { createUser } from '@/app/actions'

export function Signup() {
  return (
    <form action={createUser}>
      {/* Other form elements */}
      <SubmitButton />
    </form>
  )
}
```

----------------------------------------

TITLE: Accessing pathname and searchParams with nextUrl
DESCRIPTION: Demonstrates how to access the `pathname` and `searchParams` properties from the `request.nextUrl` object in a Next.js application. `pathname` returns the path of the URL, and `searchParams` returns the query parameters as an object.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/04-functions/next-request.mdx#_snippet_7

LANGUAGE: ts
CODE:
```
// Given a request to /home, pathname is /home
request.nextUrl.pathname
// Given a request to /home?name=lee, searchParams is { 'name': 'lee' }
request.nextUrl.searchParams
```

----------------------------------------

TITLE: Read Streamed Data in Next.js Client Component with React `use` Hook
DESCRIPTION: This Client Component uses the `use` hook to read the promise containing streamed data passed from a Server Component. It renders the data once resolved, demonstrating how to consume promises in client-side React.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/07-fetching-data.mdx#_snippet_3

LANGUAGE: tsx
CODE:
```
'use client'
import { use } from 'react'

export default function Posts({
  posts,
}: {
  posts: Promise<{ id: string; title: string }[]>
}) {
  const allPosts = use(posts)

  return (
    <ul>
      {allPosts.map((post) => (
        <li key={post.id}>{post.title}</li>
      ))}
    </ul>
  )
}
```

LANGUAGE: jsx
CODE:
```
'use client'
import { use } from 'react'

export default function Posts({ posts }) {
  const allPosts = use(posts)

  return (
    <ul>
      {allPosts.map((post) => (
        <li key={post.id}>{post.title}</li>
      ))}
    </ul>
  )
}
```

----------------------------------------

TITLE: Calling revalidatePath to invalidate a route cache in Next.js
DESCRIPTION: `revalidatePath` is used to revalidate a specific route's cache following an event. It should be called within a Route Handler or Server Action after data mutations that affect the content of that route. This example shows revalidating the '/profile' route after a user update.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/09-caching-and-revalidating.mdx#_snippet_7

LANGUAGE: tsx
CODE:
```
import { revalidatePath } from 'next/cache'

export async function updateUser(id: string) {
  // Mutate data
  revalidatePath('/profile')
}
```

LANGUAGE: jsx
CODE:
```
import { revalidatePath } from 'next/cache'

export async function updateUser(id) {
  // Mutate data
  revalidatePath('/profile')
}
```

----------------------------------------

TITLE: Correct Next.js Link usage with a single child
DESCRIPTION: This example demonstrates the proper way to use the `next/link` component by ensuring that only a single child element is passed, resolving the 'multiple children' error.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/link-multiple-children.mdx#_snippet_1

LANGUAGE: jsx
CODE:
```
import Link from 'next/link'

export default function Home() {
  return (
    <Link href="/about">
      <a>To About</a>
    </Link>
  )
}
```

----------------------------------------

TITLE: Running Next.js Application in Development (npm)
DESCRIPTION: This command starts the Next.js development server using `npm`, making the application accessible locally, typically at `localhost:3000`, with hot-reloading enabled for development.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-mysql/README.md#_snippet_14

LANGUAGE: bash
CODE:
```
npm run dev
```

----------------------------------------

TITLE: Running Next.js Development Server with npm
DESCRIPTION: These commands first install project dependencies using `npm install` and then start the Next.js development server with `npm run dev`. This allows local development and testing of the application.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-unsplash/README.md#_snippet_4

LANGUAGE: bash
CODE:
```
npm install
npm run dev
```

----------------------------------------

TITLE: Cache Next.js Function Output
DESCRIPTION: Demonstrates applying `use cache` to an asynchronous function (TSX/JSX) to cache its return value, useful for network requests, database queries, or slow computations.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/01-directives/use-cache.mdx#_snippet_6

LANGUAGE: tsx
CODE:
```
export async function getData() {
  'use cache'

  const data = await fetch('/api/data')
  return data
}
```

LANGUAGE: jsx
CODE:
```
export async function getData() {
  'use cache'

  const data = await fetch('/api/data')
  return data
}
```

----------------------------------------

TITLE: Migrating Next.js Middleware to Use Redirect/Rewrite Instead of Direct Response
DESCRIPTION: Demonstrates how to refactor Next.js Middleware to handle authorization by redirecting to a login page instead of directly returning a JSON response. This aligns with the v12.2+ changes, ensuring Middleware focuses on request modification rather than response generation.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/returning-response-body-in-middleware.mdx#_snippet_1

LANGUAGE: ts
CODE:
```
import { NextResponse } from 'next/server'
import type { NextRequest } from 'next/server'
import { isAuthValid } from './lib/auth'

export function middleware(request: NextRequest) {
  // Example function to validate auth
  if (isAuthValid(request)) {
    return NextResponse.next()
  }

  return NextResponse.json({ message: 'Auth required' }, { status: 401 })
}
```

LANGUAGE: ts
CODE:
```
import { NextResponse } from 'next/server'
import type { NextRequest } from 'next/server'
import { isAuthValid } from './lib/auth'

export function middleware(request: NextRequest) {
  // Example function to validate auth
  if (isAuthValid(request)) {
    return NextResponse.next()
  }

  request.nextUrl.searchParams.set('from', request.nextUrl.pathname)
  request.nextUrl.pathname = '/login'

  return NextResponse.redirect(request.nextUrl)
}
```

----------------------------------------

TITLE: Safely Access Browser APIs in Next.js Client Components
DESCRIPTION: This example illustrates how to safely access browser-specific Web APIs (like `window`) within a Next.js Client Component. By using the `useEffect` hook, the code ensures that browser APIs are only accessed after the component has mounted on the client-side, preventing server-side rendering errors.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/static-exports.mdx#_snippet_8

LANGUAGE: JSX
CODE:
```
'use client';

import { useEffect } from 'react';

export default function ClientComponent() {
  useEffect(() => {
    // You now have access to `window`
    console.log(window.innerHeight);
  }, [])

  return ...;
}
```

----------------------------------------

TITLE: Updating package.json Scripts for Next.js
DESCRIPTION: Demonstrates how to modify the `scripts` section in `package.json` to use Next.js commands for development, build, and start, replacing Create React App-specific scripts.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/migrating/from-create-react-app.mdx#_snippet_15

LANGUAGE: json
CODE:
```
{
  "scripts": {
    "dev": "next dev --turbopack",
    "build": "next build",
    "start": "npx serve@latest ./build"
  }
}
```

----------------------------------------

TITLE: Dynamically Load Component Client-Side Only in Next.js Pages Router
DESCRIPTION: Explains how to disable Server-Side Rendering (SSR) for a dynamically imported component in the Next.js Pages Router using the `ssr: false` option with `next/dynamic`. This is crucial for components or external dependencies that rely on browser-specific APIs like `window` or `document`.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/lazy-loading.mdx#_snippet_8

LANGUAGE: JSX
CODE:
```
'use client'

import dynamic from 'next/dynamic'

const DynamicHeader = dynamic(() => import('../components/header'), {
  ssr: false,
})
```

----------------------------------------

TITLE: Define GET Route Handlers in Next.js App Router
DESCRIPTION: Illustrates how to create custom GET request handlers using Route Handlers in the `app` directory. These handlers leverage Web Request and Response APIs, replacing traditional API Routes for server-side logic. Examples are provided for both TypeScript and JavaScript.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/migrating/app-router-migration.mdx#_snippet_30

LANGUAGE: ts
CODE:
```
export async function GET(request: Request) {}
```

LANGUAGE: js
CODE:
```
export async function GET(request) {}
```

----------------------------------------

TITLE: Next.js App Directory: Managing Metadata with `metadata` Export (After Migration)
DESCRIPTION: Shows the new method for defining page metadata in the Next.js `app` directory using a `metadata` export, replacing the `next/head` component for improved SEO capabilities.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/migrating/app-router-migration.mdx#_snippet_9

LANGUAGE: tsx
CODE:
```
import type { Metadata } from 'next'

export const metadata: Metadata = {
  title: 'My Page Title',
}

export default function Page() {
  return '...'
}
```

LANGUAGE: jsx
CODE:
```
export const metadata = {
  title: 'My Page Title',
}

export default function Page() {
  return '...'
}
```

----------------------------------------

TITLE: Using Next.js Image Component in a Page
DESCRIPTION: Demonstrates how to import and use the `next/image` component in a Next.js page to display an image with specified width, height, and alt text. This is the basic setup for integrating optimized images.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/02-components/image.mdx#_snippet_0

LANGUAGE: jsx
CODE:
```
import Image from 'next/image'

export default function Page() {
  return (
    <Image
      src="/profile.png"
      width={500}
      height={500}
      alt="Picture of the author"
    />
  )
}
```

----------------------------------------

TITLE: Stream Video Component with React Suspense (Simple Fallback)
DESCRIPTION: This example shows how to integrate the video Server Component into a Next.js page using React Suspense. It provides a basic text fallback (`Loading video...`) that is displayed while the video component is being streamed, preventing the page from blocking.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/videos.mdx#_snippet_5

LANGUAGE: jsx
CODE:
```
import { Suspense } from 'react'
import VideoComponent from '../ui/VideoComponent.jsx'

export default function Page() {
  return (
    <section>
      <Suspense fallback={<p>Loading video...</p>}>
        <VideoComponent />
      </Suspense>
      {/* Other content of the page */}
    </section>
  )
}
```

----------------------------------------

TITLE: Implementing Responsive Next.js Images with Remote URLs
DESCRIPTION: Explains how to handle responsive images when the source is a dynamic or remote URL. It requires explicitly providing `width` and `height` props for Next.js to calculate the aspect ratio, along with `style={{ width: '100%', height: 'auto' }}` for responsiveness.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/02-components/image.mdx#_snippet_43

LANGUAGE: jsx
CODE:
```
import Image from 'next/image'

export default function Page({ photoUrl }) {
  return (
    <Image
      src={photoUrl}
      alt="Picture of the author"
      sizes="100vw"
      style={{
        width: '100%',
        height: 'auto',
      }}
      width={500}
      height={300}
    />
  )
}
```

----------------------------------------

TITLE: Performing Client-Side Redirects with Next.js Server Actions
DESCRIPTION: This example illustrates how to trigger a redirect from a Client Component using a Next.js Server Action. The Client Component uses a form to invoke a server action, which then performs the actual redirect. This pattern is useful for event-driven redirects where direct client-side `redirect` is not suitable.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/04-functions/redirect.mdx#_snippet_3

LANGUAGE: tsx
CODE:
```
'use client'

import { navigate } from './actions'

export function ClientRedirect() {
  return (
    <form action={navigate}>
      <input type="text" name="id" />
      <button>Submit</button>
    </form>
  )
}
```

LANGUAGE: jsx
CODE:
```
'use client'

import { navigate } from './actions'

export function ClientRedirect() {
  return (
    <form action={navigate}>
      <input type="text" name="id" />
      <button>Submit</button>
    </form>
  )
}
```

LANGUAGE: ts
CODE:
```
'use server'

import { redirect } from 'next/navigation'

export async function navigate(data: FormData) {
  redirect(`/posts/${data.get('id')}`)
}
```

LANGUAGE: js
CODE:
```
'use server'

import { redirect } from 'next/navigation'

export async function navigate(data) {
  redirect(`/posts/${data.get('id')}`)
}
```

----------------------------------------

TITLE: Migrate Next.js Headers API to Recommended Async Usage
DESCRIPTION: Demonstrates the recommended asynchronous usage of the `headers` API in Next.js 15, which is now a breaking change. The `headers()` function must be awaited.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/upgrading/version-15.mdx#_snippet_5

LANGUAGE: tsx
CODE:
```
import { headers } from 'next/headers'

// Before
const headersList = headers()
const userAgent = headersList.get('user-agent')

// After
const headersList = await headers()
const userAgent = headersList.get('user-agent')
```

----------------------------------------

TITLE: Display custom login UI for unauthorized users in Next.js
DESCRIPTION: This example demonstrates how to use the `unauthorized` function to trigger a custom 401 page (`unauthorized.js`) that displays a login UI. The `unauthorized` function is called in a Server Component if the user is not authenticated, leading to the rendering of the custom `unauthorized.js` file.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/04-functions/unauthorized.mdx#_snippet_2

LANGUAGE: tsx
CODE:
```
import { verifySession } from '@/app/lib/dal'
import { unauthorized } from 'next/navigation'

export default async function DashboardPage() {
  const session = await verifySession()

  if (!session) {
    unauthorized()
  }

  return <div>Dashboard</div>
}
```

LANGUAGE: jsx
CODE:
```
import { verifySession } from '@/app/lib/dal'
import { unauthorized } from 'next/navigation'

export default async function DashboardPage() {
  const session = await verifySession()

  if (!session) {
    unauthorized()
  }

  return <div>Dashboard</div>
}
```

LANGUAGE: tsx
CODE:
```
import Login from '@/app/components/Login'

export default function UnauthorizedPage() {
  return (
    <main>
      <h1>401 - Unauthorized</h1>
      <p>Please log in to access this page.</p>
      <Login />
    </main>
  )
}
```

LANGUAGE: jsx
CODE:
```
import Login from '@/app/components/Login'

export default function UnauthorizedPage() {
  return (
    <main>
      <h1>401 - Unauthorized</h1>
      <p>Please log in to access this page.</p>
      <Login />
    </main>
  )
}
```

----------------------------------------

TITLE: Access URL Search Parameters (searchParams) in Next.js Page
DESCRIPTION: The `searchParams` prop is a promise that resolves to an object containing the search parameters of the current URL. It's a dynamic API, meaning its values are not known ahead of time, and its usage opts the page into dynamic rendering. Access requires `async/await` or React's `use` function.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/03-file-conventions/page.mdx#_snippet_2

LANGUAGE: tsx
CODE:
```
export default async function Page({
  searchParams,
}: {
  searchParams: Promise<{ [key: string]: string | string[] | undefined }>
}) {
  const filters = (await searchParams).filters
}
```

LANGUAGE: jsx
CODE:
```
export default async function Page({ searchParams }) {
  const filters = (await searchParams).filters
}
```

----------------------------------------

TITLE: Copying Local Environment Variables File (Bash)
DESCRIPTION: This Bash command duplicates the `.env.local.example` file to `.env.local`. The `.env.local` file is crucial for storing sensitive environment variables like API keys and is automatically ignored by Git, ensuring secure configuration for the Next.js application.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-kontent-ai/README.md#_snippet_2

LANGUAGE: bash
CODE:
```
cp .env.local.example .env.local
```

----------------------------------------

TITLE: Add Image Information to Sitemaps in Next.js (TypeScript)
DESCRIPTION: Extend your sitemap to include image-specific information using the `images` property within the URL object. This feature, supported by Google, helps search engines discover and index images associated with your web pages, enhancing visibility in image search results.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/03-file-conventions/01-metadata/sitemap.mdx#_snippet_2

LANGUAGE: typescript
CODE:
```
import type { MetadataRoute } from 'next'

export default function sitemap(): MetadataRoute.Sitemap {
  return [
    {
      url: 'https://example.com',
      lastModified: '2021-01-01',
      changeFrequency: 'weekly',
      priority: 0.5,
      images: ['https://example.com/image.jpg'],
    },
  ]
}
```

----------------------------------------

TITLE: Configure Open Graph Metadata for Website Type in Next.js
DESCRIPTION: This snippet demonstrates how to configure Open Graph metadata for a 'website' type, including title, description, URL, site name, images, videos, and audio. This configuration is typically defined in `layout.js` or `page.js` to generate the corresponding `<meta>` tags in the HTML `<head>`.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/04-functions/generate-metadata.mdx#_snippet_11

LANGUAGE: jsx
CODE:
```
export const metadata = {
  openGraph: {
    title: 'Next.js',
    description: 'The React Framework for the Web',
    url: 'https://nextjs.org',
    siteName: 'Next.js',
    images: [
      {
        url: 'https://nextjs.org/og.png', // Must be an absolute URL
        width: 800,
        height: 600,
      },
      {
        url: 'https://nextjs.org/og-alt.png', // Must be an absolute URL
        width: 1800,
        height: 1600,
        alt: 'My custom alt',
      },
    ],
    videos: [
      {
        url: 'https://nextjs.org/video.mp4', // Must be an absolute URL
        width: 800,
        height: 600,
      },
    ],
    audio: [
      {
        url: 'https://nextjs.org/audio.mp3', // Must be an absolute URL
      },
    ],
    locale: 'en_US',
    type: 'website',
  },
}
```

LANGUAGE: html
CODE:
```
<meta property="og:title" content="Next.js" />
<meta property="og:description" content="The React Framework for the Web" />
<meta property="og:url" content="https://nextjs.org/" />
<meta property="og:site_name" content="Next.js" />
<meta property="og:locale" content="en_US" />
<meta property="og:image" content="https://nextjs.org/og.png" />
<meta property="og:image:width" content="800" />
<meta property="og:image:height" content="600" />
<meta property="og:image" content="https://nextjs.org/og-alt.png" />
<meta property="og:image:width" content="1800" />
<meta property="og:image:height" content="1600" />
<meta property="og:image:alt" content="My custom alt" />
<meta property="og:video" content="https://nextjs.org/video.mp4" />
<meta property="og:video:width" content="800" />
<meta property="og:video:height" content="600" />
<meta property="og:audio" content="https://nextjs.org/audio.mp3" />
<meta property="og:type" content="website" />
```

----------------------------------------

TITLE: Handling Next.js Router Events with usePathname and useSearchParams
DESCRIPTION: This example demonstrates how to listen for page changes in Next.js by combining `useEffect`, `usePathname`, and `useSearchParams` hooks within a Client Component. The `NavigationEvents` component logs the current URL on route changes, and the second snippet shows how to integrate this component into a Next.js layout, wrapped in a `Suspense` boundary for proper client-side rendering.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/04-functions/use-router.mdx#_snippet_2

LANGUAGE: jsx
CODE:
```
'use client'

import { useEffect } from 'react'
import { usePathname, useSearchParams } from 'next/navigation'

export function NavigationEvents() {
  const pathname = usePathname()
  const searchParams = useSearchParams()

  useEffect(() => {
    const url = `${pathname}?${searchParams}`
    console.log(url)
    // You can now use the current URL
    // ...
  }, [pathname, searchParams])

  return '...'
}
```

LANGUAGE: jsx
CODE:
```
import { Suspense } from 'react'
import { NavigationEvents } from './components/navigation-events'

export default function Layout({ children }) {
  return (
    <html lang="en">
      <body>
        {children}

        <Suspense fallback={null}>
          <NavigationEvents />
        </Suspense>
      </body>
    </html>
  )
}
```

----------------------------------------

TITLE: Configure Next.js Link for Dynamic Routes with Middleware
DESCRIPTION: This note provides guidance on adapting the as and href props for Link components when dealing with dynamic routes that are affected by Middleware rewrites. It illustrates how to use an object for the href prop to specify both the pathname and query parameters, while the as prop defines the clean, displayed URL for the dynamic route.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/02-components/link.mdx#_snippet_29

LANGUAGE: jsx
CODE:
```
<Link href={{ pathname: '/dashboard/authed/[user]', query: { user: username } }} as="/dashboard/[user]">Profile</Link>
```

----------------------------------------

TITLE: Secure Next.js Preview API Route with Validation and Redirect
DESCRIPTION: An advanced Next.js API route handler for preview mode, demonstrating how to securely validate a secret token and a slug parameter. This snippet fetches content from a headless CMS, enables preview mode, and redirects the user to the specified content path, while also preventing open redirect vulnerabilities.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/02-guides/preview-mode.mdx#_snippet_3

LANGUAGE: JavaScript
CODE:
```
export default async (req, res) => {
  // Check the secret and next parameters
  // This secret should only be known to this API route and the CMS
  if (req.query.secret !== 'MY_SECRET_TOKEN' || !req.query.slug) {
    return res.status(401).json({ message: 'Invalid token' })
  }

  // Fetch the headless CMS to check if the provided `slug` exists
  // getPostBySlug would implement the required fetching logic to the headless CMS
  const post = await getPostBySlug(req.query.slug)

  // If the slug doesn't exist prevent preview mode from being enabled
  if (!post) {
    return res.status(401).json({ message: 'Invalid slug' })
  }

  // Enable Preview Mode by setting the cookies
  res.setPreviewData({})

  // Redirect to the path from the fetched post
  // We don't redirect to req.query.slug as that might lead to open redirect vulnerabilities
  res.redirect(post.slug)
}
```

----------------------------------------

TITLE: Set Image Preload Priority in Next.js
DESCRIPTION: The `priority` boolean prop for the `next/image` component indicates if the image should be preloaded. Setting it to `true` preloads the image and disables lazy loading, while `false` enables lazy loading. It's recommended for above-the-fold images or LCP elements to improve initial loading performance, but should not be used with the `loading` prop.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/02-components/image.mdx#_snippet_11

LANGUAGE: jsx
CODE:
```
// Default priority is false
<Image priority={false} />
```

----------------------------------------

TITLE: Next.js Middleware Authorization (After Upgrade)
DESCRIPTION: This 'after' example demonstrates the recommended approach for handling unauthorized requests in Next.js Middleware. Instead of returning a response body, it redirects the user to a login page, passing the original path as a query parameter.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/middleware-upgrade-guide.mdx#_snippet_5

LANGUAGE: ts
CODE:
```
import { NextResponse } from 'next/server'
import type { NextRequest } from 'next/server'
import { isAuthValid } from './lib/auth'

export function middleware(request: NextRequest) {
  // Example function to validate auth
  if (isAuthValid(request)) {
    return NextResponse.next()
  }

  const loginUrl = new URL('/login', request.url)
  loginUrl.searchParams.set('from', request.nextUrl.pathname)

  return NextResponse.redirect(loginUrl)
}
```

----------------------------------------

TITLE: Full unstable_cache Example with Tags and Revalidation
DESCRIPTION: Illustrates a complete example of using `unstable_cache` in a Next.js page, demonstrating how to add dynamic data to the cache key, apply `tags` for invalidation, and set a `revalidate` time.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/04-functions/unstable_cache.mdx#_snippet_2

LANGUAGE: tsx
CODE:
```
import { unstable_cache } from 'next/cache'

export default async function Page({
  params,
}: {
  params: Promise<{ userId: string }>
}) {
  const { userId } = await params
  const getCachedUser = unstable_cache(
    async () => {
      return { id: userId }
    },
    [userId], // add the user ID to the cache key
    {
      tags: ['users'],
      revalidate: 60,
    }
  )

  //...
}
```

LANGUAGE: jsx
CODE:
```
import { unstable_cache } from 'next/cache';

export default async function Page({ params } }) {
  const { userId } = await params
  const getCachedUser = unstable_cache(
    async () => {
      return { id: userId };
    },
    [userId], // add the user ID to the cache key
    {
      tags: ["users"],
      revalidate: 60,
    }
  );

  //...
}
```

----------------------------------------

TITLE: Mark Module as Server-Only in TypeScript
DESCRIPTION: This TypeScript snippet illustrates how to use `import 'server-only'` at the top of a module (e.g., `lib/data.ts`). This directive ensures that the module's code is exclusively for server-side execution, causing a build error if it's ever imported into a client environment, thereby preventing accidental exposure of server-only logic.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/data-security.mdx#_snippet_10

LANGUAGE: TypeScript
CODE:
```
import 'server-only'

//...
```

----------------------------------------

TITLE: Run Next.js Development Server
DESCRIPTION: Commands to start the Next.js development server locally. The server will typically run on http://localhost:3000 and auto-updates as files are edited.
SOURCE: https://github.com/vercel/next.js/blob/canary/packages/create-next-app/templates/app-empty/ts/README-template.md#_snippet_0

LANGUAGE: bash
CODE:
```
npm run dev
# or
yarn dev
# or
pnpm dev
# or
bun dev
```

----------------------------------------

TITLE: Implement Incremental Static Regeneration with fetch in Next.js App Router
DESCRIPTION: Shows how to achieve Incremental Static Regeneration (ISR) in the `app` directory using the `fetch()` API with the `next: { revalidate: 60 }` option. This caches the request for 60 seconds, enabling automatic data revalidation for server components.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/migrating/app-router-migration.mdx#_snippet_29

LANGUAGE: jsx
CODE:
```
// `app` directory

async function getPosts() {
  const res = await fetch(`https://.../posts`, { next: { revalidate: 60 } })
  const data = await res.json()

  return data.posts
}

export default async function PostList() {
  const posts = await getPosts()

  return posts.map((post) => <div>{post.name}</div>)
}
```

----------------------------------------

TITLE: Implementing Authentication and Authorization in Next.js Server Actions
DESCRIPTION: This example illustrates how to enforce authentication within a Next.js Server Action. It checks if a user is signed in before allowing an action to proceed, throwing an error if the user is unauthorized, ensuring that only authenticated users can perform specific operations.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/data-security.mdx#_snippet_13

LANGUAGE: tsx
CODE:
```
'use server'

import { auth } from './lib'

export function addItem() {
  const { user } = auth()
  if (!user) {
    throw new Error('You must be signed in to perform this action')
  }

  // ...
}
```

----------------------------------------

TITLE: Configure Local Fonts in Next.js App Router Layout
DESCRIPTION: Demonstrates how to import and apply a single local font file using `next/font/local` within the Next.js App Router's `layout.tsx` or `layout.js`, applying the font to the HTML document.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/02-components/font.mdx#_snippet_27

LANGUAGE: tsx
CODE:
```
import localFont from 'next/font/local'

// Font files can be colocated inside of `app`
const myFont = localFont({
  src: './my-font.woff2',
  display: 'swap',
})

export default function RootLayout({
  children,
}: {
  children: React.ReactNode
}) {
  return (
    <html lang="en" className={myFont.className}>
      <body>{children}</body>
    </html>
  )
}
```

LANGUAGE: jsx
CODE:
```
import localFont from 'next/font/local'

// Font files can be colocated inside of `app`
const myFont = localFont({
  src: './my-font.woff2',
  display: 'swap',
})

export default function RootLayout({ children }) {
  return (
    <html lang="en" className={myFont.className}>
      <body>{children}</body>
    </html>
  )
}
```

----------------------------------------

TITLE: Defining a NEXT_PUBLIC_ Environment Variable
DESCRIPTION: This snippet shows how to define an environment variable that Next.js will inline into the client-side JavaScript bundle. By prefixing the variable name with `NEXT_PUBLIC_`, its value becomes accessible in the browser after build time.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/environment-variables.mdx#_snippet_8

LANGUAGE: txt
CODE:
```
NEXT_PUBLIC_ANALYTICS_ID=abcdefghijk
```

----------------------------------------

TITLE: router.push Method Signature - Next.js JavaScript
DESCRIPTION: This snippet shows the signature of the `router.push` method, which is used for client-side navigation in Next.js. It accepts a URL, an optional `as` path for the browser URL bar, and an `options` object for controlling navigation behavior like scrolling or shallow routing.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/04-api-reference/03-functions/use-router.mdx#_snippet_1

LANGUAGE: js
CODE:
```
router.push(url, as, options)
```

----------------------------------------

TITLE: Configure Jest with next/jest
DESCRIPTION: Update your Jest configuration file to use `next/jest`. This transformer provides all necessary configurations for Jest to work seamlessly with Next.js, including setting up transforms, auto-mocking assets, and loading environment variables.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/testing/jest.mdx#_snippet_3

LANGUAGE: typescript
CODE:
```
import type { Config } from 'jest'
import nextJest from 'next/jest.js'

const createJestConfig = nextJest({
  // Provide the path to your Next.js app to load next.config.js and .env files in your test environment
  dir: './',
})

// Add any custom config to be passed to Jest
const config: Config = {
  coverageProvider: 'v8',
  testEnvironment: 'jsdom',
  // Add more setup options before each test is run
  // setupFilesAfterEnv: ['<rootDir>/jest.setup.ts'],
}

// createJestConfig is exported this way to ensure that next/jest can load the Next.js config which is async
export default createJestConfig(config)
```

LANGUAGE: javascript
CODE:
```
const nextJest = require('next/jest')

/** @type {import('jest').Config} */
const createJestConfig = nextJest({
  // Provide the path to your Next.js app to load next.config.js and .env files in your test environment
  dir: './',
})

// Add any custom config to be passed to Jest
const config = {
  coverageProvider: 'v8',
  testEnvironment: 'jsdom',
  // Add more setup options before each test is run
  // setupFilesAfterEnv: ['<rootDir>/jest.setup.ts'],
}

// createJestConfig is exported this way to ensure that next/jest can load the Next.js config which is async
module.exports = createJestConfig(config)
```

----------------------------------------

TITLE: Revalidating All Data with revalidatePath
DESCRIPTION: This example demonstrates how to purge the Client-side Router Cache and revalidate the Data Cache for all paths on the next page visit.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/04-functions/revalidatePath.mdx#_snippet_4

LANGUAGE: ts
CODE:
```
import { revalidatePath } from 'next/cache'

revalidatePath('/', 'layout')
```

----------------------------------------

TITLE: Problematic Synchronous Request Access in Next.js GET Handler
DESCRIPTION: This snippet demonstrates the incorrect way to access the Request object in a Next.js `route.js` GET handler. Accessing `request.headers` synchronously without `await connection()` can lead to an error when `dynamicIO` is enabled, as Next.js expects explicit dynamic marking for such operations.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/next-prerender-sync-request.mdx#_snippet_0

LANGUAGE: jsx
CODE:
```
export default function GET(request) {
  const requestHeaders = request.headers
  return ...
}
```

----------------------------------------

TITLE: Create Post Server Action with Redirect
DESCRIPTION: This server-side function (`createPost`) is responsible for processing form data to create a new post. After the post is successfully created, it uses the `redirect` function from `next/navigation` to programmatically navigate the user to the newly created post's dedicated page.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/02-components/form.mdx#_snippet_13

LANGUAGE: tsx
CODE:
```
'use server'
import { redirect } from 'next/navigation'

export async function createPost(formData: FormData) {
  // Create a new post
  // ...

  // Redirect to the new post
  redirect(`/posts/${data.id}`)
}
```

LANGUAGE: jsx
CODE:
```
'use server'
import { redirect } from 'next/navigation'

export async function createPost(formData) {
  // Create a new post
  // ...

  // Redirect to the new post
  redirect(`/posts/${data.id}`)
}
```

----------------------------------------

TITLE: Handle unauthenticated users in Next.js Server Components with unauthorized
DESCRIPTION: Demonstrates how to use the `unauthorized` function in a Next.js Server Component (e.g., `app/dashboard/page.tsx`) to redirect unauthenticated users to a 401 error page. It checks for a valid session and calls `unauthorized()` if the session is missing.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/04-functions/unauthorized.mdx#_snippet_1

LANGUAGE: tsx
CODE:
```
import { verifySession } from '@/app/lib/dal'
import { unauthorized } from 'next/navigation'

export default async function DashboardPage() {
  const session = await verifySession()

  if (!session) {
    unauthorized()
  }

  // Render the dashboard for authenticated users
  return (
    <main>
      <h1>Welcome to the Dashboard</h1>
      <p>Hi, {session.user.name}.</p>
    </main>
  )
}
```

LANGUAGE: jsx
CODE:
```
import { verifySession } from '@/app/lib/dal'
import { unauthorized } from 'next/navigation'

export default async function DashboardPage() {
  const session = await verifySession()

  if (!session) {
    unauthorized()
  }

  // Render the dashboard for authenticated users
  return (
    <main>
      <h1>Welcome to the Dashboard</h1>
      <p>Hi, {session.user.name}.</p>
    </main>
  )
}
```

----------------------------------------

TITLE: Matching User Locale with Negotiator and intl-localematcher in Next.js Middleware
DESCRIPTION: This snippet demonstrates how to determine the user's preferred locale from the 'Accept-Language' header using the 'negotiator' and '@formatjs/intl-localematcher' libraries. It takes incoming headers, a list of supported locales, and a default locale to find the best match for internationalized routing.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/internationalization.mdx#_snippet_0

LANGUAGE: javascript
CODE:
```
import { match } from '@formatjs/intl-localematcher'
import Negotiator from 'negotiator'

let headers = { 'accept-language': 'en-US,en;q=0.5' }
let languages = new Negotiator({ headers }).languages()
let locales = ['en-US', 'nl-NL', 'nl']
let defaultLocale = 'en-US'

match(languages, locales, defaultLocale) // -> 'en-US'
```

----------------------------------------

TITLE: Implement a Dynamic Segment with Data Fetching in Next.js
DESCRIPTION: This example demonstrates how to create a dynamic route segment (`[slug]`) that fetches and displays data based on the dynamic parameter. The `params` prop provides access to the dynamic segment value, enabling the page to retrieve specific content like a blog post.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/03-layouts-and-pages.mdx#_snippet_5

LANGUAGE: tsx
CODE:
```
export default async function BlogPostPage({
  params,
}: {
  params: Promise<{ slug: string }>
}) {
  const { slug } = await params
  const post = await getPost(slug)

  return (
    <div>
      <h1>{post.title}</h1>
      <p>{post.content}</p>
    </div>
  )
}
```

LANGUAGE: jsx
CODE:
```
export default async function BlogPostPage({ params }) {
  const { slug } = await params
  const post = await getPost(slug)

  return (
    <div>
      <h1>{post.title}</h1>
      <p>{post.content}</p>
    </div>
  )
}
```

----------------------------------------

TITLE: Fetching Data in a Server Component - TypeScript
DESCRIPTION: This example shows how to perform server-side data fetching directly within an `async` Server Component. It fetches blog posts from an API and renders them, leveraging the ability of Server Components to use `async`/`await`.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/no-async-client-component.mdx#_snippet_1

LANGUAGE: tsx
CODE:
```
export default async function Page() {
  const data = await fetch('https://api.vercel.app/blog')
  const posts = await data.json()
  return (
    <ul>
      {posts.map((post) => (
        <li key={post.id}>{post.title}</li>
      ))}
    </ul>
  )
}
```

----------------------------------------

TITLE: Implement Authentication with Next.js Middleware
DESCRIPTION: This snippet demonstrates how to use Next.js middleware to check if a user is authenticated. If the user is not authenticated, it returns a 401 Unauthorized JSON response. The middleware is configured to apply to specific API routes using `config.matcher`.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/backend-for-frontend.mdx#_snippet_13

LANGUAGE: ts
CODE:
```
import { isAuthenticated } from '@lib/auth'

export const config = {
  matcher: '/api/:function*',
}

export function middleware(request: Request) {
  if (!isAuthenticated(request)) {
    return Response.json(
      { success: false, message: 'authentication failed' },
      { status: 401 }
    )
  }
}
```

LANGUAGE: js
CODE:
```
import { isAuthenticated } from '@lib/auth'

export const config = {
  matcher: '/api/:function*',
}

export function middleware(request) {
  if (!isAuthenticated(request)) {
    return Response.json(
      { success: false, message: 'authentication failed' },
      { status: 401 }
    )
  }
}
```

----------------------------------------

TITLE: Next.js Full Route Cache: Subsequent Navigations
DESCRIPTION: This documentation details how Next.js handles subsequent navigations and prefetching using the Router Cache. It explains that Next.js checks the cache for the React Server Components Payload, skipping server requests if found, or fetching and populating the cache if not.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/caching.mdx#_snippet_10

LANGUAGE: APIDOC
CODE:
```
On subsequent navigations or during prefetching, Next.js will check if the React Server Components Payload is stored in the Router Cache. If so, it will skip sending a new request to the server.

If the route segments are not in the cache, Next.js will fetch the React Server Components Payload from the server, and populate the Router Cache on the client.
```

----------------------------------------

TITLE: Fetching Data with API Key (Potential Client Exposure)
DESCRIPTION: This function demonstrates fetching data from an external service using an `API_KEY` from `process.env`. Without proper safeguards, this `API_KEY` could be exposed to the client if the module is accidentally imported into a Client Component, leading to environment variable poisoning.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/05-server-and-client-components.mdx#_snippet_12

LANGUAGE: typescript
CODE:
```
export async function getData() {
  const res = await fetch('https://external-service.com/data', {
    headers: {
      authorization: process.env.API_KEY,
    },
  })

  return res.json()
}
```

LANGUAGE: javascript
CODE:
```
export async function getData() {
  const res = await fetch('https://external-service.com/data', {
    headers: {
      authorization: process.env.API_KEY,
    },
  })

  return res.json()
}
```

----------------------------------------

TITLE: Fixing Dynamic API Call in Next.js Page Component
DESCRIPTION: This example demonstrates how to fix the 'Dynamic API called outside request' error in a Next.js page component by moving the `cookies()` function call from the global scope into the `Page` component's `async` function, ensuring it's within the request scope.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/next-dynamic-api-wrong-context.mdx#_snippet_0

LANGUAGE: javascript
CODE:
```
```diff filename="app/page.js"
import { cookies } from 'next/headers'

- const cookieStore = await cookies()
export default async function Page() {
+ const cookieStore = await cookies()
  return ...
}
```
```

----------------------------------------

TITLE: Next.js Image Component Props Overview
DESCRIPTION: A comprehensive table listing all available props for the `next/image` component, including their examples, data types, and status (e.g., required, deprecated). This provides a quick reference for component configuration.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/02-components/image.mdx#_snippet_1

LANGUAGE: APIDOC
CODE:
```
Prop | Example | Type | Status
--- | --- | --- | ---
src | src="/profile.png" | String | Required
alt | alt="Picture of the author" | String | Required
width | width={500} | Integer (px) | -
height | height={500} | Integer (px) | -
fill | fill={true} | Boolean | -
loader | loader={imageLoader} | Function | -
sizes | sizes="(max-width: 768px) 100vw, 33vw" | String | -
quality | quality={80} | Integer (1-100) | -
priority | priority={true} | Boolean | -
placeholder | placeholder="blur" | String | -
style | style={{objectFit: "contain"}} | Object | -
onLoadingComplete | onLoadingComplete={img => done())} | Function | Deprecated
onLoad | onLoad={event => done())} | Function | -
onError | onError(event => fail()) | Function | -
loading | loading="lazy" | String | -
blurDataURL | blurDataURL="data:image/jpeg..." | String | -
overrideSrc | overrideSrc="/seo.png" | String | -
```

----------------------------------------

TITLE: Handle Filtering, Pagination, and Sorting with searchParams in Next.js Server Components
DESCRIPTION: This snippet demonstrates how to access and use searchParams in a Next.js Server Component to handle URL query parameters for filtering, pagination, or sorting. It destructures 'page', 'sort', and 'query' from the searchParams promise, which is available as a prop to the page component.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/03-file-conventions/page.mdx#_snippet_6

LANGUAGE: typescript
CODE:
```
export default async function Page({
  searchParams,
}: {
  searchParams: Promise<{ [key: string]: string | string[] | undefined }>
}) {
  const { page = '1', sort = 'asc', query = '' } = await searchParams

  return (
    <div>
      <h1>Product Listing</h1>
      <p>Search query: {query}</p>
      <p>Current page: {page}</p>
      <p>Sort order: {sort}</p>
    </div>
  )
}
```

LANGUAGE: javascript
CODE:
```
export default async function Page({ searchParams }) {
  const { page = '1', sort = 'asc', query = '' } = await searchParams

  return (
    <div>
      <h1>Product Listing</h1>
      <p>Search query: {query}</p>
      <p>Current page: {page}</p>
      <p>Sort order: {sort}</p>
    </div>
  )
}
```

----------------------------------------

TITLE: BAD Example: Exposing Sensitive Data in Component-Level Access
DESCRIPTION: This `tsx` snippet illustrates an anti-pattern where a Server Component directly fetches all user data from the database and passes the entire `userData` object to a Client Component (`Profile`). This is problematic because it exposes all fields, including potentially sensitive ones, to the client, violating data privacy and security principles. It highlights the risk of direct component-level data access without proper sanitization.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/data-security.mdx#_snippet_4

LANGUAGE: tsx
CODE:
```
import Profile from './components/profile.tsx'\n\nexport async function Page({ params: { slug } }) {\n  const [rows] = await sql`SELECT * FROM user WHERE slug = ${slug}`\n  const userData = rows[0]\n  // EXPOSED: This exposes all the fields in userData to the client because\n  // we are passing the data from the Server Component to the Client.\n  return <Profile user={userData} />\n}
```

----------------------------------------

TITLE: Display Pending State with React useActionState Hook
DESCRIPTION: This snippet illustrates how to use React's "useActionState" hook to manage the pending state of a Server Function. It returns a "pending" boolean, which can be used to display a loading indicator or disable UI elements while the server action is in progress.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/08-updating-data.mdx#_snippet_7

LANGUAGE: tsx
CODE:
```
'use client'

import { useActionState, startTransition } from 'react'
import { createPost } from '@/app/actions'
import { LoadingSpinner } from '@/app/ui/loading-spinner'

export function Button() {
  const [state, action, pending] = useActionState(createPost, false)

  return (
    <button onClick={() => startTransition(action)}>
      {pending ? <LoadingSpinner /> : 'Create Post'}
    </button>
  )
}
```

LANGUAGE: jsx
CODE:
```
'use client'

import { useActionState, startTransition } from 'react'
import { createPost } from '@/app/actions'
import { LoadingSpinner } from '@/app/ui/loading-spinner'

export function Button() {
  const [state, action, pending] = useActionState(createPost, false)

  return (
    <button onClick={() => startTransition(action)}>
      {pending ? <LoadingSpinner /> : 'Create Post'}
    </button>
  )
}
```

----------------------------------------

TITLE: Revalidate Next.js Cache in Server Function
DESCRIPTION: This example demonstrates how to revalidate the Next.js cache from within a Server Function after data modifications. By calling "revalidatePath" or "revalidateTag", you ensure that updated data is reflected on the client, maintaining data consistency across the application.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/08-updating-data.mdx#_snippet_8

LANGUAGE: ts
CODE:
```
import { revalidatePath } from 'next/cache'

export async function createPost(formData: FormData) {
  'use server'
  // Update data
  // ...

  revalidatePath('/posts')
}
```

LANGUAGE: js
CODE:
```
import { revalidatePath } from 'next/cache'

export async function createPost(formData) {
  'use server'
  // Update data
  // ...
  revalidatePath('/posts')
}
```

----------------------------------------

TITLE: Define Server Functions for Client Component import (TypeScript/JavaScript)
DESCRIPTION: Shows how to create a Server Function in a separate file with the 'use server' directive at the top of the file. This pattern enables Client Components to import and invoke these server-side functions.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/08-updating-data.mdx#_snippet_2

LANGUAGE: ts
CODE:
```
'use server'

export async function createPost() {}
```

LANGUAGE: js
CODE:
```
'use server'

export async function createPost() {}
```

----------------------------------------

TITLE: Manage Cookies with `next/headers` in Next.js API Routes
DESCRIPTION: This snippet demonstrates how to read, set, and delete cookies within Next.js API routes using the `cookies()` function from `next/headers`. It provides server-side access to the cookie store for direct manipulation.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/03-file-conventions/route.mdx#_snippet_5

LANGUAGE: typescript
CODE:
```
import { cookies } from 'next/headers'

export async function GET(request: NextRequest) {
  const cookieStore = await cookies()

  const a = cookieStore.get('a')
  const b = cookieStore.set('b', '1')
  const c = cookieStore.delete('c')
}
```

LANGUAGE: javascript
CODE:
```
import { cookies } from 'next/headers'

export async function GET(request) {
  const cookieStore = await cookies()

  const a = cookieStore.get('a')
  const b = cookieStore.set('b', '1')
  const c = cookieStore.delete('c')
}
```

----------------------------------------

TITLE: Configure Next.js with next.config.js (CommonJS)
DESCRIPTION: Demonstrates the basic structure of a `next.config.js` file using CommonJS module export, which is the default configuration method for Next.js applications. This file is used by the Next.js server and build phases.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/05-config/01-next-config-js/index.mdx#_snippet_0

LANGUAGE: js
CODE:
```
// @ts-check

/** @type {import('next').NextConfig} */
const nextConfig = {
  /* config options here */
}

module.exports = nextConfig
```

----------------------------------------

TITLE: Tagging Fetch Calls for On-Demand Revalidation in Next.js App Router
DESCRIPTION: This snippet demonstrates how to tag `fetch` requests in a Next.js App Router component. By adding `next: { tags: ['posts'] }` to the fetch options, the data fetched can later be invalidated on-demand using `revalidateTag` based on the 'posts' tag.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/incremental-static-regeneration.mdx#_snippet_5

LANGUAGE: tsx
CODE:
```
export default async function Page() {
  const data = await fetch('https://api.vercel.app/blog', {
    next: { tags: ['posts'] },
  })
  const posts = await data.json()
  // ...
}
```

LANGUAGE: jsx
CODE:
```
export default async function Page() {
  const data = await fetch('https://api.vercel.app/blog', {
    next: { tags: ['posts'] },
  })
  const posts = await data.json()
  // ...
}
```

----------------------------------------

TITLE: Fixing Next.js Middleware with URLPattern for URL parsing
DESCRIPTION: Demonstrates how to replace the deprecated `request.page` with `URLPattern` to extract URL parameters like `locale` and `slug` in Next.js Middleware. This approach provides a robust and supported way to parse incoming request URLs.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/middleware-request-page.mdx#_snippet_1

LANGUAGE: ts
CODE:
```
import { NextRequest, NextResponse } from 'next/server'

const PATTERNS = [
  [
    new URLPattern({ pathname: '/:locale/:slug' }),
    ({ pathname }) => pathname.groups,
  ],
]

const params = (url) => {
  const input = url.split('?')[0]
  let result = {}

  for (const [pattern, handler] of PATTERNS) {
    const patternResult = pattern.exec(input)
    if (patternResult !== null && 'pathname' in patternResult) {
      result = handler(patternResult)
      break
    }
  }
  return result
}

export function middleware(request: NextRequest) {
  const { locale, slug } = params(request.url)

  if (locale && slug) {
    const { search, protocol, host } = request.nextUrl
    const url = new URL(`${protocol}//${locale}.${host}/${slug}${search}`)
    return NextResponse.redirect(url)
  }
}
```

----------------------------------------

TITLE: Define Root Layout in Next.js App Router
DESCRIPTION: Examples of a root layout component for the Next.js App Router, demonstrating how to define the main HTML structure and accept children for nested layouts or pages. This replaces `pages/_app` and `pages/_document` files.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/migrating/app-router-migration.mdx#_snippet_4

LANGUAGE: tsx
CODE:
```
export default function RootLayout({
  // Layouts must accept a children prop.
  // This will be populated with nested layouts or pages
  children,
}: {
  children: React.ReactNode
}) {
  return (
    <html lang="en">
      <body>{children}</body>
    </html>
  )
}
```

LANGUAGE: jsx
CODE:
```
export default function RootLayout({
  // Layouts must accept a children prop.
  // This will be populated with nested layouts or pages
  children,
}) {
  return (
    <html lang="en">
      <body>{children}</body>
    </html>
  )
}
```

----------------------------------------

TITLE: Add TypeScript Types to Next.js API Routes
DESCRIPTION: This example shows how to enhance type safety in Next.js API Routes by importing `NextApiRequest` and `NextApiResponse` types from `next`. It also demonstrates how to define and apply custom types for the response data, improving code clarity and reducing potential errors.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/03-building-your-application/01-routing/07-api-routes.mdx#_snippet_15

LANGUAGE: ts
CODE:
```
import type { NextApiRequest, NextApiResponse } from 'next'

type ResponseData = {
  message: string
}

export default function handler(
  req: NextApiRequest,
  res: NextApiResponse<ResponseData>
) {
  res.status(200).json({ message: 'Hello from Next.js!' })
}
```

----------------------------------------

TITLE: Access Build-Time Environment Variables in Next.js Components
DESCRIPTION: This example shows how to access environment variables defined in `next.config.js` from within a React component in your Next.js application. The `process.env` syntax is used, and the variable's value will be replaced at build time.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/05-config/01-next-config-js/env.mdx#_snippet_1

LANGUAGE: jsx
CODE:
```
function Page() {
  return <h1>The value of customKey is: {process.env.customKey}</h1>
}

export default Page
```

----------------------------------------

TITLE: Maintaining State Across Dynamic Routes - Next.js JSX
DESCRIPTION: This component demonstrates how state (`count`) is maintained when navigating between dynamic routes (`/one`, `/two`) if the top-level component remains the same. It highlights that React does not unmount and remount the component, thus preserving its internal state by default.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/04-api-reference/03-functions/use-router.mdx#_snippet_5

LANGUAGE: jsx
CODE:
```
import Link from 'next/link'
import { useState } from 'react'
import { useRouter } from 'next/router'

export default function Page(props) {
  const router = useRouter()
  const [count, setCount] = useState(0)
  return (
    <div>
      <h1>Page: {router.query.slug}</h1>
      <p>Count: {count}</p>
      <button onClick={() => setCount(count + 1)}>Increase count</button>
      <Link href="/one">one</Link> <Link href="/two">two</Link>
    </div>
  )
}
```

----------------------------------------

TITLE: Define Static Metadata in Next.js with Metadata Object
DESCRIPTION: This example demonstrates how to export a `Metadata` object from a `layout.js` or `page.js` file to define static metadata like title and description for a route. It shows both TypeScript and JavaScript versions.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/14-metadata-and-og-images.mdx#_snippet_1

LANGUAGE: TSX
CODE:
```
import type { Metadata } from 'next'

export const metadata: Metadata = {
  title: 'My Blog',
  description: '...', 
}

export default function Page() {}
```

LANGUAGE: JSX
CODE:
```
export const metadata = {
  title: 'My Blog',
  description: '...', 
}

export default function Page() {}
```

----------------------------------------

TITLE: Updating URL Query Parameters in Next.js Client Components
DESCRIPTION: This code snippet demonstrates how to dynamically update URL query parameters (`searchParams`) within a Next.js client component. It utilizes the `useRouter` hook for programmatic navigation and the `Link` component for declarative navigation, both leveraging a `createQueryString` utility function to merge new parameters with existing ones. The updated `searchParams` are then reflected in the `page.js` prop.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/04-functions/use-search-params.mdx#_snippet_7

LANGUAGE: tsx
CODE:
```
'use client'

import { useRouter, usePathname, useSearchParams } from 'next/navigation'
import Link from 'next/link'
import { useCallback } from 'react'

export default function ExampleClientComponent() {
  const router = useRouter()
  const pathname = usePathname()
  const searchParams = useSearchParams()

  // Get a new searchParams string by merging the current
  // searchParams with a provided key/value pair
  const createQueryString = useCallback(
    (name: string, value: string) => {
      const params = new URLSearchParams(searchParams.toString())
      params.set(name, value)

      return params.toString()
    },
    [searchParams]
  )

  return (
    <>
      <p>Sort By</p>

      {/* using useRouter */}
      <button
        onClick={() => {
          // <pathname>?sort=asc
          router.push(pathname + '?' + createQueryString('sort', 'asc'))
        }}
      >
        ASC
      </button>

      {/* using <Link> */}
      <Link
        href={
          // <pathname>?sort=desc
          pathname + '?' + createQueryString('sort', 'desc')
        }
      >
        DESC
      </Link>
    </>
  )
}
```

LANGUAGE: jsx
CODE:
```
'use client'

import { useRouter, usePathname, useSearchParams } from 'next/navigation'
import Link from 'next/link'
import { useCallback } from 'react'

export default function ExampleClientComponent() {
  const router = useRouter()
  const pathname = usePathname()
  const searchParams = useSearchParams()

  // Get a new searchParams string by merging the current
  // searchParams with a provided key/value pair
  const createQueryString = useCallback(
    (name, value) => {
      const params = new URLSearchParams(searchParams)
      params.set(name, value)

      return params.toString()
    },
    [searchParams]
  )

  return (
    <>
      <p>Sort By</p>

      {/* using useRouter */}
      <button
        onClick={() => {
          // <pathname>?sort=asc
          router.push(pathname + '?' + createQueryString('sort', 'asc'))
        }}
      >
        ASC
      </button>

      {/* using <Link> */}
      <Link
        href={
          // <pathname>?sort=desc
          pathname + '?' + createQueryString('sort', 'desc')
        }
      >
        DESC
      </Link>
    </>
  )
}
```

----------------------------------------

TITLE: Running Next.js Development Server with Yarn
DESCRIPTION: These commands are used to install project dependencies and start the Next.js development server locally. `yarn install` fetches all required packages, and `yarn dev` launches the application, typically accessible at `http://localhost:3000`.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-agilitycms/README.md#_snippet_6

LANGUAGE: Shell
CODE:
```
yarn install
```

LANGUAGE: Shell
CODE:
```
yarn dev
```

----------------------------------------

TITLE: Fetch Data on Dynamic Next.js Post Page
DESCRIPTION: This page component demonstrates how to fetch and display data for a dynamic route, specifically for a post identified by its ID. It destructures the `id` from the `params` prop, then uses this ID to fetch the post data before rendering the content.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/02-components/form.mdx#_snippet_14

LANGUAGE: tsx
CODE:
```
import { getPost } from '@/posts/data'

export default async function PostPage({
  params,
}: {
  params: Promise<{ id: string }>
}) {
  const { id } = await params
  const data = await getPost(id)

  return (
    <div>
      <h1>{data.title}</h1>
      {/* ... */}
    </div>
  )
}
```

LANGUAGE: jsx
CODE:
```
import { getPost } from '@/posts/data'

export default async function PostPage({ params }) {
  const { id } = await params
  const data = await getPost(id)

  return (
    <div>
      <h1>{data.title}</h1>
      {/* ... */}
    </div>
  )
}
```

----------------------------------------

TITLE: Implementing revalidatePath in a Next.js Route Handler
DESCRIPTION: This example demonstrates how to create a Next.js Route Handler that uses `revalidatePath` to invalidate cached data based on a path provided in the request query parameters.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/04-functions/revalidatePath.mdx#_snippet_6

LANGUAGE: ts
CODE:
```
import { revalidatePath } from 'next/cache'
import type { NextRequest } from 'next/server'

export async function GET(request: NextRequest) {
  const path = request.nextUrl.searchParams.get('path')

  if (path) {
    revalidatePath(path)
    return Response.json({ revalidated: true, now: Date.now() })
  }

  return Response.json({
    revalidated: false,
    now: Date.now(),
    message: 'Missing path to revalidate',
  })
}
```

LANGUAGE: js
CODE:
```
import { revalidatePath } from 'next/cache'

export async function GET(request) {
  const path = request.nextUrl.searchParams.get('path')

  if (path) {
    revalidatePath(path)
    return Response.json({ revalidated: true, now: Date.now() })
  }

  return Response.json({
    revalidated: false,
    now: Date.now(),
    message: 'Missing path to revalidate',
  })
}
```

----------------------------------------

TITLE: Declare Client Component Entry Point with 'use client' (React/Next.js)
DESCRIPTION: This snippet demonstrates how to declare a React component as a Client Component by adding the `'use client'` directive at the top of the file. This enables client-side interactivity, state management, and access to browser APIs. The example shows a simple counter component using React's `useState` hook.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/01-directives/use-client.mdx#_snippet_0

LANGUAGE: tsx
CODE:
```
'use client'

import { useState } from 'react'

export default function Counter() {
  const [count, setCount] = useState(0)

  return (
    <div>
      <p>Count: {count}</p>
      <button onClick={() => setCount(count + 1)}>Increment</button>
    </div>
  )
}
```

LANGUAGE: jsx
CODE:
```
'use client'

import { useState } from 'react'

export default function Counter() {
  const [count, setCount] = useState(0)

  return (
    <div>
      <p>Count: {count}</p>
      <button onClick={() => setCount(count + 1)}>Increment</button>
    </div>
  )
}
```

----------------------------------------

TITLE: Using Tailwind CSS Classes in a Page Component (App Router - TypeScript)
DESCRIPTION: After installing and configuring Tailwind CSS, you can directly use its utility classes within your TSX components. This example demonstrates applying `text-3xl`, `font-bold`, and `underline` classes to an `<h1>` element in an App Router page.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/tailwind-css.mdx#_snippet_5

LANGUAGE: typescript
CODE:
```
export default function Page() {
  return <h1 className="text-3xl font-bold underline">Hello, Next.js!</h1>
}
```

----------------------------------------

TITLE: Installing Tailwind CSS Packages with npm
DESCRIPTION: This command installs Tailwind CSS, @tailwindcss/postcss, and postcss as development dependencies in your Next.js project. These packages are essential for compiling and processing Tailwind's utility classes.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/tailwind-css.mdx#_snippet_0

LANGUAGE: bash
CODE:
```
npm install -D tailwindcss @tailwindcss/postcss postcss
```

----------------------------------------

TITLE: Fixing Next.js Production Build Error
DESCRIPTION: To resolve the 'Could not find a production build' error, you must first create the necessary production assets by running `next build`. Alternatively, if your intention was to run the application in development mode, use `next dev` instead of `next export`.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/next-export-no-build-id.mdx#_snippet_1

LANGUAGE: Shell
CODE:
```
next build
```

LANGUAGE: Shell
CODE:
```
next dev
```

----------------------------------------

TITLE: Accessing NextRequest Object in Route Handlers
DESCRIPTION: Illustrates how to access the `NextRequest` object, an extension of the Web Request API, to gain further control over incoming requests, including `cookies` and `nextUrl`.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/03-file-conventions/route.mdx#_snippet_2

LANGUAGE: ts
CODE:
```
import type { NextRequest } from 'next/server'

export async function GET(request: NextRequest) {
  const url = request.nextUrl
}
```

LANGUAGE: js
CODE:
```
export async function GET(request) {
  const url = request.nextUrl
}
```

----------------------------------------

TITLE: Loading Third-Party Scripts with next/script in Next.js (JSX)
DESCRIPTION: This snippet demonstrates how to correctly load a third-party script using the `next/script` component within a Next.js page. It ensures optimal performance and compatibility with React Suspense and server-side rendering, replacing the problematic direct use of `<script>` tags in `next/head`.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/no-script-tags-in-head-component.mdx#_snippet_0

LANGUAGE: jsx
CODE:
```
import Script from 'next/script'

export default function Dashboard() {
  return (
    <>
      <Script src="https://example.com/script.js" />
    </>
  )
}
```

----------------------------------------

TITLE: Handle Not Found Pages in Next.js Route Segments (TS/JS)
DESCRIPTION: This snippet demonstrates how to implement a 404 'Not Found' page in a Next.js route segment. It uses the `notFound()` function to trigger the 404 UI when a requested resource, such as a blog post, is not found. The `getPostBySlug` function is used as an example dependency to fetch data.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/10-error-handling.mdx#_snippet_3

LANGUAGE: tsx
CODE:
```
import { getPostBySlug } from '@/lib/posts'

export default async function Page({ params }: { params: { slug: string } }) {
  const { slug } = await params
  const post = getPostBySlug(slug)

  if (!post) {
    notFound()
  }

  return <div>{post.title}</div>
}
```

LANGUAGE: jsx
CODE:
```
import { getPostBySlug } from '@/lib/posts'

export default async function Page({ params }) {
  const { slug } = await params
  const post = getPostBySlug(slug)

  if (!post) {
    notFound()
  }

  return <div>{post.title}</div>
}
```

----------------------------------------

TITLE: Implement Basic Role-Based Access with forbidden in Page Component
DESCRIPTION: This example illustrates how to use the `forbidden` function within a Next.js Server Component (e.g., `app/auth/page.tsx`). It checks a user's session role and calls `forbidden()` if the role does not meet the required criteria, rendering a 403 error page.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/04-functions/forbidden.mdx#_snippet_1

LANGUAGE: TSX
CODE:
```
import { verifySession } from '@/app/lib/dal'
import { forbidden } from 'next/navigation'

export default async function AdminPage() {
  const session = await verifySession()

  // Check if the user has the 'admin' role
  if (session.role !== 'admin') {
    forbidden()
  }

  // Render the admin page for authorized users
  return <></>
}
```

LANGUAGE: JSX
CODE:
```
import { verifySession } from '@/app/lib/dal'
import { forbidden } from 'next/navigation'

export default async function AdminPage() {
  const session = await verifySession()

  // Check if the user has the 'admin' role
  if (session.role !== 'admin') {
    forbidden()
  }

  // Render the admin page for authorized users
  return <></>
}
```

----------------------------------------

TITLE: Migrate Next.js Cookies API to Recommended Async Usage
DESCRIPTION: Demonstrates the recommended asynchronous usage of the `cookies` API in Next.js 15, which is now a breaking change. The `cookies()` function must be awaited.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/upgrading/version-15.mdx#_snippet_3

LANGUAGE: tsx
CODE:
```
import { cookies } from 'next/headers'

// Before
const cookieStore = cookies()
const token = cookieStore.get('token')

// After
const cookieStore = await cookies()
const token = cookieStore.get('token')
```

----------------------------------------

TITLE: Secure Next.js Route Handler with Session Verification
DESCRIPTION: This snippet demonstrates how to implement session verification within a Next.js Route Handler's `GET` method. It checks for an active user session using `verifySession`. If the session is invalid or missing, `unauthorized()` is called, which automatically returns a 401 status code and renders the `unauthorized.tsx` page, preventing unauthenticated access to the endpoint.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/04-functions/unauthorized.mdx#_snippet_4

LANGUAGE: tsx
CODE:
```
import { NextRequest, NextResponse } from 'next/server'
import { verifySession } from '@/app/lib/dal'
import { unauthorized } from 'next/navigation'

export async function GET(req: NextRequest): Promise<NextResponse> {
  // Verify the user's session
  const session = await verifySession()

  // If no session exists, return a 401 and render unauthorized.tsx
  if (!session) {
    unauthorized()
  }

  // Fetch data
  // ...
}
```

LANGUAGE: jsx
CODE:
```
import { verifySession } from '@/app/lib/dal'
import { unauthorized } from 'next/navigation'

export async function GET() {
  const session = await verifySession()

  // If the user is not authenticated, return a 401 and render unauthorized.tsx
  if (!session) {
    unauthorized()
  }

  // Fetch data
  // ...
}
```

----------------------------------------

TITLE: Create Graceful Error Recovery with Custom Next.js Error Boundary
DESCRIPTION: This custom `GracefullyDegradingErrorBoundary` provides a better user experience by showing the last known server-rendered UI when client-side rendering fails. It captures and preserves the current HTML before an error, then re-renders it with a persistent notification bar upon error.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/03-file-conventions/error.mdx#_snippet_4

LANGUAGE: tsx
CODE:
```
'use client'

import React, { Component, ErrorInfo, ReactNode } from 'react'

interface ErrorBoundaryProps {
  children: ReactNode
  onError?: (error: Error, errorInfo: ErrorInfo) => void
}

interface ErrorBoundaryState {
  hasError: boolean
}

export class GracefullyDegradingErrorBoundary extends Component<
  ErrorBoundaryProps,
  ErrorBoundaryState
> {
  private contentRef: React.RefObject<HTMLDivElement>

  constructor(props: ErrorBoundaryProps) {
    super(props)
    this.state = { hasError: false }
    this.contentRef = React.createRef()
  }

  static getDerivedStateFromError(_: Error): ErrorBoundaryState {
    return { hasError: true }
  }

  componentDidCatch(error: Error, errorInfo: ErrorInfo) {
    if (this.props.onError) {
      this.props.onError(error, errorInfo)
    }
  }

  render() {
    if (this.state.hasError) {
      // Render the current HTML content without hydration
      return (
        <>
          <div
            ref={this.contentRef}
            suppressHydrationWarning
            dangerouslySetInnerHTML={{
              __html: this.contentRef.current?.innerHTML || '',
            }}
          />
          <div className="fixed bottom-0 left-0 right-0 bg-red-600 text-white py-4 px-6 text-center">
            <p className="font-semibold">
              An error occurred during page rendering
            </p>
          </div>
        </>
      )
    }

    return <div ref={this.contentRef}>{this.props.children}</div>
  }
}

export default GracefullyDegradingErrorBoundary
```

LANGUAGE: jsx
CODE:
```
'use client'

import React, { Component, createRef } from 'react'

class GracefullyDegradingErrorBoundary extends Component {
  constructor(props) {
    super(props)
    this.state = { hasError: false }
    this.contentRef = createRef()
  }

  static getDerivedStateFromError(_) {
    return { hasError: true }
  }

  componentDidCatch(error, errorInfo) {
    if (this.props.onError) {
      this.props.onError(error, errorInfo)
    }
  }

  render() {
    if (this.state.hasError) {
      // Render the current HTML content without hydration
      return (
        <>
          <div
            ref={this.contentRef}
            suppressHydrationWarning
            dangerouslySetInnerHTML={{
              __html: this.contentRef.current?.innerHTML || '',
            }}
          />
          <div className="fixed bottom-0 left-0 right-0 bg-red-600 text-white py-4 px-6 text-center">
            <p className="font-semibold">
              An error occurred during page rendering
            </p>
          </div>
        </>
      )
    }

    return <div ref={this.contentRef}>{this.props.children}</div>
  }
}

export default GracefullyDegradingErrorBoundary
```

----------------------------------------

TITLE: Integrate Nav and Form Components in Next.js Page
DESCRIPTION: These snippets illustrate how to import and utilize custom `Nav` and `Form` components within a Next.js page. They show a standard page structure where a navigation bar and a main content area containing a form are rendered, demonstrating basic component composition in a Next.js application.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/02-components/link.mdx#_snippet_36

LANGUAGE: tsx
CODE:
```
import Nav from './components/nav'
import Form from './components/form'

export default function Page() {
  return (
    <div>
      <Nav />
      <main>
        <h1>Welcome to the Dashboard</h1>
        <Form />
      </main>
    </div>
  )
}
```

LANGUAGE: jsx
CODE:
```
import Nav from './components/nav'
import Form from './components/form'

export default function Page() {
  return (
    <div>
      <Nav />
      <main>
        <h1>Welcome to the Dashboard</h1>
        <Form />
      </main>
    </div>
  )
}
```

----------------------------------------

TITLE: Next.js RootLayout Using Metadata API
DESCRIPTION: This snippet illustrates how to leverage Next.js's Metadata API to manage `<head>` tags. It exports a `metadata` object to define page title and description, centralizing metadata configuration and simplifying the `RootLayout` component.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/migrating/from-create-react-app.mdx#_snippet_6

LANGUAGE: tsx
CODE:
```
import type { Metadata } from 'next'

export const metadata: Metadata = {
  title: 'React App',
  description: 'Web site created with Next.js.',
}

export default function RootLayout({
  children,
}: {
  children: React.ReactNode
}) {
  return (
    <html lang="en">
      <body>
        <div id="root">{children}</div>
      </body>
    </html>
  )
}
```

LANGUAGE: jsx
CODE:
```
export const metadata = {
  title: 'React App',
  description: 'Web site created with Next.js.',
}

export default function RootLayout({ children }) {
  return (
    <html lang="en">
      <body>
        <div id="root">{children}</div>
      </body>
    </html>
  )
}
```

----------------------------------------

TITLE: Import Static Image from External URL
DESCRIPTION: Demonstrates importing an image directly from an external URL using `next/image` component. This allows Next.js to optimize and serve the image from the specified remote source.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/05-config/01-next-config-js/urlImports.mdx#_snippet_3

LANGUAGE: js
CODE:
```
import Image from 'next/image'
import logo from 'https://example.com/assets/logo.png'

export default () => (
  <div>
    <Image src={logo} placeholder="blur" />
  </div>
)
```

----------------------------------------

TITLE: Define a basic Next.js Route Handler
DESCRIPTION: Demonstrates the basic convention for defining a Route Handler in Next.js using a `route.js` or `route.ts` file within the `app` directory. It shows an asynchronous GET function that handles incoming requests.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/15-route-handlers-and-middleware.mdx#_snippet_0

LANGUAGE: ts
CODE:
```
export async function GET(request: Request) {}
```

LANGUAGE: js
CODE:
```
export async function GET(request) {}
```

----------------------------------------

TITLE: Handle HTTP Methods in Next.js API Routes
DESCRIPTION: This snippet demonstrates how to conditionally process requests based on their HTTP method (e.g., GET, POST, PUT, DELETE) within a Next.js API route handler. The `req.method` property allows for branching logic to handle different request types.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/03-building-your-application/01-routing/07-api-routes.mdx#_snippet_2

LANGUAGE: typescript
CODE:
```
import type { NextApiRequest, NextApiResponse } from 'next'

export default function handler(req: NextApiRequest, res: NextApiResponse) {
  if (req.method === 'POST') {
    // Process a POST request
  } else {
    // Handle any other HTTP method
  }
}
```

LANGUAGE: javascript
CODE:
```
export default function handler(req, res) {
  if (req.method === 'POST') {
    // Process a POST request
  } else {
    // Handle any other HTTP method
  }
}
```

----------------------------------------

TITLE: Define Next.js Page Loading State with loading.js
DESCRIPTION: This snippet demonstrates how to create a `loading.js` file in a Next.js application to display a loading UI for an entire page while its data is being fetched. The `loading.js` file automatically wraps the `page.js` and any children below in a `<Suspense>` boundary, providing an instant fallback UI during navigation.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/07-fetching-data.mdx#_snippet_6

LANGUAGE: tsx
CODE:
```
export default function Loading() {
  // Define the Loading UI here
  return <div>Loading...</div>
}
```

LANGUAGE: jsx
CODE:
```
export default function Loading() {
  // Define the Loading UI here
  return <div>Loading...</div>
}
```

----------------------------------------

TITLE: Update Next.js and React Dependencies for React 19
DESCRIPTION: This diff illustrates the required changes in `package.json` to upgrade Next.js, React, and React DOM to versions compatible with React 19. It also includes `pnpm` overrides for `@types/react` and `@types/react-dom` to ensure proper type resolution for the new React version.
SOURCE: https://github.com/vercel/next.js/blob/canary/packages/next-codemod/bin/__testfixtures__/next-14-installed/README.md#_snippet_0

LANGUAGE: Diff
CODE:
```
diff --git a/packages/next-codemod/bin/__testfixtures__/next-14-installed/package.json b/packages/next-codemod/bin/__testfixtures__/next-14-installed/package.json
index 5ec4c37f0b..131f5b9f4a 100644
--- a/packages/next-codemod/bin/__testfixtures__/next-14-installed/package.json
+++ b/packages/next-codemod/bin/__testfixtures__/next-14-installed/package.json
@@ -4,10 +4,16 @@
     "dev": "next dev"
   },
   "dependencies": {
-    "next": "14.3.0-canary.44",
-    "react": "18.2.0",
-    "react-dom": "18.2.0",
-    "@types/react": "^18.2.0",
-    "@types/react-dom": "^18.2.0"
+    "next": "15.0.4-canary.43",
+    "react": "19.0.0",
+    "react-dom": "19.0.0",
+    "@types/react": "19.0.0",
+    "@types/react-dom": "19.0.0"
+  },
+  "pnpm": {
+    "overrides": {
+      "@types/react": "19.0.0",
+      "@types/react-dom": "19.0.0"
+    }
   }
 }
```

----------------------------------------

TITLE: Implement Logout with Session Deletion in Next.js
DESCRIPTION: This snippet demonstrates how to implement a `logout` function that leverages the `deleteSession` utility to clear the user's session cookie and then redirects the user to the login page. This function is typically used as a server action or within an API route.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/authentication.mdx#_snippet_19

LANGUAGE: TypeScript
CODE:
```
import { cookies } from 'next/headers'
import { deleteSession } from '@/app/lib/session'

export async function logout() {
  await deleteSession()
  redirect('/login')
}
```

LANGUAGE: JavaScript
CODE:
```
import { cookies } from 'next/headers'
import { deleteSession } from '@/app/lib/session'

export async function logout() {
  await deleteSession()
  redirect('/login')
}
```

----------------------------------------

TITLE: Encrypt and Decrypt User Sessions with Jose in Next.js
DESCRIPTION: This code snippet provides functions for encrypting and decrypting session payloads using the Jose library. The `encrypt` function signs a JWT with a given payload, setting an expiration time of 7 days. The `decrypt` function verifies the session JWT and extracts the payload. Both functions are marked with `server-only` to ensure they execute exclusively on the server, enhancing security. It requires `jose` and `server-only` packages.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/authentication.mdx#_snippet_14

LANGUAGE: TypeScript
CODE:
```
import 'server-only'
import { SignJWT, jwtVerify } from 'jose'
import { SessionPayload } from '@/app/lib/definitions'

const secretKey = process.env.SESSION_SECRET
const encodedKey = new TextEncoder().encode(secretKey)

export async function encrypt(payload: SessionPayload) {
  return new SignJWT(payload)
    .setProtectedHeader({ alg: 'HS256' })
    .setIssuedAt()
    .setExpirationTime('7d')
    .sign(encodedKey)
}

export async function decrypt(session: string | undefined = '') {
  try {
    const { payload } = await jwtVerify(session, encodedKey, {
      algorithms: ['HS256'],
    })
    return payload
  } catch (error) {
    console.log('Failed to verify session')
  }
}
```

LANGUAGE: JavaScript
CODE:
```
import 'server-only'
import { SignJWT, jwtVerify } from 'jose'

const secretKey = process.env.SESSION_SECRET
const encodedKey = new TextEncoder().encode(secretKey)

export async function encrypt(payload) {
  return new SignJWT(payload)
    .setProtectedHeader({ alg: 'HS256' })
    .setIssuedAt()
    .setExpirationTime('7d')
    .sign(encodedKey)
}

export async function decrypt(session) {
  try {
    const { payload } = await jwtVerify(session, encodedKey, {
      algorithms: ['HS256'],
    })
    return payload
  } catch (error) {
    console.log('Failed to verify session')
  }
}
```

----------------------------------------

TITLE: Integrate Session Creation into Next.js Server Action
DESCRIPTION: Illustrates how to invoke the `createSession` function within a Next.js Server Action, such as a `signup` handler, to establish a user session and then redirect the user to a profile page using the `redirect()` API.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/authentication.mdx#_snippet_16

LANGUAGE: ts
CODE:
```
import { createSession } from '@/app/lib/session'

export async function signup(state: FormState, formData: FormData) {
  // Previous steps:
  // 1. Validate form fields
  // 2. Prepare data for insertion into database
  // 3. Insert the user into the database or call an Library API

  // Current steps:
  // 4. Create user session
  await createSession(user.id)
  // 5. Redirect user
  redirect('/profile')
}
```

LANGUAGE: js
CODE:
```
import { createSession } from '@/app/lib/session'

export async function signup(state, formData) {
  // Previous steps:
  // 1. Validate form fields
  // 2. Prepare data for insertion into database
  // 3. Insert the user into the database or call an Library API

  // Current steps:
  // 4. Create user session
  await createSession(user.id)
  // 5. Redirect user
  redirect('/profile')
}
```

----------------------------------------

TITLE: Revalidate fetch data after a specified time
DESCRIPTION: To revalidate data returned by a `fetch` request, use the `next.revalidate` option. This will update the data after the specified number of seconds, ensuring freshness.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/09-caching-and-revalidating.mdx#_snippet_1

LANGUAGE: tsx
CODE:
```
export default async function Page() {
  const data = await fetch('https://...', { next: { revalidate: 3600 } })
}
```

LANGUAGE: jsx
CODE:
```
export default async function Page() {
  const data = await fetch('https://...', { next: { revalidate: 3600 } })
}
```

----------------------------------------

TITLE: Next.js Server Actions for Forms and Validation
DESCRIPTION: Utilize Server Actions to manage form submissions, perform server-side validation, and handle errors effectively within Next.js applications.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/production-checklist.mdx#_snippet_14

LANGUAGE: APIDOC
CODE:
```
Next.js Server Actions (Forms):
  Purpose: Handle form submissions and validation on the server.
  Key Features:
    - Server-side form submission handling.
    - Integrated server-side validation.
    - Error handling for form inputs.
```

----------------------------------------

TITLE: Caching Database Queries with `unstable_cache` in Next.js App Router
DESCRIPTION: This example shows how to use `unstable_cache` to cache data fetched from a database or ORM in the Next.js App Router. It defines a cached function `getCachedPosts` with a revalidation time and a 'posts' tag, allowing for efficient data retrieval and on-demand invalidation.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/incremental-static-regeneration.mdx#_snippet_6

LANGUAGE: tsx
CODE:
```
import { unstable_cache } from 'next/cache'
import { db, posts } from '@/lib/db'

const getCachedPosts = unstable_cache(
  async () => {
    return await db.select().from(posts)
  },
  ['posts'],
  { revalidate: 3600, tags: ['posts'] }
)

export default async function Page() {
  const posts = getCachedPosts()
  // ...
}
```

LANGUAGE: jsx
CODE:
```
import { unstable_cache } from 'next/cache'
import { db, posts } from '@/lib/db'

const getCachedPosts = unstable_cache(
  async () => {
    return await db.select().from(posts)
  },
  ['posts'],
  { revalidate: 3600, tags: ['posts'] }
)

export default async function Page() {
  const posts = getCachedPosts()
  // ...
}
```

----------------------------------------

TITLE: Configure Server Actions Allowed Origins in Next.js
DESCRIPTION: Configures a list of extra safe origin domains from which Server Actions can be invoked. This prevents CSRF attacks by ensuring the request origin matches the host domain. If not set, only the same origin is allowed.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/05-config/01-next-config-js/serverActions.mdx#_snippet_0

LANGUAGE: js
CODE:
```
/** @type {import('next').NextConfig} */

module.exports = {
  experimental: {
    serverActions: {
      allowedOrigins: ['my-proxy.com', '*.my-proxy.com'],
    },
  },
}
```

----------------------------------------

TITLE: Define Root Layout and Metadata in Next.js
DESCRIPTION: This snippet demonstrates how to define global metadata using Next.js's Metadata API and set up the RootLayout component. The RootLayout wraps the entire application, providing a base HTML structure and enabling SEO improvements. It accepts children to render nested components.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/migrating/from-vite.mdx#_snippet_7

LANGUAGE: tsx
CODE:
```
import type { Metadata } from 'next'

export const metadata: Metadata = {
  title: 'My App',
  description: 'My App is a...'
}

export default function RootLayout({
  children,
}: {
  children: React.ReactNode
}) {
  return (
    <html lang="en">
      <body>
        <div id="root">{children}</div>
      </body>
    </html>
  )
}
```

LANGUAGE: jsx
CODE:
```
export const metadata = {
  title: 'My App',
  description: 'My App is a...'
}

export default function RootLayout({ children }) {
  return (
    <html lang="en">
      <body>
        <div id="root">{children}</div>
      </body>
    </html>
  )
}
```

----------------------------------------

TITLE: Preventing Static Bail Out with unstable_noStore in Next.js
DESCRIPTION: This JavaScript code snippet demonstrates how to use `unstable_noStore()` from `next/cache` to explicitly opt out of static generation. Placing `unstable_noStore()` before a `try/catch` block ensures that dynamic rendering APIs like `fetch` do not cause the 'Static Bail Out Caught' error during Partial Prerendering (PPR) in Next.js, allowing the build to succeed.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/ppr-caught-error.mdx#_snippet_0

LANGUAGE: js
CODE:
```
import { unstable_noStore } from 'next/cache'

async function fetchData() {
  unstable_noStore() // opt out before we even get to the try/catch
  try {
    const response = await fetch(url);
    ...
  } catch (x) {
    ...
  }
}
```

----------------------------------------

TITLE: Proxying Requests to a Backend with Next.js Route Handlers
DESCRIPTION: This snippet demonstrates how to create a Next.js Route Handler to act as a proxy for a backend service. It includes logic for validating the incoming request before forwarding it and handles potential errors during the fetch operation. The handler uses `request.clone()` to allow multiple reads of the request body and constructs a new `Request` object for the proxy target.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/backend-for-frontend.mdx#_snippet_8

LANGUAGE: typescript
CODE:
```
import { isValidRequest } from '@/lib/utils'

export async function POST(request: Request, { params }) {
  const clonedRequest = request.clone()
  const isValid = await isValidRequest(clonedRequest)

  if (!isValid) {
    return new Response(null, { status: 400, statusText: 'Bad Request' })
  }

  const { slug } = await params
  const pathname = slug.join('/')
  const proxyURL = new URL(pathname, 'https://nextjs.org')
  const proxyRequest = new Request(proxyURL, request)

  try {
    return fetch(proxyRequest)
  } catch (reason) {
    const message =
      reason instanceof Error ? reason.message : 'Unexpected exception'

    return new Response(message, { status: 500 })
  }
}
```

LANGUAGE: javascript
CODE:
```
import { isValidRequest } from '@/lib/utils'

export async function POST(request, { params }) {
  const clonedRequest = request.clone()
  const isValid = await isValidRequest(clonedRequest)

  if (!isValid) {
    return new Response(null, { status: 400, statusText: 'Bad Request' })
  }

  const { slug } = await params
  const pathname = slug.join('/')
  const proxyURL = new URL(pathname, 'https://nextjs.org')
  const proxyRequest = new Request(proxyURL, request)

  try {
    return fetch(proxyRequest)
  } catch (reason) {
    const message =
      reason instanceof Error ? reason.message : 'Unexpected exception'

    return new Response(message, { status: 500 })
  }
}
```

----------------------------------------

TITLE: Load Google Font (Inter) in Next.js App Router
DESCRIPTION: Demonstrates how to load the Inter Google Font using `next/font/google` in the `app/layout.tsx` or `app/layout.js` file for the Next.js App Router. The font is self-hosted and applied to the `<html>` element, ensuring optimal loading and performance.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/02-components/font.mdx#_snippet_0

LANGUAGE: tsx
CODE:
```
import { Inter } from 'next/font/google'

// If loading a variable font, you don't need to specify the font weight
const inter = Inter({
  subsets: ['latin'],
  display: 'swap',
})

export default function RootLayout({
  children,
}: {
  children: React.ReactNode
}) {
  return (
    <html lang="en" className={inter.className}>
      <body>{children}</body>
    </html>
  )
}
```

LANGUAGE: jsx
CODE:
```
import { Inter } from 'next/font/google'

// If loading a variable font, you don't need to specify the font weight
const inter = Inter({
  subsets: ['latin'],
  display: 'swap',
})

export default function RootLayout({ children }) {
  return (
    <html lang="en" className={inter.className}>
      <body>{children}</body>
    </html>
  )
}
```

----------------------------------------

TITLE: Create Tab Groups with Independent Navigation in Next.js Parallel Routes
DESCRIPTION: Shows how to create tab groups within a Parallel Route slot by adding a `layout` file. This enables independent navigation within the slot, useful for creating tabbed interfaces like 'Page Views' and 'Visitors' in an `@analytics` slot.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/03-file-conventions/parallel-routes.mdx#_snippet_3

LANGUAGE: tsx
CODE:
```
import Link from 'next/link'

export default function Layout({ children }: { children: React.ReactNode }) {
  return (
    <>
      <nav>
        <Link href="/page-views">Page Views</Link>
        <Link href="/visitors">Visitors</Link>
      </nav>
      <div>{children}</div>
    </>
  )
}
```

LANGUAGE: jsx
CODE:
```
import Link from 'next/link'

export default function Layout({ children }) {
  return (
    <>
      <nav>
        <Link href="/page-views">Page Views</Link>
        <Link href="/visitors">Visitors</Link>
      </nav>
      <div>{children}</div>
    </>
  )
}
```

----------------------------------------

TITLE: Create RSS Feed Route Handler in Next.js
DESCRIPTION: This code demonstrates how to create a custom Route Handler in Next.js to serve an RSS XML feed. It fetches data from an external endpoint, constructs an RSS XML string using template literals, and sets the 'Content-Type' header to 'application/xml' before returning the response. It's crucial to sanitize any input used to generate markup to prevent vulnerabilities.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/backend-for-frontend.mdx#_snippet_3

LANGUAGE: TypeScript
CODE:
```
export async function GET(request: Request) {
  const rssResponse = await fetch(/* rss endpoint */)
  const rssData = await rssResponse.json()

  const rssFeed = `<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0">
<channel>
 <title>${rssData.title}</title>
 <description>${rssData.description}</description>
 <link>${rssData.link}</link>
 <copyright>${rssData.copyright}</copyright>
 ${rssData.items.map((item) => {
   return `<item>
    <title>${item.title}</title>
    <description>${item.description}</description>
    <link>${item.link}</link>
    <pubDate>${item.publishDate}</pubDate>
    <guid isPermaLink="false">${item.guid}</guid>
 </item>`
 })}
</channel>
</rss>`

  const headers = new Headers({ 'content-type': 'application/xml' })

  return new Response(rssFeed, { headers })
}
```

LANGUAGE: JavaScript
CODE:
```
export async function GET(request) {
  const rssResponse = await fetch(/* rss endpoint */)
  const rssData = await rssResponse.json()

  const rssFeed = `<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0">
<channel>
 <title>${rssData.title}</title>
 <description>${rssData.description}</description>
 <link>${rssData.link}</link>
 <copyright>${rssData.copyright}</copyright>
 ${rssData.items.map((item) => {
   return `<item>
    <title>${item.title}</title>
    <description>${item.description}</description>
    <link>${item.link}</link>
    <pubDate>${item.publishDate}</pubDate>
    <guid isPermaLink="false">${item.guid}</guid>
 </item>`
 })}
</channel>
</rss>`

  const headers = new Headers({ 'content-type': 'application/xml' })

  return new Response(rssFeed, { headers })
}
```

----------------------------------------

TITLE: Handle User Not Found with Next.js notFound() in JSX
DESCRIPTION: This JSX code snippet demonstrates how to use the `notFound()` function within a Next.js `page.js` file. It fetches user data and, if the user is not found, invokes `notFound()` to render the designated not-found UI and terminate further rendering.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/04-functions/not-found.mdx#_snippet_1

LANGUAGE: jsx
CODE:
```
import { notFound } from 'next/navigation'

async function fetchUser(id) {
  const res = await fetch('https://...')
  if (!res.ok) return undefined
  return res.json()
}

export default async function Profile({ params }) {
  const { id } = await params
  const user = await fetchUser(id)

  if (!user) {
    notFound()
  }

  // ...
```

----------------------------------------

TITLE: Set Next.js `metadataBase` for Relative URLs
DESCRIPTION: This snippet demonstrates how to use `metadataBase` to provide a base URL for relative paths in other metadata fields like `alternates` (canonical, languages) and `openGraph` images. It shows the JSX configuration and the resulting HTML output, where relative paths are resolved into fully qualified URLs using the `metadataBase`.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/04-functions/generate-metadata.mdx#_snippet_9

LANGUAGE: jsx
CODE:
```
export const metadata = {
  metadataBase: new URL('https://acme.com'),
  alternates: {
    canonical: '/',
    languages: {
      'en-US': '/en-US',
      'de-DE': '/de-DE',
    },
  },
  openGraph: {
    images: '/og-image.png',
  },
}
```

LANGUAGE: html
CODE:
```
<link rel="canonical" href="https://acme.com" />
<link rel="alternate" hreflang="en-US" href="https://acme.com/en-US" />
<link rel="alternate" hreflang="de-DE" href="https://acme.com/de-DE" />
<meta property="og:image" content="https://acme.com/og-image.png" />
```

----------------------------------------

TITLE: Fix Next.js Client Component Time Access with Suspense Fallback
DESCRIPTION: To resolve hydration mismatches when a Client Component accesses the current time during SSR, wrap the component with a `Suspense` boundary. This allows Next.js to prerender a fallback UI on the server and fill in the actual time-dependent content only when the component hydrates in the browser.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/next-prerender-current-time-client.mdx#_snippet_0

LANGUAGE: jsx
CODE:
```
'use client'

export function RelativeTime({ timestamp }) {
  const now = Date.now()
  return (
    <span suppressHydrationWarning>{computeTimeAgo({ timestamp, now })}</span>
  )
}

export default function Article({ articleData }) {
  return (
    <article>
      <h1>...</h1>
      <RelativeTime timestamp={articleData.publishedAt} />
    </article>
  )
}
```

LANGUAGE: jsx
CODE:
```
'use client'

import { Suspense } from 'react'

export function RelativeTime({ timestamp }) {
  const now = Date.now()
  return <span>{computeTimeAgo({ timestamp, now })}</span>
}

export default function Article({ articleData }) {
  return (
    <article>
      <h1>...</h1>
      <Suspense fallback={<span>...</span>}>
        <RelativeTime timestamp={articleData.publishedAt} />
      </Suspense>
    </article>
  )
}
```

----------------------------------------

TITLE: Next.js: Implement Server-side Rendering with getServerSideProps
DESCRIPTION: This code snippet demonstrates how to use `getServerSideProps` in a Next.js page to perform server-side rendering. The `getServerSideProps` function is called on every request to fetch dynamic data from an external API, which is then passed as props to the page component for rendering. This ensures the page displays up-to-date information.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/03-building-your-application/02-rendering/01-server-side-rendering.mdx#_snippet_0

LANGUAGE: jsx
CODE:
```
export default function Page({ data }) {
  // Render data...
}

// This gets called on every request
export async function getServerSideProps() {
  // Fetch data from external API
  const res = await fetch(`https://.../data`)
  const data = await res.json()

  // Pass data to the page via props
  return { props: { data } }
}
```

----------------------------------------

TITLE: Running Next.js Application in Development Mode
DESCRIPTION: These commands install project dependencies and then start the Next.js development server. `npm install` or `yarn install` fetches required packages, while `npm run dev` or `yarn dev` launches the application, typically making it accessible at `http://localhost:3000` for local development and testing.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-couchbase/README.md#_snippet_4

LANGUAGE: bash
CODE:
```
npm install
npm run dev
# or
yarn install
yarn dev
```

----------------------------------------

TITLE: Next.js Content Security Policy (CSP) Implementation
DESCRIPTION: Consider adding a Content Security Policy to protect your Next.js application against various security threats such as cross-site scripting, clickjacking, and other code injection attacks.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/production-checklist.mdx#_snippet_22

LANGUAGE: APIDOC
CODE:
```
Next.js Content Security Policy (CSP):
  Purpose: Protect against XSS, clickjacking, and code injection attacks.
  Recommendation: Implement a robust CSP.
```

----------------------------------------

TITLE: Next.js Middleware Implementation Example
DESCRIPTION: Illustrates how to define and use Middleware in Next.js to intercept requests and perform actions like redirection. The example shows a `middleware.ts`/`middleware.js` file that redirects all requests matching `/about/:path*` to `/home`.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/15-route-handlers-and-middleware.mdx#_snippet_3

LANGUAGE: typescript
CODE:
```
import { NextResponse } from 'next/server'
import type { NextRequest } from 'next/server'

// This function can be marked `async` if using `await` inside
export function middleware(request: NextRequest) {
  return NextResponse.redirect(new URL('/home', request.url))
}

// See "Matching Paths" below to learn more
export const config = {
  matcher: '/about/:path*',
}
```

LANGUAGE: javascript
CODE:
```
import { NextResponse } from 'next/server'

// This function can be marked `async` if using `await` inside
export function middleware(request) {
  return NextResponse.redirect(new URL('/home', request.url))
}

// See "Matching Paths" below to learn more
export const config = {
  matcher: '/about/:path*',
}
```

----------------------------------------

TITLE: Display Content Using Dynamic Route Parameters in Next.js Page
DESCRIPTION: This example demonstrates how to use the `params` prop, which contains dynamic route segments, to display or fetch specific content for the page. The `slug` parameter is extracted and used directly in the page's UI.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/03-file-conventions/page.mdx#_snippet_3

LANGUAGE: tsx
CODE:
```
export default async function Page({
  params,
}: {
  params: Promise<{ slug: string }>
}) {
  const { slug } = await params
  return <h1>Blog Post: {slug}</h1>
}
```

LANGUAGE: jsx
CODE:
```
export default async function Page({ params }) {
  const { slug } = await params
  return <h1>Blog Post: {slug}</h1>
}
```

----------------------------------------

TITLE: Define a Basic GET Route Handler
DESCRIPTION: Illustrates the fundamental structure for creating a public HTTP `GET` endpoint in Next.js using the `route.ts` or `route.js` file convention, accessible at `/api`.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/backend-for-frontend.mdx#_snippet_1

LANGUAGE: ts
CODE:
```
export function GET(request: Request) {}
```

LANGUAGE: js
CODE:
```
export function GET(request) {}
```

----------------------------------------

TITLE: Measuring Elapsed Time for Performance Tracking in Next.js
DESCRIPTION: This example demonstrates how to accurately measure elapsed time for performance tracking within a Next.js client component. It contrasts the use of `Date.now()`, which can be affected by system clock changes, with `performance.now()`, which provides a high-resolution, monotonic timestamp ideal for precise performance measurements. The 'After' snippet shows the recommended approach for improved accuracy.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/next-prerender-current-time-client.mdx#_snippet_3

LANGUAGE: jsx
CODE:
```
"use client"

export default function Page() {
  const start = Date.now();
  const data = computeDataSlowly(...);
  const end = Date.now();
  console.log(`computeDataSlowly took ${end - start} milliseconds to complete`)

  return ...
}
```

LANGUAGE: jsx
CODE:
```
"use client"

export default async function Page() {
  const start = performance.now();
  const data = computeDataSlowly(...);
  const end = performance.now();
  console.log(`computeDataSlowly took ${end - start} milliseconds to complete`)
  return ...
}
```

----------------------------------------

TITLE: Generate Static Params for Next.js Dynamic Routes
DESCRIPTION: Illustrates how to use `generateStaticParams` in a Next.js dynamic route to pre-render segments at build time. This prevents routes from falling back to dynamic rendering at request time, significantly improving performance and user experience.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/04-linking-and-navigating.mdx#_snippet_2

LANGUAGE: tsx
CODE:
```
export async function generateStaticParams() {
  const posts = await fetch('https://.../posts').then((res) => res.json())

  return posts.map((post) => ({
    slug: post.slug,
  }))
}

export default async function Page({
  params,
}: {
  params: Promise<{ slug: string }>
}) {
  const { slug } = await params
  // ...
}
```

LANGUAGE: jsx
CODE:
```
export async function generateStaticParams() {
  const posts = await fetch('https://.../posts').then((res) => res.json())

  return posts.map((post) => ({
    slug: post.slug,
  }))

export default async function Page({ params }) {
  const { slug } = await params
  // ...
}
```

----------------------------------------

TITLE: Define Server Action for User Signup in Next.js
DESCRIPTION: This snippet shows the basic structure for a Next.js Server Action named `signup`. Server Actions execute securely on the server, making them suitable for handling authentication logic and processing form data submitted from client components.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/authentication.mdx#_snippet_1

LANGUAGE: tsx
CODE:
```
export async function signup(formData: FormData) {}
```

LANGUAGE: jsx
CODE:
```
export async function signup(formData) {}
```

----------------------------------------

TITLE: Generate Open Graph Images with ImageResponse in File-based Metadata
DESCRIPTION: Illustrates the usage of `ImageResponse` within a `opengraph-image.tsx` file to generate Open Graph images. This approach supports both build-time and dynamic generation, defining image metadata (alt text, size, content type) and the JSX element for the image content, reusing the exported size configuration for `ImageResponse` options.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/04-functions/image-response.mdx#_snippet_2

LANGUAGE: tsx
CODE:
```
import { ImageResponse } from 'next/og'

// Image metadata
export const alt = 'My site'
export const size = {
  width: 1200,
  height: 630,
}

export const contentType = 'image/png'

// Image generation
export default async function Image() {
  return new ImageResponse(
    (
      // ImageResponse JSX element
      <div
        style={{
          fontSize: 128,
          background: 'white',
          width: '100%',
          height: '100%',
          display: 'flex',
          alignItems: 'center',
          justifyContent: 'center',
        }}
      >
        My site
      </div>
    ),
    // ImageResponse options
    {
      // For convenience, we can re-use the exported opengraph-image
      // size config to also set the ImageResponse's width and height.
      ...size,
    }
  )
}
```

----------------------------------------

TITLE: Create Client-Side React Context Provider (ThemeProvider)
DESCRIPTION: This code defines a `ThemeProvider` as a Client Component, which is necessary for using React Context in Next.js applications since Server Components do not directly support it. It creates a context and provides a value, allowing global state like a theme to be shared with descendant Client Components.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/05-server-and-client-components.mdx#_snippet_7

LANGUAGE: tsx
CODE:
```
'use client'

import { createContext } from 'react'

export const ThemeContext = createContext({})

export default function ThemeProvider({
  children,
}: {
  children: React.ReactNode
}) {
  return <ThemeContext.Provider value="dark">{children}</ThemeContext.Provider>
}
```

LANGUAGE: jsx
CODE:
```
'use client'

import { createContext } from 'react'

export const ThemeContext = createContext({})

export default function ThemeProvider({ children }) {
  return <ThemeContext.Provider value="dark">{children}</ThemeContext.Provider>
}
```

----------------------------------------

TITLE: Implement Granular Streaming with React Suspense in Next.js
DESCRIPTION: This example illustrates how to use React's `<Suspense>` component in a Next.js page to achieve more granular streaming. Content outside the `<Suspense>` boundary is sent immediately, while content wrapped within it (e.g., a `BlogList` component) is streamed progressively, displaying a `fallback` UI until the data is ready.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/07-fetching-data.mdx#_snippet_7

LANGUAGE: tsx
CODE:
```
import { Suspense } from 'react'
import BlogList from '@/components/BlogList'
import BlogListSkeleton from '@/components/BlogListSkeleton'

export default function BlogPage() {
  return (
    <div>
      {/* This content will be sent to the client immediately */}
      <header>
        <h1>Welcome to the Blog</h1>
        <p>Read the latest posts below.</p>
      </header>
      <main>
        {/* Any content wrapped in a <Suspense> boundary will be streamed */}
        <Suspense fallback={<BlogListSkeleton />}>
          <BlogList />
        </Suspense>
      </main>
    </div>
  )
}
```

LANGUAGE: jsx
CODE:
```
import { Suspense } from 'react'
import BlogList from '@/components/BlogList'
import BlogListSkeleton from '@/components/BlogListSkeleton'

export default function BlogPage() {
  return (
    <div>
      {/* This content will be sent to the client immediately */}
      <header>
        <h1>Welcome to the Blog</h1>
        <p>Read the latest posts below.</p>
      </header>
      <main>
        {/* Any content wrapped in a <Suspense> boundary will be streamed */}
        <Suspense fallback={<BlogListSkeleton />}>
          <BlogList />
        </Suspense>
      </main>
    </div>
  )
}
```

----------------------------------------

TITLE: Next.js Link Component Automatic Prefetching Example
DESCRIPTION: This code snippet demonstrates how the Next.js `<Link>` component automatically prefetches routes when they enter the user's viewport or are hovered, contrasting with standard `<a>` tags which do not prefetch. It shows a basic `app/layout.tsx` or `app/layout.js` structure where links are used for navigation.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/04-linking-and-navigating.mdx#_snippet_0

LANGUAGE: tsx
CODE:
```
import Link from 'next/link'

export default function Layout({ children }: { children: React.ReactNode }) {
  return (
    <html>
      <body>
        <nav>
          {/* Prefetched when the link is hovered or enters the viewport */}
          <Link href="/blog">Blog</Link>
          {/* No prefetching */}
          <a href="/contact">Contact</a>
        </nav>
        {children}
      </body>
    </html>
  )
}
```

LANGUAGE: jsx
CODE:
```
import Link from 'next/link'

export default function Layout() {
  return (
    <html>
      <body>
        <nav>
          {/* Prefetched when the link is hovered or enters the viewport */}
          <Link href="/blog">Blog</Link>
          {/* No prefetching */}
          <a href="/contact">Contact</a>
        </nav>
        {children}
      </body>
    </html>
  )
}
```

----------------------------------------

TITLE: Set CORS Headers in Next.js Route Handler
DESCRIPTION: Illustrates how to set standard CORS headers (`Access-Control-Allow-Origin`, `Access-Control-Allow-Methods`, `Access-Control-Allow-Headers`) for a specific Route Handler in Next.js. It uses the `Response` object's headers property. Notes suggest using Middleware or `next.config.js` for broader application.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/03-file-conventions/route.mdx#_snippet_19

LANGUAGE: ts
CODE:
```
export async function GET(request: Request) {
  return new Response('Hello, Next.js!', {
    status: 200,
    headers: {
      'Access-Control-Allow-Origin': '*',
      'Access-Control-Allow-Methods': 'GET, POST, PUT, DELETE, OPTIONS',
      'Access-Control-Allow-Headers': 'Content-Type, Authorization',
    },
  })
}
```

LANGUAGE: js
CODE:
```
export async function GET(request) {
  return new Response('Hello, Next.js!', {
    status: 200,
    headers: {
      'Access-Control-Allow-Origin': '*',
      'Access-Control-Allow-Methods': 'GET, POST, PUT, DELETE, OPTIONS',
      'Access-Control-Allow-Headers': 'Content-Type, Authorization',
    },
  })
}
```

----------------------------------------

TITLE: Define Inline Server Functions with `use server` (Next.js/React)
DESCRIPTION: The `use server` directive can be placed inline at the top of a specific function to mark only that function as a server function. This allows a server component to define and use a server action directly within its scope, such as an `updatePost` function that revalidates a path after saving data.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/01-directives/use-server.mdx#_snippet_3

LANGUAGE: tsx
CODE:
```
import { EditPost } from './edit-post'
import { revalidatePath } from 'next/cache'

export default async function PostPage({ params }: { params: { id: string } }) {
  const post = await getPost(params.id)

  async function updatePost(formData: FormData) {
    'use server'
    await savePost(params.id, formData)
    revalidatePath(`/posts/${params.id}`)
  }

  return <EditPost updatePostAction={updatePost} post={post} />
}
```

LANGUAGE: jsx
CODE:
```
import { EditPost } from './edit-post'
import { revalidatePath } from 'next/cache'

export default async function PostPage({ params }) {
  const post = await getPost(params.id)

  async function updatePost(formData) {
    'use server'
    await savePost(params.id, formData)
    revalidatePath(`/posts/${params.id}`)
  }

  return <EditPost updatePostAction={updatePost} post={post} />
}
```

----------------------------------------

TITLE: Cache a GET Route Handler in Next.js
DESCRIPTION: Illustrates how to enable static caching for a GET Route Handler in Next.js by setting `export const dynamic = 'force-static'`. The example fetches data from an external API and returns it as JSON, demonstrating a common use case for cached GET requests.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/15-route-handlers-and-middleware.mdx#_snippet_1

LANGUAGE: ts
CODE:
```
export const dynamic = 'force-static'

export async function GET() {
  const res = await fetch('https://data.mongodb-api.com/...', {
    headers: {
      'Content-Type': 'application/json',
      'API-Key': process.env.DATA_API_KEY,
    },
  })
  const data = await res.json()

  return Response.json({ data })
}
```

LANGUAGE: js
CODE:
```
export const dynamic = 'force-static'

export async function GET() {
  const res = await fetch('https://data.mongodb-api.com/...', {
    headers: {
      'Content-Type': 'application/json',
      'API-Key': process.env.DATA_API_KEY,
    },
  })
  const data = await res.json()

  return Response.json({ data })
}
```

----------------------------------------

TITLE: Streaming Promise to Client with Context Provider - TypeScript
DESCRIPTION: This Server Component initiates data fetching by creating a promise (`blogPromise`) and then passes this promise to the `BlogProvider` (a Client Component). This pattern allows the promise to be streamed to the client, where it can be resolved later using the `use` hook.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/no-async-client-component.mdx#_snippet_3

LANGUAGE: tsx
CODE:
```
import { BlogProvider } from './context'

export default function Page() {
  const blogPromise = fetch('https://api.vercel.app/blog').then((res) =>
    res.json()
  )

  return (
    <BlogProvider blogPromise={blogPromise}>
      <BlogPosts />
    </BlogProvider>
  )
}
```

----------------------------------------

TITLE: Permanently Redirect User After Canonical URL Change in Next.js Server Action
DESCRIPTION: This snippet illustrates the use of the `permanentRedirect` function in a Next.js Server Action to issue a permanent redirect (308 status code) after a change to an entity's canonical URL, such as updating a user's username and profile path. It includes `revalidateTag` for cache invalidation.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/redirecting.mdx#_snippet_2

LANGUAGE: typescript
CODE:
```
'use server'\n\nimport { permanentRedirect } from 'next/navigation'\nimport { revalidateTag } from 'next/cache'\n\nexport async function updateUsername(username: string, formData: FormData) {\n  try {\n    // Call database\n  } catch (error) {\n    // Handle errors\n  }\n\n  revalidateTag('username') // Update all references to the username\n  permanentRedirect(`/profile/${username}`) // Navigate to the new user profile\n}
```

LANGUAGE: javascript
CODE:
```
'use server'\n\nimport { permanentRedirect } from 'next/navigation'\nimport { revalidateTag } from 'next/cache'\n\nexport async function updateUsername(username, formData) {\n  try {\n    // Call database\n  } catch (error) {\n    // Handle errors\n  }\n\n  revalidateTag('username') // Update all references to the username\n  permanentRedirect(`/profile/${username}`) // Navigate to the new user profile\n}
```

----------------------------------------

TITLE: Next.js Route Groups and Private Folder Conventions
DESCRIPTION: Specifies the conventions for organizing routes into groups without affecting the URL path and for creating private folders that are excluded from routing.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/02-project-structure.mdx#_snippet_5

LANGUAGE: APIDOC
CODE:
```
`(folder)`: Group routes without affecting routing
`_folder`: Opt folder and all child segments out of routing
```

----------------------------------------

TITLE: Configuring Security Headers in Next.js
DESCRIPTION: This configuration in `next.config.js` defines security headers for a Next.js application. It applies global headers like `X-Content-Type-Options`, `X-Frame-Options`, and `Referrer-Policy` to all routes, and specific headers for the service worker (`/sw.js`) to ensure correct interpretation, prevent caching, and enforce a strict Content Security Policy.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/progressive-web-apps.mdx#_snippet_11

LANGUAGE: JavaScript
CODE:
```
module.exports = {
  async headers() {
    return [
      {
        source: '/(.*)',
        headers: [
          {
            key: 'X-Content-Type-Options',
            value: 'nosniff',
          },
          {
            key: 'X-Frame-Options',
            value: 'DENY',
          },
          {
            key: 'Referrer-Policy',
            value: 'strict-origin-when-cross-origin',
          }
        ]
      },
      {
        source: '/sw.js',
        headers: [
          {
            key: 'Content-Type',
            value: 'application/javascript; charset=utf-8',
          },
          {
            key: 'Cache-Control',
            value: 'no-cache, no-store, must-revalidate',
          },
          {
            key: 'Content-Security-Policy',
            value: "default-src 'self'; script-src 'self'",
          }
        ]
      }
    ]
  }
}
```

----------------------------------------

TITLE: Perform Authentication Checks in Next.js Data Access Layer (DAL)
DESCRIPTION: Illustrates how to implement a `getUser` function within the Data Access Layer (DAL) that performs session verification. This ensures that authentication checks are consistently applied whenever user data is accessed, preventing unauthorized data retrieval.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/authentication.mdx#_snippet_29

LANGUAGE: ts
CODE:
```
export const getUser = cache(async () => {
  const session = await verifySession()
  if (!session) return null

  // Get user ID from session and fetch data
})
```

LANGUAGE: js
CODE:
```
export const getUser = cache(async () => {
  const session = await verifySession()
  if (!session) return null

  // Get user ID from session and fetch data
})
```

----------------------------------------

TITLE: Configure Next.js Twitter Card Metadata (Summary Large Image)
DESCRIPTION: This snippet demonstrates how to configure Next.js `metadata` to generate Twitter Card meta tags for a 'summary_large_image' card type. It includes properties like title, description, site ID, creator, and an absolute URL for the image. The corresponding HTML output shows the generated meta tags.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/04-functions/generate-metadata.mdx#_snippet_20

LANGUAGE: jsx
CODE:
```
export const metadata = {
  twitter: {
    card: 'summary_large_image',
    title: 'Next.js',
    description: 'The React Framework for the Web',
    siteId: '1467726470533754880',
    creator: '@nextjs',
    creatorId: '1467726470533754880',
    images: ['https://nextjs.org/og.png'], // Must be an absolute URL
  },
}
```

LANGUAGE: html
CODE:
```
<meta name="twitter:card" content="summary_large_image" />
<meta name="twitter:site:id" content="1467726470533754880" />
<meta name="twitter:creator" content="@nextjs" />
<meta name="twitter:creator:id" content="1467726470533754880" />
<meta name="twitter:title" content="Next.js" />
<meta name="twitter:description" content="The React Framework for the Web" />
<meta name="twitter:image" content="https://nextjs.org/og.png" />
```

----------------------------------------

TITLE: Example Next.js Image Optimization Configuration
DESCRIPTION: This code snippet provides a comprehensive example of a valid `images` configuration within `next.config.js`. It outlines various properties like `deviceSizes`, `imageSizes`, `domains`, `path`, `loader`, `minimumCacheTTL`, `formats`, `dangerouslyAllowSVG`, `contentSecurityPolicy`, `contentDispositionType`, `localPatterns`, `remotePatterns`, `qualities`, and `unoptimized`, demonstrating the correct structure to prevent configuration errors.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/invalid-images-config.mdx#_snippet_0

LANGUAGE: js
CODE:
```
module.exports = {
  images: {
    // limit of 25 deviceSizes values
    deviceSizes: [640, 750, 828, 1080, 1200, 1920, 2048, 3840],
    // limit of 25 imageSizes values
    imageSizes: [16, 32, 48, 64, 96, 128, 256, 384],
    // limit of 50 domains values (deprecated)
    domains: [],
    // path prefix for Image Optimization API, useful with `loader`
    path: '/_next/image',
    // loader can be 'default', 'imgix', 'cloudinary', 'akamai', or 'custom'
    loader: 'default',
    // file with `export default function loader({src, width, quality})`
    loaderFile: '',
    // disable static imports for image files
    disableStaticImages: false,
    // minimumCacheTTL is in seconds, must be integer 0 or more
    minimumCacheTTL: 60,
    // ordered list of acceptable optimized image formats (mime types)
    formats: ['image/webp'],
    // enable dangerous use of SVG images
    dangerouslyAllowSVG: false,
    // set the Content-Security-Policy header
    contentSecurityPolicy: "default-src 'self'; script-src 'none'; sandbox;",
    // sets the Content-Disposition header ('inline' or 'attachment')
    contentDispositionType: 'attachment',
    // limit of 25 objects
    localPatterns: [],
    // limit of 50 objects
    remotePatterns: [],
    // limit of 20 integers
    qualities: [25, 50, 75],
    // when true, every image will be unoptimized
    unoptimized: false
  }
}
```

----------------------------------------

TITLE: Consume Data Access Layer Profile DTO in Next.js Page
DESCRIPTION: This `tsx` snippet demonstrates how a Next.js `Page` Server Component consumes data from the Data Access Layer. It imports `getProfile` (presumably a DTO function like `getProfileDTO`) and awaits its result. This pattern ensures that the `profile` object passed to the page is already sanitized and contains only safe, non-sensitive data, making it suitable for rendering without risk of exposing private information.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/data-security.mdx#_snippet_3

LANGUAGE: tsx
CODE:
```
import { getProfile } from '../../data/user'\n\nexport async function Page({ params: { slug } }) {\n  // This page can now safely pass around this profile knowing\n  // that it shouldn't contain anything sensitive.\n  const profile = await getProfile(slug);\n  ...\n}
```

----------------------------------------

TITLE: Incorrect createContext Usage in Next.js Server Component
DESCRIPTION: This snippet shows `createContext` being used in a component without the `'use client'` directive, which will cause an error if the component is rendered as a Server Component in Next.js.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/context-in-server-component.mdx#_snippet_0

LANGUAGE: jsx
CODE:
```
import { createContext } from 'react'

const Context = createContext()
```

----------------------------------------

TITLE: Secure Next.js Server Actions with Role-Based Authorization
DESCRIPTION: Demonstrates how to implement authorization checks within Next.js Server Actions. Before proceeding with a mutation, the user's session is verified, and their role is checked to ensure they have the necessary permissions, treating Server Actions as public-facing API endpoints.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/authentication.mdx#_snippet_30

LANGUAGE: ts
CODE:
```
'use server'
import { verifySession } from '@/app/lib/dal'

export async function serverAction(formData: FormData) {
  const session = await verifySession()
  const userRole = session?.user?.role

  // Return early if user is not authorized to perform the action
  if (userRole !== 'admin') {
    return null
  }

  // Proceed with the action for authorized users
}
```

LANGUAGE: js
CODE:
```
'use server'
import { verifySession } from '@/app/lib/dal'

export async function serverAction() {
  const session = await verifySession()
  const userRole = session.user.role

  // Return early if user is not authorized to perform the action
  if (userRole !== 'admin') {
    return null
  }

  // Proceed with the action for authorized users
}
```

----------------------------------------

TITLE: Applying Global CSS in Next.js App Router
DESCRIPTION: Shows how to apply global CSS styles across an entire Next.js application using the App Router. Create a `global.css` file and import it into the root layout component (`app/layout.tsx` or `app/layout.js`). These styles will be applied to every route.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/11-css.mdx#_snippet_2

LANGUAGE: css
CODE:
```
body {
  padding: 20px 20px 60px;
  max-width: 680px;
  margin: 0 auto;
}
```

LANGUAGE: tsx
CODE:
```
// These styles apply to every route in the application
import './global.css'

export default function RootLayout({
  children,
}: {
  children: React.ReactNode
}) {
  return (
    <html lang="en">
      <body>{children}</body>
    </html>
  )
}
```

LANGUAGE: jsx
CODE:
```
// These styles apply to every route in the application
import './global.css'

export default function RootLayout({ children }) {
  return (
    <html lang="en">
      <body>{children}</body>
    </html>
  )
}
```

----------------------------------------

TITLE: Inline Server Functions within Server Components (TypeScript/JavaScript)
DESCRIPTION: Illustrates how to define a Server Function directly within a Server Component by adding the 'use server' directive inside the asynchronous function's body. This allows for co-locating data mutation logic with the component that uses it.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/08-updating-data.mdx#_snippet_1

LANGUAGE: tsx
CODE:
```
export default function Page() {
  // Server Action
  async function createPost(formData: FormData) {
    'use server'
    // ...
  }

  return <></>
}
```

LANGUAGE: jsx
CODE:
```
export default function Page() {
  // Server Action
  async function createPost(formData) {
    'use server'
    // ...
  }

  return <></>
}
```

----------------------------------------

TITLE: Display Form Validation Errors using React useActionState in Next.js Client Component
DESCRIPTION: Shows how to create a Client Component in Next.js that uses React's `useActionState` hook to manage form state and display validation errors. It binds the form to a server action and conditionally renders error messages.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/forms.mdx#_snippet_5

LANGUAGE: tsx
CODE:
```
'use client'

import { useActionState } from 'react'
import { createUser } from '@/app/actions'

const initialState = {
  message: '',
}

export function Signup() {
  const [state, formAction, pending] = useActionState(createUser, initialState)

  return (
    <form action={formAction}>
      <label htmlFor="email">Email</label>
      <input type="text" id="email" name="email" required />
      {/* ... */}
      <p aria-live="polite">{state?.message}</p>
      <button disabled={pending}>Sign up</button>
    </form>
  )
}
```

LANGUAGE: jsx
CODE:
```
'use client'

import { useActionState } from 'react'
import { createUser } from '@/app/actions'

const initialState = {
  message: '',
}

export function Signup() {
  const [state, formAction, pending] = useActionState(createUser, initialState)

  return (
    <form action={formAction}>
      <label htmlFor="email">Email</label>
      <input type="text" id="email" name="email" required />
      {/* ... */}
      <p aria-live="polite">{state?.message}</p>
      <button disabled={pending}>Sign up</button>
    </form>
  )
}
```

----------------------------------------

TITLE: Running Next.js Development Server (Bash)
DESCRIPTION: These commands are used to install project dependencies and start the Next.js development server. `npm install` or `yarn install` fetches required packages, while `npm run dev` or `yarn dev` launches the application, typically accessible at `http://localhost:3000` for local development and testing.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-storyblok/README.md#_snippet_5

LANGUAGE: bash
CODE:
```
npm install
npm run dev
```

LANGUAGE: bash
CODE:
```
yarn install
yarn dev
```

----------------------------------------

TITLE: Run Next.js Development Server Locally
DESCRIPTION: These commands start the Next.js development server, making the application accessible at `http://localhost:3000`. This allows for local development with hot-reloading and access to API routes.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-docker/README.md#_snippet_4

LANGUAGE: bash
CODE:
```
npm run dev
# or
yarn dev
```

----------------------------------------

TITLE: Type Next.js API Route Handlers
DESCRIPTION: Provides an example of typing a basic Next.js API route handler using `NextApiRequest` and `NextApiResponse` from `next`. This ensures type safety for incoming requests and outgoing responses.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/05-config/02-typescript.mdx#_snippet_7

LANGUAGE: ts
CODE:
```
import type { NextApiRequest, NextApiResponse } from 'next'

export default function handler(req: NextApiRequest, res: NextApiResponse) {
  res.status(200).json({ name: 'John Doe' })
}
```

----------------------------------------

TITLE: Displaying Remote Images with Next.js Image Component
DESCRIPTION: This snippet demonstrates how to use the Next.js `Image` component with remote image URLs. It requires manually specifying `width` and `height` props since Next.js cannot access remote file dimensions during build time.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/02-components/image.mdx#_snippet_46

LANGUAGE: jsx
CODE:
```
import Image from 'next/image'

export default function Page() {
  return (
    <Image
      src="https://s3.amazonaws.com/my-bucket/profile.png"
      alt="Picture of the author"
      width={500}
      height={500}
    />
  )
}
```

----------------------------------------

TITLE: Define a Next.js Root Layout
DESCRIPTION: This snippet shows how to define the top-most root layout for a Next.js application. It is responsible for defining the `<html>` and `<body>` tags and wrapping the entire application's content.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/03-file-conventions/layout.mdx#_snippet_1

LANGUAGE: tsx
CODE:
```
export default function RootLayout({
  children,
}: {
  children: React.ReactNode
}) {
  return (
    <html lang="en">
      <body>{children}</body>
    </html>
  )
}
```

LANGUAGE: jsx
CODE:
```
export default function RootLayout({ children }) {
  return (
    <html lang="en">
      <body>{children}</body>
    </html>
  )
}
```

----------------------------------------

TITLE: Define Catch-all Dynamic Segments with generateStaticParams in Next.js
DESCRIPTION: This example illustrates how to create a page with a catch-all dynamic segment (e.g., `[...slug]`) that captures all subsequent path segments into an array. `generateStaticParams` is used to define specific `slug` arrays for static pre-rendering, allowing flexible routing.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/04-functions/generate-static-params.mdx#_snippet_5

LANGUAGE: tsx
CODE:
```
export function generateStaticParams() {
  return [{ slug: ['a', '1'] }, { slug: ['b', '2'] }, { slug: ['c', '3'] }]
}

// Three versions of this page will be statically generated
// using the `params` returned by `generateStaticParams`
// - /product/a/1
// - /product/b/2
// - /product/c/3
export default async function Page({
  params,
}: {
  params: Promise<{ slug: string[] }>
}) {
  const { slug } = await params
  // ...
}
```

LANGUAGE: jsx
CODE:
```
export function generateStaticParams() {
  return [{ slug: ['a', '1'] }, { slug: ['b', '2'] }, { slug: ['c', '3'] }]
}

// Three versions of this page will be statically generated
// using the `params` returned by `generateStaticParams`
// - /product/a/1
// - /product/b/2
// - /product/c/3
export default async function Page({ params }) {
  const { slug } = await params
  // ...
}
```

----------------------------------------

TITLE: Implement ISR with Next.js App Router
DESCRIPTION: This example demonstrates Incremental Static Regeneration using the App Router. It defines `revalidate` for cache invalidation, `dynamicParams` for on-demand rendering of unknown paths, and `generateStaticParams` to pre-render known blog post IDs at build time. The `Page` component fetches and displays individual blog post content.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/incremental-static-regeneration.mdx#_snippet_0

LANGUAGE: tsx
CODE:
```
interface Post {
  id: string
  title: string
  content: string
}

// Next.js will invalidate the cache when a
// request comes in, at most once every 60 seconds.
export const revalidate = 60

// We'll prerender only the params from `generateStaticParams` at build time.
// If a request comes in for a path that hasn't been generated,
// Next.js will server-render the page on-demand.
export const dynamicParams = true // or false, to 404 on unknown paths

export async function generateStaticParams() {
  const posts: Post[] = await fetch('https://api.vercel.app/blog').then((res) =>
    res.json()
  )
  return posts.map((post) => ({
    id: String(post.id),
  }))
}

export default async function Page({
  params,
}: {
  params: Promise<{ id: string }>
}) {
  const { id } = await params
  const post: Post = await fetch(`https://api.vercel.app/blog/${id}`).then(
    (res) => res.json()
  )
  return (
    <main>
      <h1>{post.title}</h1>
      <p>{post.content}</p>
    </main>
  )
}
```

LANGUAGE: jsx
CODE:
```
// Next.js will invalidate the cache when a
// request comes in, at most once every 60 seconds.
export const revalidate = 60

// We'll prerender only the params from `generateStaticParams` at build time.
// If a request comes in for a path that hasn't been generated,
// Next.js will server-render the page on-demand.
export const dynamicParams = true // or false, to 404 on unknown paths

export async function generateStaticParams() {
  const posts = await fetch('https://api.vercel.app/blog').then((res) =>
    res.json()
  )
  return posts.map((post) => ({
    id: String(post.id),
  }))
}

export default async function Page({ params }) {
  const { id } = await params
  const post = await fetch(`https://api.vercel.app/blog/${id}`).then((res) =>
    res.json()
  )
  return (
    <main>
      <h1>{post.title}</h1>
      <p>{post.content}</p>
    </main>
  )
}
```

----------------------------------------

TITLE: Accessing Current Pathname in Next.js Client Components
DESCRIPTION: Demonstrates how to use the `usePathname` hook within a Next.js Client Component to get the current URL pathname. This is necessary because Layouts do not rerender and would otherwise have stale pathname information.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/03-file-conventions/layout.mdx#_snippet_7

LANGUAGE: tsx
CODE:
```
'use client'

import { usePathname } from 'next/navigation'

// Simplified breadcrumbs logic
export default function Breadcrumbs() {
  const pathname = usePathname()
  const segments = pathname.split('/')

  return (
    <nav>
      {segments.map((segment, index) => (
        <span key={index}>
          {' > '}
          {segment}
        </span>
      ))}
    </nav>
  )
}
```

LANGUAGE: jsx
CODE:
```
'use client'

import { usePathname } from 'next/navigation'

// Simplified breadcrumbs logic
export default function Breadcrumbs() {
  const pathname = usePathname()
  const segments = pathname.split('/')

  return (
    <nav>
      {segments.map((segment, index) => (
        <span key={index}>
          {' > '}
          {segment}
        </span>
      ))}
    </nav>
  )
}
```

----------------------------------------

TITLE: BAD Example: Client Component Accepting Overly Broad Props
DESCRIPTION: This `tsx` snippet shows a problematic Client Component (`Profile`) that accepts a generic `User` object as props. This design is flawed because it encourages Server Components to pass excessive data, potentially including sensitive fields, to the client. A better practice is to define a minimal props interface that only includes the specific data required for rendering, thereby enforcing data sanitization upstream.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/data-security.mdx#_snippet_5

LANGUAGE: tsx
CODE:
```
'use client'\n\n// BAD: This is a bad props interface because it accepts way more data than the\n// Client Component needs and it encourages server components to pass all that\n// data down. A better solution would be to accept a limited object with just\n// the fields necessary for rendering the profile.\nexport default async function Profile({ user }: { user: User }) {\n  return (\n    <div>\n      <h1>{user.name}</h1>\n      ...\n    </div>\n  )\n}
```

----------------------------------------

TITLE: Run Next.js Development Server with Yarn
DESCRIPTION: These commands first install project dependencies using `yarn install` and then start the Next.js development server using `yarn dev`. This is an alternative to npm for Yarn users.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-umbraco-heartcore/README.md#_snippet_6

LANGUAGE: bash
CODE:
```
yarn install
yarn dev
```

----------------------------------------

TITLE: Configure Allowed Origins for Next.js Server Actions
DESCRIPTION: This configuration snippet demonstrates how to specify a list of safe origins for Next.js Server Actions using the `serverActions.allowedOrigins` option in `next.config.js`. This is crucial for applications behind reverse proxies or with differing API domains to prevent CSRF attacks by ensuring requests originate from trusted hosts.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/data-security.mdx#_snippet_15

LANGUAGE: js
CODE:
```
/** @type {import('next').NextConfig} */
module.exports = {
  experimental: {
    serverActions: {
      allowedOrigins: ['my-proxy.com', '*.my-proxy.com']
    }
  }
}
```

----------------------------------------

TITLE: Manage Form Pending State with React useActionState Hook
DESCRIPTION: This snippet demonstrates how to use the `useActionState` hook to manage the pending state of a form submission. It exposes a `pending` boolean that can be used to disable the submit button or show a loading indicator while the form action is being executed. The `createUser` action is an assumed server function.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/forms.mdx#_snippet_6

LANGUAGE: tsx
CODE:
```
'use client'

import { useActionState } from 'react'
import { createUser } from '@/app/actions'

export function Signup() {
  const [state, formAction, pending] = useActionState(createUser, initialState)

  return (
    <form action={formAction}>
      {/* Other form elements */}
      <button disabled={pending}>Sign up</button>
    </form>
  )
}
```

LANGUAGE: jsx
CODE:
```
'use client'

import { useActionState } from 'react'
import { createUser } from '@/app/actions'

export function Signup() {
  const [state, formAction, pending] = useActionState(createUser, initialState)

  return (
    <form action={formAction}>
      {/* Other form elements */}
      <button disabled={pending}>Sign up</button>
    </form>
  )
}
```

----------------------------------------

TITLE: Next.js App Router Hooks API Overview and Changes
DESCRIPTION: Overview of the new routing hooks (`useRouter`, `usePathname`, `useSearchParams`) introduced for the Next.js `app` directory, detailing their purpose, import paths, and differences from `pages` router hooks. Also lists properties removed from the new `useRouter` hook and notes on compatibility.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/migrating/app-router-migration.mdx#_snippet_13

LANGUAGE: APIDOC
CODE:
```
useRouter() (from 'next/navigation'):
  Purpose: Programmatic navigation.
  Behavior:
    - Does not return 'pathname' (use usePathname() instead).
    - Does not return 'query' object (use useSearchParams() and useParams() instead).
  Removed Properties:
    - isFallback (replaced by new fallback mechanism)
    - locale, locales, defaultLocales, domainLocales (built-in i18n no longer necessary)
    - basePath (alternative not yet implemented)
    - asPath (concept of 'as' removed)
    - isReady (no longer necessary; useSearchParams() skips prerendering)
    - route (use usePathname() or useSelectedLayoutSegments() instead)
  Supported In: Client Components only.

usePathname() (from 'next/navigation'):
  Purpose: Get the current URL pathname.
  Supported In: Client Components only.

useSearchParams() (from 'next/navigation'):
  Purpose: Get URL search parameters.
  Behavior: During static rendering, components using this hook skip prerendering and render on client.
  Supported In: Client Components only.

useParams() (from 'next/navigation' - implied):
  Purpose: Get dynamic route parameters.

useRouter() (from 'next/router'):
  Purpose: Router hook for 'pages' directory.
  Compatibility: Not supported in 'app' directory.

useRouter() (from 'next/compat/router'):
  Purpose: For sharing components between 'pages' and 'app' routers.
  Usage: Intended for transition period; update to 'next/navigation' useRouter when fully on 'app' router.
```

----------------------------------------

TITLE: Next.js Route Handler for Draft Mode Activation
DESCRIPTION: Implements the server-side logic for a Next.js Route Handler (`app/api/draft/route.ts` or `.js`) that enables draft mode. It validates the incoming request's secret token and slug, fetches content from the headless CMS, activates Next.js draft mode, and redirects the user to the correct page. The handler includes checks to prevent invalid access and open redirect vulnerabilities.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/draft-mode.mdx#_snippet_3

LANGUAGE: ts
CODE:
```
import { draftMode } from 'next/headers'
import { redirect } from 'next/navigation'

export async function GET(request: Request) {
  // Parse query string parameters
  const { searchParams } = new URL(request.url)
  const secret = searchParams.get('secret')
  const slug = searchParams.get('slug')

  // Check the secret and next parameters
  // This secret should only be known to this Route Handler and the CMS
  if (secret !== 'MY_SECRET_TOKEN' || !slug) {
    return new Response('Invalid token', { status: 401 })
  }

  // Fetch the headless CMS to check if the provided `slug` exists
  // getPostBySlug would implement the required fetching logic to the headless CMS
  const post = await getPostBySlug(slug)

  // If the slug doesn't exist prevent draft mode from being enabled
  if (!post) {
    return new Response('Invalid slug', { status: 401 })
  }

  // Enable Draft Mode by setting the cookie
  const draft = await draftMode()
  draft.enable()

  // Redirect to the path from the fetched post
  // We don't redirect to searchParams.slug as that might lead to open redirect vulnerabilities
  redirect(post.slug)
}
```

LANGUAGE: js
CODE:
```
import { draftMode } from 'next/headers'
import { redirect } from 'next/navigation'

export async function GET(request) {
  // Parse query string parameters
  const { searchParams } = new URL(request.url)
  const secret = searchParams.get('secret')
  const slug = searchParams.get('slug')

  // Check the secret and next parameters
  // This secret should only be known to this Route Handler and the CMS
  if (secret !== 'MY_SECRET_TOKEN' || !slug) {
    return new Response('Invalid token', { status: 401 })
  }

  // Fetch the headless CMS to check if the provided `slug` exists
  // getPostBySlug would implement the required fetching logic to the headless CMS
  const post = await getPostBySlug(slug)

  // If the slug doesn't exist prevent draft mode from being enabled
  if (!post) {
    return new Response('Invalid slug', { status: 401 })
  }

  // Enable Draft Mode by setting the cookie
  const draft = await draftMode()
  draft.enable()

  // Redirect to the path from the fetched post
  // We don't redirect to searchParams.slug as that might lead to open redirect vulnerabilities
  redirect(post.slug)
}
```

----------------------------------------

TITLE: Fetching Data with Type Safety in Next.js App Router
DESCRIPTION: This example demonstrates how the Next.js App Router provides enhanced end-to-end type safety for data fetching. Data returned from server components does not need to be serialized, allowing complex types like Date, Map, and Set to be used directly.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/05-config/02-typescript.mdx#_snippet_0

LANGUAGE: tsx
CODE:
```
async function getData() {
  const res = await fetch('https://api.example.com/')
  // The return value is *not* serialized
  // You can return Date, Map, Set, etc.
  return res.json()
}

export default async function Page() {
  const name = await getData()

  return '...'
}
```

----------------------------------------

TITLE: Opting out of fetch caching in Next.js
DESCRIPTION: This snippet demonstrates how to prevent a 'fetch' request from being cached by Next.js. By setting 'cache: 'no-store'' in the fetch options, the response will not be stored in the Data Cache, ensuring fresh data on every request.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/caching.mdx#_snippet_3

LANGUAGE: js
CODE:
```
let data = await fetch('https://api.vercel.app/blog', { cache: 'no-store' })
```

----------------------------------------

TITLE: Implement Redirects with Next.js Middleware
DESCRIPTION: This snippet illustrates how to implement redirects using Next.js middleware. It modifies the `pathname` of the `nextUrl` object for a specific incoming path and then uses `NextResponse.redirect` to send the user to the new, updated path.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/backend-for-frontend.mdx#_snippet_15

LANGUAGE: ts
CODE:
```
import { NextResponse } from 'next/server'

export function middleware(request: Request) {
  if (request.nextUrl.pathname === '/v1/docs') {
    request.nextUrl.pathname = '/v2/docs'
    return NextResponse.redirect(request.nextUrl)
  }
}
```

LANGUAGE: js
CODE:
```
import { NextResponse } from 'next/server'

export function middleware(request) {
  if (request.nextUrl.pathname === '/v1/docs') {
    request.nextUrl.pathname = '/v2/docs'
    return NextResponse.redirect(request.nextUrl)
  }
}
```

----------------------------------------

TITLE: Copying Environment Variable Example File
DESCRIPTION: This command copies the `.env.local.example` file to `.env.local`. The `.env.local` file is crucial for storing sensitive environment variables, such as Elasticsearch connection details, and is configured to be ignored by Git for security.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-elasticsearch/README.md#_snippet_3

LANGUAGE: bash
CODE:
```
cp .env.local.example .env.local
```

----------------------------------------

TITLE: Migrate Next.js Dynamic APIs to Async (Params, SearchParams, Metadata)
DESCRIPTION: This codemod updates `params` and `searchParams` access in page/route entries and `generateMetadata`/`generateViewport` APIs. It transforms synchronous calls to asynchronous functions, awaiting property access, or uses `React.use` for Client Components.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/upgrading/codemods.mdx#_snippet_3

LANGUAGE: tsx
CODE:
```
// Before page.tsx
export default function Page({
  params,
  searchParams,
}: {
  params: { slug: string }
  searchParams: { [key: string]: string | string[] | undefined }
}) {
  const { value } = searchParams
  if (value === 'foo') {
    // ...
  }
}

export function generateMetadata({ params }: { params: { slug: string } }) {
  const { slug } = params
  return {
    title: `My Page - ${slug}`,
  }
}

// After page.tsx
export default async function Page(props: {
  params: Promise<{ slug: string }>
  searchParams: Promise<{ [key: string]: string | string[] | undefined }>
}) {
  const searchParams = await props.searchParams
  const { value } = searchParams
  if (value === 'foo') {
    // ...
  }
}

export async function generateMetadata(props: {
  params: Promise<{ slug: string }>
}) {
  const params = await props.params
  const { slug } = params
  return {
    title: `My Page - ${slug}`,
  }
}
```

----------------------------------------

TITLE: Statically Generate Dynamic Routes with generateStaticParams
DESCRIPTION: Demonstrates how to use `generateStaticParams` to fetch data and return an array of `params` to pre-render dynamic route segments like `[slug]` at build time. Also shows the corresponding `Page` component receiving the `params`.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/04-functions/generate-static-params.mdx#_snippet_0

LANGUAGE: tsx
CODE:
```
// Return a list of `params` to populate the [slug] dynamic segment
export async function generateStaticParams() {
  const posts = await fetch('https://.../posts').then((res) => res.json())

  return posts.map((post) => ({
    slug: post.slug,
  }))
}

// Multiple versions of this page will be statically generated
// using the `params` returned by `generateStaticParams`
export default async function Page({
  params,
}: {
  params: Promise<{ slug: string }>
}) {
  const { slug } = await params
  // ...
}
```

LANGUAGE: jsx
CODE:
```
// Return a list of `params` to populate the [slug] dynamic segment
export async function generateStaticParams() {
  const posts = await fetch('https://.../posts').then((res) => res.json())

  return posts.map((post) => ({
    slug: post.slug,
  }))
}

// Multiple versions of this page will be statically generated
// using the `params` returned by `generateStaticParams`
export default async function Page({ params }) {
  const { slug } = await params
  // ...
}
```

----------------------------------------

TITLE: Move Time Evaluation to Client Components in Next.js
DESCRIPTION: This pattern demonstrates how to shift time-dependent logic from a Server Component to a Client Component in Next.js. This allows for dynamic, periodic updates of time-related UI elements (e.g., relative time) without requiring a full server re-render on each request. It leverages React's `useReducer` and `useEffect` hooks for internal state management and updates, and requires a `Suspense` boundary in the parent Server Component for proper loading.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/next-prerender-current-time.mdx#_snippet_2

LANGUAGE: jsx
CODE:
```
function RelativeTime({ when }) {
  return computeTimeAgo(new Date(), when)
}

export default async function Page() {
  const data = await ...
  return (
    <main>
      ...
      <Suspense>
        <RelativeTime when={data.createdAt} />
      </Suspense>
    </main>
  )
}
```

LANGUAGE: jsx
CODE:
```
'use client'

import { useReducer } from 'react'

export function RelativeTime({ when }) {
  const [_, update] = useReducer(() => ({}), {})
  const timeAgo = computeTimeAgo(new Date(), when)

  // Whenever the timeAgo value changes a new timeout is
  // scheduled to update the component. Now the time can
  // rerender without having the Server Component render again.
  useEffect(() => {
    const updateAfter = computeTimeUntilNextUpdate(timeAgo)
    let timeout = setTimeout(() => {
      update()
    }, updateAfter)
    return () => {
      clearTimeout(timeout)
    }
  })

  return timeAgo
}
```

LANGUAGE: jsx
CODE:
```
import { RelativeTime } from './relative-time'

export default async function Page() {
  const data = await ...
  return (
    <main>
      ...
      <Suspense>
        <RelativeTime when={data.createdAt} />
      </Suspense>
    </main>
  )
}
```

----------------------------------------

TITLE: APIDOC: Middleware Function Export
DESCRIPTION: Details on exporting the `middleware` function in `middleware.js|ts`. It must be a single function, either default or named `middleware`. Multiple middleware functions from the same file are not supported.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/03-file-conventions/middleware.mdx#_snippet_4

LANGUAGE: APIDOC
CODE:
```
Middleware function:
  - Must export a single function (default or named 'middleware').
  - Multiple middleware functions from the same file are not supported.
```

----------------------------------------

TITLE: Referencing Local Images from Public Folder in Next.js
DESCRIPTION: Illustrates how to use local images stored in the `public` directory with the Next.js `<Image>` component. Images placed in the `public` folder can be referenced directly by their path from the base URL, and `width` and `height` properties are explicitly set for proper rendering.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/12-images.mdx#_snippet_1

LANGUAGE: tsx
CODE:
```
import Image from 'next/image'

export default function Page() {
  return (
    <Image
      src="/profile.png"
      alt="Picture of the author"
      width={500}
      height={500}
    />
  )
}
```

LANGUAGE: jsx
CODE:
```
import Image from 'next/image'

export default function Page() {
  return (
    <Image
      src="/profile.png"
      alt="Picture of the author"
      width={500}
      height={500}
    />
  )
}
```

----------------------------------------

TITLE: Read Dynamic Route Parameters in Client Components
DESCRIPTION: This snippet demonstrates how to read dynamic route parameters (`params`) within a Next.js Client Component. Since Client Components cannot be `async`, React's `use` function is employed to unwrap the `params` promise. The example shows how to extract a `slug` parameter for use within the client-side logic.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/03-file-conventions/layout.mdx#_snippet_18

LANGUAGE: tsx
CODE:
```
'use client'

import { use } from 'react'

export default function Page({
  params,
}: {
  params: Promise<{ slug: string }>
}) {
  const { slug } = use(params)
}
```

LANGUAGE: js
CODE:
```
'use client'

import { use } from 'react'

export default function Page({ params }) {
  const { slug } = use(params)
}
```

----------------------------------------

TITLE: Incorrectly Passing Dynamic Import Options in Next.js (Before)
DESCRIPTION: This snippet illustrates the incorrect method of passing options to `next/dynamic`. The options object is defined as a separate variable and then passed, which results in an 'Invalid options type' error because `next/dynamic` expects an object literal directly.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/invalid-dynamic-options-type.mdx#_snippet_0

LANGUAGE: jsx
CODE:
```
import dynamic from 'next/dynamic'

const options = { loading: () => <p>...</p>, ssr: false }
const DynamicComponent = dynamic(() => import('../components/hello'), options)
```

----------------------------------------

TITLE: Specify Image Placeholder in Next.js
DESCRIPTION: The `placeholder` prop for the `next/image` component specifies a placeholder to display while the image is loading, enhancing perceived performance. Options include `empty` (no placeholder), `blur` (a blurred version, requiring `blurDataURL`), or a direct `data:image/...` URL.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/02-components/image.mdx#_snippet_13

LANGUAGE: jsx
CODE:
```
// defaults to empty
<Image placeholder="empty" />
```

----------------------------------------

TITLE: Cache async function results with unstable_cache
DESCRIPTION: `unstable_cache` allows caching the results of database queries or other async functions. Wrap the function with `unstable_cache` and provide a cache key array to enable caching based on input parameters.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/09-caching-and-revalidating.mdx#_snippet_2

LANGUAGE: tsx
CODE:
```
import { db } from '@/lib/db'
export async function getUserById(id: string) {
  return db
    .select()
    .from(users)
    .where(eq(users.id, id))
    .then((res) => res[0])
}

// ... in app/page.tsx
import { unstable_cache } from 'next/cache'
import { getUserById } from '@/app/lib/data'

export default async function Page({
  params,
}: {
  params: Promise<{ userId: string }>
}) {
  const { userId } = await params

  const getCachedUser = unstable_cache(
    async () => {
      return getUserById(userId)
    },
    [userId] // add the user ID to the cache key
  )
}
```

LANGUAGE: jsx
CODE:
```
import { db } from '@/lib/db'

export async function getUserById(id) {
  return db
    .select()
    .from(users)
    .where(eq(users.id, id))
    .then((res) => res[0])
}

// ... in app/page.jsx
import { unstable_cache } from 'next/cache';
import { getUserById } from '@/app/lib/data';

export default async function Page({ params } }) {
  const { userId } = await params

  const getCachedUser = unstable_cache(
    async () => {
      return getUserById(userId)
    },
    [userId] // add the user ID to the cache key
  );
}
```

----------------------------------------

TITLE: Managing Push Notifications in Next.js (JavaScript)
DESCRIPTION: This React component (`PushNotificationManager`) handles the lifecycle of web push notifications. It checks for browser support, registers a service worker, and manages user subscriptions. This snippet shows the initial state management and the `registerServiceWorker` and `subscribeToPush` functions, which interact with the Push API and a service worker.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/progressive-web-apps.mdx#_snippet_4

LANGUAGE: jsx
CODE:
```
function PushNotificationManager() {
  const [isSupported, setIsSupported] = useState(false);
  const [subscription, setSubscription] = useState(null);
  const [message, setMessage] = useState('');

  useEffect(() => {
    if ('serviceWorker' in navigator && 'PushManager' in window) {
      setIsSupported(true);
      registerServiceWorker();
    }
  }, []);

  async function registerServiceWorker() {
    const registration = await navigator.serviceWorker.register('/sw.js', {
      scope: '/',
      updateViaCache: 'none',
    });
    const sub = await registration.pushManager.getSubscription();
    setSubscription(sub);
  }

  async function subscribeToPush() {
    const registration = await navigator.serviceWorker.ready;
    const sub = await registration.pushManager.subscribe({

```

----------------------------------------

TITLE: Accessing Runtime Environment Variables in Next.js App Router
DESCRIPTION: This code demonstrates how to access runtime environment variables within a Next.js App Router component. By using `connection()` or other Dynamic APIs, the component opts into dynamic rendering, ensuring that `process.env.MY_VALUE` is evaluated at runtime rather than build time. This approach is suitable for promoting a singular Docker image across multiple environments.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/self-hosting.mdx#_snippet_0

LANGUAGE: tsx
CODE:
```
import { connection } from 'next/server'

export default async function Component() {
  await connection()
  // cookies, headers, and other Dynamic APIs
  // will also opt into dynamic rendering, meaning
  // this env variable is evaluated at runtime
  const value = process.env.MY_VALUE
  // ...
}
```

LANGUAGE: jsx
CODE:
```
import { connection } from 'next/server'

export default async function Component() {
  await connection()
  // cookies, headers, and other Dynamic APIs
  // will also opt into dynamic rendering, meaning
  // this env variable is evaluated at runtime
  const value = process.env.MY_VALUE
  // ...
}
```

----------------------------------------

TITLE: Configure Content Security Policy (CSP) without Nonces in next.config.js
DESCRIPTION: Shows how to set a Content Security Policy (CSP) header directly in `next.config.js` for Next.js applications that do not require dynamic nonces. This configuration defines various source directives to control resource loading and enhance security.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/content-security-policy.mdx#_snippet_4

LANGUAGE: js
CODE:
```
const cspHeader = `
    default-src 'self';
    script-src 'self' 'unsafe-eval' 'unsafe-inline';
    style-src 'self' 'unsafe-inline';
    img-src 'self' blob: data:;
    font-src 'self';
    object-src 'none';
    base-uri 'self';
    form-action 'self';
    frame-ancestors 'none';
    upgrade-insecure-requests;
`

module.exports = {
  async headers() {
    return [
      {
        source: '/(.*)',
        headers: [
          {
            key: 'Content-Security-Policy',
            value: cspHeader.replace(/\n/g, ''),
          },
        ],
      },
    ]
  },
}
```

----------------------------------------

TITLE: Define Next.js Template Component
DESCRIPTION: Defines a default React component for `template.js` or `template.tsx` files. This component accepts a `children` prop and is rendered between a layout and its children, causing state reset and effect re-runs for child components on navigation due to a unique key.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/03-file-conventions/template.mdx#_snippet_0

LANGUAGE: tsx
CODE:
```
export default function Template({ children }: { children: React.ReactNode }) {
  return <div>{children}</div>
}
```

LANGUAGE: jsx
CODE:
```
export default function Template({ children }) {
  return <div>{children}</div>
}
```

----------------------------------------

TITLE: Next.js `revalidate` Option Values and Behavior
DESCRIPTION: Detailed explanation of the possible values for the `revalidate` export in Next.js layouts, pages, and routes, controlling data revalidation frequency. Includes important notes on static analysis, runtime environments, and revalidation frequency rules.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/03-file-conventions/route-segment-config.mdx#_snippet_6

LANGUAGE: APIDOC
CODE:
```
revalidate:
  false (default):
    Description: Caches any fetch requests that set their 'cache' option to 'force-cache' or are discovered before a Dynamic API is used. Semantically equivalent to 'revalidate: Infinity', meaning cached indefinitely. Individual 'fetch' requests can still use 'cache: no-store' or 'revalidate: 0' to avoid caching.
  0:
    Description: Ensures a layout or page is always dynamically rendered, even if no Dynamic APIs or uncached data fetches are discovered. Changes the default of 'fetch' requests without a 'cache' option to 'no-store'.
  number (in seconds):
    Description: Sets the default revalidation frequency of a layout or page to 'n' seconds.
  Good to know:
    - The revalidate value needs to be statically analyzable (e.g., 'revalidate = 600' is valid, but 'revalidate = 60 * 10' is not).
    - The revalidate value is not available when using 'runtime = 'edge''.
    - In Development, Pages are always rendered on-demand and are never cached.
  Revalidation Frequency:
    - The lowest 'revalidate' across each layout and page of a single route will determine the revalidation frequency of the entire route.
    - Individual 'fetch' requests can set a lower 'revalidate' than the route's default to increase the revalidation frequency of the entire route.
```

----------------------------------------

TITLE: Generate Static Params for Dynamic Routes in Next.js App Directory
DESCRIPTION: Illustrates the usage of `generateStaticParams` in the Next.js `app` directory, which replaces `getStaticPaths`. This function has a simplified API for returning route parameters and can be used within layouts, demonstrating data fetching and component rendering for dynamic routes.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/migrating/app-router-migration.mdx#_snippet_23

LANGUAGE: JSX
CODE:
```
// `app` directory
import PostLayout from '@/components/post-layout'

export async function generateStaticParams() {
  return [{ id: '1' }, { id: '2' }]
}

async function getPost(params) {
  const res = await fetch(`https://.../posts/${(await params).id}`)
  const post = await res.json()

  return post
}

export default async function Post({ params }) {
  const post = await getPost(params)

  return <PostLayout post={post} />
}
```

----------------------------------------

TITLE: Use the reset function to recover from errors
DESCRIPTION: This example shows how the `reset()` function, passed as a prop to the `error.js` component, can be used to re-attempt rendering the error boundary's content. This is useful for temporary errors where a retry might resolve the issue.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/03-file-conventions/error.mdx#_snippet_2

LANGUAGE: tsx
CODE:
```
'use client' // Error boundaries must be Client Components

export default function Error({
  error,
  reset,
}: {
  error: Error & { digest?: string }
  reset: () => void
}) {
  return (
    <div>
      <h2>Something went wrong!</h2>
      <button onClick={() => reset()}>Try again</button>
    </div>
  )
}
```

LANGUAGE: jsx
CODE:
```
'use client' // Error boundaries must be Client Components

export default function Error({ error, reset }) {
  return (
    <div>
      <h2>Something went wrong!</h2>
      <button onClick={() => reset()}>Try again</button>
    </div>
  )
}
```

----------------------------------------

TITLE: Send HTTP Response in Next.js API Routes
DESCRIPTION: This example illustrates how to send a generic HTTP response from a Next.js API Route. Similar to JSON responses, it handles asynchronous operations and errors, returning a 200 status for success and a 500 status for failures. The response body can be a string, object, or Buffer.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/03-building-your-application/01-routing/07-api-routes.mdx#_snippet_13

LANGUAGE: ts
CODE:
```
import type { NextApiRequest, NextApiResponse } from 'next'

export default async function handler(
  req: NextApiRequest,
  res: NextApiResponse
) {
  try {
    const result = await someAsyncOperation()
    res.status(200).send({ result })
  } catch (err) {
    res.status(500).send({ error: 'failed to fetch data' })
  }
}
```

LANGUAGE: js
CODE:
```
export default async function handler(req, res) {
  try {
    const result = await someAsyncOperation()
    res.status(200).send({ result })
  } catch (err) {
    res.status(500).send({ error: 'failed to fetch data' })
  }
}
```

----------------------------------------

TITLE: Configure Next.js Runtime for Route Segments
DESCRIPTION: Sets the runtime environment for rendering the application. 'nodejs' is recommended for application rendering, and 'edge' for Middleware. Options are 'nodejs' (default) or 'edge'.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/03-file-conventions/route-segment-config.mdx#_snippet_9

LANGUAGE: tsx
CODE:
```
export const runtime = 'nodejs'
// 'nodejs' | 'edge'
```

LANGUAGE: js
CODE:
```
export const runtime = 'nodejs'
// 'nodejs' | 'edge'
```

----------------------------------------

TITLE: Configure Root Layout with Navigation Blocker Provider
DESCRIPTION: This snippet demonstrates how to set up the root layout of a Next.js application to include the `NavigationBlockerProvider`. Wrapping the application's children with this provider enables the functionality to prompt users before navigating away when there are unsaved changes, enhancing user experience for forms or other interactive elements.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/02-components/link.mdx#_snippet_35

LANGUAGE: jsx
CODE:
```
import { NavigationBlockerProvider } from './contexts/navigation-blocker'

export default function RootLayout({ children }) {
  return (
    <html lang="en">
      <body>
        <NavigationBlockerProvider>{children}</NavigationBlockerProvider>
      </body>
    </html>
  )
}
```

----------------------------------------

TITLE: Enable Standalone Output in Next.js Configuration
DESCRIPTION: Configure Next.js to automatically create a `standalone` folder containing only necessary files for production deployment, including select `node_modules`.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/05-config/01-next-config-js/output.mdx#_snippet_0

LANGUAGE: javascript
CODE:
```
module.exports = {
  output: 'standalone',
}
```

----------------------------------------

TITLE: Custom Image Loader Function for App Router
DESCRIPTION: This JavaScript function defines a custom image loader for the Next.js App Router. It takes `src`, `width`, and `quality` as parameters and constructs a URL for an external image optimization service. The `'use client'` directive marks it as a Client Component.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/05-config/01-next-config-js/images.mdx#_snippet_1

LANGUAGE: js
CODE:
```
'use client'

export default function myImageLoader({ src, width, quality }) {
  return `https://example.com/${src}?w=${width}&q=${quality || 75}`
}
```

----------------------------------------

TITLE: Define a Basic Next.js Not Found Page Component
DESCRIPTION: This snippet shows how to create a basic `not-found.js` component in Next.js. It renders a simple UI with a 'Not Found' message and a link to return home, displayed when the `notFound()` function is thrown or an unmatched URL is accessed.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/03-file-conventions/not-found.mdx#_snippet_0

LANGUAGE: tsx
CODE:
```
import Link from 'next/link'

export default function NotFound() {
  return (
    <div>
      <h2>Not Found</h2>
      <p>Could not find requested resource</p>
      <Link href="/">Return Home</Link>
    </div>
  )
}
```

LANGUAGE: jsx
CODE:
```
import Link from 'next/link'

export default function NotFound() {
  return (
    <div>
      <h2>Not Found</h2>
      <p>Could not find requested resource</p>
      <Link href="/">Return Home</Link>
    </div>
  )
}
```

----------------------------------------

TITLE: Update Next.js Route Handlers for Async Params (TSX)
DESCRIPTION: This snippet demonstrates how to update Next.js Route Handlers to correctly access `params` when they are Promises. The `await` keyword is now necessary to resolve the `params` object, ensuring that slug and other parameters are available for use within the handler.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/upgrading/version-15.mdx#_snippet_14

LANGUAGE: tsx
CODE:
```
// Before
type Params = { slug: string }

export async function GET(request: Request, segmentData: { params: Params }) {
  const params = segmentData.params
  const slug = params.slug
}

// After
type Params = Promise<{ slug: string }>

export async function GET(request: Request, segmentData: { params: Params }) {
  const params = await segmentData.params
  const slug = params.slug
}
```

----------------------------------------

TITLE: Next.js Form `action` (string) Props - App Router
DESCRIPTION: Documents the props supported by the Next.js `<Form>` component when its `action` prop is a string, specifically for the App Router. It details `action`, `replace`, `scroll`, and `prefetch` props, their types, and behaviors.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/02-components/form.mdx#_snippet_3

LANGUAGE: APIDOC
CODE:
```
<Form> Component Props (App Router - action as string):

action:
  Type: string (URL or relative path)
  Required: Yes
  Description: The URL or path to navigate to when the form is submitted. An empty string "" will navigate to the same route with updated search params.

replace:
  Type: boolean
  Required: No
  Default: false
  Description: Replaces the current history state instead of pushing a new one to the browser's history stack.

scroll:
  Type: boolean
  Required: No
  Default: true
  Description: Controls the scroll behavior during navigation. Scrolls to the top of the new route, and maintains the scroll position for backwards and forwards navigation.

prefetch:
  Type: boolean
  Required: No
  Default: true
  Description: Controls whether the path should be prefetched when the form becomes visible in the user's viewport.
```

----------------------------------------

TITLE: Next.js getStaticPaths for Dynamic Route Pre-rendering
DESCRIPTION: Shows how to implement `getStaticPaths` in a Next.js dynamic route page (e.g., `pages/posts/[id].js`) to specify which paths should be pre-rendered at build time. This function fetches external data to determine the dynamic segments (e.g., post IDs) for pre-rendering, ensuring all necessary dynamic pages are generated.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/blog/pages/posts/pages.md#_snippet_3

LANGUAGE: javascript
CODE:
```
// This function gets called at build time
export async function getStaticPaths() {
  // Call an external API endpoint to get posts
  const res = await fetch('https://.../posts')
  const posts = await res.json()

  // Get the paths we want to pre-render based on posts
  const paths = posts.map((post) => ({
    params: { id: post.id }
  }))

  // We'll pre-render only these paths at build time.
  // { fallback: false } means other routes should 404.
  return { paths, fallback: false }
}
```

----------------------------------------

TITLE: Configure Fetch Request Caching with options.cache
DESCRIPTION: Illustrates how to use the `cache` option in Next.js's extended `fetch` API to control server-side data caching behavior. This option determines how the request interacts with the framework's persistent Data Cache.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/04-functions/fetch.mdx#_snippet_1

LANGUAGE: ts
CODE:
```
fetch(`https://...`, { cache: 'force-cache' | 'no-store' })
```

----------------------------------------

TITLE: Next.js Cookies API Methods Reference
DESCRIPTION: This section details the available methods for interacting with the `cookies` object in Next.js, including functions for getting, setting, deleting, and checking the existence of cookies.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/04-functions/cookies.mdx#_snippet_1

LANGUAGE: APIDOC
CODE:
```
get('name'): Object
  Description: Accepts a cookie name and returns an object with the name and value.
getAll(): Array of objects
  Description: Returns a list of all the cookies with a matching name.
has('name'): Boolean
  Description: Accepts a cookie name and returns a boolean based on if the cookie exists.
set(name, value, options): -
  Description: Accepts a cookie name, value, and options and sets the outgoing request cookie.
delete(name): -
  Description: Accepts a cookie name and deletes the cookie.
clear(): -
  Description: Deletes all cookies.
toString(): String
  Description: Returns a string representation of the cookies.
```

----------------------------------------

TITLE: Next.js API Caching Behavior Reference Table
DESCRIPTION: Provides a quick reference table detailing how specific Next.js APIs affect the Router Cache, Full Route Cache, Data Cache, and React Cache, indicating whether they cache, revalidate, or opt out.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/caching.mdx#_snippet_14

LANGUAGE: APIDOC
CODE:
```
API Caching Effects:
  - <Link prefetch>: Router Cache (Cache)
  - router.prefetch: Router Cache (Cache)
  - router.refresh: Router Cache (Revalidate)
  - fetch: Data Cache (Cache), React Cache (Cache)
  - fetch options.cache: Data Cache (Cache or Opt out)
  - fetch options.next.revalidate: Full Route Cache (Revalidate), Data Cache (Revalidate)
  - fetch options.next.tags: Full Route Cache (Cache), Data Cache (Cache)
  - revalidateTag: Router Cache (Revalidate - Server Action), Full Route Cache (Revalidate), Data Cache (Revalidate)
  - revalidatePath: Router Cache (Revalidate - Server Action), Full Route Cache (Revalidate), Data Cache (Revalidate)
  - const revalidate: Full Route Cache (Revalidate or Opt out), Data Cache (Revalidate or Opt out)
  - const dynamic: Full Route Cache (Cache or Opt out), Data Cache (Cache or Opt out)
  - cookies: Router Cache (Revalidate - Server Action), Full Route Cache (Opt out)
  - headers, searchParams: Full Route Cache (Opt out)
  - generateStaticParams: Full Route Cache (Cache)
  - React.cache: React Cache (Cache)
  - unstable_cache: Data Cache (Cache)
```

----------------------------------------

TITLE: unstable_cache API Reference
DESCRIPTION: Comprehensive API documentation for the `unstable_cache` function, detailing its parameters (`fetchData`, `keyParts`, `options` with `tags` and `revalidate`) and its return value.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/04-functions/unstable_cache.mdx#_snippet_1

LANGUAGE: APIDOC
CODE:
```
unstable_cache(fetchData: Function, keyParts: string[], options?: object): Function

Parameters:
  fetchData:
    Type: Function (async)
    Description: An asynchronous function that fetches the data to be cached. It must be a function that returns a Promise.
  keyParts:
    Type: string[] (optional)
    Description: An extra array of keys that further adds identification to the cache. By default, unstable_cache already uses the arguments and the stringified version of your function as the cache key. It is optional in most cases; the only time you need to use it is when you use external variables without passing them as parameters. However, it is important to add closures used within the function if you do not pass them as parameters.
  options:
    Type: object (optional)
    Description: An object that controls how the cache behaves.
    Properties:
      tags:
        Type: string[]
        Description: An array of tags that can be used to control cache invalidation. Next.js will not use this to uniquely identify the function.
      revalidate:
        Type: number | false (optional)
        Description: The number of seconds after which the cache should be revalidated. Omit or pass false to cache indefinitely or until matching revalidateTag() or revalidatePath() methods are called.

Returns:
  Type: Function
  Description: A function that when invoked, returns a Promise that resolves to the cached data. If the data is not in the cache, the provided function will be invoked, and its result will be cached and returned.
```

----------------------------------------

TITLE: Update Next.js Middleware to New API Signature
DESCRIPTION: Demonstrates the correct and updated API signature for Next.js Middleware functions, using the `request` parameter. This is the recommended approach for handling middleware logic and resolving deprecation errors.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/middleware-new-signature.mdx#_snippet_1

LANGUAGE: typescript
CODE:
```
import { NextResponse } from 'next/server'

export function middleware(request) {
  if (request.nextUrl.pathname === '/blocked') {
    return new NextResponse(null, {
      status: 403,
    })
  }
}
```

----------------------------------------

TITLE: Get a Single Cookie in Next.js Server Components
DESCRIPTION: Demonstrates how to retrieve a single cookie by its name using the `cookies().get('name')` method in a Next.js Server Component. The `cookies` function is asynchronous and requires `await`.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/04-functions/cookies.mdx#_snippet_3

LANGUAGE: tsx
CODE:
```
import { cookies } from 'next/headers'

export default async function Page() {
  const cookieStore = await cookies()
  const theme = cookieStore.get('theme')
  return '...'
}
```

LANGUAGE: jsx
CODE:
```
import { cookies } from 'next/headers'

export default async function Page() {
  const cookieStore = await cookies()
  const theme = cookieStore.get('theme')
  return '...'
}
```

----------------------------------------

TITLE: Next.js App Router: Loading Scripts Globally in Root Layout
DESCRIPTION: This example illustrates how to include a third-party script in the root layout of a Next.js App Router application. The script will load and execute when any route in the application is accessed, guaranteeing it loads only once across all pages.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/scripts.mdx#_snippet_1

LANGUAGE: tsx
CODE:
```
import Script from 'next/script'

export default function RootLayout({
  children,
}: {
  children: React.ReactNode
}) {
  return (
    <html lang="en">
      <body>{children}</body>
      <Script src="https://example.com/script.js" />
    </html>
  )
}
```

LANGUAGE: jsx
CODE:
```
import Script from 'next/script'

export default function RootLayout({ children }) {
  return (
    <html lang="en">
      <body>{children}</body>
      <Script src="https://example.com/script.js" />
    </html>
  )
}
```

----------------------------------------

TITLE: Create a client component for Web Vitals in App Router
DESCRIPTION: This code defines a client-side component, `WebVitals`, for the Next.js App Router. It uses the `useReportWebVitals` hook to capture and log web vital metrics, ensuring the client boundary is confined to this specific component for performance.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/04-functions/use-report-web-vitals.mdx#_snippet_1

LANGUAGE: jsx
CODE:
```
'use client'

import { useReportWebVitals } from 'next/web-vitals'

const logWebVitals = (metric) => {
  console.log(metric)
}

export function WebVitals() {
  useReportWebVitals(logWebVitals)

  return null
}
```

----------------------------------------

TITLE: Next.js `cookies` API Reference
DESCRIPTION: Reference for the `cookies` function and its methods in Next.js, including usage constraints and behavior in Server Components, Server Actions, and Route Handlers.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/04-functions/cookies.mdx#_snippet_6

LANGUAGE: APIDOC
CODE:
```
cookies(): Promise<CookieStore>
  Description: Asynchronous function to access HTTP cookies. Returns a promise that resolves to a CookieStore object.
  Behavior:
    - Asynchronous: Must use async/await or React's `use`.
    - Dynamic API: Opts route into dynamic rendering.
    - Version 14 and earlier: Synchronous. Next.js 15 allows synchronous access for backward compatibility (deprecated).

CookieStore:
  get(name: string): Cookie | undefined
    Description: Retrieves a single cookie by its name.
    Returns: A Cookie object if found, otherwise undefined.

  getAll(name?: string): Cookie[]
    Description: Retrieves all cookies. If 'name' is specified, returns all cookies with a matching name.
    Returns: An array of Cookie objects.

  set(name: string, value: string, options?: CookieOptions): void
    Description: Sets a cookie with a name, value, and optional options.
    Constraints: Must be called in a Server Action or Route Handler. HTTP does not allow setting cookies after streaming starts.
    Example Options: { secure: boolean, httpOnly: boolean, path: string }

  set(options: CookieSetOptions): void
    Description: Sets a cookie using an object containing name, value, and other options.
    Constraints: Must be called in a Server Action or Route Handler. HTTP does not allow setting cookies after streaming starts.
    Example Options: { name: string, value: string, httpOnly: boolean, path: string }

  delete(name: string): void
    Description: Deletes a cookie by its name.
    Constraints:
      - Must be called in a Server Action or Route Handler.
      - Must belong to the same domain from which .set was called.
      - For wildcard domains, specific subdomain must be an exact match.
      - Code must be executed on the same protocol (HTTP/HTTPS) as the cookie.
```

----------------------------------------

TITLE: Perform Actions on Route Change with usePathname
DESCRIPTION: Illustrates how to use `usePathname` and `useSearchParams` within a `useEffect` hook to trigger actions whenever the URL's pathname or search parameters change. This is useful for analytics or state updates tied to navigation.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/04-functions/use-pathname.mdx#_snippet_2

LANGUAGE: tsx
CODE:
```
'use client'\n\nimport { usePathname, useSearchParams } from 'next/navigation'\n\nfunction ExampleClientComponent() {\n  const pathname = usePathname()\n  const searchParams = useSearchParams()\n  useEffect(() => {\n    // Do something here...\n  }, [pathname, searchParams])\n}
```

LANGUAGE: jsx
CODE:
```
'use client'\n\nimport { usePathname, useSearchParams } from 'next/navigation'\n\nfunction ExampleClientComponent() {\n  const pathname = usePathname()\n  const searchParams = useSearchParams()\n  useEffect(() => {\n    // Do something here...\n  }, [pathname, searchParams])\n}
```

----------------------------------------

TITLE: Next.js CLI Commands Reference
DESCRIPTION: This reference lists the primary commands available in the Next.js CLI, along with a brief description of their functionality, such as starting development servers, building production applications, or running linters.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/06-cli/next.mdx#_snippet_2

LANGUAGE: APIDOC
CODE:
```
Commands:
  dev: Starts Next.js in development mode with Hot Module Reloading, error reporting, and more.
  build: Creates an optimized production build of your application. Displaying information about each route.
  start: Starts Next.js in production mode. The application should be compiled with `next build` first.
  info: Prints relevant details about the current system which can be used to report Next.js bugs.
  lint: Runs ESLint for all files in the `/src`, `/app`, `/pages`, `/components`, and `/lib` directories. It also provides a guided setup to install any required dependencies if ESLint it is not already configured in your application.
  telemetry: Allows you to enable or disable Next.js' completely anonymous telemetry collection.
```

----------------------------------------

TITLE: Configuring Environment Variables for Next.js MongoDB
DESCRIPTION: This command copies the example environment file `.env.local.example` to `.env.local`. The `.env.local` file is used to store sensitive configuration, such as the `MONGODB_URI`, which is essential for the Next.js application to connect to the MongoDB database.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-mongodb/README.md#_snippet_3

LANGUAGE: bash
CODE:
```
cp .env.local.example .env.local
```

----------------------------------------

TITLE: React `cache` Function for Memoizing Data Requests
DESCRIPTION: Illustrates how to use the React `cache` function to memoize the return value of an asynchronous function, such as a database query. This prevents redundant executions for the same inputs, similar to `fetch`'s automatic memoization, and is useful for non-`fetch` data sources.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/caching.mdx#_snippet_30

LANGUAGE: ts
CODE:
```
import { cache } from 'react'
import db from '@/lib/db'

export const getItem = cache(async (id: string) => {
  const item = await db.item.findUnique({ id })
  return item
})
```

LANGUAGE: js
CODE:
```
import { cache } from 'react'
import db from '@/lib/db'

export const getItem = cache(async (id) => {
  const item = await db.item.findUnique({ id })
  return item
})
```

----------------------------------------

TITLE: Configure Next.js Middleware Matcher for Multiple Paths
DESCRIPTION: This example demonstrates how to define a `config` object alongside the middleware function to specify paths where the middleware should apply. The `matcher` property accepts an array of strings for multiple path matching.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/03-file-conventions/middleware.mdx#_snippet_2

LANGUAGE: javascript
CODE:
```
export const config = {
  matcher: ['/about/:path*', '/dashboard/:path*']
}
```

----------------------------------------

TITLE: Control Dynamic Path Fallback with dynamicParams=false in Next.js
DESCRIPTION: This snippet demonstrates how to combine `generateStaticParams` (to render a subset of paths) with `dynamicParams = false`. This configuration ensures that only the explicitly generated paths are valid, and any attempt to access an ungenerated dynamic path will result in a 404 error, preventing on-demand generation for unlisted routes.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/04-functions/generate-static-params.mdx#_snippet_8

LANGUAGE: tsx
CODE:
```
// All posts besides the top 10 will be a 404
export const dynamicParams = false

export async function generateStaticParams() {
  const posts = await fetch('https://.../posts').then((res) => res.json())
  const topPosts = posts.slice(0, 10)

  return topPosts.map((post) => ({
    slug: post.slug,
  }))
}
```

LANGUAGE: jsx
CODE:
```
// All posts besides the top 10 will be a 404
export const dynamicParams = false

export async function generateStaticParams() {
  const posts = await fetch('https://.../posts').then((res) => res.json())
  const topPosts = posts.slice(0, 10)

  return topPosts.map((post) => ({
    slug: post.slug,
  }))
}
```

----------------------------------------

TITLE: next/font Module API Reference
DESCRIPTION: Provides a reference table for the configuration options available when using `next/font/google` and `next/font/local` modules. It details parameters like `src`, `weight`, `style`, `subsets`, `display`, `preload`, `fallback`, `adjustFontFallback`, `variable`, and `declarations`, indicating their applicability and requirements for each font loader.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/02-components/font.mdx#_snippet_2

LANGUAGE: APIDOC
CODE:
```
Reference:
| Key | font/google | font/local | Type | Required |
| --- | --- | --- | --- | --- |
| src | No | Yes | String or Array of Objects | Yes |
| weight | Yes | Yes | String or Array | Required/Optional |
| style | Yes | Yes | String or Array | - |
| subsets | Yes | No | Array of Strings | - |
| axes | Yes | No | Array of Strings | - |
| display | Yes | Yes | String | - |
| preload | Yes | Yes | Boolean | - |
| fallback | Yes | Yes | Array of Strings | - |
| adjustFontFallback | Yes | Yes | Boolean or String | - |
| variable | Yes | Yes | String | - |
| declarations | No | Yes | Array of Objects | - |
```

----------------------------------------

TITLE: Creating API Route for Form Submission (JavaScript)
DESCRIPTION: This JavaScript snippet defines a Next.js API Route (`/api/submit`) to handle form submissions. It processes the request body, includes a placeholder for database interaction (`createItem`), and responds with a 200 status and the received data. It's a basic example for server-side data handling.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/02-guides/forms.mdx#_snippet_1

LANGUAGE: js
CODE:
```
export default function handler(req, res) {
  const data = req.body
  // call your database, etc.
  // const id = await createItem(data)
  // ...
  res.status(200).json({ data })
}
```

----------------------------------------

TITLE: Secure Server Actions with forbidden for Role-Based Mutations
DESCRIPTION: This example shows how to integrate `forbidden` into a Next.js Server Action to enforce role-based authorization for data mutations. Before performing a sensitive update, it checks the user's session role and throws a 403 error if the user is not authorized.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/04-functions/forbidden.mdx#_snippet_3

LANGUAGE: TypeScript
CODE:
```
'use server'

import { verifySession } from '@/app/lib/dal'
import { forbidden } from 'next/navigation'
import db from '@/app/lib/db'

export async function updateRole(formData: FormData) {
  const session = await verifySession()

  // Ensure only admins can update roles
  if (session.role !== 'admin') {
    forbidden()
  }

  // Perform the role update for authorized users
  // ...
}
```

LANGUAGE: JavaScript
CODE:
```
'use server'

import { verifySession } from '@/app/lib/dal'
import { forbidden } from 'next/navigation'
import db from '@/app/lib/db'

export async function updateRole(formData) {
  const session = await verifySession()

  // Ensure only admins can update roles
  if (session.role !== 'admin') {
    forbidden()
  }

  // Perform the role update for authorized users
  // ...
}
```

----------------------------------------

TITLE: Configuring Absolute Imports in TypeScript/JavaScript
DESCRIPTION: This snippet shows an absolute import statement, which is enabled by configuring the `baseUrl` option in `tsconfig.json` or `jsconfig.json`. This simplifies import paths by allowing direct imports from the project root.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-absolute-imports/README.md#_snippet_1

LANGUAGE: TypeScript
CODE:
```
import Button from "components/button";
```

----------------------------------------

TITLE: Configure Base URL for Absolute Imports
DESCRIPTION: To enable absolute imports in Next.js, add the `baseUrl` option within the `compilerOptions` in your `tsconfig.json` (for TypeScript) or `jsconfig.json` (for JavaScript) file. This setting defines the base directory for resolving non-relative module names.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/01-installation.mdx#_snippet_12

LANGUAGE: json
CODE:
```
{
  "compilerOptions": {
    "baseUrl": "src/"
  }
}
```

----------------------------------------

TITLE: Importing Global Styles in Root Layout (App Router - JavaScript)
DESCRIPTION: Import the global CSS file (`./globals.css`) into your root layout file (`app/layout.js`) to apply styles across all routes in your Next.js application when using the App Router. This ensures Tailwind's styles are available throughout your project.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/tailwind-css.mdx#_snippet_4

LANGUAGE: javascript
CODE:
```
// These styles apply to every route in the application
import './globals.css'

export const metadata = {
  title: 'Create Next App',
  description: 'Generated by create next app',
}

export default function RootLayout({ children }) {
  return (
    <html lang="en">
      <body>{children}</body>
    </html>
  )
}
```

----------------------------------------

TITLE: Generate Dynamic Metadata in Next.js with generateMetadata Function
DESCRIPTION: This snippet illustrates using the `generateMetadata` function to fetch dynamic data, such as a blog post's title and description, and use it to generate metadata. It includes examples for both TypeScript and JavaScript.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/14-metadata-and-og-images.mdx#_snippet_2

LANGUAGE: TSX
CODE:
```
import type { Metadata, ResolvingMetadata } from 'next'

type Props = {
  params: Promise<{ slug: string }>
  searchParams: Promise<{ [key: string]: string | string[] | undefined }>
}

export async function generateMetadata(
  { params, searchParams }: Props,
  parent: ResolvingMetadata
): Promise<Metadata> {
  const slug = (await params).slug

  // fetch post information
  const post = await fetch(`https://api.vercel.app/blog/${slug}`).then((res) =>
    res.json()
  )

  return {
    title: post.title,
    description: post.description,
  }
}

export default function Page({ params, searchParams }: Props) {}
```

LANGUAGE: JSX
CODE:
```
export async function generateMetadata({ params, searchParams }, parent) {
  const slug = (await params).slug

  // fetch post information
  const post = await fetch(`https://api.vercel.app/blog/${slug}`).then((res) =>
    res.json()
  )

  return {
    title: post.title,
    description: post.description,
  }
}

export default function Page({ params, searchParams }) {}
```

----------------------------------------

TITLE: Creating API Route for Form Submission (TypeScript)
DESCRIPTION: This TypeScript snippet defines a Next.js API Route (`/api/submit`) to handle form submissions. It asynchronously processes the request body, calls a `createItem` function (placeholder for database interaction), and responds with a 200 status and the created item's ID. It requires `NextApiRequest` and `NextApiResponse` types.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/02-guides/forms.mdx#_snippet_0

LANGUAGE: ts
CODE:
```
import type { NextApiRequest, NextApiResponse } from 'next'

export default async function handler(
  req: NextApiRequest,
  res: NextApiResponse
) {
  const data = req.body
  const id = await createItem(data)
  res.status(200).json({ id })
}
```

----------------------------------------

TITLE: Display Loading Indicator with useLinkStatus Hook in Next.js
DESCRIPTION: This component demonstrates how to use the `useLinkStatus` hook from `next/link` to show a loading indicator when a link transition is pending. It provides immediate visual feedback to the user on slow networks, improving perceived performance.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/04-linking-and-navigating.mdx#_snippet_3

LANGUAGE: tsx
CODE:
```
'use client'

import { useLinkStatus } from 'next/link'

export default function LoadingIndicator() {
  const { pending } = useLinkStatus()
  return pending ? (
    <div role="status" aria-label="Loading" className="spinner" />
  ) : null
}
```

LANGUAGE: jsx
CODE:
```
'use client'

import { useLinkStatus } from 'next/link'

export default function LoadingIndicator() {
  const { pending } = useLinkStatus()
  return pending ? (
    <div role="status" aria-label="Loading" className="spinner" />
  ) : null
}
```

----------------------------------------

TITLE: Access Dynamic `searchParams` in a Child Component for Prerendering
DESCRIPTION: This snippet shows a child component (`Table`) that receives `searchParams` as a prop. The component becomes dynamic only when the `searchParams` value is accessed, allowing the parent page to be prerendered while this specific component streams its content.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/06-partial-prerendering.mdx#_snippet_6

LANGUAGE: tsx
CODE:
```
export async function Table({
  searchParams,
}: {
  searchParams: Promise<{ sort: string }>
}) {
  const sort = (await searchParams).sort === 'true'
  return '...'
}
```

LANGUAGE: jsx
CODE:
```
export async function Table({ searchParams }) {
  const sort = (await searchParams).sort === 'true'
  return '...'
}
```

----------------------------------------

TITLE: Add History Entry for Product Sorting (Next.js)
DESCRIPTION: This snippet demonstrates how to use `window.history.pushState` to add a new entry to the browser's history stack when sorting products. It updates URL search parameters without a full page reload, allowing users to navigate back to previous sort states. It uses `useSearchParams` from `next/navigation`.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/04-linking-and-navigating.mdx#_snippet_8

LANGUAGE: tsx
CODE:
```
'use client'

import { useSearchParams } from 'next/navigation'

export default function SortProducts() {
  const searchParams = useSearchParams()

  function updateSorting(sortOrder: string) {
    const params = new URLSearchParams(searchParams.toString())
    params.set('sort', sortOrder)
    window.history.pushState(null, '', `?${params.toString()}`)
  }

  return (
    <>
      <button onClick={() => updateSorting('asc')}>Sort Ascending</button>
      <button onClick={() => updateSorting('desc')}>Sort Descending</button>
    </>
  )
}
```

LANGUAGE: jsx
CODE:
```
'use client'

import { useSearchParams } from 'next/navigation'

export default function SortProducts() {
  const searchParams = useSearchParams()

  function updateSorting(sortOrder) {
    const params = new URLSearchParams(searchParams.toString())
    params.set('sort', sortOrder)
    window.history.pushState(null, '', `?${params.toString()}`)
  }

  return (
    <>
      <button onClick={() => updateSorting('asc')}>Sort Ascending</button>
      <button onClick={() => updateSorting('desc')}>Sort Descending</button>
    </>
  )
}
```

----------------------------------------

TITLE: GOOD Example: Pass Sanitized Data to Client Component
DESCRIPTION: This `tsx` snippet shows the recommended approach for component-level data access when passing data to a Client Component. It imports `getUser` (which sanitizes data) and passes only the `publicProfile` object to the `Profile` component. This ensures that the Client Component receives only the necessary and non-sensitive data, preventing accidental exposure of private information.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/data-security.mdx#_snippet_7

LANGUAGE: tsx
CODE:
```
import { getUser } from '../data/user'\nimport Profile from './ui/profile'\n\nexport default async function Page({\n  params: { slug },\n}: {\n  params: { slug: string }\n}) {\n  const publicProfile = await getUser(slug)\n  return <Profile user={publicProfile} />\n}
```

----------------------------------------

TITLE: Perform Imperative Routing with Next.js useRouter Hook
DESCRIPTION: Shows how to programmatically navigate between pages in Next.js using the `useRouter` hook. This example demonstrates triggering a client-side navigation to the '/about' page on a button click.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/03-building-your-application/01-routing/03-linking-and-navigating.mdx#_snippet_3

LANGUAGE: jsx
CODE:
```
import { useRouter } from 'next/router'

export default function ReadMore() {
  const router = useRouter()

  return (
    <button onClick={() => router.push('/about')}>
      Click here to read more
    </button>
  )
}
```

----------------------------------------

TITLE: Bootstrapping Next.js App with create-next-app (Yarn)
DESCRIPTION: This command initializes a new Next.js project using `yarn create next-app`, specifically cloning the `with-babel-macros` example. It sets up the project structure and dependencies for a new application named `with-babel-macros-app`.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-babel-macros/README.md#_snippet_1

LANGUAGE: bash
CODE:
```
yarn create next-app --example with-babel-macros with-babel-macros-app
```

----------------------------------------

TITLE: Forwarding Authorization Header in Next.js Server Component
DESCRIPTION: This example demonstrates how to retrieve the 'authorization' header using the `headers` function and then forward it in a `fetch` request within a Next.js Server Component. It illustrates a common pattern for authenticating API calls.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/04-functions/headers.mdx#_snippet_2

LANGUAGE: jsx
CODE:
```
import { headers } from 'next/headers'

export default async function Page() {
  const authorization = (await headers()).get('authorization')
  const res = await fetch('...', {
    headers: { authorization }, // Forward the authorization header
  })
  const user = await res.json()

  return <h1>{user.name}</h1>
}
```

----------------------------------------

TITLE: Programmatically Submit Form on Keyboard Shortcut (Next.js)
DESCRIPTION: This snippet demonstrates how to programmatically submit a form in a Next.js application using the `requestSubmit()` method. It listens for the `⌘` + `Enter` (or `Ctrl` + `Enter`) keyboard shortcut on a textarea to trigger the submission of the nearest form ancestor, which then invokes a Server Function.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/forms.mdx#_snippet_10

LANGUAGE: tsx
CODE:
```
'use client'

export function Entry() {
  const handleKeyDown = (e: React.KeyboardEvent<HTMLTextAreaElement>) => {
    if (
      (e.ctrlKey || e.metaKey) &&
      (e.key === 'Enter' || e.key === 'NumpadEnter')
    ) {
      e.preventDefault()
      e.currentTarget.form?.requestSubmit()
    }
  }

  return (
    <div>
      <textarea name="entry" rows={20} required onKeyDown={handleKeyDown} />
    </div>
  )
}
```

LANGUAGE: jsx
CODE:
```
'use client'

export function Entry() {
  const handleKeyDown = (e) => {
    if (
      (e.ctrlKey || e.metaKey) &&
      (e.key === 'Enter' || e.key === 'NumpadEnter')
    ) {
      e.preventDefault()
      e.currentTarget.form?.requestSubmit()
    }
  }

  return (
    <div>
      <textarea name="entry" rows={20} required onKeyDown={handleKeyDown} />
    </div>
  )
}
```

----------------------------------------

TITLE: Opt-in to Partial Prerendering for a Next.js Route
DESCRIPTION: This code demonstrates how to explicitly enable Partial Prerendering (PPR) for a specific route segment by exporting `experimental_ppr = true` in a `layout.tsx` or `layout.js` file. This setting applies to all children of the route segment.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/06-partial-prerendering.mdx#_snippet_2

LANGUAGE: tsx
CODE:
```
export const experimental_ppr = true

export default function Layout({ children }: { children: React.ReactNode }) {
  // ...
}
```

LANGUAGE: jsx
CODE:
```
export const experimental_ppr = true

export default function Layout({ children }) {
  // ...
}
```

----------------------------------------

TITLE: Configuring Next.js Build Cache in GitHub Actions
DESCRIPTION: This GitHub Actions workflow step uses `actions/cache@v4` to cache `~/.npm` and `${{ github.workspace }}/.next/cache`. The cache key is generated based on the OS, `package-lock.json`, and source files, with restore keys for partial changes, optimizing Next.js build performance.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/ci-build-caching.mdx#_snippet_4

LANGUAGE: yaml
CODE:
```
uses: actions/cache@v4
with:
  # See here for caching with `yarn`, `bun` or other package managers https://github.com/actions/cache/blob/main/examples.md or you can leverage caching with actions/setup-node https://github.com/actions/setup-node
  path: |
    ~/.npm
    ${{ github.workspace }}/.next/cache
  # Generate a new cache whenever packages or source files change.
  key: ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-${{ hashFiles('**/*.js', '**/*.jsx', '**/*.ts', '**/*.tsx') }}
  # If source files changed but packages didn't, rebuild from a prior cache.
  restore-keys: |
    ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-
```

----------------------------------------

TITLE: Sending Custom Google Analytics Events in Next.js
DESCRIPTION: This snippet demonstrates how to send custom events to Google Analytics using the `sendGAEvent` function. This function allows tracking specific user interactions, such as button clicks, by pushing data to the `dataLayer`. For `sendGAEvent` to work, the `<GoogleAnalytics />` component must be loaded in a parent layout, page, or component, or within the same file.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/third-party-libraries.mdx#_snippet_9

LANGUAGE: jsx
CODE:
```
'use client'

import { sendGAEvent } from '@next/third-parties/google'

export function EventButton() {
  return (
    <div>
      <button
        onClick={() => sendGAEvent('event', 'buttonClicked', { value: 'xyz' })}
      >
        Send Event
      </button>
    </div>
  )
}
```

LANGUAGE: jsx
CODE:
```
import { sendGAEvent } from '@next/third-parties/google'

export function EventButton() {
  return (
    <div>
      <button
        onClick={() => sendGAEvent('event', 'buttonClicked', { value: 'xyz' })}
      >
        Send Event
      </button>
    </div>
  )
}
```

----------------------------------------

TITLE: Page Component with Suspense for Partial Static Rendering
DESCRIPTION: This example shows how to wrap a Client Component that uses `useSearchParams` (like `SearchBar`) within a `<Suspense>` boundary. This allows the outer page to be statically rendered, while the dynamic part (the `SearchBar`) is client-side rendered, with a fallback displayed initially.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/04-functions/use-search-params.mdx#_snippet_4

LANGUAGE: tsx
CODE:
```
import { Suspense } from 'react'
import SearchBar from './search-bar'

// This component passed as a fallback to the Suspense boundary
// will be rendered in place of the search bar in the initial HTML.
// When the value is available during React hydration the fallback
// will be replaced with the `<SearchBar>` component.
function SearchBarFallback() {
  return <>placeholder</>
}

export default function Page() {
  return (
    <>
      <nav>
        <Suspense fallback={<SearchBarFallback />}>
          <SearchBar />
        </Suspense>
      </nav>
      <h1>Dashboard</h1>
    </>
  )
}
```

LANGUAGE: jsx
CODE:
```
import { Suspense } from 'react'
import SearchBar from './search-bar'

// This component passed as a fallback to the Suspense boundary
// will be rendered in place of the search bar in the initial HTML.
// When the value is available during React hydration the fallback
// will be replaced with the `<SearchBar>` component.
function SearchBarFallback() {
  return <>placeholder</>
}

export default function Page() {
  return (
    <>
      <nav>
        <Suspense fallback={<SearchBarFallback />}>
          <SearchBar />
        </Suspense>
      </nav>
      <h1>Dashboard</h1>
    </>
  )
}
```

----------------------------------------

TITLE: Configure `adjustFontFallback` for Next.js Fonts
DESCRIPTION: Defines the `adjustFontFallback` option for `next/font/google` and `next/font/local`. This boolean or string value controls automatic fallback font usage to reduce Cumulative Layout Shift (CLS). It is an optional parameter.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/02-components/font.mdx#_snippet_11

LANGUAGE: APIDOC
CODE:
```
adjustFontFallback:
  - For next/font/google:
    Type: boolean
    Default: true
    Description: Sets whether an automatic fallback font should be used to reduce Cumulative Layout Shift (CLS).
  - For next/font/local:
    Type: string | boolean (false)
    Default: 'Arial'
    Possible values: 'Arial', 'Times New Roman', false
    Description: Sets whether an automatic fallback font should be used to reduce Cumulative Layout Shift (CLS).
  Used in: next/font/google, next/font/local
  Optional: Yes
  Examples:
    - adjustFontFallback: false (for next/font/google)
    - adjustFontFallback: 'Times New Roman' (for next/font/local)
```

----------------------------------------

TITLE: Update Next.js Middleware Cookies API Usage
DESCRIPTION: This snippet illustrates the transition of the Next.js Cookies API in Middleware from a direct `response.cookie` and `response.clearCookie` model to a new `response.cookies` instance. The updated API provides `set`, `getWithOptions`, and `delete` methods for more aligned cookie management.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/middleware-upgrade-guide.mdx#_snippet_8

LANGUAGE: typescript
CODE:
```
import { NextResponse } from 'next/server'
import type { NextRequest } from 'next/server'

export function middleware(request: NextRequest) {
  // create an instance of the class to access the public methods. This uses `next()`,
  // you could use `redirect()` or `rewrite()` as well
  let response = NextResponse.next()
  // get the cookies from the request
  let cookieFromRequest = request.cookies['my-cookie']
  // set the `cookie`
  response.cookie('hello', 'world')
  // set the `cookie` with options
  const cookieWithOptions = response.cookie('hello', 'world', {
    path: '/',
    maxAge: 1000 * 60 * 60 * 24 * 7,
    httpOnly: true,
    sameSite: 'strict',
    domain: 'example.com',
  })
  // clear the `cookie`
  response.clearCookie('hello')

  return response
}
```

LANGUAGE: typescript
CODE:
```
export function middleware() {
  const response = new NextResponse()

  // set a cookie
  response.cookies.set('vercel', 'fast')

  // set another cookie with options
  response.cookies.set('nextjs', 'awesome', { path: '/test' })

  // get all the details of a cookie
  const { value, ...options } = response.cookies.getWithOptions('vercel')
  console.log(value) // => 'fast'
  console.log(options) // => { name: 'vercel', Path: '/test' }

  // deleting a cookie will mark it as expired
  response.cookies.delete('vercel')

  return response
}
```

----------------------------------------

TITLE: Next.js Middleware for Locale-Based URL Redirection
DESCRIPTION: This TypeScript middleware demonstrates how to redirect requests based on extracted locale and slug parameters from the URL. It uses `URLPattern` to parse the pathname and constructs a new URL for redirection. This pattern is relevant for handling internationalized routes and ensures middleware logic applies to all requests, including internal Next.js requests.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/middleware-upgrade-guide.mdx#_snippet_11

LANGUAGE: typescript
CODE:
```
import { NextResponse } from 'next/server'
import type { NextRequest } from 'next/server'

const PATTERNS = [
  [
    new URLPattern({ pathname: '/:locale/:slug' }),
    ({ pathname }) => pathname.groups,
  ],
]

const params = (url) => {
  const input = url.split('?')[0]
  let result = {}

  for (const [pattern, handler] of PATTERNS) {
    const patternResult = pattern.exec(input)
    if (patternResult !== null && 'pathname' in patternResult) {
      result = handler(patternResult)
      break
    }
  }
  return result
}

export function middleware(request: NextRequest) {
  const { locale, slug } = params(request.url)

  if (locale && slug) {
    const { search, protocol, host } = request.nextUrl
    const url = new URL(`${protocol}//${locale}.${host}/${slug}${search}`)
    return NextResponse.redirect(url)
  }
}
```

----------------------------------------

TITLE: Define Next.js Middleware with Config Matcher
DESCRIPTION: This snippet demonstrates how to declare a single Next.js Middleware file and configure it with a custom matcher using an exported `config` object. The middleware rewrites requests to `/about-2` for paths matching `/about/:path*` or `/dashboard/:path*`.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/middleware-upgrade-guide.mdx#_snippet_0

LANGUAGE: ts
CODE:
```
import { NextResponse } from 'next/server'
import type { NextRequest } from 'next/server'

export function middleware(request: NextRequest) {
  return NextResponse.rewrite(new URL('/about-2', request.url))
}

// Supports both a single string value or an array of matchers
export const config = {
  matcher: ['/about/:path*', '/dashboard/:path*'],
}
```

----------------------------------------

TITLE: Using useEffect for Client-Only Rendering in Next.js
DESCRIPTION: This snippet demonstrates how to use the `useEffect` hook to ensure certain content or logic runs only on the client-side after hydration. It prevents hydration mismatches by conditionally rendering content based on an `isClient` state, which is set to `true` inside `useEffect`, making browser APIs available without issues.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/react-hydration-error.mdx#_snippet_0

LANGUAGE: jsx
CODE:
```
import { useState, useEffect } from 'react'

export default function App() {
  const [isClient, setIsClient] = useState(false)

  useEffect(() => {
    setIsClient(true)
  }, [])

  return <h1>{isClient ? 'This is never prerendered' : 'Prerendered'}</h1>
}
```

----------------------------------------

TITLE: Configure Next.js to Allow Remote Image Domains
DESCRIPTION: This configuration snippet for `next.config.js` defines `remotePatterns` to securely allow images from specified external domains. It's crucial for preventing malicious usage by restricting image sources to a predefined list, such as a specific AWS S3 bucket, ensuring only trusted remote images are loaded.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/12-images.mdx#_snippet_4

LANGUAGE: ts
CODE:
```
import type { NextConfig } from 'next'

const config: NextConfig = {
  images: {
    remotePatterns: [
      {
        protocol: 'https',
        hostname: 's3.amazonaws.com',
        port: '',
        pathname: '/my-bucket/**'
```

LANGUAGE: js
CODE:
```
module.exports = {
  images: {
    remotePatterns: [
      {
        protocol: 'https',
        hostname: 's3.amazonaws.com',
        port: '',
        pathname: '/my-bucket/**'
```

----------------------------------------

TITLE: Integrating Client Component for Query Params into Next.js Layout
DESCRIPTION: Shows how a Client Component (like the `Search` component accessing `useSearchParams`) can be rendered within a Next.js Layout. This pattern allows layouts to display dynamic data derived from query parameters, even though the layout itself doesn't rerender.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/03-file-conventions/layout.mdx#_snippet_6

LANGUAGE: tsx
CODE:
```
import Search from '@/app/ui/search'

export default function Layout({ children }) {
  return (
    <>
      <Search />
      {children}
    </>
  )
}
```

LANGUAGE: jsx
CODE:
```
import Search from '@/app/ui/search'

export default function Layout({ children }) {
  return (
    <>
      <Search />
      {children}
    </>
  )
}
```

----------------------------------------

TITLE: Create React Context for Navigation Blocking State
DESCRIPTION: This snippet defines a React Context (`NavigationBlockerContext`) and a provider (`NavigationBlockerProvider`) to manage a global boolean state (`isBlocked`) indicating whether navigation should be blocked. It also exports a `useNavigationBlocker` hook for easy consumption of the context. This is useful for sharing navigation blocking state across multiple components, such as when a form has unsaved changes.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/02-components/link.mdx#_snippet_30

LANGUAGE: tsx
CODE:
```
'use client'

import { createContext, useState, useContext } from 'react'

interface NavigationBlockerContextType {
  isBlocked: boolean
  setIsBlocked: (isBlocked: boolean) => void
}

export const NavigationBlockerContext =
  createContext<NavigationBlockerContextType>({
    isBlocked: false,
    setIsBlocked: () => {},
  })

export function NavigationBlockerProvider({
  children,
}: {
  children: React.ReactNode
}) {
  const [isBlocked, setIsBlocked] = useState(false)

  return (
    <NavigationBlockerContext.Provider value={{ isBlocked, setIsBlocked }}>
      {children}
    </NavigationBlockerContext.Provider>
  )
}

export function useNavigationBlocker() {
  return useContext(NavigationBlockerContext)
}
```

LANGUAGE: jsx
CODE:
```
'use client'

import { createContext, useState, useContext } from 'react'

export const NavigationBlockerContext = createContext({
  isBlocked: false,
  setIsBlocked: () => {},
})

export function NavigationBlockerProvider({ children }) {
  const [isBlocked, setIsBlocked] = useState(false)

  return (
    <NavigationBlockerContext.Provider value={{ isBlocked, setIsBlocked }}>
      {children}
    </NavigationBlockerContext.Provider>
  )
}

export function useNavigationBlocker() {
  return useContext(NavigationBlockerContext)
}
```

----------------------------------------

TITLE: Define Environment Variables in .env File
DESCRIPTION: This snippet shows how to define environment variables in a `.env` file, which Next.js automatically loads into `process.env` for server-side access.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/environment-variables.mdx#_snippet_0

LANGUAGE: txt
CODE:
```
DB_HOST=localhost
DB_USER=myuser
DB_PASS=mypassword
```

----------------------------------------

TITLE: Configure next/image remotePatterns with URL for Next.js 15.3.0+
DESCRIPTION: This snippet shows how to configure `next/image` to allow images from specific remote hosts using `remotePatterns` with `URL` objects in `next.config.js` for Next.js versions 15.3.0 and newer. This is the recommended approach for current Next.js versions when using external image sources.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/next-image-unconfigured-host.mdx#_snippet_0

LANGUAGE: js
CODE:
```
module.exports = {
  images: {
    remotePatterns: [new URL('https://assets.example.com/account123/**')],
  },
}
```

----------------------------------------

TITLE: Create Nested Error Boundary Component in Next.js (TS/JS)
DESCRIPTION: This snippet illustrates how to create a nested error boundary using `error.tsx` or `error.js` in Next.js. Error boundaries are Client Components that catch uncaught exceptions in their child components, display a fallback UI, and provide a mechanism to log errors and attempt recovery by re-rendering the segment.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/10-error-handling.mdx#_snippet_5

LANGUAGE: tsx
CODE:
```
'use client' // Error boundaries must be Client Components

import { useEffect } from 'react'

export default function Error({
  error,
  reset,
}: {
  error: Error & { digest?: string }
  reset: () => void
}) {
  useEffect(() => {
    // Log the error to an error reporting service
    console.error(error)
  }, [error])

  return (
    <div>
      <h2>Something went wrong!</h2>
      <button
        onClick={
          // Attempt to recover by trying to re-render the segment
          () => reset()
        }
      >
        Try again
      </button>
    </div>
  )
}
```

LANGUAGE: jsx
CODE:
```
'use client' // Error boundaries must be Client Components

import { useEffect } from 'react'

export default function Error({ error, reset }) {
  useEffect(() => {
    // Log the error to an error reporting service
    console.error(error)
  }, [error])

  return (
    <div>
      <h2>Something went wrong!</h2>
      <button
        onClick={
          // Attempt to recover by trying to re-render the segment
          () => reset()
        }
      >
        Try again
      </button>
    </div>
  )
}
```

----------------------------------------

TITLE: Next.js Form Component Reference: Action Prop Behavior
DESCRIPTION: This section details the behavior of the Next.js <Form> component based on the type of its `action` prop. It covers how the component behaves when `action` is a string (GET method with client-side navigation and prefetching in App Router) versus when `action` is a function (Server Action in App Router, behaving like a React form).
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/02-components/form.mdx#_snippet_1

LANGUAGE: APIDOC
CODE:
```
Form Component:
  action: string
    Description: Behaves like a native HTML form that uses a GET method. The form data is encoded into the URL as search params, and when the form is submitted, it navigates to the specified URL.
    Next.js Enhancements (App Router):
      - Prefetching: The path is prefetched when the form becomes visible, preloading shared UI (e.g., layout.js and loading.js), resulting in faster navigation.
      - Client-side Navigation: Performs a client-side navigation instead of a full page reload when the form is submitted. This retains shared UI and client-side state.
    Next.js Enhancements (Pages Router):
      - Client-side Navigation: Performs a client-side navigation instead of a full page reload when the form is submitted. This retains shared UI and client-side state.
  action: function (Server Action)
    Description: Behaves like a React form, executing the action when the form is submitted.
    Applicability: App Router only.
```

----------------------------------------

TITLE: Configure `alternates` Metadata in Next.js
DESCRIPTION: Demonstrates how to set up `alternates` metadata in Next.js to specify canonical URLs, language-specific URLs, media-specific URLs, and RSS feed types. This configuration is typically defined in `layout.js` or `page.js` and generates corresponding `<link>` tags in the HTML `<head>` for SEO and internationalization.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/04-functions/generate-metadata.mdx#_snippet_24

LANGUAGE: jsx
CODE:
```
export const metadata = {
  alternates: {
    canonical: 'https://nextjs.org',
    languages: {
      'en-US': 'https://nextjs.org/en-US',
      'de-DE': 'https://nextjs.org/de-DE',
    },
    media: {
      'only screen and (max-width: 600px)': 'https://nextjs.org/mobile',
    },
    types: {
      'application/rss+xml': 'https://nextjs.org/rss',
    },
  },
}
```

LANGUAGE: html
CODE:
```
<link rel="canonical" href="https://nextjs.org" />
<link rel="alternate" hreflang="en-US" href="https://nextjs.org/en-US" />
<link rel="alternate" hreflang="de-DE" href="https://nextjs.org/de-DE" />
<link
  rel="alternate"
  media="only screen and (max-width: 600px)"
  href="https://nextjs.org/mobile"
/>
<link
  rel="alternate"
  type="application/rss+xml"
  href="https://nextjs.org/rss"
/>
```

----------------------------------------

TITLE: Example of Absolute Imports in Next.js
DESCRIPTION: This example illustrates the benefit of configuring absolute imports and module path aliases in Next.js. It shows how a deeply nested relative import path can be significantly simplified into a cleaner, absolute path using a configured alias.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/01-installation.mdx#_snippet_11

LANGUAGE: jsx
CODE:
```
// Before
import { Button } from '../../../components/button'

// After
import { Button } from '@/components/button'
```

----------------------------------------

TITLE: Client Component to Invoke Server Action in Next.js
DESCRIPTION: This Client Component receives a Server Action as an `action` prop. It renders a button that, when clicked, invokes the provided Server Action. This demonstrates the final step in passing a Server Action from a Server Component through a cached component to be executed on the client side.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/01-directives/use-cache.mdx#_snippet_9

LANGUAGE: tsx
CODE:
```
'use client'

export default function ClientComponent({
  action,
}: {
  action: () => Promise<void>
}) {
  return <button onClick={action}>Update</button>
}
```

LANGUAGE: jsx
CODE:
```
'use client'

export default function ClientComponent({ action }) {
  return <button onClick={action}>Update</button>
}
```

----------------------------------------

TITLE: Implement a basic error boundary with error.js
DESCRIPTION: This code demonstrates how to create a basic error boundary using `error.js` in Next.js. It's a Client Component that logs the error and provides a button to attempt re-rendering the segment, effectively trying to recover from the error.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/03-file-conventions/error.mdx#_snippet_0

LANGUAGE: tsx
CODE:
```
'use client' // Error boundaries must be Client Components

import { useEffect } from 'react'

export default function Error({
  error,
  reset,
}: {
  error: Error & { digest?: string }
  reset: () => void
}) {
  useEffect(() => {
    // Log the error to an error reporting service
    console.error(error)
  }, [error])

  return (
    <div>
      <h2>Something went wrong!</h2>
      <button
        onClick={
          // Attempt to recover by trying to re-render the segment
          () => reset()
        }
      >
        Try again
      </button>
    </div>
  )
}
```

LANGUAGE: jsx
CODE:
```
'use client' // Error boundaries must be Client Components

import { useEffect } from 'react'

export default function Error({ error, reset }) {
  useEffect(() => {
    // Log the error to an error reporting service
    console.error(error)
  }, [error])

  return (
    <div>
      <h2>Something went wrong!</h2>
      <button
        onClick={
          // Attempt to recover by trying to re-render the segment
          () => reset()
        }
      >
        Try again
      </button>
    </div>
  )
}
```

----------------------------------------

TITLE: Next.js App Router: Create Catch-All Route Directory
DESCRIPTION: Illustrates the required directory structure for an optional catch-all route `[[...slug]]` within the Next.js `app` directory, along with the `page.tsx` file, to intercept all routes.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/migrating/from-create-react-app.mdx#_snippet_8

LANGUAGE: bash
CODE:
```
app
 ┣ [[...slug]]
 ┃ ┗ page.tsx
 ┣ layout.tsx
```

----------------------------------------

TITLE: Sanitize User Data for Public Consumption
DESCRIPTION: This `ts` snippet demonstrates how to sanitize user data before it's passed to client-side components. The `getUser` function fetches all user data but then explicitly returns only the `name` field, which is considered public. This ensures that only necessary and non-sensitive information is exposed, mitigating the risks associated with direct database queries in Server Components.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/data-security.mdx#_snippet_6

LANGUAGE: ts
CODE:
```
import { sql } from './db'\n\nexport async function getUser(slug: string) {\n  const [rows] = await sql`SELECT * FROM user WHERE slug = ${slug}`\n  const user = rows[0]\n\n  // Return only the public fields\n  return {\n    name: user.name,\n  }\n}
```

----------------------------------------

TITLE: Conditionally Apply Headers in Next.js with `has` and `missing`
DESCRIPTION: This configuration snippet for `next.config.js` demonstrates how to apply HTTP headers conditionally based on incoming request properties such as headers, query parameters, cookies, or the host. It utilizes the `has` field to require specific matches and the `missing` field to require the absence of certain properties. The example also shows how to capture values from matched properties using regex for use in the applied header's value.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/05-config/01-next-config-js/headers.mdx#_snippet_7

LANGUAGE: js
CODE:
```
module.exports = {
  async headers() {
    return [
      // if the header `x-add-header` is present,
      // the `x-another-header` header will be applied
      {
        source: '/:path*',
        has: [
          {
            type: 'header',
            key: 'x-add-header',
          },
        ],
        headers: [
          {
            key: 'x-another-header',
            value: 'hello',
          },
        ],
      },
      // if the header `x-no-header` is not present,
      // the `x-another-header` header will be applied
      {
        source: '/:path*',
        missing: [
          {
            type: 'header',
            key: 'x-no-header',
          },
        ],
        headers: [
          {
            key: 'x-another-header',
            value: 'hello',
          },
        ],
      },
      // if the source, query, and cookie are matched,
      // the `x-authorized` header will be applied
      {
        source: '/specific/:path*',
        has: [
          {
            type: 'query',
            key: 'page',
            // the page value will not be available in the
            // header key/values since value is provided and
            // doesn't use a named capture group e.g. (?<page>home)
            value: 'home',
          },
          {
            type: 'cookie',
            key: 'authorized',
            value: 'true',
          },
        ],
        headers: [
          {
            key: 'x-authorized',
            value: ':authorized',
          },
        ],
      },
      // if the header `x-authorized` is present and
      // contains a matching value, the `x-another-header` will be applied
      {
        source: '/:path*',
        has: [
          {
            type: 'header',
            key: 'x-authorized',
            value: '(?<authorized>yes|true)',
          },
        ],
        headers: [
          {
            key: 'x-another-header',
            value: ':authorized',
          },
        ],
      },
      // if the host is `example.com`,
      // this header will be applied
      {
        source: '/:path*',
        has: [
          {
            type: 'host',
            value: 'example.com',
          },
        ],
        headers: [
          {
            key: 'x-another-header',
            value: ':authorized',
          },
        ],
      },
    ]
  }
}
```

----------------------------------------

TITLE: Rename Next.js Image Imports for Next.js 13 Compatibility
DESCRIPTION: This codemod safely renames `next/image` imports to `next/legacy/image` for Next.js 10, 11, or 12 applications migrating to Next.js 13. Additionally, it renames `next/future/image` to `next/image`, ensuring compatibility with the updated image component structure.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/upgrading/codemods.mdx#_snippet_8

LANGUAGE: bash
CODE:
```
npx @next/codemod@latest next-image-to-legacy-image .
```

LANGUAGE: jsx
CODE:
```
import Image1 from 'next/image'
import Image2 from 'next/future/image'

export default function Home() {
  return (
    <div>
      <Image1 src="/test.jpg" width="200" height="300" />
      <Image2 src="/test.png" width="500" height="400" />
    </div>
  )
}
```

LANGUAGE: jsx
CODE:
```
// 'next/image' becomes 'next/legacy/image'
import Image1 from 'next/legacy/image'
// 'next/future/image' becomes 'next/image'
import Image2 from 'next/image'

export default function Home() {
  return (
    <div>
      <Image1 src="/test.jpg" width="200" height="300" />
      <Image2 src="/test.png" width="500" height="400" />
    </div>
  )
}
```

----------------------------------------

TITLE: Migrating to Single Module Loading with next/dynamic (After) - JSX
DESCRIPTION: This snippet demonstrates the updated and recommended way to load dynamic components with `next/dynamic` after the deprecation of multiple module loading. Each component is now dynamically imported individually, aligning with React's `React.lazy` and `Suspense` patterns. This simplifies the dynamic import process and improves compatibility.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/02-guides/upgrading/version-9.mdx#_snippet_13

LANGUAGE: jsx
CODE:
```
import dynamic from 'next/dynamic'

const Hello1 = dynamic(() => import('../components/hello1'))
const Hello2 = dynamic(() => import('../components/hello2'))

function HelloBundle({ title }) {
  return (
    <div>
      <h1>{title}</h1>
      <Hello1 />
      <Hello2 />
    </div>
  )
}

function DynamicBundle() {
  return <HelloBundle title="Dynamic Bundle" />
}

export default DynamicBundle
```

----------------------------------------

TITLE: Type Custom Components Wrapping next/link
DESCRIPTION: Illustrates how to correctly type a custom React component that accepts an `href` prop for `next/link`. Using a generic type `T extends string` with `Route<T>` ensures type safety for the `href` prop.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/05-config/02-typescript.mdx#_snippet_5

LANGUAGE: tsx
CODE:
```
import type { Route } from 'next'
import Link from 'next/link'

function Card<T extends string>({ href }: { href: Route<T> | URL }) {
  return (
    <Link href={href}>
      <div>My Card</div>
    </Link>
  )
}
```

----------------------------------------

TITLE: Create a Shared Layout Component in Next.js
DESCRIPTION: This code defines a reusable `Layout` component that can wrap page content, providing a consistent structure with shared elements like a navigation bar and footer. It accepts `children` as a prop to render the page-specific content within the layout.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/03-building-your-application/01-routing/01-pages-and-layouts.mdx#_snippet_1

LANGUAGE: jsx
CODE:
```
import Navbar from './navbar'
import Footer from './footer'

export default function Layout({ children }) {
  return (
    <>
      <Navbar />
      <main>{children}</main>
      <Footer />
    </>
  )
}
```

----------------------------------------

TITLE: Return `redirect` from `getServerSideProps` for page redirection
DESCRIPTION: This snippet illustrates how to return a `redirect` object to perform client-side or server-side redirects. The object must contain a `destination` string and a `permanent` boolean. Optionally, `statusCode` can be used instead of `permanent` for specific HTTP client needs.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/04-api-reference/03-functions/get-server-side-props.mdx#_snippet_4

LANGUAGE: JavaScript
CODE:
```
export async function getServerSideProps(context) {
  const res = await fetch(`https://.../data`)
  const data = await res.json()

  if (!data) {
    return {
      redirect: {
        destination: '/',
        permanent: false,
      },
    }
  }

  return {
    props: {}, // will be passed to the page component as props
  }
}
```

----------------------------------------

TITLE: Next.js Redirects with Header, Cookie, and Query Matching
DESCRIPTION: This configuration demonstrates various conditional redirects in Next.js using `has` and `missing` properties. It shows how to apply redirects based on the presence or absence of specific headers, the combination of query parameters and cookies, and matching header values with named capture groups, as well as host-based redirects.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/05-config/01-next-config-js/redirects.mdx#_snippet_6

LANGUAGE: js
CODE:
```
module.exports = {
  async redirects() {
    return [
      // if the header `x-redirect-me` is present,
      // this redirect will be applied
      {
        source: '/:path((?!another-page$).*)',
        has: [
          {
            type: 'header',
            key: 'x-redirect-me',
          },
        ],
        permanent: false,
        destination: '/another-page',
      },
      // if the header `x-dont-redirect` is present,
      // this redirect will NOT be applied
      {
        source: '/:path((?!another-page$).*)',
        missing: [
          {
            type: 'header',
            key: 'x-do-not-redirect',
          },
        ],
        permanent: false,
        destination: '/another-page',
      },
      // if the source, query, and cookie are matched,
      // this redirect will be applied
      {
        source: '/specific/:path*',
        has: [
          {
            type: 'query',
            key: 'page',
            // the page value will not be available in the
            // destination since value is provided and doesn't
            // use a named capture group e.g. (?<page>home)
            value: 'home',
          },
          {
            type: 'cookie',
            key: 'authorized',
            value: 'true',
          },
        ],
        permanent: false,
        destination: '/another/:path*',
      },
      // if the header `x-authorized` is present and
      // contains a matching value, this redirect will be applied
      {
        source: '/',
        has: [
          {
            type: 'header',
            key: 'x-authorized',
            value: '(?<authorized>yes|true)',
          },
        ],
        permanent: false,
        destination: '/home?authorized=:authorized',
      },
      // if the host is `example.com`,
      // this redirect will be applied
      {
        source: '/:path((?!another-page$).*)',
        has: [
          {
            type: 'host',
            value: 'example.com',
          },
        ],
        permanent: false,
        destination: '/another-page',
      },
    ]
  },
}
```

----------------------------------------

TITLE: Redirecting Users with res.redirect in Next.js API Routes (TypeScript)
DESCRIPTION: This snippet demonstrates how to redirect a user to a new URL using `res.redirect` within a Next.js API Route written in TypeScript. It performs an asynchronous operation (`addPost`), then redirects to a dynamic URL (`/post/${id}`) with a 307 (Temporary Redirect) status code. This is useful for post-mutation navigation.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/02-guides/forms.mdx#_snippet_8

LANGUAGE: TypeScript
CODE:
```
import type { NextApiRequest, NextApiResponse } from 'next'

export default async function handler(
  req: NextApiRequest,
  res: NextApiResponse
) {
  const id = await addPost()
  res.redirect(307, `/post/${id}`)
}
```

----------------------------------------

TITLE: Add Metadata to Root Layout in Next.js App Router
DESCRIPTION: Examples of adding metadata like title and description to the root layout in a Next.js App Router application, leveraging built-in SEO support.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/migrating/app-router-migration.mdx#_snippet_5

LANGUAGE: tsx
CODE:
```
import type { Metadata } from 'next'

export const metadata: Metadata = {
  title: 'Home',
  description: 'Welcome to Next.js',
}
```

LANGUAGE: jsx
CODE:
```
export const metadata = {
  title: 'Home',
  description: 'Welcome to Next.js',
}
```

----------------------------------------

TITLE: Programmatic Navigation with useRouter in Next.js
DESCRIPTION: This snippet demonstrates how to use the `useRouter` hook from `next/navigation` within a Client Component to programmatically navigate to a new route. Clicking the 'Dashboard' button triggers a client-side navigation to '/dashboard', adding a new entry to the browser's history stack.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/04-functions/use-router.mdx#_snippet_0

LANGUAGE: tsx
CODE:
```
'use client'

import { useRouter } from 'next/navigation'

export default function Page() {
  const router = useRouter()

  return (
    <button type="button" onClick={() => router.push('/dashboard')}>
      Dashboard
    </button>
  )
}
```

LANGUAGE: jsx
CODE:
```
'use client'

import { useRouter } from 'next/navigation'

export default function Page() {
  const router = useRouter()

  return (
    <button type="button" onClick={() => router.push('/dashboard')}>
      Dashboard
    </button>
  )
}
```

----------------------------------------

TITLE: Configure Next.js Metadata Description
DESCRIPTION: This snippet demonstrates how to set the `description` metadata field in Next.js using `export const metadata` in `layout.js` or `page.js`. It also shows the resulting `<meta name="description">` tag in the HTML `<head>` output, which is crucial for SEO.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/04-functions/generate-metadata.mdx#_snippet_7

LANGUAGE: jsx
CODE:
```
export const metadata = {
  description: 'The React Framework for the Web',
}
```

LANGUAGE: html
CODE:
```
<meta name="description" content="The React Framework for the Web" />
```

----------------------------------------

TITLE: Defining GET API Route Handler in Next.js (JavaScript)
DESCRIPTION: Defines an exported `GET` function, serving as the handler for HTTP GET requests in a Next.js API route. It constructs a JSON response containing the `pathname` extracted from the incoming request's URL, demonstrating basic request processing and response generation.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/route-handler/output.md#_snippet_1

LANGUAGE: JavaScript
CODE:
```
export const GET = (req)=>{
    return NextResponse.json({
        pathname: req.nextUrl.pathname
    });
};
```

----------------------------------------

TITLE: Generate Static Params for Child Segments with Parent Params in Next.js
DESCRIPTION: This snippet illustrates how a child route segment's `generateStaticParams` function can utilize the `params` object, inherited from its parent's `generateStaticParams` execution, to dynamically fetch and generate its own segments. It fetches products filtered by the parent category parameter.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/04-functions/generate-static-params.mdx#_snippet_12

LANGUAGE: tsx
CODE:
```
// Generate segments for [product] using the `params` passed from
// the parent segment's `generateStaticParams` function
export async function generateStaticParams({
  params: { category },
}: {
  params: { category: string }
}) {
  const products = await fetch(
    `https://.../products?category=${category}`
  ).then((res) => res.json())

  return products.map((product) => ({
    product: product.id,
  }))
}

export default function Page({
  params,
}: {
  params: Promise<{ category: string; product: string }>
}) {
  // ...
}
```

LANGUAGE: jsx
CODE:
```
// Generate segments for [product] using the `params` passed from
// the parent segment's `generateStaticParams` function
export async function generateStaticParams({ params: { category } }) {
  const products = await fetch(
    `https://.../products?category=${category}`
  ).then((res) => res.json())

  return products.map((product) => ({
    product: product.id,
  }))
}

export default function Page({ params }) {
  // ...
}
```

----------------------------------------

TITLE: Next.js Middleware: Negative Regex Matching in `matcher`
DESCRIPTION: Demonstrates how to use full regular expressions, specifically negative lookaheads, within the `matcher` configuration to exclude specific paths (like API routes, static files, or metadata files) from Middleware execution.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/03-file-conventions/middleware.mdx#_snippet_21

LANGUAGE: js
CODE:
```
export const config = {
  matcher: [
    /*
     * Match all request paths except for the ones starting with:
     * - api (API routes)
     * - _next/static (static files)
     * - _next/image (image optimization files)
     * - favicon.ico, sitemap.xml, robots.txt (metadata files)
     */
    '/((?!api|_next/static|_next/image|favicon.ico|sitemap.xml|robots.txt).*),'
  ]
}
```

----------------------------------------

TITLE: Access Dynamic Route Parameters in Next.js Layout
DESCRIPTION: This example illustrates how to access dynamic route parameters (`params`) within a layout component. The `params` prop is a promise that resolves to an object containing the route parameters, requiring `async/await` to access its values.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/03-file-conventions/layout.mdx#_snippet_2

LANGUAGE: tsx
CODE:
```
export default async function Layout({
  params,
}: {
  params: Promise<{ team: string }>
}) {
  const { team } = await params
}
```

LANGUAGE: jsx
CODE:
```
export default async function Layout({ params }) {
  const { team } = await params
}
```

----------------------------------------

TITLE: Performing Rewrites with NextResponse - JavaScript
DESCRIPTION: The `NextResponse.rewrite` static method creates a `NextResponse` instance for URL rewriting in Next.js middleware. It sets the 'x-middleware-rewrite' header to the validated destination URL and applies any additional middleware-specific headers using `handleMiddlewareField`. This allows the middleware to internally change the request's destination without a client-side redirect.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/next-response/output.md#_snippet_17

LANGUAGE: JavaScript
CODE:
```
    static rewrite(destination, init) {
        const headers = new Headers(init == null ? void 0 : init.headers);
        headers.set('x-middleware-rewrite', validateURL(destination));
        handleMiddlewareField(init, headers);
        return new NextResponse(null, {
            ...init,
            headers
        });
    }
```

----------------------------------------

TITLE: Read Nonce in Next.js App Router with headers function
DESCRIPTION: Illustrates how to retrieve a nonce from request headers within a Server Component in the Next.js App Router using the `headers` function. The nonce is then applied to a `Script` component to satisfy CSP requirements, ideal for the new App Router architecture.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/content-security-policy.mdx#_snippet_3

LANGUAGE: tsx
CODE:
```
import { headers } from 'next/headers'
import Script from 'next/script'

export default async function Page() {
  const nonce = (await headers()).get('x-nonce')

  return (
    <Script
      src="https://www.googletagmanager.com/gtag/js"
      strategy="afterInteractive"
      nonce={nonce}
    />
  )
}
```

LANGUAGE: jsx
CODE:
```
import { headers } from 'next/headers'
import Script from 'next/script'

export default async function Page() {
  const nonce = (await headers()).get('x-nonce')

  return (
    <Script
      src="https://www.googletagmanager.com/gtag/js"
      strategy="afterInteractive"
      nonce={nonce}
    />
  )
}
```

----------------------------------------

TITLE: Configure Build-Time Environment Variables in Next.js
DESCRIPTION: This snippet demonstrates how to define custom environment variables that will be embedded into the JavaScript bundle at build time. These variables are added to the `env` object within your `next.config.js` file.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/05-config/01-next-config-js/env.mdx#_snippet_0

LANGUAGE: javascript
CODE:
```
module.exports = {
  env: {
    customKey: 'my-value',
  },
}
```

----------------------------------------

TITLE: Correct Next.js `cookies()` usage with `"use cache"`
DESCRIPTION: Illustrates the recommended pattern for using `cookies()` with `"use cache"`. The `cookies()` call is moved outside the cached function, and the resulting value is passed as an argument. This ensures the value becomes part of the cache key, allowing the function to be properly cached.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/next-request-in-use-cache.mdx#_snippet_1

LANGUAGE: jsx
CODE:
```
import { cookies } from 'next/headers'

async function getExampleData(isLoggedIn) {
  "use cache"
  ...
}

export default async function Page() {
  const isLoggedIn = (await cookies()).has('token')
  const data = await getExampleData(isLoggedIn)
  return ...
}
```

----------------------------------------

TITLE: Next.js Parallel and Intercepted Route Conventions
DESCRIPTION: Details the file naming conventions for implementing parallel routes (named slots) and various levels of intercepted routes in Next.js applications.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/02-project-structure.mdx#_snippet_6

LANGUAGE: APIDOC
CODE:
```
`@folder`: Named slot
`(.)folder`: Intercept same level
`(..)folder`: Intercept one level above
`(..)(..)folder`: Intercept two levels above
`(...)folder`: Intercept from root
```

----------------------------------------

TITLE: Handling Client-Side Form Submission (JavaScript React)
DESCRIPTION: This JavaScript React component demonstrates how to handle form submissions on the client-side. The `onSubmit` function prevents default form behavior, creates `FormData` from the event target, and sends a POST request to `/api/submit` using `fetch`. It then handles the JSON response from the API.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/02-guides/forms.mdx#_snippet_3

LANGUAGE: jsx
CODE:
```
export default function Page() {
  async function onSubmit(event) {
    event.preventDefault()

    const formData = new FormData(event.target)
    const response = await fetch('/api/submit', {
      method: 'POST',
      body: formData,
    })

    // Handle response if necessary
    const data = await response.json()
    // ...
  }

  return (
    <form onSubmit={onSubmit}>
      <input type="text" name="name" />
      <button type="submit">Submit</button>
    </form>
  )
}
```

----------------------------------------

TITLE: Create JSON Response with NextResponse
DESCRIPTION: Produces an HTTP response with the specified JSON body and an optional status code. Useful for API routes.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/04-functions/next-response.mdx#_snippet_11

LANGUAGE: TypeScript
CODE:
```
import { NextResponse } from 'next/server'

export async function GET(request: Request) {
  return NextResponse.json({ error: 'Internal Server Error' }, { status: 500 })
}
```

LANGUAGE: JavaScript
CODE:
```
import { NextResponse } from 'next/server'

export async function GET(request) {
  return NextResponse.json({ error: 'Internal Server Error' }, { status: 500 })
}
```

----------------------------------------

TITLE: Configuring Remote Image Domains in next.config.js
DESCRIPTION: This configuration snippet for `next.config.js` defines allowed remote image patterns. It's crucial for security to specify `remotePatterns` to prevent malicious usage and ensure image optimization works correctly.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/02-components/image.mdx#_snippet_47

LANGUAGE: js
CODE:
```
module.exports = {
  images: {
    remotePatterns: [
      {
        protocol: 'https',
        hostname: 's3.amazonaws.com',
        port: '',
        pathname: '/my-bucket/**',
        search: '',
      },
    ],
  },
}
```

----------------------------------------

TITLE: Configure Open Graph Metadata for Article Type in Next.js
DESCRIPTION: This snippet shows how to configure Open Graph metadata for an 'article' type, including title, description, type, published time, and authors. This configuration is typically defined in `layout.js` or `page.js` to generate the corresponding `<meta>` tags in the HTML `<head>`.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/04-functions/generate-metadata.mdx#_snippet_12

LANGUAGE: jsx
CODE:
```
export const metadata = {
  openGraph: {
    title: 'Next.js',
    description: 'The React Framework for the Web',
    type: 'article',
    publishedTime: '2023-01-01T00:00:00.000Z',
    authors: ['Seb', 'Josh'],
  },
}
```

LANGUAGE: html
CODE:
```
<meta property="og:title" content="Next.js" />
<meta property="og:description" content="The React Framework for the Web" />
<meta property="og:type" content="article" />
<meta property="article:published_time" content="2023-01-01T00:00:00.000Z" />
<meta property="article:author" content="Seb" />
<meta property="article:author" content="Josh" />
```

----------------------------------------

TITLE: Cache Components within Next.js Page
DESCRIPTION: Illustrates how components imported and nested within a `page` file (TSX/JSX) inherit the caching behavior defined by `use cache` at the page level. This example shows fetching users within a cached page.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/01-directives/use-cache.mdx#_snippet_4

LANGUAGE: tsx
CODE:
```
'use cache'

async function Users() {
  const users = await fetch('/api/users')
  // loop through users
}

export default function Page() {
  return (
    <main>
      <Users />
    </main>
  )
}
```

LANGUAGE: jsx
CODE:
```
'use cache'

async function Users() {
  const users = await fetch('/api/users')
  // loop through users
}

export default function Page() {
  return (
    <main>
      <Users />
    </main>
  )
}
```

----------------------------------------

TITLE: Next.js `generateStaticParams` for Dynamic Rendering
DESCRIPTION: Illustrates how to configure `generateStaticParams` to prevent any paths from being statically rendered at build time by returning an empty array. This forces the route to be dynamically rendered at request time.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/caching.mdx#_snippet_28

LANGUAGE: jsx
CODE:
```
export async function generateStaticParams() {
  return []
}
```

----------------------------------------

TITLE: Send Next.js Web Vitals to External Analytics Endpoint in JavaScript
DESCRIPTION: This snippet demonstrates sending Web Vitals data to an external URL using `useReportWebVitals`. It prioritizes `navigator.sendBeacon` for background transmission, falling back to `fetch` with `keepalive` for robust data delivery.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/analytics.mdx#_snippet_4

LANGUAGE: js
CODE:
```
useReportWebVitals((metric) => {
  const body = JSON.stringify(metric)
  const url = 'https://example.com/analytics'

  // Use `navigator.sendBeacon()` if available, falling back to `fetch()`.
  if (navigator.sendBeacon) {
    navigator.sendBeacon(url, body)
  } else {
    fetch(url, { body, method: 'POST', keepalive: true })
  }
})
```

----------------------------------------

TITLE: Correct createContext Usage in Next.js Client Component
DESCRIPTION: This snippet demonstrates the correct way to use `createContext` in Next.js by adding the `'use client'` directive at the top of the file, ensuring the component is treated as a Client Component.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/context-in-server-component.mdx#_snippet_1

LANGUAGE: jsx
CODE:
```
'use client'
import { createContext } from 'react'

const Context = createContext()
```

----------------------------------------

TITLE: Return Non-UI Content (RSS Feed) from Next.js Route Handler
DESCRIPTION: Explains how to use Route Handlers to return non-UI content, specifically demonstrating how to generate an RSS feed (`text/xml`) response. It highlights the flexibility of Route Handlers for serving various content types beyond typical UI.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/03-file-conventions/route.mdx#_snippet_21

LANGUAGE: ts
CODE:
```
export async function GET() {
  return new Response(
    `<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0">

<channel>
  <title>Next.js Documentation</title>
  <link>https://nextjs.org/docs</link>
  <description>The React Framework for the Web</description>
</channel>

</rss>`,
    {
      headers: {
        'Content-Type': 'text/xml',
      },
    }
  )
}
```

LANGUAGE: js
CODE:
```
export async function GET() {
  return new Response(`<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0">

<channel>
  <title>Next.js Documentation</title>
  <link>https://nextjs.org/docs</link>
  <description>The React Framework for the Web</description>
</channel>

</rss>`)
}
```

----------------------------------------

TITLE: Run Next.js Development Server
DESCRIPTION: Instructions to install project dependencies and start the local development server for a Next.js application using Yarn. The application will typically be accessible at http://localhost:3000.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-buttercms/README.md#_snippet_4

LANGUAGE: Shell
CODE:
```
yarn install
yarn dev
```

----------------------------------------

TITLE: Set Request and Response Headers in Next.js Middleware
DESCRIPTION: This snippet illustrates how to manipulate HTTP headers within Next.js middleware. It shows how to clone existing request headers and set new ones using the `Headers` API, and how to apply these new headers to the `NextResponse.next()` object. Additionally, it demonstrates setting custom response headers directly on the `NextResponse` object.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/03-file-conventions/middleware.mdx#_snippet_18

LANGUAGE: typescript
CODE:
```
import { NextResponse } from 'next/server'
import type { NextRequest } from 'next/server'

export function middleware(request: NextRequest) {
  // Clone the request headers and set a new header `x-hello-from-middleware1`
  const requestHeaders = new Headers(request.headers)
  requestHeaders.set('x-hello-from-middleware1', 'hello')

  // You can also set request headers in NextResponse.next
  const response = NextResponse.next({
    request: {
      // New request headers
      headers: requestHeaders,
    },
  })

  // Set a new response header `x-hello-from-middleware2`
  response.headers.set('x-hello-from-middleware2', 'hello')
  return response
}
```

LANGUAGE: javascript
CODE:
```
import { NextResponse } from 'next/server'

export function middleware(request) {
  // Clone the request headers and set a new header `x-hello-from-middleware1`
  const requestHeaders = new Headers(request.headers)
  requestHeaders.set('x-hello-from-middleware1', 'hello')

  // You can also set request headers in NextResponse.next
  const response = NextResponse.next({
    request: {
      // New request headers
      headers: requestHeaders,
    },
  })

  // Set a new response header `x-hello-from-middleware2`
  response.headers.set('x-hello-from-middleware2', 'hello')
  return response
}
```

----------------------------------------

TITLE: Display Remote Images with Next.js Image Component
DESCRIPTION: This snippet demonstrates how to render a remote image using the `next/image` component in a Next.js application. It requires providing the `src` URL, `alt` text, and explicit `width` and `height` props, as Next.js cannot infer these for remote assets during build time. Alternatively, the `fill` prop can be used to make the image fill its parent.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/12-images.mdx#_snippet_3

LANGUAGE: tsx
CODE:
```
import Image from 'next/image'

export default function Page() {
  return (
    <Image
      src="https://s3.amazonaws.com/my-bucket/profile.png"
      alt="Picture of the author"
      width={500}
      height={500}
    />
  )
}
```

LANGUAGE: jsx
CODE:
```
import Image from 'next/image'

export default function Page() {
  return (
    <Image
      src="https://s3.amazonaws.com/my-bucket/profile.png"
      alt="Picture of the author"
      width={500}
      height={500}
    />
  )
}
```

----------------------------------------

TITLE: Next.js fetch API Default Caching Behavior
DESCRIPTION: Describes the default caching behavior of the `fetch` API in Next.js. By default, data returned from `fetch` is not automatically cached in the Data Cache, behaving as if `cache: 'no-store'` was explicitly set.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/caching.mdx#_snippet_18

LANGUAGE: JavaScript
CODE:
```
let data = await fetch('https://api.vercel.app/blog', { cache: 'no-store' })
```

LANGUAGE: APIDOC
CODE:
```
fetch API:
  - Default Caching: Data is NOT automatically cached in the Data Cache.
  - Equivalent to: `cache: 'no-store'` when no `cache` option is specified.
  - Reference: fetch API Reference (/docs/app/api-reference/functions/fetch)
```

----------------------------------------

TITLE: Importing a React Component in Next.js
DESCRIPTION: This JavaScript snippet demonstrates how to import a custom React component, 'Button', from a relative path. This is a standard practice in Next.js for modularizing UI elements and making them reusable across different pages or components.
SOURCE: https://github.com/vercel/next.js/blob/canary/test/integration/plugin-mdx-rs/pages/button.mdx#_snippet_0

LANGUAGE: javascript
CODE:
```
import Button from '../components/button.js'
```

----------------------------------------

TITLE: Utilize Wrapped Client Components in Next.js Server Components
DESCRIPTION: This example shows how the previously wrapped third-party component, now functioning as a Client Component, can be seamlessly imported and rendered directly within a Next.js Server Component. This pattern effectively resolves compatibility issues, enabling the use of client-only features in a server-rendered context.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/05-server-and-client-components.mdx#_snippet_11

LANGUAGE: tsx
CODE:
```
import Carousel from './carousel'

export default function Page() {
  return (
    <div>
      <p>View pictures</p>
      {/*  Works, since Carousel is a Client Component */}
      <Carousel />
    </div>
  )
}
```

LANGUAGE: jsx
CODE:
```
import Carousel from './carousel'

export default function Page() {
  return (
    <div>
      <p>View pictures</p>
      {/*  Works, since Carousel is a Client Component */}
      <Carousel />
    </div>
  )
}
```

----------------------------------------

TITLE: Type Safety for `generateMetadata` with Parent Metadata
DESCRIPTION: This example demonstrates how to type the `parent` argument in the `generateMetadata` function using `ResolvingMetadata`. This allows you to access and merge metadata from parent layouts while maintaining full type safety, which is crucial for complex metadata hierarchies.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/04-functions/generate-metadata.mdx#_snippet_37

LANGUAGE: TSX
CODE:
```
import type { Metadata, ResolvingMetadata } from 'next'

export async function generateMetadata(
  { params, searchParams }: Props,
  parent: ResolvingMetadata
): Promise<Metadata> {
  return {
    title: 'Next.js',
  }
}
```

----------------------------------------

TITLE: Enable Caching for Next.js GET Route Handlers
DESCRIPTION: This snippet demonstrates how to re-enable caching for `GET` functions in Next.js Route Handlers, which are no longer cached by default. By setting `export const dynamic = 'force-static'`, the Route Handler's response will be cached, improving performance for static data.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/upgrading/version-15.mdx#_snippet_19

LANGUAGE: js
CODE:
```
export const dynamic = 'force-static'

export async function GET() {}
```

----------------------------------------

TITLE: Defining MDX Layout with Tailwind Typography (App Router, JavaScript)
DESCRIPTION: This JavaScript snippet defines a shared layout component for Next.js App Router, applying Tailwind CSS `prose` classes to style markdown content. It customizes heading styles, including margins, font weight, and colors for both light and dark modes, ensuring consistent typography across MDX pages.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/mdx.mdx#_snippet_25

LANGUAGE: jsx
CODE:
```
export default function MdxLayout({ children }) {
  // Create any shared layout or styles here
  return (
    <div className="prose prose-headings:mt-8 prose-headings:font-semibold prose-headings:text-black prose-h1:text-5xl prose-h2:text-4xl prose-h3:text-3xl prose-h4:text-2xl prose-h5:text-xl prose-h6:text-lg dark:prose-headings:text-white">
      {children}
    </div>
  )
}
```

----------------------------------------

TITLE: Update Next.js, React, and React DOM Packages
DESCRIPTION: This command updates the core Next.js, React, and React DOM packages to their latest stable versions using npm, which is the first step in upgrading your application.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/migrating/app-router-migration.mdx#_snippet_0

LANGUAGE: bash
CODE:
```
npm install next@latest react@latest react-dom@latest
```

----------------------------------------

TITLE: Next.js: Configure Dynamic Rendering with `dynamic` Export
DESCRIPTION: The `dynamic` export constant allows developers to control the rendering strategy for Next.js layouts, pages, and routes, enabling a switch between fully static or fully dynamic behavior. This provides a flexible way to manage caching and rendering, serving as a migration path from `getServerSideProps` and `getStaticProps`.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/03-file-conventions/route-segment-config.mdx#_snippet_1

LANGUAGE: tsx
CODE:
```
export const dynamic = 'auto'
// 'auto' | 'force-dynamic' | 'error' | 'force-static'
```

LANGUAGE: js
CODE:
```
export const dynamic = 'auto'
// 'auto' | 'force-dynamic' | 'error' | 'force-static'
```

----------------------------------------

TITLE: Delete a cookie using the delete() method in Next.js
DESCRIPTION: This snippet illustrates how to remove a cookie by calling the `(await cookies()).delete('name')` method within a server action. This is a direct way to invalidate a specific cookie.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/04-functions/cookies.mdx#_snippet_8

LANGUAGE: tsx
CODE:
```
'use server'

import { cookies } from 'next/headers'

export async function delete(data) {
  (await cookies()).delete('name')
}
```

LANGUAGE: js
CODE:
```
'use server'

import { cookies } from 'next/headers'

export async function delete(data) {
  (await cookies()).delete('name')
}
```

----------------------------------------

TITLE: Configure Strict-Transport-Security Header in Next.js
DESCRIPTION: This header informs browsers to only access the site using HTTPS, preventing HTTP access for a specified duration and including all subdomains. This helps mitigate man-in-the-middle attacks by ensuring secure connections.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/05-config/01-next-config-js/headers.mdx#_snippet_14

LANGUAGE: js
CODE:
```
{
  key: 'Strict-Transport-Security',
  value: 'max-age=63072000; includeSubDomains; preload'
}
```

----------------------------------------

TITLE: Share Data Fetching Logic for Next.js getStaticProps
DESCRIPTION: This snippet demonstrates how to optimize data fetching in Next.js by sharing server-side logic. Instead of calling an API route from `getStaticProps`, a common utility function (`loadPosts`) is created in a `lib/` directory and directly imported, reducing redundant network calls and improving application performance.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/03-building-your-application/03-data-fetching/01-get-static-props.mdx#_snippet_3

LANGUAGE: js
CODE:
```
// The following function is shared
// with getStaticProps and API routes
// from a `lib/` directory
export async function loadPosts() {
  // Call an external API endpoint to get posts
  const res = await fetch('https://.../posts/')
  const data = await res.json()

  return data
}
```

LANGUAGE: jsx
CODE:
```
// pages/blog.js
import { loadPosts } from '../lib/load-posts'

// This function runs only on the server side
export async function getStaticProps() {
  // Instead of fetching your `/api` route you can call the same
  // function directly in `getStaticProps`
  const posts = await loadPosts()

  // Props returned will be passed to the page component
  return { props: { posts } }
}
```

----------------------------------------

TITLE: Initializing OpenTelemetry NodeSDK for Tracing (TypeScript)
DESCRIPTION: This TypeScript code initializes the OpenTelemetry `NodeSDK` for tracing. It configures a `Resource` with a service name ('next-app') and sets up a `SimpleSpanProcessor` that exports traces using `OTLPTraceExporter` over HTTP. This setup is crucial for sending telemetry data from the Next.js application running in a Node.js environment.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/open-telemetry.mdx#_snippet_6

LANGUAGE: typescript
CODE:
```
import { OTLPTraceExporter } from '@opentelemetry/exporter-trace-otlp-http'
import { Resource } from '@opentelemetry/resources'
import { NodeSDK } from '@opentelemetry/sdk-node'
import { SimpleSpanProcessor } from '@opentelemetry/sdk-trace-node'
import { ATTR_SERVICE_NAME } from '@opentelemetry/semantic-conventions'

const sdk = new NodeSDK({
  resource: new Resource({
    [ATTR_SERVICE_NAME]: 'next-app',
  }),
  spanProcessor: new SimpleSpanProcessor(new OTLPTraceExporter()),
})
sdk.start()
```

----------------------------------------

TITLE: Incorrect Server Action Exports in Next.js 'use server' Files
DESCRIPTION: Demonstrates incorrect exports in a 'use server' file. Exporting a non-async value or a synchronous function will cause an error, as Server Actions must be async functions to be invoked from the client.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/invalid-use-server-value.mdx#_snippet_0

LANGUAGE: js
CODE:
```
'use server'

// ❌ This is incorrect: only async functions are allowed.
export const value = 1

// ❌ This is incorrect: missed the `async` keyword.
export function getServerData() {
  return '...'
}
```

----------------------------------------

TITLE: Next.js API Route for User Authentication with Credentials
DESCRIPTION: This Next.js API route handles user login requests. It extracts email and password from the request body, attempts to sign in using the 'credentials' provider via the '@/auth' library, and returns a success status or an appropriate error message based on the authentication outcome.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/authentication.mdx#_snippet_10

LANGUAGE: TypeScript
CODE:
```
import type { NextApiRequest, NextApiResponse } from 'next'
import { signIn } from '@/auth'

export default async function handler(
  req: NextApiRequest,
  res: NextApiResponse
) {
  try {
    const { email, password } = req.body
    await signIn('credentials', { email, password })

    res.status(200).json({ success: true })
  } catch (error) {
    if (error.type === 'CredentialsSignin') {
      res.status(401).json({ error: 'Invalid credentials.' })
    } else {
      res.status(500).json({ error: 'Something went wrong.' })
    }
  }
}
```

LANGUAGE: JavaScript
CODE:
```
import { signIn } from '@/auth'

export default async function handler(req, res) {
  try {
    const { email, password } = req.body
    await signIn('credentials', { email, password })

    res.status(200).json({ success: true })
  } catch (error) {
    if (error.type === 'CredentialsSignin') {
      res.status(401).json({ error: 'Invalid credentials.' })
    } else {
      res.status(500).json({ error: 'Something went wrong.' })
    }
  }
}
```

----------------------------------------

TITLE: Tagging fetch requests for cache revalidation in Next.js
DESCRIPTION: To enable `revalidateTag` functionality, `fetch` requests can be tagged using the `next.tags` option. This allows specific cache entries associated with the tag to be revalidated later. The example demonstrates tagging user data fetched by ID with the 'user' tag.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/09-caching-and-revalidating.mdx#_snippet_4

LANGUAGE: tsx
CODE:
```
export async function getUserById(id: string) {
  const data = await fetch(`https://...`, {
    next: {
      tags: ['user'],
    },
  })
}
```

LANGUAGE: jsx
CODE:
```
export async function getUserById(id) {
  const data = await fetch(`https://...`, {
    next: {
      tags: ['user'],
    },
  })
}
```

----------------------------------------

TITLE: Enable Typed Routes in Next.js Configuration
DESCRIPTION: Configures `next.config.js` to enable experimental `typedRoutes` support. This feature provides statically typed links and requires the App Router and TypeScript in your Next.js project.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/05-config/01-next-config-js/typedRoutes.mdx#_snippet_0

LANGUAGE: js
CODE:
```
/** @type {import('next').NextConfig} */
const nextConfig = {
  experimental: {
    typedRoutes: true,
  },
}

module.exports = nextConfig
```

----------------------------------------

TITLE: Disable Prefetching for Next.js Link Component
DESCRIPTION: This snippet shows how to disable prefetching for a Next.js `<Link>` component by setting the `prefetch` prop to `false`. This is useful for optimizing resource usage, especially when dealing with large lists of links, though it means routes will only be fetched on click.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/04-linking-and-navigating.mdx#_snippet_5

LANGUAGE: tsx
CODE:
```
<Link prefetch={false} href="/blog">
  Blog
</Link>
```

----------------------------------------

TITLE: Implement Hover-Based Prefetching for Next.js Links
DESCRIPTION: This component demonstrates how to implement prefetching only on hover for Next.js links. It uses React's `useState` and the `onMouseEnter` event to dynamically enable prefetching, reducing resource usage compared to full prefetching while still improving perceived load times for likely visited links.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/04-linking-and-navigating.mdx#_snippet_6

LANGUAGE: tsx
CODE:
```
'use client'

import Link from 'next/link'
import { useState } from 'react'

function HoverPrefetchLink({
  href,
  children,
}: {
  href: string
  children: React.ReactNode
}) {
  const [active, setActive] = useState(false)

  return (
    <Link
      href={href}
      prefetch={active ? null : false}
      onMouseEnter={() => setActive(true)}
    >
      {children}
    </Link>
  )
}
```

LANGUAGE: jsx
CODE:
```
'use client'

import Link from 'next/link'
import { useState } from 'react'

function HoverPrefetchLink({ href, children }) {
  const [active, setActive] = useState(false)

  return (
    <Link
      href={href}
      prefetch={active ? null : false}
      onMouseEnter={() => setActive(true)}
    >
      {children}
    </Link>
  )
}
```

----------------------------------------

TITLE: Record Node.js heap profile for Next.js build analysis
DESCRIPTION: Pass the `--heap-prof` flag to Node.js when starting a Next.js build to generate a `.heapprofile` file. This file can be loaded into Chrome DevTools to identify memory leaks and analyze heap usage.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/memory-usage.mdx#_snippet_2

LANGUAGE: Shell
CODE:
```
node --heap-prof node_modules/next/dist/bin/next build
```

----------------------------------------

TITLE: Using Next.js Image Component for Optimized Display
DESCRIPTION: Demonstrates how to embed images using the `next/image` component, specifying source, alt text, dimensions, and optimization properties like `priority` and `className` for responsive and performant image loading.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/blog/pages/photos.mdx#_snippet_1

LANGUAGE: JSX
CODE:
```
<Image
  src="/images/photo2.jpg"
  alt="Photo"
  width={1125}
  height={750}
  priority
  className="next-image"
/>
```

LANGUAGE: JSX
CODE:
```
<Image
  src="/images/photo.jpg"
  alt="Photo"
  width={1125}
  height={750}
  priority
  className="next-image"
/>
```

----------------------------------------

TITLE: Next.js useRouter API Methods Reference
DESCRIPTION: Comprehensive API documentation for the methods available on the `router` object returned by the `useRouter` hook. It details functions like `push` for navigation with history, `replace` for navigation without history, `refresh` for re-fetching data, `prefetch` for optimizing transitions, and `back`/`forward` for history navigation.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/04-functions/use-router.mdx#_snippet_1

LANGUAGE: APIDOC
CODE:
```
router.push(href: string, { scroll: boolean }):
  description: Perform a client-side navigation to the provided route. Adds a new entry into the browser’s history stack.
  parameters:
    href: string - The destination route.
    scroll: boolean - (Optional) Controls whether the page scrolls to the top after navigation.
router.replace(href: string, { scroll: boolean }):
  description: Perform a client-side navigation to the provided route without adding a new entry into the browser’s history stack.
  parameters:
    href: string - The destination route.
    scroll: boolean - (Optional) Controls whether the page scrolls to the top after navigation.
router.refresh():
  description: Refresh the current route. Making a new request to the server, re-fetching data requests, and re-rendering Server Components. The client will merge the updated React Server Component payload without losing unaffected client-side React (e.g. useState) or browser state (e.g. scroll position).
router.prefetch(href: string):
  description: Prefetch the provided route for faster client-side transitions.
  parameters:
    href: string - The route to prefetch.
router.back():
  description: Navigate back to the previous route in the browser’s history stack.
router.forward():
  description: Navigate forwards to the next page in the browser’s history stack.
```

----------------------------------------

TITLE: Integrate Google Variable Font in Next.js App Router
DESCRIPTION: Demonstrates how to import and use a Google variable font, such as Inter, in `app/layout.tsx` or `app/layout.js` for the Next.js App Router. The font is loaded without specifying weight, and its `className` is applied to the `<html>` tag for global application.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/02-components/font.mdx#_snippet_14

LANGUAGE: tsx
CODE:
```
import { Inter } from 'next/font/google'

// If loading a variable font, you don't need to specify the font weight
const inter = Inter({
  subsets: ['latin'],
  display: 'swap',
})

export default function RootLayout({
  children,
}: {
  children: React.ReactNode
}) {
  return (
    <html lang="en" className={inter.className}>
      <body>{children}</body>
    </html>
  )
}
```

LANGUAGE: jsx
CODE:
```
import { Inter } from 'next/font/google'

// If loading a variable font, you don't need to specify the font weight
const inter = Inter({
  subsets: ['latin'],
  display: 'swap',
})

export default function RootLayout({ children }) {
  return (
    <html lang="en" className={inter.className}>
      <body>{children}</body>
    </html>
  )
}
```

----------------------------------------

TITLE: Integrate Google Fonts with Tailwind CSS in Next.js App Router Layout
DESCRIPTION: Explains how to use `next/font/google` to define CSS variables for Google Fonts (Inter, Roboto Mono) and apply them to the HTML document in a Next.js App Router `layout.tsx` or `layout.js` for seamless Tailwind CSS integration.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/02-components/font.mdx#_snippet_30

LANGUAGE: tsx
CODE:
```
import { Inter, Roboto_Mono } from 'next/font/google'

const inter = Inter({
  subsets: ['latin'],
  display: 'swap',
  variable: '--font-inter',
})

const roboto_mono = Roboto_Mono({
  subsets: ['latin'],
  display: 'swap',
  variable: '--font-roboto-mono',
})

export default function RootLayout({
  children,
}: {
  children: React.ReactNode
}) {
  return (
    <html
      lang="en"
      className={`${inter.variable} ${roboto_mono.variable} antialiased`}
    >
      <body>{children}</body>
    </html>
  )
}
```

LANGUAGE: jsx
CODE:
```
import { Inter, Roboto_Mono } from 'next/font/google'

const inter = Inter({
  subsets: ['latin'],
  display: 'swap',
  variable: '--font-inter',
})

const roboto_mono = Roboto_Mono({
  subsets: ['latin'],
  display: 'swap',
  variable: '--font-roboto-mono',
})

export default function RootLayout({ children }) {
  return (
    <html
      lang="en"
      className={`${inter.variable} ${roboto_mono.variable} antialiased`}
    >
      <body>{children}</body>
    </html>
  )
}
```

----------------------------------------

TITLE: Run Next.js Development Server
DESCRIPTION: Commands to start the Next.js development server using different package managers (npm, yarn, pnpm, bun). The server typically runs on http://localhost:3000.
SOURCE: https://github.com/vercel/next.js/blob/canary/packages/create-next-app/templates/app-tw-empty/js/README-template.md#_snippet_0

LANGUAGE: bash
CODE:
```
npm run dev
# or
yarn dev
# or
pnpm dev
# or
bun dev
```

----------------------------------------

TITLE: Run Next.js Development Server with npm
DESCRIPTION: These commands install the project dependencies using `npm install` and then start the Next.js development server with `npm run dev`. The application will typically be accessible at `http://localhost:3000`.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-cosmic/README.md#_snippet_5

LANGUAGE: bash
CODE:
```
npm install
npm run dev
```

----------------------------------------

TITLE: Nest Server Component within Client Component (Page)
DESCRIPTION: This example demonstrates how a parent Server Component (`Page`) can import and utilize the `Modal` Client Component. It passes another Server Component (`Cart`) as a child to the `Modal`, showcasing how server-rendered content can be seamlessly integrated into client-side UI structures.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/05-server-and-client-components.mdx#_snippet_6

LANGUAGE: tsx
CODE:
```
import Modal from './ui/modal'
import Cart from './ui/cart'

export default function Page() {
  return (
    <Modal>
      <Cart />
    </Modal>
  )
}
```

LANGUAGE: jsx
CODE:
```
import Modal from './ui/modal'
import Cart from './ui/cart'

export default function Page() {
  return (
    <Modal>
      <Cart />
    </Modal>
  )
}
```

----------------------------------------

TITLE: Applying Tailwind CSS Classes in Next.js (JavaScript)
DESCRIPTION: This snippet illustrates the direct application of Tailwind CSS utility classes within a Next.js functional component written in JavaScript. It styles an <h1> element with text-3xl for font size, font-bold for weight, and underline for text decoration, demonstrating basic styling integration.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/tailwind-css.mdx#_snippet_11

LANGUAGE: JavaScript
CODE:
```
export default function Page() {
  return <h1 className="text-3xl font-bold underline">Hello, Next.js!</h1>
}
```

----------------------------------------

TITLE: Revalidating A Specific URL with revalidatePath
DESCRIPTION: This example demonstrates how to revalidate a single, specific URL on the next page visit using `revalidatePath`.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/04-functions/revalidatePath.mdx#_snippet_1

LANGUAGE: ts
CODE:
```
import { revalidatePath } from 'next/cache'
revalidatePath('/blog/post-1')
```

----------------------------------------

TITLE: Control Dynamic Segment Generation with dynamicParams in Next.js App Directory
DESCRIPTION: Demonstrates how the `config.dynamicParams` property in the Next.js `app` directory replaces the `fallback` option from `getStaticPaths`. It controls how dynamic segments not included in `generateStaticParams` are handled, either by generating them on demand (`true`) or returning a 404 (`false`).
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/migrating/app-router-migration.mdx#_snippet_26

LANGUAGE: JSX
CODE:
```
// `app` directory

export const dynamicParams = true;

export async function generateStaticParams() {
  return [...]
}

async function getPost(params) {
  ...
}

export default async function Post({ params }) {
  const post = await getPost(params);

  return ...
}
```

----------------------------------------

TITLE: Integrate Active Nav Links into Next.js Layout
DESCRIPTION: This snippet demonstrates how to import and render the `NavLinks` client component within a Next.js root layout. It shows the basic structure of a layout file, including the `<html>` and `<body>` tags, and how to place the navigation component alongside the main content. This integration allows the active navigation logic to function within the application's overall structure.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/03-file-conventions/layout.mdx#_snippet_16

LANGUAGE: tsx
CODE:
```
import { NavLinks } from '@/app/ui/nav-links'

export default function Layout({ children }: { children: React.ReactNode }) {
  return (
    <html lang="en">
      <body>
        <NavLinks />
        <main>{children}</main>
      </body>
    </html>
  )
}
```

LANGUAGE: jsx
CODE:
```
import { NavLinks } from '@/app/ui/nav-links'

export default function Layout({ children }) {
  return (
    <html lang="en">
      <body>
        <NavLinks />
        <main>{children}</main>
      </body>
    </html>
  )
}
```

----------------------------------------

TITLE: Link to Next.js Dynamic Segments with Template Literals
DESCRIPTION: This example demonstrates how to create links to dynamic segments in Next.js applications using the `<Link>` component. By leveraging JavaScript template literals and interpolation, developers can dynamically generate `href` values, which is particularly useful for creating lists of links to content like blog posts, where each item has a unique slug or ID.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/02-components/link.mdx#_snippet_15

LANGUAGE: tsx
CODE:
```
import Link from 'next/link'

interface Post {
  id: number
  title: string
  slug: string
}

export default function PostList({ posts }: { posts: Post[] }) {
  return (
    <ul>
      {posts.map((post) => (
        <li key={post.id}>
          <Link href={`/blog/${post.slug}`}>{post.title}</Link>
        </li>
      ))}
    </ul>
  )
}
```

LANGUAGE: jsx
CODE:
```
import Link from 'next/link'

export default function PostList({ posts }) {
  return (
    <ul>
      {posts.map((post) => (
        <li key={post.id}>
          <Link href={`/blog/${post.slug}`}>{post.title}</Link>
        </li>
      ))}
    </ul>
  )
}
```

----------------------------------------

TITLE: Integrate Active Blog Nav Links into Next.js Server Layout
DESCRIPTION: This server component demonstrates how to import and utilize the `BlogNavLink` client component within a parent layout. It asynchronously fetches a list of featured posts and renders a `BlogNavLink` for each, passing the post's slug and title. The component then displays the main page content, showcasing how to combine server and client components for dynamic navigation.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/04-functions/use-selected-layout-segment.mdx#_snippet_3

LANGUAGE: tsx
CODE:
```
// Import the Client Component into a parent Layout (Server Component)
import { BlogNavLink } from './blog-nav-link'
import getFeaturedPosts from './get-featured-posts'

export default async function Layout({
  children,
}: {
  children: React.ReactNode
}) {
  const featuredPosts = await getFeaturedPosts()
  return (
    <div>
      {featuredPosts.map((post) => (
        <div key={post.id}>
          <BlogNavLink slug={post.slug}>{post.title}</BlogNavLink>
        </div>
      ))}
      <div>{children}</div>
    </div>
  )
}
```

LANGUAGE: jsx
CODE:
```
// Import the Client Component into a parent Layout (Server Component)
import { BlogNavLink } from './blog-nav-link'
import getFeaturedPosts from './get-featured-posts'

export default async function Layout({ children }) {
  const featuredPosts = await getFeaturedPosts()
  return (
    <div>
      {featuredPosts.map((post) => (
        <div key={post.id}>
          <BlogNavLink slug={post.slug}>{post.title}</BlogNavLink>
        </div>
      ))}
      <div>{children}</div>
    </div>
  )
}
```

----------------------------------------

TITLE: Integrating Google Tag Manager in App Router Root Layout
DESCRIPTION: This snippet demonstrates how to include the `GoogleTagManager` component in the root layout of a Next.js App Router application. It ensures Google Tag Manager is loaded for all routes by passing the GTM container ID via the `gtmId` prop. Examples are provided for both TypeScript and JavaScript.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/third-party-libraries.mdx#_snippet_1

LANGUAGE: tsx
CODE:
```
import { GoogleTagManager } from '@next/third-parties/google'

export default function RootLayout({
  children,
}: {
  children: React.ReactNode
}) {
  return (
    <html lang="en">
      <GoogleTagManager gtmId="GTM-XYZ" />
      <body>{children}</body>
    </html>
  )
}
```

LANGUAGE: jsx
CODE:
```
import { GoogleTagManager } from '@next/third-parties/google'

export default function RootLayout({ children }) {
  return (
    <html lang="en">
      <GoogleTagManager gtmId="GTM-XYZ" />
      <body>{children}</body>
    </html>
  )
}
```