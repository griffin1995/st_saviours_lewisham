TITLE: Managing JSON Web Key Sets (JWKSet) in PHP
DESCRIPTION: Demonstrates how to work with JWKSet objects including retrieving keys, checking existence, counting, adding/removing keys, selecting keys based on criteria, iteration, and JSON serialization. Note that JWKSet objects are immutable, so methods like 'with' and 'without' return new instances rather than modifying the original.
SOURCE: https://github.com/web-token/jwt-doc/blob/v1.x/components/key-jwk-and-key-set-jwkset/key-set-management.md#2025-04-20_snippet_0

LANGUAGE: php
CODE:
```
<?php
// Returns all keys
$jwkset->all();

// Check if the key set has the key with the key ID 'KEY ID'.
$jwkset->has('KEY ID');

// Retreive the key with the key ID 'KEY ID'.
$jwkset->get('KEY ID');

// Counts the keys in the key set.
$jwkset->count(); // The method count($jwkset) has the same behaviour.

// Adds a key to the key set.
// /!\ As the JWKSet object is immutable, this method will create a new key set. The previous key set is unchanged.
$new_jwkset = $jwkset->with($jwk);

// Removes a key to the key set.
// /!\ As the JWKSet object is immutable, this method will create a new key set. The previous key set is unchanged.
$new_jwkset = $jwkset->without('KEY ID');

// Selects a key according to the requirements.
// The first argument is the key usage ("sig" of "enc")
// The second argument is the algorithm to be used (optional)
// The third argument is an associative array this constraints (optional)
$key = $jwkset->selectKey('sig', $algorithm, ['kid' => 'KEY ID']);

// You can iterate on a key set
foreach($jwkset as $kid => $jwk) {
    // Action with the key done here
}

// The JWKSet object can be serialized into JSON
json_encode($jwkset);
```

----------------------------------------

TITLE: Implementing ChaCha20-Poly1305 Key Encryption for JWT in PHP
DESCRIPTION: Custom implementation of the ChaCha20 + Poly 1305 (IETF variant) encryption algorithm as a Key Encryption Algorithm for JWT. The class implements key encryption and decryption methods, key validation, and header parameter management for JWT operations.
SOURCE: https://github.com/web-token/jwt-doc/blob/v1.x/advanced-topics/custom-algorithm.md#2025-04-20_snippet_0

LANGUAGE: php
CODE:
```
<?php

declare(strict_types=1);

namespace Acme\Algorithm;

use Base64Url\Base64Url;
use Jose\Component\Core\JWK;
use const Sodium\CRYPTO_AEAD_CHACHA20POLY1305_IETF_NPUBBYTES;

/**
 * This algorithm is a custom algorithm that use the ChaCha20 + Poly 1305 with a 192 bits nonce (IETF variant).
 */
final class ChaCha20Poly1305IETF implements KeyEncryption //The algorithm acts as a Key Encryption algorithm
{
    /**
     * {@inheritdoc}
     */
    public function name(): string
    {
        return 'ChaCha20+Poly1305+IETF'; // The name of our algorithm. This name will be used in our JWE headers
    }

    /**
     * {@inheritdoc}
     */
    public function allowedKeyTypes(): array
    {
        return ['oct']; // Key types for this algorithm are octet keys
    }

    /**
     * {@inheritdoc}
     */
    public function encryptKey(JWK $key, string $cek, array $completeHeader, array &$additionalHeader): string
    {
        $this->checkKey($key); // We check the key
        $kek = Base64Url::decode($key->get('k')); // We retrieve the secret
        $nonce = random_bytes(CRYPTO_AEAD_CHACHA20POLY1305_IETF_NPUBBYTES); // We create a nonce
        $additionalHeader['nonce'] = Base64Url::encode($nonce); // We add the nonce to the header

        return sodium_crypto_aead_chacha20poly1305_ietf_encrypt($cek, '', $nonce, $kek); // We return the encrypted CEK
    }

    /**
     * {@inheritdoc}
     */
    public function decryptKey(JWK $key, string $encrypted_cek, array $header): string
    {
        $this->checkKey($key); // We check the key
        $this->checkAdditionalParameters($header); // We verify the nonce is in the headers
        $nonce = Base64Url::decode($header['nonce']); // We retrieve the nonce
        $kek = Base64Url::decode($key->get('k')); // an the secret

        $decrypted = sodium_crypto_aead_chacha20poly1305_ietf_decrypt($encrypted_cek, '', $nonce, $kek); // We try to decrypt the CEK
        if (false === $decrypted) { // If it fails we throw an exception
            throw new \RuntimeException('Unable to decrypt.');
        }

        return $decrypted; // Otherwise we return the decrypted CEK
    }

    /**
     * @param JWK $key
     */
    protected function checkKey(JWK $key)
    {
        if (!in_array($key->get('kty'), $this->allowedKeyTypes())) {
            throw new \InvalidArgumentException('Wrong key type.');
        }
        if (!$key->has('k')) {
            throw new \InvalidArgumentException('The key parameter "k" is missing.');
        }
    }

    /**
     * @param array $header
     */
    protected function checkAdditionalParameters(array $header)
    {
        foreach (['nonce'] as $k) {
            if (!array_key_exists($k, $header)) {
                throw new \InvalidArgumentException(sprintf('Parameter "%s" is missing.', $k));
            }
        }
    }

    /**
     * {@inheritdoc}
     */
    public function getKeyManagementMode(): string
    {
        return self::MODE_ENCRYPT; //Key Management Mode is 'enc'.
    }
}
```

----------------------------------------

TITLE: Deserializing and Verifying JWS Token in PHP
DESCRIPTION: Demonstrates how to deserialize a JWS token using the Compact Serializer and verify its signature using a provided key. This snippet continues from the JWS creation section and uses a predefined token.
SOURCE: https://github.com/web-token/jwt-doc/blob/v1.x/components/signed-tokens-jws/jws-loading.md#2025-04-20_snippet_1

LANGUAGE: php
CODE:
```
<?php

use Jose\Component\Core\Converter\StandardConverter;
use Jose\Component\Core\JWK;
use Jose\Component\Signature\Serializer\JWSSerializerManager;
use Jose\Component\Signature\Serializer\CompactSerializer;

// Our key.
$jwk = JWK::create([
    'kty' => 'oct',
    'k' => 'dzI6nbW4OcNF-AtfxGAmuyz7IpHRudBI0WgGjZWgaRJt6prBn3DARXgUR8NVwKhfL43QBIU2Un3AvCGCHRgY4TbEqhOi8-i98xxmCggNjde4oaW6wkJ2NgM3Ss9SOX9zS3lcVzdCMdum-RwVJ301kbin4UtGztuzJBeg5oVN00MGxjC2xWwyI0tgXVs-zJs5WlafCuGfX1HrVkIf5bvpE0MQCSjdJpSeVao6-RSTYDajZf7T88a2eVjeW31mMAg-jzAWfUrii61T_bYPJFOXW8kkRWoa1InLRdG6bKB9wQs9-VdXZP60Q4Yuj_WZ-lO7qV9AEFrUkkjpaDgZT86w2g',
]);

// The JSON Converter.
$jsonConverter = new StandardConverter();

// The serializer manager. We only use the JWS Compact Serialization Mode.
$serializerManager = JWSSerializerManager::create([
    new CompactSerializer($jsonConverter),
]);

// The input we want to check
$token = 'eyJhbGciOiJIUzI1NiJ9.eyJpYXQiOjE1MDc4OTY5OTIsIm5iZiI6MTUwNzg5Njk5MiwiZXhwIjoxNTA3OTAwNTkyLCJpc3MiOiJNeSBzZXJ2aWNlIiwiYXVkIjoiWW91ciBhcHBsaWNhdGlvbiJ9.eycp9PTdgO4WA-68-AMoHPwsKDr68NhjIQKz4lUkiI0';

// We try to load the token.
$jws = $serializerManager->unserialize($token);

// We verify the signature. This method does NOT check the header.
// The arguments are:
// - The JWS object,
// - The key,
// - The index of the signature to check. See 
$isVerified = $jwsVerifier->verifyWithKey($jws, $jwk, 0);
```

----------------------------------------

TITLE: Creating a Claim Checker Manager for JWT Validation
DESCRIPTION: Initializes a ClaimCheckerManager with standard checkers for audience, issued at, not before, and expiration claims.
SOURCE: https://github.com/web-token/jwt-doc/blob/v1.x/components/claim-checker.md#2025-04-20_snippet_1

LANGUAGE: php
CODE:
```
<?php

use Jose\Component\Checker\ClaimCheckerManager;
use Jose\Component\Checker;

$claimCheckerManager = ClaimCheckerManager::create(
    [
        new Checker\IssuedAtChecker(),
        new Checker\NotBeforeChecker(),
        new Checker\ExpirationTimeChecker(),
        new Checker\AudienceChecker('Audience'),
    ]
);
```

----------------------------------------

TITLE: Decrypting JWE Tokens - Current Approach
DESCRIPTION: Modern approach for decrypting JWE tokens using the component-based architecture. It demonstrates initialization of necessary components and serializer managers to process and decrypt a token.
SOURCE: https://github.com/web-token/jwt-doc/blob/v1.x/migration/from-spomky-labs-jose/encrypted-tokens-jwe.md#2025-04-20_snippet_3

LANGUAGE: php
CODE:
```
<?php

use Jose\Component\Core\AlgorithmManager;
use Jose\Component\Core\Converter\StandardConverter;
use Jose\Component\Encryption\Algorithm\KeyEncryption\RSAOAEP256;
use Jose\Component\Encryption\Algorithm\ContentEncryption\A256CBCHS512;
use Jose\Component\Encryption\Compression\CompressionMethodManager;
use Jose\Component\Encryption\Compression\Deflate;
use Jose\Component\Encryption\JWEBuilder;
use Jose\Component\Encryption\Serializer\CompactSerializer;
use Jose\Component\Encryption\Serializer\JWESerializerManager;

$keyEncryptionAlgorithmManager = AlgorithmManager::create([
    new RSAOAEP256(),
]);

$contentEncryptionAlgorithmManager = AlgorithmManager::create([
    new A256CBCHS512(),
]);

$compressionMethodManager = CompressionMethodManager::create([
    new Deflate(),
]);

$jsonConverter = new StandardConverter();

$jweBuilder = new JWEBuilder(
    $jsonConverter,
    $keyEncryptionAlgorithmManager,
    $contentEncryptionAlgorithmManager,
    $compressionMethodManager
);

$serializerManager = JWESerializerManager::create([
    new CompactSerializer($jsonConverter),
]);

$token = 'eyJhbGciOiJBMjU2S1ciLCJlbmMiOiJBMjU2Q0JDLUhTNTEyIiwiemlwIjoiREVGIn0.9RLpf3Gauf05QPNCMzPcH4XNBLmH0s3e-YWwOe57MTG844gnc-g2ywfXt_R0Q9qsR6WhkmQEhdLk2CBvfqr4ob4jFlvJK0yW.CCvfoTKO9tQlzCvbAuFAJg.PxrDlsbSRcxC5SuEJ84i9E9_R3tCyDQsEPTIllSCVxVcHiPOC2EdDlvUwYvznirYP6KMTdKMgLqxB4BwI3CWtys0fceSNxrEIu_uv1WhzJg.4DnyeLEAfB4I8Eq0UobnP8ymlX1UIfSSADaJCXr3RlU';

$jwe = $serializerManager->unserialize($token);

$jwe = $jweDecrypter->decryptUsingKey($jwe, $jwk);
```

----------------------------------------

TITLE: Verifying Signed Tokens (JWS) with Current Approach
DESCRIPTION: Modern implementation for verifying signed JWTs using component-based architecture. It sets up header checkers, algorithm manager, JWS verifier, and claim checkers to validate the token and extract claims.
SOURCE: https://github.com/web-token/jwt-doc/blob/v1.x/migration/from-spomky-labs-jose/signed-tokens-jws.md#2025-04-20_snippet_3

LANGUAGE: php
CODE:
```
<?php
use Jose\Component\Core\AlgorithmManager;
use Jose\Component\Core\Converter\StandardConverter;
use Jose\Component\Checker\ClaimCheckerManager;
use Jose\Component\Checker\HeaderCheckerManager;
use Jose\Component\Checker\AlgorithmChecker;
use Jose\Component\Checker\ExpirationTimeChecker;
use Jose\Component\Signature\JWSVerifier;
use Jose\Component\Signature\Algorithm\RS256;
use Jose\Component\Signature\Serializer\CompactSerializer;
use Jose\Component\Signature\JWSTokenSupport;

$jsonConverter = new StandardConverter();
$serializer = new CompactSerializer($jsonConverter);

$jws = $serializer->unserialize($input);

$headerChecker = HeaderCheckerManager::create(
    [new AlgorithmChecker(['RS256'])], // A list of header checkers
    [new JWSTokenSupport()]            // A list of token support services (we only use the JWS token type here)
);

$algorithmManager = AlgorithmManager::create([
    new RS256(),
]);
$jwsVerifier = new JWSVerifier($algorithmManager);

$claimChecker = ClaimCheckerManager::create(
    [new ExpirationTimeChecker()] // A list of claim checkers
);

// We check all signatures
$isVerified = false;
for ($i = 0; $i < $jws->count(); $i++) {
    try {
        $headerChecker->check($jws, 0); // We check the header of the first (index=0) signature.        
        if ($jwsVerifier->verifyWithKey($jws, $key, 0)) { // We verify the signature
            $isVerified = true;
            break;
        }
    } catch (\Exception $e) {
        continue;
    }
}

if (!$isVerified) {
    //Unable to check the token. The header or the signature verification failed.
} else {
    // We check the claims.
    // If everything is ok, claims can be used.
    $claims = $jsonConverter->decode($jws->getPayload());
    $claimChecker->check($claims); // We check the claims.
}
```

----------------------------------------

TITLE: Building Nested JWT Tokens with Multiple Parameters
DESCRIPTION: Demonstrates how to create a nested token with the NestedTokenBuilder. This comprehensive example shows configuration for signatures, headers, encryption, and serialization modes with support for multiple recipients.
SOURCE: https://github.com/web-token/jwt-doc/blob/v1.x/advanced-topics/nested-tokens.md#2025-04-20_snippet_3

LANGUAGE: php
CODE:
```
$token = $builder->create(
    $payload,                                     // The payload to protect
    [[                                            // A list of signatures. 'key' is mandatory and at least one of 'protected_header'/'header' has to be set.
        'key'              => $signature_key,     // The key used to sign. Mandatory.
        'protected_header' => ['alg' => 'PS256'], // The protected header. Optional.
        'header'           => ['foo' => 'bar'],   // The unprotected header. Optional.
    ]],
    'jws_json_flattened',                         // The serialization mode for the JWS
    ['alg' => 'RSA-OAEP', 'enc' => 'A128GCM'],    // The shared protected header. Optional.
    ['foo' => 'bar'],                             // The shared unprotected header. Optional.
    [[                                            // A list of recipients. 'key' is mandatory.
        'key'    => $encryption_key,              // The recipient key.
        'header' => ['bar' => 'foo'],             // The recipient unprotected header.
    ]],
    'jwe_json_flattened'                          // The serialization mode for the JWE.
    '1, 2, 3, 4'                                  // Additional Authenticated Data (AAD). Optional.
);
```

----------------------------------------

TITLE: Basic JWK Operations in PHP
DESCRIPTION: Demonstrates core JWK object operations including parameter checking, retrieval, thumbprint calculation, and public key conversion.
SOURCE: https://github.com/web-token/jwt-doc/blob/v1.x/components/key-jwk-and-key-set-jwkset/key-management.md#2025-04-20_snippet_0

LANGUAGE: php
CODE:
```
<?php
// Check if the key has a parameter.
$jwk->has('kty');

// Retrieve the key parameter.
$jwk->get('kty');

// Retrieve all key parameters.
$jwk->all();

// Calculate the thumbprint of the key. Acceptable hash algorithms are those returned by the PHP function "hash_algos".
$jwk->thumbprint('sha256');

// If the key is a private key (RSA, EC, OKP), it can be converted into public:
$public_key = $jwk->toPublic();

// The JWK object can be serialized into JSON
json_encode($jwk);
```

----------------------------------------

TITLE: Initializing JWEDecrypter for Token Decryption in PHP
DESCRIPTION: This snippet demonstrates how to set up the necessary components for JWE decryption, including algorithm managers for key and content encryption, and a compression method manager.
SOURCE: https://github.com/web-token/jwt-doc/blob/v1.x/components/encrypted-tokens-jwe/jwe-loading.md#2025-04-20_snippet_0

LANGUAGE: PHP
CODE:
```
<?php

use Jose\Component\Core\AlgorithmManager;
use Jose\Component\Encryption\Algorithm\KeyEncryption\A256KW;
use Jose\Component\Encryption\Algorithm\ContentEncryption\A256CBCHS512;
use Jose\Component\Encryption\Compression\CompressionMethodManager;
use Jose\Component\Encryption\Compression\Deflate;
use Jose\Component\Encryption\JWEDecrypter;

// The key encryption algorithm manager with the A256KW algorithm.
$keyEncryptionAlgorithmManager = AlgorithmManager::create([
    new A256KW(),
]);

// The content encryption algorithm manager with the A256CBC-HS256 algorithm.
$contentEncryptionAlgorithmManager = AlgorithmManager::create([
    new A256CBCHS512(),
]);

// The compression method manager with the DEF (Deflate) method.
$compressionMethodManager = CompressionMethodManager::create([
    new Deflate(),
]);

// We instantiate our JWE Decrypter.
$jweDecrypter = new JWEDecrypter(
    $keyEncryptionAlgorithmManager,
    $contentEncryptionAlgorithmManager,
    $compressionMethodManager
);
```

----------------------------------------

TITLE: Validating JWT Claims with Claim Checker Manager
DESCRIPTION: Converts JWT payload to a claims array and validates it using the ClaimCheckerManager.
SOURCE: https://github.com/web-token/jwt-doc/blob/v1.x/components/claim-checker.md#2025-04-20_snippet_2

LANGUAGE: php
CODE:
```
use Jose\Component\Core\Converter\StandardConverter;

$jsonConverter = new StandardConverter();

$claims = $jsonConverter->decode($jwt->getPayload());
$claimCheckerManager->check($claims);
```

----------------------------------------

TITLE: Initializing Algorithm Manager with Multiple Encryption Algorithms in PHP
DESCRIPTION: Creates an Algorithm Manager instance with A128KW, PBES2HS256A128KW, and A128CBCHS256 encryption algorithms. This example demonstrates how to properly instantiate and configure the Algorithm Manager with various encryption algorithms.
SOURCE: https://github.com/web-token/jwt-doc/blob/v1.x/components/encrypted-tokens-jwe/encryption-algorithms.md#2025-04-20_snippet_0

LANGUAGE: php
CODE:
```
<?php

use Jose\Component\Core\AlgorithmManager;
use Jose\Component\Encryption\Algorithm\KeyEncryption\A128KW;
use Jose\Component\Encryption\Algorithm\KeyEncryption\PBES2HS256A128KW;
use Jose\Component\Encryption\Algorithm\ContentEncryption\A128CBCHS256;

$algorithmManager = AlgorithmManager::create([
    new A128KW(),
    new PBES2HS256A128KW(),
    new A128CBCHS256(),
]);
```

----------------------------------------

TITLE: Using JWELoader for Simplified JWE Token Handling in PHP
DESCRIPTION: This snippet demonstrates the usage of the JWELoader object, which combines serialization, header checking, and decryption operations for JWE tokens into a single method call.
SOURCE: https://github.com/web-token/jwt-doc/blob/v1.x/components/encrypted-tokens-jwe/jwe-loading.md#2025-04-20_snippet_2

LANGUAGE: PHP
CODE:
```
<?php

use Jose\Component\Encryption\JWELoader;

$jweLoader = new JWELoader(
    $serializerManager,
    $jweDecrypter,
    $headerCheckerManager
);

$jwe = $jweLoader->loadAndDecryptWithKey($token, $key, $recipient);
```

----------------------------------------

TITLE: Setting Up an Algorithm Manager Factory for Multiple Use Cases
DESCRIPTION: Demonstrates how to create an Algorithm Manager Factory that can handle multiple algorithms for different purposes. This allows registering algorithms with different configurations under unique aliases.
SOURCE: https://github.com/web-token/jwt-doc/blob/v1.x/components/algorithm-management-jwa.md#2025-04-20_snippet_2

LANGUAGE: php
CODE:
```
<?php

use Jose\Component\Core\AlgorithmManagerFactory;
use Jose\Component\Signature\Algorithm\PS256;
use Jose\Component\Encryption\Algorithm\KeyEncryption\PBES2HS512A256KW;
use Jose\Component\Encryption\Algorithm\ContentEncryption\A128CBCHS256;

$algorithm_manager_factory = new AlgorithmManagerFactory();
$algorithm_manager_factory
    ->add('PS256', new PS256())
    ->add('A128CBC-HS256', new A128CBCHS256())
    ->add('PBES2-HS512+A256KW', new PBES2HS512A256KW())
    ->add('PBES2-HS512+A256KW with custom configuration', new PBES2HS512A256KW(128, 8192))
;
```

----------------------------------------

TITLE: Deserializing and Decrypting JWE Token in PHP
DESCRIPTION: This code snippet shows how to deserialize a JWE token using a serializer manager and decrypt it using the JWEDecrypter. It includes setting up the necessary components such as the encryption key and serializer.
SOURCE: https://github.com/web-token/jwt-doc/blob/v1.x/components/encrypted-tokens-jwe/jwe-loading.md#2025-04-20_snippet_1

LANGUAGE: PHP
CODE:
```
<?php

use Jose\Component\Core\Converter\StandardConverter;
use Jose\Component\Core\JWK;
use Jose\Component\Encryption\Serializer\JWESerializerManager;
use Jose\Component\Encryption\Serializer\CompactSerializer;

// Our key.
$jwk = JWK::create([
    'kty' => 'oct',
    'k' => 'dzI6nbW4OcNF-AtfxGAmuyz7IpHRudBI0WgGjZWgaRJt6prBn3DARXgUR8NVwKhfL43QBIU2Un3AvCGCHRgY4TbEqhOi8-i98xxmCggNjde4oaW6wkJ2NgM3Ss9SOX9zS3lcVzdCMdum-RwVJ301kbin4UtGztuzJBeg5oVN00MGxjC2xWwyI0tgXVs-zJs5WlafCuGfX1HrVkIf5bvpE0MQCSjdJpSeVao6-RSTYDajZf7T88a2eVjeW31mMAg-jzAWfUrii61T_bYPJFOXW8kkRWoa1InLRdG6bKB9wQs9-VdXZP60Q4Yuj_WZ-lO7qV9AEFrUkkjpaDgZT86w2g',
]);

// The JSON Converter.
$jsonConverter = new StandardConverter();

// The serializer manager. We only use the JWE Compact Serialization Mode.
$serializerManager = JWESerializerManager::create([
    new CompactSerializer($jsonConverter),
]);

// The input we want to decrypt
$token = 'eyJhbGciOiJBMjU2S1ciLCJlbmMiOiJBMjU2Q0JDLUhTNTEyIiwiemlwIjoiREVGIn0.9RLpf3Gauf05QPNCMzPcH4XNBLmH0s3e-YWwOe57MTG844gnc-g2ywfXt_R0Q9qsR6WhkmQEhdLk2CBvfqr4ob4jFlvJK0yW.CCvfoTKO9tQlzCvbAuFAJg.PxrDlsbSRcxC5SuEJ84i9E9_R3tCyDQsEPTIllSCVxVcHiPOC2EdDlvUwYvznirYP6KMTdKMgLqxB4BwI3CWtys0fceSNxrEIu_uv1WhzJg.4DnyeLEAfB4I8Eq0UobnP8ymlX1UIfSSADaJCXr3RlU';

// We try to load the token.
$jwe = $serializerManager->unserialize($token);

// We decrypt the token. This method does NOT check the header.
$jwe = $jweDecrypter->decryptUsingKey($jwe, $jwk);
```

----------------------------------------

TITLE: Creating JWE Tokens - Current Approach
DESCRIPTION: Modern approach for creating JWE tokens using the component-based architecture. It demonstrates initialization of algorithm managers, compression methods, and the step-by-step token building process.
SOURCE: https://github.com/web-token/jwt-doc/blob/v1.x/migration/from-spomky-labs-jose/encrypted-tokens-jwe.md#2025-04-20_snippet_1

LANGUAGE: php
CODE:
```
<?php

use Jose\Component\Core\AlgorithmManager;
use Jose\Component\Core\Converter\StandardConverter;
use Jose\Component\Encryption\Algorithm\KeyEncryption\RSAOAEP256;
use Jose\Component\Encryption\Algorithm\ContentEncryption\A256CBCHS512;
use Jose\Component\Encryption\Compression\CompressionMethodManager;
use Jose\Component\Encryption\Compression\Deflate;
use Jose\Component\Encryption\JWEBuilder;
use Jose\Component\Encryption\Serializer\CompactSerializer;

$keyEncryptionAlgorithmManager = AlgorithmManager::create([
    new RSAOAEP256(),
]);

$contentEncryptionAlgorithmManager = AlgorithmManager::create([
    new A256CBCHS512(),
]);

$compressionMethodManager = CompressionMethodManager::create([
    new Deflate(),
]);

$jsonConverter = new StandardConverter();

$jweBuilder = new JWEBuilder(
    $jsonConverter,
    $keyEncryptionAlgorithmManager,
    $contentEncryptionAlgorithmManager,
    $compressionMethodManager
);

$message = 'Today, 8:00PM, train station.';

$jwe = $jweBuilder
    ->create()
    ->withPayload($message)
    ->withSharedProtectedHeader([
        'alg' => 'RSA-OAEP-256',
        'enc' => 'A256CBC-HS512',
        'zip' => 'DEF'
    ])
    ->addRecipient($jwk)
    ->build();

$serializer = new CompactSerializer($jsonConverter);

$token = $serializer->serialize($jwe, 0);
```

----------------------------------------

TITLE: Using the Header Checker Manager in PHP
DESCRIPTION: Shows how to use the HeaderCheckerManager's check method to validate a JWT's headers. It can also check for mandatory header parameters.
SOURCE: https://github.com/web-token/jwt-doc/blob/v1.x/components/header-checker.md#2025-04-20_snippet_2

LANGUAGE: php
CODE:
```
$headerCheckerManager->check($jwt, 0);
```

LANGUAGE: php
CODE:
```
$headerCheckerManager->check($jwt, 0, ['alg', 'enc', 'crit']);
```

----------------------------------------

TITLE: Setting Up JWT Signature Algorithm Manager in PHP
DESCRIPTION: Example of creating an Algorithm Manager with various signature algorithms. This shows how to initialize the AlgorithmManager with PS256, ES512, and None algorithms, which is necessary for JWT signing operations.
SOURCE: https://github.com/web-token/jwt-doc/blob/v1.x/components/signed-tokens-jws/signature-algorithms.md#2025-04-20_snippet_0

LANGUAGE: php
CODE:
```
<?php

use Jose\Component\Core\AlgorithmManager;
use Jose\Component\Signature\Algorithm\PS256;
use Jose\Component\Signature\Algorithm\ES512;
use Jose\Component\Signature\Algorithm\None;

$algorithm_manager = AlgorithmManager::create([
    new PS256(),
    new ES512(),
    new None(),
]);
```

----------------------------------------

TITLE: Creating JWS Object with Payload in PHP
DESCRIPTION: Creates a JWS object by setting a payload with claims (iat, nbf, exp, iss, aud) and adding a signature using the HS256 algorithm. Demonstrates the builder pattern for JWS creation.
SOURCE: https://github.com/web-token/jwt-doc/blob/v1.x/components/signed-tokens-jws/jws-creation.md#2025-04-20_snippet_1

LANGUAGE: php
CODE:
```
// The payload we want to sign. The payload MUST be a string hence we use our JSON Converter.
$payload = $jsonConverter->encode([
    'iat' => time(),
    'nbf' => time(),
    'exp' => time() + 3600,
    'iss' => 'My service',
    'aud' => 'Your application',
]);

$jws = $jwsBuilder
    ->create()                               // We want to create a new JWS
    ->withPayload($payload)                  // We set the payload
    ->addSignature($jwk, ['alg' => 'HS256']) // We add a signature with a simple protected header
    ->build();                               // We build it
```

----------------------------------------

TITLE: Creating a Custom Claim Checker for JWT Validation
DESCRIPTION: Implements a custom claim checker for the 'foo' claim that validates string values against allowed options.
SOURCE: https://github.com/web-token/jwt-doc/blob/v1.x/components/claim-checker.md#2025-04-20_snippet_4

LANGUAGE: php
CODE:
```
<?php

declare(strict_types=1);

namespace Acme\Checker;

use Jose\Component\Checker\ClaimChecker;
use Jose\Component\Checker\InvalidClaimException;

/**
 * Class FooChecker.
 */
final class FooChecker implements ClaimCheckerInterface
{
    /**
     * {@inheritdoc}
     */
    public function checkClaim($value)
    {
        if (!is_string($value)) { // If the value is not a string, then we throw an exception
            throw new InvalidClaimException('The claim "foo" must be a string.', 'foo', $value);
        }
        if (!in_array($value, ['bar', 'bat'])) { // Check if the value is allowed
            throw new InvalidClaimException('The claim "foo" must be "bar" or "bat".', 'foo', $value);
        }
    }

    /**
     * {@inheritdoc}
     */
    public function supportedClaim(): string
    {
        return 'foo'; //The claim to check.
    }
}
```

----------------------------------------

TITLE: Creating a Header Checker Manager in PHP
DESCRIPTION: Demonstrates how to create a Header Checker Manager with an AlgorithmChecker for JWS tokens. It checks the 'alg' header parameter for the 'HS256' algorithm.
SOURCE: https://github.com/web-token/jwt-doc/blob/v1.x/components/header-checker.md#2025-04-20_snippet_1

LANGUAGE: php
CODE:
```
<?php

use Jose\Component\Checker\HeaderCheckerManager;
use Jose\Component\Checker\AlgorithmChecker;
use Jose\Component\Signature\JWSTokenSupport;

$headerCheckerManager = HeaderCheckerManager::create(
    [
        new AlgorithmChecker(['HS256']), // We check the header "alg" (algorithm)
    ],
    [
        new JWSTokenSupport(), // Adds JWS token type support
    ]
);
```

----------------------------------------

TITLE: Creating JWEBuilder with Specific Algorithms in PHP
DESCRIPTION: This code shows how to create a JWEBuilder using the JWEBuilderFactory. It specifies key encryption algorithms, content encryption algorithms, and compression methods.
SOURCE: https://github.com/web-token/jwt-doc/blob/v1.x/symfony-bundle/encrypted-tokens/jwe-creation.md#2025-04-20_snippet_1

LANGUAGE: php
CODE:
```
$jweBuilder = $jweBuilderFactory->create(
    ['A256GCMKW'],
    ['A256CBC-HS256'],
    ['DEF'] // Compression methods
);
```

----------------------------------------

TITLE: Using JWSLoader for Simplified Token Verification in PHP
DESCRIPTION: Demonstrates the JWSLoader object which combines serialization, verification, and header checking in one simplified interface. This reduces code duplication and streamlines the verification process.
SOURCE: https://github.com/web-token/jwt-doc/blob/v1.x/components/signed-tokens-jws/jws-loading.md#2025-04-20_snippet_2

LANGUAGE: php
CODE:
```
<?php

use Jose\Component\Signature\JWSLoader;

$jwsLoader = new JWSLoader(
    $serializerManager,
    $jwsVerifier,
    $headerCheckerManager
);

$jws = $jwsLoader->loadAndVerifyWithKey($token, $jwk, $signature, $payload);
```

----------------------------------------

TITLE: Implementing a Claim Checker Manager Factory for Multiple Contexts
DESCRIPTION: Creates a factory that registers multiple claim checkers with aliases, allowing creation of context-specific managers.
SOURCE: https://github.com/web-token/jwt-doc/blob/v1.x/components/claim-checker.md#2025-04-20_snippet_5

LANGUAGE: php
CODE:
```
<?php

use Jose\Component\Checker\ClaimCheckerManagerFactory;
use Jose\Component\Checker;

$claimCheckerManagerFactory = new ClaimCheckerManagerFactory();
$claimCheckerManagerFactory
    ->add('iat', new Checker\IssuedAtChecker())
    ->add('nbf', new Checker\NotBeforeChecker())
    ->add('exp', new Checker\ExpirationTimeChecker())
    ->add('aud1', new Checker\AudienceChecker('Audience for service #1'))
    ->add('aud2', new Checker\AudienceChecker('Audience for service #2'));

$claimCheckerManager1 = $claimCheckerManagerFactory->create(['iat', 'exp', 'aud2']);
$claimCheckerManager2 = $claimCheckerManagerFactory->create(['aud1', 'exp']);
```

----------------------------------------

TITLE: Creating Algorithm Managers from Factory for Specific Use Cases
DESCRIPTION: Shows how to create algorithm managers for specific use cases from a factory by specifying which algorithms to include by their aliases. This allows creating tailored algorithm sets for different security requirements.
SOURCE: https://github.com/web-token/jwt-doc/blob/v1.x/components/algorithm-management-jwa.md#2025-04-20_snippet_3

LANGUAGE: php
CODE:
```
<?php

$signature_algorithm_manager = $algorithm_manager_factory->create(['PS256']);
$encryption_algorithm_manager = $algorithm_manager_factory->create(['A128CBC-HS256', 'PBES2-HS512+A256KW']);
$encryption_algorithm_manager_for_paranoid = $algorithm_manager_factory->create(['A128CBC-HS256', 'PBES2-HS512+A256KW with custom configuration']);
```

----------------------------------------

TITLE: Initializing Claim Checker Manager in web-token/jwt-checker
DESCRIPTION: This code snippet shows how to set up and use the ClaimCheckerManager in the web-token/jwt-checker component. It demonstrates adding claim checkers and checking claims using the new approach.
SOURCE: https://github.com/web-token/jwt-doc/blob/v1.x/migration/from-spomky-labs-jose/claim-checking.md#2025-04-20_snippet_1

LANGUAGE: php
CODE:
```
<?php

use Jose\Component\Checker\ClaimCheckerManager;
use Jose\Component\Checker\ExpirationTimeChecker;
use Jose\Component\Checker\IssuedAtChecker;
use Jose\Component\Checker\NotBeforeChecker;

$claimCheckerManager = new ClaimCheckerManager();
$claimCheckerManager->add(new ExpirationTimeChecker());
$claimCheckerManager->add(new IssuedAtChecker());
$claimCheckerManager->add(new NotBeforeChecker());

$claimCheckerManager->check($claims);
```

----------------------------------------

TITLE: Initializing NestedTokenBuilder in PHP
DESCRIPTION: Creates a new instance of NestedTokenBuilder that builds nested JWT tokens (signed then encrypted). This builder requires JWE and JWS builders and serializer managers to properly construct nested tokens.
SOURCE: https://github.com/web-token/jwt-doc/blob/v1.x/advanced-topics/nested-tokens.md#2025-04-20_snippet_2

LANGUAGE: php
CODE:
```
use Jose\Component\Encryption\NestedTokenBuilder;

$nestedTokenBuilder = new NestedTokenBuilder($jweLoader, $jweSerializerManager, $jwsLoader, $jwsSerializerManager);
```

----------------------------------------

TITLE: Creating Encrypted JWT with Unprotected Headers in PHP
DESCRIPTION: This PHP code snippet demonstrates how to create an encrypted JWT token for multiple recipients using the JWE builder. It shows the usage of shared protected headers, shared unprotected headers, and per-recipient unprotected headers. The resulting JWE object includes payload encryption and recipient-specific information.
SOURCE: https://github.com/web-token/jwt-doc/blob/v1.x/advanced-topics/encrypted-tokens-and/unprotected-headers.md#2025-04-20_snippet_0

LANGUAGE: php
CODE:
```
$jwe = $jweBuilder
    ->create()
    ->withPayload('...')
    ->withSharedProtectedHeader(['enc' => 'A256GCM', 'alg' => 'A256KW'])
    ->withSharedHeader(['author' => 'John Doe'])
    ->addRecipient($recipient_public_key_1, ['message' => 'Hello World!'])
    ->addRecipient($recipient_public_key_2, ['description' => 'Nice song for you'])
    ->build();
```

----------------------------------------

TITLE: Creating an Algorithm Manager for JWT Signatures
DESCRIPTION: Example of creating an algorithm manager that handles PS256 and ES512 signature algorithms. The algorithm manager is used to manage algorithms for signing JWT tokens.
SOURCE: https://github.com/web-token/jwt-doc/blob/v1.x/components/algorithm-management-jwa.md#2025-04-20_snippet_1

LANGUAGE: php
CODE:
```
<?php

use Jose\Component\Core\AlgorithmManager;
use Jose\Component\Signature\Algorithm\PS256;
use Jose\Component\Signature\Algorithm\ES512;

$algorithm_manager = AlgorithmManager::create([
    new PS256(),
    new ES512(),
]);
```

----------------------------------------

TITLE: Configuring PBES2 Encryption Algorithm with Custom Parameters in PHP
DESCRIPTION: Demonstrates how to initialize the PBES2HS256A128KW algorithm with custom salt size (16 bytes) and iteration count (1024). This example shows how to override the default values (64 bytes salt and 4096 iterations) for specific security requirements.
SOURCE: https://github.com/web-token/jwt-doc/blob/v1.x/components/encrypted-tokens-jwe/encryption-algorithms.md#2025-04-20_snippet_1

LANGUAGE: php
CODE:
```
<?php

use Jose\Component\Core\AlgorithmManager;
use Jose\Component\Encryption\Algorithm\KeyEncryption\PBES2HS256A128KW;

$algorithmManager = AlgorithmManager::create([
    new PBES2HS256A128KW(16, 1024),
]);
```

----------------------------------------

TITLE: Creating JWELoader with JWELoaderFactory in PHP
DESCRIPTION: This code snippet shows how to use the JWELoaderFactory to create a JWELoader object on demand, specifying the required serializers, algorithms, and header checkers.
SOURCE: https://github.com/web-token/jwt-doc/blob/v1.x/components/encrypted-tokens-jwe/jwe-loading.md#2025-04-20_snippet_3

LANGUAGE: PHP
CODE:
```
<?php

use Jose\Component\Encryption\JWELoaderFactory;

$jweLoaderFactory = new JWELoaderFactory(
    $jweSerializerManagerFactory,
    $jweDecrypterFactory,
    $headerCheckerManagerFactory
);

$jweLoader = $jweLoaderFactory->create(
    ['jwe_compact'], // List of serializer aliases
    ['A128KW'],      // List of key encryption algorithm aliases
    ['A128KW'],      // List of content encryption algorithm aliases
    ['DEF'],         // List of compression method aliases
    ['alg', 'enc']   // Optional list of header checker aliases
);
```

----------------------------------------

TITLE: Creating JWS with Detached Payload in PHP
DESCRIPTION: This snippet demonstrates how to create a JWS token with a detached payload using the JWT Framework. It configures the algorithm manager, creates a key, sets up the payload, and builds the JWS with the detached payload flag set to true.
SOURCE: https://github.com/web-token/jwt-doc/blob/v1.x/advanced-topics/signed-tokens-and/detached-payload.md#2025-04-20_snippet_0

LANGUAGE: php
CODE:
```
<?php

use Jose\Component\Core\AlgorithmManager;
use Jose\Component\Core\Converter\StandardConverter;
use Jose\Component\Core\JWK;
use Jose\Component\Signature\Algorithm\HS256;
use Jose\Component\Signature\JWSBuilder;

// The algorithm manager with the HS256 algorithm.
$algorithmManager = AlgorithmManager::create([
    new HS256(),
]);

// Our key.
$jwk = JWK::create([
    'kty' => 'oct',
    'k' => 'dzI6nbW4OcNF-AtfxGAmuyz7IpHRudBI0WgGjZWgaRJt6prBn3DARXgUR8NVwKhfL43QBIU2Un3AvCGCHRgY4TbEqhOi8-i98xxmCggNjde4oaW6wkJ2NgM3Ss9SOX9zS3lcVzdCMdum-RwVJ301kbin4UtGztuzJBeg5oVN00MGxjC2xWwyI0tgXVs-zJs5WlafCuGfX1HrVkIf5bvpE0MQCSjdJpSeVao6-RSTYDajZf7T88a2eVjeW31mMAg-jzAWfUrii61T_bYPJFOXW8kkRWoa1InLRdG6bKB9wQs9-VdXZP60Q4Yuj_WZ-lO7qV9AEFrUkkjpaDgZT86w2g',
]);

// The JSON Converter.
$jsonConverter = new StandardConverter();

// We instantiate our JWS Builder.
$jwsBuilder = new JWSBuilder(
    $jsonConverter,
    $algorithmManager
);

// The payload we want to sign
$payload = $jsonConverter->encode([
    'iat' => time(),
    'nbf' => time(),
    'exp' => time() + 3600,
    'iss' => 'My service',
    'aud' => 'Your application',
]);

$jws = $jwsBuilder
    ->create()                               // We want to create a new JWS
    ->withPayload($payload, true)            // /!\ Here is the change! We set the payload and we indicate it is detached
    ->addSignature($jwk, ['alg' => 'HS256']) // We add a signature with a simple protected header
    ->build();

```

----------------------------------------

TITLE: Loading and Verifying Nested JWT Tokens
DESCRIPTION: Demonstrates how to load a nested token using the NestedTokenLoader. This method verifies both the encryption and signature, requiring the appropriate key sets for each operation.
SOURCE: https://github.com/web-token/jwt-doc/blob/v1.x/advanced-topics/nested-tokens.md#2025-04-20_snippet_1

LANGUAGE: php
CODE:
```
$jws = $nestedTokenLoader->load($token, $encryptionKeySet, $signatureKeySet, $signature);
```

----------------------------------------

TITLE: Configuring JWE Decrypter Service in YAML
DESCRIPTION: YAML configuration for creating a JWE decrypter as a service. This configuration defines a decrypter with A256GCMKW key encryption, A256CBC-HS256 content encryption, and DEF compression method.
SOURCE: https://github.com/web-token/jwt-doc/blob/v1.x/symfony-bundle/encrypted-tokens/jwe-decryption.md#2025-04-20_snippet_2

LANGUAGE: yaml
CODE:
```
jose:
    jwe:
        decrypters:
            decrypter1:
                key_encryption_algorithms: ['A256GCMKW']
                content_encryption_algorithms: ['A256CBC-HS256']
                compression_methods: ['DEF']
                is_public: true
```

----------------------------------------

TITLE: Implementing a Custom Header Checker in PHP
DESCRIPTION: Shows how to create a custom header checker that validates a 'custom' header parameter. It checks if the value is an array containing either 'foo' or 'bar'.
SOURCE: https://github.com/web-token/jwt-doc/blob/v1.x/components/header-checker.md#2025-04-20_snippet_4

LANGUAGE: php
CODE:
```
<?php

namespace Acme\Checker;

use Jose\Component\Checker\HeaderChecker;
use Jose\Component\Checker\InvalidHeaderException;

/**
 * Class CustomChecker.
 */
final class CustomChecker implements HeaderChecker
{
    public function checkHeader($value)
    {
        if (!is_array($value) || !in_array($value, ['foo', 'bar'])) {
            throw new InvalidHeaderException('Invalid header "custom".', 'custom', $value);
        }
    }

    // This header parameter name.
    public function supportedHeader(): string
    {
        return 'custom';
    }

    // This method indicates if this parameter must be in the protected header or not.
    public function protectedHeaderOnly(): bool
    {
        return true;
    }
}
```

----------------------------------------

TITLE: Creating Elliptic Curve Key in PHP
DESCRIPTION: Shows how to create an EC (Elliptic Curve) key using the P-256 curve.
SOURCE: https://github.com/web-token/jwt-doc/blob/v1.x/components/key-jwk-and-key-set-jwkset/key-management.md#2025-04-20_snippet_5

LANGUAGE: php
CODE:
```
<?php

use Jose\Component\KeyManagement\JWKFactory;

$key = JWKFactory::createECKey('P-256');
```

----------------------------------------

TITLE: Implementing Header Checker with web-token/jwt-checker
DESCRIPTION: Example of how to create and use a HeaderCheckerManager with the new web-token/jwt-checker component. This demonstrates adding an AudienceChecker and TokenSupport handler, noting that the 'crit' header is always checked automatically.
SOURCE: https://github.com/web-token/jwt-doc/blob/v1.x/migration/from-spomky-labs-jose/header-checking.md#2025-04-20_snippet_1

LANGUAGE: php
CODE:
```
<?php

use Jose\Component\Checker\AudienceChecker;
use Jose\Component\Checker\HeaderCheckerManager;
use Jose\Component\Signature\JWSTokenSupport;

$checkerManager = new HeaderCheckerManager();
$checkerManager->add(new AudienceChecker('My Service'));
$checkerManager->addTokenTypeSupport(new TokenSupport());
```

----------------------------------------

TITLE: Creating JWE Loader with ConfigurationHelper in PHP
DESCRIPTION: Code example showing how to create a JWE loader using the ConfigurationHelper. This is an alternative to the YAML configuration approach.
SOURCE: https://github.com/web-token/jwt-doc/blob/v1.x/symfony-bundle/encrypted-tokens/jwe-decryption.md#2025-04-20_snippet_7

LANGUAGE: php
CODE:
```
<?php
use Jose\Bundle\JoseFramework\Helper\ConfigurationHelper;

...
ConfigurationHelper::addJWELoader($container, 'jwe_loader1', ['jwe_compact'], ['A256GCMKW'], ['A256CBC-HS256'], ['DEF'], ['alg', 'enc'], true);
```

----------------------------------------

TITLE: Creating JWSLoader Objects with JWSLoaderFactory in PHP
DESCRIPTION: Demonstrates the JWSLoaderFactory introduced in version 1.1, which dynamically creates JWSLoader objects on demand. It requires serializer, verifier, and optional header checker factories.
SOURCE: https://github.com/web-token/jwt-doc/blob/v1.x/components/signed-tokens-jws/jws-loading.md#2025-04-20_snippet_3

LANGUAGE: php
CODE:
```
<?php

use Jose\Component\Signature\JWSLoaderFactory;

$jwsLoaderFactory = new JWSLoaderFactory(
    $jwsSerializerManagerFactory,
    $jwsVerifierFactory,
    $headerCheckerManagerFactory
);

$jwsLoader = $jwsLoaderFactory->create(
    ['jws_compact'], // List of serializer aliases
    ['HS256'],       // List of signature algorithm aliases
    ['alg']          // Optional list of header checker aliases
);
```

----------------------------------------

TITLE: Configuring JWT Keys from PKCS#1/PKCS#8 Key File in YAML
DESCRIPTION: Method to load a JWT key from a PKCS#1 or PKCS#8 key file. This approach allows specifying the file path, an optional password if the key is encrypted, and additional values.
SOURCE: https://github.com/web-token/jwt-doc/blob/v1.x/symfony-bundle/key-and-key-set-management/key-management-jwk.md#2025-04-20_snippet_5

LANGUAGE: yaml
CODE:
```
jose:
    keys:
        key_name:
            file: # Method
                path: '/path/to/your/key/file'
                password: 'secret' # Optional. Only if the key is encrypted
                additional_values: # Optional values.
                    use: 'sig'
                    alg: 'RS256'
```

----------------------------------------

TITLE: Creating Multiple Signatures for JWT in PHP
DESCRIPTION: This code snippet shows how to create a JWS object with three different signatures using HS256, RS384, and ES512 algorithms. It utilizes the JWS Builder to add multiple signatures to a single payload.
SOURCE: https://github.com/web-token/jwt-doc/blob/v1.x/advanced-topics/signed-tokens-and/multiple-signatures.md#2025-04-20_snippet_0

LANGUAGE: php
CODE:
```
$jws = $jwsBuilder
    ->create()
    ->withPayload('...')
    ->addSignature($signature_key1, ['alg' => 'HS256'])
    ->addSignature($signature_key2, ['alg' => 'RS384'])
    ->addSignature($signature_key3, ['alg' => 'ES512'])
    ->build();
```

----------------------------------------

TITLE: Creating and Using JWK Objects (Updated Implementation)
DESCRIPTION: This snippet demonstrates the updated way of creating and using a JWK object using the Jose\Component\Core\JWK class. It shows the same operations as the legacy implementation with minor changes in method names.
SOURCE: https://github.com/web-token/jwt-doc/blob/v1.x/migration/from-spomky-labs-jose/keys-jwk.md#2025-04-20_snippet_1

LANGUAGE: php
CODE:
```
<?php

use Jose\Component\Core\JWK;

$key = new JWK([
    'kty' => 'RSA',
    'n' => '0vx7agoebGcQSuuPiLJXZptN9nndrQmbXEps2aiAFbWhM78LhWx4cbbfAAtVT86zwu1RK7aPFFxuhDR1L6tSoc_BJECPebWKRXjBZCiFV4n3oknjhMstn64tZ_2W-5JsGY4Hc5n9yBXArwl93lqt7_RN5w6Cf0h4QyQ5v-65YGjQR0_FDW2QvzqY368QQMicAtaSqzs8KJZgnYb9c7d0zgdAZHzu6qMQvRL5hajrn1n91CbOpbISD08qNLyrdkt-bFTWhAI4vMQFh6WeZu0fM4lFd2NcRwr3XPksINHaQ-G_xBniIqbw0Ls1jF44-csFCur-kEgU8awapJzKnqDKgw',
    'e' => 'AQAB',
    'alg' => 'RS256',
    'kid' => '2011-04-29',
]);

$key->has('kty'); // Unchanged
$key->get('kty'); // Unchanged
$key->thumbprint('sha256'); // Unchanged
json_encode($key); // Unchanged
$key->toPublic(); // Unchanged
$key->all(); // The method name changed.
```

----------------------------------------

TITLE: Implementing a Header Checker Manager Factory in PHP
DESCRIPTION: Demonstrates how to create a Header Checker Manager Factory to generate multiple Header Checker Managers with different configurations for signatures and encryption.
SOURCE: https://github.com/web-token/jwt-doc/blob/v1.x/components/header-checker.md#2025-04-20_snippet_3

LANGUAGE: php
CODE:
```
<?php

use Jose\Component\Checker\HeaderCheckerManagerFactory;
use Jose\Component\Checker\AlgorithmChecker;
use Jose\Component\Encryption\JWETokenSupport;
use Jose\Component\Signature\JWSTokenSupport;

$headerCheckerManagerFactory = new HeaderCheckerManagerFactory();
$headerCheckerManagerFactory
    ->add('signature_alg', new AlgorithmChecker(['HS256']))
    ->add('key_encryption_alg', new AlgorithmChecker(['RSA1_5']))
    ->addTokenTypeSupport(new JWSTokenSupport())
    ->addTokenTypeSupport(new JWETokenSupport());

$headerCheckerManagerForSignatures = $headerCheckerManagerFactory->create(['signature_alg']);
$headerCheckerManagerForEncryption = $headerCheckerManagerFactory->create(['key_encryption_alg']);
```

----------------------------------------

TITLE: Configuring JWT Keys from X509 Certificate File in YAML
DESCRIPTION: Method to load a JWT key from an X509 Certificate file. This approach allows specifying the file path along with optional additional values like 'use' and 'alg'.
SOURCE: https://github.com/web-token/jwt-doc/blob/v1.x/symfony-bundle/key-and-key-set-management/key-management-jwk.md#2025-04-20_snippet_3

LANGUAGE: yaml
CODE:
```
jose:
    keys:
        key_name:
            certificate: # Method
                path: '/path/to/your/X509/certificate'
                additional_values: # Optional values
                    use: 'sig'
                    alg: 'RS256'
```

----------------------------------------

TITLE: Initializing JWE Builder with Algorithm Managers and Compression Methods in PHP
DESCRIPTION: Sets up the JWE builder with required components including key encryption algorithm manager (A256KW), content encryption algorithm manager (A256CBCHS512), compression method manager (Deflate), and JSON converter. These services are necessary for the JWE creation process.
SOURCE: https://github.com/web-token/jwt-doc/blob/v1.x/components/encrypted-tokens-jwe/jwe-creation.md#2025-04-20_snippet_0

LANGUAGE: php
CODE:
```
<?php

use Jose\Component\Core\AlgorithmManager;
use Jose\Component\Core\Converter\StandardConverter;
use Jose\Component\Encryption\Algorithm\KeyEncryption\A256KW;
use Jose\Component\Encryption\Algorithm\ContentEncryption\A256CBCHS512;
use Jose\Component\Encryption\Compression\CompressionMethodManager;
use Jose\Component\Encryption\Compression\Deflate;
use Jose\Component\Encryption\JWEBuilder;

// The key encryption algorithm manager with the A256KW algorithm.
$keyEncryptionAlgorithmManager = AlgorithmManager::create([
    new A256KW(),
]);

// The content encryption algorithm manager with the A256CBC-HS256 algorithm.
$contentEncryptionAlgorithmManager = AlgorithmManager::create([
    new A256CBCHS512(),
]);

// The compression method manager with the DEF (Deflate) method.
$compressionMethodManager = CompressionMethodManager::create([
    new Deflate(),
]);

// The JSON Converter.
$jsonConverter = new StandardConverter();

// We instantiate our JWE Builder.
$jweBuilder = new JWEBuilder(
    $jsonConverter,
    $keyEncryptionAlgorithmManager,
    $contentEncryptionAlgorithmManager,
    $compressionMethodManager
);
```

----------------------------------------

TITLE: Using Algorithm Manager Factory in PHP
DESCRIPTION: Example of how to get the Algorithm Manager Factory service from the container and create an Algorithm Manager with specific algorithms.
SOURCE: https://github.com/web-token/jwt-doc/blob/v1.x/symfony-bundle/algorithm-management.md#2025-04-20_snippet_0

LANGUAGE: php
CODE:
```
<?php

use Jose\Component\Core\AlgorithmManagerFactory;

$algorithmManagerFactory = $container->get(AlgorithmManagerFactory::class);
$algorithmManager = $algorithmManagerFactory->create(['RS256', 'HS512']);
```

----------------------------------------

TITLE: Creating RSA Key Pair in PHP
DESCRIPTION: Demonstrates creation of an RSA key pair with specified key size and usage parameters.
SOURCE: https://github.com/web-token/jwt-doc/blob/v1.x/components/key-jwk-and-key-set-jwkset/key-management.md#2025-04-20_snippet_4

LANGUAGE: php
CODE:
```
<?php

use Jose\Component\KeyManagement\JWKFactory;

$private_key = JWKFactory::createRSAKey(
    4096, // Size in bits of the key. We recommend at least 2048 bits.
    [
        'alg' => 'RSA-OAEP-256', // This key must only be used with the RSA-OAEP-256 algorithm
        'use' => 'enc'    // This key is used for encryption/decryption operations only
    ]);
```

----------------------------------------

TITLE: Configuring JWS Builder in YAML
DESCRIPTION: YAML configuration for creating a JWS builder service with multiple signature algorithms. Defines a public builder service with HS256, RS256, and ES256 algorithms.
SOURCE: https://github.com/web-token/jwt-doc/blob/v1.x/symfony-bundle/signed-tokens/jws-creation.md#2025-04-20_snippet_2

LANGUAGE: yaml
CODE:
```
jose:
    jws:
        builders:
            builder1:
                signature_algorithms: ['HS256', 'RS256', 'ES256']
                is_public: true
```

----------------------------------------

TITLE: Creating a JWE Object with Payload and Recipient in PHP
DESCRIPTION: Demonstrates how to create a JWE object with a payload, setting protected headers including algorithm specifications and compression, and adding a recipient using a JWK (JSON Web Key). The payload is a JSON object containing token claims like expiration time and issuer.
SOURCE: https://github.com/web-token/jwt-doc/blob/v1.x/components/encrypted-tokens-jwe/jwe-creation.md#2025-04-20_snippet_1

LANGUAGE: php
CODE:
```
use Jose\Component\Core\JWK;

// Our key.
$jwk = JWK::create([
    'kty' => 'oct',
    'k' => 'dzI6nbW4OcNF-AtfxGAmuyz7IpHRudBI0WgGjZWgaRJt6prBn3DARXgUR8NVwKhfL43QBIU2Un3AvCGCHRgY4TbEqhOi8-i98xxmCggNjde4oaW6wkJ2NgM3Ss9SOX9zS3lcVzdCMdum-RwVJ301kbin4UtGztuzJBeg5oVN00MGxjC2xWwyI0tgXVs-zJs5WlafCuGfX1HrVkIf5bvpE0MQCSjdJpSeVao6-RSTYDajZf7T88a2eVjeW31mMAg-jzAWfUrii61T_bYPJFOXW8kkRWoa1InLRdG6bKB9wQs9-VdXZP60Q4Yuj_WZ-lO7qV9AEFrUkkjpaDgZT86w2g',
]);

// The payload we want to encrypt. The payload MUST be a string hence we use our JSON Converter.
$payload = $jsonConverter->encode([
    'iat' => time(),
    'nbf' => time(),
    'exp' => time() + 3600,
    'iss' => 'My service',
    'aud' => 'Your application',
]);

$jwe = $jweBuilder
    ->create()              // We want to create a new JWE
    ->withPayload($payload) // We set the payload
    ->withSharedProtectedHeader([
        'alg' => 'A256KW',        // Key Encryption Algorithm
        'enc' => 'A256CBC-HS512', // Content Encryption Algorithm
        'zip' => 'DEF'            // We enable the compression (irrelevant as the payload is small, just for the example).
    ])
    ->addRecipient($jwk)    // We add a recipient (a shared key or public key).
    ->build();              // We build it
```

----------------------------------------

TITLE: JWE Serializer Manager Implementation
DESCRIPTION: PHP implementation of JWE Serializer Manager for handling multiple encryption serialization modes
SOURCE: https://github.com/web-token/jwt-doc/blob/v1.x/advanced-topics/serialization.md#2025-04-20_snippet_4

LANGUAGE: php
CODE:
```
<?php

require_once 'vendor/autoload.php';

use Jose\Component\Core\Converter\StandardConverter;
use Jose\Component\Encryption\Serializer;

$jsonConverter = new StandardConverter();

$manager = Serializer\JWESerializerManager::create([
    new Serializer\CompactSerializer($jsonConverter),
    new Serializer\JSONFlattenedSerializer($jsonConverter),
    new Serializer\JSONGeneralSerializer($jsonConverter),
]);

// Serializes the second recipient (index = 1) of the variable $jwe (JWE object) into JSON Flattened serialization mode.
$token = $manager->serialize('jwe_json_flattened', $jwe, 1);

// Retrieve the JWE object from a token
$jwe = $manager->unserialize($token);
```

----------------------------------------

TITLE: Creating JWK from X.509 Certificate in PHP
DESCRIPTION: Creates a JWK from an X.509 certificate file, which contains only public keys.
SOURCE: https://github.com/web-token/jwt-doc/blob/v1.x/components/key-jwk-and-key-set-jwkset/key-management.md#2025-04-20_snippet_11

LANGUAGE: php
CODE:
```
<?php

use Jose\Component\KeyManagement\JWKFactory;

$key = JWKFactory::createFromCertificateFile(
    '/path/to/my/key/file.crt', // The filename
    [
        'use' => 'sig',         // Additional parameters
    ]
);
```

----------------------------------------

TITLE: Configuring JWE Builder as Service in YAML
DESCRIPTION: This YAML configuration demonstrates how to set up a JWE Builder as a service using bundle configuration. It specifies encryption algorithms, compression methods, and sets the service as public.
SOURCE: https://github.com/web-token/jwt-doc/blob/v1.x/symfony-bundle/encrypted-tokens/jwe-creation.md#2025-04-20_snippet_2

LANGUAGE: yaml
CODE:
```
jose:
    jwe:
        builders:
            builder1:
                key_encryption_algorithms: ['A256GCMKW']
                content_encryption_algorithms: ['A256CBC-HS256']
                compression_methods: ['DEF']
                is_public: true
```

----------------------------------------

TITLE: Initializing JWS Builder Components in PHP
DESCRIPTION: Sets up the necessary components for JWS creation including AlgorithmManager with HS256, JWK key configuration, and JSON converter initialization. Creates a JWSBuilder instance with required dependencies.
SOURCE: https://github.com/web-token/jwt-doc/blob/v1.x/components/signed-tokens-jws/jws-creation.md#2025-04-20_snippet_0

LANGUAGE: php
CODE:
```
<?php

use Jose\Component\Core\AlgorithmManager;
use Jose\Component\Core\Converter\StandardConverter;
use Jose\Component\Core\JWK;
use Jose\Component\Signature\Algorithm\HS256;
use Jose\Component\Signature\JWSBuilder;

// The algorithm manager with the HS256 algorithm.
$algorithmManager = AlgorithmManager::create([
    new HS256(),
]);

// Our key.
$jwk = JWK::create([
    'kty' => 'oct',
    'k' => 'dzI6nbW4OcNF-AtfxGAmuyz7IpHRudBI0WgGjZWgaRJt6prBn3DARXgUR8NVwKhfL43QBIU2Un3AvCGCHRgY4TbEqhOi8-i98xxmCggNjde4oaW6wkJ2NgM3Ss9SOX9zS3lcVzdCMdum-RwVJ301kbin4UtGztuzJBeg5oVN00MGxjC2xWwyI0tgXVs-zJs5WlafCuGfX1HrVkIf5bvpE0MQCSjdJpSeVao6-RSTYDajZf7T88a2eVjeW31mMAg-jzAWfUrii61T_bYPJFOXW8kkRWoa1InLRdG6bKB9wQs9-VdXZP60Q4Yuj_WZ-lO7qV9AEFrUkkjpaDgZT86w2g',
]);

// The JSON Converter.
$jsonConverter = new StandardConverter();

// We instantiate our JWS Builder.
$jwsBuilder = new JWSBuilder(
    $jsonConverter,
    $algorithmManager
);
```

----------------------------------------

TITLE: Creating JWK from Key File in PHP
DESCRIPTION: Creates a JWK from a PKCS#1 or PKCS#8 key file with optional encryption.
SOURCE: https://github.com/web-token/jwt-doc/blob/v1.x/components/key-jwk-and-key-set-jwkset/key-management.md#2025-04-20_snippet_9

LANGUAGE: php
CODE:
```
<?php

use Jose\Component\KeyManagement\JWKFactory;

$key = JWKFactory::createFromKeyFile(
    '/path/to/my/key/file.pem', // The filename
    'Secret',                   // Secret if the key is encrypted
    [
        'use' => 'sig',         // Additional parameters
    ]
);
```

----------------------------------------

TITLE: Creating JWT with Unencoded Payload in PHP
DESCRIPTION: Example of creating a JWS (JSON Web Signature) with an unencoded payload using the b64 and crit header parameters. The b64 parameter is set to false to enable unencoded payload, and it must be listed in the crit array as per RFC7797 requirements.
SOURCE: https://github.com/web-token/jwt-doc/blob/v1.x/advanced-topics/signed-tokens-and/unencoded-payload.md#2025-04-20_snippet_0

LANGUAGE: php
CODE:
```
$jws = $jwsBuilder
    ->create()
    ->withPayload('Hello World!')
    ->addSignature($jwk, ['alg' => 'HS256', 'b64' => false, 'crit' => ['b64']])
    ->build();
```

----------------------------------------

TITLE: Configuring JWS Loader Service
DESCRIPTION: YAML configuration for creating a JWS Loader service with specific serializers, algorithms, and header checkers.
SOURCE: https://github.com/web-token/jwt-doc/blob/v1.x/symfony-bundle/signed-tokens/jws-verification.md#2025-04-20_snippet_5

LANGUAGE: yaml
CODE:
```
jose:
    jws:
        loaders:
            jws_loader1:
                serializers: ['jws_compact']
                signature_algorithms: ['HS256']
                header_checkers: ['alg']
                is_public: true
```

----------------------------------------

TITLE: Creating JWE with Multiple Recipients in PHP
DESCRIPTION: Example of using the JWE Builder to create an encrypted token for multiple recipients, each using a different key encryption algorithm but sharing the same content encryption algorithm.
SOURCE: https://github.com/web-token/jwt-doc/blob/v1.x/advanced-topics/encrypted-tokens-and/multiple-recipients.md#2025-04-20_snippet_0

LANGUAGE: php
CODE:
```
$jweBuilder
    ->create()
    ->withPayload('...')
    ->withSharedProtectedHeader(['enc' => 'A128GCM'])
    ->addRecipient($recipient_key_1, ['alg' => 'RSA1_5'])
    ->addRecipient($recipient_key_2, ['alg' => 'RSA-OAEP-256'])
    ->build();
```

----------------------------------------

TITLE: Creating JWK from PKCS#12 Certificate in PHP
DESCRIPTION: Creates a JWK from a PKCS#12 certificate file with optional encryption.
SOURCE: https://github.com/web-token/jwt-doc/blob/v1.x/components/key-jwk-and-key-set-jwkset/key-management.md#2025-04-20_snippet_10

LANGUAGE: php
CODE:
```
<?php

use Jose\Component\KeyManagement\JWKFactory;

$key = JWKFactory::createFromPKCS12CertificateFile(
    '/path/to/my/key/file.p12', // The filename
    'Secret',                   // Secret if the key is encrypted
    [
        'use' => 'sig',         // Additional parameters
    ]
);
```

----------------------------------------

TITLE: Creating Octet String Key in PHP
DESCRIPTION: Example of creating an oct (symmetric) key with specified size and usage parameters.
SOURCE: https://github.com/web-token/jwt-doc/blob/v1.x/components/key-jwk-and-key-set-jwkset/key-management.md#2025-04-20_snippet_2

LANGUAGE: php
CODE:
```
<?php

use Jose\Component\KeyManagement\JWKFactory;

$key = JWKFactory::createOctKey(
    1024, // Size in bits of the key. We recommend at least 128 bits.
    [
        'alg' => 'HS256', // This key must only be used with the HS256 algorithm
        'use' => 'sig'    // This key is used for signature/verification operations only
    ]
);
```

----------------------------------------

TITLE: Configuring PBES2 Algorithm with Custom Parameters
DESCRIPTION: YAML configuration for creating a PBES2 algorithm service with custom salt size and count parameters, then tagging it to make it available through the algorithm manager factory.
SOURCE: https://github.com/web-token/jwt-doc/blob/v1.x/symfony-bundle/algorithm-management.md#2025-04-20_snippet_2

LANGUAGE: yaml
CODE:
```
services:
    Jose\Component\Encryption\Algorithm\KeyEncryption\PBES2HS256A128KW:
        arguments:
            - 128   # salt size
            - 10240 # counts
        tags:
            - {'name': 'jose.algorithm', 'alias': 'Ultra-Secured PBES2-HS256+A128KW'}
```

----------------------------------------

TITLE: Loading and Verifying JWS with Detached Payload in PHP
DESCRIPTION: This code demonstrates how to load and verify a JWS token that has a detached payload. It sets up the necessary components including the algorithm manager, key, and verifier, then shows how to pass the detached payload during verification.
SOURCE: https://github.com/web-token/jwt-doc/blob/v1.x/advanced-topics/signed-tokens-and/detached-payload.md#2025-04-20_snippet_1

LANGUAGE: php
CODE:
```
<?php

use Jose\Component\Core\AlgorithmManager;
use Jose\Component\Core\Converter\StandardConverter;
use Jose\Component\Core\JWK;
use Jose\Component\Signature\Algorithm\HS256;
use Jose\Component\Signature\JWSVerifier;
use Jose\Component\Signature\Serializer\JWSSerializerManager;
use Jose\Component\Signature\Serializer\CompactSerializer;

// The algorithm manager with the HS256 algorithm.
$algorithmManager = AlgorithmManager::create([
    new HS256(),
]);

// Our key.
$jwk = JWK::create([
    'kty' => 'oct',
    'k' => 'dzI6nbW4OcNF-AtfxGAmuyz7IpHRudBI0WgGjZWgaRJt6prBn3DARXgUR8NVwKhfL43QBIU2Un3AvCGCHRgY4TbEqhOi8-i98xxmCggNjde4oaW6wkJ2NgM3Ss9SOX9zS3lcVzdCMdum-RwVJ301kbin4UtGztuzJBeg5oVN00MGxjC2xWwyI0tgXVs-zJs5WlafCuGfX1HrVkIf5bvpE0MQCSjdJpSeVao6-RSTYDajZf7T88a2eVjeW31mMAg-jzAWfUrii61T_bYPJFOXW8kkRWoa1InLRdG6bKB9wQs9-VdXZP60Q4Yuj_WZ-lO7qV9AEFrUkkjpaDgZT86w2g',
]);

// The JSON Converter.
$jsonConverter = new StandardConverter();

// The serializer manager. We only use the JWS Compact Serialization Mode.
$serializerManager = JWSSerializerManager::create([
    new CompactSerializer($jsonConverter),
]);

// We instantiate our JWS Verifier.
$jwsVerifier = new JWSVerifier(
    $algorithmManager
);

// The detached payload
$payload = '{"iat":1507896992,"nbf":1507896992,"exp":1507900592,"iss":"My service","aud":"Your application"}';

// The input we want to check
$token = 'eyJhbGciOiJIUzI1NiJ9..eycp9PTdgO4WA-68-AMoHPwsKDr68NhjIQKz4lUkiI0';

// We try to load the token.
$jws = $serializerManager->unserialize($token);

// We verify the signature.
// /!\ The third argument is the detached payload.
$jwsVerifier->verifyWithKey($jws, $jwk, $payload);

```

----------------------------------------

TITLE: Configuring JWS Verifier Service
DESCRIPTION: YAML configuration for creating a public JWS Verifier service with multiple signature algorithms.
SOURCE: https://github.com/web-token/jwt-doc/blob/v1.x/symfony-bundle/signed-tokens/jws-verification.md#2025-04-20_snippet_1

LANGUAGE: yaml
CODE:
```
jose:
    jws:
        verifiers:
            verifier1:
                signature_algorithms: ['HS256', 'RS256', 'ES256']
                is_public: true
```

----------------------------------------

TITLE: Creating JWK from Values in PHP
DESCRIPTION: Creates a JWK using pre-existing key values and parameters.
SOURCE: https://github.com/web-token/jwt-doc/blob/v1.x/components/key-jwk-and-key-set-jwkset/key-management.md#2025-04-20_snippet_8

LANGUAGE: php
CODE:
```
<?php

use Jose\Component\KeyManagement\JWKFactory;

$key = JWKFactory::createFromValues([
    'kid' => '71ee230371d19630bc17fb90ccf20ae632ad8cf8',
    'kty' => 'RSA',
    'alg' => 'RS256',
    'use' => 'sig',
    'n' => 'vnMTRCMvsS04M1yaKR112aB8RxOkWHFixZO68wCRlVLxK4ugckXVD_Ebcq-kms1T2XpoWntVfBuX40r2GvcD9UsTFt_MZlgd1xyGwGV6U_tfQUll5mKxCPjr60h83LXKJ_zmLXIqkV8tAoIg78a5VRWoms_0Bn09DKT3-RBWFjk=',
    'e' => 'AQAB',
]);
```

----------------------------------------

TITLE: Configuring JWT Checker Managers in YAML
DESCRIPTION: YAML configuration to create public Header and Claim Checker Managers with selected checkers. This configuration creates services named 'jose.header_checker.checker1' and 'jose.claim_checker.checker1'.
SOURCE: https://github.com/web-token/jwt-doc/blob/v1.x/symfony-bundle/header-and-claim-checker-management.md#2025-04-20_snippet_2

LANGUAGE: yaml
CODE:
```
jose:
    checkers:
        claims:
            checker1:
                is_public: true
                claims: [...]
        headers:
            checker1:
                is_public: true
                headers: [...]
```

----------------------------------------

TITLE: Implementing AAD in JWE with PHP
DESCRIPTION: Demonstrates how to add Additional Authentication Data to a JWE build operation. The example shows setting encryption parameters, protected headers, and adding a recipient key along with AAD. Note that using AAD makes Compact Serialization unavailable.
SOURCE: https://github.com/web-token/jwt-doc/blob/v1.x/advanced-topics/encrypted-tokens-and/additional-authentication-data-aad.md#2025-04-20_snippet_0

LANGUAGE: php
CODE:
```
$jwe = $jweBuilder
    ->create()
    ->withPayload('...')
    ->withSharedProtectedHeader([
        'enc' => 'A256CBC-HS512',
        'alg' => 'RSA-OAEP-256',
        'zip' => 'DEF',
    ])
    ->addRecipient($recipient_key)
    ->withAAD('A,B,C,D')
    ->build();
```

----------------------------------------

TITLE: Using JWT Checker Factory Services in PHP
DESCRIPTION: Example showing how to access and use the HeaderCheckerManagerFactory and ClaimCheckerManagerFactory from the service container to create checker managers.
SOURCE: https://github.com/web-token/jwt-doc/blob/v1.x/symfony-bundle/header-and-claim-checker-management.md#2025-04-20_snippet_1

LANGUAGE: php
CODE:
```
<?php

use Jose\Component\Checker\HeaderCheckerManagerFactory;
use Jose\Component\Checker\ClaimCheckerManagerFactory;

$headerCheckerManagerFactory = $container->get(HeaderCheckerManagerFactory::class);
$headerCheckerManager = $headerCheckerManagerFactory->create([...]);

$claimCheckerManagerFactory = $container->get(ClaimCheckerManagerFactory::class);
$claimCheckerManager = $claimCheckerManagerFactory->create([...]);
```

----------------------------------------

TITLE: Configuring JKU (JWK Url) Key Set in YAML for JWT Framework
DESCRIPTION: Example of configuring a key set to be loaded from a JKU (JWK Url). It specifies the URL from which to load the JWKSet object.
SOURCE: https://github.com/web-token/jwt-doc/blob/v1.x/symfony-bundle/key-and-key-set-management/key-set-management-jwkset.md#2025-04-20_snippet_3

LANGUAGE: yaml
CODE:
```
jose:
    key_sets:
        key_name:
            jku: # Method
                url: 'https://login.microsoftonline.com/common/discovery/keys'
```

----------------------------------------

TITLE: Configuring X5U (X509 Certificates Url) Key Set in YAML for JWT Framework
DESCRIPTION: Example of configuring a key set to be loaded from an X5U (X509 Certificates Url). It specifies the URL from which to load the list of X509 certificates.
SOURCE: https://github.com/web-token/jwt-doc/blob/v1.x/symfony-bundle/key-and-key-set-management/key-set-management-jwkset.md#2025-04-20_snippet_4

LANGUAGE: yaml
CODE:
```
jose:
    key_sets:
        key_name:
            x5u: # Method
                url: 'https://www.googleapis.com/oauth2/v1/certs'
```

----------------------------------------

TITLE: Creating JWT with Unprotected Header Parameters in PHP
DESCRIPTION: Example of creating a signed JWT token with unprotected header parameters using the JWS Builder. The code demonstrates adding a signature with HS256 algorithm and includes unprotected header parameters for description and author information.
SOURCE: https://github.com/web-token/jwt-doc/blob/v1.x/advanced-topics/signed-tokens-and/unprotected-header.md#2025-04-20_snippet_0

LANGUAGE: php
CODE:
```
$jws = $jwsBuilder
    ->create()
    ->withPayload('...')
    ->addSignature($jwk, ['alg' => 'HS256'], ['description' => 'Small description here', 'author' => 'John Doe'])
    ->build();
```

----------------------------------------

TITLE: Retrieving Configured JWE Decrypter Service in PHP
DESCRIPTION: Code showing how to retrieve a configured JWE decrypter service from the container. This uses the service that was defined in the YAML configuration.
SOURCE: https://github.com/web-token/jwt-doc/blob/v1.x/symfony-bundle/encrypted-tokens/jwe-decryption.md#2025-04-20_snippet_3

LANGUAGE: php
CODE:
```
<?php
$jweDecrypter = $container->get('jose.jwe_decrypter.decrypter1');
```

----------------------------------------

TITLE: Configuring Shared Key Sets in YAML for JWT Framework
DESCRIPTION: Configuration for sharing a key set through a URL in the JWT Framework. It sets up a public key set and configures how it should be shared, including the path and cache settings.
SOURCE: https://github.com/web-token/jwt-doc/blob/v1.x/symfony-bundle/key-and-key-set-management/key-set-management-jwkset.md#2025-04-20_snippet_6

LANGUAGE: yaml
CODE:
```
jose:
    key_sets:
        public_keyset: # The key set we want to share
            jwkset:
                value: '{"keys":[{"kty":"OKP","crv":"X25519","x":"ovuZiVcMXBN4r0VgCvJy_ChAsBv4YPJGC5w56PzndXY"},{"kty":"OKP","crv":"X25519","x":"4qyOJ4T9RkdciIn6LDxb2LdM1Ov-dtBSuj0jh6nCuyc"}]}'
    jwk_uris:
        shared_keyset:
            id: 'jose.key_set.public_keyset' # The key set service to share
            path: '/certs' # Path of the key set. Final path is hostname/route_prefix/path: https://www.foo.com/keys/certs
            max_age: 1000 # Set the HTTP cache max age of this key set
```

----------------------------------------

TITLE: Configuring JWT Keys from Shared Secret in YAML
DESCRIPTION: Method to configure a JWT key using a direct shared secret. This approach allows specifying the secret value along with optional additional properties like 'use' and 'alg'.
SOURCE: https://github.com/web-token/jwt-doc/blob/v1.x/symfony-bundle/key-and-key-set-management/key-management-jwk.md#2025-04-20_snippet_1

LANGUAGE: yaml
CODE:
```
jose:
    keys:
        key_name:
            secret: # Method
                secret: 'This is my shared secret'
                additional_values:
                    use: 'sig'
                    alg: 'RS512'
```

----------------------------------------

TITLE: Creating Signed Tokens (JWS) with Current Approach
DESCRIPTION: Modern implementation for creating a signed JWT using component-based architecture. It demonstrates setting up the algorithm manager, JSON converter, JWS builder, and serializing the token in compact format.
SOURCE: https://github.com/web-token/jwt-doc/blob/v1.x/migration/from-spomky-labs-jose/signed-tokens-jws.md#2025-04-20_snippet_1

LANGUAGE: php
CODE:
```
<?php

use Jose\Component\Core\AlgorithmManager;
use Jose\Component\Core\Converter\StandardConverter;
use Jose\Component\Signature\JWSBuilder;
use Jose\Component\Signature\Algorithm\RS256;
use Jose\Component\Signature\Serializer\CompactSerializer;

// This converter wraps json_encode/json_decode with some parameters
$jsonConverter = new StandardConverter();

// This managers handles all algorithms we need to use. 
$algorithmManager = AlgorithmManager::create([
    new RS256(),
]);

// The JWS Builder
$jwsBuilder = new JWSBuilder($jsonConverter, $algorithmManager);

// First we have to encode the payload. Now only strings are accepted.
$payload = $jsonConverter->encode($claims);

// We build our JWS object
$jws = $jwsBuilder
    ->create()                    // Indicates we want to create a new token
    ->withPayload($payload)       // We set the payload
    ->addSignature($key, $header) // We add a signature
    ->build();                    // We compute the JWS

// We need to serialize the token.
// In this example we will use the compact serialization mode (most common mode).
$serializer = new CompactSerializer($jsonConverter);
$token = $serializer->serialize($jws);
```

----------------------------------------

TITLE: Retrieving Configured JWE Builder from Container in PHP
DESCRIPTION: This snippet shows how to retrieve a pre-configured JWE Builder service from the container using its service name.
SOURCE: https://github.com/web-token/jwt-doc/blob/v1.x/symfony-bundle/encrypted-tokens/jwe-creation.md#2025-04-20_snippet_3

LANGUAGE: php
CODE:
```
<?php
$jweBuilder = $container->get('jose.jwe_builder.builder1');
```

----------------------------------------

TITLE: Retrieving Configured JWS Builder Service
DESCRIPTION: Shows how to retrieve a pre-configured JWS builder service from the container using its service identifier.
SOURCE: https://github.com/web-token/jwt-doc/blob/v1.x/symfony-bundle/signed-tokens/jws-creation.md#2025-04-20_snippet_3

LANGUAGE: php
CODE:
```
<?php
$jwsBuilder = $container->get('jose.jws_builder.builder1');
```

----------------------------------------

TITLE: Initializing JWS Verifier with HS256 Algorithm in PHP
DESCRIPTION: Creates an algorithm manager with the HS256 algorithm and initializes a JWS Verifier for signature verification.
SOURCE: https://github.com/web-token/jwt-doc/blob/v1.x/components/signed-tokens-jws/jws-loading.md#2025-04-20_snippet_0

LANGUAGE: php
CODE:
```
<?php

use Jose\Component\Core\AlgorithmManager;
use Jose\Component\Signature\Algorithm\HS256;
use Jose\Component\Signature\JWSVerifier;

// The algorithm manager with the HS256 algorithm.
$algorithmManager = AlgorithmManager::create([
    new HS256(),
]);

// We instantiate our JWS Verifier.
$jwsVerifier = new JWSVerifier(
    $algorithmManager
);
```

----------------------------------------

TITLE: Verifying Signed Tokens (JWS) with Legacy Approach
DESCRIPTION: Example of loading and verifying a JWT using the old approach with the Loader class. It demonstrates signature verification with a key and checking claims/headers with CheckerManagerFactory.
SOURCE: https://github.com/web-token/jwt-doc/blob/v1.x/migration/from-spomky-labs-jose/signed-tokens-jws.md#2025-04-20_snippet_2

LANGUAGE: php
CODE:
```
<?php

use Jose\Checker\AudienceChecker;
use Jose\Factory\CheckerManagerFactory;
use Jose\Loader;

// The loader
$loader = new Loader();

// We load and verify the input
$jws = $loader->loadAndVerifySignatureUsingKey(
    $input,
    $key,
    ['RS256'],
    $signature_index
);

// We prepare the claim/header checker
$checker = CheckerManagerFactory::createClaimCheckerManager(
    ['iat', 'nbf'], // We should enable 'exp', but this example will fail as the token has already expired
    ['crit']
);

// We check the token
$checker->checkJWS($jws, 0);
```

----------------------------------------

TITLE: Using JKUFactory Service in a Class
DESCRIPTION: PHP example showing how to inject and use the JKUFactory service to load key sets from remote URLs.
SOURCE: https://github.com/web-token/jwt-doc/blob/v1.x/migration/from-spomky-labs-jose/key-sets-jwkset.md#2025-04-20_snippet_7

LANGUAGE: php
CODE:
```
use Jose\Component\Core\JWKSet;
use Jose\Component\KeyManagement\JKUFactory;

class MyClass
{
    private $jkuFactory;

    public function __construct(JKUFactory $jkuFactory)
    {
        $this->client = $client;
        $this->jkuFactory= $jkuFactory;
    }

    public function getKeySet(): JWKSet
    {
        return $this->jkuFactory->loadFromUrl($url);
    }
}
```

----------------------------------------

TITLE: Creating JWS Builder Instance with Algorithm
DESCRIPTION: Demonstrates creating a JWS Builder instance with a specific signature algorithm (HS256) using the factory method.
SOURCE: https://github.com/web-token/jwt-doc/blob/v1.x/symfony-bundle/signed-tokens/jws-creation.md#2025-04-20_snippet_1

LANGUAGE: php
CODE:
```
$jwsBuilder = $jwsBuilderFactory->create(['HS256']);
```

----------------------------------------

TITLE: Implementing Header Checker with spomky-labs/jose
DESCRIPTION: Example of how to create and use a CheckerManager with header checkers in the previous spomky-labs/jose library. This shows adding an AudienceChecker and CriticalHeaderChecker to validate JWT headers.
SOURCE: https://github.com/web-token/jwt-doc/blob/v1.x/migration/from-spomky-labs-jose/header-checking.md#2025-04-20_snippet_0

LANGUAGE: php
CODE:
```
<?php

use Jose\Checker\CheckerManager;
use Jose\Checker\AudienceChecker;
use Jose\Checker\CriticalHeaderChecker;

$checkerManager = new CheckerManager();
$checkerManager->addHeaderChecker(new AudienceChecker('My Server'));
$checkerManager->addHeaderChecker(new CriticalHeaderChecker());

$checkerManager->checkJWS($jws, $signature_index);
```

----------------------------------------

TITLE: Creating Signed Tokens (JWS) with Legacy Approach
DESCRIPTION: Example of creating a signed JWT using the old Jose Factory classes. This approach uses JWKFactory and JWSFactory to create a JWS token in compact JSON format with an RS256 algorithm.
SOURCE: https://github.com/web-token/jwt-doc/blob/v1.x/migration/from-spomky-labs-jose/signed-tokens-jws.md#2025-04-20_snippet_0

LANGUAGE: php
CODE:
```
<?php

use Jose\Factory\JWKFactory;
use Jose\Factory\JWSFactory;

$header = [
  'alg' => 'RS256',
];

$jws = JWSFactory::createJWSToCompactJSON(
    $claims, // The payload
    $key,    // The private/shared key used to sign
    $header  // The token protected header
);
```

----------------------------------------

TITLE: Checking Required Claims in JWT Payload
DESCRIPTION: Validates claims while also ensuring specific required claims are present in the token.
SOURCE: https://github.com/web-token/jwt-doc/blob/v1.x/components/claim-checker.md#2025-04-20_snippet_3

LANGUAGE: php
CODE:
```
$claimCheckerManager->check($claims, ['iss', 'sub', 'aud']);
```

----------------------------------------

TITLE: Initializing JWS Verifier Factory
DESCRIPTION: Demonstrates how to retrieve the JWSVerifierFactory service from the container and create a JWS verifier with specific algorithms.
SOURCE: https://github.com/web-token/jwt-doc/blob/v1.x/symfony-bundle/signed-tokens/jws-verification.md#2025-04-20_snippet_0

LANGUAGE: php
CODE:
```
<?php
use Jose\Component\Signature\JWSVerifierFactory;

$jwsVerifierFactory = $container->get(JWSVerifierFactory::class);
```

LANGUAGE: php
CODE:
```
$jwsVerifier = $jwsVerifierFactory->create(['HS256']);
```

----------------------------------------

TITLE: JWS Serializer Manager Implementation
DESCRIPTION: PHP implementation of JWS Serializer Manager that handles multiple serialization modes
SOURCE: https://github.com/web-token/jwt-doc/blob/v1.x/advanced-topics/serialization.md#2025-04-20_snippet_3

LANGUAGE: php
CODE:
```
<?php

require_once 'vendor/autoload.php';

use Jose\Component\Core\Converter\StandardConverter;
use Jose\Component\Signature\Serializer;

$jsonConverter = new StandardConverter();

$manager = Serializer\JWSSerializerManager::create([
    new Serializer\CompactSerializer($jsonConverter),
    new Serializer\JSONFlattenedSerializer($jsonConverter),
    new Serializer\JSONGeneralSerializer($jsonConverter),
]);

// Serializes the second signature (index = 1) of the variable $jws (JWS object) into JSON Flattened serialization mode.
$token = $manager->serialize('jws_json_flattened', $jws, 1);

// Retrieve the JWS object from a token
$jws = $manager->unserialize($token);
```

----------------------------------------

TITLE: Initializing NestedTokenLoader in PHP
DESCRIPTION: Creates a new instance of NestedTokenLoader that handles JWT tokens which are both signed and encrypted. This loader requires pre-configured JWE and JWS loaders to properly process nested tokens.
SOURCE: https://github.com/web-token/jwt-doc/blob/v1.x/advanced-topics/nested-tokens.md#2025-04-20_snippet_0

LANGUAGE: php
CODE:
```
use Jose\Component\Encryption\NestedTokenLoader;

$nestedTokenLoader = new NestedTokenLoader($jweLoader, $jwsLoader);
```

----------------------------------------

TITLE: Using Custom PBES2 Algorithm Alias
DESCRIPTION: PHP example demonstrating how to use a custom PBES2 algorithm alias with the algorithm manager factory.
SOURCE: https://github.com/web-token/jwt-doc/blob/v1.x/symfony-bundle/algorithm-management.md#2025-04-20_snippet_3

LANGUAGE: php
CODE:
```
$algorithmManager = $algorithmManagerFactory->create(['Ultra-Secured PBES2-HS256+A128KW']);
```

----------------------------------------

TITLE: Initializing JWS Loader Factory
DESCRIPTION: Demonstrates how to retrieve the JWSLoaderFactory from the container for creating JWSLoader objects.
SOURCE: https://github.com/web-token/jwt-doc/blob/v1.x/symfony-bundle/signed-tokens/jws-verification.md#2025-04-20_snippet_4

LANGUAGE: php
CODE:
```
<?php
use Jose\Component\Signature\JWSLoaderFactory;

$jwsLoaderFactory = $container->get(JWSLoaderFactory::class);
```

----------------------------------------

TITLE: JWS JSON Flattened Format Example
DESCRIPTION: Example of a JWS token in JSON Flattened format, which supports unprotected headers
SOURCE: https://github.com/web-token/jwt-doc/blob/v1.x/advanced-topics/serialization.md#2025-04-20_snippet_2

LANGUAGE: javascript
CODE:
```
{
  "payload": "SW4gb3VyIHZpbGxhZ2UsIGZvbGtzIHNheSBHb2QgY3J1bWJsZXMgdXAgdGhlIG9sZCBtb29uIGludG8gc3RhcnMu",
  "protected": "eyJhbGciOiJFUzI1NiJ9",
  "header": {
    "kid": "myEcKey"
  },
  "signature": "b7V2UpDPytr-kMnM_YjiQ3E0J2ucOI9LYA7mt57vccrK1rb84j9areqgQcJwOA00aWGoz4hf6sMTBfobdcJEGg"
}
```

----------------------------------------

TITLE: Serializing JWS Token with Compact Serialization in PHP
DESCRIPTION: Demonstrates how to serialize a JWS object using the Compact Serialization mode, which produces a URL-safe string format suitable for web contexts.
SOURCE: https://github.com/web-token/jwt-doc/blob/v1.x/components/signed-tokens-jws/jws-creation.md#2025-04-20_snippet_2

LANGUAGE: php
CODE:
```
use Jose\Component\Signature\Serializer\CompactSerializer;

$serializer = new CompactSerializer($jsonConverter); // The serializer

$token = $serializer->serialize($jws, 0); // We serialize the signature at index 0 (we only have one signature).
```

----------------------------------------

TITLE: Decrypting JWE Tokens - Legacy Approach
DESCRIPTION: Example of decrypting a JWE token using the older Loader-based approach. It shows how to load, validate and decrypt a token string using a JWK key.
SOURCE: https://github.com/web-token/jwt-doc/blob/v1.x/migration/from-spomky-labs-jose/encrypted-tokens-jwe.md#2025-04-20_snippet_2

LANGUAGE: php
CODE:
```
<?php
use Jose\Factory\JWKFactory;
use Jose\Loader;

// We create our loader.
$loader = new Loader();

// This is the input we want to load verify.
$input = 'eyJhbGciOiJSU0EtT0FFUCIsImtpZCI6InNhbXdpc2UuZ2FtZ2VlQGhvYmJpdG9uLmV4YW1wbGUiLCJlbmMiOiJBMjU2R0NNIn0.rT99rwrBTbTI7IJM8fU3Eli7226HEB7IchCxNuh7lCiud48LxeolRdtFF4nzQibeYOl5S_PJsAXZwSXtDePz9hk-BbtsTBqC2UsPOdwjC9NhNupNNu9uHIVftDyucvI6hvALeZ6OGnhNV4v1zx2k7O1D89mAzfw-_kT3tkuorpDU-CpBENfIHX1Q58-Aad3FzMuo3Fn9buEP2yXakLXYa15BUXQsupM4A1GD4_H4Bd7V3u9h8Gkg8BpxKdUV9ScfJQTcYm6eJEBz3aSwIaK4T3-dwWpuBOhROQXBosJzS1asnuHtVMt2pKIIfux5BC6huIvmY7kzV7W7aIUrpYm_3H4zYvyMeq5pGqFmW2k8zpO878TRlZx7pZfPYDSXZyS0CfKKkMozT_qiCwZTSz4duYnt8hS4Z9sGthXn9uDqd6wycMagnQfOTs_lycTWmY-aqWVDKhjYNRf03NiwRtb5BE-tOdFwCASQj3uuAgPGrO2AWBe38UjQb0lvXn1SpyvYZ3WFc7WOJYaTa7A8DRn6MC6T-xDmMuxC0G7S2rscw5lQQU06MvZTlFOt0UvfuKBa03cxA_nIBIhLMjY2kOTxQMmpDPTr6Cbo8aKaOnx6ASE5Jx9paBpnNmOOKH35j_QlrQhDWUN6A2Gg8iFayJ69xDEdHAVCGRzN3woEI2ozDRs.-nBoKLH0YkLZPSI9.o4k2cnGN8rSSw3IDo1YuySkqeS_t2m1GXklSgqBdpACm6UJuJowOHC5ytjqYgRL-I-soPlwqMUf4UgRWWeaOGNw6vGW-xyM01lTYxrXfVzIIaRdhYtEMRBvBWbEwP7ua1DRfvaOjgZv6Ifa3brcAM64d8p5lhhNcizPersuhw5f-pGYzseva-TUaL8iWnctc-sSwy7SQmRkfhDjwbz0fz6kFovEgj64X1I5s7E6GLp5fnbYGLa1QUiML7Cc2GxgvI7zqWo0YIEc7aCflLG1-8BboVWFdZKLK9vNoycrYHumwzKluLWEbSVmaPpOslY2n525DxDfWaVFUfKQxMF56vn4B9QMpWAbnypNimbM8zVOw.UCGiqJxhBI3IFVdPalHHvA';

// The payload is decrypted using our key.
$jwe = $loader->loadAndDecryptUsingKey(
    $input,            // The input to load and decrypt
    $jwk,              // The symmetric or private key 
    ['RSA-OAEP'],      // A list of allowed key encryption algorithms
    ['A256GCM'],       // A list of allowed content encryption algorithms
    $recipient_index   // If decrypted, this variable will be set with the recipient index used to decrypt
);
```

----------------------------------------

TITLE: Initializing JWE Serializer Manager Factory in PHP
DESCRIPTION: Demonstrates how to retrieve the JWESerializerManagerFactory from a container service.
SOURCE: https://github.com/web-token/jwt-doc/blob/v1.x/symfony-bundle/encrypted-tokens/jwe-serializers.md#2025-04-20_snippet_0

LANGUAGE: php
CODE:
```
<?php
use Jose\Component\Encryption\JWESerializerManagerFactory;

$jweSerializerManagerFactory = $container->get(JWESerializerManagerFactory::class);
```

----------------------------------------

TITLE: Generating Octet Key Pair (OKP) Key
DESCRIPTION: This command generates an Octet Key Pair (OKP) with the specified curve. Supported curves are X25519 (for encryption) and Ed25519 (for signature). The output is a JWK representation.
SOURCE: https://github.com/web-token/jwt-doc/blob/v1.x/console/README.md#2025-04-20_snippet_6

LANGUAGE: bash
CODE:
```
./jose.phar key:generate:okp 256

{"kty":"OKP","crv":"X25519","x":"TgTD7RS0KF3eU8HdTM6ACxu365uco3x2Cee9SBXiu2I","d":"BypCXV7KUai-zrwrdoAmgnHX6Kosw0sVpDVPwrXoNKY"}
```

----------------------------------------

TITLE: Serializing a JWE Object Using Compact Serialization in PHP
DESCRIPTION: Shows how to serialize a JWE object using the CompactSerializer to produce a URL-safe, compact token string. The serializer is initialized with the JSON converter and serializes the JWE for the specified recipient (in this case, the first recipient at index 0).
SOURCE: https://github.com/web-token/jwt-doc/blob/v1.x/components/encrypted-tokens-jwe/jwe-creation.md#2025-04-20_snippet_2

LANGUAGE: php
CODE:
```
use Jose\Component\Encryption\Serializer\CompactSerializer;

$serializer = new CompactSerializer($jsonConverter); // The serializer

$token = $serializer->serialize($jwe, 0); // We serialize the recipient at index 0 (we only have one recipient).
```

----------------------------------------

TITLE: Retrieving JWELoaderFactory Service in PHP
DESCRIPTION: Example demonstrating how to retrieve the JWELoaderFactory from the container. This factory helps create JWELoader objects on demand.
SOURCE: https://github.com/web-token/jwt-doc/blob/v1.x/symfony-bundle/encrypted-tokens/jwe-decryption.md#2025-04-20_snippet_5

LANGUAGE: php
CODE:
```
<?php
use Jose\Component\Encryption\JWELoaderFactory;

$jweLoaderFactory = $container->get(JWELoaderFactory::class);
```

----------------------------------------

TITLE: Initializing JWS Serializer Manager Factory in PHP
DESCRIPTION: Shows how to retrieve the JWSSerializerManagerFactory from the application container. This factory service is used to create JWS serializer managers.
SOURCE: https://github.com/web-token/jwt-doc/blob/v1.x/symfony-bundle/signed-tokens/jws-serializers.md#2025-04-20_snippet_0

LANGUAGE: php
CODE:
```
<?php
use Jose\Component\Signature\JWSSerializerManagerFactory;

$jwsSerializerManagerFactory = $container->get(JWSSerializerManagerFactory::class);
```

----------------------------------------

TITLE: Loading and Converting PEM/DER Key to JWK
DESCRIPTION: This command loads and converts a DER/PEM key file into a JWK. It supports encrypted keys, PKCS#1 and PKCS#8 encodings for public/private keys.
SOURCE: https://github.com/web-token/jwt-doc/blob/v1.x/console/README.md#2025-04-20_snippet_9

LANGUAGE: bash
CODE:
```
./jose.phar key:load:key /path/to/file.pem "This is my secret to decrypt the key"

{"kty":"OKP","crv":"X25519","x":"TgTD7RS0KF3eU8HdTM6ACxu365uco3x2Cee9SBXiu2I","d":"BypCXV7KUai-zrwrdoAmgnHX6Kosw0sVpDVPwrXoNKY"}
```

----------------------------------------

TITLE: Configuring JKU Factory with HTTPlug in Symfony
DESCRIPTION: Symfony configuration for the JKU Factory service with HTTPlug client for remote key set retrieval, including cache configuration.
SOURCE: https://github.com/web-token/jwt-doc/blob/v1.x/migration/from-spomky-labs-jose/key-sets-jwkset.md#2025-04-20_snippet_6

LANGUAGE: yaml
CODE:
```
jose:
    jku_factory:
        enabled: true # We enable the JKU factory
        client: 'httplug.client.my_client' # We indicate the Httplug client to use
        request_factory: 'AppBundle\Service\RequestFactory' # See hereafter the corresponding class

httplug:
    plugins:
        cache: # We use the cache plugin
            cache_pool: 'cache.app' # We use the PSR-6 Cache service of the application
            config:
                default_ttl: 1800 # TTL set to 30 min
    clients:
        my_client: # Our client based on Guzzle 6. The corresponding service will be `httplug.client.my_client`
            factory: 'httplug.factory.guzzle6'
            plugins: ['httplug.plugin.cache'] # We enable the cache plugin for that client
```

----------------------------------------

TITLE: Creating JWS Serializer Manager Instance in PHP
DESCRIPTION: Demonstrates how to create a JWS Serializer Manager with specific serialization modes using the factory.
SOURCE: https://github.com/web-token/jwt-doc/blob/v1.x/symfony-bundle/signed-tokens/jws-serializers.md#2025-04-20_snippet_1

LANGUAGE: php
CODE:
```
$jwsSerializerManager = $jwsSerializerManagerFactory->create(['jws_compact']);
```

----------------------------------------

TITLE: Creating Octet Key Pair in PHP
DESCRIPTION: Example of creating an OKP (Octet Key Pair) key using the X25519 curve.
SOURCE: https://github.com/web-token/jwt-doc/blob/v1.x/components/key-jwk-and-key-set-jwkset/key-management.md#2025-04-20_snippet_6

LANGUAGE: php
CODE:
```
<?php

use Jose\Component\KeyManagement\JWKFactory;

$key = JWKFactory::createOKPKey('X25519');
```

----------------------------------------

TITLE: Creating JWEDecrypter with Factory in PHP
DESCRIPTION: Example showing how to create a JWEDecrypter instance using the JWEDecrypterFactory. This creates a decrypter that supports the HS256 algorithm.
SOURCE: https://github.com/web-token/jwt-doc/blob/v1.x/symfony-bundle/encrypted-tokens/jwe-decryption.md#2025-04-20_snippet_1

LANGUAGE: php
CODE:
```
$jweDecrypter = $jweDecrypterFactory->create(['HS256']);
```

----------------------------------------

TITLE: Implementing a PSR-7 Request Factory for JKUFactory
DESCRIPTION: Implementation of a PSR-7 RequestFactory service for use with the JKUFactory in the JWT framework, using GuzzleHttp's PSR-7 implementation.
SOURCE: https://github.com/web-token/jwt-doc/blob/v1.x/migration/from-spomky-labs-jose/key-sets-jwkset.md#2025-04-20_snippet_5

LANGUAGE: php
CODE:
```
<?php
# app/AppBundle/Service/RequestFactory.php

namespace AppBundle\Service;

use GuzzleHttp\Psr7\Request;
use Http\Message\RequestFactory as Psr7RequestFactory;

final class RequestFactory implements Psr7RequestFactory
{
    /**
     * {@inheritdoc}
     */
    public function createRequest($method, $uri, array $headers = [], $body = null, $protocolVersion = '1.1')
    {
        return new Request($method, $uri, $headers, $body, $protocolVersion);
    }
}
```

LANGUAGE: yaml
CODE:
```
services:
    AppBundle\Service\RequestFactory: ~
```

----------------------------------------

TITLE: Retrieving JWT Key from a Key Set in YAML
DESCRIPTION: Method to retrieve a JWT key from a JWKSet service. This approach allows specifying a JWKSet service ID and the index of the desired key within that set.
SOURCE: https://github.com/web-token/jwt-doc/blob/v1.x/symfony-bundle/key-and-key-set-management/key-management-jwk.md#2025-04-20_snippet_6

LANGUAGE: yaml
CODE:
```
jose:
    keys:
        key_name:
            jwkset: # Method
                key_set: 'jose.key_set.my_key_set' # JWKSet service
                index: 0 # Use key at index 0
```

----------------------------------------

TITLE: Creating JWK from Secret in PHP
DESCRIPTION: Creates a JWK from an existing shared secret with optional additional parameters.
SOURCE: https://github.com/web-token/jwt-doc/blob/v1.x/components/key-jwk-and-key-set-jwkset/key-management.md#2025-04-20_snippet_3

LANGUAGE: php
CODE:
```
<?php

use Jose\Component\KeyManagement\JWKFactory;

$jwk = JWKFactory::createFromSecret(
    'My Secret Key',       // The shared secret
    [                      // Optional additional members
        'alg' => 'HS256',
        'use' => 'sig'
    ]
);
```

----------------------------------------

TITLE: Retrieving JWEBuilderFactory from Container in PHP
DESCRIPTION: This snippet demonstrates how to retrieve the JWEBuilderFactory service from the application container. This factory is used to create JWE builders with specific configurations.
SOURCE: https://github.com/web-token/jwt-doc/blob/v1.x/symfony-bundle/encrypted-tokens/jwe-creation.md#2025-04-20_snippet_0

LANGUAGE: php
CODE:
```
<?php
use Jose\Component\Encryption\JWEBuilderFactory;

$jweBuilderFactory = $container->get(JWEBuilderFactory::class);
```

----------------------------------------

TITLE: Configuring JWS Serializer in YAML
DESCRIPTION: Shows YAML configuration for creating a public JWS Serializer Manager service with specified serialization modes. This creates a service named 'jose.jws_serializer.serializer1'.
SOURCE: https://github.com/web-token/jwt-doc/blob/v1.x/symfony-bundle/signed-tokens/jws-serializers.md#2025-04-20_snippet_2

LANGUAGE: yaml
CODE:
```
jose:
    jws:
        serializers:
            serializer1:
                serializers: ['jws_compact']
                is_public: true
```

----------------------------------------

TITLE: Generating Elliptic Curve (EC) Key
DESCRIPTION: This command generates an Elliptic Curve cryptographic key for the specified curve. Supported curves include P-256, P-384, and P-521. The output is a JWK representation of the key.
SOURCE: https://github.com/web-token/jwt-doc/blob/v1.x/console/README.md#2025-04-20_snippet_3

LANGUAGE: bash
CODE:
```
./jose.phar key:generate:ec P-256

{"kty":"EC","crv":"P-256","d":"BZ231BFhhHAhx-D4myu4O1hi-vUHnRqxoCsQKUKFNrA","x":"Tv5YeQuD1CWDbfre65kYX2Lq_MGnUq0Ek2yUFixy31M","y":"pj0FyoGaByyBlt5RbTHhBdgcC-S6cgxzLpxd6mGmsbM"}
```

----------------------------------------

TITLE: Adding Custom Tags to JWT Key Services in YAML
DESCRIPTION: Method to add custom tags and attributes to JWT key services. This allows better service organization and identification with optional attributes for each tag.
SOURCE: https://github.com/web-token/jwt-doc/blob/v1.x/symfony-bundle/key-and-key-set-management/key-management-jwk.md#2025-04-20_snippet_7

LANGUAGE: yaml
CODE:
```
jose:
    jwe:
        key_name:
            jwk: # Method
                value: '{"kty":"oct","k":"dzI6nbW4OcNF-AtfxGAmuyz7IpHRudBI0WgGjZWgaRJt6prBn3DARXgUR8NVwKhfL43QBIU2Un3AvCGCHRgY4TbEqhOi8-i98xxmCggNjde4oaW6wkJ2NgM3Ss9SOX9zS3lcVzdCMdum-RwVJ301kbin4UtGztuzJBeg5oVN00MGxjC2xWwyI0tgXVs-zJs5WlafCuGfX1HrVkIf5bvpE0MQCSjdJpSeVao6-RSTYDajZf7T88a2eVjeW31mMAg-jzAWfUrii61T_bYPJFOXW8kkRWoa1InLRdG6bKB9wQs9-VdXZP60Q4Yuj_WZ-lO7qV9AEFrUkkjpaDgZT86w2g"}'
                tags:
                    tag_name1: ~
                    tag_name2: {attribute1: 'foo'}
```

----------------------------------------

TITLE: Creating and Using JWK Objects (Legacy Implementation)
DESCRIPTION: This snippet shows how to create and use a JWK object using the legacy Jose\Object\JWK class. It demonstrates key creation, property access, thumbprint generation, JSON conversion, and other operations.
SOURCE: https://github.com/web-token/jwt-doc/blob/v1.x/migration/from-spomky-labs-jose/keys-jwk.md#2025-04-20_snippet_0

LANGUAGE: php
CODE:
```
<?php

use Jose\Object\JWK;

$key = new JWK([
    'kty' => 'RSA',
    'n' => '0vx7agoebGcQSuuPiLJXZptN9nndrQmbXEps2aiAFbWhM78LhWx4cbbfAAtVT86zwu1RK7aPFFxuhDR1L6tSoc_BJECPebWKRXjBZCiFV4n3oknjhMstn64tZ_2W-5JsGY4Hc5n9yBXArwl93lqt7_RN5w6Cf0h4QyQ5v-65YGjQR0_FDW2QvzqY368QQMicAtaSqzs8KJZgnYb9c7d0zgdAZHzu6qMQvRL5hajrn1n91CbOpbISD08qNLyrdkt-bFTWhAI4vMQFh6WeZu0fM4lFd2NcRwr3XPksINHaQ-G_xBniIqbw0Ls1jF44-csFCur-kEgU8awapJzKnqDKgw',
    'e' => 'AQAB',
    'alg' => 'RS256',
    'kid' => '2011-04-29',
]);

$key->has('kty'); // true
$key->get('kty'); // RSA
$key->thumbprint('sha256'); // The Sha-256 thumbprint of the key: "NzbLsXh8uDCcd-6MNwXF4W_7noWXFZAfHkxZsRGC9Xs"
json_encode($key); // The key as a Json object: "{"kty":"RSA","n":"0vx7agoebGcQSuuPiLJXZptN9n...8awapJzKnqDKgw","e":"AQAB","alg":"RS256","kid":"2011-04-29"}"
$key->toPublic(); // Converts a private key to a public one (not relevant in this example as the key is public)
$key->getAll(); // All key parameters
```

----------------------------------------

TITLE: Configuring Environment Variables for JWK and JWKSet in Symfony
DESCRIPTION: Configuration for loading JWK and JWKSet objects from environment variables in Symfony 3.4+. Shows how to define the parameters in YAML configuration and how to inject them into services.
SOURCE: https://github.com/web-token/jwt-doc/blob/v1.x/migration/from-spomky-labs-jose/key-sets-jwkset.md#2025-04-20_snippet_2

LANGUAGE: yaml
CODE:
```
parameters:
    private_key_set: '%env(jwkset:PRIVATE_KEY_SET)'
    signature_key: '%env(jwk:SIGNATURE_KEY)'
```

----------------------------------------

TITLE: Generating None Key for 'none' Algorithm
DESCRIPTION: This command generates a 'none' key type that is only used by the 'none' algorithm. The key parameters 'alg' and 'use' are automatically set in the output JWK.
SOURCE: https://github.com/web-token/jwt-doc/blob/v1.x/console/README.md#2025-04-20_snippet_7

LANGUAGE: bash
CODE:
```
./jose.phar key:generate:none

{"kty":"none","use":"sig","alg":"none"}
```

----------------------------------------

TITLE: Configuring JWT Keys from X509 Certificate Content in YAML
DESCRIPTION: Method to load a JWT key from X509 Certificate content. This approach allows directly providing the certificate content along with optional additional values.
SOURCE: https://github.com/web-token/jwt-doc/blob/v1.x/symfony-bundle/key-and-key-set-management/key-management-jwk.md#2025-04-20_snippet_4

LANGUAGE: yaml
CODE:
```
jose:
    keys:
        key_name:
            x5c: # Method
                value: '-----BEGIN CERTIFICATE----- ....'
                additional_values: # Optional values.
                    use: 'sig'
                    alg: 'RS256'
```

----------------------------------------

TITLE: Injecting JWKSet as a Service Parameter in Symfony
DESCRIPTION: Example of a PHP service class that accepts a JWKSet object via dependency injection, along with the corresponding Symfony service configuration.
SOURCE: https://github.com/web-token/jwt-doc/blob/v1.x/migration/from-spomky-labs-jose/key-sets-jwkset.md#2025-04-20_snippet_3

LANGUAGE: php
CODE:
```
<?php

declare(strict_types=1);

namespace AppBundle\Service;

use Jose\Component\Core\JWKSet;

final class Foo
{
    public function __construct(JWKSet $jwkset)
    {
        ...
    }
}
```

LANGUAGE: yaml
CODE:
```
services:
    AppBundle\Service\Foo:
        arguments:
            - '%private_key_set%'
```

----------------------------------------

TITLE: Configuring Custom Tags for Key Sets in YAML for JWT Framework
DESCRIPTION: Example of adding custom tags and attributes to a key set service in the JWT Framework. It demonstrates how to add tags with and without attributes.
SOURCE: https://github.com/web-token/jwt-doc/blob/v1.x/symfony-bundle/key-and-key-set-management/key-set-management-jwkset.md#2025-04-20_snippet_7

LANGUAGE: yaml
CODE:
```
jose:
    key_sets:
        key_name:
            jku: # Method
                url: 'https://login.microsoftonline.com/common/discovery/keys'
                tags:
                    tag_name1: ~
                    tag_name2: {attribute1: 'foo'}
```

----------------------------------------

TITLE: Converting JWK to PKCS#1 Format
DESCRIPTION: This command converts a JSON Web Key (JWK) into PKCS#1 format. The example shows converting an EC key, but it also works with RSA keys.
SOURCE: https://github.com/web-token/jwt-doc/blob/v1.x/console/README.md#2025-04-20_snippet_2

LANGUAGE: bash
CODE:
```
./jose.phar key:convert:pkcs1 '{"kty":"EC","crv":"P-256","d":"kiNCxSbRjlAbHrEbrwVKS8vIXUh6URChrmw","x":"-wdLWDWCZP6oFYl8aGVfU0MsFlckjaSVrO7hEsc8lgk","y":"rt8XDTalLMCRB5Tu9WQc2d0TOVwXXHkVDbI7cIig6r4"}'

-----BEGIN EC PRIVATE KEY-----
MHcCAQEEIJIjQsUm0Y5QGx6xG68N4GrprVrFSkvLyF1IelEQoa5soAoGCCqGSM49
AwEHoUQDQgAE+wdLWDWCZP6oFYl8aGVfU0MsFlckjaSVrO7hEsc8lgmu3xcNNqUs
wJEHlO71ZBzZ3RM5XBdceRUNsjtwiKDqvg==
-----END EC PRIVATE KEY-----
```

----------------------------------------

TITLE: Configuring JWT Keys from JWK Object in YAML
DESCRIPTION: Method to load a JWT key directly from a JWK object. This approach allows using a pre-defined JWK string value as the key source.
SOURCE: https://github.com/web-token/jwt-doc/blob/v1.x/symfony-bundle/key-and-key-set-management/key-management-jwk.md#2025-04-20_snippet_2

LANGUAGE: yaml
CODE:
```
jose:
    keys:
        key_name:
            jwk: # Method
                value: '{"kty":"oct","k":"dzI6nbW4OcNF-AtfxGAmuyz7IpHRudBI0WgGjZWgaRJt6prBn3DARXgUR8NVwKhfL43QBIU2Un3AvCGCHRgY4TbEqhOi8-i98xxmCggNjde4oaW6wkJ2NgM3Ss9SOX9zS3lcVzdCMdum-RwVJ301kbin4UtGztuzJBeg5oVN00MGxjC2xWwyI0tgXVs-zJs5WlafCuGfX1HrVkIf5bvpE0MQCSjdJpSeVao6-RSTYDajZf7T88a2eVjeW31mMAg-jzAWfUrii61T_bYPJFOXW8kkRWoa1InLRdG6bKB9wQs9-VdXZP60Q4Yuj_WZ-lO7qV9AEFrUkkjpaDgZT86w2g"}'
```

----------------------------------------

TITLE: Creating a JWK Service Using ConfigurationHelper
DESCRIPTION: Example of using the ConfigurationHelper to create a JWK (JSON Web Key) service. This code adds a key named 'acme_my_key' with custom tags, and sets it as a public service that can be accessed from the container.
SOURCE: https://github.com/web-token/jwt-doc/blob/v1.x/symfony-bundle/configuration-helper.md#2025-04-20_snippet_1

LANGUAGE: php
CODE:
```
ConfigurationHelper::addKey(
    $container,
    'acme_my_key',
    'jwk', [
        'value' => '{"kty":"oct","k":"dzI6nbW4OcNF-AtfxGAmuyz7IpHRudBI0WgGjZWgaRJt6prBn3DARXgUR8NVwKhfL43QBIU2Un3AvCGCHRgY4TbEqhOi8-i98xxmCggNjde4oaW6wkJ2NgM3Ss9SOX9zS3lcVzdCMdum-RwVJ301kbin4UtGztuzJBeg5oVN00MGxjC2xWwyI0tgXVs-zJs5WlafCuGfX1HrVkIf5bvpE0MQCSjdJpSeVao6-RSTYDajZf7T88a2eVjeW31mMAg-jzAWfUrii61T_bYPJFOXW8kkRWoa1InLRdG6bKB9wQs9-VdXZP60Q4Yuj_WZ-lO7qV9AEFrUkkjpaDgZT86w2g"}',
        'is_public' => true,
    ],
    [
        'tag_name1' => [],
        'tag_name2' => ['attribute1' => 'foo'],
    ]
);
```

----------------------------------------

TITLE: Legacy JKU Key Set Creation
DESCRIPTION: Example showing how to create a JWKSet from a JKU (JSON Web Key URL) using the legacy approach with JWKFactory.
SOURCE: https://github.com/web-token/jwt-doc/blob/v1.x/migration/from-spomky-labs-jose/key-sets-jwkset.md#2025-04-20_snippet_4

LANGUAGE: php
CODE:
```
<?php

use Jose\Factory\JWKFactory;

$jwkset = JWKFactory::createFromJKU('https://www.googleapis.com/oauth2/v3/certs');
```

----------------------------------------

TITLE: Analyzing JWK for Issues and Recommendations
DESCRIPTION: This command analyzes a provided JWK (JSON Web Key) and identifies potential issues or missing recommended parameters. It checks for missing parameters like 'alg', 'use', 'kid', and evaluates key length security.
SOURCE: https://github.com/web-token/jwt-doc/blob/v1.x/console/README.md#2025-04-20_snippet_1

LANGUAGE: bash
CODE:
```
./jose.phar key:analyze '{"kty":"oct","k":"N2aIJSQCxTo"}'

The parameter "alg" should be added.
The parameter "use" should be added.
The parameter "kid" should be added.
The key length is less than 128 bits.
```

----------------------------------------

TITLE: Configuring JWS Verifier with Custom Tags
DESCRIPTION: YAML configuration showing how to add custom tags and attributes to JWS Verifier services.
SOURCE: https://github.com/web-token/jwt-doc/blob/v1.x/symfony-bundle/signed-tokens/jws-verification.md#2025-04-20_snippet_3

LANGUAGE: yaml
CODE:
```
jose:
    jws:
        verifiers:
            verifier1:
                signature_algorithms: ['HS256', 'RS256', 'ES256']
                tags:
                    tag_name1: ~
                    tag_name2: {attribute1: 'foo'}
```

----------------------------------------

TITLE: Registering JoseFrameworkBundle in Symfony Application
DESCRIPTION: This code snippet shows how to register the JWT bundle in a Symfony application's bundle configuration. This is required when not using Symfony Flex or when manually configuring the application.
SOURCE: https://github.com/web-token/jwt-doc/blob/v1.x/symfony-bundle/README.md#2025-04-20_snippet_0

LANGUAGE: php
CODE:
```
/**
 * {@inheritdoc}
 */
public function registerBundles()
{
    $bundles = [
        ...
        new Jose\Bundle\JoseFramework\JoseFrameworkBundle(),
    ];

    return $bundles;
}
```

----------------------------------------

TITLE: Equivalent YAML Configuration for JWK Service
DESCRIPTION: YAML configuration equivalent to the PHP ConfigurationHelper example for creating a JWK service. This shows how the helper simplifies the creation of the same configuration that would otherwise require more verbose YAML.
SOURCE: https://github.com/web-token/jwt-doc/blob/v1.x/symfony-bundle/configuration-helper.md#2025-04-20_snippet_2

LANGUAGE: yaml
CODE:
```
jose:
    keys:
        acme_my_key:
            jwk:
                value: '{"kty":"oct","k":"dzI6nbW4OcNF-AtfxGAmuyz7IpHRudBI0WgGjZWgaRJt6prBn3DARXgUR8NVwKhfL43QBIU2Un3AvCGCHRgY4TbEqhOi8-i98xxmCggNjde4oaW6wkJ2NgM3Ss9SOX9zS3lcVzdCMdum-RwVJ301kbin4UtGztuzJBeg5oVN00MGxjC2xWwyI0tgXVs-zJs5WlafCuGfX1HrVkIf5bvpE0MQCSjdJpSeVao6-RSTYDajZf7T88a2eVjeW31mMAg-jzAWfUrii61T_bYPJFOXW8kkRWoa1InLRdG6bKB9wQs9-VdXZP60Q4Yuj_WZ-lO7qV9AEFrUkkjpaDgZT86w2g"}'
                is_public: true
                tags:
                    tag_name1: ~
                    tag_name2: {attribute1: 'foo'}
```

----------------------------------------

TITLE: Example JWS Token Output
DESCRIPTION: Shows an example of the final serialized JWS token in its compact form, containing three base64url-encoded segments separated by dots representing the header, payload, and signature.
SOURCE: https://github.com/web-token/jwt-doc/blob/v1.x/components/signed-tokens-jws/jws-creation.md#2025-04-20_snippet_3

LANGUAGE: text
CODE:
```
eyJhbGciOiJIUzI1NiJ9.eyJpYXQiOjE1MDc4OTY5OTIsIm5iZiI6MTUwNzg5Njk5MiwiZXhwIjoxNTA3OTAwNTkyLCJpc3MiOiJNeSBzZXJ2aWNlIiwiYXVkIjoiWW91ciBhcHBsaWNhdGlvbiJ9.eycp9PTdgO4WA-68-AMoHPwsKDr68NhjIQKz4lUkiI0
```

----------------------------------------

TITLE: Retrieving Configured JWS Verifier
DESCRIPTION: Shows how to retrieve a pre-configured JWS Verifier service from the container.
SOURCE: https://github.com/web-token/jwt-doc/blob/v1.x/symfony-bundle/signed-tokens/jws-verification.md#2025-04-20_snippet_2

LANGUAGE: php
CODE:
```
<?php
$jwsVerifier = $container->get('jose.jws_verifier.verifier1');
```

----------------------------------------

TITLE: Implementing PrependExtensionInterface in Bundle Extension for Jose Configuration
DESCRIPTION: Example of a bundle extension class that implements the PrependExtensionInterface, which is required to use the ConfigurationHelper. The prepend method is where the Jose configuration will be added.
SOURCE: https://github.com/web-token/jwt-doc/blob/v1.x/symfony-bundle/configuration-helper.md#2025-04-20_snippet_0

LANGUAGE: php
CODE:
```
<?php

declare(strict_types=1);

namespace AcmeBundle\DependencyInjection;

use Jose\Bundle\JoseFramework\Helper\ConfigurationHelper;
use Symfony\Component\DependencyInjection\ContainerBuilder;
use Symfony\Component\DependencyInjection\Extension\PrependExtensionInterface;
use Symfony\Component\HttpKernel\DependencyInjection\Extension;

final class AcmeExtension extends Extension implements PrependExtensionInterface
{
    ...

    /**
     * {@inheritdoc}
     */
    public function prepend(ContainerBuilder $container)
    {
        ... // The Helper will be called here
    }
}
```

----------------------------------------

TITLE: Creating and Manipulating JWKSet Objects (Legacy Implementation)
DESCRIPTION: Example of how to create and manipulate JWKSet objects using the legacy approach before recent changes. Shows initialization with direct values, JSON encoding, key addition/removal, and iteration.
SOURCE: https://github.com/web-token/jwt-doc/blob/v1.x/migration/from-spomky-labs-jose/key-sets-jwkset.md#2025-04-20_snippet_0

LANGUAGE: php
CODE:
```
<?php

use Jose\Object\JWKSet;

$keyset = new JWKSet(['keys' => [
    '71ee230371d19630bc17fb90ccf20ae632ad8cf8' => [
        'kid' => '71ee230371d19630bc17fb90ccf20ae632ad8cf8',
        'kty' => 'RSA',
        'alg' => 'RS256',
        'use' => 'sig',
        'n' => 'vnMTRCMvsS04M1yaKR112aB8RxOkWHFixZO68wCRlVLxK4ugckXVD_Ebcq-kms1T2XpoWntVfBuX40r2GvcD9UsTFt_MZlgd1xyGwGV6U_tfQUll5mKxCPjr60h83LXKJ_zmLXIqkV8tAoIg78a5VRWoms_0Bn09DKT3-RBWFjk=',
        'e' => 'AQAB',
]]]);

json_encode($keyset); // The key as a Json object
$keyset->addKey(new JWK(['kty' => 'none'])); // Add a key
$keyset->removeKey(1); // Remove a key
$keyset->prependKey(new JWK(['kty' => 'none'])); // Prepend a key
$keyset[0]; // Access keys like arrays do
foreach ($keyset as $key) { // Iterate on a key set
    ...
}
```

----------------------------------------

TITLE: Creating None Key in PHP
DESCRIPTION: Creates a special 'none' type key used exclusively with the 'none' algorithm.
SOURCE: https://github.com/web-token/jwt-doc/blob/v1.x/components/key-jwk-and-key-set-jwkset/key-management.md#2025-04-20_snippet_7

LANGUAGE: php
CODE:
```
<?php

use Jose\Component\KeyManagement\JWKFactory;

$key = JWKFactory::createNoneKey();
```

----------------------------------------

TITLE: Configuring Httplug and JKU Factory in YAML for JWT Framework
DESCRIPTION: Configuration for Httplug bundle and JKU Factory service in the JWT Framework. It sets up a client with caching and enables the JKU Factory with the specified client and request factory.
SOURCE: https://github.com/web-token/jwt-doc/blob/v1.x/symfony-bundle/key-and-key-set-management/key-set-management-jwkset.md#2025-04-20_snippet_2

LANGUAGE: yaml
CODE:
```
httplug: # Example of client configuration
    plugins:
        cache: # We use the cache plugin
            cache_pool: 'cache.app' # We use the PSR-6 Cache service of the application
            config:
                default_ttl: 1800 # TTL set to 30 min
    clients:
        acme:
            factory: 'httplug.factory.guzzle6'
            plugins: ['httplug.plugin.cache'] # We enable the cache plugin for that client.

jose:
    jku_factory:
        enabled: true
        client: 'httplug.client.acme' # The Httplug client
        request_factory: 'httplug.message_factory' # In general, you will use the same message factory as the one used by Httplug
```

----------------------------------------

TITLE: Configuring Nested Token Services in Symfony YAML
DESCRIPTION: YAML configuration for Symfony bundle that sets up nested token loaders and builders. This defines algorithms, serializers, and header checkers to create reusable services for JWT operations.
SOURCE: https://github.com/web-token/jwt-doc/blob/v1.x/advanced-topics/nested-tokens.md#2025-04-20_snippet_4

LANGUAGE: yaml
CODE:
```
jose:
    nested_token:
        loaders:
            loader_1:
                signature_algorithms: ['PS256']
                key_encryption_algorithms: ['RSA-OAEP']
                content_encryption_algorithms: ['A128GCM']
                jws_serializers: ['jws_compact']
                jws_header_checkers: [...]
                jwe_serializers: ['jwe_compact']
                jwe_header_checkers: [...]
                is_public: true
        builders:
            builder_1:
                signature_algorithms: ['PS256']
                key_encryption_algorithms: ['RSA-OAEP']
                content_encryption_algorithms: ['A128GCM']
                jws_serializers: ['jws_compact']
                jwe_serializers: ['jwe_compact']
                is_public: true
```

----------------------------------------

TITLE: Optimizing RSA Key with CRT Parameters
DESCRIPTION: This command optimizes an RSA key by calculating additional Chinese Remainder Theorem (CRT) parameters. This optimization can make cryptographic operations up to 10 times faster.
SOURCE: https://github.com/web-token/jwt-doc/blob/v1.x/console/README.md#2025-04-20_snippet_12

LANGUAGE: bash
CODE:
```
./jose.phar key:optimize '{"kty":"RSA","n":"l4mLzvr6ewIWrPvP6j5PYp0yPRhtkMW1F-dbQ1VWGoB_Mq5IIuflOo7W2ERyh71exUGkmvoesWL3zCtFIOnlxw","e":"AQAB","d":"lxh8oLq7el9QwNasL0JF4WwgJa7vwISB1v3Gj9LM8cpZPqXnPGPeoE5QAOUi1bJsIEqzHsR-rnLHsarlTfXMIQ"}'

{"kty":"RSA","n":"l4mLzvr6ewIWrPvP6j5PYp0yPRhtkMW1F-dbQ1VWGoB_Mq5IIuflOo7W2ERyh71exUGkmvoesWL3zCtFIOnlxw","e":"AQAB","d":"lxh8oLq7el9QwNasL0JF4WwgJa7vwISB1v3Gj9LM8cpZPqXnPGPeoE5QAOUi1bJsIEqzHsR-rnLHsarlTfXMIQ","p":"w0WuNlrO16rSPKHQn02FsOwzczlchC9ZpdS-00JKOr8","q":"xqn5LMfXwhWK-RGlXkSUHKCPb-SLKV8f8p41pDkjvvk","dp":"NGGAtfvt-FROSQ1vFQyKjEcQFhyRALRi6-UBu1HQ76k","dq":"kUqaO4_kUcNjogivwqOxFsauYIzq4dT6Dnx6iqJnbDE","qi":"TwJ4WOG0r1q6vZ13Kze2HPXtlnllyq9ZfClrVwovC_I"}
```

----------------------------------------

TITLE: Configuring JWKSet Object in YAML for JWT Framework
DESCRIPTION: Example of configuring a key set directly using a JWKSet object in YAML. It demonstrates how to include the JWKSet value as a JSON string.
SOURCE: https://github.com/web-token/jwt-doc/blob/v1.x/symfony-bundle/key-and-key-set-management/key-set-management-jwkset.md#2025-04-20_snippet_1

LANGUAGE: yaml
CODE:
```
jose:
    key_sets:
        key_name:
            jwkset: # Method
                value: '{"keys":[{"kty":"oct","k":"dzI6nbW4OcNF-AtfxGAmuyz7IpHRudBI0WgGjZWgaRJt6prBn3DARXgUR8NVwKhfL43QBIU2Un3AvCGCHRgY4TbEqhOi8-i98xxmCggNjde4oaW6wkJ2NgM3Ss9SOX9zS3lcVzdCMdum-RwVJ301kbin4UtGztuzJBeg5oVN00MGxjC2xWwyI0tgXVs-zJs5WlafCuGfX1HrVkIf5bvpE0MQCSjdJpSeVao6-RSTYDajZf7T88a2eVjeW31mMAg-jzAWfUrii61T_bYPJFOXW8kkRWoa1InLRdG6bKB9wQs9-VdXZP60Q4Yuj_WZ-lO7qV9AEFrUkkjpaDgZT86w2g"},{"kty":"oct","k":"bwIAv5Nn-fo8p4LCEvM4IR9eLXgzJRs8jXCLb3xR0tDJGiZ46KheO4ip6htFKyN2aqJqlNi9-7hB6I1aLLy1IRT9-vcBoCSGu977cNAUuRLkRp7vo8s6MsxhB8WvQBDRZghV7jIYaune-3vbE7iDU2AESr8BUtorckLoO9uW__fIabaa3hJMMQIHCzYQbJKZvlCRCKWMk2H_zuS4JeDFTvyZH1skJYF_TET1DrCZHMPicw-Yk3_m2P-ilC-yidPPoVzeU8Jj3tQ6gtX3975qiQW7pt2qbgjKAuq2wsz_9hxLBtMB5rQPafFoxop7O4BklvZ9-ECcK6dfI2CAx9_tjQ"}]}'
```

----------------------------------------

TITLE: Configuring Key Sets in YAML for JWT Framework
DESCRIPTION: Basic structure for configuring key sets in the JWT Framework. It shows how to set up a key set with a method and public/private option.
SOURCE: https://github.com/web-token/jwt-doc/blob/v1.x/symfony-bundle/key-and-key-set-management/key-set-management-jwkset.md#2025-04-20_snippet_0

LANGUAGE: yaml
CODE:
```
jose: # Configuration of the JWT Framework
    key_sets: # Configuration of the keys
        keyset_name: # Unique key name
            method_name: # Name of the method
                ...
                is_public: true
```