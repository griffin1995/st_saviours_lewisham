TITLE: Declaring State with useState in React
DESCRIPTION: This snippet demonstrates how to declare a state variable using the `useState` Hook in a React functional component. `useState` allows components to 'remember' information, such as user input or selected items. It returns an array containing the current state value and a function to update it. Here, `index` is initialized to `0` for an `ImageGallery` component.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/hooks.md#_snippet_0

LANGUAGE: js
CODE:
```
function ImageGallery() {
  const [index, setIndex] = useState(0);
  // ...
```

----------------------------------------

TITLE: Declaring Multiple State Variables with useState in React
DESCRIPTION: This snippet demonstrates the basic syntax for declaring state variables using the `useState` Hook in React. Each call to `useState` initializes a state variable with a default value (e.g., `0` for `index`, `false` for `showMore`) and returns an array containing the current state value and its corresponding setter function.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/adding-interactivity.md#_snippet_2

LANGUAGE: JavaScript
CODE:
```
const [index, setIndex] = useState(0);
const [showMore, setShowMore] = useState(false);
```

----------------------------------------

TITLE: Rendering List Items with Unique Keys in React
DESCRIPTION: This React JSX snippet demonstrates how to render a list item (`<li>`) using a unique `key` property. The `key` prop, set to `user.id`, helps React efficiently identify and re-render list items when the list changes, preventing issues with state preservation during updates, additions, or removals.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/tutorial-tic-tac-toe.md#_snippet_72

LANGUAGE: JavaScript
CODE:
```
<li key={user.id}>
  {user.name}: {user.taskCount} tasks left
</li>
```

----------------------------------------

TITLE: React App Demonstrating Object Dependency Issue
DESCRIPTION: A complete React application (`App`, `ChatRoom`, `chat.js`, CSS) illustrating how recreating an object dependency (`options`) on each render causes a `useEffect` to re-synchronize unnecessarily when unrelated state (`message`) changes.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/removing-effect-dependencies.md#_snippet_28

LANGUAGE: javascript
CODE:
```
import { useState, useEffect } from 'react';
import { createConnection } from './chat.js';

const serverUrl = 'https://localhost:1234';

function ChatRoom({ roomId }) {
  const [message, setMessage] = useState('');

  // Temporarily disable the linter to demonstrate the problem
  // eslint-disable-next-line react-hooks/exhaustive-deps
  const options = {
    serverUrl: serverUrl,
    roomId: roomId
  };

  useEffect(() => {
    const connection = createConnection(options);
    connection.connect();
    return () => connection.disconnect();
  }, [options]);

  return (
    <>
      <h1>Welcome to the {roomId} room!</h1>
      <input value={message} onChange={e => setMessage(e.target.value)} />
    </>
  );
}

export default function App() {
  const [roomId, setRoomId] = useState('general');
  return (
    <>
      <label>
        Choose the chat room:{' '}
        <select
          value={roomId}
          onChange={e => setRoomId(e.target.value)}
        >
          <option value="general">general</option>
          <option value="travel">travel</option>
          <option value="music">music</option>
        </select>
      </label>
      <hr />
      <ChatRoom roomId={roomId} />
    </>
  );
}
```

LANGUAGE: javascript
CODE:
```
export function createConnection({ serverUrl, roomId }) {
  // A real implementation would actually connect to the server
  return {
    connect() {
      console.log('✅ Connecting to "' + roomId + '" room at ' + serverUrl + '...');
    },
    disconnect() {
      console.log('❌ Disconnected from "' + roomId + '" room at ' + serverUrl);
    }
  };
}
```

LANGUAGE: css
CODE:
```
input { display: block; margin-bottom: 20px; }
button { margin-left: 10px; }

```

----------------------------------------

TITLE: React Task Management Application with Reducer and Context
DESCRIPTION: This comprehensive example illustrates building a task management application in React. It leverages the `useReducer` hook for centralized state logic and the Context API to make the state and dispatch function globally accessible to components without prop drilling. The application includes functionalities for adding, editing, deleting, and marking tasks as complete.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/managing-state.md#_snippet_11

LANGUAGE: javascript
CODE:
```
import AddTask from './AddTask.js';
import TaskList from './TaskList.js';
import { TasksProvider } from './TasksContext.js';

export default function TaskApp() {
  return (
    <TasksProvider>
      <h1>Day off in Kyoto</h1>
      <AddTask />
      <TaskList />
    </TasksProvider>
  );
}
```

LANGUAGE: javascript
CODE:
```
import { createContext, useContext, useReducer } from 'react';

const TasksContext = createContext(null);
const TasksDispatchContext = createContext(null);

export function TasksProvider({ children }) {
  const [tasks, dispatch] = useReducer(
    tasksReducer,
    initialTasks
  );

  return (
    <TasksContext value={tasks}>
      <TasksDispatchContext value={dispatch}>
        {children}
      </TasksDispatchContext>
    </TasksContext>
  );
}

export function useTasks() {
  return useContext(TasksContext);
}

export function useTasksDispatch() {
  return useContext(TasksDispatchContext);
}

function tasksReducer(tasks, action) {
  switch (action.type) {
    case 'added': {
      return [...tasks, {
        id: action.id,
        text: action.text,
        done: false
      }];
    }
    case 'changed': {
      return tasks.map(t => {
        if (t.id === action.task.id) {
          return action.task;
        } else {
          return t;
        }
      });
    }
    case 'deleted': {
      return tasks.filter(t => t.id !== action.id);
    }
    default: {
      throw Error('Unknown action: ' + action.type);
    }
  }
}

const initialTasks = [
  { id: 0, text: 'Philosopher’s Path', done: true },
  { id: 1, text: 'Visit the temple', done: false },
  { id: 2, text: 'Drink matcha', done: false }
];
```

LANGUAGE: javascript
CODE:
```
import { useState, useContext } from 'react';
import { useTasksDispatch } from './TasksContext.js';

export default function AddTask({ onAddTask }) {
  const [text, setText] = useState('');
  const dispatch = useTasksDispatch();
  return (
    <>
      <input
        placeholder="Add task"
        value={text}
        onChange={e => setText(e.target.value)}
      />
      <button onClick={() => {
        setText('');
        dispatch({
          type: 'added',
          id: nextId++,
          text: text,
        });
      }}>Add</button>
    </>
  );
}

let nextId = 3;
```

LANGUAGE: javascript
CODE:
```
import { useState, useContext } from 'react';
import { useTasks, useTasksDispatch } from './TasksContext.js';

export default function TaskList() {
  const tasks = useTasks();
  return (
    <ul>
      {tasks.map(task => (
        <li key={task.id}>
          <Task task={task} />
        </li>
      ))}
    </ul>
  );
}

function Task({ task }) {
  const [isEditing, setIsEditing] = useState(false);
  const dispatch = useTasksDispatch();
  let taskContent;
  if (isEditing) {
    taskContent = (
      <>
        <input
          value={task.text}
          onChange={e => {
            dispatch({
              type: 'changed',
              task: {
                ...task,
                text: e.target.value
              }
            });
          }} />
        <button onClick={() => setIsEditing(false)}>
          Save
        </button>
      </>
    );
  } else {
    taskContent = (
      <>
        {task.text}
        <button onClick={() => setIsEditing(true)}>
          Edit
        </button>
      </>
    );
  }
  return (
    <label>
      <input
        type="checkbox"
        checked={task.done}
        onChange={e => {
          dispatch({
            type: 'changed',
            task: {
              ...task,
              done: e.target.checked
            }
          });
        }}
      />
      {taskContent}
      <button onClick={() => {
        dispatch({
          type: 'deleted',
          id: task.id
        });
      }}>
        Delete
      </button>
    </label>
  );
}
```

LANGUAGE: css
CODE:
```
button { margin: 5px; }
li { list-style-type: none; }
ul, li { margin: 0; padding: 0; }
```

----------------------------------------

TITLE: Understanding React State Updates with Multiple setNumber Calls (JavaScript)
DESCRIPTION: This React component demonstrates how `setNumber` calls within a single event handler do not immediately update the `number` state for the current render. Despite calling `setNumber(number + 1)` three times, the `number` value used in each call is the state value from the *beginning* of the render, resulting in the counter incrementing by only one per click. It highlights that state updates are batched and applied for the *next* render.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/state-as-a-snapshot.md#_snippet_2

LANGUAGE: JavaScript
CODE:
```
import { useState } from 'react';

export default function Counter() {
  const [number, setNumber] = useState(0);

  return (
    <>
      <h1>{number}</h1>
      <button onClick={() => {
        setNumber(number + 1);
        setNumber(number + 1);
        setNumber(number + 1);
      }}>+3</button>
    </>
  )
}
```

----------------------------------------

TITLE: ChatRoom Component with useEffect Cleanup
DESCRIPTION: This complete example demonstrates the `ChatRoom` component with a `useEffect` hook that includes a cleanup function. This ensures that the chat connection is properly disconnected when the component unmounts or is remounted, preventing resource leaks and exhibiting correct behavior in both development and production environments.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/synchronizing-with-effects.md#_snippet_18

LANGUAGE: javascript
CODE:
```
import { useState, useEffect } from 'react';
import { createConnection } from './chat.js';

export default function ChatRoom() {
  useEffect(() => {
    const connection = createConnection();
    connection.connect();
    return () => connection.disconnect();
  }, []);
  return <h1>Welcome to the chat!</h1>;
}
```

LANGUAGE: javascript
CODE:
```
export function createConnection() {
  // A real implementation would actually connect to the server
  return {
    connect() {
      console.log('✅ Connecting...');
    },
    disconnect() {
      console.log('❌ Disconnected.');
    }
  };
}
```

LANGUAGE: css
CODE:
```
input { display: block; margin-bottom: 20px; }
```

----------------------------------------

TITLE: Immutable Update of Nested Object State (JavaScript - Step-by-step)
DESCRIPTION: This JavaScript snippet demonstrates the step-by-step process of immutably updating a nested object property in React. It involves creating new copies of both the nested `artwork` object and the parent `person` object using the spread syntax (`...`) before calling `setPerson` to update the state.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/updating-objects-in-state.md#_snippet_21

LANGUAGE: js
CODE:
```
const nextArtwork = { ...person.artwork, city: 'New Delhi' };
const nextPerson = { ...person, artwork: nextArtwork };
setPerson(nextPerson);
```

----------------------------------------

TITLE: Immutable Array Update using `map` and Object Spread in React
DESCRIPTION: This code demonstrates the correct, immutable way to update an object within an array in React state. It uses the `map` method to iterate over the array, creating a *new* object for the item that needs updating using the object spread syntax (`{ ...artwork, seen: nextSeen }`), and returning existing objects unchanged. This prevents direct mutation and ensures state isolation.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/updating-arrays-in-state.md#_snippet_13

LANGUAGE: javascript
CODE:
```
setMyList(myList.map(artwork => {
  if (artwork.id === artworkId) {
    // Create a *new* object with changes
    return { ...artwork, seen: nextSeen };
  } else {
    // No changes
    return artwork;
  }
}));
```

----------------------------------------

TITLE: Refactoring Feedback Form with Single Status State (React)
DESCRIPTION: This React component refactors the feedback form to use a single `status` state variable instead of multiple booleans, preventing contradictory states. The `status` can be `'typing'`, `'sending'`, or `'sent'`. The `handleSubmit` function updates the `status` through these phases. Derived constants `isSending` and `isSent` are computed from `status` for readability, ensuring they always reflect a valid state. This approach improves state management robustness.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/choosing-the-state-structure.md#_snippet_5

LANGUAGE: JavaScript
CODE:
```
import { useState } from 'react';

export default function FeedbackForm() {
  const [text, setText] = useState('');
  const [status, setStatus] = useState('typing');

  async function handleSubmit(e) {
    e.preventDefault();
    setStatus('sending');
    await sendMessage(text);
    setStatus('sent');
  }

  const isSending = status === 'sending';
  const isSent = status === 'sent';

  if (isSent) {
    return <h1>Thanks for feedback!</h1>
  }

  return (
    <form onSubmit={handleSubmit}>
      <p>How was your stay at The Prancing Pony?</p>
      <textarea
        disabled={isSending}
        value={text}
        onChange={e => setText(e.target.value)}
      />
      <br />
      <button
        disabled={isSending}
        type="submit"
      >
        Send
      </button>
      {isSending && <p>Sending...</p>}
    </form>
  );
}

// Pretend to send a message.
function sendMessage(text) {
  return new Promise(resolve => {
    setTimeout(resolve, 2000);
  });
}
```

----------------------------------------

TITLE: Pure State Updater Function (Correct) - JavaScript
DESCRIPTION: This snippet demonstrates a pure updater function that correctly updates the state by creating a new array using the spread syntax (`...prevTodos`) instead of mutating the original. This ensures immutability, and even if called twice in Strict Mode, the behavior remains consistent.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useState.md#_snippet_43

LANGUAGE: js
CODE:
```
setTodos(prevTodos => {
  // ✅ Correct: replacing with new state
  return [...prevTodos, createTodo()];
});
```

----------------------------------------

TITLE: Mutating Object State Directly in React (Incorrect)
DESCRIPTION: This snippet demonstrates an incorrect way to update an object in React state by directly mutating its property (`position.x = 5`). This approach does not trigger a re-render in React.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/updating-objects-in-state.md#_snippet_3

LANGUAGE: js
CODE:
```
position.x = 5;
```

----------------------------------------

TITLE: Updating State and Triggering Re-renders in React (JavaScript)
DESCRIPTION: This React component demonstrates how state updates trigger re-renders. It uses `useState` for `isSent` and `message`. The `onSubmit` handler prevents default form submission, sets `isSent` to `true` to trigger a re-render, and calls `sendMessage`. The component conditionally renders a message or a form based on the `isSent` state, showcasing how event handlers interact with a snapshot of the state.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/state-as-a-snapshot.md#_snippet_0

LANGUAGE: JavaScript
CODE:
```
import { useState } from 'react';

export default function Form() {
  const [isSent, setIsSent] = useState(false);
  const [message, setMessage] = useState('Hi!');
  if (isSent) {
    return <h1>Your message is on its way!</h1>
  }
  return (
    <form onSubmit={(e) => {
      e.preventDefault();
      setIsSent(true);
      sendMessage(message);
    }}>
      <textarea
        placeholder="Message"
        value={message}
        onChange={e => setMessage(e.target.value)}
      />
      <button type="submit">Send</button>
    </form>
  );
}

function sendMessage(message) {
  // ...
}
```

----------------------------------------

TITLE: Incorrectly Buying Product with React useEffect
DESCRIPTION: This snippet demonstrates an incorrect use of `useEffect` for an action like buying a product. Placing a `fetch` request for `/api/buy` inside `useEffect` with an empty dependency array is problematic because it will execute twice in development (due to Strict Mode) and potentially on back navigation, leading to unintended duplicate purchases. This highlights that actions triggered by user interaction should not be in Effects.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/synchronizing-with-effects.md#_snippet_28

LANGUAGE: js
CODE:
```
useEffect(() => {
  // 🔴 Wrong: This Effect fires twice in development, exposing a problem in the code.
  fetch('/api/buy', { method: 'POST' });
}, []);
```

----------------------------------------

TITLE: Declaring State with useState in React
DESCRIPTION: This snippet demonstrates the basic syntax for declaring a state variable using the `useState` React Hook. It shows how to destructure the returned array into a state variable (`state`) and its corresponding setter function (`setState`), initialized with `initialState`.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useState.md#_snippet_0

LANGUAGE: JavaScript
CODE:
```
const [state, setState] = useState(initialState)
```

----------------------------------------

TITLE: Incorrect Dependency: Function as React useEffect Dependency
DESCRIPTION: Illustrates the problem of declaring a function (like `createOptions`) as a direct dependency of `useEffect`. Since functions are re-created on every render by default, this causes the effect to re-run constantly, leading to performance issues and incorrect behavior, such as continuous re-connections.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useCallback.md#_snippet_20

LANGUAGE: JavaScript
CODE:
```
  useEffect(() => {
    const options = createOptions();
    const connection = createConnection(options);
    connection.connect();
    return () => connection.disconnect();
  }, [createOptions]); // 🔴 Problem: This dependency changes on every render
  // ...

```

----------------------------------------

TITLE: Splitting City and Area Fetching into Separate Effects
DESCRIPTION: Demonstrates the recommended approach of separating unrelated data fetching logic into distinct `useEffect` hooks. One effect fetches cities based on the country, and the other fetches areas based on the selected city, preventing unintended refetches.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/removing-effect-dependencies.md#_snippet_16

LANGUAGE: js
CODE:
```
function ShippingForm({ country }) {
  const [cities, setCities] = useState(null);
  useEffect(() => {
    let ignore = false;
    fetch(`/api/cities?country=${country}`)
      .then(response => response.json())
      .then(json => {
        if (!ignore) {
          setCities(json);
        }
      });
    return () => {
      ignore = true;
    };
  }, [country]); // ✅ All dependencies declared

  const [city, setCity] = useState(null);
  const [areas, setAreas] = useState(null);
  useEffect(() => {
    if (city) {
      let ignore = false;
      fetch(`/api/areas?city=${city}`)
        .then(response => response.json())
        .then(json => {
          if (!ignore) {
            setAreas(json);
          }
        });
      return () => {
        ignore = true;
      };
    }
  }, [city]); // ✅ All dependencies declared

  // ...
}
```

----------------------------------------

TITLE: Full React Application with Dynamic Chat Room Connection
DESCRIPTION: This comprehensive React application demonstrates a `ChatRoom` component that manages a chat connection using `useEffect`, with both `roomId` (prop) and `serverUrl` (state) as reactive dependencies. The `App` component allows users to dynamically change the `roomId`, showcasing how the `useEffect` re-synchronizes the connection.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/lifecycle-of-reactive-effects.md#_snippet_17

LANGUAGE: JavaScript
CODE:
```
import { useState, useEffect } from 'react';
import { createConnection } from './chat.js';

function ChatRoom({ roomId }) {
  const [serverUrl, setServerUrl] = useState('https://localhost:1234');

  useEffect(() => {
    const connection = createConnection(serverUrl, roomId);
    connection.connect();
    return () => connection.disconnect();
  }, [roomId, serverUrl]);

  return (
    <>
      <label>
        Server URL:{' '}
        <input
          value={serverUrl}
          onChange={e => setServerUrl(e.target.value)}
        />
      </label>
      <h1>Welcome to the {roomId} room!</h1>
    </>
  );
}

export default function App() {
  const [roomId, setRoomId] = useState('general');
  return (
    <>
      <label>
        Choose the chat room:{' '}
        <select
          value={roomId}
          onChange={e => setRoomId(e.target.value)}
        >
          <option value="general">general</option>
          <option value="travel">travel</option>
          <option value="music">music</option>
        </select>
      </label>
      <hr />
      <ChatRoom roomId={roomId} />
    </>
  );
}
```

----------------------------------------

TITLE: Implementing React TodoList and NewTodo Components
DESCRIPTION: This snippet defines the main `TodoList` component, which manages the list of to-do items and their visibility, and the `NewTodo` component for adding new items. It demonstrates state management using `useState`, prop passing, and conditional rendering based on todo completion status. The `TodoList` component imports helper functions from `todos.js` for data manipulation and filtering.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/you-might-not-need-an-effect.md#_snippet_41

LANGUAGE: JavaScript
CODE:
```
import { initialTodos, createTodo, getVisibleTodos } from './todos.js';

export default function TodoList() {
  const [todos, setTodos] = useState(initialTodos);
  const [showActive, setShowActive] = useState(false);
  const visibleTodos = getVisibleTodos(todos, showActive);

  return (
    <>
      <label>
        <input
          type="checkbox"
          checked={showActive}
          onChange={e => setShowActive(e.target.checked)}
        />
        Show only active todos
      </label>
      <NewTodo onAdd={newTodo => setTodos([...todos, newTodo])} />
      <ul>
        {visibleTodos.map(todo => (
          <li key={todo.id}>
            {todo.completed ? <s>{todo.text}</s> : todo.text}
          </li>
        ))}
      </ul>
    </>
  );
}

function NewTodo({ onAdd }) {
  const [text, setText] = useState('');

  function handleAddClick() {
    setText('');
    onAdd(createTodo(text));
  }

  return (
    <>
      <input value={text} onChange={e => setText(e.target.value)} />
      <button onClick={handleAddClick}>
        Add
      </button>
    </>
  );
}
```

----------------------------------------

TITLE: Displaying Time and Color with Clock Component (React JS)
DESCRIPTION: This React functional component, `Clock`, receives `color` and `time` as props. It renders an `<h1>` element displaying the `time` with the specified `color` applied via inline styles. This snippet demonstrates how props are used to customize a component's appearance and content.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/passing-props-to-a-component.md#_snippet_17

LANGUAGE: js
CODE:
```
export default function Clock({ color, time }) {
  return (
    <h1 style={{ color: color }}>
      {time}
    </h1>
  );
}
```

----------------------------------------

TITLE: Complete React Tic-Tac-Toe Game with Time Travel
DESCRIPTION: This comprehensive JavaScript snippet provides the full implementation of a React Tic-Tac-Toe game, including components for `Square`, `Board`, and `Game`. It incorporates state management for game history, current move tracking, and functions like `handlePlay` and `jumpTo` to enable "time travel" through past game states. It also includes the `calculateWinner` utility.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/tutorial-tic-tac-toe.md#_snippet_80

LANGUAGE: JavaScript
CODE:
```
import { useState } from 'react';

function Square({value, onSquareClick}) {
  return (
    <button className="square" onClick={onSquareClick}>
      {value}
    </button>
  );
}

function Board({ xIsNext, squares, onPlay }) {
  function handleClick(i) {
    if (calculateWinner(squares) || squares[i]) {
      return;
    }
    const nextSquares = squares.slice();
    if (xIsNext) {
      nextSquares[i] = 'X';
    } else {
      nextSquares[i] = 'O';
    }
    onPlay(nextSquares);
  }

  const winner = calculateWinner(squares);
  let status;
  if (winner) {
    status = 'Winner: ' + winner;
  } else {
    status = 'Next player: ' + (xIsNext ? 'X' : 'O');
  }

  return (
    <>
      <div className="status">{status}</div>
      <div className="board-row">
        <Square value={squares[0]} onSquareClick={() => handleClick(0)} />
        <Square value={squares[1]} onSquareClick={() => handleClick(1)} />
        <Square value={squares[2]} onSquareClick={() => handleClick(2)} />
      </div>
      <div className="board-row">
        <Square value={squares[3]} onSquareClick={() => handleClick(3)} />
        <Square value={squares[4]} onSquareClick={() => handleClick(4)} />
        <Square value={squares[5]} onSquareClick={() => handleClick(5)} />
      </div>
      <div className="board-row">
        <Square value={squares[6]} onSquareClick={() => handleClick(6)} />
        <Square value={squares[7]} onSquareClick={() => handleClick(7)} />
        <Square value={squares[8]} onSquareClick={() => handleClick(8)} />
      </div >
    </>
  );
}

export default function Game() {
  const [xIsNext, setXIsNext] = useState(true);
  const [history, setHistory] = useState([Array(9).fill(null)]);
  const [currentMove, setCurrentMove] = useState(0);
  const currentSquares = history[currentMove];

  function handlePlay(nextSquares) {
    const nextHistory = [...history.slice(0, currentMove + 1), nextSquares];
    setHistory(nextHistory);
    setCurrentMove(nextHistory.length - 1);
    setXIsNext(!xIsNext);
  }

  function jumpTo(nextMove) {
    setCurrentMove(nextMove);
    setXIsNext(nextMove % 2 === 0);
  }

  const moves = history.map((squares, move) => {
    let description;
    if (move > 0) {
      description = 'Go to move #' + move;
    } else {
      description = 'Go to game start';
    }
    return (
      <li key={move}>
        <button onClick={() => jumpTo(move)}>{description}</button>
      </li>
    );
  });

  return (
    <div className="game">
      <div className="game-board">
        <Board xIsNext={xIsNext} squares={currentSquares} onPlay={handlePlay} />
      </div>
      <div className="game-info">
        <ol>{moves}</ol>
      </div>
    </div>
  );
}

function calculateWinner(squares) {
  const lines = [
    [0, 1, 2],
    [3, 4, 5],
    [6, 7, 8],
    [0, 3, 6],
    [1, 4, 7],
    [2, 5, 8],
    [0, 4, 8],
    [2, 4, 6],
  ];
  for (let i = 0; i < lines.length; i++) {
    const [a, b, c] = lines[i];
    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {
      return squares[a];
    }
  }
  return null;
}
```

----------------------------------------

TITLE: Understanding State Snapshot Behavior in React Event Handlers
DESCRIPTION: This JavaScript function `handleClick` demonstrates that calling `setCount` does not immediately update the `count` variable within the currently executing function scope. The `count` variable retains its 'snapshot' value from the render that initiated the event handler, even after a state update request. Subsequent `console.log` calls, even within a `setTimeout`, will reflect this old snapshot value.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useState.md#_snippet_34

LANGUAGE: JavaScript
CODE:
```
function handleClick() {
  console.log(count);  // 0

  setCount(count + 1); // Request a re-render with 1
  console.log(count);  // Still 0!

  setTimeout(() => {
    console.log(count); // Also 0!
  }, 5000);
}
```

----------------------------------------

TITLE: Creating and Rendering Basic React Components - JavaScript
DESCRIPTION: This snippet demonstrates how to define and use basic React components. The `Profile` component renders an image, while the `Gallery` component renders a heading and multiple instances of the `Profile` component, showcasing component reusability. The accompanying CSS styles the image elements.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/describing-the-ui.md#_snippet_0

LANGUAGE: JavaScript
CODE:
```
function Profile() {
  return (
    <img
      src="https://i.imgur.com/MK3eW3As.jpg"
      alt="Katherine Johnson"
    />
  );
}

export default function Gallery() {
  return (
    <section>
      <h1>Amazing scientists</h1>
      <Profile />
      <Profile />
      <Profile />
    </section>
  );
}
```

LANGUAGE: CSS
CODE:
```
img { margin: 0 10px 10px 0; height: 90px; }
```

----------------------------------------

TITLE: Installing React and React DOM with npm
DESCRIPTION: This command installs the latest React 19 and React DOM packages using npm, ensuring an exact version match for stability. It's the primary step for upgrading an existing React project or setting up a new one with React 19.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/blog/2024/04/25/react-19-upgrade-guide.md#_snippet_0

LANGUAGE: bash
CODE:
```
npm install --save-exact react@^19.0.0 react-dom@^19.0.0
```

----------------------------------------

TITLE: Calling an Effect Event from useEffect
DESCRIPTION: Shows how to call the declared Effect Event (`onConnected`) from within a `useEffect` Hook. By moving the non-reactive logic into the Effect Event, the `theme` dependency can be removed from the `useEffect` dependency array. Effect Events themselves are not reactive and should not be included in the dependency array.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/separating-events-from-effects.md#_snippet_15

LANGUAGE: js
CODE:
```
function ChatRoom({ roomId, theme }) {
  const onConnected = useEffectEvent(() => {
    showNotification('Connected!', theme);
  });

  useEffect(() => {
    const connection = createConnection(serverUrl, roomId);
    connection.on('connected', () => {
      onConnected();
    });
    connection.connect();
    return () => connection.disconnect();
  }, [roomId]); // ✅ All dependencies declared
  // ...
```

----------------------------------------

TITLE: Fetching Data with useEffect (Race Condition Fix) - JavaScript/React
DESCRIPTION: This snippet shows how to fix the race condition in data fetching with `useEffect` by adding a cleanup function. A boolean flag `ignore` is used to prevent `setResults` from being called if a newer request has already been initiated, ensuring only the latest response updates the state.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/you-might-not-need-an-effect.md#_snippet_30

LANGUAGE: JavaScript
CODE:
```
function SearchResults({ query }) {
  const [results, setResults] = useState([]);
  const [page, setPage] = useState(1);
  useEffect(() => {
    let ignore = false;
    fetchResults(query, page).then(json => {
      if (!ignore) {
        setResults(json);
      }
    });
    return () => {
      ignore = true;
    };
  }, [query, page]);

  function handleNextPageClick() {
    setPage(page + 1);
  }
  // ...
}
```

----------------------------------------

TITLE: Correct: Synchronizing time with `useEffect` in React
DESCRIPTION: This example shows the correct way to handle non-idempotent operations like getting the current date in React. By encapsulating `new Date()` within a `useEffect` hook, the operation is moved outside the render phase, ensuring the component remains idempotent while still updating the time dynamically. The `useTime` custom hook manages the state and `setInterval` cleanup.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/rules/components-and-hooks-must-be-pure.md#_snippet_4

LANGUAGE: js
CODE:
```
import { useState, useEffect } from 'react';

function useTime() {
  // 1. Keep track of the current date's state. `useState` receives an initializer function as its
  //    initial state. It only runs once when the hook is called, so only the current date at the
  //    time the hook is called is set first.
  const [time, setTime] = useState(() => new Date());

  useEffect(() => {
    // 2. Update the current date every second using `setInterval`.
    const id = setInterval(() => {
      setTime(new Date()); // ✅ Good: non-idempotent code no longer runs in render
    }, 1000);
    // 3. Return a cleanup function so we don't leak the `setInterval` timer.
    return () => clearInterval(id);
  }, []);

  return time;
}

export default function Clock() {
  const time = useTime();
  return <span>{time.toLocaleString()}</span>;
}
```

----------------------------------------

TITLE: React use API for Reading Promises in Render
DESCRIPTION: The `use` API in React 19 enables components to read resources like promises directly within the render function. When `use` encounters a promise, React will suspend rendering until the promise resolves, making it compatible with Suspense boundaries for loading states.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/blog/2024/12/05/react-19.md#_snippet_7

LANGUAGE: javascript
CODE:
```
import {use} from 'react';

function Comments({commentsPromise}) {
  // `use` will suspend until the promise resolves.
  const comments = use(commentsPromise);
  return comments.map(comment => <p key={comment.id}>{comment}</p>);
}

function Page({commentsPromise}) {
  // When `use` suspends in Comments,
  // this Suspense boundary will be shown.
  return (
    <Suspense fallback={<div>Loading...</div>}>
      <Comments commentsPromise={commentsPromise} />
    </Suspense>
  )
}
```

----------------------------------------

TITLE: Demonstrating State Loss with Nested React Component (JavaScript)
DESCRIPTION: This React component demonstrates how nesting a component function (`MyTextField`) inside another component (`MyComponent`) causes state loss. Every time `MyComponent` re-renders (e.g., when the button is clicked), a new `MyTextField` function is created, leading React to treat it as a new component and reset its state. To prevent this, component functions should always be declared at the top level.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/preserving-and-resetting-state.md#_snippet_10

LANGUAGE: javascript
CODE:
```
import { useState } from 'react';

export default function MyComponent() {
  const [counter, setCounter] = useState(0);

  function MyTextField() {
    const [text, setText] = useState('');

    return (
      <input
        value={text}
        onChange={e => setText(e.target.value)}
      />
    );
  }

  return (
    <>
      <MyTextField />
      <button onClick={() => {
        setCounter(counter + 1)
      }}>Clicked {counter} times</button>
    </>
  );
}
```

----------------------------------------

TITLE: Incorrect State Update in useEffect with Dependency - JavaScript
DESCRIPTION: This snippet demonstrates a common pitfall when updating state within a `useEffect` hook based on its previous value. By including `count` in the dependency array, the effect re-runs and resets the `setInterval` every time `count` changes, which is not the desired behavior for a continuous counter.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useEffect.md#_snippet_38

LANGUAGE: JavaScript
CODE:
```
function Counter() {
  const [count, setCount] = useState(0);

  useEffect(() => {
    const intervalId = setInterval(() => {
      setCount(count + 1); // You want to increment the counter every second...
    }, 1000)
    return () => clearInterval(intervalId);
  }, [count]); // 🚩 ... but specifying `count` as a dependency always resets the interval.
  // ...
}
```

----------------------------------------

TITLE: Immutable Update of Nested Object State (JavaScript - Single Call)
DESCRIPTION: This JavaScript snippet shows a more concise way to immutably update a nested object property in React within a single `setPerson` call. It uses nested spread syntax to copy existing properties of both the parent and nested objects, then overrides the specific property (`city`) that needs to be updated.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/updating-objects-in-state.md#_snippet_22

LANGUAGE: js
CODE:
```
setPerson({
  ...person, // Copy other fields
  artwork: { // but replace the artwork
    ...person.artwork, // with the same one
    city: 'New Delhi' // but in New Delhi!
  }
});
```

----------------------------------------

TITLE: Correct Immutable State Update in a Reducer
DESCRIPTION: This snippet demonstrates the correct way to update state within a reducer function by ensuring immutability. Instead of mutating the original state object, it returns a *new* state object, typically by spreading the previous state and overriding specific properties, like `age`.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useReducer.md#_snippet_11

LANGUAGE: javascript
CODE:
```
function reducer(state, action) {
  switch (action.type) {
    case 'incremented_age': {
      // ✅ Instead, return a new object
      return {
        ...state,
        age: state.age + 1
      };
    }

```

----------------------------------------

TITLE: Implementing Click Counter with useState in React
DESCRIPTION: This snippet provides a complete example of a `MyButton` component that uses `useState` to implement a click counter. The `handleClick` function updates the `count` state by calling `setCount`, causing the component to re-render and display the new count.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/index.md#_snippet_19

LANGUAGE: javascript
CODE:
```
function MyButton() {
  const [count, setCount] = useState(0);

  function handleClick() {
    setCount(count + 1);
  }

  return (
    <button onClick={handleClick}>
      Clicked {count} times
    </button>
  );
}
```

----------------------------------------

TITLE: Rendering Multiple Instances of a Component with Independent State in React
DESCRIPTION: This example demonstrates how a single `Counter` component JSX tag, when rendered multiple times at different positions in the render tree, results in two distinct instances, each maintaining its own isolated state for `score` and `hover`. It highlights that state is tied to the component's position, not the component definition itself.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/preserving-and-resetting-state.md#_snippet_0

LANGUAGE: JavaScript
CODE:
```
import { useState } from 'react';

export default function App() {
  const counter = <Counter />;
  return (
    <div>
      {counter}
      {counter}
    </div>
  );
}

function Counter() {
  const [score, setScore] = useState(0);
  const [hover, setHover] = useState(false);

  let className = 'counter';
  if (hover) {
    className += ' hover';
  }

  return (
    <div
      className={className}
      onPointerEnter={() => setHover(true)}
      onPointerLeave={() => setHover(false)}
    >
      <h1>{score}</h1>
      <button onClick={() => setScore(score + 1)}>
        Add one
      </button>
    </div>
  );
}
```

LANGUAGE: CSS
CODE:
```
label {
  display: block;
  clear: both;
}

.counter {
  width: 100px;
  text-align: center;
  border: 1px solid gray;
  border-radius: 4px;
  padding: 20px;
  margin: 0 20px 20px 0;
  float: left;
}

.hover {
  background: #ffffd8;
}
```

----------------------------------------

TITLE: Accessing `ref` as a Prop in React Function Components
DESCRIPTION: In React 19, function components can now directly receive `ref` as a prop, simplifying `ref` forwarding and eliminating the need for `forwardRef`. This change streamlines component development by allowing direct access to the `ref` within the component's props. A codemod will be provided to assist with automatic updates, and `forwardRef` is slated for deprecation in future versions.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/blog/2024/12/05/react-19.md#_snippet_10

LANGUAGE: javascript
CODE:
```
function MyInput({placeholder, ref}) {
  return <input placeholder={placeholder} ref={ref} />
}

//...
<MyInput ref={ref} />
```

----------------------------------------

TITLE: Implementing a Basic Counter with useState in React
DESCRIPTION: This snippet demonstrates a complete functional React component that uses `useState` to manage a numerical counter. The `count` state variable is initialized to 0, and the `handleClick` function increments it by calling `setCount(count + 1)`. The component re-renders to display the updated count on a button.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useState.md#_snippet_6

LANGUAGE: js
CODE:
```
import { useState } from 'react';

export default function Counter() {
  const [count, setCount] = useState(0);

  function handleClick() {
    setCount(count + 1);
  }

  return (
    <button onClick={handleClick}>
      You pressed me {count} times
    </button>
  );
}
```

----------------------------------------

TITLE: Understanding `useEffect` Dependency Array Behaviors in React
DESCRIPTION: This snippet illustrates the three primary behaviors of the `useEffect` hook based on its dependency array: running after every render (no array), running only on component mount (empty array `[]`), and running on mount and when specified dependencies change (`[a, b]`).
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/synchronizing-with-effects.md#_snippet_11

LANGUAGE: JavaScript
CODE:
```
useEffect(() => {
  // This runs after every render
});

useEffect(() => {
  // This runs only on mount (when the component appears)
}, []);

useEffect(() => {
  // This runs on mount *and also* if either a or b have changed since the last render
}, [a, b]);
```

----------------------------------------

TITLE: Full Example of Multiple Controlled Inputs in React
DESCRIPTION: This comprehensive example combines multiple controlled inputs (text and number) within a single React component. It demonstrates managing separate state variables for each input, handling their `onChange` events, and integrating additional UI elements like a button to modify the numeric input's state, along with conditional rendering based on input values.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react-dom/components/input.md#_snippet_10

LANGUAGE: JavaScript
CODE:
```
import { useState } from 'react';

export default function Form() {
  const [firstName, setFirstName] = useState('');
  const [age, setAge] = useState('20');
  const ageAsNumber = Number(age);
  return (
    <>
      <label>
        First name:
        <input
          value={firstName}
          onChange={e => setFirstName(e.target.value)}
        />
      </label>
      <label>
        Age:
        <input
          value={age}
          onChange={e => setAge(e.target.value)}
          type="number"
        />
        <button onClick={() => setAge(ageAsNumber + 10)}>
          Add 10 years
        </button>
      </label>
      {firstName !== '' &&
        <p>Your name is {firstName}.</p>
      }
      {ageAsNumber > 0 &&
        <p>Your age is {ageAsNumber}.</p>
      }
    </>
  );
}
```

----------------------------------------

TITLE: Demonstrating Isolated State for Multiple React Component Instances
DESCRIPTION: This example shows two distinct `Counter` components rendered directly, each managing its own `score` and `hover` state independently. Clicking one counter only updates its specific state, reinforcing the concept that state is isolated per component instance based on its position in the render tree.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/preserving-and-resetting-state.md#_snippet_1

LANGUAGE: JavaScript
CODE:
```
import { useState } from 'react';

export default function App() {
  return (
    <div>
      <Counter />
      <Counter />
    </div>
  );
}

function Counter() {
  const [score, setScore] = useState(0);
  const [hover, setHover] = useState(false);

  let className = 'counter';
  if (hover) {
    className += ' hover';
  }

  return (
    <div
      className={className}
      onPointerEnter={() => setHover(true)}
      onPointerLeave={() => setHover(false)}
    >
      <h1>{score}</h1>
      <button onClick={() => setScore(score + 1)}>
        Add one
      </button>
    </div>
  );
}
```

LANGUAGE: CSS
CODE:
```
.counter {
  width: 100px;
  text-align: center;
  border: 1px solid gray;
  border-radius: 4px;
  padding: 20px;
  margin: 0 20px 20px 0;
  float: left;
}

.hover {
  background: #ffffd8;
}
```

----------------------------------------

TITLE: Coordinated Data Fetching with React Suspense (Multi-file JavaScript/CSS)
DESCRIPTION: This comprehensive multi-file example illustrates a React application using Suspense for coordinated data fetching. `ArtistPage` uses Suspense to manage the loading states of `Biography` and `Albums`, which fetch data via `use` and a simulated `fetchData` utility. The `App` component controls the visibility of the `ArtistPage`, while `Panel` provides basic styling. All components within the Suspense boundary will appear together after their data is loaded, showcasing the 'reveal together' pattern.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/Suspense.md#_snippet_4

LANGUAGE: javascript
CODE:
```
import { useState } from 'react';
import ArtistPage from './ArtistPage.js';

export default function App() {
  const [show, setShow] = useState(false);
  if (show) {
    return (
      <ArtistPage
        artist={{
          id: 'the-beatles',
          name: 'The Beatles',
        }}
      />
    );
  } else {
    return (
      <button onClick={() => setShow(true)}>
        Open The Beatles artist page
      </button>
    );
  }
}
```

LANGUAGE: javascript
CODE:
```
import { Suspense } from 'react';
import Albums from './Albums.js';
import Biography from './Biography.js';
import Panel from './Panel.js';

export default function ArtistPage({ artist }) {
  return (
    <>
      <h1>{artist.name}</h1>
      <Suspense fallback={<Loading />}>
        <Biography artistId={artist.id} />
        <Panel>
          <Albums artistId={artist.id} />
        </Panel>
      </Suspense>
    </>
  );
}

function Loading() {
  return <h2>🌀 Loading...</h2>;
}
```

LANGUAGE: javascript
CODE:
```
export default function Panel({ children }) {
  return (
    <section className="panel">
      {children}
    </section>
  );
}
```

LANGUAGE: javascript
CODE:
```
import {use} from 'react';
import { fetchData } from './data.js';

export default function Biography({ artistId }) {
  const bio = use(fetchData(`/${artistId}/bio`));
  return (
    <section>
      <p className="bio">{bio}</p>
    </section>
  );
}
```

LANGUAGE: javascript
CODE:
```
import {use} from 'react';
import { fetchData } from './data.js';

export default function Albums({ artistId }) {
  const albums = use(fetchData(`/${artistId}/albums`));
  return (
    <ul>
      {albums.map(album => (
        <li key={album.id}>
          {album.title} ({album.year})
        </li>
      ))}
    </ul>
  );
}
```

LANGUAGE: javascript
CODE:
```
// Note: the way you would do data fetching depends on
// the framework that you use together with Suspense.
// Normally, the caching logic would be inside a framework.

let cache = new Map();

export function fetchData(url) {
  if (!cache.has(url)) {
    cache.set(url, getData(url));
  }
  return cache.get(url);
}

async function getData(url) {
  if (url === '/the-beatles/albums') {
    return await getAlbums();
  } else if (url === '/the-beatles/bio') {
    return await getBio();
  } else {
    throw Error('Not implemented');
  }
}

async function getBio() {
  // Add a fake delay to make waiting noticeable.
  await new Promise(resolve => {
    setTimeout(resolve, 1500);
  });

  return `The Beatles were an English rock band, \n    formed in Liverpool in 1960, that comprised \n    John Lennon, Paul McCartney, George Harrison \n    and Ringo Starr.`;
}

async function getAlbums() {
  // Add a fake delay to make waiting noticeable.
  await new Promise(resolve => {
    setTimeout(resolve, 3000);
  });

  return [{
    id: 13,
    title: 'Let It Be',
    year: 1970
  }, {
    id: 12,
    title: 'Abbey Road',
    year: 1969
  }, {
    id: 11,
    title: 'Yellow Submarine',
    year: 1969
  }, {
    id: 10,
    title: 'The Beatles',
    year: 1968
  }, {
    id: 9,
    title: 'Magical Mystery Tour',
    year: 1967
  }, {
    id: 8,
    title: 'Sgt. Pepper\'s Lonely Hearts Club Band',
    year: 1967
  }, {
    id: 7,
    title: 'Revolver',
    year: 1966
  }, {
    id: 6,
    title: 'Rubber Soul',
    year: 1965
  }, {
    id: 5,
    title: 'Help!',
    year: 1965
  }, {
    id: 4,
    title: 'Beatles For Sale',
    year: 1964
  }, {
    id: 3,
    title: 'A Hard Day\'s Night',
    year: 1964
  }, {
    id: 2,
    title: 'With The Beatles',
    year: 1963
  }, {
    id: 1,
    title: 'Please Please Me',
    year: 1963
  }];
}
```

LANGUAGE: css
CODE:
```
.bio { font-style: italic; }

.panel {
  border: 1px solid #aaa;
  border-radius: 6px;
  margin-top: 20px;
  padding: 10px;
}
```

----------------------------------------

TITLE: Reading Resources with React's `use` Hook
DESCRIPTION: The `use` API allows components to read values from resources such as Promises or Context. This example demonstrates how to use `use` to access a resolved Promise value and a Context value within a functional component.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/apis.md#_snippet_1

LANGUAGE: javascript
CODE:
```
function MessageComponent({ messagePromise }) {
  const message = use(messagePromise);
  const theme = use(ThemeContext);
  // ...
}
```

----------------------------------------

TITLE: Correct Hook Usage in React Function Components and Custom Hooks - JavaScript
DESCRIPTION: This snippet demonstrates the correct way to call React Hooks: at the top level of a function component or a custom Hook. useState is used to manage component state (count) and custom Hook state (width), ensuring Hooks are called within the React rendering lifecycle.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/rules/rules-of-hooks.md#_snippet_0

LANGUAGE: JavaScript
CODE:
```
function Counter() {
  // ✅ Good: top-level in a function component
  const [count, setCount] = useState(0);
  // ...
}

function useWindowWidth() {
  // ✅ Good: top-level in a custom Hook
  const [width, setWidth] = useState(window.innerWidth);
  // ...
}
```

----------------------------------------

TITLE: Main React Application Entry Point (index.js) in JavaScript
DESCRIPTION: This JavaScript file is the main entry point for a React application. It imports `createRoot`, the main `App` component, and styles, then initializes the React root and renders the `App` component into the `root` DOM node defined in `index.html`.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react-dom/client/createRoot.md#_snippet_8

LANGUAGE: JavaScript
CODE:
```
import { createRoot } from 'react-dom/client';
import App from './App.js';
import './styles.css';

const root = createRoot(document.getElementById('root'));
root.render(<App />);
```

----------------------------------------

TITLE: Correct State Update in React Reducer (Correct)
DESCRIPTION: This snippet demonstrates the correct approach to updating state within a React reducer: always create new objects or arrays instead of mutating existing ones. By using the spread syntax (`...state`), a new object reference is returned, which React detects as a change, triggering a re-render and ensuring the UI updates correctly. This adheres to React's immutability principle for state management.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useReducer.md#_snippet_27

LANGUAGE: javascript
CODE:
```
function reducer(state, action) {
  switch (action.type) {
    case 'incremented_age': {
      // ✅ Correct: creating a new object
      return {
        ...state,
        age: state.age + 1
      };
    }
    case 'changed_name': {
      // ✅ Correct: creating a new object
      return {
        ...state,
        name: action.nextName
      };
    }
    // ...
  }
}
```

----------------------------------------

TITLE: Managing Chat Connection in React ChatRoom (Fixed)
DESCRIPTION: This React component establishes and disconnects a chat connection using `useEffect`. It takes `roomId` and `createConnection` props. The `useEffect` dependency array now correctly includes `createConnection`, ensuring the chat reconnects when the encryption method changes.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/lifecycle-of-reactive-effects.md#_snippet_45

LANGUAGE: JavaScript
CODE:
```
import { useState, useEffect } from 'react';

export default function ChatRoom({ roomId, createConnection }) {
  useEffect(() => {
    const connection = createConnection(roomId);
    connection.connect();
    return () => connection.disconnect();
  }, [roomId, createConnection]);

  return <h1>Welcome to the {roomId} room!</h1>;
}
```

----------------------------------------

TITLE: Lifting State Up for Fully Controlled React Components
DESCRIPTION: This snippet illustrates the 'lifting state up' pattern, where the `Toggle` component becomes fully controlled by its parent. Instead of managing its own `isOn` state, it receives `isOn` as a prop and uses the `onChange` prop to request state changes from the parent. This reduces the overall state complexity and simplifies synchronization by centralizing state management in the parent component.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/you-might-not-need-an-effect.md#_snippet_24

LANGUAGE: javascript
CODE:
```
// ✅ Also good: the component is fully controlled by its parent
function Toggle({ isOn, onChange }) {
  function handleClick() {
    onChange(!isOn);
  }

  function handleDragEnd(e) {
    if (isCloserToRightEdge(e)) {
      onChange(true);
    } else {
      onChange(false);
    }
  }

  // ...
}
```

----------------------------------------

TITLE: Updating Item Count in React Shopping Cart
DESCRIPTION: This snippet provides the solution for the `handleIncreaseClick` function, demonstrating how to immutably update the `products` state. It uses the `map` function to iterate over the products and the object spread syntax (`...`) to create a new product object with an incremented count for the matching `productId`, ensuring state updates follow React's immutability principles.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/updating-arrays-in-state.md#_snippet_19

LANGUAGE: JavaScript
CODE:
```
import { useState } from 'react';

const initialProducts = [{
  id: 0,
  name: 'Baklava',
  count: 1,
}, {
  id: 1,
  name: 'Cheese',
  count: 5,
}, {
  id: 2,
  name: 'Spaghetti',
  count: 2,
}];

export default function ShoppingCart() {
  const [
    products,
    setProducts
  ] = useState(initialProducts)

  function handleIncreaseClick(productId) {
    setProducts(products.map(product => {
      if (product.id === productId) {
        return {
          ...product,
          count: product.count + 1
        };
      } else {
        return product;
      }
    }))
  }

  return (
    <ul>
      {products.map(product => (
        <li key={product.id}>
          {product.name}
          {' '}
          (<b>{product.count}</b>)
          <button onClick={() => {
            handleIncreaseClick(product.id);
          }}>
            +
          </button>
        </li>
      ))}
</ul>
  );
}
```

LANGUAGE: CSS
CODE:
```
button { margin: 5px; }
```

----------------------------------------

TITLE: Creating a React Root for a DOM Element
DESCRIPTION: This code demonstrates how to import `createRoot` from `react-dom/client` and use it to establish a React root. It targets a specific DOM element, typically identified by its ID, enabling React to manage its content.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react-dom/client/createRoot.md#_snippet_1

LANGUAGE: js
CODE:
```
import { createRoot } from 'react-dom/client';

const domNode = document.getElementById('root');
const root = createRoot(domNode);
```

----------------------------------------

TITLE: Creating a Basic React Component - JavaScript
DESCRIPTION: This snippet demonstrates how to define a simple React component. React components are standard JavaScript functions that return JSX markup, which describes the UI. This example creates a 'MyButton' component that renders a basic HTML button.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/index.md#_snippet_0

LANGUAGE: JavaScript
CODE:
```
function MyButton() {
  return (
    <button>I'm a button</button>
  );
}
```

----------------------------------------

TITLE: Controlled Text Input with onChange Handler (React)
DESCRIPTION: This snippet demonstrates the correct implementation of a controlled text input in React. It uses the `value` prop to bind the input to a state variable and an `onChange` handler to update that state synchronously with user input, ensuring the input is fully controlled.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react-dom/components/input.md#_snippet_16

LANGUAGE: jsx
CODE:
```
// ✅ Good: controlled input with onChange
<input value={something} onChange={e => setSomething(e.target.value)} />
```

----------------------------------------

TITLE: Impure StoryTray Component (Initial Bug Example)
DESCRIPTION: This `StoryTray` component demonstrates an impure function by directly mutating the `stories` prop received from its parent. The line `items.push({ id: 'create', label: 'Create Story' });` modifies the original array, which violates React's purity principle and can lead to unexpected behavior, especially when components re-render or Strict Mode is active.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/StrictMode.md#_snippet_6

LANGUAGE: JavaScript
CODE:
```
export default function StoryTray({ stories }) {
  const items = stories;
  items.push({ id: 'create', label: 'Create Story' });
  return (
    <ul>
      {items.map(story => (
        <li key={story.id}>
          {story.label}
        </li>
      ))}
    </ul>
  );
}
```

----------------------------------------

TITLE: React Component Mutating Props Directly (Incorrect)
DESCRIPTION: This JavaScript snippet illustrates the incorrect practice of directly mutating a component's props. Modifying `item.url` directly can lead to inconsistent application behavior and is against React's immutability principles for props.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/rules/components-and-hooks-must-be-pure.md#_snippet_9

LANGUAGE: js
CODE:
```
function Post({ item }) {
  item.url = new Url(item.url, base); // 🔴 Bad: never mutate props directly
  return <Link url={item.url}>{item.title}</Link>;
}
```

----------------------------------------

TITLE: Identifying Impure Reducer Functions in React JavaScript
DESCRIPTION: This JavaScript reducer function illustrates an impure state update where the `state.todos` array is directly mutated using `push`. In React's Strict Mode, this impurity will cause the reducer to run twice, leading to unexpected behavior like items being added twice, helping developers identify and fix such mistakes by enforcing purity.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useReducer.md#_snippet_33

LANGUAGE: js
CODE:
```
function reducer(state, action) {
  switch (action.type) {
    case 'added_todo': {
      // 🚩 Mistake: mutating state
      state.todos.push({ id: nextId++, text: action.text });
      return state;
    }
    // ...
  }
}
```

----------------------------------------

TITLE: React Chat Room Component with Effect (src/ChatRoom.js)
DESCRIPTION: A React component that manages a chat connection using useEffect. It connects to a chat server based on roomId and isEncrypted props and disconnects on cleanup. It uses useEffectEvent to handle incoming messages without needing onMessage in the effect's dependency array.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/removing-effect-dependencies.md#_snippet_68

LANGUAGE: js
CODE:
```
import { useState, useEffect } from 'react';
import { experimental_useEffectEvent as useEffectEvent } from 'react';
import {
  createEncryptedConnection,
  createUnencryptedConnection,
} from './chat.js';

export default function ChatRoom({ roomId, isEncrypted, onMessage }) {
  const onReceiveMessage = useEffectEvent(onMessage);

  useEffect(() => {
    function createConnection() {
      const options = {
        serverUrl: 'https://localhost:1234',
        roomId: roomId
      };
      if (isEncrypted) {
        return createEncryptedConnection(options);
      } else {
        return createUnencryptedConnection(options);
      }
    }

    const connection = createConnection();
    connection.on('message', (msg) => onReceiveMessage(msg));
    connection.connect();
    return () => connection.disconnect();
  }, [roomId, isEncrypted]);

  return <h1>Welcome to the {roomId} room!</h1>;
}
```

----------------------------------------

TITLE: Incorrect `useMemo` Usage: Calling in a Loop (JavaScript)
DESCRIPTION: This snippet shows an incorrect pattern of calling `useMemo` inside a loop within a component's render method. React Hooks, including `useMemo`, must only be called at the top level of a functional component or custom hook, not inside loops, conditions, or nested functions. This violates the Rules of Hooks.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useMemo.md#_snippet_47

LANGUAGE: JavaScript
CODE:
```
function ReportList({ items }) {
  return (
    <article>
      {items.map(item => {
        // 🔴 You can't call useMemo in a loop like this:
        const data = useMemo(() => calculateReport(item), [item]);
        return (
          <figure key={item.id}>
            <Chart data={data} />
          </figure>
        );
      })}
    </article>
  );
}
```

----------------------------------------

TITLE: Resetting State with Key Prop in React
DESCRIPTION: This snippet illustrates the recommended way to reset component state when a prop changes by leveraging React's `key` prop. By passing `userId` as a `key` to the inner `Profile` component, React treats different `userId` values as distinct components, forcing a complete re-mount and state reset for `Profile` and its children, ensuring the `comment` state is automatically cleared.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/you-might-not-need-an-effect.md#_snippet_9

LANGUAGE: JavaScript
CODE:
```
export default function ProfilePage({ userId }) {
  return (
    <Profile
      userId={userId}
      key={userId}
    />
  );
}

function Profile({ userId }) {
  // ✅ This and any other state below will reset on key change automatically
  const [comment, setComment] = useState('');
  // ...
}
```

----------------------------------------

TITLE: Defining a Basic React Profile Component
DESCRIPTION: This JavaScript snippet defines a functional React component named 'Profile'. It uses 'export default' to make the component available for import and returns JSX markup, specifically an <img> tag, demonstrating the core structure of a simple React component.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/your-first-component.md#_snippet_2

LANGUAGE: js
CODE:
```
export default function Profile() {
  return (
    <img
      src="https://i.imgur.com/MK3eW3Am.jpg"
      alt="Katherine Johnson"
    />
  )
}
```

----------------------------------------

TITLE: Complete Filterable Product Table React Application
DESCRIPTION: This comprehensive React application demonstrates state management and data flow for a filterable product table. It includes components like `FilterableProductTable` (managing `filterText` and `inStockOnly` state), `SearchBar` (displaying search input and checkbox), `ProductTable` (filtering and rendering products), `ProductCategoryRow`, and `ProductRow`. The example showcases how state is lifted to a common parent and passed down via props to control UI updates, providing a complete functional example of a filtered list.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/thinking-in-react.md#_snippet_5

LANGUAGE: JSX
CODE:
```
import { useState } from 'react';

function FilterableProductTable({ products }) {
  const [filterText, setFilterText] = useState('');
  const [inStockOnly, setInStockOnly] = useState(false);

  return (
    <div>
      <SearchBar 
        filterText={filterText} 
        inStockOnly={inStockOnly} />
      <ProductTable 
        products={products}
        filterText={filterText}
        inStockOnly={inStockOnly} />
    </div>
  );
}

function ProductCategoryRow({ category }) {
  return (
    <tr>
      <th colSpan="2">
        {category}
      </th>
    </tr>
  );
}

function ProductRow({ product }) {
  const name = product.stocked ? product.name :
    <span style={{ color: 'red' }}>
      {product.name}
    </span>;

  return (
    <tr>
      <td>{name}</td>
      <td>{product.price}</td>
    </tr>
  );
}

function ProductTable({ products, filterText, inStockOnly }) {
  const rows = [];
  let lastCategory = null;

  products.forEach((product) => {
    if (
      product.name.toLowerCase().indexOf(
        filterText.toLowerCase()
      ) === -1
    ) {
      return;
    }
    if (inStockOnly && !product.stocked) {
      return;
    }
    if (product.category !== lastCategory) {
      rows.push(
        <ProductCategoryRow
          category={product.category}
          key={product.category} />
      );
    }
    rows.push(
      <ProductRow
        product={product}
        key={product.name} />
    );
    lastCategory = product.category;
  });

  return (
    <table>
      <thead>
        <tr>
          <th>Name</th>
          <th>Price</th>
        </tr>
      </thead>
      <tbody>{rows}</tbody>
    </table>
  );
}

function SearchBar({ filterText, inStockOnly }) {
  return (
    <form>
      <input 
        type="text" 
        value={filterText} 
        placeholder="Search..."/>
      <label>
        <input 
          type="checkbox" 
          checked={inStockOnly} />
        {' '}
        Only show products in stock
      </label>
    </form>
  );
}

const PRODUCTS = [
  {category: "Fruits", price: "$1", stocked: true, name: "Apple"},
```

----------------------------------------

TITLE: Calling Hooks at Top Level in React Function Components and Custom Hooks - JavaScript
DESCRIPTION: This snippet demonstrates the correct way to call React Hooks. Hooks must be called at the top level of a function component or a custom Hook, before any early returns, ensuring they are not inside loops, conditions, or nested functions.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/warnings/invalid-hook-call-warning.md#_snippet_0

LANGUAGE: JavaScript
CODE:
```
function Counter() {
  // ✅ Good: top-level in a function component
  const [count, setCount] = useState(0);
  // ...
}

function useWindowWidth() {
  // ✅ Good: top-level in a custom Hook
  const [width, setWidth] = useState(window.innerWidth);
  // ...
}
```

----------------------------------------

TITLE: Optimistic UI Updates with useOptimistic in React Forms
DESCRIPTION: This example illustrates the `useOptimistic` Hook for immediately updating the UI after a form submission, before the server response. It shows a message with a 'Sending...' label, providing instant feedback and making the application feel more responsive.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react-dom/components/form.md#_snippet_5

LANGUAGE: JavaScript
CODE:
```
import { useOptimistic, useState, useRef } from "react";
import { deliverMessage } from "./actions.js";

function Thread({ messages, sendMessage }) {
  const formRef = useRef();
  async function formAction(formData) {
    addOptimisticMessage(formData.get("message"));
    formRef.current.reset();
    await sendMessage(formData);
  }
  const [optimisticMessages, addOptimisticMessage] = useOptimistic(
    messages,
    (state, newMessage) => [
      ...state,
      {
        text: newMessage,
        sending: true
      }
    ]
  );

  return (
    <>
      {optimisticMessages.map((message, index) => (
        <div key={index}>
          {message.text}
          {!!message.sending && <small> (Sending...)</small>}
        </div>
      ))}
      <form action={formAction} ref={formRef}>
        <input type="text" name="message" placeholder="Hello!" />
        <button type="submit">Send</button>
      </form>
    </>
  );
}

export default function App() {
  const [messages, setMessages] = useState([
    { text: "Hello there!", sending: false, key: 1 }
  ]);
  async function sendMessage(formData) {
    const sentMessage = await deliverMessage(formData.get("message"));
    setMessages((messages) => [...messages, { text: sentMessage }]);
  }
  return <Thread messages={messages} sendMessage={sendMessage} />;
}
```

LANGUAGE: JavaScript
CODE:
```
export async function deliverMessage(message) {
  await new Promise((res) => setTimeout(res, 1000));
  return message;
}
```

----------------------------------------

TITLE: Debugging React State Updates - JavaScript
DESCRIPTION: This snippet illustrates why direct state updates within the same event handler are problematic. Each `setScore(score + 1)` call uses the `score` value from the initial render, which remains `0` throughout the sequence, resulting in only one effective update.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/adding-interactivity.md#_snippet_11

LANGUAGE: js
CODE:
```
console.log(score);  // 0
setScore(score + 1); // setScore(0 + 1);
console.log(score);  // 0
setScore(score + 1); // setScore(0 + 1);
console.log(score);  // 0
setScore(score + 1); // setScore(0 + 1);
console.log(score);  // 0
```

----------------------------------------

TITLE: Implementing the useOnlineStatus Custom React Hook
DESCRIPTION: Provides the implementation for the `useOnlineStatus` custom React Hook. It uses `useState` to manage the online status and `useEffect` to subscribe and unsubscribe to browser `online` and `offline` events, returning the current online status.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/reusing-logic-with-custom-hooks.md#_snippet_3

LANGUAGE: JavaScript
CODE:
```
function useOnlineStatus() {
  const [isOnline, setIsOnline] = useState(true);
  useEffect(() => {
    function handleOnline() {
      setIsOnline(true);
    }
    function handleOffline() {
      setIsOnline(false);
    }
    window.addEventListener('online', handleOnline);
    window.addEventListener('offline', handleOffline);
    return () => {
      window.removeEventListener('online', handleOnline);
      window.removeEventListener('offline', handleOffline);
    };
  }, []);
  return isOnline;
}
```

----------------------------------------

TITLE: Defining Static Function Outside Component in React
DESCRIPTION: This snippet shows how to move a static helper function (`createOptions`) outside the React component. Similar to static objects, defining functions outside the component makes them non-reactive, allowing them to be called within `useEffect` without being listed as a dependency, thus avoiding unnecessary Effect re-synchronization.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/removing-effect-dependencies.md#_snippet_31

LANGUAGE: js
CODE:
```
function createOptions() {
  return {
    serverUrl: 'https://localhost:1234',
    roomId: 'music'
  };
}

function ChatRoom() {
  const [message, setMessage] = useState('');

  useEffect(() => {
    const options = createOptions();
    const connection = createConnection(options);
    connection.connect();
    return () => connection.disconnect();
  }, []); // ✅ All dependencies declared
  // ...
```

----------------------------------------

TITLE: Accessing Parent Form Status with React `useFormStatus`
DESCRIPTION: This snippet illustrates the `useFormStatus` hook, which provides components with direct access to the status of their parent `<form>` without requiring prop drilling. It enables UI elements, such as submission buttons, to dynamically update their state (e.g., `disabled` status) based on the form's pending state during submission.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/blog/2024/12/05/react-19.md#_snippet_5

LANGUAGE: javascript
CODE:
```
import {useFormStatus} from 'react-dom';

function DesignButton() {
  const {pending} = useFormStatus();
  return <button type="submit" disabled={pending} />
}
```

----------------------------------------

TITLE: Managing Navigation State with startTransition in React
DESCRIPTION: This snippet demonstrates how to wrap a state update for navigation within `startTransition`. This tells React that the update is not urgent, allowing the UI to remain responsive and avoid immediate Suspense fallbacks, providing a smoother user experience during page transitions.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/Suspense.md#_snippet_35

LANGUAGE: JavaScript
CODE:
```
function Router() {
  const [page, setPage] = useState('/');

  function navigate(url) {
    startTransition(() => {
      setPage(url);      
    });
  }
  // ...
```

----------------------------------------

TITLE: Rendering React Components with Props (JavaScript)
DESCRIPTION: This example showcases a complete React application where the `Avatar` component receives `person` (an object) and `size` (a number) as props. The `Profile` component renders multiple `Avatar` instances, each configured with different prop values, demonstrating how props enable flexible and reusable component rendering.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/passing-props-to-a-component.md#_snippet_4

LANGUAGE: js
CODE:
```
import { getImageUrl } from './utils.js';

function Avatar({ person, size }) {
  return (
    <img
      className="avatar"
      src={getImageUrl(person)}
      alt={person.name}
      width={size}
      height={size}
    />
  );
}

export default function Profile() {
  return (
    <div>
      <Avatar
        size={100}
        person={{
          name: 'Katsuko Saruhashi',
          imageId: 'YfeOqp2'
        }}
      />
      <Avatar
        size={80}
        person={{
          name: 'Aklilu Lemma',
          imageId: 'OKS67lh'
        }}
      />
      <Avatar
        size={50}
        person={{
          name: 'Lin Lanying',
          imageId: '1bX5QH6'
        }}
      />
    </div>
  );
}
```

----------------------------------------

TITLE: Managing Chat Room Connections with React useEffect
DESCRIPTION: This React component uses `useEffect` to manage a chat room connection. It demonstrates how an effect connects to a room when `roomId` changes and disconnects during cleanup, illustrating that each render's effect captures the `roomId` value from its specific render.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/synchronizing-with-effects.md#_snippet_31

LANGUAGE: JavaScript
CODE:
```
export default function ChatRoom({ roomId }) {
  useEffect(() => {
    const connection = createConnection(roomId);
    connection.connect();
    return () => connection.disconnect();
  }, [roomId]);

  return <h1>Welcome to {roomId}!</h1>;
}
```

----------------------------------------

TITLE: Rendering a List with Unique Keys in React (App.js)
DESCRIPTION: This React component (`List`) maps over an array of `people` to render a list of items. Each `<li>` element is assigned a unique `key` using `person.id`, which is a best practice for list rendering in React to ensure correct and efficient updates when the list changes.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/rendering-lists.md#_snippet_17

LANGUAGE: JavaScript
CODE:
```
import { people } from './data.js';
import { getImageUrl } from './utils.js';

export default function List() {
  const listItems = people.map(person =>
    <li key={person.id}>
      <img
        src={getImageUrl(person)}
        alt={person.name}
      />
      <p>
        <b>{person.name}</b>
          {' ' + person.profession + ' '}
          known for {person.accomplishment}
      </p>
    </li>
  );
  return <ul>{listItems}</ul>;
}
```

----------------------------------------

TITLE: Incorrect Event Handler Call During Render - JavaScript
DESCRIPTION: This snippet illustrates a common mistake where an event handler (`handleClick()`) is called directly during the render phase instead of being passed as a reference. This results in an infinite loop of re-renders and the "Too many re-renders" error because `handleClick()` is executed on every render, which then likely triggers a state update, causing another render.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useState.md#_snippet_38

LANGUAGE: js
CODE:
```
return <button onClick={handleClick()}>Click me</button>
```

----------------------------------------

TITLE: Declaring a State Variable with useState in React
DESCRIPTION: This snippet replaces a regular variable with a state variable using the `useState` hook. It initializes `index` to 0 and provides `setIndex` as the setter function to update its value, triggering re-renders in React components. It uses array destructuring to assign the state value and its setter.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/state-a-components-memory.md#_snippet_6

LANGUAGE: JavaScript
CODE:
```
const [index, setIndex] = useState(0);
```

----------------------------------------

TITLE: Corrected Packing List App Component - React JavaScript
DESCRIPTION: This React component manages a list of items, demonstrating a corrected approach to item counting. Instead of separate state variables, 'total' and 'packed' counts are derived directly from the 'items' array, eliminating synchronization bugs and ensuring data consistency. This highlights the principle of deriving state.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/choosing-the-state-structure.md#_snippet_36

LANGUAGE: javascript
CODE:
```
import { useState } from 'react';
import AddItem from './AddItem.js';
import PackingList from './PackingList.js';

let nextId = 3;
const initialItems = [
  { id: 0, title: 'Warm socks', packed: true },
  { id: 1, title: 'Travel journal', packed: false },
  { id: 2, title: 'Watercolors', packed: false },
];

export default function TravelPlan() {
  const [items, setItems] = useState(initialItems);

  const total = items.length;
  const packed = items
    .filter(item => item.packed)
    .length;

  function handleAddItem(title) {
    setItems([
      ...items,
      {
        id: nextId++,
        title: title,
        packed: false
      }
    ]);
  }

  function handleChangeItem(nextItem) {
    setItems(items.map(item => {
      if (item.id === nextItem.id) {
        return nextItem;
      } else {
        return item;
      }
    }));
  }

  function handleDeleteItem(itemId) {
    setItems(
      items.filter(item => item.id !== itemId)
    );
  }

  return (
    <>  
      <AddItem
        onAddItem={handleAddItem}
      />
      <PackingList
        items={items}
        onChangeItem={handleChangeItem}
        onDeleteItem={handleDeleteItem}
      />
      <hr />
      <b>{packed} out of {total} packed!</b>
    </>
  );
}
```

----------------------------------------

TITLE: Nesting React Components - JavaScript
DESCRIPTION: This code illustrates how to nest one React component within another. After defining 'MyButton', it's used inside 'MyApp' by treating it as a custom HTML-like tag. React component names must always start with a capital letter to distinguish them from standard HTML tags.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/index.md#_snippet_1

LANGUAGE: JavaScript
CODE:
```
export default function MyApp() {
  return (
    <div>
      <h1>Welcome to my app</h1>
      <MyButton />
    </div>
  );
}
```

----------------------------------------

TITLE: Transforming Array Items with map() in React
DESCRIPTION: This React component demonstrates how to immutably transform items in an array stored in state. It uses the `map()` method to create a new array where 'circle' type shapes are moved down by 50 pixels, while 'square' shapes remain unchanged. The `setShapes` function then updates the component's state with this new array, triggering a re-render.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/updating-arrays-in-state.md#_snippet_6

LANGUAGE: javascript
CODE:
```
import { useState } from 'react';

let initialShapes = [
  { id: 0, type: 'circle', x: 50, y: 100 },
  { id: 1, type: 'square', x: 150, y: 100 },
  { id: 2, type: 'circle', x: 250, y: 100 },
];

export default function ShapeEditor() {
  const [shapes, setShapes] = useState(
    initialShapes
  );

  function handleClick() {
    const nextShapes = shapes.map(shape => {
      if (shape.type === 'square') {
        // No change
        return shape;
      } else {
        // Return a new circle 50px below
        return {
          ...shape,
          y: shape.y + 50,
        };
      }
    });
    // Re-render with the new array
    setShapes(nextShapes);
  }

  return (
    <>
      <button onClick={handleClick}>
        Move circles down!
      </button>
      {shapes.map(shape => (
        <div
          key={shape.id}
          style={{
          background: 'purple',
          position: 'absolute',
          left: shape.x,
          top: shape.y,
          borderRadius:
            shape.type === 'circle'
              ? '50%' : '',
          width: 20,
          height: 20,
        }} />
      ))}
    </>
  );
}
```

LANGUAGE: css
CODE:
```
body { height: 300px; }
```

----------------------------------------

TITLE: Simplifying Pending State with React 19 Actions and useTransition
DESCRIPTION: This example illustrates how React 19's new Actions feature, combined with `useTransition`, simplifies the management of pending states for asynchronous operations. By wrapping the async function in `startTransition`, React automatically handles the `isPending` state, providing a more streamlined and declarative way to manage UI responsiveness during data mutations.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/blog/2024/12/05/react-19.md#_snippet_1

LANGUAGE: javascript
CODE:
```
// Using pending state from Actions
function UpdateName({}) {
  const [name, setName] = useState("");
  const [error, setError] = useState(null);
  const [isPending, startTransition] = useTransition();

  const handleSubmit = () => {
    startTransition(async () => {
      const error = await updateName(name);
      if (error) {
        setError(error);
        return;
      } 
      redirect("/path");
    })
  };

  return (
    <div>
      <input value={name} onChange={(event) => setName(event.target.value)} />
      <button onClick={handleSubmit} disabled={isPending}>
        Update
      </button>
      {error && <p>{error}</p>}
    </div>
  );
}
```

----------------------------------------

TITLE: Corrected Request Counter Implementation in React using Updater Functions
DESCRIPTION: This snippet provides the corrected implementation for the request counter in a React component. It uses state updater functions (`setPending(p => p + 1)`, `setPending(p => p - 1)`, `setCompleted(c => c + 1)`) to ensure that state updates are based on the *latest* state value, preventing race conditions and ensuring accurate counter behavior, especially during rapid clicks or asynchronous operations. The `delay` function simulates an asynchronous operation.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/queueing-a-series-of-state-updates.md#_snippet_12

LANGUAGE: JavaScript
CODE:
```
import { useState } from 'react';

export default function RequestTracker() {
  const [pending, setPending] = useState(0);
  const [completed, setCompleted] = useState(0);

  async function handleClick() {
    setPending(p => p + 1);
    await delay(3000);
    setPending(p => p - 1);
    setCompleted(c => c + 1);
  }

  return (
    <>
      <h3>
        Pending: {pending}
      </h3>
      <h3>
        Completed: {completed}
      </h3>
      <button onClick={handleClick}>
        Buy     
      </button>
    </>
  );
}

function delay(ms) {
  return new Promise(resolve => {
    setTimeout(resolve, ms);
  });
}
```

----------------------------------------

TITLE: Caching a Data Fetch/Computation in React Server Components
DESCRIPTION: This example showcases how to employ `cache` to memoize the outcome of an expensive computation or data retrieval, `calculateMetrics`, within a React Server Component. The `getMetrics` function will invoke `calculateMetrics` only once for a given `data` input, subsequently returning the cached result for any identical inputs.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/cache.md#_snippet_1

LANGUAGE: JavaScript
CODE:
```
import {cache} from 'react';
import calculateMetrics from 'lib/metrics';

const getMetrics = cache(calculateMetrics);

function Chart({data}) {
  const report = getMetrics(data);
  // ...
}
```

----------------------------------------

TITLE: Refactoring Filterable List with Lifted Search State in React
DESCRIPTION: This refactored React snippet demonstrates lifting the `query` state and `handleChange` handler from `SearchBar` to `FilterableList`. The `FilterableList` now manages the search logic, filters the `foods` array, and passes the `query` and `onChange` as props to `SearchBar`, and the filtered `results` to `List`.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/sharing-state-between-components.md#_snippet_13

LANGUAGE: JavaScript
CODE:
```
import { useState } from 'react';
import { foods, filterItems } from './data.js';

export default function FilterableList() {
  const [query, setQuery] = useState('');
  const results = filterItems(foods, query);

  function handleChange(e) {
    setQuery(e.target.value);
  }

  return (
    <>
      <SearchBar
        query={query}
        onChange={handleChange}
      />
      <hr />
      <List items={results} />
    </>
  );
}

function SearchBar({ query, onChange }) {
  return (
    <label>
      Search:{' '}
      <input
        value={query}
        onChange={onChange}
      />
    </label>
  );
}

function List({ items }) {
  return (
    <table>
      <tbody> 
        {items.map(food => (
          <tr key={food.id}>
            <td>{food.name}</td>
            <td>{food.description}</td>
          </tr>
        ))}
      </tbody>
    </table>
  );
}
```

----------------------------------------

TITLE: React Data Fetching with useEffect using Async/Await and Race Condition Handling
DESCRIPTION: This React component demonstrates data fetching using `useEffect` with the `async`/`await` syntax for cleaner asynchronous code. It includes an internal `startFetching` async function and maintains the crucial `ignore` flag in the cleanup function to prevent race conditions, similar to the Promise-based approach. The `api.js` file provides the simulated data fetching logic.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useEffect.md#_snippet_22

LANGUAGE: JavaScript
CODE:
```
import { useState, useEffect } from 'react';
import { fetchBio } from './api.js';

export default function Page() {
  const [person, setPerson] = useState('Alice');
  const [bio, setBio] = useState(null);
  useEffect(() => {
    async function startFetching() {
      setBio(null);
      const result = await fetchBio(person);
      if (!ignore) {
        setBio(result);
      }
    }

    let ignore = false;
    startFetching();
    return () => {
      ignore = true;
    }
  }, [person]);

  return (
    <>
      <select value={person} onChange={e => {
        setPerson(e.target.value);
      }}>
        <option value="Alice">Alice</option>
        <option value="Bob">Bob</option>
        <option value="Taylor">Taylor</option>
      </select>
      <hr />
      <p><i>{bio ?? 'Loading...'}</i></p>
    </>
  );
}
```

LANGUAGE: JavaScript
CODE:
```
export async function fetchBio(person) {
  const delay = person === 'Bob' ? 2000 : 200;
  return new Promise(resolve => {
    setTimeout(() => {
      resolve('This is ' + person + '’s bio.');
    }, delay);
  })
}
```

----------------------------------------

TITLE: Fixing Swappable Form Fields with React Keys (Solution)
DESCRIPTION: This React component provides the corrected implementation for the swappable form fields. By adding unique `key` props (`firstName` and `lastName`) to the `<Field>` components, React can correctly identify and preserve the state of each input field even when their order changes. This ensures that the input text moves with the corresponding field.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/preserving-and-resetting-state.md#_snippet_25

LANGUAGE: js
CODE:
```
import { useState } from 'react';

export default function App() {
  const [reverse, setReverse] = useState(false);
  let checkbox = (
    <label>
      <input
        type="checkbox"
        checked={reverse}
        onChange={e => setReverse(e.target.checked)}
      />
      Reverse order
    </label>
  );
  if (reverse) {
    return (
      <>
        <Field key="lastName" label="Last name" /> 
        <Field key="firstName" label="First name" />
        {checkbox}
      </>
    );
  } else {
    return (
      <>
        <Field key="firstName" label="First name" /> 
        <Field key="lastName" label="Last name" />
        {checkbox}
      </>
    );
  }
}

function Field({ label }) {
  const [text, setText] = useState('');
  return (
    <label>
      {label}:{' '}
      <input
        type="text"
        value={text}
        placeholder={label}
        onChange={e => setText(e.target.value)}
      />
    </label>
  );
}
```

----------------------------------------

TITLE: Correct: Replacing Object State with New Object in React
DESCRIPTION: This snippet shows the correct way to update an object in React state. By creating a new object using the spread syntax (`...form`) and then adding or overriding properties, a new reference is provided to `setForm`, which correctly signals React to re-render the component.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useState.md#_snippet_15

LANGUAGE: JavaScript
CODE:
```
setForm({
  ...form,
  firstName: 'Taylor'
});
```

----------------------------------------

TITLE: Initial Rendering of a React Component
DESCRIPTION: After creating a React root, this snippet shows how to use the `root.render()` method to display the initial React component, such as `<App />`, within the root's DOM node. This action makes the React application visible.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react-dom/client/createRoot.md#_snippet_2

LANGUAGE: js
CODE:
```
root.render(<App />);
```

----------------------------------------

TITLE: React TodoList Component with `useEffect` for Derived State (Initial)
DESCRIPTION: This React component manages a todo list, using `useState` for `todos`, `showActive`, and `text`. It employs `useEffect` to calculate `visibleTodos` based on `todos` and `showActive`. This setup causes `getVisibleTodos` to re-run on every state change, including `text` input, leading to inefficient re-calculations.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/you-might-not-need-an-effect.md#_snippet_34

LANGUAGE: javascript
CODE:
```
import { useState, useEffect } from 'react';
import { initialTodos, createTodo, getVisibleTodos } from './todos.js';

export default function TodoList() {
  const [todos, setTodos] = useState(initialTodos);
  const [showActive, setShowActive] = useState(false);
  const [text, setText] = useState('');
  const [visibleTodos, setVisibleTodos] = useState([]);

  useEffect(() => {
    setVisibleTodos(getVisibleTodos(todos, showActive));
  }, [todos, showActive]);

  function handleAddClick() {
    setText('');
    setTodos([...todos, createTodo(text)]);
  }

  return (
    <>
      <label>
        <input
          type="checkbox"
          checked={showActive}
          onChange={e => setShowActive(e.target.checked)}
        />
        Show only active todos
      </label>
      <input value={text} onChange={e => setText(e.target.value)} />
      <button onClick={handleAddClick}>
        Add
      </button>
      <ul>
        {visibleTodos.map(todo => (
          <li key={todo.id}>
            {todo.completed ? <s>{todo.text}</s> : todo.text}
          </li>
        ))}
      </ul>
    </>
  );
}
```

----------------------------------------

TITLE: React Component for Rendering Nested Recipe Lists
DESCRIPTION: This snippet presents the complete solution for rendering recipes with their ingredients as nested lists in React. It utilizes two `map` calls to iterate over recipes and their respective ingredients, ensuring proper `key` assignment for efficient list rendering.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/rendering-lists.md#_snippet_37

LANGUAGE: JavaScript
CODE:
```
import { recipes } from './data.js';

export default function RecipeList() {
  return (
    <div>
      <h1>Recipes</h1>
      {recipes.map(recipe =>
        <div key={recipe.id}>
          <h2>{recipe.name}</h2>
          <ul>
            {recipe.ingredients.map(ingredient =>
              <li key={ingredient}>
                {ingredient}
              </li>
            )}
          </ul>
        </div>
      )}
    </div>
  );
}
```

LANGUAGE: JavaScript
CODE:
```
export const recipes = [{
  id: 'greek-salad',
  name: 'Greek Salad',
  ingredients: ['tomatoes', 'cucumber', 'onion', 'olives', 'feta']
}, {
  id: 'hawaiian-pizza',
  name: 'Hawaiian Pizza',
  ingredients: ['pizza crust', 'pizza sauce', 'mozzarella', 'ham', 'pineapple']
}, {
  id: 'hummus',
  name: 'Hummus',
  ingredients: ['chickpeas', 'olive oil', 'garlic cloves', 'lemon', 'tahini']
}];
```

----------------------------------------

TITLE: Setting state synchronously within startTransition (Correct)
DESCRIPTION: Shows the correct way to ensure a state update is treated as a Transition by performing the update synchronously inside the startTransition callback function.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useTransition.md#_snippet_45

LANGUAGE: js
CODE:
```
startTransition(() => {
  // ✅ Setting state *during* startTransition call
  setPage('/about');
});
```

----------------------------------------

TITLE: Buggy React Profile App: Global State Issue
DESCRIPTION: This code demonstrates a React application where `Profile` components exhibit a bug: collapsing and expanding one profile affects others. The issue stems from `Profile.js` using a global `currentPerson` variable, making `Header` and `Avatar` impure and causing unintended side effects across multiple component instances. The `Panel.js`, `App.js`, `utils.js`, and `styles.css` files provide the complete context for this buggy behavior.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/keeping-components-pure.md#_snippet_7

LANGUAGE: javascript
CODE:
```
import Panel from './Panel.js';
import { getImageUrl } from './utils.js';

let currentPerson;

export default function Profile({ person }) {
  currentPerson = person;
  return (
    <Panel>
      <Header />
      <Avatar />
    </Panel>
  )
}

function Header() {
  return <h1>{currentPerson.name}</h1>;
}

function Avatar() {
  return (
    <img
      className="avatar"
      src={getImageUrl(currentPerson)}
      alt={currentPerson.name}
      width={50}
      height={50}
    />
  );
}
```

LANGUAGE: javascript
CODE:
```
import { useState } from 'react';

export default function Panel({ children }) {
  const [open, setOpen] = useState(true);
  return (
    <section className="panel">
      <button onClick={() => setOpen(!open)}>
        {open ? 'Collapse' : 'Expand'}
      </button>
      {open && children}
    </section>
  );
}
```

LANGUAGE: javascript
CODE:
```
import Profile from './Profile.js';

export default function App() {
  return (
    <>
      <Profile person={{
        imageId: 'lrWQx8l',
        name: 'Subrahmanyan Chandrasekhar',
      }} />
      <Profile person={{
        imageId: 'MK3eW3A',
        name: 'Creola Katherine Johnson',
      }} />
    </>
  )
}
```

LANGUAGE: javascript
CODE:
```
export function getImageUrl(person, size = 's') {
  return (
    'https://i.imgur.com/' +
    person.imageId +
    size +
    '.jpg'
  );
}
```

LANGUAGE: css
CODE:
```
.avatar { margin: 5px; border-radius: 50%; }
.panel {
  border: 1px solid #aaa;
  border-radius: 6px;
  margin-top: 20px;
  padding: 10px;
  width: 200px;
}
h1 { margin: 5px; font-size: 18px; }
```

----------------------------------------

TITLE: Defining and Attaching an Event Handler in React (JavaScript)
DESCRIPTION: Shows how to define an event handler function (`handleClick`) inside a React component and attach it to a DOM element's event attribute (`onClick`). The function is passed as a reference, not called directly, allowing React to invoke it when the event occurs.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/index.md#_snippet_16

LANGUAGE: js
CODE:
```
function MyButton() {
  function handleClick() {
    alert('You clicked me!');
  }

  return (
    <button onClick={handleClick}>
      Click me
    </button>
  );
}
```

----------------------------------------

TITLE: Correctly Updating Object State with New Object
DESCRIPTION: Shows the correct way to update an object in React state. Instead of mutating the existing `position` object, a new object with updated `x` and `y` values is created and passed to the `setPosition` setter function, triggering a re-render.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/updating-objects-in-state.md#_snippet_5

LANGUAGE: js
CODE:
```
onPointerMove={e => {
  setPosition({
    x: e.clientX,
    y: e.clientY
  });
}}
```

----------------------------------------

TITLE: Understanding useActionState Function Signature in JavaScript
DESCRIPTION: This snippet clarifies the function signature for an action when it is wrapped by `useActionState`. It highlights that `currentState` (the previous state) is passed as the first argument, and the `formData` (submitted form data) is passed as the second argument, which is a change from the typical action signature.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useActionState.md#_snippet_10

LANGUAGE: JavaScript
CODE:
```
function action(currentState, formData) {
  // ...
}
```

----------------------------------------

TITLE: Implementing Sculpture Gallery Navigation and Details (React)
DESCRIPTION: This React functional component (`Gallery`) manages the display of sculptures using `useState` hooks for the current `index` and `showMore` details. It includes `handlePrevClick` and `handleNextClick` functions with guarding conditions to prevent navigating beyond the list boundaries, disabling buttons accordingly. The `handleMoreClick` toggles the visibility of the sculpture's description.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/state-a-components-memory.md#_snippet_28

LANGUAGE: js
CODE:
```
import { useState } from 'react';
import { sculptureList } from './data.js';

export default function Gallery() {
  const [index, setIndex] = useState(0);
  const [showMore, setShowMore] = useState(false);

  let hasPrev = index > 0;
  let hasNext = index < sculptureList.length - 1;

  function handlePrevClick() {
    if (hasPrev) {
      setIndex(index - 1);
    }
  }

  function handleNextClick() {
    if (hasNext) {
      setIndex(index + 1);
    }
  }

  function handleMoreClick() {
    setShowMore(!showMore);
  }

  let sculpture = sculptureList[index];
  return (
    <>
      <button
        onClick={handlePrevClick}
        disabled={!hasPrev}
      >
        Previous
      </button>
      <button
        onClick={handleNextClick}
        disabled={!hasNext}
      >
        Next
      </button>
      <h2>
        <i>{sculpture.name} </i> 
        by {sculpture.artist}
      </h2>
      <h3>  
        ({index + 1} of {sculptureList.length})
      </h3>
      <button onClick={handleMoreClick}>
        {showMore ? 'Hide' : 'Show'} details
      </button>
      {showMore && <p>{sculpture.description}</p>}
      <img 
        src={sculpture.url} 
        alt={sculpture.alt}
      />
    </>
  );
}
```

----------------------------------------

TITLE: Conditional Context Reading with React `use` Hook
DESCRIPTION: This snippet highlights a key advantage of the `use` hook: its ability to be called inside conditional statements like `if`. This allows components to conditionally read context values based on props or other logic, providing more flexibility than `useContext`.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/use.md#_snippet_5

LANGUAGE: JavaScript
CODE:
```
function HorizontalRule({ show }) {
  if (show) {
    const theme = use(ThemeContext);
    return <hr className={theme} />;
  }
  return false;
}
```

----------------------------------------

TITLE: Initial TodoList Component with Redundant Effects - React
DESCRIPTION: This section presents the initial implementation of a React `TodoList` component. It showcases a common anti-pattern where derived state (like active todos, visible todos, and footer content) is managed using multiple `useState` and `useEffect` hooks, leading to unnecessary complexity and potential performance issues. The goal is to refactor this component to remove these redundant effects.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/you-might-not-need-an-effect.md#_snippet_32

LANGUAGE: javascript
CODE:
```
import { useState, useEffect } from 'react';
import { initialTodos, createTodo } from './todos.js';

export default function TodoList() {
  const [todos, setTodos] = useState(initialTodos);
  const [showActive, setShowActive] = useState(false);
  const [activeTodos, setActiveTodos] = useState([]);
  const [visibleTodos, setVisibleTodos] = useState([]);
  const [footer, setFooter] = useState(null);

  useEffect(() => {
    setActiveTodos(todos.filter(todo => !todo.completed));
  }, [todos]);

  useEffect(() => {
    setVisibleTodos(showActive ? activeTodos : todos);
  }, [showActive, todos, activeTodos]);

  useEffect(() => {
    setFooter(
      <footer>
        {activeTodos.length} todos left
      </footer>
    );
  }, [activeTodos]);

  return (
    <>
      <label>
        <input
          type="checkbox"
          checked={showActive}
          onChange={e => setShowActive(e.target.checked)}
        />
        Show only active todos
      </label>
      <NewTodo onAdd={newTodo => setTodos([...todos, newTodo])} />
      <ul>
        {visibleTodos.map(todo => (
          <li key={todo.id}>
            {todo.completed ? <s>{todo.text}</s> : todo.text}
          </li>
        ))}
      </ul>
      {footer}
    </>
  );
}

function NewTodo({ onAdd }) {
  const [text, setText] = useState('');

  function handleAddClick() {
    setText('');
    onAdd(createTodo(text));
  }

  return (
    <>
      <input value={text} onChange={e => setText(e.target.value)} />
      <button onClick={handleAddClick}>
        Add
      </button>
    </>
  );
}
```

LANGUAGE: javascript
CODE:
```
let nextId = 0;

export function createTodo(text, completed = false) {
  return {
    id: nextId++,
    text,
    completed
  };
}

export const initialTodos = [
  createTodo('Get apples', true),
  createTodo('Get oranges', true),
  createTodo('Get carrots'),
];
```

LANGUAGE: css
CODE:
```
label { display: block; }
input { margin-top: 10px; }
```

----------------------------------------

TITLE: Managing Todo List State with React useState - JavaScript
DESCRIPTION: This component serves as the main application container, managing the central `todos` array state using React's `useState` hook. It defines handler functions (`handleAddTodo`, `handleChangeTodo`, `handleDeleteTodo`) that perform immutable updates on the `todos` array, then passes these functions and the state down to child components for interaction.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useState.md#_snippet_18

LANGUAGE: JavaScript
CODE:
```
import { useState } from 'react';
import AddTodo from './AddTodo.js';
import TaskList from './TaskList.js';

let nextId = 3;
const initialTodos = [
  { id: 0, title: 'Buy milk', done: true },
  { id: 1, title: 'Eat tacos', done: false },
  { id: 2, title: 'Brew tea', done: false },
];

export default function TaskApp() {
  const [todos, setTodos] = useState(initialTodos);

  function handleAddTodo(title) {
    setTodos([
      ...todos,
      {
        id: nextId++,
        title: title,
        done: false
      }
    ]);
  }

  function handleChangeTodo(nextTodo) {
    setTodos(todos.map(t => {
      if (t.id === nextTodo.id) {
        return nextTodo;
      } else {
        return t;
      }
    }));
  }

  function handleDeleteTodo(todoId) {
    setTodos(
      todos.filter(t => t.id !== todoId)
    );
  }

  return (
    <>
      <AddTodo
        onAddTodo={handleAddTodo}
      />
      <TaskList
        todos={todos}
        onChangeTodo={handleChangeTodo}
        onDeleteTodo={handleDeleteTodo}
      />
    </>
  );
}
```

----------------------------------------

TITLE: Implement React Error Boundary Class Component
DESCRIPTION: This snippet defines a React class component, `ErrorBoundary`, designed to catch rendering errors in its child components. It utilizes `static getDerivedStateFromError` to update state for displaying a fallback UI and `componentDidCatch` for logging errors, including component stack and owner stack.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/Component.md#_snippet_36

LANGUAGE: js
CODE:
```
import * as React from 'react';

class ErrorBoundary extends React.Component {
  constructor(props) {
    super(props);
    this.state = { hasError: false };
  }

  static getDerivedStateFromError(error) {
    // Update state so the next render will show the fallback UI.
    return { hasError: true };
  }

  componentDidCatch(error, info) {
    logErrorToMyService(
      error,
      // Example "componentStack":
      //   in ComponentThatThrows (created by App)
      //   in ErrorBoundary (created by App)
      //   in div (created by App)
      //   in App
      info.componentStack,
      // Warning: `captureOwnerStack` is not available in production.
      React.captureOwnerStack(),
    );
  }

  render() {
    if (this.state.hasError) {
      // You can render any custom fallback UI
      return this.props.fallback;
    }

    return this.props.children;
  }
}
```

----------------------------------------

TITLE: Returning Multiple Elements from a React Component
DESCRIPTION: Illustrates how a React functional component can return multiple sibling elements by wrapping them in a Fragment (`<>...</>`). This allows components to return a group of elements as a single logical unit, satisfying React's requirement for a single root element per component return, without adding unnecessary DOM nodes.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/Fragment.md#_snippet_1

LANGUAGE: javascript
CODE:
```
function Post() {
  return (
    <>
      <PostTitle />
      <PostBody />
    </>
  );
}
```

----------------------------------------

TITLE: Fetching and Displaying Search Results with React `use` Hook (SearchResults.js)
DESCRIPTION: This component fetches and displays search results based on the `query` prop. It utilizes the `use` Hook from React to read the promise returned by `fetchData`, suspending rendering until the data is available. It includes logic to handle empty queries and cases where no matches are found.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/Suspense.md#_snippet_16

LANGUAGE: JavaScript
CODE:
```
import {use} from 'react';
import { fetchData } from './data.js';

export default function SearchResults({ query }) {
  if (query === '') {
    return null;
  }
  const albums = use(fetchData(`/search?q=${query}`));
  if (albums.length === 0) {
    return <p>No matches for <i>"${query}"</i></p>;
  }
  return (
    <ul>
      {albums.map(album => (
        <li key={album.id}>
          {album.title} ({album.year})
        </li>
      ))}
    </ul>
  );
}
```

----------------------------------------

TITLE: Messenger Reducer Logic (JavaScript)
DESCRIPTION: This `messengerReducer.js` file defines the core state management logic for the application. It includes the `initialState` and a reducer function that handles `changed_selection` (updating `selectedId` and clearing `message`) and `edited_message` (updating `message`) actions, ensuring predictable state updates based on dispatched events.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/extracting-state-logic-into-a-reducer.md#_snippet_32

LANGUAGE: javascript
CODE:
```
export const initialState = {
  selectedId: 0,
  message: 'Hello',
};

export function messengerReducer(state, action) {
  switch (action.type) {
    case 'changed_selection': {
      return {
        ...state,
        selectedId: action.contactId,
        message: '',
      };
    }
    case 'edited_message': {
      return {
        ...state,
        message: action.message,
      };
    }
    default: {
      throw Error('Unknown action: ' + action.type);
    }
  }
}
```

----------------------------------------

TITLE: Directly Calculating Derived Data in React Components
DESCRIPTION: This snippet shows the recommended way to calculate derived data (`visibleTodos`) directly during the component's render. This approach is simpler and more efficient than using `useState` and `useEffect` for derived state, provided the `getFilteredTodos()` function is not computationally expensive.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/you-might-not-need-an-effect.md#_snippet_3

LANGUAGE: js
CODE:
```
function TodoList({ todos, filter }) {
  const [newTodo, setNewTodo] = useState('');
  // ✅ This is fine if getFilteredTodos() is not slow.
  const visibleTodos = getFilteredTodos(todos, filter);
  // ...
}
```

----------------------------------------

TITLE: Calculating Derived State from Props (Best Practice)
DESCRIPTION: This snippet illustrates the most recommended approach for managing state related to props: calculating derived state (`selection`) directly from props (`items`) and a minimal piece of state (`selectedId`). This eliminates the need for explicit state adjustments, simplifying data flow and ensuring the UI always reflects the current props without extra re-renders or complex logic.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/you-might-not-need-an-effect.md#_snippet_12

LANGUAGE: JavaScript
CODE:
```
function List({ items }) {
  const [isReverse, setIsReverse] = useState(false);
  const [selectedId, setSelectedId] = useState(null);
  // ✅ Best: Calculate everything during rendering
  const selection = items.find(item => item.id === selectedId) ?? null;
  // ...
}
```

----------------------------------------

TITLE: Caching Event Handler with useCallback in React Component
DESCRIPTION: This example demonstrates how to use `useCallback` within a React functional component to memoize an event handler. The `handleSubmit` function is cached, ensuring it's not re-created on every render unless `productId` or `referrer` dependencies change, which helps optimize performance for child components that rely on referential equality.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useCallback.md#_snippet_1

LANGUAGE: javascript
CODE:
```
import { useCallback } from 'react';

export default function ProductPage({ productId, referrer, theme }) {
  const handleSubmit = useCallback((orderDetails) => {
    post('/product/' + productId + '/buy', {
      referrer,
      orderDetails,
    });
  }, [productId, referrer]);
```

----------------------------------------

TITLE: Optimizing React useEffect with useCallback for Function Dependencies
DESCRIPTION: Demonstrates how to use `useCallback` to memoize a function (`createOptions`) that is used as a dependency in `useEffect`. By wrapping the function with `useCallback` and specifying its own dependencies (`roomId`), the function reference remains stable across renders, preventing the effect from re-firing unnecessarily.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useCallback.md#_snippet_21

LANGUAGE: JavaScript
CODE:
```
function ChatRoom({ roomId }) {
  const [message, setMessage] = useState('');

  const createOptions = useCallback(() => {
    return {
      serverUrl: 'https://localhost:1234',
      roomId: roomId
    };
  }, [roomId]); // ✅ Only changes when roomId changes

  useEffect(() => {
    const options = createOptions();
    const connection = createConnection(options);
    connection.connect();
    return () => connection.disconnect();
  }, [createOptions]); // ✅ Only changes when createOptions changes
  // ...

```

----------------------------------------

TITLE: Incorrectly Using useEffect for Form Submission Side Effect (Adding Dependency)
DESCRIPTION: Shows the previous useEffect example with an added 'theme' dependency. This highlights how including reactive values like 'theme' in the dependency array of an effect containing event-specific logic can lead to bugs, such as the notification reappearing when the theme changes.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/removing-effect-dependencies.md#_snippet_12

LANGUAGE: javascript
CODE:
```
function Form() {
  const [submitted, setSubmitted] = useState(false);
  const theme = useContext(ThemeContext);

  useEffect(() => {
    if (submitted) {
      // 🔴 Avoid: Event-specific logic inside an Effect
      post('/api/register');
      showNotification('Successfully registered!', theme);
    }
  }, [submitted, theme]); // ✅ All dependencies declared

  function handleSubmit() {
    setSubmitted(true);
  }

  // ...
}
```

----------------------------------------

TITLE: React Quiz Form with State Management
DESCRIPTION: This React component demonstrates how to manage UI state in response to user input. It uses the `useState` hook to control the form's `answer`, `error`, and `status` (typing, submitting, success). The submit button's disabled state and the display of success/error messages are dynamically controlled by the `status` variable. The `submitForm` function simulates a network request.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/managing-state.md#_snippet_0

LANGUAGE: javascript
CODE:
```
import { useState } from 'react';

export default function Form() {
  const [answer, setAnswer] = useState('');
  const [error, setError] = useState(null);
  const [status, setStatus] = useState('typing');

  if (status === 'success') {
    return <h1>That's right!</h1>
  }

  async function handleSubmit(e) {
    e.preventDefault();
    setStatus('submitting');
    try {
      await submitForm(answer);
      setStatus('success');
    } catch (err) {
      setStatus('typing');
      setError(err);
    }
  }

  function handleTextareaChange(e) {
    setAnswer(e.target.value);
  }

  return (
    <>
      <h2>City quiz</h2>
      <p>
        In which city is there a billboard that turns air into drinkable water?
      </p>
      <form onSubmit={handleSubmit}>
        <textarea
          value={answer}
          onChange={handleTextareaChange}
          disabled={status === 'submitting'}
        />
        <br />
        <button disabled={
          answer.length === 0 ||
          status === 'submitting'
        }>
          Submit
        </button>
        {error !== null &&
          <p className="Error">
            {error.message}
          </p>
        }
      </form>
    </>
  );
}

function submitForm(answer) {
  // Pretend it's hitting the network.
  return new Promise((resolve, reject) => {
    setTimeout(() => {
      let shouldError = answer.toLowerCase() !== 'lima'
      if (shouldError) {
        reject(new Error('Good guess but a wrong answer. Try again!'));
      } else {
        resolve();
      }
    }, 1500);
  });
}
```

LANGUAGE: css
CODE:
```
.Error { color: red; }
```

----------------------------------------

TITLE: Lifting State Up in React for Shared Accordion Panels
DESCRIPTION: This example illustrates the "lifting state up" pattern in React, where the active panel state for an accordion is managed by a common parent component (`Accordion`). The parent passes `isActive` and `onShow` props to child `Panel` components, ensuring only one panel is active at a time and keeping them in sync.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/managing-state.md#_snippet_3

LANGUAGE: javascript
CODE:
```
import { useState } from 'react';

export default function Accordion() {
  const [activeIndex, setActiveIndex] = useState(0);
  return (
    <>
      <h2>Almaty, Kazakhstan</h2>
      <Panel
        title="About"
        isActive={activeIndex === 0}
        onShow={() => setActiveIndex(0)}
      >
        With a population of about 2 million, Almaty is Kazakhstan's largest city. From 1929 to 1997, it was its capital city.
      </Panel>
      <Panel
        title="Etymology"
        isActive={activeIndex === 1}
        onShow={() => setActiveIndex(1)}
      >
        The name comes from <span lang="kk-KZ">алма</span>, the Kazakh word for "apple" and is often translated as "full of apples". In fact, the region surrounding Almaty is thought to be the ancestral home of the apple, and the wild <i lang="la">Malus sieversii</i> is considered a likely candidate for the ancestor of the modern domestic apple.
      </Panel>
    </>
  );
}

function Panel({
  title,
  children,
  isActive,
  onShow
}) {
  return (
    <section className="panel">
      <h3>{title}</h3>
      {isActive ? (
        <p>{children}</p>
      ) : (
        <button onClick={onShow}>
          Show
        </button>
      )}
    </section>
  );
}
```

LANGUAGE: css
CODE:
```
h3, p { margin: 5px 0px; }
.panel {
  padding: 10px;
  border: 1px solid #aaa;
}
```

----------------------------------------

TITLE: Synchronizing Inputs with Lifted State in React
DESCRIPTION: This snippet provides the solution for synchronizing two input fields by applying the 'lifting state up' pattern. The shared 'text' state and its 'handleChange' function are moved to the common parent component, which then passes them down as props to ensure both child inputs display and update the same value.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/sharing-state-between-components.md#_snippet_10

LANGUAGE: JavaScript
CODE:
```
import { useState } from 'react';

export default function SyncedInputs() {
  const [text, setText] = useState('');

  function handleChange(e) {
    setText(e.target.value);
  }

  return (
    <>
      <Input
        label="First input"
        value={text}
        onChange={handleChange}
      />
      <Input
        label="Second input"
        value={text}
        onChange={handleChange}
      />
    </>
  );
}

function Input({ label, value, onChange }) {
  return (
    <label>
      {label}
      {' '}
      <input
        value={value}
        onChange={onChange}
      />
    </label>
  );
}
```

LANGUAGE: CSS
CODE:
```
input { margin: 5px; }
label { display: block; }
```

----------------------------------------

TITLE: Corrected Non-Mutative Todo Management in React
DESCRIPTION: This set of React components provides the corrected implementation of the todo application, refactoring the state update functions (handleAddTodo, handleChangeTodo, handleDeleteTodo) to use non-mutative array methods. handleAddTodo uses array spread syntax, handleChangeTodo uses Array.prototype.map(), and handleDeleteTodo uses Array.prototype.filter(), ensuring that new array references are created for each state update, which React's useState can correctly detect and trigger re-renders.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/updating-arrays-in-state.md#_snippet_25

LANGUAGE: JavaScript
CODE:
```
import { useState } from 'react';
import AddTodo from './AddTodo.js';
import TaskList from './TaskList.js';

let nextId = 3;
const initialTodos = [
  { id: 0, title: 'Buy milk', done: true },
  { id: 1, title: 'Eat tacos', done: false },
  { id: 2, title: 'Brew tea', done: false },
];

export default function TaskApp() {
  const [todos, setTodos] = useState(
    initialTodos
  );

  function handleAddTodo(title) {
    setTodos([
      ...todos,
      {
        id: nextId++,
        title: title,
        done: false
      }
    ]);
  }

  function handleChangeTodo(nextTodo) {
    setTodos(todos.map(t => {
      if (t.id === nextTodo.id) {
        return nextTodo;
      } else {
        return t;
      }
    }));
  }

  function handleDeleteTodo(todoId) {
    setTodos(
      todos.filter(t => t.id !== todoId)
    );
  }

  return (
    <>
      <AddTodo
        onAddTodo={handleAddTodo}
      />
      <TaskList
        todos={todos}
        onChangeTodo={handleChangeTodo}
        onDeleteTodo={handleDeleteTodo}
      />
    </>
  );
}
```

LANGUAGE: JavaScript
CODE:
```
import { useState } from 'react';

export default function AddTodo({ onAddTodo }) {
  const [title, setTitle] = useState('');
  return (
    <>
      <input
        placeholder="Add todo"
        value={title}
        onChange={e => setTitle(e.target.value)}
      />
      <button onClick={() => {
        setTitle('');
        onAddTodo(title);
      }}>Add</button>
    </>
  )
}
```

----------------------------------------

TITLE: Fetching and Displaying Albums with use Hook in Albums.js
DESCRIPTION: This component fetches and displays a list of albums for a given artist ID. It utilizes the `use` hook (from React) to read the result of the `fetchData` promise, which is part of React's Suspense for Data Fetching pattern.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/Suspense.md#_snippet_43

LANGUAGE: JavaScript
CODE:
```
import {use} from 'react';
import { fetchData } from './data.js';

export default function Albums({ artistId }) {
  const albums = use(fetchData(`/${artistId}/albums`));
  return (
    <ul>
      {albums.map(album => (
        <li key={album.id}>
          {album.title} ({album.year})
        </li>
      ))}
    </ul>
  );
}
```

----------------------------------------

TITLE: Updating React State with Object Spread (JavaScript)
DESCRIPTION: This JavaScript snippet shows how to immutably update a React state object using the object spread syntax (`...person`). This concise method copies all properties from the `person` object into a new object, then overrides the `firstName` property with the new value, making state updates cleaner and more scalable.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/updating-objects-in-state.md#_snippet_14

LANGUAGE: js
CODE:
```
setPerson({
  ...person, // Copy the old fields
  firstName: e.target.value // But override this one
});
```

----------------------------------------

TITLE: Managing Dependent State in React with Event Handlers
DESCRIPTION: This snippet presents the recommended approach for managing dependent state updates in React. Instead of chaining Effects, it calculates derived state (`isGameOver`) during rendering and updates all related state variables within a single event handler (`handlePlaceCard`). This method is more efficient, reduces unnecessary re-renders, and improves code flexibility for features like game history.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/you-might-not-need-an-effect.md#_snippet_18

LANGUAGE: JavaScript
CODE:
```
function Game() {
  const [card, setCard] = useState(null);
  const [goldCardCount, setGoldCardCount] = useState(0);
  const [round, setRound] = useState(1);

  // ✅ Calculate what you can during rendering
  const isGameOver = round > 5;

  function handlePlaceCard(nextCard) {
    if (isGameOver) {
      throw Error('Game already ended.');
    }

    // ✅ Calculate all the next state in the event handler
    setCard(nextCard);
    if (nextCard.gold) {
      if (goldCardCount <= 3) {
        setGoldCardCount(goldCardCount + 1);
      } else {
        setGoldCardCount(0);
        setRound(round + 1);
        if (round === 5) {
          alert('Good game!');
        }
      }
    }
  }

  // ...
}
```

----------------------------------------

TITLE: Providing Suspense Fallback for Client-Only React Components
DESCRIPTION: This React snippet shows how to wrap a client-only component, `Chat`, with `<Suspense>` to provide a fallback during server-side rendering. The `Chat` component explicitly throws an error if rendered on the server, ensuring its content is replaced by the `Loading` fallback in the initial server HTML.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/Suspense.md#_snippet_50

LANGUAGE: javascript
CODE:
```
<Suspense fallback={<Loading />}>
  <Chat />
</Suspense>

function Chat() {
  if (typeof window === 'undefined') {
    throw Error('Chat should only render on the client.');
  }
  // ...
}
```

----------------------------------------

TITLE: Moving State Up to Parent Component in React
DESCRIPTION: This snippet demonstrates the initial step of lifting state up. It shows how to define the `count` state and `handleClick` function within the `MyApp` parent component, preparing to share it with child components. The `MyButton` component is shown without its own state, indicating the state has been moved.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/index.md#_snippet_22

LANGUAGE: JavaScript
CODE:
```
export default function MyApp() {
  const [count, setCount] = useState(0);

  function handleClick() {
    setCount(count + 1);
  }

  return (
    <div>
      <h1>Counters that update separately</h1>
      <MyButton />
      <MyButton />
    </div>
  );
}

function MyButton() {
  // ... we're moving code from here ...
}
```

----------------------------------------

TITLE: Using Components in JSX (Good Practice) - React JavaScript
DESCRIPTION: This snippet demonstrates the correct way to use React components by including them directly within JSX. This allows React to manage the component's lifecycle, state, and reconciliation process, ensuring proper integration with the React rendering engine.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/rules/react-calls-components-and-hooks.md#_snippet_0

LANGUAGE: JavaScript
CODE:
```
function BlogPost() {
  return <Layout><Article /></Layout>; // ✅ Good: Only use components in JSX
}
```

----------------------------------------

TITLE: Handling User Events with React Components (JavaScript)
DESCRIPTION: This snippet demonstrates how to define and pass event handlers as props through a component hierarchy in React. It shows an `App` component rendering a `Toolbar`, which in turn renders `Button` components, each triggering a different alert on click. It illustrates the pattern of passing functions down as `onClick` props.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/adding-interactivity.md#_snippet_0

LANGUAGE: javascript
CODE:
```
export default function App() {
  return (
    <Toolbar
      onPlayMovie={() => alert('Playing!')}
      onUploadImage={() => alert('Uploading!')}
    />
  );
}

function Toolbar({ onPlayMovie, onUploadImage }) {
  return (
    <div>
      <Button onClick={onPlayMovie}>
        Play Movie
      </Button>
      <Button onClick={onUploadImage}>
        Upload Image
      </Button>
    </div>
  );
}

function Button({ onClick, children }) {
  return (
    <button onClick={onClick}>
      {children}
    </button>
  );
}
```

----------------------------------------

TITLE: Managing Count State and Interacting with CountLabel in React
DESCRIPTION: This `App` component manages a `count` state using `useState`. It provides two buttons to increment and decrement the count, and renders the `CountLabel` component, passing the current `count` as a prop. This demonstrates a parent component controlling state and passing it down.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useState.md#_snippet_31

LANGUAGE: JavaScript
CODE:
```
import { useState } from 'react';
import CountLabel from './CountLabel.js';

export default function App() {
  const [count, setCount] = useState(0);
  return (
    <>
      <button onClick={() => setCount(count + 1)}>
        Increment
      </button>
      <button onClick={() => setCount(count - 1)}>
        Decrement
      </button>
      <CountLabel count={count} />
    </>
  );
}
```

----------------------------------------

TITLE: Albums List Component with Data Fetching, JavaScript
DESCRIPTION: Fetches and displays a list of albums for a given artist ID using React's 'use' hook and a 'fetchData' utility. It renders each album's title and year in an unordered list, suspending until the data is available.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/Suspense.md#_snippet_29

LANGUAGE: JavaScript
CODE:
```
import {use} from 'react';
import { fetchData } from './data.js';

export default function Albums({ artistId }) {
  const albums = use(fetchData(`/${artistId}/albums`));
  return (
    <ul>
      {albums.map(album => (
        <li key={album.id}>
          {album.title} ({album.year})
        </li>
      ))}
    </ul>
  );
}
```

----------------------------------------

TITLE: Exporting a Named Component (Profile) in JavaScript
DESCRIPTION: This snippet demonstrates how to export a component named `Profile` using a named export. Named exports allow a file to export multiple values and require the import name to match the export name. This is useful when a file needs to provide more than one component or utility.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/importing-and-exporting-components.md#_snippet_3

LANGUAGE: JavaScript
CODE:
```
export function Profile() {
  // ...
}
```

----------------------------------------

TITLE: Implementing Tic-Tac-Toe Game Logic - React - JavaScript
DESCRIPTION: This JavaScript code defines the core components and logic for a React Tic-Tac-Toe game. It includes `Square` for individual cells, `Board` for rendering the game grid and handling clicks, and `Game` for managing the overall game state (history, current player). The `calculateWinner` function determines if there's a winner.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/tutorial-tic-tac-toe.md#_snippet_65

LANGUAGE: js
CODE:
```
import { useState } from 'react';

function Square({ value, onSquareClick }) {
  return (
    <button className="square" onClick={onSquareClick}>
      {value}
    </button>
  );
}

function Board({ xIsNext, squares, onPlay }) {
  function handleClick(i) {
    if (calculateWinner(squares) || squares[i]) {
      return;
    }
    const nextSquares = squares.slice();
    if (xIsNext) {
      nextSquares[i] = 'X';
    } else {
      nextSquares[i] = 'O';
    }
    onPlay(nextSquares);
  }

  const winner = calculateWinner(squares);
  let status;
  if (winner) {
    status = 'Winner: ' + winner;
  } else {
    status = 'Next player: ' + (xIsNext ? 'X' : 'O');
  }

  return (
    <>
      <div className="status">{status}</div>
      <div className="board-row">
        <Square value={squares[0]} onSquareClick={() => handleClick(0)} />
        <Square value={squares[1]} onSquareClick={() => handleClick(1)} />
        <Square value={squares[2]} onSquareClick={() => handleClick(2)} />
      </div>
      <div className="board-row">
        <Square value={squares[3]} onSquareClick={() => handleClick(3)} />
        <Square value={squares[4]} onSquareClick={() => handleClick(4)} />
        <Square value={squares[5]} onSquareClick={() => handleClick(5)} />
      </div>
      <div className="board-row">
        <Square value={squares[6]} onSquareClick={() => handleClick(6)} />
        <Square value={squares[7]} onSquareClick={() => handleClick(7)} />
        <Square value={squares[8]} onSquareClick={() => handleClick(8)} />
      </div>
    </>
  );
}

export default function Game() {
  const [xIsNext, setXIsNext] = useState(true);
  const [history, setHistory] = useState([Array(9).fill(null)]);
  const currentSquares = history[history.length - 1];

  function handlePlay(nextSquares) {
    setHistory([...history, nextSquares]);
    setXIsNext(!xIsNext);
  }

  return (
    <div className="game">
      <div className="game-board">
        <Board xIsNext={xIsNext} squares={currentSquares} onPlay={handlePlay} />
      </div>
      <div className="game-info">
        <ol>{/*TODO*/}</ol>
      </div>
    </div>
  );
}

function calculateWinner(squares) {
  const lines = [
    [0, 1, 2],
    [3, 4, 5],
    [6, 7, 8],
    [0, 3, 6],
    [1, 4, 7],
    [2, 5, 8],
    [0, 4, 8],
    [2, 4, 6],
  ];
  for (let i = 0; i < lines.length; i++) {
    const [a, b, c] = lines[i];
    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {
      return squares[a];
    }
  }
  return null;
}
```

----------------------------------------

TITLE: Integrating React Actions with HTML `<form>` Elements
DESCRIPTION: This example demonstrates how React 19 integrates Actions directly with standard HTML `<form>` elements by allowing functions to be passed to the `action` prop. This enables automatic form submission and resetting for uncontrolled components, significantly simplifying form handling within React applications.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/blog/2024/12/05/react-19.md#_snippet_4

LANGUAGE: javascript
CODE:
```
<form action={actionFunction}>
```

----------------------------------------

TITLE: React 19 Resource Preloading APIs for Performance Optimization
DESCRIPTION: React 19 introduces new APIs (prefetchDNS, preconnect, preload, preinit) to optimize resource loading during initial document load and client-side updates. These APIs enable early discovery and preloading of browser resources like scripts, fonts, and stylesheets, significantly improving page performance. They can be used to optimize initial loads and speed up client updates by prefetching resources for anticipated navigations.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/blog/2024/12/05/react-19.md#_snippet_20

LANGUAGE: js
CODE:
```
import { prefetchDNS, preconnect, preload, preinit } from 'react-dom'
function MyComponent() {
  preinit('https://.../path/to/some/script.js', {as: 'script' }) // loads and executes this script eagerly
  preload('https://.../path/to/font.woff', { as: 'font' }) // preloads this font
  preload('https://.../path/to/stylesheet.css', { as: 'style' }) // preloads this stylesheet
  prefetchDNS('https://...') // when you may not actually request anything from this host
  preconnect('https://...') // when you will request something but aren't sure what
}
```

LANGUAGE: html
CODE:
```
<!-- the above would result in the following DOM/HTML -->
<html>
  <head>
    <!-- links/scripts are prioritized by their utility to early loading, not call order -->
    <link rel="prefetch-dns" href="https://...">
    <link rel="preconnect" href="https://...">
    <link rel="preload" as="font" href="https://.../path/to/font.woff">
    <link rel="preload" as="style" href="https://.../path/to/stylesheet.css">
    <script async="" src="https://.../path/to/some/script.js"></script>
  </head>
  <body>
    ...
  </body>
</html>
```

----------------------------------------

TITLE: Rendering a List of Scientists in React
DESCRIPTION: This React component demonstrates how to render a dynamic list of `person` objects using `map()` to create `<li>` elements. Each list item includes an image, name, profession, and accomplishment, with a unique `key` prop derived from `person.id` for efficient list reconciliation. It imports `people` data and `getImageUrl` utility.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/describing-the-ui.md#_snippet_7

LANGUAGE: JavaScript
CODE:
```
import { people } from './data.js';
import { getImageUrl } from './utils.js';

export default function List() {
  const listItems = people.map(person =>
    <li key={person.id}>
      <img
        src={getImageUrl(person)}
        alt={person.name}
      />
      <p>
        <b>{person.name}:</b>
        {' ' + person.profession + ' '}
        known for {person.accomplishment}
      </p>
    </li>
  );
  return (
    <article>
      <h1>Scientists</h1>
      <ul>{listItems}</ul>
    </article>
  );
}
```

----------------------------------------

TITLE: Optimize React Context Value with useCallback and useMemo
DESCRIPTION: This example demonstrates how to optimize React Context values that contain objects and functions to prevent unnecessary re-renders of consuming components. By wrapping the function with `useCallback` and the object creation with `useMemo`, the context value remains stable across re-renders of the provider component, ensuring consumers only re-render when the actual data changes.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useContext.md#_snippet_19

LANGUAGE: javascript
CODE:
```
import { useCallback, useMemo } from 'react';

function MyApp() {
  const [currentUser, setCurrentUser] = useState(null);

  const login = useCallback((response) => {
    storeCredentials(response.credentials);
    setCurrentUser(response.user);
  }, []);

  const contextValue = useMemo(() => ({
    currentUser,
    login
  }), [currentUser, login]);

  return (
    <AuthContext value={contextValue}>
      <Page />
    </AuthContext>
  );
}
```

----------------------------------------

TITLE: Declaring an Effect Event with `useEffectEvent` in JavaScript
DESCRIPTION: This snippet illustrates the fundamental usage of the `useEffectEvent` Hook. It takes a `callback` function as an argument and returns an 'Effect Event' function (`onSomething`) that can be called from within `useEffect` without being part of its dependency array, thus avoiding re-running the effect unnecessarily.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/experimental_useEffectEvent.md#_snippet_0

LANGUAGE: JavaScript
CODE:
```
const onSomething = useEffectEvent(callback)
```

----------------------------------------

TITLE: Complete React Task Management with Context and Reducer
DESCRIPTION: A full-fledged React application demonstrating state management using `useReducer` and `useContext`. It includes components for adding, listing, editing, and deleting tasks, with state centralized and distributed via React Context, showcasing a robust pattern for complex state.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/scaling-up-with-reducer-and-context.md#_snippet_9

LANGUAGE: js
CODE:
```
import { useReducer } from 'react';
import AddTask from './AddTask.js';
import TaskList from './TaskList.js';
import { TasksContext, TasksDispatchContext } from './TasksContext.js';

export default function TaskApp() {
  const [tasks, dispatch] = useReducer(
    tasksReducer,
    initialTasks
  );

  return (
    <TasksContext value={tasks}>
      <TasksDispatchContext value={dispatch}>
        <h1>Day off in Kyoto</h1>
        <AddTask />
        <TaskList />
      </TasksDispatchContext>
    </TasksContext>
  );
}

function tasksReducer(tasks, action) {
  switch (action.type) {
    case 'added': {
      return [...tasks, {
        id: action.id,
        text: action.text,
        done: false
      }];
    }
    case 'changed': {
      return tasks.map(t => {
        if (t.id === action.task.id) {
          return action.task;
        } else {
          return t;
        }
      });
    }
    case 'deleted': {
      return tasks.filter(t => t.id !== action.id);
    }
    default: {
      throw Error('Unknown action: ' + action.type);
    }
  }
}

const initialTasks = [
  { id: 0, text: 'Philosopher’s Path', done: true },
  { id: 1, text: 'Visit the temple', done: false },
  { id: 2, text: 'Drink matcha', done: false }
];
```

LANGUAGE: js
CODE:
```
import { createContext } from 'react';

export const TasksContext = createContext(null);
export const TasksDispatchContext = createContext(null);
```

LANGUAGE: js
CODE:
```
import { useState, useContext } from 'react';
import { TasksDispatchContext } from './TasksContext.js';

export default function AddTask() {
  const [text, setText] = useState('');
  const dispatch = useContext(TasksDispatchContext);
  return (
    <>
      <input
        placeholder="Add task"
        value={text}
        onChange={e => setText(e.target.value)}
      />
      <button onClick={() => {
        setText('');
        dispatch({
          type: 'added',
          id: nextId++,
          text: text,
        }); 
      }}>Add</button>
    </>
  );
}

let nextId = 3;
```

LANGUAGE: js
CODE:
```
import { useState, useContext } from 'react';
import { TasksContext, TasksDispatchContext } from './TasksContext.js';

export default function TaskList() {
  const tasks = useContext(TasksContext);
  return (
    <ul>
      {tasks.map(task => (
        <li key={task.id}>
          <Task task={task} />
        </li>
      ))}
    </ul>
  );
}

function Task({ task }) {
  const [isEditing, setIsEditing] = useState(false);
  const dispatch = useContext(TasksDispatchContext);
  let taskContent;
  if (isEditing) {
    taskContent = (
      <>
        <input
          value={task.text}
          onChange={e => {
            dispatch({
              type: 'changed',
              task: {
                ...task,
                text: e.target.value
              }
            });
          }} />
        <button onClick={() => setIsEditing(false)}>
          Save
        </button>
      </>
    );
  } else {
    taskContent = (
      <>
        {task.text}
        <button onClick={() => setIsEditing(true)}>
          Edit
        </button>
      </>
    );
  }
  return (
    <label>
      <input
        type="checkbox"
        checked={task.done}
        onChange={e => {
          dispatch({
            type: 'changed',
            task: {
              ...task,
              done: e.target.checked
            }
          });
        }}
      />
      {taskContent}
      <button onClick={() => {
        dispatch({
          type: 'deleted',
          id: task.id
        });
      }}>
        Delete
      </button>
    </label>
  );
}
```

LANGUAGE: css
CODE:
```
button { margin: 5px; }
li { list-style-type: none; }
ul, li { margin: 0; padding: 0; }
```

----------------------------------------

TITLE: Updating React State Immutably (JavaScript)
DESCRIPTION: This JavaScript snippet demonstrates the correct way to update a state object in React by creating a *new* object and passing it to the `setPerson` state setter. It explicitly copies all existing properties (`lastName`, `email`) and overrides only the `firstName` property, ensuring immutability.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/updating-objects-in-state.md#_snippet_13

LANGUAGE: js
CODE:
```
setPerson({
  firstName: e.target.value, // New first name from the input
  lastName: person.lastName,
  email: person.email
});
```

----------------------------------------

TITLE: Importing and Exporting React Components Across Files - JavaScript
DESCRIPTION: This example illustrates how to organize React components into separate files for better maintainability. `Profile.js` exports the `Profile` component, `Gallery.js` imports `Profile` and exports `Gallery`, and `App.js` imports `Gallery` to render the main application. This modular approach promotes code reusability and readability.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/describing-the-ui.md#_snippet_1

LANGUAGE: JavaScript
CODE:
```
import Gallery from './Gallery.js';

export default function App() {
  return (
    <Gallery />
  );
}
```

LANGUAGE: JavaScript
CODE:
```
import Profile from './Profile.js';

export default function Gallery() {
  return (
    <section>
      <h1>Amazing scientists</h1>
      <Profile />
      <Profile />
      <Profile />
    </section>
  );
}
```

LANGUAGE: JavaScript
CODE:
```
export default function Profile() {
  return (
    <img
      src="https://i.imgur.com/QIrZWGIs.jpg"
      alt="Alan L. Hart"
    />
  );
}
```

LANGUAGE: CSS
CODE:
```
img { margin: 0 10px 10px 0; }
```

----------------------------------------

TITLE: Optimizing React Effect by Declaring Function Inside Effect Hook
DESCRIPTION: This corrected React component demonstrates how to prevent unnecessary re-runs of `useEffect` by declaring the `createOptions` function directly inside the effect. This ensures the effect only re-runs when `roomId` changes, as the function itself is no longer a changing dependency.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useEffect.md#_snippet_46

LANGUAGE: javascript
CODE:
```
import { useState, useEffect } from 'react';
import { createConnection } from './chat.js';

const serverUrl = 'https://localhost:1234';

function ChatRoom({ roomId }) {
  const [message, setMessage] = useState('');

  useEffect(() => {
    function createOptions() {
      return {
        serverUrl: serverUrl,
        roomId: roomId
      };
    }

    const options = createOptions();
    const connection = createConnection(options);
    connection.connect();
    return () => connection.disconnect();
  }, [roomId]);

  return (
    <>
      <h1>Welcome to the {roomId} room!</h1>
      <input value={message} onChange={e => setMessage(e.target.value)} />
    </>
  );
}

export default function App() {
  const [roomId, setRoomId] = useState('general');
  return (
    <>
      <label>
        Choose the chat room:{' '}
        <select
          value={roomId}
          onChange={e => setSetRoomId(e.target.value)}
        >
          <option value="general">general</option>
          <option value="travel">travel</option>
          <option value="music">music</option>
        </select>
      </label>
      <hr />
      <ChatRoom roomId={roomId} />
    </>
  );
}
```

----------------------------------------

TITLE: Defining `useChatRoom` Custom Hook in React
DESCRIPTION: This custom React Hook encapsulates the logic for connecting and disconnecting from a chat room. It uses `useEffect` to establish a connection when `serverUrl` or `roomId` changes and cleans up the connection on unmount, ensuring proper resource management.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useEffect.md#_snippet_12

LANGUAGE: JavaScript
CODE:
```
import { useEffect } from 'react';
import { createConnection } from './chat.js';

export function useChatRoom({ serverUrl, roomId }) {
  useEffect(() => {
    const connection = createConnection(serverUrl, roomId);
    connection.connect();
    return () => {
      connection.disconnect();
    };
  }, [roomId, serverUrl]);
}
```

----------------------------------------

TITLE: Complete React Data Fetching Example with Promises and Race Condition Handling
DESCRIPTION: This comprehensive React example showcases data fetching with `useEffect` using Promises, including a `select` element to change the `person` and dynamically update the bio. It incorporates a robust cleanup mechanism with an `ignore` flag to prevent race conditions, ensuring only the latest data is displayed. The `api.js` file simulates an asynchronous data fetching function.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useEffect.md#_snippet_21

LANGUAGE: JavaScript
CODE:
```
import { useState, useEffect } from 'react';
import { fetchBio } from './api.js';

export default function Page() {
  const [person, setPerson] = useState('Alice');
  const [bio, setBio] = useState(null);
  useEffect(() => {
    let ignore = false;
    setBio(null);
    fetchBio(person).then(result => {
      if (!ignore) {
        setBio(result);
      }
    });
    return () => {
      ignore = true;
    }
  }, [person]);

  return (
    <>
      <select value={person} onChange={e => {
        setPerson(e.target.value);
      }}>
        <option value="Alice">Alice</option>
        <option value="Bob">Bob</option>
        <option value="Taylor">Taylor</option>
      </select>
      <hr />
      <p><i>{bio ?? 'Loading...'}</i></p>
    </>
  );
}
```

LANGUAGE: JavaScript
CODE:
```
export async function fetchBio(person) {
  const delay = person === 'Bob' ? 2000 : 200;
  return new Promise(resolve => {
    setTimeout(() => {
      resolve('This is ' + person + '’s bio.');
    }, delay);
  })
}
```

----------------------------------------

TITLE: Defining a Simple React Functional Component
DESCRIPTION: This snippet defines a basic functional React component named `Image`. It returns an `<img>` element with a static source and alt text. This component is used by `src/index.js` to be rendered on the screen.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/render-and-commit.md#_snippet_1

LANGUAGE: JavaScript
CODE:
```
export default function Image() {
  return (
    <img
      src="https://i.imgur.com/ZF6s192.jpg"
      alt="'Floralis Genérica' by Eduardo Catalano: a gigantic metallic flower sculpture with reflective petals"
    />
  );
}
```

----------------------------------------

TITLE: Updating State with Setter Functions in React
DESCRIPTION: This snippet demonstrates how to use the `set` functions (e.g., `setName`, `setAge`) returned by `useState` to update component state. It shows two common patterns: directly passing the next state value and using an updater function that receives the previous state to calculate the new state.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useState.md#_snippet_2

LANGUAGE: JavaScript
CODE:
```
const [name, setName] = useState('Edward');

function handleClick() {
  setName('Taylor');
  setAge(a => a + 1);
  // ...
```

----------------------------------------

TITLE: Marking Server Functions with 'use server' (JavaScript)
DESCRIPTION: The 'use server' directive is used to mark server-side functions that can be invoked directly from client-side code. This allows for server actions or mutations to be triggered from client components, enabling server-side logic execution in response to client interactions.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/rsc/directives.md#_snippet_1

LANGUAGE: JavaScript
CODE:
```
'use server'
```

----------------------------------------

TITLE: Using startTransition for Non-Urgent Updates in React (JavaScript)
DESCRIPTION: This snippet demonstrates how to use the startTransition API in React to distinguish between urgent and non-urgent state updates. Urgent updates (like setInputValue) are applied immediately, while non-urgent updates (like setSearchQuery) wrapped in startTransition are handled as transitions, allowing them to be interrupted by more urgent interactions.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/blog/2022/03/29/react-v18.md#_snippet_1

LANGUAGE: JavaScript
CODE:
```
import { startTransition } from 'react';

// Urgent: Show what was typed
setInputValue(input);

// Mark any state updates inside as transitions
startTransition(() => {
  // Transition: Show the results
  setSearchQuery(input);
});
```

----------------------------------------

TITLE: Fetching Posts with use and Suspense (React/JS)
DESCRIPTION: Demonstrates fetching data using the `use` hook within a React component, rendering a list of posts. Shows how to integrate asynchronous data fetching with React Suspense capabilities.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useTransition.md#_snippet_25

LANGUAGE: js
CODE:
```
import {use} from 'react';
import { fetchData } from './data.js';

function PostsTab() {
  const posts = use(fetchData('/posts'));
  return (
    <ul className="items">
      {posts.map(post =>
        <Post key={post.id} title={post.title} />
      )}
    </ul>
  );
}

function Post({ title }) {
  return (
    <li className="item">
      {title}
    </li>
  );
}

export default PostsTab;
```

----------------------------------------

TITLE: Synchronizing Chat Connection with React useEffect
DESCRIPTION: Uses the `useEffect` hook within a React `ChatRoom` component to establish and tear down a connection to a chat server. The effect runs on mount and whenever the `roomId` prop changes, ensuring the component stays synchronized with the selected room. It returns a cleanup function to disconnect.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/separating-events-from-effects.md#_snippet_1

LANGUAGE: js
CODE:
```
function ChatRoom({ roomId }) {
  // ...
  useEffect(() => {
    const connection = createConnection(serverUrl, roomId);
    connection.connect();
    return () => {
      connection.disconnect();
    };
  }, [roomId]);
  // ...
}
```

----------------------------------------

TITLE: Passing State Updaters to Child Component in React
DESCRIPTION: This snippet demonstrates how the `FilterableProductTable` component passes its state updater functions (`setFilterText`, `setInStockOnly`) as props (`onFilterTextChange`, `onInStockOnlyChange`) to its child `SearchBar` component. This enables the child to modify the parent's state.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/thinking-in-react.md#_snippet_9

LANGUAGE: JavaScript
CODE:
```
function FilterableProductTable({ products }) {
  const [filterText, setFilterText] = useState('');
  const [inStockOnly, setInStockOnly] = useState(false);

  return (
    <div>
      <SearchBar 
        filterText={filterText} 
        inStockOnly={inStockOnly}
        onFilterTextChange={setFilterText}
        onInStockOnlyChange={setInStockOnly} />
```

----------------------------------------

TITLE: Complete Example: Using the Custom useOnlineStatus Hook in React
DESCRIPTION: Presents a complete React application example demonstrating the usage of the custom `useOnlineStatus` hook. It includes the main `App` component, the `StatusBar` and `SaveButton` components consuming the hook, and the hook's implementation in a separate file.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/reusing-logic-with-custom-hooks.md#_snippet_4

LANGUAGE: JavaScript
CODE:
```
import { useOnlineStatus } from './useOnlineStatus.js';

function StatusBar() {
  const isOnline = useOnlineStatus();
  return <h1>{isOnline ? '✅ Online' : '❌ Disconnected'}</h1>;
}

function SaveButton() {
  const isOnline = useOnlineStatus();

  function handleSaveClick() {
    console.log('✅ Progress saved');
  }

  return (
    <button disabled={!isOnline} onClick={handleSaveClick}>
      {isOnline ? 'Save progress' : 'Reconnecting...'}
    </button>
  );
}

export default function App() {
  return (
    <>
      <SaveButton />
      <StatusBar />
    </>
  );
}
```

LANGUAGE: JavaScript
CODE:
```
import { useState, useEffect } from 'react';

export function useOnlineStatus() {
  const [isOnline, setIsOnline] = useState(true);
  useEffect(() => {
    function handleOnline() {
      setIsOnline(true);
    }
    function handleOffline() {
      setIsOnline(false);
    }
    window.addEventListener('online', handleOnline);
    window.addEventListener('offline', handleOffline);
    return () => {
      window.removeEventListener('online', handleOnline);
      window.removeEventListener('offline', handleOffline);
    };
  }, []);
  return isOnline;
}
```

----------------------------------------

TITLE: Creating Non-Blocking Action with startTransition in React
DESCRIPTION: Illustrates how to use the startTransition function returned by useTransition to wrap state updates and asynchronous operations. This makes the updates non-blocking, allowing the UI to remain responsive while the Action is processed in the background.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useTransition.md#_snippet_4

LANGUAGE: JavaScript
CODE:
```
import {useState, useTransition} from 'react';
import {updateQuantity} from './api';

function CheckoutForm() {
  const [isPending, startTransition] = useTransition();
  const [quantity, setQuantity] = useState(1);

  function onSubmit(newQuantity) {
    startTransition(async function () {
      const savedQuantity = await updateQuantity(newQuantity);
      startTransition(() => {
        setQuantity(savedQuantity);
      });
    });
  }
  // ...
}
```

----------------------------------------

TITLE: React Effect with Changed Dependencies and Cleanup
DESCRIPTION: This code shows a React Effect with updated dependencies (`['travel']`). When dependencies change, React first executes the cleanup function of the *previous* Effect (if it ran) and then runs the new Effect, ensuring proper resource management like disconnecting from a chat room before connecting to another.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/synchronizing-with-effects.md#_snippet_35

LANGUAGE: javascript
CODE:
```
// Effect for the third render (roomId = "travel")
  () => {
    const connection = createConnection('travel');
    connection.connect();
    return () => connection.disconnect();
  },
  // Dependencies for the third render (roomId = "travel")
  ['travel']
```

----------------------------------------

TITLE: Storing Function in State (Incorrect) - JavaScript
DESCRIPTION: This snippet illustrates an incorrect attempt to store a function directly in React state. When a function is passed to `useState` or `setFn`, React interprets it as an initializer or updater function and attempts to call it, storing its *result* instead of the function itself.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useState.md#_snippet_44

LANGUAGE: js
CODE:
```
const [fn, setFn] = useState(someFunction);

function handleClick() {
  setFn(someOtherFunction);
}
```

----------------------------------------

TITLE: Complete React Task Management Application with Centralized Wiring
DESCRIPTION: A comprehensive example demonstrating a React task management application where all context and reducer logic are consolidated into `TasksContext.js`. This setup simplifies the main `TaskApp` component and showcases state management, adding, changing, and deleting tasks using `useContext` and `useReducer`.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/scaling-up-with-reducer-and-context.md#_snippet_12

LANGUAGE: js
CODE:
```
import AddTask from './AddTask.js';
import TaskList from './TaskList.js';
import { TasksProvider } from './TasksContext.js';

export default function TaskApp() {
  return (
    <TasksProvider>
      <h1>Day off in Kyoto</h1>
      <AddTask />
      <TaskList />
    </TasksProvider>
  );
}
```

LANGUAGE: js
CODE:
```
import { createContext, useReducer } from 'react';

export const TasksContext = createContext(null);
export const TasksDispatchContext = createContext(null);

export function TasksProvider({ children }) {
  const [tasks, dispatch] = useReducer(
    tasksReducer,
    initialTasks
  );

  return (
    <TasksContext value={tasks}>
      <TasksDispatchContext value={dispatch}>
        {children}
      </TasksDispatchContext>
    </TasksContext>
  );
}

function tasksReducer(tasks, action) {
  switch (action.type) {
    case 'added': {
      return [...tasks, {
        id: action.id,
        text: action.text,
        done: false
      }];
    }
    case 'changed': {
      return tasks.map(t => {
        if (t.id === action.task.id) {
          return action.task;
        } else {
          return t;
        }
      });
    }
    case 'deleted': {
      return tasks.filter(t => t.id !== action.id);
    }
    default: {
      throw Error('Unknown action: ' + action.type);
    }
  }
}

const initialTasks = [
  { id: 0, text: 'Philosopher’s Path', done: true },
  { id: 1, text: 'Visit the temple', done: false },
  { id: 2, text: 'Drink matcha', done: false }
];
```

LANGUAGE: js
CODE:
```
import { useState, useContext } from 'react';
import { TasksDispatchContext } from './TasksContext.js';

export default function AddTask() {
  const [text, setText] = useState('');
  const dispatch = useContext(TasksDispatchContext);
  return (
    <>
      <input
        placeholder="Add task"
        value={text}
        onChange={e => setText(e.target.value)}
      />
      <button onClick={() => {
        setText('');
        dispatch({
          type: 'added',
          id: nextId++,
          text: text,
        }); 
      }}>Add</button>
    </>
  );
}

let nextId = 3;
```

LANGUAGE: js
CODE:
```
import { useState, useContext } from 'react';
import { TasksContext, TasksDispatchContext } from './TasksContext.js';

export default function TaskList() {
  const tasks = useContext(TasksContext);
  return (
    <ul>
      {tasks.map(task => (
        <li key={task.id}>
          <Task task={task} />
        </li>
      ))}
    </ul>
  );
}

function Task({ task }) {
  const [isEditing, setIsEditing] = useState(false);
  const dispatch = useContext(TasksDispatchContext);
  let taskContent;
  if (isEditing) {
    taskContent = (
      <>
        <input
          value={task.text}
          onChange={e => {
            dispatch({
              type: 'changed',
              task: {
                ...task,
                text: e.target.value
              }
            });
          }} />
        <button onClick={() => setIsEditing(false)}>
          Save
        </button>
      </>
    );
  } else {
    taskContent = (
      <>
        {task.text}
        <button onClick={() => setIsEditing(true)}>
          Edit
        </button>
      </>
    );
  }
  return (
    <label>
      <input
        type="checkbox"
        checked={task.done}
        onChange={e => {
          dispatch({
            type: 'changed',
            task: {
              ...task,
              done: e.target.checked
            }
          });
        }}
      />
      {taskContent}
      <button onClick={() => {
        dispatch({
          type: 'deleted',
          id: task.id
        });
      }}>
        Delete
      </button>
    </label>
  );
}
```

LANGUAGE: css
CODE:
```
button { margin: 5px; }
```

----------------------------------------

TITLE: Setting up React Application Root (JS)
DESCRIPTION: This JavaScript file initializes the React application by creating a root using `createRoot` and rendering the main `App` component within React's `StrictMode` for development checks.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useTransition.md#_snippet_42

LANGUAGE: js
CODE:
```
import React, { StrictMode } from 'react';
import { createRoot } from 'react-dom/client';
import './styles.css';
import App from './App';

const root = createRoot(document.getElementById('root'));
root.render(
  <StrictMode>
    <App />
  </StrictMode>
);
```

----------------------------------------

TITLE: Using Context as a Provider in React 19
DESCRIPTION: React 19 introduces a new syntax allowing `<Context>` to be rendered directly as a provider, simplifying the API compared to `<Context.Provider>`. This change aims to streamline context usage, with a codemod available for existing implementations.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/blog/2024/12/05/react-19.md#_snippet_12

LANGUAGE: js
CODE:
```
const ThemeContext = createContext('');

function App({children}) {
  return (
    <ThemeContext value="dark">
      {children}
    </ThemeContext>
  );  
}
```

----------------------------------------

TITLE: Identifying Missing Effect Cleanup with Strict Mode (Buggy)
DESCRIPTION: This set of code snippets demonstrates a React application where a `useEffect` hook in the `ChatRoom` component lacks a cleanup function. When run in React's `StrictMode`, this omission causes the effect to fire twice without proper disconnection, leading to an increasing number of active connections, highlighting a potential memory leak or resource mismanagement.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/StrictMode.md#_snippet_21

LANGUAGE: JavaScript
CODE:
```
import { StrictMode } from 'react';
import { createRoot } from 'react-dom/client';
import './styles.css';

import App from './App';

const root = createRoot(document.getElementById("root"));
root.render(
  <StrictMode>
    <App />
  </StrictMode>
);
```

LANGUAGE: JavaScript
CODE:
```
import { useState, useEffect } from 'react';
import { createConnection } from './chat.js';

const serverUrl = 'https://localhost:1234';
const roomId = 'general';

export default function ChatRoom() {
  useEffect(() => {
    const connection = createConnection(serverUrl, roomId);
    connection.connect();
  }, []);
  return <h1>Welcome to the {roomId} room!</h1>;
}
```

LANGUAGE: JavaScript
CODE:
```
let connections = 0;

export function createConnection(serverUrl, roomId) {
  // A real implementation would actually connect to the server
  return {
    connect() {
      console.log('✅ Connecting to "' + roomId + '" room at ' + serverUrl + '...');
      connections++;
      console.log('Active connections: ' + connections);
    },
    disconnect() {
      console.log('❌ Disconnected from "' + roomId + '" room at ' + serverUrl);
      connections--;
      console.log('Active connections: ' + connections);
    }
  };
}
```

LANGUAGE: CSS
CODE:
```
input { display: block; margin-bottom: 20px; }
button { margin-left: 10px; }
```

----------------------------------------

TITLE: Complete Example of React Context Usage
DESCRIPTION: A comprehensive example demonstrating the creation of a context, providing a context value, and consuming it in deeply nested components. It includes a `ThemeContext` for styling and shows how `Panel` and `Button` components consume the theme.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useContext.md#_snippet_5

LANGUAGE: js
CODE:
```
import { createContext, useContext } from 'react';

const ThemeContext = createContext(null);

export default function MyApp() {
  return (
    <ThemeContext value="dark">
      <Form />
    </ThemeContext>
  )
}

function Form() {
  return (
    <Panel title="Welcome">
      <Button>Sign up</Button>
      <Button>Log in</Button>
    </Panel>
  );
}

function Panel({ title, children }) {
  const theme = useContext(ThemeContext);
  const className = 'panel-' + theme;
  return (
    <section className={className}>
      <h1>{title}</h1>
      {children}
    </section>
  )
}

function Button({ children }) {
  const theme = useContext(ThemeContext);
  const className = 'button-' + theme;
  return (
    <button className={className}>
      {children}
    </button>
  );
}
```

LANGUAGE: css
CODE:
```
.panel-light,
.panel-dark {
  border: 1px solid black;
  border-radius: 4px;
  padding: 20px;
}
.panel-light {
  color: #222;
  background: #fff;
}

.panel-dark {
  color: #fff;
  background: rgb(23, 32, 42);
}

.button-light,
.button-dark {
  border: 1px solid #777;
  padding: 5px;
  margin-right: 10px;
  margin-top: 10px;
}

.button-dark {
  background: #222;
  color: #fff;
}

.button-light {
  background: #fff;
  color: #222;
}
```

----------------------------------------

TITLE: Displaying and Interacting with Todo List Items in React - JavaScript
DESCRIPTION: This component renders the list of todo items by mapping over the `todos` prop and creating a `Task` component for each. The `Task` component itself handles the display, editing, and completion status of individual todo items, utilizing local state for editing mode and calling `onChange` or `onDelete` props to communicate changes back to the parent.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useState.md#_snippet_20

LANGUAGE: JavaScript
CODE:
```
import { useState } from 'react';

export default function TaskList({
  todos,
  onChangeTodo,
  onDeleteTodo
}) {
  return (
    <ul>
      {todos.map(todo => (
        <li key={todo.id}>
          <Task
            todo={todo}
            onChange={onChangeTodo}
            onDelete={onDeleteTodo}
          />
        </li>
      ))}
    </ul>
  );
}

function Task({ todo, onChange, onDelete }) {
  const [isEditing, setIsEditing] = useState(false);
  let todoContent;
  if (isEditing) {
    todoContent = (
      <>
        <input
          value={todo.title}
          onChange={e => {
            onChange({
              ...todo,
              title: e.target.value
            });
          }} />
        <button onClick={() => setIsEditing(false)}>
          Save
        </button>
      </>
    );
  } else {
    todoContent = (
      <>
        {todo.title}
        <button onClick={() => setIsEditing(true)}>
          Edit
        </button>
      </>
    );
  }
  return (
    <label>
      <input
        type="checkbox"
        checked={todo.done}
        onChange={e => {
          onChange({
            ...todo,
            done: e.target.checked
          });
        }}
      />
      {todoContent}
      <button onClick={() => onDelete(todo.id)}>
        Delete
      </button>
    </label>
  );
}
```

----------------------------------------

TITLE: Correctly Handling Form Submission Side Effect in Event Handler
DESCRIPTION: Presents the recommended approach: placing the form submission side effects (POST request, notification) directly within the 'handleSubmit' event handler. This ensures the logic runs only when the form is submitted, avoiding issues caused by reactive dependencies changing.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/removing-effect-dependencies.md#_snippet_13

LANGUAGE: javascript
CODE:
```
function Form() {
  const theme = useContext(ThemeContext);

  function handleSubmit() {
    // ✅ Good: Event-specific logic is called from event handlers
    post('/api/register');
    showNotification('Successfully registered!', theme);
  }

  // ...
}
```

----------------------------------------

TITLE: React `use(resource)` API Reference
DESCRIPTION: Detailed API documentation for the `use` function, including its purpose, parameters, return values, and important caveats regarding its usage with Suspense, error boundaries, and Server/Client Components.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/use.md#_snippet_2

LANGUAGE: APIDOC
CODE:
```
use(resource)
  Description: Call `use` in your component to read the value of a resource like a Promise or context. Unlike React Hooks, `use` can be called within loops and conditional statements like `if`. Like React Hooks, the function that calls `use` must be a Component or Hook. When called with a Promise, the `use` API integrates with Suspense and error boundaries. The component calling `use` suspends while the Promise passed to `use` is pending. If the component that calls `use` is wrapped in a Suspense boundary, the fallback will be displayed. Once the Promise is resolved, the Suspense fallback is replaced by the rendered components using the data returned by the `use` API. If the Promise passed to `use` is rejected, the fallback of the nearest Error Boundary will be displayed.
  Parameters:
    resource:
      Type: Promise | Context
      Description: This is the source of the data you want to read a value from. A resource can be a Promise or a context.
  Returns:
    Type: any
    Description: The `use` API returns the value that was read from the resource like the resolved value of a Promise or context.
  Caveats:
    - The `use` API must be called inside a Component or a Hook.
    - When fetching data in a Server Component, prefer `async` and `await` over `use`. `async` and `await` pick up rendering from the point where `await` was invoked, whereas `use` re-renders the component after the data is resolved.
    - Prefer creating Promises in Server Components and passing them to Client Components over creating Promises in Client Components. Promises created in Client Components are recreated on every render. Promises passed from a Server Component to a Client Component are stable across re-renders.
```

----------------------------------------

TITLE: Calling Server Functions from Client Actions with useTransition
DESCRIPTION: This example demonstrates how to define a server function (`updateName`) and then call it from a client-side component's action. It utilizes React's `useTransition` hook to manage the pending state during the asynchronous server function call, providing immediate feedback to the user.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/rsc/server-functions.md#_snippet_2

LANGUAGE: JavaScript
CODE:
```
"use server";

export async function updateName(name) {
  if (!name) {
    return {error: 'Name is required'};
  }
  await db.users.updateName(name);
}
```

LANGUAGE: JavaScript
CODE:
```
"use client";

import {updateName} from './actions';

function UpdateName() {
  const [name, setName] = useState('');
  const [error, setError] = useState(null);

  const [isPending, startTransition] = useTransition();

  const submitAction = async () => {
    startTransition(async () => {
      const {error} = await updateName(name);
      if (error) {
        setError(error);
      } else {
        setName('');
      }
    })
  }
  
  return (
    <form action={submitAction}>
      <input type="text" name="name" disabled={isPending}/>
      {error && <span>Failed: {error}</span>}
    </form>
  )
}
```

----------------------------------------

TITLE: Implementing Enter/Exit Animation with ViewTransition and useState in React
DESCRIPTION: This example demonstrates a complete interactive setup for `ViewTransition`. It uses `useState` to toggle the visibility of an `Item` component, which wraps a `Video` component in `ViewTransition`. The state update is wrapped in `startTransition` to ensure the animation is triggered correctly on mount and unmount.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/ViewTransition.md#_snippet_5

LANGUAGE: js
CODE:
```
import {
  unstable_ViewTransition as ViewTransition,
  useState,
  startTransition
} from 'react';
import {Video} from "./Video";
import videos from "./data"

function Item() {
  return (
    <ViewTransition>
      <Video video={videos[0]}/>
    </ViewTransition>
  );
}

export default function Component() {
  const [showItem, setShowItem] = useState(false);
  return (
    <>
      <button
        onClick={() => {
          startTransition(() => {
            setShowItem((prev) => !prev);
          });
        }}
      >{showItem ? '➖' : '➕'}</button>

      {showItem ? <Item /> : null}
    </>
  );
}
```

----------------------------------------

TITLE: Updating State in React Effect (Correct Approach)
DESCRIPTION: This snippet shows the correct way to update state within a useEffect hook when the new state depends on the previous state. It uses an updater function (msgs => [...msgs, receivedMessage]) passed to setMessages. This avoids reading the 'messages' state directly within the Effect, allowing 'messages' to be omitted from the dependency array and preventing unnecessary re-synchronization.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/removing-effect-dependencies.md#_snippet_19

LANGUAGE: javascript
CODE:
```
function ChatRoom({ roomId }) {
  const [messages, setMessages] = useState([]);
  useEffect(() => {
    const connection = createConnection();
    connection.connect();
    connection.on('message', (receivedMessage) => {
      setMessages(msgs => [...msgs, receivedMessage]);
    });
    return () => connection.disconnect();
  }, [roomId]); // ✅ All dependencies declared
  // ...

```

----------------------------------------

TITLE: Migrating `ReactDOM.render` to `createRoot` - JavaScript
DESCRIPTION: This JavaScript snippet illustrates the migration from the deprecated `ReactDOM.render` to the modern `ReactDOM.createRoot` API. `createRoot` provides a new way to manage React roots, enabling concurrent features and improved performance. The example shows both the old and new approaches for rendering a React application.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/blog/2024/04/25/react-19-upgrade-guide.md#_snippet_22

LANGUAGE: JavaScript
CODE:
```
// Before
import {render} from 'react-dom';
render(<App />, document.getElementById('root'));

// After
import {createRoot} from 'react-dom/client';
const root = createRoot(document.getElementById('root'));
root.render(<App />);
```

----------------------------------------

TITLE: React use API for Conditional Context Reading
DESCRIPTION: Unlike `useContext`, the `use` API allows for conditional reading of Context within a component's render function. This means `use` can be called after early returns or inside conditional blocks, providing more flexibility in how context is consumed.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/blog/2024/12/05/react-19.md#_snippet_8

LANGUAGE: javascript
CODE:
```
import {use} from 'react';
import ThemeContext from './ThemeContext'

function Heading({children}) {
  if (children == null) {
    return null;
  }
  
  // This would not work with useContext
  // because of the early return.
  const theme = use(ThemeContext);
  return (
    <h1 style={{color: theme.color}}>
      {children}
    </h1>
  );
}
```

----------------------------------------

TITLE: Provide React Context for Global State
DESCRIPTION: Illustrates how to wrap components with `TasksContext.Provider` and `TasksDispatchContext.Provider` to make shared state (tasks) and state update logic (dispatch) accessible throughout the component tree, avoiding manual prop passing.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/scaling-up-with-reducer-and-context.md#_snippet_6

LANGUAGE: js
CODE:
```
<TasksContext value={tasks}>
  <TasksDispatchContext value={dispatch}>
    <h1>Day off in Kyoto</h1>
    <AddTask />
    <TaskList />
  </TasksDispatchContext>
</TasksContext>
```

----------------------------------------

TITLE: Basic usage of React's `use` API
DESCRIPTION: Demonstrates the fundamental syntax for using the `use` API to read a value from a resource.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/use.md#_snippet_0

LANGUAGE: js
CODE:
```
const value = use(resource);
```

----------------------------------------

TITLE: Correct `useFormStatus` Usage (Nested Component) - React
DESCRIPTION: This snippet illustrates the correct way to use `useFormStatus` by calling it from a component (`Submit`) that is rendered *inside* the `<form>`. This ensures `pending` correctly reflects the submission status of the wrapping `<form>`, enabling proper UI updates like disabling a button during submission. The component calling the hook must be a child of the form.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react-dom/hooks/useFormStatus.md#_snippet_5

LANGUAGE: JavaScript
CODE:
```
function Submit() {
  // ✅ `pending` will be derived from the form that wraps the Submit component
  const { pending } = useFormStatus(); 
  return <button disabled={pending}>...</button>;
}

function Form() {
  // This is the <form> `useFormStatus` tracks
  return (
    <form action={submit}>
      <Submit />
    </form>
  );
}
```

----------------------------------------

TITLE: Calculating Derived State During Rendering (JavaScript)
DESCRIPTION: This example shows the correct and preferred way to handle derived state in React. Instead of using `useEffect` to update `fullName`, it is calculated directly during the component's render phase. This approach is more efficient, avoids redundant state, and aligns better with React's declarative nature, as `fullName` is always up-to-date with `firstName` and `lastName` without side effects.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/escape-hatches.md#_snippet_6

LANGUAGE: JavaScript
CODE:
```
function Form() {
  const [firstName, setFirstName] = useState('Taylor');
  const [lastName, setLastName] = useState('Swift');
  // ✅ Good: calculated during rendering
  const fullName = firstName + ' ' + lastName;
  // ...
}
```

----------------------------------------

TITLE: Rendering Categorized Scientist List (Filter Method) - React
DESCRIPTION: This React component `List` imports `people` data and `getImageUrl` to display scientists. It categorizes them into 'chemists' and 'everyone else' using `Array.prototype.filter` calls within the component's render logic, then renders these categories using the `ListSection` sub-component.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/rendering-lists.md#_snippet_28

LANGUAGE: JavaScript
CODE:
```
import { getImageUrl } from './utils.js';

function ListSection({ title, people }) {
  return (
    <>
      <h2>{title}</h2>
      <ul>
        {people.map(person =>
          <li key={person.id}>
            <img
              src={getImageUrl(person)}
              alt={person.name}
            />
            <p>
              <b>{person.name}:</b>
              {' ' + person.profession + ' '}
              known for {person.accomplishment}
            </p>
          </li>
        )}
      </ul>
    </>
  );
}

export default function List() {
  const chemists = people.filter(person =>
    person.profession === 'chemist'
  );
  const everyoneElse = people.filter(person =>
    person.profession !== 'chemist'
  );
  return (
    <article>
      <h1>Scientists</h1>
      <ListSection
        title="Chemists"
        people={chemists}
      />
      <ListSection
        title="Everyone Else"
        people={everyoneElse}
      />
    </article>
  );
}
```

----------------------------------------

TITLE: Displaying JSX Content in a React Root
DESCRIPTION: This snippet illustrates the `root.render` method's role in displaying any React node, typically JSX, into the browser DOM node managed by the React root. It's the primary way to update the UI after the root is established.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react-dom/client/createRoot.md#_snippet_3

LANGUAGE: js
CODE:
```
root.render(<App />);
```

----------------------------------------

TITLE: Refactoring Event Handlers: Dispatching Actions (Reducer Pattern)
DESCRIPTION: These event handlers illustrate the refactored approach where state updates are managed by dispatching actions to a reducer. Instead of directly setting state, each function dispatches an action object describing 'what happened' (e.g., 'added', 'changed', 'deleted') along with relevant data.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/extracting-state-logic-into-a-reducer.md#_snippet_5

LANGUAGE: JavaScript
CODE:
```
function handleAddTask(text) {
  dispatch({
    type: 'added',
    id: nextId++,
    text: text,
  });
}

function handleChangeTask(task) {
  dispatch({
    type: 'changed',
    task: task,
  });
}

function handleDeleteTask(taskId) {
  dispatch({
    type: 'deleted',
    id: taskId,
  });
}
```

----------------------------------------

TITLE: Correct State Update in useEffect with Updater Function - JavaScript
DESCRIPTION: This snippet provides the correct way to update state based on its previous value within a `useEffect` hook using a state updater function (`c => c + 1`). By using the updater function, `count` is no longer a dependency of the effect, preventing the `setInterval` from being cleared and re-established on every `count` change, ensuring a continuous counter.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useEffect.md#_snippet_39

LANGUAGE: JavaScript
CODE:
```
import { useState, useEffect } from 'react';

export default function Counter() {
  const [count, setCount] = useState(0);

  useEffect(() => {
    const intervalId = setInterval(() => {
      setCount(c => c + 1); // ✅ Pass a state updater
    }, 1000);
    return () => clearInterval(intervalId);
  }, []); // ✅ Now count is not a dependency

  return <h1>{count}</h1>;
}
```

----------------------------------------

TITLE: Chaining React Effects for Dependent State Updates (Anti-Pattern)
DESCRIPTION: This snippet demonstrates an anti-pattern in React where multiple `useEffect` hooks are chained together to update dependent state variables. This approach leads to inefficient re-renders and makes the code rigid and fragile, especially when dealing with features like game history. It shows how `card` updates `goldCardCount`, which updates `round`, which updates `isGameOver`, each triggering a separate render cycle.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/you-might-not-need-an-effect.md#_snippet_17

LANGUAGE: JavaScript
CODE:
```
function Game() {
  const [card, setCard] = useState(null);
  const [goldCardCount, setGoldCardCount] = useState(0);
  const [round, setRound] = useState(1);
  const [isGameOver, setIsGameOver] = useState(false);

  // 🔴 Avoid: Chains of Effects that adjust the state solely to trigger each other
  useEffect(() => {
    if (card !== null && card.gold) {
      setGoldCardCount(c => c + 1);
    }
  }, [card]);

  useEffect(() => {
    if (goldCardCount > 3) {
      setRound(r => r + 1)
      setGoldCardCount(0);
    }
  }, [goldCardCount]);

  useEffect(() => {
    if (round > 5) {
      setIsGameOver(true);
    }
  }, [round]);

  useEffect(() => {
    alert('Good game!');
  }, [isGameOver]);

  function handlePlaceCard(nextCard) {
    if (isGameOver) {
      throw Error('Game already ended.');
    } else {
      setCard(nextCard);
    }
  }

  // ...
}
```

----------------------------------------

TITLE: Defining a Custom Hook for Chat Room Connection (React)
DESCRIPTION: This `useChatRoom` custom Hook encapsulates the logic for connecting to and disconnecting from a chat service. It utilizes `useEffect` to manage the connection lifecycle, ensuring the connection is established when `roomId` or `serverUrl` change and disconnected on unmount.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useEffect.md#_snippet_9

LANGUAGE: js
CODE:
```
function useChatRoom({ serverUrl, roomId }) {
  useEffect(() => {
    const options = {
      serverUrl: serverUrl,
      roomId: roomId
    };
    const connection = createConnection(options);
    connection.connect();
    return () => connection.disconnect();
  }, [roomId, serverUrl]);
}
```

----------------------------------------

TITLE: Defining a Custom useOnlineStatus Hook
DESCRIPTION: Illustrates how to extract the `useSyncExternalStore` logic into a reusable custom React Hook, `useOnlineStatus`. This hook encapsulates the subscription and snapshot logic, making it easier to share network status functionality across multiple components.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useSyncExternalStore.md#_snippet_10

LANGUAGE: JavaScript
CODE:
```
import { useSyncExternalStore } from 'react';

export function useOnlineStatus() {
  const isOnline = useSyncExternalStore(subscribe, getSnapshot);
  return isOnline;
}

function getSnapshot() {
  // ...
}

function subscribe(callback) {
  // ...
}
```

----------------------------------------

TITLE: Root Application Component with Suspense and Router, JavaScript
DESCRIPTION: Defines the main application structure, including the root Suspense boundary and a simple client-side router. It manages page navigation and renders different content based on the current URL, showing a BigSpinner fallback during initial loading.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/Suspense.md#_snippet_25

LANGUAGE: JavaScript
CODE:
```
import { Suspense, useState } from 'react';
import IndexPage from './IndexPage.js';
import ArtistPage from './ArtistPage.js';
import Layout from './Layout.js';

export default function App() {
  return (
    <Suspense fallback={<BigSpinner />}>
      <Router />
    </Suspense>
  );
}

function Router() {
  const [page, setPage] = useState('/');

  function navigate(url) {
    setPage(url);
  }

  let content;
  if (page === '/') {
    content = (
      <IndexPage navigate={navigate} />
    );
  } else if (page === '/the-beatles') {
    content = (
      <ArtistPage
        artist={{
          id: 'the-beatles',
          name: 'The Beatles',
        }}
      />
    );
  }
  return (
    <Layout>
      {content}
    </Layout>
  );
}

function BigSpinner() {
  return <h2>🌀 Loading...</h2>;
}
```

----------------------------------------

TITLE: Simplifying React Form Submission with `useActionState`
DESCRIPTION: This example demonstrates how to streamline form submissions in React 19 by combining `<form>` Actions with the `useActionState` hook. It illustrates managing pending states, handling errors, and automatically resetting forms after successful data submission, providing a concise pattern for asynchronous form operations.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/blog/2024/12/05/react-19.md#_snippet_2

LANGUAGE: javascript
CODE:
```
// Using <form> Actions and useActionState
function ChangeName({ name, setName }) {
  const [error, submitAction, isPending] = useActionState(
    async (previousState, formData) => {
      const error = await updateName(formData.get("name"));
      if (error) {
        return error;
      }
      redirect("/path");
      return null;
    },
    null,
  );

  return (
    <form action={submitAction}>
      <input type="text" name="name" />
      <button type="submit" disabled={isPending}>Update</button>
      {error && <p>{error}</p>}
    </form>
  );
}
```

----------------------------------------

TITLE: Implementing Add to Cart Form with useActionState in React
DESCRIPTION: This React component demonstrates the use of `useActionState` to manage form state and handle submissions. It interacts with a server action to add items to a cart and conditionally renders success or error messages based on the server's response, showcasing how to display structured feedback.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useActionState.md#_snippet_7

LANGUAGE: JavaScript
CODE:
```
import { useActionState, useState } from "react";
import { addToCart } from "./actions.js";

function AddToCartForm({itemID, itemTitle}) {
  const [formState, formAction] = useActionState(addToCart, {});
  return (
    <form action={formAction}>
      <h2>{itemTitle}</h2>
      <input type="hidden" name="itemID" value={itemID} />
      <button type="submit">Add to Cart</button>
      {formState?.success &&
        <div className="toast">
          Added to cart! Your cart now has {formState.cartSize} items.
        </div>
      }
      {formState?.success === false &&
        <div className="error">
          Failed to add to cart: {formState.message}
        </div>
      }
    </form>
  );
}

export default function App() {
  return (
    <>
      <AddToCartForm itemID="1" itemTitle="JavaScript: The Definitive Guide" />
      <AddToCartForm itemID="2" itemTitle="JavaScript: The Good Parts" />
    </>
  )
}
```

----------------------------------------

TITLE: Caching Asynchronous Fetch Operations with React `cache` in JavaScript
DESCRIPTION: This example illustrates how to cache asynchronous work, specifically a `fetch` operation, using React's `cache` API. The `getData` function wraps `fetchData` to memoize the promise returned by the fetch. The first call to `getData()` initiates the fetch and caches the promise, while the subsequent `await getData()` retrieves the cached promise's result, optimizing for concurrent work and reducing wait times.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/cache.md#_snippet_11

LANGUAGE: JavaScript
CODE:
```
async function fetchData() {
  return await fetch(`https://...`);
}

const getData = cache(fetchData);

async function MyComponent() {
  getData();
  // ... some computational work  
  await getData();
  // ...
}
```

----------------------------------------

TITLE: Managing Chat Room Connection Lifecycle with React useEffect
DESCRIPTION: The `ChatRoom` component uses the `useEffect` hook to manage the lifecycle of a chat connection. It dynamically selects either an encrypted or unencrypted connection function based on the `isEncrypted` prop. The effect connects to the room when `roomId` or `isEncrypted` changes and disconnects on cleanup, ensuring proper resource management.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/lifecycle-of-reactive-effects.md#_snippet_49

LANGUAGE: javascript
CODE:
```
import { useState, useEffect } from 'react';
import {
  createEncryptedConnection,
  createUnencryptedConnection,
} from './chat.js';

export default function ChatRoom({ roomId, isEncrypted }) {
  useEffect(() => {
    const createConnection = isEncrypted ?
      createEncryptedConnection :
      createUnencryptedConnection;
    const connection = createConnection(roomId);
    connection.connect();
    return () => connection.disconnect();
  }, [roomId, isEncrypted]);

  return <h1>Welcome to the {roomId} room!</h1>;
}
```

----------------------------------------

TITLE: Incorrect State Update Pattern in React
DESCRIPTION: This snippet demonstrates an incorrect way to update state multiple times consecutively based on its current value. Calling `setAge(age + 1)` repeatedly within the same event handler will not increment `age` by the expected amount because `age` does not update immediately within the running code.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useState.md#_snippet_10

LANGUAGE: JavaScript
CODE:
```
function handleClick() {
  setAge(age + 1); // setAge(42 + 1)
  setAge(age + 1); // setAge(42 + 1)
  setAge(age + 1); // setAge(42 + 1)
}
```

----------------------------------------

TITLE: React Tooltip Component with Positioning Logic and Portals
DESCRIPTION: This React component implements the core tooltip functionality. It uses `useRef` to measure its own height, `useEffect` to update the height after render, and `createPortal` to render the tooltip outside the DOM hierarchy. It calculates the `x` and `y` coordinates to position the tooltip above or below the target rectangle, including an artificial rendering delay for demonstration purposes.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useLayoutEffect.md#_snippet_18

LANGUAGE: JavaScript
CODE:
```
import { useRef, useEffect, useState } from 'react';
import { createPortal } from 'react-dom';
import TooltipContainer from './TooltipContainer.js';

export default function Tooltip({ children, targetRect }) {
  const ref = useRef(null);
  const [tooltipHeight, setTooltipHeight] = useState(0);

  // This artificially slows down rendering
  let now = performance.now();
  while (performance.now() - now < 100) {
    // Do nothing for a bit...
  }

  useEffect(() => {
    const { height } = ref.current.getBoundingClientRect();
    setTooltipHeight(height);
  }, []);

  let tooltipX = 0;
  let tooltipY = 0;
  if (targetRect !== null) {
    tooltipX = targetRect.left;
    tooltipY = targetRect.top - tooltipHeight;
    if (tooltipY < 0) {
      // It doesn't fit above, so place below.
      tooltipY = targetRect.bottom;
    }
  }

  return createPortal(
    <TooltipContainer x={tooltipX} y={tooltipY} contentRef={ref}>
      {children}
    </TooltipContainer>,
    document.body
  );
}
```

----------------------------------------

TITLE: Incorrect Hook Usage Examples in React - JavaScript
DESCRIPTION: This snippet illustrates various incorrect ways to use React Hooks, leading to 'Rules of Hooks' violations. It shows examples of calling Hooks inside conditions, loops, after conditional returns, within event handlers, inside useMemo callbacks, and within class components.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/warnings/invalid-hook-call-warning.md#_snippet_1

LANGUAGE: JavaScript
CODE:
```
function Bad({ cond }) {
  if (cond) {
    // 🔴 Bad: inside a condition (to fix, move it outside!)
    const theme = useContext(ThemeContext);
  }
  // ...
}

function Bad() {
  for (let i = 0; i < 10; i++) {
    // 🔴 Bad: inside a loop (to fix, move it outside!)
    const theme = useContext(ThemeContext);
  }
  // ...
}

function Bad({ cond }) {
  if (cond) {
    return;
  }
  // 🔴 Bad: after a conditional return (to fix, move it before the return!)
  const theme = useContext(ThemeContext);
  // ...
}

function Bad() {
  function handleClick() {
    // 🔴 Bad: inside an event handler (to fix, move it outside!)
    const theme = useContext(ThemeContext);
  }
  // ...
}

function Bad() {
  const style = useMemo(() => {
    // 🔴 Bad: inside useMemo (to fix, move it outside!)
    const theme = useContext(ThemeContext);
    return createStyle(theme);
  });
  // ...
}

class Bad extends React.Component {
  render() {
    // 🔴 Bad: inside a class component (to fix, write a function component instead of a class!)
    useEffect(() => {})
    // ...
  }
}
```

----------------------------------------

TITLE: Demonstrating XSS Vulnerability with dangerouslySetInnerHTML
DESCRIPTION: Illustrates a critical security vulnerability (XSS) when `dangerouslySetInnerHTML` is used with untrusted input. It shows how malicious HTML, such as an `<img>` tag with an `onerror` attribute, can execute arbitrary JavaScript, leading to security breaches. This snippet serves as a warning against using unsanitized data.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react-dom/components/common.md#_snippet_37

LANGUAGE: js
CODE:
```
const post = {
  // Imagine this content is stored in the database.
  content: `<img src="" onerror='alert("you were hacked")'>`
};

export default function MarkdownPreview() {
  // 🔴 SECURITY HOLE: passing untrusted input to dangerouslySetInnerHTML
  const markup = { __html: post.content };
  return <div dangerouslySetInnerHTML={markup} />;
}
```

----------------------------------------

TITLE: Building a Concurrent React Application with Suspense and Transitions
DESCRIPTION: This comprehensive example showcases a React application utilizing `Suspense` for data fetching and `startTransition` for navigation. It demonstrates how different components interact, including a custom router, data fetching utilities, and UI layouts, to create a smooth, concurrent user experience.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/Suspense.md#_snippet_36

LANGUAGE: JavaScript
CODE:
```
import { Suspense, startTransition, useState } from 'react';
import IndexPage from './IndexPage.js';
import ArtistPage from './ArtistPage.js';
import Layout from './Layout.js';

export default function App() {
  return (
    <Suspense fallback={<BigSpinner />}>
      <Router />
    </Suspense>
  );
}

function Router() {
  const [page, setPage] = useState('/');

  function navigate(url) {
    startTransition(() => {
      setPage(url);
    });
  }

  let content;
  if (page === '/') {
    content = (
      <IndexPage navigate={navigate} />
    );
  } else if (page === '/the-beatles') {
    content = (
      <ArtistPage
        artist={{
          id: 'the-beatles',
          name: 'The Beatles',
        }}
      />
    );
  }
  return (
    <Layout>
      {content}
    </Layout>
  );
}

function BigSpinner() {
  return <h2>🌀 Loading...</h2>;
}
```

LANGUAGE: JavaScript
CODE:
```
export default function Layout({ children }) {
  return (
    <div className="layout">
      <section className="header">
        Music Browser
      </section>
      <main>
        {children}
      </main>
    </div>
  );
}
```

LANGUAGE: JavaScript
CODE:
```
export default function IndexPage({ navigate }) {
  return (
    <button onClick={() => navigate('/the-beatles')}>
      Open The Beatles artist page
    </button>
  );
}
```

LANGUAGE: JavaScript
CODE:
```
import { Suspense } from 'react';
import Albums from
```

----------------------------------------

TITLE: Incorrect: Mutating Object State Directly in React
DESCRIPTION: This snippet demonstrates an anti-pattern in React state management: directly mutating an object held in state. React relies on reference equality to detect changes, so direct mutation will not trigger a re-render, leading to UI inconsistencies.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useState.md#_snippet_14

LANGUAGE: JavaScript
CODE:
```
form.firstName = 'Taylor';
```

----------------------------------------

TITLE: Complete Example of Conditional Text Rendering with If Statement in React
DESCRIPTION: A full React component example demonstrating the use of `let` and `if` statements to conditionally render text content within an `Item` component. The `PackingList` component uses this `Item` component to display a list with packed items marked with a checkmark.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/conditional-rendering.md#_snippet_13

LANGUAGE: js
CODE:
```
function Item({ name, isPacked }) {
  let itemContent = name;
  if (isPacked) {
    itemContent = name + " ✅";
  }
  return (
    <li className="item">
      {itemContent}
    </li>
  );
}

export default function PackingList() {
  return (
    <section>
      <h1>Sally Ride's Packing List</h1>
      <ul>
        <Item 
          isPacked={true} 
          name="Space suit" 
        />
        <Item 
          isPacked={true} 
          name="Helmet with a golden leaf" 
        />
        <Item 
          isPacked={false} 
          name="Photo of Tam" 
        />
      </ul>
    </section>
  );
}
```

----------------------------------------

TITLE: Issue: Re-rendering Child Components Without useCallback in React
DESCRIPTION: This example demonstrates the problem that arises when a function prop (`handleSubmit`) is defined directly within a component without `useCallback`. A new function instance is created on every re-render, causing `memo` on the child component (`ShippingForm`) to fail, leading to unnecessary re-renders.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useCallback.md#_snippet_5

LANGUAGE: JavaScript
CODE:
```
function ProductPage({ productId, referrer, theme }) {
  // Every time the theme changes, this will be a different function...
  function handleSubmit(orderDetails) {
    post('/product/' + productId + '/buy', {
      referrer,
      orderDetails,
    });
  }
  
  return (
    <div className={theme}>
      {/* ... so ShippingForm's props will never be the same, and it will re-render every time */}
      <ShippingForm onSubmit={handleSubmit} />
    </div>
  );
}
```

----------------------------------------

TITLE: React Chat Application with Key-Based Form Reset
DESCRIPTION: This updated set of components demonstrates how adding a `key` prop to the `Chat` component (`key={to.id}`) forces its re-creation and state reset whenever the selected contact changes. This ensures that the message input field is cleared, preventing users from accidentally sending messages to the wrong recipient.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/preserving-and-resetting-state.md#_snippet_19

LANGUAGE: javascript
CODE:
```
import { useState } from 'react';
import Chat from './Chat.js';
import ContactList from './ContactList.js';

export default function Messenger() {
  const [to, setTo] = useState(contacts[0]);
  return (
    <div>
      <ContactList
        contacts={contacts}
        selectedContact={to}
        onSelect={contact => setTo(contact)}
      />
      <Chat key={to.id} contact={to} />
    </div>
  )
}

const contacts = [
  { id: 0, name: 'Taylor', email: 'taylor@mail.com' },
  { id: 1, name: 'Alice', email: 'alice@mail.com' },
  { id: 2, name: 'Bob', email: 'bob@mail.com' }
];
```

LANGUAGE: javascript
CODE:
```
export default function ContactList({
  selectedContact,
  contacts,
  onSelect
}) {
  return (
    <section className="contact-list">
      <ul>
        {contacts.map(contact =>
          <li key={contact.id}>
            <button onClick={() => {
              onSelect(contact);
            }}>
              {contact.name}
            </button>
          </li>
        )}
      </ul>
    </section>
  );
}
```

LANGUAGE: javascript
CODE:
```
import { useState } from 'react';

export default function Chat({ contact }) {
  const [text, setText] = useState('');
  return (
    <section className="chat">
      <textarea
        value={text}
        placeholder={'Chat to ' + contact.name}
        onChange={e => setText(e.target.value)}
      />
      <br />
      <button>Send to {contact.email}</button>
    </section>
  );
}
```

LANGUAGE: css
CODE:
```
.chat, .contact-list {
  float: left;
  margin-bottom: 20px;
}
ul, li {
  list-style: none;
  margin: 0;
  padding: 0;
}
li button {
  width: 100px;
  padding: 10px;
  margin-right: 10px;
}
textarea {
  height: 150px;
}
```

----------------------------------------

TITLE: Declaring State with useState in React
DESCRIPTION: This JavaScript snippet demonstrates the declaration of a state variable `index` and its corresponding setter function `setIndex` using the `useState` Hook. The initial value of `index` is set to `0`, allowing the component to remember and update this value over time.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/state-a-components-memory.md#_snippet_10

LANGUAGE: JavaScript
CODE:
```
const [index, setIndex] = useState(0);
```

----------------------------------------

TITLE: Attempting to Limit `useEffect` Re-runs with Empty Dependencies in React
DESCRIPTION: This snippet illustrates an attempt to optimize `useEffect` by providing an empty dependency array `[]`. While intended to run the effect only once, it leads to a `React Hook useEffect has a missing dependency` error because the `isPlaying` prop, used within the effect, is not declared as a dependency. This demonstrates a common pitfall when trying to control effect re-execution.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/synchronizing-with-effects.md#_snippet_9

LANGUAGE: js
CODE:
```
import { useState, useRef, useEffect } from 'react';

function VideoPlayer({ src, isPlaying }) {
  const ref = useRef(null);

  useEffect(() => {
    if (isPlaying) {
      console.log('Calling video.play()');
      ref.current.play();
    } else {
      console.log('Calling video.pause()');
      ref.current.pause();
    }
  }, []); // This causes an error

  return <video ref={ref} src={src} loop playsInline />;
}

export default function App() {
  const [isPlaying, setIsPlaying] = useState(false);
  const [text, setText] = useState('');
  return (
    <>
      <input value={text} onChange={e => setText(e.target.value)} />
      <button onClick={() => setIsPlaying(!isPlaying)}>
        {isPlaying ? 'Pause' : 'Play'}
      </button>
      <VideoPlayer
        isPlaying={isPlaying}
        src="https://interactive-examples.mdn.mozilla.net/media/cc0-videos/flower.mp4"
      />
    </>
  );
}
```

LANGUAGE: css
CODE:
```
input, button { display: block; margin-bottom: 20px; }
video { width: 250px; }
```

----------------------------------------

TITLE: React Task Management App using useReducer Hook
DESCRIPTION: A complete React application demonstrating state management with the `useReducer` hook. It includes `TaskApp` as the main component, which dispatches actions to a `tasksReducer` for adding, changing, and deleting tasks. Helper components `AddTask` and `TaskList` handle user interaction and display. This example centralizes state logic within the reducer.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/scaling-up-with-reducer-and-context.md#_snippet_0

LANGUAGE: javascript
CODE:
```
import { useReducer } from 'react';
import AddTask from './AddTask.js';
import TaskList from './TaskList.js';

export default function TaskApp() {
  const [tasks, dispatch] = useReducer(
    tasksReducer,
    initialTasks
  );

  function handleAddTask(text) {
    dispatch({
      type: 'added',
      id: nextId++,
      text: text,
    });
  }

  function handleChangeTask(task) {
    dispatch({
      type: 'changed',
      task: task
    });
  }

  function handleDeleteTask(taskId) {
    dispatch({
      type: 'deleted',
      id: taskId
    });
  }

  return (
    <>
      <h1>Day off in Kyoto</h1>
      <AddTask
        onAddTask={handleAddTask}
      />
      <TaskList
        tasks={tasks}
        onChangeTask={handleChangeTask}
        onDeleteTask={handleDeleteTask}
      />
    </>
  );
}

function tasksReducer(tasks, action) {
  switch (action.type) {
    case 'added': {
      return [...tasks, {
        id: action.id,
        text: action.text,
        done: false
      }];
    }
    case 'changed': {
      return tasks.map(t => {
        if (t.id === action.task.id) {
          return action.task;
        } else {
          return t;
        }
      });
    }
    case 'deleted': {
      return tasks.filter(t => t.id !== action.id);
    }
    default: {
      throw Error('Unknown action: ' + action.type);
    }
  }
}

let nextId = 3;
const initialTasks = [
  { id: 0, text: 'Philosopher’s Path', done: true },
  { id: 1, text: 'Visit the temple', done: false },
  { id: 2, text: 'Drink matcha', done: false }
];
```

LANGUAGE: javascript
CODE:
```
import { useState } from 'react';

export default function AddTask({ onAddTask }) {
  const [text, setText] = useState('');
  return (
    <>
      <input
        placeholder="Add task"
        value={text}
        onChange={e => setText(e.target.value)}
      />
      <button onClick={() => {
        setText('');
        onAddTask(text);
      }}>Add</button>
    </>
  )
}
```

LANGUAGE: javascript
CODE:
```
import { useState } from 'react';

export default function TaskList({
  tasks,
  onChangeTask,
  onDeleteTask
}) {
  return (
    <ul>
      {tasks.map(task => (
        <li key={task.id}>
          <Task
            task={task}
            onChange={onChangeTask}
            onDelete={onDeleteTask}
          />
        </li>
      ))}
    </ul>
  );
}

function Task({ task, onChange, onDelete }) {
  const [isEditing, setIsEditing] = useState(false);
  let taskContent;
  if (isEditing) {
    taskContent = (
      <>
        <input
          value={task.text}
          onChange={e => {
            onChange({
              ...task,
              text: e.target.value
            });
          }} />
        <button onClick={() => setIsEditing(false)}>
          Save
        </button>
      </>
    );
  } else {
    taskContent = (
      <>
        {task.text}
        <button onClick={() => setIsEditing(true)}>
          Edit
        </button>
      </>
    );
  }
  return (
    <label>
      <input
        type="checkbox"
        checked={task.done}
        onChange={e => {
          onChange({
            ...task,
            done: e.target.checked
          });
        }}
      />
      {taskContent}
      <button onClick={() => onDelete(task.id)}>
        Delete
      </button>
    </label>
  );
}
```

LANGUAGE: css
CODE:
```
button { margin: 5px; }
li { list-style-type: none; }
ul, li { margin: 0; padding: 0; }
```

----------------------------------------

TITLE: Associating Labels with Inputs in React
DESCRIPTION: This example illustrates two methods for associating labels with input elements in React for improved accessibility and user experience. It shows nesting an input within a `<label>` tag and using `htmlFor` with `useId` for dynamic ID generation when nesting is not possible.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react-dom/components/input.md#_snippet_3

LANGUAGE: js
CODE:
```
import { useId } from 'react';

export default function Form() {
  const ageInputId = useId();
  return (
    <>
      <label>
        Your first name:
        <input name="firstName" />
      </label>
      <hr />
      <label htmlFor={ageInputId}>Your age:</label>
      <input id={ageInputId} name="age" type="number" />
    </>
  );
}
```

LANGUAGE: css
CODE:
```
input { margin: 5px; }
```

----------------------------------------

TITLE: Updating Simple Form State in React with useState
DESCRIPTION: This React component demonstrates how to manage form input state using a single object in `useState`. Each input's `onChange` handler updates a specific property of the `form` state object by creating a new object using the spread syntax (`{ ...form, property: value }`), ensuring immutability.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useState.md#_snippet_16

LANGUAGE: js
CODE:
```
import { useState } from 'react';

export default function Form() {
  const [form, setForm] = useState({
    firstName: 'Barbara',
    lastName: 'Hepworth',
    email: 'bhepworth@sculpture.com',
  });

  return (
    <>
      <label>
        First name:
        <input
          value={form.firstName}
          onChange={e => {
            setForm({
              ...form,
              firstName: e.target.value
            });
          }}
        />
      </label>
      <label>
        Last name:
        <input
          value={form.lastName}
          onChange={e => {
            setForm({
              ...form,
              lastName: e.target.value
            });
          }}
        />
      </label>
      <label>
        Email:
        <input
          value={form.email}
          onChange={e => {
            setForm({
              ...form,
              email: e.target.value
            });
          }}
        />
      </label>
      <p>
        {form.firstName}{' '}
        {form.lastName}{' '}
        ({form.email})
      </p>
    </>
  );
}
```

LANGUAGE: css
CODE:
```
label { display: block; }
input { margin-left: 5px; }
```

----------------------------------------

TITLE: Rendering a Component in a Default Exported App Component (JavaScript)
DESCRIPTION: This snippet defines the main `App` component as a default export, which then renders the `Profile` component. Default exports are typically used when a file exports only one primary entity. The `App` component serves as the root of the application, displaying the `Profile` component.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/importing-and-exporting-components.md#_snippet_5

LANGUAGE: JavaScript
CODE:
```
export default function App() {
  return <Profile />;
}
```

----------------------------------------

TITLE: Fixing Stuck Form Inputs with React useState Hook
DESCRIPTION: This corrected React component resolves the 'stuck' input issue by utilizing the `useState` hook to manage `firstName` and `lastName`. By using state variables and their corresponding setter functions (`setFirstName`, `setLastName`), React re-renders the component when the state changes, ensuring the input fields correctly reflect user input. The `handleReset` function is also updated to reset the state variables.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/state-a-components-memory.md#_snippet_32

LANGUAGE: JavaScript
CODE:
```
import { useState } from 'react';

export default function Form() {
  const [firstName, setFirstName] = useState('');
  const [lastName, setLastName] = useState('');

  function handleFirstNameChange(e) {
    setFirstName(e.target.value);
  }

  function handleLastNameChange(e) {
    setLastName(e.target.value);
  }

  function handleReset() {
    setFirstName('');
    setLastName('');
  }

  return (
    <form onSubmit={e => e.preventDefault()}>
      <input
        placeholder="First name"
        value={firstName}
        onChange={handleFirstNameChange}
      />
      <input
        placeholder="Last name"
        value={lastName}
        onChange={handleLastNameChange}
      />
      <h1>Hi, {firstName} {lastName}</h1>
      <button onClick={handleReset}>Reset</button>
    </form>
  );
}
```

LANGUAGE: CSS
CODE:
```
h1 { margin-top: 10px; }
```

----------------------------------------

TITLE: React Application Entry Point (JavaScript)
DESCRIPTION: This `index.js` file serves as the entry point for the React application, creating a root DOM node and rendering the main `App` component. It's the standard setup for a client-side React application.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/StrictMode.md#_snippet_4

LANGUAGE: JavaScript
CODE:
```
import { createRoot } from 'react-dom/client';
import './styles.css';

import App from './App';

const root = createRoot(document.getElementById("root"));
root.render(<App />);
```

----------------------------------------

TITLE: Fetching Data with useEffect using Promises in React
DESCRIPTION: This React component demonstrates fetching biographical data using `useEffect` and Promises. It initializes state for `person` and `bio`, and uses a cleanup function with an `ignore` flag to prevent race conditions by discarding stale network responses when the `person` dependency changes.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useEffect.md#_snippet_20

LANGUAGE: JavaScript
CODE:
```
import { useState, useEffect } from 'react';
import { fetchBio } from './api.js';

export default function Page() {
  const [person, setPerson] = useState('Alice');
  const [bio, setBio] = useState(null);

  useEffect(() => {
    let ignore = false;
    setBio(null);
    fetchBio(person).then(result => {
      if (!ignore) {
        setBio(result);
      }
    });
    return () => {
      ignore = true;
    };
  }, [person]);

  // ...
```

----------------------------------------

TITLE: Preloading User Data with React `cache` in JSX
DESCRIPTION: This snippet demonstrates how to preload user data using React's `cache` API. The `getUser` function is memoized, allowing the `Page` component to initiate the data fetch early without awaiting the result. Later, the `Profile` component can call `getUser` again, and if the data is already cached, it will be retrieved instantly, reducing latency. This pattern optimizes performance by overlapping data fetching with rendering.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/cache.md#_snippet_10

LANGUAGE: JSX
CODE:
```
const getUser = cache(async (id) => {
  return await db.user.query(id);
});

async function Profile({id}) {
  const user = await getUser(id);
  return (
    <section>
      <img src={user.profilePic} />
      <h2>{user.name}</h2>
    </section>
  );
}

function Page({id}) {
  // ✅ Good: start fetching the user data
  getUser(id);
  // ... some computational work
  return (
    <>
      <Profile id={id} />
    </>
  );
}
```

----------------------------------------

TITLE: Incorrect State Mutation in React Form (JavaScript)
DESCRIPTION: This React component demonstrates an incorrect way to update state. The `onChange` handlers directly mutate the `person` state object (`person.firstName = e.target.value;`), which can lead to unreliable UI updates and unexpected behavior in React. It initializes a `person` state object and renders input fields for first name, last name, and email, displaying the current values.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/updating-objects-in-state.md#_snippet_10

LANGUAGE: js
CODE:
```
import { useState } from 'react';

export default function Form() {
  const [person, setPerson] = useState({
    firstName: 'Barbara',
    lastName: 'Hepworth',
    email: 'bhepworth@sculpture.com'
  });

  function handleFirstNameChange(e) {
    person.firstName = e.target.value;
  }

  function handleLastNameChange(e) {
    person.lastName = e.target.value;
  }

  function handleEmailChange(e) {
    person.email = e.target.value;
  }

  return (
    <>
      <label>
        First name:
        <input
          value={person.firstName}
          onChange={handleFirstNameChange}
        />
      </label>
      <label>
        Last name:
        <input
          value={person.lastName}
          onChange={handleLastNameChange}
        />
      </label>
      <label>
        Email:
        <input
          value={person.email}
          onChange={handleEmailChange}
        />
      </label>
      <p>
        {person.firstName}{' '}
        {person.lastName}{' '}
        ({person.email})
      </p>
    </>
  );
}
```

----------------------------------------

TITLE: Corrected React `useEffect` Dependencies in `ChatRoom` Component (JavaScript)
DESCRIPTION: This corrected version of the `ChatRoom` component demonstrates the proper way to declare dependencies for the `useEffect` hook. By including `serverUrl` and `roomId` in the dependency array, the effect will re-run whenever these reactive values change, ensuring that the chat connection is correctly re-synchronized with the updated room or server URL, thus resolving the previous lint error and functional bug.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/lifecycle-of-reactive-effects.md#_snippet_28

LANGUAGE: javascript
CODE:
```
function ChatRoom({ roomId }) { // roomId is reactive
  const [serverUrl, setServerUrl] = useState('https://localhost:1234'); // serverUrl is reactive
  useEffect(() => {
    const connection = createConnection(serverUrl, roomId);
    connection.connect();
    return () => {
      connection.disconnect();
    };
  }, [serverUrl, roomId]); // ✅ All dependencies declared
  // ...
}
```

----------------------------------------

TITLE: Adding Items to React State Array (Spread Syntax)
DESCRIPTION: This snippet illustrates the correct, immutable way to add an item to an array in React state. By using the array spread syntax (`...artists`), a new array is created containing all existing items plus the new item, ensuring React detects the state change and triggers a re-render.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/updating-arrays-in-state.md#_snippet_1

LANGUAGE: javascript
CODE:
```
setArtists( // Replace the state
  [ // with a new array
    ...artists, // that contains all the old items
    { id: nextId++, name: name } // and one new item at the end
  ]
);
```

----------------------------------------

TITLE: Associating Labels with Select Boxes in React
DESCRIPTION: This example shows two methods to associate a label with a select box in React for improved accessibility. The first method nests the `<select>` directly inside a `<label>`. The second method uses React's `useId` hook to generate a unique ID, linking the `<label htmlFor>` attribute to the `<select id>` attribute.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react-dom/components/select.md#_snippet_2

LANGUAGE: js
CODE:
```
import { useId } from 'react';

export default function Form() {
  const vegetableSelectId = useId();
  return (
    <>
      <label>
        Pick a fruit:
        <select name="selectedFruit">
          <option value="apple">Apple</option>
          <option value="banana">Banana</option>
          <option value="orange">Orange</option>
        </select>
      </label>
      <hr />
      <label htmlFor={vegetableSelectId}>
        Pick a vegetable:
      </label>
      <select id={vegetableSelectId} name="selectedVegetable">
        <option value="cucumber">Cucumber</option>
        <option value="corn">Corn</option>
        <option value="tomato">Tomato</option>
      </select>
    </>
  );
}
```

LANGUAGE: css
CODE:
```
select { margin: 5px; }
```

----------------------------------------

TITLE: Managing Todo List State with useReducer in React (JavaScript)
DESCRIPTION: This example illustrates using useReducer to manage an array of tasks, emphasizing immutable updates for adding, changing, and deleting items. The tasksReducer defines the state transitions, and the TaskApp component orchestrates interactions with sub-components (AddTask, TaskList) to dispatch actions and update the task list.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useReducer.md#_snippet_13

LANGUAGE: JavaScript
CODE:
```
import { useReducer } from 'react';
import AddTask from './AddTask.js';
import TaskList from './TaskList.js';

function tasksReducer(tasks, action) {
  switch (action.type) {
    case 'added': {
      return [...tasks, {
        id: action.id,
        text: action.text,
        done: false
      }];
    }
    case 'changed': {
      return tasks.map(t => {
        if (t.id === action.task.id) {
          return action.task;
        } else {
          return t;
        }
      });
    }
    case 'deleted': {
      return tasks.filter(t => t.id !== action.id);
    }
    default: {
      throw Error('Unknown action: ' + action.type);
    }
  }
}

export default function TaskApp() {
  const [tasks, dispatch] = useReducer(
    tasksReducer,
    initialTasks
  );

  function handleAddTask(text) {
    dispatch({
      type: 'added',
      id: nextId++,
      text: text,
    });
  }

  function handleChangeTask(task) {
    dispatch({
      type: 'changed',
      task: task
    });
  }

  function handleDeleteTask(taskId) {
    dispatch({
      type: 'deleted',
      id: taskId
    });
  }

  return (
    <>
      <h1>Prague itinerary</h1>
      <AddTask
        onAddTask={handleAddTask}
      />
      <TaskList
        tasks={tasks}
        onChangeTask={handleChangeTask}
        onDeleteTask={handleDeleteTask}
      />
    </>
  );
}

let nextId = 3;
const initialTasks = [
  { id: 0, text: 'Visit Kafka Museum', done: true },
  { id: 1, text: 'Watch a puppet show', done: false },
  { id: 2, text: 'Lennon Wall pic', done: false }
];
```

LANGUAGE: JavaScript
CODE:
```
import { useState } from 'react';

export default function AddTask({ onAddTask }) {
  const [text, setText] = useState('');
  return (
    <>
      <input
        placeholder="Add task"
        value={text}
        onChange={e => setText(e.target.value)}
      />
      <button onClick={() => {
        setText('');
        onAddTask(text);
      }}>Add</button>
    </>
  )
}
```

LANGUAGE: JavaScript
CODE:
```
import { useState } from 'react';

export default function TaskList({
  tasks,
  onChangeTask,
  onDeleteTask
}) {
  return (
    <ul>
      {tasks.map(task => (
        <li key={task.id}>
          <Task
            task={task}
            onChange={onChangeTask}
            onDelete={onDeleteTask}
          />
        </li>
      ))}
    </ul>
  );
}

function Task({ task, onChange, onDelete }) {
  const [isEditing, setIsEditing] = useState(false);
  let taskContent;
  if (isEditing) {
    taskContent = (
      <>
        <input
          value={task.text}
          onChange={e => {
            onChange({
              ...task,
              text: e.target.value
            });
          }} />
        <button onClick={() => setIsEditing(false)}>
          Save
        </button>
      </>
    );
  } else {
    taskContent = (
      <>
        {task.text}
        <button onClick={() => setIsEditing(true)}>
          Edit
        </button>
      </>
    );
  }
  return (
    <label>
      <input
        type="checkbox"
        checked={task.done}
        onChange={e => {
          onChange({
            ...task,
            done: e.target.checked
          });
        }}
      />
      {taskContent}
      <button onClick={() => onDelete(task.id)}>
        Delete
      </button>
    </label>
  );
}
```

LANGUAGE: CSS
CODE:
```
button { margin: 5px; }
li { list-style-type: none; }
ul, li { margin: 0; padding: 0; }
```

----------------------------------------

TITLE: Replacing Object in React State (Correct) - JavaScript
DESCRIPTION: This snippet shows the correct way to update an object in React state. Instead of mutating the existing `obj`, a new object is created using the spread syntax (`...obj`) and then passed to `setObj`. This ensures React detects a change and re-renders the component.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useState.md#_snippet_37

LANGUAGE: js
CODE:
```
setObj({
  ...obj,
  x: 10
});
```

----------------------------------------

TITLE: Connecting to a Chat Server with React useEffect
DESCRIPTION: This snippet demonstrates how to establish and manage a connection to a chat server using the `useEffect` hook in a React component. It initializes a connection when the component mounts or `roomId` changes, and cleans up by disconnecting when the effect re-runs or the component unmounts. The `roomId` is specified as a dependency, ensuring the effect re-synchronizes when the room changes.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/lifecycle-of-reactive-effects.md#_snippet_0

LANGUAGE: javascript
CODE:
```
const serverUrl = 'https://localhost:1234';

function ChatRoom({ roomId }) {
  useEffect(() => {
    const connection = createConnection(serverUrl, roomId);
    connection.connect();
    return () => {
      connection.disconnect();
    };
  }, [roomId]);
  // ...
}
```

----------------------------------------

TITLE: Nesting Custom React Components in JSX (JavaScript)
DESCRIPTION: This snippet illustrates how to nest custom React components, like `<Avatar />` inside a `<Card>` component. This pattern is used to compose UIs from reusable components, where the parent component can receive the nested content via the `children` prop.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/passing-props-to-a-component.md#_snippet_12

LANGUAGE: JavaScript
CODE:
```
<Card>
  <Avatar />
</Card>
```

----------------------------------------

TITLE: Adding New Todo Items in React - JavaScript
DESCRIPTION: This component provides a user interface for adding new todo items. It manages the input field's value using its own `useState` hook and, upon button click, clears the input and invokes the `onAddTodo` prop, passing the new todo title to the parent component for state update.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useState.md#_snippet_19

LANGUAGE: JavaScript
CODE:
```
import { useState } from 'react';

export default function AddTodo({ onAddTodo }) {
  const [title, setTitle] = useState('');
  return (
    <>
      <input
        placeholder="Add todo"
        value={title}
        onChange={e => setTitle(e.target.value)}
      />
      <button onClick={() => {
        setTitle('');
        onAddTodo(title);
      }}>Add</button>
    </>
  )
}
```

----------------------------------------

TITLE: Mapping List Items for React Rendering
DESCRIPTION: This JavaScript snippet demonstrates a common pattern in React for rendering a list of items. It uses the `map` function to iterate over an `items` array, creating a `Component` for each item. The `key` prop is crucial for React's reconciliation process, ensuring efficient updates and proper identification of list elements.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/ViewTransition.md#_snippet_17

LANGUAGE: javascript
CODE:
```
items.map(item => <Component key={item.id} item={item} />)
```

----------------------------------------

TITLE: Implementing Multiple Independent Contexts in React
DESCRIPTION: This comprehensive example demonstrates how to set up and consume two independent React Contexts: ThemeContext for managing the application's visual theme (light/dark mode) and CurrentUserContext for handling user login state. It includes components for a login form, a welcome panel, and a theme toggle, all interacting with their respective contexts. The CSS provides styling for the components based on the active theme.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useContext.md#_snippet_9

LANGUAGE: javascript
CODE:
```
import { createContext, useContext, useState } from 'react';

const ThemeContext = createContext(null);
const CurrentUserContext = createContext(null);

export default function MyApp() {
  const [theme, setTheme] = useState('light');
  const [currentUser, setCurrentUser] = useState(null);
  return (
    <ThemeContext value={theme}>
      <CurrentUserContext
        value={{
          currentUser,
          setCurrentUser
        }}
      >
        <WelcomePanel />
        <label>
          <input
            type="checkbox"
            checked={theme === 'dark'}
            onChange={(e) => {
              setTheme(e.target.checked ? 'dark' : 'light')
            }}
          />
          Use dark mode
        </label>
      </CurrentUserContext>
    </ThemeContext>
  )
}

function WelcomePanel({ children }) {
  const {currentUser} = useContext(CurrentUserContext);
  return (
    <Panel title="Welcome">
      {currentUser !== null ?
        <Greeting /> :
        <LoginForm />
      }
    </Panel>
  );
}

function Greeting() {
  const {currentUser} = useContext(CurrentUserContext);
  return (
    <p>You logged in as {currentUser.name}.</p>
  )
}

function LoginForm() {
  const {setCurrentUser} = useContext(CurrentUserContext);
  const [firstName, setFirstName] = useState('');
  const [lastName, setLastName] = useState('');
  const canLogin = firstName.trim() !== '' && lastName.trim() !== '';
  return (
    <>
      <label>
        First name{': '}
        <input
          required
          value={firstName}
          onChange={e => setFirstName(e.target.value)}
        />
      </label>
      <label>
        Last name{': '}
        <input
        required
          value={lastName}
          onChange={e => setLastName(e.target.value)}
        />
      </label>
      <Button
        disabled={!canLogin}
        onClick={() => {
          setCurrentUser({
            name: firstName + ' ' + lastName
          });
        }}
      >
        Log in
      </Button>
      {!canLogin && <i>Fill in both fields.</i>}
    </>
  );
}

function Panel({ title, children }) {
  const theme = useContext(ThemeContext);
  const className = 'panel-' + theme;
  return (
    <section className={className}>
      <h1>{title}</h1>
      {children}
    </section>
  )
}

function Button({ children, disabled, onClick }) {
  const theme = useContext(ThemeContext);
  const className = 'button-' + theme;
  return (
    <button
      className={className}
      disabled={disabled}
      onClick={onClick}
    >
      {children}
    </button>
  );
}
```

LANGUAGE: css
CODE:
```
label {
  display: block;
}

.panel-light,
.panel-dark {
  border: 1px solid black;
  border-radius: 4px;
  padding: 20px;
  margin-bottom: 10px;
}
.panel-light {
  color: #222;
  background: #fff;
}

.panel-dark {
  color: #fff;
  background: rgb(23, 32, 42);
}

.button-light,
.button-dark {
  border: 1px solid #777;
  padding: 5px;
  margin-right: 10px;
  margin-top: 10px;
}

.button-dark {
  background: #222;
  color: #fff;
}

.button-light {
  background: #fff;
  color: #222;
}
```

----------------------------------------

TITLE: Interactive Example: `memo` Re-rendering with State Changes
DESCRIPTION: A practical demonstration illustrating how `memo` affects component re-rendering. The `Greeting` component re-renders when its `name` prop changes but not when unrelated `address` state changes in the parent, highlighting `memo`'s performance optimization.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/memo.md#_snippet_4

LANGUAGE: JavaScript
CODE:
```
import { memo, useState } from 'react';

export default function MyApp() {
  const [name, setName] = useState('');
  const [address, setAddress] = useState('');
  return (
    <>
      <label>
        Name{': '}
        <input value={name} onChange={e => setName(e.target.value)} />
      </label>
      <label>
        Address{': '}
        <input value={address} onChange={e => setAddress(e.target.value)} />
      </label>
      <Greeting name={name} />
    </>
  );
}

const Greeting = memo(function Greeting({ name }) {
  console.log("Greeting was rendered at", new Date().toLocaleTimeString());
  return <h3>Hello{name && ', '}{name}!</h3>;
});
```

LANGUAGE: CSS
CODE:
```
label {
  display: block;
  margin-bottom: 16px;
}
```

----------------------------------------

TITLE: Implementing Chat Interface with Message Dispatch (React)
DESCRIPTION: This component provides the chat interface for the selected contact. It displays the current message in a textarea and allows users to edit it, dispatching an `edited_message` action on change. A "Send" button dispatches a `sent_message` action, simulating sending the message and clearing the input.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/extracting-state-logic-into-a-reducer.md#_snippet_68

LANGUAGE: JavaScript
CODE:
```
import { useState } from 'react';

export default function Chat({contact, message, dispatch}) {
  return (
    <section className="chat">
      <textarea
        value={message}
        placeholder={'Chat to ' + contact.name}
        onChange={(e) => {
          dispatch({
            type: 'edited_message',
            message: e.target.value,
          });
        }}
      />
      <br />
      <button
        onClick={() => {
          alert(`Sending "${message}" to ${contact.email}`);
          dispatch({
            type: 'sent_message',
          });
        }}>
        Send to {contact.email}
      </button>
    </section>
  );
}
```

----------------------------------------

TITLE: Connecting to Chat Room with Stable Dependencies (React)
DESCRIPTION: This corrected React component demonstrates how to stabilize `useEffect` dependencies. By creating the `options` object directly inside the effect, the effect now only depends on the `roomId` string, which is a primitive value and only changes when its actual value changes, preventing unnecessary re-connections on every render.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useEffect.md#_snippet_42

LANGUAGE: javascript
CODE:
```
import { useState, useEffect } from 'react';
import { createConnection } from './chat.js';

const serverUrl = 'https://localhost:1234';

function ChatRoom({ roomId }) {
  const [message, setMessage] = useState('');

  useEffect(() => {
    const options = {
      serverUrl: serverUrl,
      roomId: roomId
    };
    const connection = createConnection(options);
    connection.connect();
    return () => connection.disconnect();
  }, [roomId]);

  return (
    <>
      <h1>Welcome to the {roomId} room!</h1>
      <input value={message} onChange={e => setMessage(e.target.value)} />
    </>
  );
}

export default function App() {
  const [roomId, setRoomId] = useState('general');
  return (
    <>
      <label>
        Choose the chat room:{' '}
        <select
          value={roomId}
          onChange={e => setRoomId(e.target.value)}
        >
          <option value="general">general</option>
          <option value="travel">travel</option>
          <option value="music">music</option>
        </select>
      </label>
      <hr />
      <ChatRoom roomId={roomId} />
    </>
  );
}
```

----------------------------------------

TITLE: Declaring All Reactive Dependencies in React useEffect
DESCRIPTION: This snippet demonstrates the correct way to declare all reactive values (`serverUrl` and `roomId`) as dependencies for a `useEffect` hook. When these values change, the effect will re-run, ensuring the connection is updated with the latest parameters. It highlights that props and state variables are reactive and must be included.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useEffect.md#_snippet_23

LANGUAGE: JavaScript
CODE:
```
function ChatRoom({ roomId }) { 
  const [serverUrl, setServerUrl] = useState('https://localhost:1234'); 

  useEffect(() => {
    const connection = createConnection(serverUrl, roomId); 
    connection.connect();
    return () => connection.disconnect();
  }, [serverUrl, roomId]); 
  // ...
}
```

----------------------------------------

TITLE: Fixing Race Conditions in useEffect with Cleanup - React JavaScript
DESCRIPTION: This snippet provides the corrected version of the React component, addressing the race condition bug. It introduces a cleanup function within `useEffect` that uses an `ignore` flag to prevent outdated asynchronous operations from updating the component's state, ensuring only the result of the latest fetch is applied.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/synchronizing-with-effects.md#_snippet_47

LANGUAGE: javascript
CODE:
```
import { useState, useEffect } from 'react';
import { fetchBio } from './api.js';

export default function Page() {
  const [person, setPerson] = useState('Alice');
  const [bio, setBio] = useState(null);
  useEffect(() => {
    let ignore = false;
    setBio(null);
    fetchBio(person).then(result => {
      if (!ignore) {
        setBio(result);
      }
    });
    return () => {
      ignore = true;
    }
  }, [person]);

  return (
    <>
      <select value={person} onChange={e => {
        setPerson(e.target.value);
      }}>
        <option value="Alice">Alice</option>
        <option value="Bob">Bob</option>
        <option value="Taylor">Taylor</option>
      </select>
      <hr />
      <p><i>{bio ?? 'Loading...'}</i></p>
    </>
  );
}
```

LANGUAGE: javascript
CODE:
```
export async function fetchBio(person) {
  const delay = person === 'Bob' ? 2000 : 200;
  return new Promise(resolve => {
    setTimeout(() => {
      resolve('This is ' + person + '’s bio.');
    }, delay);
  })
}
```

----------------------------------------

TITLE: Client-Side Routing with useState in React (Anti-pattern)
DESCRIPTION: This example illustrates a naive and problematic approach to client-side routing using React's `useState` hook. It demonstrates switching between `Home` and `Dashboard` components based on a state variable, but explicitly notes the critical limitation that it does not create shareable URLs, making deep linking impossible.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/blog/2025/02/14/sunsetting-create-react-app.md#_snippet_2

LANGUAGE: JavaScript
CODE:
```
import {useState} from 'react';

import Home from './Home';
import Dashboard from './Dashboard';

export default function App() {
  // ❌ Routing in state does not create URLs
  const [route, setRoute] = useState('home');
  return (
    <div>
      {route === 'home' && <Home />}
      {route === 'dashboard' && <Dashboard />}
    </div>
  )
}
```

----------------------------------------

TITLE: React Chat Room Component with useEffectEvent
DESCRIPTION: Demonstrates a React chat room component (`ChatRoom`) using `useEffect` to manage a connection and `useEffectEvent` (`onConnected`) to handle the connection event and show a notification. The `App` component manages room selection and theme.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/separating-events-from-effects.md#_snippet_38

LANGUAGE: js
CODE:
```
import { useState, useEffect } from 'react';
import { experimental_useEffectEvent as useEffectEvent } from 'react';
import { createConnection, sendMessage } from './chat.js';
import { showNotification } from './notifications.js';

const serverUrl = 'https://localhost:1234';

function ChatRoom({ roomId, theme }) {
  const onConnected = useEffectEvent(connectedRoomId => {
    showNotification('Welcome to ' + connectedRoomId, theme);
  });

  useEffect(() => {
    const connection = createConnection(serverUrl, roomId);
    connection.on('connected', () => {
      setTimeout(() => {
        onConnected(roomId);
      }, 2000);
    });
    connection.connect();
    return () => connection.disconnect();
  }, [roomId]);

  return <h1>Welcome to the {roomId} room!</h1>
}

export default function App() {
  const [roomId, setRoomId] = useState('general');
  const [isDark, setIsDark] = useState(false);
  return (
    <>
      <label>
        Choose the chat room:{' '}
        <select
          value={roomId}
          onChange={e => setRoomId(e.target.value)}
        >
          <option value="general">general</option>
          <option value="travel">travel</option>
          <option value="music">music</option>
        </select>
      </label>
      <label>
        <input
          type="checkbox"
          checked={isDark}
          onChange={e => setIsDark(e.target.checked)}
        />
        Use dark theme
      </label>
      <hr />
      <ChatRoom
        roomId={roomId}
        theme={isDark ? 'dark' : 'light'}
      />
    </>
  );
}
```

----------------------------------------

TITLE: Focusing a DOM Element with useRef in React
DESCRIPTION: This React component demonstrates how to directly manipulate a DOM element using a ref. An `inputRef` is created with `useRef` and attached to an `<input>` element. When the button is clicked, the `handleClick` function accesses the underlying DOM node via `inputRef.current` and calls its `focus()` method, providing direct control over the DOM element.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/escape-hatches.md#_snippet_2

LANGUAGE: javascript
CODE:
```
import { useRef } from 'react';

export default function Form() {
  const inputRef = useRef(null);

  function handleClick() {
    inputRef.current.focus();
  }

  return (
    <>
      <input ref={inputRef} />
      <button onClick={handleClick}>
        Focus the input
      </button>
    </>
  );
}
```

----------------------------------------

TITLE: Understanding Asynchronous State Updates in React
DESCRIPTION: This example highlights a crucial caveat of React's `set` functions: they do not immediately update the state variable in the currently executing code. After calling `setName('Robin')`, `console.log(name)` will still output the *old* value ('Taylor') because the state update is batched and applied for the *next* render cycle.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useState.md#_snippet_5

LANGUAGE: js
CODE:
```
function handleClick() {
  setName('Robin');
  console.log(name); // Still "Taylor"!
}
```

----------------------------------------

TITLE: Correct `useMemo` Usage: Extracting Component for Loop Items (JavaScript)
DESCRIPTION: This snippet demonstrates the correct approach to memoize data for items rendered in a loop. Instead of calling `useMemo` directly in the loop, a separate `Report` component is extracted for each item. `useMemo` is then called at the top level of the `Report` component, adhering to the Rules of Hooks and allowing individual item memoization.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useMemo.md#_snippet_48

LANGUAGE: JavaScript
CODE:
```
function ReportList({ items }) {
  return (
    <article>
      {items.map(item =>
        <Report key={item.id} item={item} />
      )}
    </article>
  );
}

function Report({ item }) {
  // ✅ Call useMemo at the top level:
  const data = useMemo(() => calculateReport(item), [item]);
  return (
    <figure>
      <Chart data={data} />
    </figure>
  );
}
```

----------------------------------------

TITLE: Import Server Function into React Client Component
DESCRIPTION: This example illustrates how a Client Component can import and utilize a Server Function defined in a separate file marked with the 'use server' directive. The `createNote` function is imported, and when invoked from the client, React handles the server-side execution via a generated reference.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/rsc/server-functions.md#_snippet_1

LANGUAGE: JavaScript
CODE:
```
"use server";

export async function createNote() {
  await db.notes.create();
}
```

LANGUAGE: JavaScript
CODE:
```
"use client";
import {createNote} from './actions';

function EmptyNote() {
  console.log(createNote);
  // {$$typeof: Symbol.for("react.server.reference"), $$id: 'createNote'}
  <button onClick={() => createNote()} />
}
```

----------------------------------------

TITLE: Awaiting Server-Initiated Promise in a React Client Component
DESCRIPTION: This Client Component uses the `use` hook to await a promise (`commentsPromise`) that was initiated on the server. This allows the client to suspend rendering until the data is available, without blocking the initial server-rendered content, facilitating progressive loading.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/rsc/server-components.md#_snippet_11

LANGUAGE: JavaScript
CODE:
```
// Client Component
"use client";
import {use} from 'react';

function Comments({commentsPromise}) {
  // NOTE: this will resume the promise from the server.
  // It will suspend until the data is available.
  const comments = use(commentsPromise);
  return comments.map(commment => <p>{comment}</p>);
}
```

----------------------------------------

TITLE: Provide React State and Dispatch via Context
DESCRIPTION: This snippet demonstrates how to wrap a React component with `TasksContext` and `TasksDispatchContext` to make the `tasks` state and `dispatch` function available to all child components. It uses `useReducer` to manage the `tasks` state and provides both the state and the dispatch function through context.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/scaling-up-with-reducer-and-context.md#_snippet_4

LANGUAGE: js
CODE:
```
import { TasksContext, TasksDispatchContext } from './TasksContext.js';

export default function TaskApp() {
  const [tasks, dispatch] = useReducer(tasksReducer, initialTasks);
  // ...
  return (
    <TasksContext value={tasks}>
      <TasksDispatchContext value={dispatch}>
        ...
      </TasksDispatchContext>
    </TasksContext>
  );
}
```

----------------------------------------

TITLE: React Task Management with useReducer Hook
DESCRIPTION: This snippet demonstrates how to use React's `useReducer` hook to manage complex state logic for a task list application. It defines a `tasksReducer` function to handle 'added', 'changed', and 'deleted' actions, centralizing state updates. Event handlers dispatch actions, making component logic cleaner and more predictable.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/managing-state.md#_snippet_6

LANGUAGE: javascript
CODE:
```
import { useReducer } from 'react';
import AddTask from './AddTask.js';
import TaskList from './TaskList.js';

export default function TaskApp() {
  const [tasks, dispatch] = useReducer(
    tasksReducer,
    initialTasks
  );

  function handleAddTask(text) {
    dispatch({
      type: 'added',
      id: nextId++,
      text: text,
    });
  }

  function handleChangeTask(task) {
    dispatch({
      type: 'changed',
      task: task
    });
  }

  function handleDeleteTask(taskId) {
    dispatch({
      type: 'deleted',
      id: taskId
    });
  }

  return (
    <>
      <h1>Prague itinerary</h1>
      <AddTask
        onAddTask={handleAddTask}
      />
      <TaskList
        tasks={tasks}
        onChangeTask={handleChangeTask}
        onDeleteTask={handleDeleteTask}
      />
    </>
  );
}

function tasksReducer(tasks, action) {
  switch (action.type) {
    case 'added': {
      return [...tasks, {
        id: action.id,
        text: action.text,
        done: false
      }];
    }
    case 'changed': {
      return tasks.map(t => {
        if (t.id === action.task.id) {
          return action.task;
        } else {
          return t;
        }
      });
    }
    case 'deleted': {
      return tasks.filter(t => t.id !== action.id);
    }
    default: {
      throw Error('Unknown action: ' + action.type);
    }
  }
}

let nextId = 3;
const initialTasks = [
  { id: 0, text: 'Visit Kafka Museum', done: true },
  { id: 1, text: 'Watch a puppet show', done: false },
  { id: 2, text: 'Lennon Wall pic', done: false }
];
```

----------------------------------------

TITLE: Performing Local Mutation on a New Object - JavaScript
DESCRIPTION: This snippet demonstrates a safe way to update state using 'local mutation'. A new object `nextPosition` is created, modified, and then used to update the state via `setPosition`. This is acceptable because the mutation occurs on an object that is not yet part of the component's state.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/updating-objects-in-state.md#_snippet_8

LANGUAGE: JavaScript
CODE:
```
const nextPosition = {};
nextPosition.x = e.clientX;
nextPosition.y = e.clientY;
setPosition(nextPosition);
```

----------------------------------------

TITLE: Synchronizing React Component with External Chat System using useEffect
DESCRIPTION: This JavaScript snippet demonstrates how to connect a React component (`ChatRoom`) to an external chat system using the `useEffect` hook. It initializes a connection with `createConnection` and `connection.connect()` in the setup phase, and ensures proper disconnection with `connection.disconnect()` in the cleanup phase. The effect re-runs whenever `serverUrl` or `roomId` dependencies change, ensuring the component stays synchronized with the correct chat room.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useEffect.md#_snippet_2

LANGUAGE: JavaScript
CODE:
```
import { useState, useEffect } from 'react';
import { createConnection } from './chat.js';

function ChatRoom({ roomId }) {
  const [serverUrl, setServerUrl] = useState('https://localhost:1234');

  useEffect(() => {
  	const connection = createConnection(serverUrl, roomId);
    connection.connect();
  	return () => {
      connection.disconnect();
  	};
  }, [serverUrl, roomId]);
  // ...
}
```

----------------------------------------

TITLE: Complete Example: Lifting State Up in React
DESCRIPTION: This comprehensive example demonstrates the full implementation of lifting state up in React. It includes the `MyApp` component managing shared `count` state and `handleClick` logic, and the `MyButton` component receiving and utilizing these as props, resulting in synchronized updates across all buttons.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/index.md#_snippet_25

LANGUAGE: JavaScript
CODE:
```
import { useState } from 'react';

export default function MyApp() {
  const [count, setCount] = useState(0);

  function handleClick() {
    setCount(count + 1);
  }

  return (
    <div>
      <h1>Counters that update together</h1>
      <MyButton count={count} onClick={handleClick} />
      <MyButton count={count} onClick={handleClick} />
    </div>
  );
}

function MyButton({ count, onClick }) {
  return (
    <button onClick={onClick}>
      Clicked {count} times
    </button>
  );
}
```

LANGUAGE: CSS
CODE:
```
button {
  display: block;
  margin-bottom: 5px;
}
```

----------------------------------------

TITLE: Implementing a React Counter with Uncleaned setInterval (Buggy)
DESCRIPTION: This React component demonstrates a common bug where `setInterval` is used without a cleanup function in `useEffect`. This leads to the interval firing multiple times, especially in React's Strict Mode, causing the counter to increment twice per second instead of once.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/synchronizing-with-effects.md#_snippet_44

LANGUAGE: JavaScript
CODE:
```
import { useState, useEffect } from 'react';

export default function Counter() {
  const [count, setCount] = useState(0);

  useEffect(() => {
    function onTick() {
      setCount(c => c + 1);
    }

    setInterval(onTick, 1000);
  }, []);

  return <h1>{count}</h1>;
}
```

LANGUAGE: JavaScript
CODE:
```
import { useState } from 'react';
import Counter from './Counter.js';

export default function Form() {
  const [show, setShow] = useState(false);
  return (
    <>
      <button onClick={() => setShow(s => !s)}>{show ? 'Hide' : 'Show'} counter</button>
      <br />
      <hr />
      {show && <Counter />}
    </>
  );
}
```

LANGUAGE: CSS
CODE:
```
label {
  display: block;
  margin-top: 20px;
  margin-bottom: 20px;
}

body {
  min-height: 150px;
}
```

----------------------------------------

TITLE: Improving Suspension Handling with useTransition
DESCRIPTION: This example modifies the TabButton component to use useTransition. Clicking a tab now initiates a transition, allowing the TabButton to show a pending state (isPending) while the content loads, preventing the Suspense fallback from replacing the entire content area.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useTransition.md#_snippet_24

LANGUAGE: javascript
CODE:
```
import { Suspense, useState } from 'react';
import TabButton from './TabButton.js';
import AboutTab from './AboutTab.js';
import PostsTab from './PostsTab.js';
import ContactTab from './ContactTab.js';

export default function TabContainer() {
  const [tab, setTab] = useState('about');
  return (
    <Suspense fallback={<h1>🌀 Loading...</h1>}>
      <TabButton
        isActive={tab === 'about'}
        action={() => setTab('about')}
      >
        About
      </TabButton>
      <TabButton
        isActive={tab === 'posts'}
        action={() => setTab('posts')}
      >
        Posts
      </TabButton>
      <TabButton
        isActive={tab === 'contact'}
        action={() => setTab('contact')}
      >
        Contact
      </TabButton>
      <hr />
      {tab === 'about' && <AboutTab />}
      {tab === 'posts' && <PostsTab />}
      {tab === 'contact' && <ContactTab />}
    </Suspense>
  );
}
```

LANGUAGE: javascript
CODE:
```
import { useTransition } from 'react';

export default function TabButton({ action, children, isActive }) {
  const [isPending, startTransition] = useTransition();
  if (isActive) {
    return <b>{children}</b>
  }
  if (isPending) {
    return <b className="pending">{children}</b>;
  }
  return (
    <button onClick={() => {
      startTransition(async () => {
        await action();
      });
    }}>
      {children}
    </button>
  );
}
```

LANGUAGE: javascript
CODE:
```
export default function AboutTab() {
  return (
    <p>Welcome to my profile!</p>
  );
}
```

LANGUAGE: javascript
CODE:
```
import {use} from 'react';
import { fetchData } from './data.js';

function PostsTab() {
  const posts = use(fetchData('/posts'));
  return (
    <ul className="items">
      {posts.map(post =>
        <Post key={post.id} title={post.title} />
      )}
    </ul>
  );
}

function Post({ title }) {
  return (
    <li className="item">
      {title}
    </li>
  );
}

export default PostsTab;
```

LANGUAGE: javascript
CODE:
```
export default function ContactTab() {
  return (
    <>
      <p>
        You can find me online here:
      </p>
      <ul>
        <li>admin@mysite.com</li>
        <li>+123456789</li>
      </ul>
    </>
  );
}
```

LANGUAGE: javascript
CODE:
```
// Note: the way you would do data fetching depends on
// the framework that you use together with Suspense.
// Normally, the caching logic would be inside a framework.

let cache = new Map();

export function fetchData(url) {
  if (!cache.has(url)) {
    cache.set(url, getData(url));
  } else {
    return cache.get(url);
  }
}

async function getData(url) {
  if (url.startsWith('/posts')) {
    return await getPosts();
  } else {
    throw Error('Not implemented');
  }
}

async function getPosts() {
  // Add a fake delay to make waiting noticeable.
  await new Promise(resolve => {
    setTimeout(resolve, 1000);
  });
  let posts = [];
  for (let i = 0; i < 500; i++) {
    posts.push({
      id: i,
      title: 'Post #' + (i + 1)
    });
  }
  return posts;
}
```

LANGUAGE: css
CODE:
```
button { margin-right: 10px }
b { display: inline-block; margin-right: 10px; }
.pending { color: #777; }
```

----------------------------------------

TITLE: Mapping Array Data to JSX List Items in JavaScript
DESCRIPTION: This snippet demonstrates using the `map()` array method to transform the `people` array into a new array of JSX `<li>` elements. Each `<li>` element contains the corresponding `person` string, preparing the data for rendering as a list in React.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/rendering-lists.md#_snippet_2

LANGUAGE: js
CODE:
```
const listItems = people.map(person => <li>{person}</li>);
```

----------------------------------------

TITLE: Defining Root Element in HTML for React
DESCRIPTION: This HTML snippet defines the basic structure of the web page, including a `<div id="root"></div>` element. This `div` serves as the mount point where React will render its components.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/add-react-to-an-existing-project.md#_snippet_1

LANGUAGE: HTML
CODE:
```
<!DOCTYPE html>
<html>
  <head><title>My app</title></head>
  <body>
    <!-- Your existing page content (in this example, it gets replaced) -->
    <div id="root"></div>
  </body>
</html>
```

----------------------------------------

TITLE: Define Server Function in React Server Component
DESCRIPTION: This snippet demonstrates how to define an asynchronous Server Function within a React Server Component using the 'use server' directive. The function, `createNoteAction`, is then passed as a prop to a Client Component, `Button`, allowing server-side logic to be triggered from the client.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/rsc/server-functions.md#_snippet_0

LANGUAGE: JavaScript
CODE:
```
// Server Component
import Button from './Button';

function EmptyNote () {
  async function createNoteAction() {
    // Server Function
    'use server';
    
    await db.notes.create();
  }

  return <Button onClick={createNoteAction}/>;
}
```

LANGUAGE: JavaScript
CODE:
```
"use client";

export default function Button({onClick}) { 
  console.log(onClick); 
  // {$$typeof: Symbol.for("react.server.reference"), $$id: 'createNoteAction'}
  return <button onClick={() => onClick()}>Create Empty Note</button>
}
```

----------------------------------------

TITLE: React Task Management Application with Context and Reducer
DESCRIPTION: This multi-file example showcases a complete task management application built with React. It leverages the Context API to provide global state (tasks) and dispatch functions to components, while the useReducer hook centralizes all state update logic. This pattern helps in separating concerns and managing complex application state effectively.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useContext.md#_snippet_11

LANGUAGE: JavaScript
CODE:
```
import AddTask from './AddTask.js';
import TaskList from './TaskList.js';
import { TasksProvider } from './TasksContext.js';

export default function TaskApp() {
  return (
    <TasksProvider>
      <h1>Day off in Kyoto</h1>
      <AddTask />
      <TaskList />
    </TasksProvider>
  );
}
```

LANGUAGE: JavaScript
CODE:
```
import { createContext, useContext, useReducer } from 'react';

const TasksContext = createContext(null);

const TasksDispatchContext = createContext(null);

export function TasksProvider({ children }) {
  const [tasks, dispatch] = useReducer(
    tasksReducer,
    initialTasks
  );

  return (
    <TasksContext value={tasks}>
      <TasksDispatchContext value={dispatch}>
        {children}
      </TasksDispatchContext>
    </TasksContext>
  );
}

export function useTasks() {
  return useContext(TasksContext);
}

export function useTasksDispatch() {
  return useContext(TasksDispatchContext);
}

function tasksReducer(tasks, action) {
  switch (action.type) {
    case 'added': {
      return [...tasks, {
        id: action.id,
        text: action.text,
        done: false
      }];
    }
    case 'changed': {
      return tasks.map(t => {
        if (t.id === action.task.id) {
          return action.task;
        } else {
          return t;
        }
      });
    }
    case 'deleted': {
      return tasks.filter(t => t.id !== action.id);
    }
    default: {
      throw Error('Unknown action: ' + action.type);
    }
  }
}

const initialTasks = [
  { id: 0, text: 'Philosopher’s Path', done: true },
  { id: 1, text: 'Visit the temple', done: false },
  { id: 2, text: 'Drink matcha', done: false }
];
```

LANGUAGE: JavaScript
CODE:
```
import { useState, useContext } from 'react';
import { useTasksDispatch } from './TasksContext.js';

export default function AddTask() {
  const [text, setText] = useState('');
  const dispatch = useTasksDispatch();
  return (
    <>
      <input
        placeholder="Add task"
        value={text}
        onChange={e => setText(e.target.value)}
      />
      <button onClick={() => {
        setText('');
        dispatch({
          type: 'added',
          id: nextId++,
          text: text,
        }); 
      }}>Add</button>
    </>
  );
}

let nextId = 3;
```

LANGUAGE: JavaScript
CODE:
```
import { useState, useContext } from 'react';
import { useTasks, useTasksDispatch } from './TasksContext.js';

export default function TaskList() {
  const tasks = useTasks();
  return (
    <ul>
      {tasks.map(task => (
        <li key={task.id}>
          <Task task={task} />
        </li>
      ))}
    </ul>
  );
}

function Task({ task }) {
  const [isEditing, setIsEditing] = useState(false);
  const dispatch = useTasksDispatch();
  let taskContent;
  if (isEditing) {
    taskContent = (
      <>
        <input
          value={task.text}
          onChange={e => {
            dispatch({
              type: 'changed',
              task: {
                ...task,
                text: e.target.value
              }
            });
          }} />
        <button onClick={() => setIsEditing(false)}>
          Save
        </button>
      </>
    );
  } else {
    taskContent = (
      <>
        {task.text}
        <button onClick={() => setIsEditing(true)}>
          Edit
        </button>
      </>
    );
  }
  return (
    <label>
      <input
        type="checkbox"
        checked={task.done}
        onChange={e => {
          dispatch({
            type: 'changed',
            task: {
              ...task,
              done: e.target.checked
            }
          });
        }}
      />
      {taskContent}
      <button onClick={() => {
        dispatch({
          type: 'deleted',
          id: task.id
        });
      }}>
        Delete
      </button>
    </label>
  );
}
```

LANGUAGE: CSS
CODE:
```
button { margin: 5px; }
li { list-style-type: none; }
ul, li { margin: 0; padding: 0; }
```

----------------------------------------

TITLE: Attempting to Hide Videos with CSS Display Property in React
DESCRIPTION: This React component attempts to maintain video state by rendering both video players and using `display: none` to hide the inactive one. However, this approach leads to both videos playing simultaneously because their Effects remain mounted, demonstrating a limitation of `display: none` for resource management.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/Activity.md#_snippet_37

LANGUAGE: JavaScript
CODE:
```
import { useState, useRef, useEffect } from 'react';
import VideoChecker from './checker.js';

function VideoPlayer({ src, isPlaying }) {
  const ref = useRef(null);

  useEffect(() => {
    const videoRef = ref.current;
    videoRef.play();
    
    return () => {
      videoRef.pause();
    }
  }, []);

  return <video ref={ref} src={src} muted loop playsInline/>;
}

export default function App() {
  const [video, setVideo] = useState(1);
  return (
    <>
      <div>
        <button onClick={() => setVideo(1)}>Big Buck Bunny</button>
        <button onClick={() => setVideo(2)}>Elephants Dream</button>
      </div>
      <div style={{display: video === 1 ? 'block' : 'none'}}>
        <VideoPlayer
          // 'Big Buck Bunny' licensed under CC 3.0 by the Blender foundation. Hosted by archive.org
          src="https://archive.org/download/BigBuckBunny_124/Content/big_buck_bunny_720p_surround.mp4" />

      </div>
      <div style={{display: video === 2 ? 'block' : 'none'}}>
        <VideoPlayer
          // 'Elephants Dream' by Orange Open Movie Project Studio, licensed under CC-3.0, hosted by archive.org
          src="https://archive.org/download/ElephantsDream/ed_1024_512kb.mp4"
        />
      </div>
      <VideoChecker />
    </>
  );
}
```

LANGUAGE: JavaScript
CODE:
```
import {useRef, useEffect} from 'react';

export default function VideoChecker() {
  const hasLogged = useRef(false);

  useEffect(() => {
    let interval = setInterval(() => {
      if (hasLogged.current === false) {

        const videos = Array.from(document.querySelectorAll('video'));
        const playing = videos.filter(
          (v) => !v.paused
        );
        if (hasLogged.current === false && playing.length > 1) {
          hasLogged.current = true;
          console.error(`Multiple playing videos: ${playing.length}`);
        }
      }

    }, 50);
    
    return () => {
      hasLogged.current = false;
      clearInterval(interval);
    }
  });
  
}
```

LANGUAGE: CSS
CODE:
```
body { height: 275px; }
button { margin-right: 10px }
b { display: inline-block; margin-right: 10px; }
video { width: 300px; margin-top: 10px; }
```

----------------------------------------

TITLE: Implementing a Reducer with Switch Statement in JavaScript
DESCRIPTION: This snippet illustrates a common pattern for writing reducer functions using a `switch` statement. It handles different action types, such as 'incremented_age' and 'changed_name', by returning new state objects based on the action's payload, ensuring immutability.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useReducer.md#_snippet_8

LANGUAGE: javascript
CODE:
```
function reducer(state, action) {
  switch (action.type) {
    case 'incremented_age': {
      return {
        name: state.name,
        age: state.age + 1
      };
    }
    case 'changed_name': {
      return {
        name: action.nextName,
        age: state.age
      };
    }
  }
  throw Error('Unknown action: ' + action.type);
}
```

----------------------------------------

TITLE: Establishing Chat Connection with useEffect - JavaScript
DESCRIPTION: This `useEffect` hook connects to the chat room specified by `roomId` ('general' in this initial run). It includes a cleanup function to disconnect, which is crucial for managing connections when `roomId` changes or the component unmounts.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/lifecycle-of-reactive-effects.md#_snippet_4

LANGUAGE: JavaScript
CODE:
```
function ChatRoom({ roomId /* "general" */ }) {
  useEffect(() => {
    const connection = createConnection(serverUrl, roomId); // Connects to the "general" room
    connection.connect();
    return () => {
      connection.disconnect(); // Disconnects from the "general" room
    };
  }, [roomId]);
  // ...
```

----------------------------------------

TITLE: React Tooltip Component with useLayoutEffect for Positioning
DESCRIPTION: This `Tooltip` component is responsible for rendering and positioning the tooltip content. It utilizes `useLayoutEffect` to measure the tooltip's height immediately after render but before the browser paints, allowing for precise vertical positioning (above or below the target) to prevent visual flicker. It uses `createPortal` to render the tooltip outside the normal DOM hierarchy.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useLayoutEffect.md#_snippet_11

LANGUAGE: JavaScript
CODE:
```
import { useRef, useLayoutEffect, useState } from 'react';
import { createPortal } from 'react-dom';
import TooltipContainer from './TooltipContainer.js';

export default function Tooltip({ children, targetRect }) {
  const ref = useRef(null);
  const [tooltipHeight, setTooltipHeight] = useState(0);

  useLayoutEffect(() => {
    const { height } = ref.current.getBoundingClientRect();
    setTooltipHeight(height);
  }, []);

  let tooltipX = 0;
  let tooltipY = 0;
  if (targetRect !== null) {
    tooltipX = targetRect.left;
    tooltipY = targetRect.top - tooltipHeight;
    if (tooltipY < 0) {
      // It doesn't fit above, so place below.
      tooltipY = targetRect.bottom;
    }
  }

  return createPortal(
    <TooltipContainer x={tooltipX} y={tooltipY} contentRef={ref}>
      {children}
    </TooltipContainer>,
    document.body
  );
}
```

----------------------------------------

TITLE: Updating React State Immutably with useState
DESCRIPTION: Demonstrates the correct and incorrect ways to update state in React. Directly mutating the state variable (`count = count + 1`) is incorrect as it doesn't trigger a re-render. The correct approach is to use the setter function (`setCount(count + 1)`) returned by `useState` to inform React of the state change and queue a UI update.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/rules/components-and-hooks-must-be-pure.md#_snippet_12

LANGUAGE: js
CODE:
```
function Counter() {
  const [count, setCount] = useState(0);

  function handleClick() {
    count = count + 1; // 🔴 Bad: never mutate state directly
  }

  return (
    <button onClick={handleClick}>
      You pressed me {count} times
    </button>
  );
}
```

LANGUAGE: js
CODE:
```
function Counter() {
  const [count, setCount] = useState(0);

  function handleClick() {
    setCount(count + 1); // ✅ Good: use the setter function returned by useState
  }

  return (
    <button onClick={handleClick}>
      You pressed me {count} times
    </button>
  );
}
```

----------------------------------------

TITLE: Define a Pure JavaScript Function
DESCRIPTION: This example demonstrates a pure JavaScript function `double` that takes a number and returns its double. It always produces the same output for the same input and does not cause side effects, adhering to the principles of pure functions.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/keeping-components-pure.md#_snippet_0

LANGUAGE: javascript
CODE:
```
function double(number) {
  return 2 * number;
}
```

----------------------------------------

TITLE: Full Chat Room Example with Correct Effect Dependencies (JS/CSS)
DESCRIPTION: A complete, working example of the chat room component. The useEffect hook correctly includes `roomId` in its dependency array [roomId], ensuring the effect re-synchronizes when the selected room changes, providing the expected reactive behavior.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/removing-effect-dependencies.md#_snippet_3

LANGUAGE: javascript
CODE:
```
import { useState, useEffect } from 'react';
import { createConnection } from './chat.js';

const serverUrl = 'https://localhost:1234';

function ChatRoom({ roomId }) {
  useEffect(() => {
    const connection = createConnection(serverUrl, roomId);
    connection.connect();
    return () => connection.disconnect();
  }, [roomId]);
  return <h1>Welcome to the {roomId} room!</h1>;
}

export default function App() {
  const [roomId, setRoomId] = useState('general');
  return (
    <>
      <label>
        Choose the chat room:{' '}
        <select
          value={roomId}
          onChange={e => setRoomId(e.target.value)}
        >
          <option value="general">general</option>
          <option value="travel">travel</option>
          <option value="music">music</option>
        </select>
      </label>
      <hr />
      <ChatRoom roomId={roomId} />
    </>
  );
}
```

LANGUAGE: javascript
CODE:
```
export function createConnection(serverUrl, roomId) {
  // A real implementation would actually connect to the server
  return {
    connect() {
      console.log('✅ Connecting to "' + roomId + '" room at ' + serverUrl + '...');
    },
    disconnect() {
      console.log('❌ Disconnected from "' + roomId + '" room at ' + serverUrl);
    }
  };
}
```

LANGUAGE: css
CODE:
```
input { display: block; margin-bottom: 20px; }
button { margin-left: 10px; }
```

----------------------------------------

TITLE: Solution Search Input Component (Ref Forwarding) - React JS
DESCRIPTION: This `SearchInput` component is modified to accept a `ref` prop and forward it to the native HTML `<input>` element. This enables parent components to gain direct access to the DOM node of the input field for imperative actions like focusing, without violating component encapsulation.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/manipulating-the-dom-with-refs.md#_snippet_39

LANGUAGE: javascript
CODE:
```
export default function SearchInput({ ref }) {
  return (
    <input
      ref={ref}
      placeholder="Looking for something?"
    />
  );
}
```

----------------------------------------

TITLE: Installing React Compiler RC with npm
DESCRIPTION: This command installs the Release Candidate (RC) version of babel-plugin-react-compiler as a development dependency using npm. The --save-exact flag ensures that the exact version specified is installed, preventing automatic updates to minor or patch versions.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/blog/2025/04/21/react-compiler-rc.md#_snippet_0

LANGUAGE: npm
CODE:
```
npm install --save-dev --save-exact babel-plugin-react-compiler@rc
```

----------------------------------------

TITLE: Initializing a React Application Root in JavaScript
DESCRIPTION: This snippet demonstrates how to create a React root using `createRoot` from `react-dom/client` and render the main `App` component into a specified DOM node. It's typically run once at application startup to mount the entire React application.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react-dom/client/createRoot.md#_snippet_6

LANGUAGE: JavaScript
CODE:
```
import { createRoot } from 'react-dom/client';

const root = createRoot(document.getElementById('root'));
root.render(<App />);
```

----------------------------------------

TITLE: Rendering a Basic React Component with ReactDOM
DESCRIPTION: This JavaScript code initializes a React root, clears existing HTML content, and renders a simple 'Hello, world!' `<h1>` component into the `#app` element. It demonstrates the basic setup for a React application's entry point.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/add-react-to-an-existing-project.md#_snippet_2

LANGUAGE: JavaScript
CODE:
```
import { createRoot } from 'react-dom/client';

// Clear the existing HTML content
document.body.innerHTML = '<div id="app"></div>';

// Render your React component instead
const root = createRoot(document.getElementById('app'));
root.render(<h1>Hello, world</h1>);
```

----------------------------------------

TITLE: Migrating PropTypes to TypeScript for React Function Components (TypeScript)
DESCRIPTION: This TypeScript snippet demonstrates the recommended modern approach for type-checking and providing default prop values in React 19. It uses a TypeScript interface to define prop types and ES6 default parameters directly in the function signature, replacing the deprecated `propTypes` and `defaultProps`.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/blog/2024/04/25/react-19-upgrade-guide.md#_snippet_7

LANGUAGE: ts
CODE:
```
interface Props {
  text?: string;
}
function Heading({text = 'Hello, world!'}: Props) {
  return <h1>{text}</h1>;
}
```

----------------------------------------

TITLE: Migrated React Function Component with memo and Usage - JavaScript
DESCRIPTION: This snippet shows the `Greeting` component refactored into a functional component wrapped with `memo`, which provides similar performance benefits to `PureComponent` by shallowly comparing props. The `MyApp` component remains the same, demonstrating how the memoized functional component is used. Associated CSS for labels is also included.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/PureComponent.md#_snippet_5

LANGUAGE: JavaScript
CODE:
```
import { memo, useState } from 'react';

const Greeting = memo(function Greeting({ name }) {
  console.log("Greeting was rendered at", new Date().toLocaleTimeString());
  return <h3>Hello{name && ', '}{name}!</h3>;
});

export default function MyApp() {
  const [name, setName] = useState('');
  const [address, setAddress] = useState('');
  return (
    <>
      <label>
        Name{': '}
        <input value={name} onChange={e => setName(e.target.value)} />
      </label>
      <label>
        Address{': '}
        <input value={address} onChange={e => setAddress(e.target.value)} />
      </label>
      <Greeting name={name} />
    </>
  );
}
```

LANGUAGE: CSS
CODE:
```
label {
  display: block;
  margin-bottom: 16px;
}
```

----------------------------------------

TITLE: Controlled Checkbox with onChange Handler (React)
DESCRIPTION: This snippet shows the proper way to implement a controlled checkbox in React. It uses the `checked` prop to link the checkbox's state to a state variable and an `onChange` handler to update that state using `e.target.checked`, ensuring the checkbox is fully controlled and responsive.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react-dom/components/input.md#_snippet_20

LANGUAGE: jsx
CODE:
```
// ✅ Good: controlled checkbox with onChange
<input type="checkbox" checked={something} onChange={e => setSomething(e.target.checked)} />
```

----------------------------------------

TITLE: Rendering Contact List with Selection - React JavaScript
DESCRIPTION: This React component displays a list of contacts, allowing users to select a contact. When a contact's button is clicked, it dispatches a `changed_selection` action with the contact's ID, updating the application's state to reflect the new selection. It receives `contacts`, `selectedId`, and `dispatch` as props.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/extracting-state-logic-into-a-reducer.md#_snippet_52

LANGUAGE: javascript
CODE:
```
export default function ContactList({contacts, selectedId, dispatch}) {
  return (
    <section className="contact-list">
      <ul>
        {contacts.map((contact) => (
          <li key={contact.id}>
            <button
              onClick={() => {
                dispatch({
                  type: 'changed_selection',
                  contactId: contact.id,
                });
              }}>
              {selectedId === contact.id ? <b>{contact.name}</b> : contact.name}
            </button>
          </li>
        ))}
      </ul>
    </section>
  );
}
```

----------------------------------------

TITLE: Connecting to a Chat Server with React Effects
DESCRIPTION: This example demonstrates how a React component, `ChatRoom`, uses the `useEffect` Hook to establish and manage a connection to an external chat server. It shows how to connect on mount, disconnect on unmount, and re-connect when `roomId` or `serverUrl` dependencies change. The `createConnection` function simulates the external system's API.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useEffect.md#_snippet_3

LANGUAGE: js
CODE:
```
import { useState, useEffect } from 'react';
import { createConnection } from './chat.js';

function ChatRoom({ roomId }) {
  const [serverUrl, setServerUrl] = useState('https://localhost:1234');

  useEffect(() => {
    const connection = createConnection(serverUrl, roomId);
    connection.connect();
    return () => {
      connection.disconnect();
    };
  }, [roomId, serverUrl]);

  return (
    <>
      <label>
        Server URL:{' '}
        <input
          value={serverUrl}
          onChange={e => setServerUrl(e.target.value)}
        />
      </label>
      <h1>Welcome to the {roomId} room!</h1>
    </>
  );
}

export default function App() {
  const [roomId, setRoomId] = useState('general');
  const [show, setShow] = useState(false);
  return (
    <>
      <label>
        Choose the chat room:{' '}
        <select
          value={roomId}
          onChange={e => setRoomId(e.target.value)}
        >
          <option value="general">general</option>
          <option value="travel">travel</option>
          <option value="music">music</option>
        </select>
      </label>
      <button onClick={() => setShow(!show)}>
        {show ? 'Close chat' : 'Open chat'}
      </button>
      {show && <hr />}
      {show && <ChatRoom roomId={roomId} />}
    </>
  );
}
```

LANGUAGE: js
CODE:
```
export function createConnection(serverUrl, roomId) {
  // A real implementation would actually connect to the server
  return {
    connect() {
      console.log('✅ Connecting to "' + roomId + '" room at ' + serverUrl + '...');
    },
    disconnect() {
      console.log('❌ Disconnected from "' + roomId + '" room at ' + serverUrl);
    }
  };
}
```

LANGUAGE: css
CODE:
```
input { display: block; margin-bottom: 20px; }
button { margin-left: 10px; }
```

----------------------------------------

TITLE: Initializing useActionState in React Component
DESCRIPTION: This snippet demonstrates how to initialize the `useActionState` hook within a React functional component. It shows how to destructure the returned `state` and `formAction` and then pass `formAction` to a `<form>` element's `action` prop. The `action` function and an initial state (`null`) are passed as arguments to `useActionState`.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useActionState.md#_snippet_2

LANGUAGE: JavaScript
CODE:
```
import { useActionState } from 'react';
import { action } from './actions.js';

function MyComponent() {
  const [state, formAction] = useActionState(action, null);
  // ...
  return (
    <form action={formAction}>
      {/* ... */}
    </form>
  );
}
```

----------------------------------------

TITLE: Corrected Interval in React Effect using Updater Function
DESCRIPTION: This code snippet shows the corrected implementation of the React component's interval. By using the state updater function 'setCount(c => c + 1)', the effect no longer needs to depend on the 'count' state's current value. This allows the dependency array to be empty ([]), ensuring the effect (and the interval) is only set up once when the component mounts and cleared when it unmounts, fixing the resetting issue.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/removing-effect-dependencies.md#_snippet_44

LANGUAGE: javascript
CODE:
```
import { useState, useEffect } from 'react';

export default function Timer() {
  const [count, setCount] = useState(0);

  useEffect(() => {
    console.log('✅ Creating an interval');
    const id = setInterval(() => {
      console.log('⏰ Interval tick');
      setCount(c => c + 1);
    }, 1000);
    return () => {
      console.log('❌ Clearing an interval');
      clearInterval(id);
    };
  }, []);

  return <h1>Counter: {count}</h1>
}
```

----------------------------------------

TITLE: Calculating Derived State During React Rendering
DESCRIPTION: This snippet shows the recommended way to derive `fullName` from `firstName` and `lastName` in React. By calculating `fullName` directly during the component's render phase, it avoids redundant state and unnecessary `useEffect` calls, leading to faster, simpler, and less error-prone code. This approach ensures the derived value is always up-to-date without extra render passes.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/you-might-not-need-an-effect.md#_snippet_1

LANGUAGE: javascript
CODE:
```
function Form() {
  const [firstName, setFirstName] = useState('Taylor');
  const [lastName, setLastName] = useState('Swift');
  // ✅ Good: calculated during rendering
  const fullName = firstName + ' ' + lastName;
  // ...
}
```

----------------------------------------

TITLE: Interactive Client Component with useState in React
DESCRIPTION: This JavaScript code defines a React Client Component (`Expandable`) using the `useState` hook to manage its internal state. The `'use client'` directive marks it as a client-side component, allowing it to use interactive browser APIs and provide dynamic behavior.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/rsc/server-components.md#_snippet_8

LANGUAGE: JavaScript
CODE:
```
// Client Component
"use client"

export default function Expandable({children}) {
  const [expanded, setExpanded] = useState(false);
  return (
    <div>
      <button
        onClick={() => setExpanded(!expanded)}
      >
        Toggle
      </button>
      {expanded && children}
    </div>
  );
}
```

----------------------------------------

TITLE: Displaying Pending State During Form Submission - React
DESCRIPTION: This snippet demonstrates how to provide visual feedback during form submission using the `pending` property from `useFormStatus`. The `Submit` component, nested within the `<form>`, dynamically changes the button text and disables it while the form is actively submitting. It depends on `react-dom` and an asynchronous form action.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react-dom/hooks/useFormStatus.md#_snippet_2

LANGUAGE: JavaScript
CODE:
```
import { useFormStatus } from "react-dom";
import { submitForm } from "./actions.js";

function Submit() {
  const { pending } = useFormStatus();
  return (
    <button type="submit" disabled={pending}>
      {pending ? "Submitting..." : "Submit"}
    </button>
  );
}

function Form({ action }) {
  return (
    <form action={action}>
      <Submit />
    </form>
  );
}

export default function App() {
  return <Form action={submitForm} />;
}
```

----------------------------------------

TITLE: Shipping Form Component with memo (ShippingForm.js) - React
DESCRIPTION: This component represents a shipping form and is wrapped with `memo` to prevent re-renders unless its `onSubmit` prop or internal state (`count`) changes. It includes an artificial slowdown to highlight the performance benefits of `memo` when combined with `useCallback` for stable function props. It manages item count and form submission.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useCallback.md#_snippet_11

LANGUAGE: javascript
CODE:
```
import { memo, useState } from 'react';

const ShippingForm = memo(function ShippingForm({ onSubmit }) {
  const [count, setCount] = useState(1);

  console.log('[ARTIFICIALLY SLOW] Rendering <ShippingForm />');
  let startTime = performance.now();
  while (performance.now() - startTime < 500) {
    // Do nothing for 500 ms to emulate extremely slow code
  }

  function handleSubmit(e) {
    e.preventDefault();
    const formData = new FormData(e.target);
    const orderDetails = {
      ...Object.fromEntries(formData),
      count
    };
    onSubmit(orderDetails);
  }

  return (
    <form onSubmit={handleSubmit}>
      <p><b>Note: <code>ShippingForm</code> is artificially slowed down!</b></p>
      <label>
        Number of items:
        <button type="button" onClick={() => setCount(count - 1)}>–</button>
        {count}
        <button type="button" onClick={() => setCount(count + 1)}>+</button>
      </label>
      <label>
        Street:
        <input name="street" />
      </label>
      <label>
        City:
        <input name="city" />
      </label>
      <label>
        Postal code:
        <input name="zipCode" />
      </label>
      <button type="submit">Submit</button>
    </form>
  );
});

export default ShippingForm;
```

----------------------------------------

TITLE: Incorrect useCallback Usage: Missing Dependency Array (JavaScript)
DESCRIPTION: Demonstrates the incorrect usage of `useCallback` where the dependency array is omitted. This causes `useCallback` to return a new function on every render, defeating its purpose of memoization and potentially leading to unnecessary re-renders of child components. The `post` function is called with `productId`, `referrer`, and `orderDetails`.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useCallback.md#_snippet_24

LANGUAGE: js
CODE:
```
function ProductPage({ productId, referrer }) {
  const handleSubmit = useCallback((orderDetails) => {
    post('/product/' + productId + '/buy', {
      referrer,
      orderDetails,
    });
  }); // 🔴 Returns a new function every time: no dependency array
  // ...
```

----------------------------------------

TITLE: Rendering React Tree to Web Stream in a Server Handler (JavaScript)
DESCRIPTION: This example demonstrates how to use `renderToReadableStream` within an asynchronous server handler function. It imports the function, renders a React `<App />` component, includes a client-side `bootstrapScript` for hydration, and returns the resulting stream as an HTML response.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react-dom/server/renderToReadableStream.md#_snippet_1

LANGUAGE: JavaScript
CODE:
```
import { renderToReadableStream } from 'react-dom/server';

async function handler(request) {
  const stream = await renderToReadableStream(<App />, {
    bootstrapScripts: ['/main.js']
  });
  return new Response(stream, {
    headers: { 'content-type': 'text/html' },
  });
}
```

----------------------------------------

TITLE: Correctly Using useEffectEvent Within a Custom Hook (React)
DESCRIPTION: This example shows the recommended way to use `useEffectEvent`. The `onTick` event handler is declared and called directly within the `useTimer` hook's Effect. This adheres to the rule that Effect Events should only be called from inside Effects and not passed as dependencies or arguments to other hooks.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/separating-events-from-effects.md#_snippet_25

LANGUAGE: js
CODE:
```
function Timer() {
  const [count, setCount] = useState(0);
  useTimer(() => {
    setCount(count + 1);
  }, 1000);
  return <h1>{count}</h1>
}

function useTimer(callback, delay) {
  const onTick = useEffectEvent(() => {
    callback();
  });

  useEffect(() => {
    const id = setInterval(() => {
      onTick(); // ✅ Good: Only called locally inside an Effect
    }, delay);
    return () => {
      clearInterval(id);
    };
  }, [delay]); // No need to specify "onTick" (an Effect Event) as a dependency
}
```

----------------------------------------

TITLE: Migrating Simulate to @testing-library/react fireEvent (JS)
DESCRIPTION: Replace the `Simulate` utility from `react-dom/test-utils` with `fireEvent` from `@testing-library/react`. Note that `fireEvent` dispatches actual DOM events.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/warnings/react-dom-test-utils.md#_snippet_2

LANGUAGE: js
CODE:
```
import {Simulate} from 'react-dom/test-utils';

const element = document.querySelector('button');
Simulate.click(element);
```

LANGUAGE: js
CODE:
```
import {fireEvent} from '@testing-library/react';

const element = document.querySelector('button');
fireEvent.click(element);
```

----------------------------------------

TITLE: Handling Nullable `useContext` Values with Runtime Checks
DESCRIPTION: Addresses scenarios where `createContext` might have a `null` default value. It shows how to explicitly set `ContextShape | null` on `createContext` and then remove the `| null` in the consumer hook by performing a runtime check and throwing an error if the context is not provided.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/typescript.md#_snippet_10

LANGUAGE: javascript
CODE:
```
import { createContext, useContext, useState, useMemo } from 'react';

// This is a simpler example, but you can imagine a more complex object here
type ComplexObject = {
  kind: string
};

// The context is created with `| null` in the type, to accurately reflect the default value.
const Context = createContext<ComplexObject | null>(null);

// The `| null` will be removed via the check in the Hook.
const useGetComplexObject = () => {
  const object = useContext(Context);
  if (!object) { throw new Error("useGetComplexObject must be used within a Provider") }
  return object;
}

export default function MyApp() {
  const object = useMemo(() => ({ kind: "complex" }), []);

  return (
    <Context value={object}>
      <MyComponent />
    </Context>
  )
}

function MyComponent() {
  const object = useGetComplexObject();

  return (
    <div>
      <p>Current object: {object.kind}</p>
    </div>
  )
}
```

----------------------------------------

TITLE: Implementing Conditional Importance Display with `&&` in React
DESCRIPTION: This React component demonstrates conditional rendering using the `&&` operator to display an item's importance. The `Item` component now conditionally renders a space and an italicized importance label only if `importance` is greater than zero. This prevents `0` from being rendered and ensures proper spacing between the item name and its importance.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/blog/2023/03/16/introducing-react-dev.md#_snippet_5

LANGUAGE: javascript
CODE:
```
function Item({ name, importance }) {
  return (
    <li className="item">
      {name}
      {importance > 0 && ' '}
      {importance > 0 &&
        <i>(Importance: {importance})</i>
      }
    </li>
  );
}

export default function PackingList() {
  return (
    <section>
      <h1>Sally Ride's Packing List</h1>
      <ul>
        <Item 
          importance={9} 
          name="Space suit" 
        />
        <Item 
          importance={0} 
          name="Helmet with a golden leaf" 
        />
        <Item 
          importance={6} 
          name="Photo of Tam" 
        />
      </ul>
    </section>
  );
}
```

----------------------------------------

TITLE: Bug: Controlled Checkbox without onChange (React)
DESCRIPTION: This snippet illustrates a common error when using a controlled checkbox in React. Providing a `checked` prop without an `onChange` handler makes the checkbox read-only, preventing its state from changing upon user interaction and triggering a console error.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react-dom/components/input.md#_snippet_18

LANGUAGE: jsx
CODE:
```
// 🔴 Bug: controlled checkbox with no onChange handler
<input type="checkbox" checked={something} />
```

----------------------------------------

TITLE: Incorrectly Controlled Text Area Without onChange Handler in React
DESCRIPTION: This snippet illustrates a common bug where a `<textarea>` is given a `value` prop but lacks an `onChange` handler. In React, this makes the field read-only, as the component cannot update its internal state to reflect user input, leading to a console error. It highlights the necessity of pairing `value` with `onChange` for mutable controlled components.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react-dom/components/textarea.md#_snippet_12

LANGUAGE: js
CODE:
```
// 🔴 Bug: controlled text area with no onChange handler
<textarea value={something} />
```

----------------------------------------

TITLE: Identifying Direct Object Mutation in React State
DESCRIPTION: This code snippet illustrates the problematic pattern of directly mutating an object (`artwork.seen = nextSeen`) after finding it within a copied array. While `myNextList` is a new array, the `artwork` object itself is a reference to an item from the original `myList`, leading to unintended side effects and shared state bugs.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/updating-arrays-in-state.md#_snippet_12

LANGUAGE: javascript
CODE:
```
const myNextList = [...myList];
const artwork = myNextList.find(a => a.id === artworkId);
artwork.seen = nextSeen; // Problem: mutates an existing item
setMyList(myNextList);
```

----------------------------------------

TITLE: Solution: Extracted useInterval and Refactored useCounter
DESCRIPTION: This Sandpack shows the solution after refactoring. It includes the main `Counter` component, the refactored `useCounter` Hook which now uses `useInterval`, and the implementation of the new `useInterval` Hook using `useEffect`.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/reusing-logic-with-custom-hooks.md#_snippet_74

LANGUAGE: javascript
CODE:
```
import { useCounter } from './useCounter.js';

export default function Counter() {
  const count = useCounter(1000);
  return <h1>Seconds passed: {count}</h1>;
}
```

LANGUAGE: javascript
CODE:
```
import { useState } from 'react';
import { useInterval } from './useInterval.js';

export function useCounter(delay) {
  const [count, setCount] = useState(0);
  useInterval(() => {
    setCount(c => c + 1);
  }, delay);
  return count;
}
```

LANGUAGE: javascript
CODE:
```
import { useEffect } from 'react';

export function useInterval(onTick, delay) {
  useEffect(() => {
    const id = setInterval(onTick, delay);
    return () => clearInterval(id);
  }, [onTick, delay]);
}
```

----------------------------------------

TITLE: Custom Error Handling with React 19 createRoot/hydrateRoot (JavaScript)
DESCRIPTION: This JavaScript snippet demonstrates the new `onUncaughtError` and `onCaughtError` options available in `createRoot` and `hydrateRoot` for React 19. These callbacks allow developers to implement custom error reporting logic, reducing duplicate error logs by differentiating between errors caught by an Error Boundary and those that are not.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/blog/2024/04/25/react-19-upgrade-guide.md#_snippet_5

LANGUAGE: js
CODE:
```
const root = createRoot(container, {
  onUncaughtError: (error, errorInfo) => {
    // ... log error report
  },
  onCaughtError: (error, errorInfo) => {
    // ... log error report
  }
});
```

----------------------------------------

TITLE: Custom React Hook for Data Fetching (useData)
DESCRIPTION: Defines a reusable custom Hook useData that encapsulates the logic for fetching data from a given URL using fetch and managing the state with useState and useEffect. It includes cleanup logic to prevent state updates on unmounted components.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/reusing-logic-with-custom-hooks.md#_snippet_44

LANGUAGE: javascript
CODE:
```
function useData(url) {
  const [data, setData] = useState(null);
  useEffect(() => {
    if (url) {
      let ignore = false;
      fetch(url)
        .then(response => response.json())
        .then(json => {
          if (!ignore) {
            setData(json);
          }
        });
      return () => {
        ignore = true;
      };
    }
  }, [url]);
  return data;
}
```

----------------------------------------

TITLE: Implementing Task Management with Immer Reducer in React
DESCRIPTION: This snippet defines the main application component (`TaskApp`) using `useImmerReducer` to manage a list of tasks. It includes the `tasksReducer` function, which handles 'added', 'changed', and 'deleted' actions by directly 'mutating' the `draft` state provided by Immer. Event handlers (`handleAddTask`, `handleChangeTask`, `handleDeleteTask`) dispatch actions to update the task list. Dependencies include `useImmerReducer`, `AddTask`, and `TaskList` components.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/extracting-state-logic-into-a-reducer.md#_snippet_25

LANGUAGE: JavaScript
CODE:
```
import { useImmerReducer } from 'use-immer';
import AddTask from './AddTask.js';
import TaskList from './TaskList.js';

function tasksReducer(draft, action) {
  switch (action.type) {
    case 'added': {
      draft.push({
        id: action.id,
        text: action.text,
        done: false,
      });
      break;
    }
    case 'changed': {
      const index = draft.findIndex((t) => t.id === action.task.id);
      draft[index] = action.task;
      break;
    }
    case 'deleted': {
      return draft.filter((t) => t.id !== action.id);
    }
    default: {
      throw Error('Unknown action: ' + action.type);
    }
  }
}

export default function TaskApp() {
  const [tasks, dispatch] = useImmerReducer(tasksReducer, initialTasks);

  function handleAddTask(text) {
    dispatch({
      type: 'added',
      id: nextId++,
      text: text,
    });
  }

  function handleChangeTask(task) {
    dispatch({
      type: 'changed',
      task: task,
    });
  }

  function handleDeleteTask(taskId) {
    dispatch({
      type: 'deleted',
      id: taskId,
    });
  }

  return (
    <>
      <h1>Prague itinerary</h1>
      <AddTask onAddTask={handleAddTask} />
      <TaskList
        tasks={tasks}
        onChangeTask={handleChangeTask}
        onDeleteTask={handleDeleteTask}
      />
    </>
  );
}

let nextId = 3;
const initialTasks = [
  {id: 0, text: 'Visit Kafka Museum', done: true},
  {id: 1, text: 'Watch a puppet show', done: false},
  {id: 2, text: 'Lennon Wall pic', done: false},
];
```

----------------------------------------

TITLE: Managing Task State with Immer Reducer in React
DESCRIPTION: This React component demonstrates state management for a task list using `useImmerReducer`. It defines a `tasksReducer` function that handles 'added', 'changed', and 'deleted' actions, allowing for mutable-like updates to the draft state. It integrates `AddTask` and `TaskList` components for UI interaction and manages the overall application flow.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useReducer.md#_snippet_14

LANGUAGE: JavaScript
CODE:
```
import { useImmerReducer } from 'use-immer';
import AddTask from './AddTask.js';
import TaskList from './TaskList.js';

function tasksReducer(draft, action) {
  switch (action.type) {
    case 'added': {
      draft.push({
        id: action.id,
        text: action.text,
        done: false
      });
      break;
    }
    case 'changed': {
      const index = draft.findIndex(t =>
        t.id === action.task.id
      );
      draft[index] = action.task;
      break;
    }
    case 'deleted': {
      return draft.filter(t => t.id !== action.id);
    }
    default: {
      throw Error('Unknown action: ' + action.type);
    }
  }
}

export default function TaskApp() {
  const [tasks, dispatch] = useImmerReducer(
    tasksReducer,
    initialTasks
  );

  function handleAddTask(text) {
    dispatch({
      type: 'added',
      id: nextId++,
      text: text,
    });
  }

  function handleChangeTask(task) {
    dispatch({
      type: 'changed',
      task: task
    });
  }

  function handleDeleteTask(taskId) {
    dispatch({
      type: 'deleted',
      id: taskId
    });
  }

  return (
    <>
      <h1>Prague itinerary</h1>
      <AddTask
        onAddTask={handleAddTask}
      />
      <TaskList
        tasks={tasks}
        onChangeTask={handleChangeTask}
        onDeleteTask={handleDeleteTask}
      />
    </>
  );
}

let nextId = 3;
const initialTasks = [
  { id: 0, text: 'Visit Kafka Museum', done: true },
  { id: 1, text: 'Watch a puppet show', done: false },
  { id: 2, text: 'Lennon Wall pic', done: false },
];
```

----------------------------------------

TITLE: Implementing useReducer for State Management in React
DESCRIPTION: This example demonstrates how to import and use the `useReducer` Hook within a React component. It shows the definition of a `reducer` function and how `useReducer` is called with the reducer and an initial state object, returning the current `state` and a `dispatch` function for updates.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useReducer.md#_snippet_1

LANGUAGE: javascript
CODE:
```
import { useReducer } from 'react';

function reducer(state, action) {
  // ...
}

function MyComponent() {
  const [state, dispatch] = useReducer(reducer, { age: 42 });
  // ...
```

----------------------------------------

TITLE: Controlling a Text Area with useState in React
DESCRIPTION: This snippet demonstrates how to create a controlled `<textarea>` component in React using the `useState` hook. It binds the textarea's `value` prop to a state variable (`postContent`) and updates this variable via the `onChange` event handler, ensuring the UI re-renders with every keystroke. This pattern is essential for dynamic input management.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react-dom/components/textarea.md#_snippet_7

LANGUAGE: js
CODE:
```
function NewPost() {
  const [postContent, setPostContent] = useState(''); // Declare a state variable...
  // ...
  return (
    <textarea
      value={postContent} // ...force the input's value to match the state variable...
      onChange={e => setPostContent(e.target.value)} // ... and update the state variable on any edits!
    />
  );
}
```

----------------------------------------

TITLE: Optimistic Form Updates with useOptimistic in React
DESCRIPTION: This comprehensive example showcases the use of `useOptimistic` to provide immediate UI feedback for form submissions. It demonstrates how messages can instantly appear with a 'Sending...' label after submission, while the actual network request proceeds in the background, improving perceived performance. It integrates `useState`, `useRef`, and `startTransition` for a complete optimistic update flow.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useOptimistic.md#_snippet_2

LANGUAGE: JavaScript
CODE:
```
import { useOptimistic, useState, useRef, startTransition } from "react";
import { deliverMessage } from "./actions.js";

function Thread({ messages, sendMessageAction }) {
  const formRef = useRef();
  function formAction(formData) {
    addOptimisticMessage(formData.get("message"));
    formRef.current.reset();
    startTransition(async () => {
      await sendMessageAction(formData);
    });
  }
  const [optimisticMessages, addOptimisticMessage] = useOptimistic(
    messages,
    (state, newMessage) => [
      {
        text: newMessage,
        sending: true
      },
      ...state,
    ]
  );

  return (
    <>
      <form action={formAction} ref={formRef}>
        <input type="text" name="message" placeholder="Hello!" />
        <button type="submit">Send</button>
      </form>
      {optimisticMessages.map((message, index) => (
        <div key={index}>
          {message.text}
          {!!message.sending && <small> (Sending...)</small>}
        </div>
      ))}
      
    </>
  );
}

export default function App() {
  const [messages, setMessages] = useState(
    { text: "Hello there!", sending: false, key: 1 }
  ]);
  async function sendMessageAction(formData) {
    const sentMessage = await deliverMessage(formData.get("message"));
    startTransition(() => {
      setMessages((messages) => [{ text: sentMessage }, ...messages]);
    })
  }
  return <Thread messages={messages} sendMessageAction={sendMessageAction} />;
}
```

----------------------------------------

TITLE: Anti-pattern: Mirroring Props in State (Incorrect)
DESCRIPTION: This snippet illustrates an anti-pattern where a state variable `color` is initialized from a prop `messageColor`. This approach is problematic because subsequent changes to `messageColor` from the parent component will not update the `color` state, leading to stale data and unexpected behavior. State is only initialized on the first render.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/choosing-the-state-structure.md#_snippet_10

LANGUAGE: JavaScript
CODE:
```
function Message({ messageColor }) {
  const [color, setColor] = useState(messageColor);

```

----------------------------------------

TITLE: Managing Individual Task State and Actions in React
DESCRIPTION: The `Task` component manages the display and interaction for a single todo item. It uses the `useState` hook to toggle between 'view' and 'edit' modes for the task title. It handles updates to the todo's title and completion status, and triggers deletion via `onChange` and `onDelete` props received from its parent.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/updating-arrays-in-state.md#_snippet_27

LANGUAGE: javascript
CODE:
```
function Task({ todo, onChange, onDelete }) {
  const [isEditing, setIsEditing] = useState(false);
  let todoContent;
  if (isEditing) {
    todoContent = (
      <>
        <input
          value={todo.title}
          onChange={e => {
            onChange({
              ...todo,
              title: e.target.value
            });
          }} />
        <button onClick={() => setIsEditing(false)}>
          Save
        </button>
      </>
    );
  } else {
    todoContent = (
      <>
        {todo.title}
        <button onClick={() => setIsEditing(true)}>
          Edit
        </button>
      </>
    );
  }
  return (
    <label>
      <input
        type="checkbox"
        checked={todo.done}
        onChange={e => {
          onChange({
            ...todo,
            done: e.target.checked
          });
        }}
      />
      {todoContent}
      <button onClick={() => onDelete(todo.id)}>
        Delete
      </button>
    </label>
  );
}
```

----------------------------------------

TITLE: Replacing `findDOMNode` with `useRef` - JavaScript
DESCRIPTION: This JavaScript snippet provides the recommended alternative to `ReactDOM.findDOMNode` using React's `useRef` hook. It demonstrates how to create a ref, attach it to a DOM element, and then access the element directly via `ref.current` within a `useEffect` hook to perform DOM manipulations like selecting an input field. This approach is more robust and idiomatic.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/blog/2024/04/25/react-19-upgrade-guide.md#_snippet_29

LANGUAGE: JavaScript
CODE:
```
// After
function AutoselectingInput() {
  const ref = useRef(null);
  useEffect(() => {
    ref.current.select();
  }, []);

  return <input ref={ref} defaultValue="Hello" />
}
```

----------------------------------------

TITLE: Applying CSS Class with className in React JSX
DESCRIPTION: This snippet demonstrates the basic usage of the `className` attribute in React JSX to assign a CSS class to an HTML element, functioning identically to the `class` attribute in standard HTML.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react-dom/components/common.md#_snippet_22

LANGUAGE: js
CODE:
```
<img className="avatar" />
```

----------------------------------------

TITLE: Combined React Components Example - JavaScript
DESCRIPTION: This comprehensive example combines the 'MyButton' and 'MyApp' components, showcasing how they work together in a single file. It demonstrates the full structure of a simple React application with component definition and nesting, providing a runnable context.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/index.md#_snippet_2

LANGUAGE: JavaScript
CODE:
```
function MyButton() {
  return (
    <button>
      I'm a button
    </button>
  );
}

export default function MyApp() {
  return (
    <div>
      <h1>Welcome to my app</h1>
      <MyButton />
    </div>
  );
}
```

----------------------------------------

TITLE: Calling Parent's onPlay Function from React Board Component
DESCRIPTION: This snippet updates the `handleClick` function within the `Board` component. Instead of directly updating its own state, it now calls the `onPlay` prop, passing the `nextSquares` array to the `Game` component, allowing the parent to manage the game state.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/tutorial-tic-tac-toe.md#_snippet_63

LANGUAGE: JavaScript
CODE:
```
function Board({ xIsNext, squares, onPlay }) {
  function handleClick(i) {
    if (calculateWinner(squares) || squares[i]) {
      return;
    }
    const nextSquares = squares.slice();
    if (xIsNext) {
      nextSquares[i] = "X";
    } else {
      nextSquares[i] = "O";
    }
    onPlay(nextSquares);
  }
  //...
}
```

----------------------------------------

TITLE: Defining and Using React Components (JavaScript & CSS)
DESCRIPTION: This snippet defines a `Profile` React component that renders an image and then exports a `Gallery` component that renders multiple instances of the `Profile` component. It demonstrates how to compose UI using reusable components and includes basic CSS for styling the image.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/your-first-component.md#_snippet_6

LANGUAGE: javascript
CODE:
```
function Profile() {
  return (
    <img
      src="https://i.imgur.com/MK3eW3As.jpg"
      alt="Katherine Johnson"
    />
  );
}

export default function Gallery() {
  return (
    <section>
      <h1>Amazing scientists</h1>
      <Profile />
      <Profile />
      <Profile />
    </section>
  );
}
```

LANGUAGE: css
CODE:
```
img { margin: 0 10px 10px 0; height: 90px; }
```

----------------------------------------

TITLE: React Component Directly Modifying Document Title (Incorrect)
DESCRIPTION: This JavaScript example shows an incorrect practice in React where the component directly modifies the `document.title` during its render phase. Direct DOM manipulation within render logic is a side effect that should be avoided; instead, use React's Effect Hook for synchronization.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/rules/components-and-hooks-must-be-pure.md#_snippet_8

LANGUAGE: js
CODE:
```
function ProductDetailPage({ product }) {
  document.title = product.title; // 🔴 Bad: Changes the DOM
}
```

----------------------------------------

TITLE: Resetting State with useEffect on Prop Change (Avoid)
DESCRIPTION: This snippet demonstrates an anti-pattern for resetting component state in React. It uses a `useEffect` hook to clear the `comment` state whenever the `userId` prop changes. This approach is inefficient as it causes a re-render with stale data before the state is reset, and requires manual state management for every nested component.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/you-might-not-need-an-effect.md#_snippet_8

LANGUAGE: JavaScript
CODE:
```
export default function ProfilePage({ userId }) {
  const [comment, setComment] = useState('');

  // 🔴 Avoid: Resetting state on prop change in an Effect
  useEffect(() => {
    setComment('');
  }, [userId]);
  // ...
}
```

----------------------------------------

TITLE: Calling Component Functions Directly (Bad Practice) - React JavaScript
DESCRIPTION: This snippet illustrates an incorrect practice where a React component function is called directly as a regular JavaScript function. This bypasses React's rendering mechanism, can lead to violations of the Rules of Hooks, and prevents React from applying its optimizations and features like local state.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/rules/react-calls-components-and-hooks.md#_snippet_1

LANGUAGE: JavaScript
CODE:
```
function BlogPost() {
  return <Layout>{Article()}</Layout>; // 🔴 Bad: Never call them directly
}
```

----------------------------------------

TITLE: Complete React Tic-Tac-Toe Game with State Management
DESCRIPTION: This comprehensive JavaScript snippet provides the full implementation of a React Tic-Tac-Toe game. It includes `Square`, `Board`, and `Game` components, demonstrating state management with `useState` for `xIsNext`, `history`, and `currentSquares`. It also defines `handleClick` for game logic, `handlePlay` for updating history, and `calculateWinner` for determining the game's outcome. This snippet forms the core logic for the game, including the initial setup for time travel.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/tutorial-tic-tac-toe.md#_snippet_74

LANGUAGE: js
CODE:
```
import { useState } from 'react';

function Square({ value, onSquareClick }) {
  return (
    <button className="square" onClick={onSquareClick}>
      {value}
    </button>
  );
}

function Board({ xIsNext, squares, onPlay }) {
  function handleClick(i) {
    if (calculateWinner(squares) || squares[i]) {
      return;
    }
    const nextSquares = squares.slice();
    if (xIsNext) {
      nextSquares[i] = 'X';
    } else {
      nextSquares[i] = 'O';
    }
    onPlay(nextSquares);
  }

  const winner = calculateWinner(squares);
  let status;
  if (winner) {
    status = 'Winner: ' + winner;
  } else {
    status = 'Next player: ' + (xIsNext ? 'X' : 'O');
  }

  return (
    <>
      <div className="status">{status}</div>
      <div className="board-row">
        <Square value={squares[0]} onSquareClick={() => handleClick(0)} />
        <Square value={squares[1]} onSquareClick={() => handleClick(1)} />
        <Square value={squares[2]} onSquareClick={() => handleClick(2)} />
      </div>
      <div className="board-row">
        <Square value={squares[3]} onSquareClick={() => handleClick(3)} />
        <Square value={squares[4]} onSquareClick={() => handleClick(4)} />
        <Square value={squares[5]} onSquareClick={() => handleClick(5)} />
      </div>
      <div className="board-row">
        <Square value={squares[6]} onSquareClick={() => handleClick(6)} />
        <Square value={squares[7]} onSquareClick={() => handleClick(7)} />
        <Square value={squares[8]} onSquareClick={() => handleClick(8)} />
      </div>
    </>
  );
}

export default function Game() {
  const [xIsNext, setXIsNext] = useState(true);
  const [history, setHistory] = useState([Array(9).fill(null)]);
  const currentSquares = history[history.length - 1];

  function handlePlay(nextSquares) {
    setHistory([...history, nextSquares]);
    setXIsNext(!xIsNext);
  }

  function jumpTo(nextMove) {
    // TODO
  }

  const moves = history.map((squares, move) => {
    let description;
    if (move > 0) {
      description = 'Go to move #' + move;
    } else {
      description = 'Go to game start';
    }
    return (
      <li key={move}>
        <button onClick={() => jumpTo(move)}>{description}</button>
      </li>
    );
  });

  return (
    <div className="game">
      <div className="game-board">
        <Board xIsNext={xIsNext} squares={currentSquares} onPlay={handlePlay} />
      </div>
      <div className="game-info">
        <ol>{moves}</ol>
      </div>
    </div>
  );
}

function calculateWinner(squares) {
  const lines = [
    [0, 1, 2],
    [3, 4, 5],
    [6, 7, 8],
    [0, 3, 6],
    [1, 4, 7],
    [2, 5, 8],
    [0, 4, 8],
    [2, 4, 6],
  ];
  for (let i = 0; i < lines.length; i++) {
    const [a, b, c] = lines[i];
    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {
      return squares[a];
    }
  }
  return null;
}
```

----------------------------------------

TITLE: Synchronizing with External Systems using useEffect in React
DESCRIPTION: This snippet shows how to use the `useEffect` Hook to connect a React component to an external system, such as a chat room connection. `useEffect` allows components to perform side effects after rendering, like data fetching, subscriptions, or manually changing the DOM. The effect sets up a connection when `roomId` changes and cleans it up when the component unmounts or `roomId` changes again.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/hooks.md#_snippet_3

LANGUAGE: js
CODE:
```
function ChatRoom({ roomId }) {
  useEffect(() => {
    const connection = createConnection(roomId);
    connection.connect();
    return () => connection.disconnect();
  }, [roomId]);
  // ...
```

----------------------------------------

TITLE: Updating State with a New Object Literal - JavaScript
DESCRIPTION: This code provides a more concise and common way to achieve the same result as local mutation. A new object literal is directly passed to the `setPosition` function, ensuring that a fresh object is always used for state updates, which is functionally equivalent to the local mutation example.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/updating-objects-in-state.md#_snippet_9

LANGUAGE: JavaScript
CODE:
```
setPosition({
  x: e.clientX,
  y: e.clientY
});
```

----------------------------------------

TITLE: Correctly Buying Product with Event Handler in React
DESCRIPTION: This snippet illustrates the correct approach for handling user-initiated actions, such as buying a product. Instead of using `useEffect`, the `fetch` request to `/api/buy` is placed within a `handleClick` function, which would typically be invoked by a user interaction like clicking a button. This ensures the action is triggered only when the user explicitly performs the interaction, preventing unintended duplicate calls.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/synchronizing-with-effects.md#_snippet_29

LANGUAGE: js
CODE:
```
  function handleClick() {
    // ✅ Buying is an event because it is caused by a particular interaction.
    fetch('/api/buy', { method: 'POST' });
  }
```

----------------------------------------

TITLE: Implementing React Router with useTransition in App.js
DESCRIPTION: This component sets up the main application structure, including a `Suspense` boundary and a custom `Router` component. It uses `useState` for page management and `useTransition` to manage navigation, providing an `isPending` flag to indicate when a transition is active. The `navigate` function wraps `setPage` in `startTransition` to mark the state update as a transition.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/Suspense.md#_snippet_39

LANGUAGE: JavaScript
CODE:
```
import { Suspense, useState, useTransition } from 'react';
import IndexPage from './IndexPage.js';
import ArtistPage from './ArtistPage.js';
import Layout from './Layout.js';

export default function App() {
  return (
    <Suspense fallback={<BigSpinner />}>
      <Router />
    </Suspense>
  );
}

function Router() {
  const [page, setPage] = useState('/');
  const [isPending, startTransition] = useTransition();

  function navigate(url) {
    startTransition(() => {
      setPage(url);
    });
  }

  let content;
  if (page === '/') {
    content = (
      <IndexPage navigate={navigate} />
    );
  } else if (page === '/the-beatles') {
    content = (
      <ArtistPage
        artist={{
          id: 'the-beatles',
          name: 'The Beatles',
        }}
      />
    );
  }
  return (
    <Layout isPending={isPending}>
      {content}
    </Layout>
  );
}

function BigSpinner() {
  return <h2>🌀 Loading...</h2>;
}
```

----------------------------------------

TITLE: Fetching Data in a React Server Component
DESCRIPTION: This Server Component demonstrates fetching data using `async`/`await`. It awaits `note` data directly on the server, which suspends rendering. A `commentsPromise` is initiated but not awaited on the server, allowing it to be passed to a Client Component for later resolution, enabling streaming with Suspense.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/rsc/server-components.md#_snippet_10

LANGUAGE: JavaScript
CODE:
```
// Server Component
import db from './database';

async function Page({id}) {
  // Will suspend the Server Component.
  const note = await db.notes.get(id);
  
  // NOTE: not awaited, will start here and await on the client. 
  const commentsPromise = db.comments.get(note.id);
  return (
    <div>
      {note}
      <Suspense fallback={<p>Loading Comments...</p>}>
        <Comments commentsPromise={commentsPromise} />
      </Suspense>
    </div>
  );
}
```

----------------------------------------

TITLE: Fetching and Displaying Posts with React use and ViewTransition
DESCRIPTION: This React component fetches and displays a list of posts. It utilizes the `use` hook to read data from the `fetchData` utility and renders each post using a nested `Post` component. The content is wrapped in `unstable_ViewTransition` for animated transitions. It depends on `react` and `fetchData` from `data.js`.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/Activity.md#_snippet_14

LANGUAGE: JavaScript
CODE:
```
import {use, unstable_ViewTransition as ViewTransition} from 'react';
import { fetchData } from './data.js';

function PostsTab() {
  const posts = use(fetchData('/posts'));
  return (
    <ViewTransition>
    <ul className="items">
      {posts.map(post =>
        <Post key={post.id} title={post.title} />
      )}
    </ul>
      </ViewTransition>
  );
}

function Post({ title }) {
  return (
    <li className="item">
      {title}
    </li>
  );
}

export default PostsTab;
```

----------------------------------------

TITLE: Rendering List Items with Array map() in React (JSX)
DESCRIPTION: Demonstrates how to transform an array of product objects into an array of `<li>` JSX elements using the `map()` function. Each `<li>` element is assigned a unique `key` attribute, which is crucial for React's reconciliation process.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/index.md#_snippet_14

LANGUAGE: js
CODE:
```
const listItems = products.map(product =>
  <li key={product.id}>
    {product.title}
  </li>
);

return (
  <ul>{listItems}</ul>
);
```

----------------------------------------

TITLE: Fixing Incorrect State Updates in React Scoreboard Component
DESCRIPTION: This snippet presents the corrected `Scoreboard` component. It fixes the state update issues by using the `setPlayer` function correctly: incrementing `score` by creating a new object with the updated value and ensuring all existing `player` properties are spread when updating `lastName` to prevent data loss. This adheres to React's immutability principles for state objects.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/updating-objects-in-state.md#_snippet_34

LANGUAGE: JavaScript
CODE:
```
import { useState } from 'react';

export default function Scoreboard() {
  const [player, setPlayer] = useState({
    firstName: 'Ranjani',
    lastName: 'Shettar',
    score: 10,
  });

  function handlePlusClick() {
    setPlayer({
      ...player,
      score: player.score + 1,
    });
  }

  function handleFirstNameChange(e) {
    setPlayer({
      ...player,
      firstName: e.target.value,
    });
  }

  function handleLastNameChange(e) {
    setPlayer({
      ...player,
      lastName: e.target.value
    });
  }

  return (
    <>
      <label>
        Score: <b>{player.score}</b>
        {' '}
        <button onClick={handlePlusClick}>
          +1
        </button>
      </label>
      <label>
        First name:
        <input
          value={player.firstName}
          onChange={handleFirstNameChange}
        />
      </label>
      <label>
        Last name:
        <input
          value={player.lastName}
          onChange={handleLastNameChange}
        />
      </label>
    </>
  );
}
```

----------------------------------------

TITLE: Managing External Connections with Cleanup Effects (JavaScript, CSS)
DESCRIPTION: This example illustrates how to manage connections to external systems, such as a chat server, using `useEffect` with a cleanup function. The effect establishes a connection when the component mounts and returns a function that disconnects when the component unmounts or the dependencies change. This ensures proper resource management and prevents memory leaks.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/escape-hatches.md#_snippet_4

LANGUAGE: JavaScript
CODE:
```
import { useState, useEffect } from 'react';
import { createConnection } from './chat.js';

export default function ChatRoom() {
  useEffect(() => {
    const connection = createConnection();
    connection.connect();
    return () => connection.disconnect();
  }, []);
  return <h1>Welcome to the chat!</h1>;
}
```

LANGUAGE: JavaScript
CODE:
```
export function createConnection() {
  // A real implementation would actually connect to the server
  return {
    connect() {
      console.log('✅ Connecting...');
    },
    disconnect() {
      console.log('❌ Disconnected.');
    }
  };
}
```

LANGUAGE: CSS
CODE:
```
input { display: block; margin-bottom: 20px; }
```

----------------------------------------

TITLE: Correct VideoPlayer Component with useEffect for Playback Control
DESCRIPTION: This snippet shows the correct implementation of the `VideoPlayer` component using the `useEffect` Hook to synchronize the `isPlaying` prop with the video's `play()` and `pause()` methods. The DOM manipulation is moved into the effect, ensuring it runs after rendering and the DOM is available.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/synchronizing-with-effects.md#_snippet_5

LANGUAGE: js
CODE:
```
import { useEffect, useRef } from 'react';

function VideoPlayer({ src, isPlaying }) {
  const ref = useRef(null);

  useEffect(() => {
    if (isPlaying) {
      ref.current.play();
    } else {
      ref.current.pause();
    }
  });

  return <video ref={ref} src={src} loop playsInline />;
}
```

----------------------------------------

TITLE: Managing Reactive Dependencies in React Effect (JavaScript)
DESCRIPTION: This `ChatRoom` component demonstrates how to correctly include reactive values in a `useEffect` dependency array. `roomId` (prop), `settings` (context), and `serverUrl` (derived from prop and context) are all reactive. The effect re-synchronizes the chat connection whenever `roomId` or `serverUrl` changes, ensuring the connection always reflects the latest reactive values.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/lifecycle-of-reactive-effects.md#_snippet_24

LANGUAGE: js
CODE:
```
function ChatRoom({ roomId, selectedServerUrl }) { // roomId is reactive
  const settings = useContext(SettingsContext); // settings is reactive
  const serverUrl = selectedServerUrl ?? settings.defaultServerUrl; // serverUrl is reactive
  useEffect(() => {
    const connection = createConnection(serverUrl, roomId); // Your Effect reads roomId and serverUrl
    connection.connect();
    return () => {
      connection.disconnect();
    };
  }, [roomId, serverUrl]); // So it needs to re-synchronize when either of them changes!
  // ...
```

----------------------------------------

TITLE: Using `useEffect` with `useRef` and Stable Identities in React (Ref Omitted)
DESCRIPTION: This example demonstrates a `VideoPlayer` component where `useEffect` controls video playback based on the `isPlaying` prop. It specifically shows `ref.current.play()` and `ref.current.pause()` being called, but `ref` itself is intentionally omitted from the dependency array because `useRef` guarantees a stable object identity across renders.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/synchronizing-with-effects.md#_snippet_12

LANGUAGE: JavaScript
CODE:
```
function VideoPlayer({ src, isPlaying }) {
  const ref = useRef(null);
  useEffect(() => {
    if (isPlaying) {
      ref.current.play();
    } else {
      ref.current.pause();
    }
  }, [isPlaying]);
}
```

----------------------------------------

TITLE: Declaring Non-Reactive Variables Outside React Component
DESCRIPTION: This snippet demonstrates how to declare variables like `serverUrl` and `roomId` outside the React component. By doing so, these variables become non-reactive, meaning they do not change across renders and thus do not need to be listed as dependencies for the `useEffect` hook, preventing unnecessary re-synchronization.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/lifecycle-of-reactive-effects.md#_snippet_29

LANGUAGE: JavaScript
CODE:
```
const serverUrl = 'https://localhost:1234';
const roomId = 'general';

function ChatRoom() {
  useEffect(() => {
    const connection = createConnection(serverUrl, roomId);
    connection.connect();
    return () => {
      connection.disconnect();
    };
  }, []);
```

----------------------------------------

TITLE: Accessing Object Properties in React JSX for Dynamic Content
DESCRIPTION: Demonstrates how to access properties of a JavaScript object (`person`) within JSX to dynamically apply styles and render text content. This highlights JSX's ability to integrate JavaScript expressions for flexible UI rendering.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/javascript-in-jsx-with-curly-braces.md#_snippet_10

LANGUAGE: javascript
CODE:
```
<div style={person.theme}>
  <h1>{person.name}'s Todos</h1>
```

----------------------------------------

TITLE: Incorrect JSX Markup Example - JavaScript
DESCRIPTION: This snippet demonstrates common errors when writing JSX markup, specifically the absence of a single root element wrapping multiple top-level elements and the use of `class` instead of `className` for CSS classes. This invalid JSX will cause a compilation error in React applications.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/describing-the-ui.md#_snippet_2

LANGUAGE: JavaScript
CODE:
```
export default function TodoList() {
  return (
    // This doesn't quite work!
    <h1>Hedy Lamarr's Todos</h1>
    <img
      src="https://i.imgur.com/yXOvdOSs.jpg"
      alt="Hedy Lamarr"
      class="photo"
    >
    <ul>
      <li>Invent new traffic lights
      <li>Rehearse a movie scene
      <li>Improve spectrum technology
    </ul>
  );
}
```

LANGUAGE: CSS
CODE:
```
img { height: 90px; }
```

----------------------------------------

TITLE: Setting state asynchronously after startTransition (Incorrect)
DESCRIPTION: Illustrates the incorrect pattern where a state update happens asynchronously (e.g., inside setTimeout) *after* the startTransition callback has finished, preventing it from being marked as a Transition.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useTransition.md#_snippet_46

LANGUAGE: js
CODE:
```
startTransition(() => {
  // ❌ Setting state *after* startTransition call
  setTimeout(() => {
    setPage('/about');
  }, 1000);
});
```

----------------------------------------

TITLE: Incorrect JSX Conversion Attempt and Styling
DESCRIPTION: This snippet illustrates a common error when directly pasting HTML into a React component's return statement without adhering to JSX rules, specifically the requirement for a single root element. It also includes the associated CSS for styling the image.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/writing-markup-with-jsx.md#_snippet_2

LANGUAGE: js
CODE:
```
export default function TodoList() {
  return (
    // This doesn't quite work!
    <h1>Hedy Lamarr's Todos</h1>
    <img 
      src="https://i.imgur.com/yXOvdOSs.jpg" 
      alt="Hedy Lamarr" 
      class="photo"
    >
    <ul>
      <li>Invent new traffic lights
      <li>Rehearse a movie scene
      <li>Improve the spectrum technology
    </ul>
  );
}
```

LANGUAGE: css
CODE:
```
img { height: 90px }
```

----------------------------------------

TITLE: Complete React Application with Inverse Data Flow
DESCRIPTION: This comprehensive snippet presents the full `src/App.js` file, showcasing a React application that implements inverse data flow. It includes `FilterableProductTable` managing state and passing updater functions, `SearchBar` handling user input and updating parent state, and `ProductTable` displaying filtered products.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/thinking-in-react.md#_snippet_11

LANGUAGE: JSX
CODE:
```
import { useState } from 'react';

function FilterableProductTable({ products }) {
  const [filterText, setFilterText] = useState('');
  const [inStockOnly, setInStockOnly] = useState(false);

  return (
    <div>
      <SearchBar 
        filterText={filterText} 
        inStockOnly={inStockOnly} 
        onFilterTextChange={setFilterText} 
        onInStockOnlyChange={setInStockOnly} />
      <ProductTable 
        products={products} 
        filterText={filterText}
        inStockOnly={inStockOnly} />
    </div>
  );
}

function ProductCategoryRow({ category }) {
  return (
    <tr>
      <th colSpan="2">
        {category}
      </th>
    </tr>
  );
}

function ProductRow({ product }) {
  const name = product.stocked ? product.name :
    <span style={{ color: 'red' }}>
      {product.name}
    </span>;

  return (
    <tr>
      <td>{name}</td>
      <td>{product.price}</td>
    </tr>
  );
}

function ProductTable({ products, filterText, inStockOnly }) {
  const rows = [];
  let lastCategory = null;

  products.forEach((product) => {
    if (
      product.name.toLowerCase().indexOf(
        filterText.toLowerCase()
      ) === -1
    ) {
      return;
    }
    if (inStockOnly && !product.stocked) {
      return;
    }
    if (product.category !== lastCategory) {
      rows.push(
        <ProductCategoryRow
          category={product.category}
          key={product.category} />
      );
    }
    rows.push(
      <ProductRow
        product={product}
        key={product.name} />
    );
    lastCategory = product.category;
  });

  return (
    <table>
      <thead>
        <tr>
          <th>Name</th>
          <th>Price</th>
        </tr>
      </thead>
      <tbody>{rows}</tbody>
    </table>
  );
}

function SearchBar({
  filterText,
  inStockOnly,
  onFilterTextChange,
  onInStockOnlyChange
}) {
  return (
    <form>
      <input 
        type="text" 
        value={filterText} placeholder="Search..." 
        onChange={(e) => onFilterTextChange(e.target.value)} />
      <label>
        <input 
          type="checkbox" 
          checked={inStockOnly} 
          onChange={(e) => onInStockOnlyChange(e.target.checked)} />
        {' '}
        Only show products in stock
      </label>
    </form>
  );
}

const PRODUCTS = [
  {category: "Fruits", price: "$1", stocked: true, name: "Apple"},
  {category: "Fruits", price: "$1", stocked: true, name: "Dragonfruit"},
  {category: "Fruits", price: "$2", stocked: false, name: "Passionfruit"},
  {category: "Vegetables", price: "$2", stocked: true, name: "Spinach"},
  {category: "Vegetables", price: "$4", stocked: false, name: "Pumpkin"},
  {category: "Vegetables", price: "$1", stocked: true, name: "Peas"}
];

export default function App() {
  return <FilterableProductTable products={PRODUCTS} />;
}
```

----------------------------------------

TITLE: Updating Primitive State in React
DESCRIPTION: Shows how to update a primitive state variable `x` to a new value (`5`) using its setter function `setX`. This replaces the old value without mutating it.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/updating-objects-in-state.md#_snippet_1

LANGUAGE: js
CODE:
```
setX(5);
```

----------------------------------------

TITLE: Example Custom React Congratulations Component
DESCRIPTION: This solution provides an example of a custom React component named 'Congratulations' that renders a simple '<h1>Good job!</h1>' heading, demonstrating basic component creation and default export.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/your-first-component.md#_snippet_18

LANGUAGE: js
CODE:
```
export default function Congratulations() {
  return (
    <h1>Good job!</h1>
  );
}
```

----------------------------------------

TITLE: Implementing Swappable Form Fields in React (Buggy)
DESCRIPTION: This React component demonstrates a form with 'First name' and 'Last name' input fields and a checkbox to reverse their order. It uses `useState` for the `reverse` state and conditional rendering to display fields. The bug is that input text does not follow the field when its order changes, as React reuses the DOM element based on position, not identity.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/preserving-and-resetting-state.md#_snippet_23

LANGUAGE: js
CODE:
```
import { useState } from 'react';

export default function App() {
  const [reverse, setReverse] = useState(false);
  let checkbox = (
    <label>
      <input
        type="checkbox"
        checked={reverse}
        onChange={e => setReverse(e.target.checked)}
      />
      Reverse order
    </label>
  );
  if (reverse) {
    return (
      <>
        <Field label="Last name" /> 
        <Field label="First name" />
        {checkbox}
      </>
    );
  } else {
    return (
      <>
        <Field label="First name" /> 
        <Field label="Last name" />
        {checkbox}
      </>
    );    
  }
}

function Field({ label }) {
  const [text, setText] = useState('');
  return (
    <label>
      {label}:{' '}
      <input
        type="text"
        value={text}
        placeholder={label}
        onChange={e => setText(e.target.value)}
      />
    </label>
  );
}
```

----------------------------------------

TITLE: Using Union Types with useState in TypeScript
DESCRIPTION: Illustrates how to define a union type for a `useState` Hook's state, allowing the state variable to hold one of several predefined string literal values. This pattern is useful for representing distinct, finite states like 'idle', 'loading', 'success', or 'error' in a type-safe manner.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/typescript.md#_snippet_5

LANGUAGE: ts
CODE:
```
type Status = "idle" | "loading" | "success" | "error";

const [status, setStatus] = useState<Status>("idle");
```

----------------------------------------

TITLE: Marking an Async Function as a Server Function in JavaScript
DESCRIPTION: This snippet demonstrates how to mark an asynchronous function as a Server Function by placing the 'use server' directive at the very beginning of its body. This enables the function to be invoked from client-side code, facilitating server-side operations via network requests.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/rsc/use-server.md#_snippet_0

LANGUAGE: JavaScript
CODE:
```
async function addToCart(data) {
  'use server';
  // ...
}
```

----------------------------------------

TITLE: Applying React Key Prop to Force Component State Reset
DESCRIPTION: This snippet shows how to add a `key` prop to a React component to force its re-creation and state reset when the key changes. In this chat application, associating the `Chat` component with `to.id` ensures that switching recipients clears the message input field, preventing accidental messages to the wrong person.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/preserving-and-resetting-state.md#_snippet_18

LANGUAGE: javascript
CODE:
```
<Chat key={to.id} contact={to} />
```

----------------------------------------

TITLE: Basic Usage of React Suspense with Fallback
DESCRIPTION: This snippet illustrates the fundamental way to use the `<Suspense>` component in React. It wraps a potentially suspending component (`<SomeComponent />`) and provides a `fallback` UI (`<Loading />`) that is displayed until `<SomeComponent />` has finished loading its data or code. The `children` prop represents the content to be rendered once ready, while `fallback` is the temporary UI shown during the loading phase.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/Suspense.md#_snippet_0

LANGUAGE: javascript
CODE:
```
<Suspense fallback={<Loading />}>
  <SomeComponent />
</Suspense>
```

----------------------------------------

TITLE: Full React Application with Dynamic Theme Context and Fallback
DESCRIPTION: A comprehensive example demonstrating a React application that uses `createContext`, `useContext`, and `useState` to manage a dynamic theme. It highlights how components outside the `ThemeContext.Provider` receive the default context value, and includes CSS for styling.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useContext.md#_snippet_14

LANGUAGE: javascript
CODE:
```
import { createContext, useContext, useState } from 'react';

const ThemeContext = createContext('light');

export default function MyApp() {
  const [theme, setTheme] = useState('light');
  return (
    <>
      <ThemeContext value={theme}>
        <Form />
      </ThemeContext>
      <Button onClick={() => {
        setTheme(theme === 'dark' ? 'light' : 'dark');
      }}>
        Toggle theme
      </Button>
    </>
  )
}

function Form({ children }) {
  return (
    <Panel title="Welcome">
      <Button>Sign up</Button>
      <Button>Log in</Button>
    </Panel>
  );
}

function Panel({ title, children }) {
  const theme = useContext(ThemeContext);
  const className = 'panel-' + theme;
  return (
    <section className={className}>
      <h1>{title}</h1>
      {children}
    </section>
  )
}

function Button({ children, onClick }) {
  const theme = useContext(ThemeContext);
  const className = 'button-' + theme;
  return (
    <button className={className} onClick={onClick}>
      {children}
    </button>
  );
}
```

LANGUAGE: css
CODE:
```
.panel-light,
.panel-dark {
  border: 1px solid black;
  border-radius: 4px;
  padding: 20px;
  margin-bottom: 10px;
}
.panel-light {
  color: #222;
  background: #fff;
}

.panel-dark {
  color: #fff;
  background: rgb(23, 32, 42);
}

.button-light,
.button-dark {
  border: 1px solid #777;
  padding: 5px;
  margin-right: 10px;
  margin-top: 10px;
}

.button-dark {
  background: #222;
  color: #fff;
}

.button-light {
  background: #fff;
  color: #222;
}
```

----------------------------------------

TITLE: Bug: Incorrect Synchronous State Update for Controlled Input (React)
DESCRIPTION: This snippet illustrates a bug where a controlled input's state is updated synchronously but with a modified value (`toUpperCase()`) instead of the raw `e.target.value`. This can cause the input caret to jump or unexpected behavior because the displayed value doesn't match the internal state immediately.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react-dom/components/input.md#_snippet_22

LANGUAGE: javascript
CODE:
```
function handleChange(e) {
  // 🔴 Bug: updating an input to something other than e.target.value
  setFirstName(e.target.value.toUpperCase());
}
```

----------------------------------------

TITLE: Client-Side Data Fetching with useEffect in React
DESCRIPTION: This JavaScript code demonstrates traditional client-side data fetching in React using the `useEffect` hook. It shows how `Note` and `Author` components fetch data after their initial render, leading to potential client-server waterfalls, especially when components depend on data from other components.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/rsc/server-components.md#_snippet_3

LANGUAGE: JavaScript
CODE:
```
// bundle.js
function Note({id}) {
  const [note, setNote] = useState('');
  // NOTE: loads *after* first render.
  useEffect(() => {
    fetch(`/api/notes/${id}`).then(data => {
      setNote(data.note);
    });
  }, [id]);
  
  return (
    <div>
      <Author id={note.authorId} />
      <p>{note}</p>
    </div>
  );
}

function Author({id}) {
  const [author, setAuthor] = useState('');
  // NOTE: loads *after* Note renders.
  // Causing an expensive client-server waterfall.
  useEffect(() => {
    fetch(`/api/authors/${id}`).then(data => {
      setAuthor(data.author);
    });
  }, [id]);

  return <span>By: {author.name}</span>;
}
```

----------------------------------------

TITLE: Fixing Impure Component with Array Cloning and StrictMode
DESCRIPTION: This example showcases the corrected `StoryTray` component, which now clones the `stories` array using `slice()` before adding new items, ensuring component purity. Combined with `StrictMode`, this setup helps developers identify and fix side-effect bugs, such as direct prop mutation, by consistently double-rendering components during development.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/StrictMode.md#_snippet_11

LANGUAGE: javascript
CODE:
```
import { StrictMode } from 'react';
import { createRoot } from 'react-dom/client';
import './styles.css';

import App from './App';

const root = createRoot(document.getElementById('root'));
root.render(
  <StrictMode>
    <App />
  </StrictMode>
);
```

LANGUAGE: javascript
CODE:
```
import { useState } from 'react';
import StoryTray from './StoryTray.js';

let initialStories = [
  {id: 0, label: "Ankit's Story" },
  {id: 1, label: "Taylor's Story" },
];

export default function App() {
  let [stories, setStories] = useState(initialStories)
  return (
    <div
      style={{
        width: '100%',
        height: '100%',
        textAlign: 'center',
      }}
    >
      <StoryTray stories={stories} />
    </div>
  );
}
```

LANGUAGE: javascript
CODE:
```
import { useState } from 'react';

export default function StoryTray({ stories }) {
  const [isHover, setIsHover] = useState(false);
  const items = stories.slice(); // Clone the array
  items.push({ id: 'create', label: 'Create Story' });
  return (
    <ul
      onPointerEnter={() => setIsHover(true)}
      onPointerLeave={() => setIsHover(false)}
      style={{
        backgroundColor: isHover ? '#ddd' : '#fff'
      }}
    >
      {items.map(story => (
        <li key={story.id}>
          {story.label}
        </li>
      ))}
    </ul>
  );
}
```

LANGUAGE: css
CODE:
```
ul {
  margin: 0;
  list-style-type: none;
  height: 100%;
  display: flex;
  flex-wrap: wrap;
  padding: 10px;
}

li {
  border: 1px solid #aaa;
  border-radius: 6px;
  float: left;
  margin: 5px;
  padding: 5px;
  width: 70px;
  height: 100px;
}
```

----------------------------------------

TITLE: Basic React Functional Component Example
DESCRIPTION: This JavaScript snippet demonstrates a fundamental React functional component. It defines a `Greeting` component that accepts a `name` prop and renders an `h1` element. The `App` component then renders an instance of `Greeting` with a default 'world' value, showcasing basic component composition and rendering.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/installation.md#_snippet_0

LANGUAGE: javascript
CODE:
```
function Greeting({ name }) {
  return <h1>Hello, {name}</h1>;
}

export default function App() {
  return <Greeting name="world" />
}
```

----------------------------------------

TITLE: Artist Biography Component with Data Fetching, JavaScript
DESCRIPTION: Fetches and displays the biography for a given artist ID using React's 'use' hook and a 'fetchData' utility. It renders the biography text within a section, suspending until the data is resolved.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/Suspense.md#_snippet_30

LANGUAGE: JavaScript
CODE:
```
import {use} from 'react';
import { fetchData } from './data.js';

export default function Biography({ artistId }) {
  const bio = use(fetchData(`/${artistId}/bio`));
  return (
    <section>
      <p className="bio">{bio}</p>
    </section>
  );
}
```

----------------------------------------

TITLE: Demonstrating Unnecessary Re-connection with Function Dependency in React
DESCRIPTION: This React component illustrates a common pitfall where an `useEffect` hook re-connects on every render because its dependency array includes `createOptions`, a function re-created during each render. This leads to inefficient re-execution of the effect.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useEffect.md#_snippet_45

LANGUAGE: javascript
CODE:
```
function ChatRoom({ roomId }) {
  const [message, setMessage] = useState('');

  function createOptions() { // 🚩 This function is created from scratch on every re-render
    return {
      serverUrl: serverUrl,
      roomId: roomId
    };
  }

  useEffect(() => {
    const options = createOptions(); // It's used inside the Effect
    const connection = createConnection();
    connection.connect();
    return () => connection.disconnect();
  }, [createOptions]); // 🚩 As a result, these dependencies are always different on a re-render
  // ...
```

----------------------------------------

TITLE: Implementing Configurable useCounter Hook
DESCRIPTION: An updated version of the useCounter hook that accepts a delay parameter, using it in the setInterval call and including delay in the effect's dependency array to reset the interval when the delay changes.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/reusing-logic-with-custom-hooks.md#_snippet_71

LANGUAGE: javascript
CODE:
```
import { useState, useEffect } from 'react';

export function useCounter(delay) {
  const [count, setCount] = useState(0);
  useEffect(() => {
    const id = setInterval(() => {
      setCount(c => c + 1);
    }, delay);
    return () => clearInterval(id);
  }, [delay]);
  return count;
}
```

----------------------------------------

TITLE: Handling Button Click with Event Handler (React/JS)
DESCRIPTION: This snippet demonstrates using an event handler (`handleSendClick`) attached to a button's `onClick` prop to send a message. This ensures the action only occurs in response to the user's specific interaction (clicking the button), contrasting with the reactive nature of Effects.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/separating-events-from-effects.md#_snippet_0

LANGUAGE: js
CODE:
```
function ChatRoom({ roomId }) {
  const [message, setMessage] = useState('');
  // ...
  function handleSendClick() {
    sendMessage(message);
  }
  // ...
  return (
    <>
      <input value={message} onChange={e => setMessage(e.target.value)} />
      <button onClick={handleSendClick}>Send</button>
    </>
  );
}
```

----------------------------------------

TITLE: Anti-pattern: Combining Unrelated Logic in Single React useEffect - JavaScript
DESCRIPTION: This snippet demonstrates an anti-pattern where analytics logging (logVisit) is combined with chat connection management within a single useEffect. Although both depend on roomId, their functionalities are distinct. This can lead to logVisit being called unnecessarily if other dependencies were added that only relate to the connection, violating the principle of separate concerns.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/lifecycle-of-reactive-effects.md#_snippet_13

LANGUAGE: js
CODE:
```
function ChatRoom({ roomId }) {
  useEffect(() => {
    logVisit(roomId);
    const connection = createConnection(serverUrl, roomId);
    connection.connect();
    return () => {
      connection.disconnect();
    };
  }, [roomId]);
  // ...
}
```

----------------------------------------

TITLE: Execution order of startTransition callback
DESCRIPTION: Illustrates that the function passed to startTransition executes immediately and synchronously. Only the state updates scheduled *while* the callback is running are marked as Transitions.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useTransition.md#_snippet_50

LANGUAGE: js
CODE:
```
console.log(1);
startTransition(() => {
  console.log(2);
  setPage('/about');
});
console.log(3);
```

----------------------------------------

TITLE: Memoizing a Function using useCallback in React
DESCRIPTION: This snippet demonstrates the preferred way to memoize a function in React using `useCallback`. `useCallback` is specifically designed for memoizing functions, providing a cleaner syntax than `useMemo` for the same purpose. It ensures the function reference remains stable across renders if dependencies don't change.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useMemo.md#_snippet_36

LANGUAGE: javascript
CODE:
```
export default function Page({ productId, referrer }) {
  const handleSubmit = useCallback((orderDetails) => {
    post('/product/' + productId + '/buy', {
      referrer,
      orderDetails
    });
  }, [productId, referrer]);

  return <Form onSubmit={handleSubmit} />;
}
```

----------------------------------------

TITLE: Updating Nested Object State with Separate Handlers in React (JavaScript)
DESCRIPTION: This React component demonstrates how to update a nested object state using separate event handler functions for each input field. Each handler immutably updates its respective property, including nested ones, by creating new object copies at each level of nesting using the spread syntax (`...`) before updating the state with `setPerson`.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/updating-objects-in-state.md#_snippet_23

LANGUAGE: js
CODE:
```
import { useState } from 'react';

export default function Form() {
  const [person, setPerson] = useState({
    name: 'Niki de Saint Phalle',
    artwork: {
      title: 'Blue Nana',
      city: 'Hamburg',
      image: 'https://i.imgur.com/Sd1AgUOm.jpg',
    }
  });

  function handleNameChange(e) {
    setPerson({
      ...person,
      name: e.target.value
    });
  }

  function handleTitleChange(e) {
    setPerson({
      ...person,
      artwork: {
        ...person.artwork,
        title: e.target.value
      }
    });
  }

  function handleCityChange(e) {
    setPerson({
      ...person,
      artwork: {
        ...person.artwork,
        city: e.target.value
      }
    });
  }

  function handleImageChange(e) {
    setPerson({
      ...person,
      artwork: {
        ...person.artwork,
        image: e.target.value
      }
    });
  }

  return (
    <>
      <label>
        Name:
        <input
          value={person.name}
          onChange={handleNameChange}
        />
      </label>
      <label>
        Title:
        <input
          value={person.artwork.title}
          onChange={handleTitleChange}
        />
      </label>
      <label>
        City:
        <input
          value={person.artwork.city}
          onChange={handleCityChange}
        />
      </label>
      <label>
        Image:
        <input
          value={person.artwork.image}
          onChange={handleImageChange}
        />
      </label>
      <p>
        <i>{person.artwork.title}</i>
        {' by '}
        {person.name}
        <br />
        (located in {person.artwork.city})
      </p>
      <img 
        src={person.artwork.image} 
        alt={person.artwork.title}
      />
    </>
  );
}
```

----------------------------------------

TITLE: Understanding React State Snapshot Behavior - JavaScript
DESCRIPTION: This snippet demonstrates that setting React state does not immediately update the variable in the current render. The `console.log(count)` after `setCount` still shows the old value, highlighting state's snapshot nature. This is crucial for avoiding subtle bugs related to stale closures.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/adding-interactivity.md#_snippet_7

LANGUAGE: js
CODE:
```
console.log(count);  // 0
setCount(count + 1); // Request a re-render with 1
console.log(count);  // Still 0!
```

----------------------------------------

TITLE: Basic Search Application with React Suspense (App.js)
DESCRIPTION: This component sets up a basic search interface using React's `useState` for managing the input query. It wraps the `SearchResults` component with `Suspense` to display a "Loading..." fallback while data is being fetched, demonstrating a common pattern for handling asynchronous operations.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/Suspense.md#_snippet_15

LANGUAGE: JavaScript
CODE:
```
import { Suspense, useState } from 'react';
import SearchResults from './SearchResults.js';

export default function App() {
  const [query, setQuery] = useState('');
  return (
    <>
      <label>
        Search albums:
        <input value={query} onChange={e => setQuery(e.target.value)} />
      </label>
      <Suspense fallback={<h2>Loading...</h2>}>
        <SearchResults query={query} />
      </Suspense>
    </>
  );
}
```

----------------------------------------

TITLE: Implementing Scoreboard with Keyed Counters (React)
DESCRIPTION: This snippet demonstrates how to use the `key` prop in React to ensure that different instances of a component, even when rendered in the same JSX position, maintain separate states. It includes a `Scoreboard` component that toggles between two `Counter` components, each identified by a unique `key` ('Taylor' or 'Sarah'), causing their state to reset upon switching.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/preserving-and-resetting-state.md#_snippet_14

LANGUAGE: JavaScript
CODE:
```
import { useState } from 'react';

export default function Scoreboard() {
  const [isPlayerA, setIsPlayerA] = useState(true);
  return (
    <div>
      {isPlayerA ? (
        <Counter key="Taylor" person="Taylor" />
      ) : (
        <Counter key="Sarah" person="Sarah" />
      )}
      <button onClick={() => {
        setIsPlayerA(!isPlayerA);
      }}>
        Next player!
      </button>
    </div>
  );
}

function Counter({ person }) {
  const [score, setScore] = useState(0);
  const [hover, setHover] = useState(false);

  let className = 'counter';
  if (hover) {
    className += ' hover';
  }

  return (
    <div
      className={className}
      onPointerEnter={() => setHover(true)}
      onPointerLeave={() => setHover(false)}
    >
      <h1>{person}'s score: {score}</h1>
      <button onClick={() => setScore(score + 1)}>
        Add one
      </button>
    </div>
  );
}
```

----------------------------------------

TITLE: Integrating React Server Function with HTML Form Action
DESCRIPTION: This snippet demonstrates how to use a React Server Function (`requestUsername`) directly as the `action` for an HTML `<form>`. Upon form submission, React automatically provides the form's `FormData` object as the first argument to the Server Function, facilitating server-side data processing and enabling progressive enhancement.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/rsc/use-server.md#_snippet_1

LANGUAGE: JavaScript
CODE:
```
// App.js

async function requestUsername(formData) {
  'use server';
  const username = formData.get('username');
  // ...
}

export default function App() {
  return (
    <form action={requestUsername}>
      <input type="text" name="username" />
      <button type="submit">Request</button>
    </form>
  );
}
```

----------------------------------------

TITLE: Declaring State in React Functional Component
DESCRIPTION: Shows how to declare `name` and `age` state variables in a React functional component using the `useState` hook, initializing them with default values. This is the first step in converting state from a class component.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/Component.md#_snippet_42

LANGUAGE: js
CODE:
```
import { useState } from 'react';

function Counter() {
  const [name, setName] = useState('Taylor');
  const [age, setAge] = useState(42);
  // ...
```

----------------------------------------

TITLE: React Profile Editor with State and Conditional Rendering
DESCRIPTION: This snippet presents the complete React implementation of the profile editor. It utilizes React's `useState` hook to manage the editing mode (`isEditing`) and input values (`firstName`, `lastName`). Conditional rendering is employed to dynamically display either input fields or static text based on the `isEditing` state, ensuring real-time updates of the welcome message.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/reacting-to-input-with-state.md#_snippet_14

LANGUAGE: JavaScript
CODE:
```
import { useState } from 'react';

export default function EditProfile() {
  const [isEditing, setIsEditing] = useState(false);
  const [firstName, setFirstName] = useState('Jane');
  const [lastName, setLastName] = useState('Jacobs');

  return (
    <form onSubmit={e => {
      e.preventDefault();
      setIsEditing(!isEditing);
    }}>
      <label>
        First name:{' '}
        {isEditing ? (
          <input
            value={firstName}
            onChange={e => {
              setFirstName(e.target.value)
            }}
          />
        ) : (
          <b>{firstName}</b>
        )}
      </label>
      <label>
        Last name:{' '}
        {isEditing ? (
          <input
            value={lastName}
            onChange={e => {
              setLastName(e.target.value)
            }}
          />
        ) : (
          <b>{lastName}</b>
        )}
      </label>
      <button type="submit">
        {isEditing ? 'Save' : 'Edit'} Profile
      </button>
      <p><i>Hello, {firstName} {lastName}!</i></p>
    </form>
  );
}
```

LANGUAGE: CSS
CODE:
```
label { display: block; margin-bottom: 20px; }
```

----------------------------------------

TITLE: Wrapping Multiple Elements with a Div in React JSX
DESCRIPTION: To return multiple elements from a React component, they must be wrapped within a single parent tag. This example demonstrates using a <div> as the parent wrapper to group multiple JSX elements.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/writing-markup-with-jsx.md#_snippet_3

LANGUAGE: js
CODE:
```
<div>
  <h1>Hedy Lamarr's Todos</h1>
  <img 
    src="https://i.imgur.com/yXOvdOSs.jpg" 
    alt="Hedy Lamarr" 
    class="photo"
  >
  <ul>
    ...
  </ul>
</div>
```

----------------------------------------

TITLE: Building a Stopwatch with useState and useRef in React
DESCRIPTION: This React component implements a stopwatch using a combination of `useState` for rendering-related time values (`startTime`, `now`) and `useRef` for storing the non-rendering interval ID (`intervalRef`). This approach allows the component to update the displayed time while correctly managing the `setInterval` and `clearInterval` operations.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useRef.md#_snippet_6

LANGUAGE: JavaScript
CODE:
```
import { useState, useRef } from 'react';

export default function Stopwatch() {
  const [startTime, setStartTime] = useState(null);
  const [now, setNow] = useState(null);
  const intervalRef = useRef(null);

  function handleStart() {
    setStartTime(Date.now());
    setNow(Date.now());

    clearInterval(intervalRef.current);
    intervalRef.current = setInterval(() => {
      setNow(Date.now());
    }, 10);
  }

  function handleStop() {
    clearInterval(intervalRef.current);
  }

  let secondsPassed = 0;
  if (startTime != null && now != null) {
    secondsPassed = (now - startTime) / 1000;
  }

  return (
    <>
      <h1>Time passed: {secondsPassed.toFixed(3)}</h1>
      <button onClick={handleStart}>
        Start
      </button>
      <button onClick={handleStop}>
        Stop
      </button>
    </>
  );
}
```

----------------------------------------

TITLE: Corrected Chat Implementation (React)
DESCRIPTION: This snippet shows the corrected implementation. The `ChatRoom` component now destructures `roomId` and `serverUrl` from the `options` prop outside the `useEffect` hook. The `useEffect` hook's dependency array is updated to depend on the primitive values `roomId` and `serverUrl` instead of the `options` object, preventing unnecessary re-runs when the `options` object reference changes but its content does not.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/removing-effect-dependencies.md#_snippet_54

LANGUAGE: js
CODE:
```
import { useState } from 'react';
import ChatRoom from './ChatRoom.js';

export default function App() {
  const [isDark, setIsDark] = useState(false);
  const [roomId, setRoomId] = useState('general');
  const [serverUrl, setServerUrl] = useState('https://localhost:1234');

  const options = {
    serverUrl: serverUrl,
    roomId: roomId
  };

  return (
    <div className={isDark ? 'dark' : 'light'}>
      <button onClick={() => setIsDark(!isDark)}>
        Toggle theme
      </button>
      <label>
        Server URL:{' '}
        <input
          value={serverUrl}
          onChange={e => setServerUrl(e.target.value)}
        />
      </label>
      <label>
        Choose the chat room:{' '}
        <select
          value={roomId}
          onChange={e => setRoomId(e.target.value)}
        >
          <option value="general">general</option>
          <option value="travel">travel</option>
          <option value="music">music</option>
        </select>
      </label>
      <hr />
      <ChatRoom options={options} />
    </div>
  );
}
```

LANGUAGE: js
CODE:
```
import { useEffect } from 'react';
import { createConnection } from './chat.js';

export default function ChatRoom({ options }) {
  const { roomId, serverUrl } = options;
  useEffect(() => {
    const connection = createConnection({
      roomId: roomId,
      serverUrl: serverUrl
    });
    connection.connect();
    return () => connection.disconnect();
  }, [roomId, serverUrl]);

  return <h1>Welcome to the {options.roomId} room!</h1>;
}
```

LANGUAGE: js
CODE:
```
export function createConnection({ serverUrl, roomId }) {
  // A real implementation would actually connect to the server
  if (typeof serverUrl !== 'string') {
    throw Error('Expected serverUrl to be a string. Received: ' + serverUrl);
  }
  if (typeof roomId !== 'string') {
    throw Error('Expected roomId to be a string. Received: ' + roomId);
  }
  return {
    connect() {
      console.log('✅ Connecting to "' + roomId + '" room at ' + serverUrl + '...');
    },
    disconnect() {
      console.log('❌ Disconnected from "' + roomId + '" room at ' + serverUrl);
    }
  };
}
```

LANGUAGE: css
CODE:
```
label, button { display: block; margin-bottom: 5px; }
.dark { background: #222; color: #eee; }
```

----------------------------------------

TITLE: Marking Client Code with 'use client' (JavaScript)
DESCRIPTION: The 'use client' directive is placed at the top of a file or function to instruct React and compatible bundlers that the code within this scope should be executed on the client side. This is essential for components that rely on browser APIs, state, or effects.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/rsc/directives.md#_snippet_0

LANGUAGE: JavaScript
CODE:
```
'use client'
```

----------------------------------------

TITLE: Integrating React Actions with HTML Forms
DESCRIPTION: This snippet demonstrates how to use the `action` prop on a standard HTML `<form/>` element in React. The `action` prop accepts a function, `search` in this case, which will be executed when the form is submitted. React manages the submission lifecycle, allowing the `search` function to be defined on either the client or server.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/blog/2024/02/15/react-labs-what-we-have-been-working-on-february-2024.md#_snippet_0

LANGUAGE: JSX
CODE:
```
<form action={search}>
  <input name="query" />
  <button type="submit">Search</button>
</form>
```

----------------------------------------

TITLE: Preventing UI Fallbacks with React startTransition
DESCRIPTION: This JavaScript function `handleNextPageClick` demonstrates using `startTransition` to mark a state update as non-urgent. By wrapping `setCurrentPage` in `startTransition`, React will prevent already displayed content from being hidden by a Suspense fallback if the update causes a component to suspend, improving user experience.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/Suspense.md#_snippet_51

LANGUAGE: javascript
CODE:
```
function handleNextPageClick() {
  // If this update suspends, don't hide the already displayed content
  startTransition(() => {
    setCurrentPage(currentPage + 1);
  });
}
```

----------------------------------------

TITLE: Implementing Ref Cleanup Functions in React
DESCRIPTION: React 19 now supports returning a cleanup function from ref callbacks. This function is invoked when the component unmounts, allowing for proper resource deallocation associated with the ref, similar to effect cleanups.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/blog/2024/12/05/react-19.md#_snippet_13

LANGUAGE: js
CODE:
```
<input
  ref={(ref) => {
    // ref created

    // NEW: return a cleanup function to reset
    // the ref when element is removed from DOM.
    return () => {
      // ref cleanup
    };
  }}
/>
```

----------------------------------------

TITLE: Conditional Rendering with Unique Keys (React JSX)
DESCRIPTION: This JSX snippet illustrates the conditional rendering of `Counter` components, assigning a unique `key` ('Taylor' or 'Sarah') based on the `isPlayerA` state. This explicit use of `key` forces React to treat these as distinct components, ensuring their internal state is not preserved when switching between them.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/preserving-and-resetting-state.md#_snippet_16

LANGUAGE: JavaScript
CODE:
```
{isPlayerA ? (
  <Counter key="Taylor" person="Taylor" />
) : (
  <Counter key="Sarah" person="Sarah" />
)}
```

----------------------------------------

TITLE: Handling Client-Side Form Submission in React
DESCRIPTION: This example shows how to process form submissions entirely on the client. By passing a JavaScript function to the `action` prop, the form data is accessible via the `formData` argument, allowing for client-side logic like displaying an alert with the submitted query. Uncontrolled fields are automatically reset after the action completes.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react-dom/components/form.md#_snippet_1

LANGUAGE: jsx
CODE:
```
export default function Search() {
  function search(formData) {
    const query = formData.get("query");
    alert(`You searched for '${query}'`);
  }
  return (
    <form action={search}>
      <input name="query" />
      <button type="submit">Search</button>
    </form>
  );
}
```

----------------------------------------

TITLE: Defining a Server Function for Username Request (JavaScript)
DESCRIPTION: This Server Function processes a username request from form data. It checks if the username can be requested and returns 'successful' or 'failed' based on the outcome. This function is intended to be called from the server.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/rsc/use-server.md#_snippet_2

LANGUAGE: JavaScript
CODE:
```
// requestUsername.js
'use server';

export default async function requestUsername(formData) {
  const username = formData.get('username');
  if (canRequest(username)) {
    // ...
    return 'successful';
  }
  return 'failed';
}
```

----------------------------------------

TITLE: Typing `useContext` with Inferred Theme Type
DESCRIPTION: Demonstrates how `useContext` infers the type of the provided value from the `createContext` call. This example sets up a theme context with 'light', 'dark', or 'system' types, using `useState` to manage the theme and a custom hook to consume it.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/typescript.md#_snippet_9

LANGUAGE: typescript
CODE:
```
import { createContext, useContext, useState } from 'react';

type Theme = "light" | "dark" | "system";
const ThemeContext = createContext<Theme>("system");

const useGetTheme = () => useContext(ThemeContext);

export default function MyApp() {
  const [theme, setTheme] = useState<Theme>('light');

  return (
    <ThemeContext value={theme}>
      <MyComponent />
    </ThemeContext>
  )
}

function MyComponent() {
  const theme = useGetTheme();

  return (
    <div>
      <p>Current theme: {theme}</p>
    </div>
  )
}
```

LANGUAGE: javascript
CODE:
```
import AppTSX from "./App.tsx";
export default App = AppTSX;
```

----------------------------------------

TITLE: Triggering Initial Render in React
DESCRIPTION: This snippet demonstrates how to trigger the initial render of a React application. It uses `createRoot` to create a root DOM node and then calls its `render` method to mount the `Image` component into the DOM. This is the entry point for a React application.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/render-and-commit.md#_snippet_0

LANGUAGE: JavaScript
CODE:
```
import Image from './Image.js';
import { createRoot } from 'react-dom/client';

const root = createRoot(document.getElementById('root'))
root.render(<Image />);
```

----------------------------------------

TITLE: Rendering React Application into a Root
DESCRIPTION: This snippet illustrates the essential step of rendering a React application (`<App />`) into a previously created root using `root.render()`. It highlights that without this call, the application will not be displayed, addressing a common troubleshooting scenario.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react-dom/client/createRoot.md#_snippet_23

LANGUAGE: js
CODE:
```
import { createRoot } from 'react-dom/client';
import App from './App.js';

const root = createRoot(document.getElementById('root'));
root.render(<App />);
```

----------------------------------------

TITLE: Providing Context to Child Components in React
DESCRIPTION: This example illustrates how to make a context value available to child components. By wrapping a component (or its parent) with `<ThemeContext value="dark">`, any component within its subtree can consume this context using the `use` hook.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/use.md#_snippet_4

LANGUAGE: JavaScript
CODE:
```
function MyPage() {
  return (
    <ThemeContext value="dark">
      <Form />
    </ThemeContext>
  );
}

function Form() {
  // ... renders buttons inside ...
}
```

----------------------------------------

TITLE: Passing Props to React Components
DESCRIPTION: Illustrates how parent components pass data to child components using props. This example shows passing an object ('person') and a number ('size') as props to an 'Avatar' component, and using the 'children' prop for content encapsulation within a 'Card' component. It also includes a utility function for image URL generation.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/describing-the-ui.md#_snippet_5

LANGUAGE: js
CODE:
```
import { getImageUrl } from './utils.js'

export default function Profile() {
  return (
    <Card>
      <Avatar
        size={100}
        person={{
          name: 'Katsuko Saruhashi',
          imageId: 'YfeOqp2'
        }}
      />
    </Card>
  );
}

function Avatar({ person, size }) {
  return (
    <img
      className="avatar"
      src={getImageUrl(person)}
      alt={person.name}
      width={size}
      height={size}
    />
  );
}

function Card({ children }) {
  return (
    <div className="card">
      {children}
    </div>
  );
}
```

LANGUAGE: js
CODE:
```
export function getImageUrl(person, size = 's') {
  return (
    'https://i.imgur.com/' +
    person.imageId +
    size +
    '.jpg'
  );
}
```

LANGUAGE: css
CODE:
```
.card {
  width: fit-content;
  margin: 5px;
  padding: 5px;
  font-size: 20px;
  text-align: center;
  border: 1px solid #aaa;
  border-radius: 20px;
  background: #fff;
}
.avatar {
  margin: 20px;
  border-radius: 50%;
}
```

----------------------------------------

TITLE: Optimizing Chat Room Connection by Moving Dependencies Inside Effect (React.js)
DESCRIPTION: This optimized React component refactors the `useEffect` hook to prevent unnecessary re-connections. By moving the creation of the `options` object inside the effect, the dependency array now only includes `roomId`. This ensures the effect only re-runs when the `roomId` changes, avoiding re-connections when other state (like `message`) updates.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/escape-hatches.md#_snippet_17

LANGUAGE: JavaScript
CODE:
```
import { useState, useEffect } from 'react';
import { createConnection } from './chat.js';

const serverUrl = 'https://localhost:1234';

function ChatRoom({ roomId }) {
  const [message, setMessage] = useState('');

  useEffect(() => {
    const options = {
      serverUrl: serverUrl,
      roomId: roomId
    };
    const connection = createConnection(options);
    connection.connect();
    return () => connection.disconnect();
  }, [roomId]);

  return (
    <>
      <h1>Welcome to the {roomId} room!</h1>
      <input value={message} onChange={e => setMessage(e.target.value)} />
    </>
  );
}

export default function App() {
  const [roomId, setRoomId] = useState('general');
  return (
    <>
      <label>
        Choose the chat room:{' '}
        <select
          value={roomId}
          onChange={e => setRoomId(e.target.value)}
        >
          <option value="general">general</option>
          <option value="travel">travel</option>
          <option value="music">music</option>
        </select>
      </label>
      <hr />
      <ChatRoom roomId={roomId} />
    </>
  );
}
```

LANGUAGE: JavaScript
CODE:
```
export function createConnection({ serverUrl, roomId }) {
  // A real implementation would actually connect to the server
  return {
    connect() {
      console.log('✅ Connecting to "' + roomId + '" room at ' + serverUrl + '...');
    },
    disconnect() {
      console.log('❌ Disconnected from "' + roomId + '" room at ' + serverUrl);
    }
  };
}
```

LANGUAGE: CSS
CODE:
```
input { display: block; margin-bottom: 20px; }
button { margin-left: 10px; }
```

----------------------------------------

TITLE: Implementing Task State Logic with If/Else Reducer in React
DESCRIPTION: This reducer function, `tasksReducer`, manages a list of tasks using `if/else` statements to handle different action types: 'added', 'changed', and 'deleted'. It takes the current `tasks` array and an `action` object, returning a new state array based on the action. This approach centralizes state updates and can be declared outside of React components for better readability.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/extracting-state-logic-into-a-reducer.md#_snippet_9

LANGUAGE: js
CODE:
```
function tasksReducer(tasks, action) {
  if (action.type === 'added') {
    return [
      ...tasks,
      {
        id: action.id,
        text: action.text,
        done: false,
      },
    ];
  } else if (action.type === 'changed') {
    return tasks.map((t) => {
      if (t.id === action.task.id) {
        return action.task;
      } else {
        return t;
      }
    });
  } else if (action.type === 'deleted') {
    return tasks.filter((t) => t.id !== action.id);
  } else {
    throw Error('Unknown action: ' + action.type);
  }
}
```

----------------------------------------

TITLE: React Component with Direct State Object Mutation
DESCRIPTION: A React component `MovingDot` that attempts to update the `position` object directly within the `onPointerMove` event handler. This incorrect mutation does not trigger a re-render, causing the dot to remain static.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/updating-objects-in-state.md#_snippet_4

LANGUAGE: js
CODE:
```
import { useState } from 'react';

export default function MovingDot() {
  const [position, setPosition] = useState({
    x: 0,
    y: 0
  });
  return (
    <div
      onPointerMove={e => {
        position.x = e.clientX;
        position.y = e.clientY;
      }}
      style={{
        position: 'relative',
        width: '100vw',
        height: '100vh',
      }}>
      <div style={{
        position: 'absolute',
        backgroundColor: 'red',
        borderRadius: '50%',
        transform: `translate(${position.x}px, ${position.y}px)`,
        left: -10,
        top: -10,
        width: 20,
        height: 20,
      }} />
    </div>
  );
}
```

LANGUAGE: css
CODE:
```
body { margin: 0; padding: 0; height: 250px; }
```

----------------------------------------

TITLE: Wrapping Lazy Components with Suspense (JSX)
DESCRIPTION: This snippet demonstrates how to use the `<Suspense>` component to provide a fallback UI (e.g., `<Loading />`) while a lazy-loaded component, like `MarkdownPreview`, is being fetched. The `fallback` prop accepts any React element to display during the loading state, ensuring a smooth user experience.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/lazy.md#_snippet_4

LANGUAGE: JSX
CODE:
```
<Suspense fallback={<Loading />}>
  <h2>Preview</h2>
  <MarkdownPreview />
</Suspense>
```

----------------------------------------

TITLE: Impure StoryTray Component with Re-render Trigger (Hover Effect)
DESCRIPTION: This updated `StoryTray` component further highlights the impurity bug by introducing a `useState` hook for a hover effect. When the component re-renders due to the hover state change, the `items.push()` operation is executed again, causing multiple 'Create Story' items to appear. This clearly demonstrates how re-renders, especially in Strict Mode, expose side effects from impure component logic.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/StrictMode.md#_snippet_8

LANGUAGE: JavaScript
CODE:
```
import { useState } from 'react';

export default function StoryTray({ stories }) {
  const [isHover, setIsHover] = useState(false);
  const items = stories;
  items.push({ id: 'create', label: 'Create Story' });
  return (
    <ul
      onPointerEnter={() => setIsHover(true)}
      onPointerLeave={() => setIsHover(false)}
      style={{
        backgroundColor: isHover ? '#ddd' : '#fff'
      }}
    >
      {items.map(story => (
        <li key={story.id}>
          {story.label}
        </li>
      ))}
    </ul>
  );
}
```

----------------------------------------

TITLE: Initial React Todo App: Direct State Mutations (JavaScript)
DESCRIPTION: This snippet showcases a React todo application where state updates are performed by directly mutating the `todos` array. This approach, while seemingly straightforward, leads to issues with React's rendering and state management. It includes the main `App.js` component, auxiliary components (`AddTodo.js`, `TaskList.js`), styling (`CSS`), and project dependencies (`package.json`).
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/updating-arrays-in-state.md#_snippet_29

LANGUAGE: javascript
CODE:
```
import { useState } from 'react';
import { useImmer } from 'use-immer';
import AddTodo from './AddTodo.js';
import TaskList from './TaskList.js';

let nextId = 3;
const initialTodos = [
  { id: 0, title: 'Buy milk', done: true },
  { id: 1, title: 'Eat tacos', done: false },
  { id: 2, title: 'Brew tea', done: false },
];

export default function TaskApp() {
  const [todos, setTodos] = useState(
    initialTodos
  );

  function handleAddTodo(title) {
    todos.push({
      id: nextId++,
      title: title,
      done: false
    });
  }

  function handleChangeTodo(nextTodo) {
    const todo = todos.find(t =>
      t.id === nextTodo.id
    );
    todo.title = nextTodo.title;
    todo.done = nextTodo.done;
  }

  function handleDeleteTodo(todoId) {
    const index = todos.findIndex(t =>
      t.id === todoId
    );
    todos.splice(index, 1);
  }

  return (
    <>
      <AddTodo
        onAddTodo={handleAddTodo}
      />
      <TaskList
        todos={todos}
        onChangeTodo={handleChangeTodo}
        onDeleteTodo={handleDeleteTodo}
      />
    </>
  );
}
```

LANGUAGE: javascript
CODE:
```
import { useState } from 'react';

export default function AddTodo({ onAddTodo }) {
  const [title, setTitle] = useState('');
  return (
    <>
      <input
        placeholder="Add todo"
        value={title}
        onChange={e => setTitle(e.target.value)}
      />
      <button onClick={() => {
        setTitle('');
        onAddTodo(title);
      }}>Add</button>
    </>
  )
}
```

LANGUAGE: javascript
CODE:
```
import { useState } => 'react';

export default function TaskList({
  todos,
  onChangeTodo,
  onDeleteTodo
}) {
  return (
    <ul>
      {todos.map(todo => (
        <li key={todo.id}>
          <Task
            todo={todo}
            onChange={onChangeTodo}
            onDelete={onDeleteTodo}
          />
        </li>
      ))}
    </ul>
  );
}

function Task({ todo, onChange, onDelete }) {
  const [isEditing, setIsEditing] = useState(false);
  let todoContent;
  if (isEditing) {
    todoContent = (
      <>
        <input
          value={todo.title}
          onChange={e => {
            onChange({
              ...todo,
              title: e.target.value
            });
          }} />
        <button onClick={() => setIsEditing(false)}>
          Save
        </button>
      </>
    );
  } else {
    todoContent = (
      <>
        {todo.title}
        <button onClick={() => setIsEditing(true)}>
          Edit
        </button>
      </>
    );
  }
  return (
    <label>
      <input
        type="checkbox"
        checked={todo.done}
        onChange={e => {
          onChange({
            ...todo,
            done: e.target.checked
          });
        }}
      />
      {todoContent}
      <button onClick={() => onDelete(todo.id)}>
        Delete
      </button>
    </label>
  );
}
```

LANGUAGE: css
CODE:
```
button { margin: 5px; }
li { list-style-type: none; }
ul, li { margin: 0; padding: 0; }
```

LANGUAGE: json
CODE:
```
{
  "dependencies": {
    "immer": "1.7.3",
    "react": "latest",
    "react-dom": "latest",
    "react-scripts": "latest",
    "use-immer": "0.5.1"
  },
  "scripts": {
    "start": "react-scripts start",
    "build": "react-scripts build",
    "test": "react-scripts test --env=jsdom",
    "eject": "react-scripts eject"
  }
}
```

----------------------------------------

TITLE: Creating Image Size Context in React
DESCRIPTION: This JavaScript snippet defines and exports a React Context named `ImageSizeContext`. It is initialized with a default value of `500`, intended to provide a global image size to components without explicit prop passing, thereby avoiding prop drilling.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/passing-data-deeply-with-context.md#_snippet_50

LANGUAGE: js
CODE:
```
import { createContext } from 'react';

export const ImageSizeContext = createContext(500);
```

----------------------------------------

TITLE: React Component for Adding Items (Spread Syntax)
DESCRIPTION: This complete React component demonstrates the recommended pattern for adding new items to an array in state. It uses the `useState` hook and the array spread syntax to create a new array with the added item, ensuring immutability and proper UI updates.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/updating-arrays-in-state.md#_snippet_2

LANGUAGE: javascript
CODE:
```
import { useState } from 'react';

let nextId = 0;

export default function List() {
  const [name, setName] = useState('');
  const [artists, setArtists] = useState([]);

  return (
    <>
      <h1>Inspiring sculptors:</h1>
      <input
        value={name}
        onChange={e => setName(e.target.value)}
      />
      <button onClick={() => {
        setArtists([
          ...artists,
          { id: nextId++, name: name }
        ]);
      }}>Add</button>
      <ul>
        {artists.map(artist => (
          <li key={artist.id}>{artist.name}</li>
        ))}
      </ul>
    </>
  );
}
```

LANGUAGE: css
CODE:
```
button { margin-left: 5px; }
```

----------------------------------------

TITLE: Reading Props in React Child Component
DESCRIPTION: This snippet shows how the `MyButton` child component is modified to receive `count` and `onClick` as props from its parent. Instead of managing its own state, it now displays the `count` value passed down and executes the `onClick` handler provided by the parent, ensuring synchronized updates.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/index.md#_snippet_24

LANGUAGE: JavaScript
CODE:
```
function MyButton({ count, onClick }) {
  return (
    <button onClick={onClick}>
      Clicked {count} times
    </button>
  );
}
```

----------------------------------------

TITLE: Correctly Controlling Text Area with onChange Handler in React
DESCRIPTION: This snippet shows the recommended approach for a *controlled* `<textarea>` in React. By providing both a `value` prop (bound to a state variable) and an `onChange` handler that updates that state, the component ensures that user input is reflected in the UI and the state, maintaining a single source of truth for the input's value.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react-dom/components/textarea.md#_snippet_14

LANGUAGE: js
CODE:
```
// ✅ Good: controlled text area with onChange
<textarea value={something} onChange={e => setSomething(e.target.value)} />
```

----------------------------------------

TITLE: Optimizing Re-renders by Isolating Input State in React
DESCRIPTION: This optimized snippet demonstrates how to improve performance by isolating the controlled input's state into its own component, `SignupForm`. By moving the `useState` hook and the input element into `SignupForm`, only this smaller component re-renders on every keystroke, preventing unnecessary re-renders of the larger `PageContent` component.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react-dom/components/input.md#_snippet_13

LANGUAGE: JavaScript
CODE:
```
function App() {
  return (
    <>
      <SignupForm />
      <PageContent />
    </>
  );
}

function SignupForm() {
  const [firstName, setFirstName] = useState('');
  return (
    <form>
      <input value={firstName} onChange={e => setFirstName(e.target.value)} />
    </form>
  );
}
```

----------------------------------------

TITLE: Demonstrating Impure Component Bug with React StrictMode
DESCRIPTION: This set of code files illustrates a common bug in React where a component (`StoryTray`) directly mutates its props (`stories` array). When wrapped in `StrictMode`, React intentionally double-renders the component, making the impurity immediately visible as 'Create Story' appears twice, highlighting the issue early in development.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/StrictMode.md#_snippet_10

LANGUAGE: javascript
CODE:
```
import { StrictMode } from 'react';
import { createRoot } from 'react-dom/client';
import './styles.css';

import App from './App';

const root = createRoot(document.getElementById("root"));
root.render(
  <StrictMode>
    <App />
  </StrictMode>
);
```

LANGUAGE: javascript
CODE:
```
import { useState } from 'react';
import StoryTray from './StoryTray.js';

let initialStories = [
  {id: 0, label: "Ankit's Story" },
  {id: 1, label: "Taylor's Story" },
];

export default function App() {
  let [stories, setStories] = useState(initialStories)
  return (
    <div
      style={{
        width: '100%',
        height: '100%',
        textAlign: 'center',
      }}
    >
      <StoryTray stories={stories} />
    </div>
  );
}
```

LANGUAGE: javascript
CODE:
```
export default function StoryTray({ stories }) {
  const items = stories;
  items.push({ id: 'create', label: 'Create Story' });
  return (
    <ul>
      {items.map(story => (
        <li key={story.id}>
          {story.label}
        </li>
      ))}
    </ul>
  );
}
```

LANGUAGE: css
CODE:
```
ul {
  margin: 0;
  list-style-type: none;
  height: 100%;
  display: flex;
  flex-wrap: wrap;
  padding: 10px;
}

li {
  border: 1px solid #aaa;
  border-radius: 6px;
  float: left;
  margin: 5px;
  padding: 5px;
  width: 70px;
  height: 100px;
}
```

----------------------------------------

TITLE: Applying Key Prop to List Item in React JSX
DESCRIPTION: Demonstrates the basic syntax for adding a `key` prop to a list item (`<li>`) within a React component. The `key` prop, in this case `person.id`, is crucial for React to uniquely identify elements in a list, preventing console warnings and enabling efficient DOM reconciliation.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/rendering-lists.md#_snippet_16

LANGUAGE: JavaScript
CODE:
```
<li key={person.id}>...</li>
```

----------------------------------------

TITLE: Displaying Search Results with React and Suspense
DESCRIPTION: This React component `SearchResults` fetches and displays a list of albums based on a `query` prop. It uses the `use` Hook from React to integrate with Suspense for data fetching, showing a "No matches" message if no albums are found or `null` if the query is empty. It depends on `fetchData` from `data.js`.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/Suspense.md#_snippet_22

LANGUAGE: javascript
CODE:
```
import {use} from 'react';
import { fetchData } from './data.js';

export default function SearchResults({ query }) {
  if (query === '') {
    return null;
  }
  const albums = use(fetchData(`/search?q=${query}`));
  if (albums.length === 0) {
    return <p>No matches for <i>"{query}"</i></p>;
  }
  return (
    <ul>
      {albums.map(album => (
        <li key={album.id}>
          {album.title} ({album.year})
        </li>
      ))}
    </ul>
  );
}
```

----------------------------------------

TITLE: Composing React Components for Page Layout
DESCRIPTION: This JavaScript snippet illustrates how React components can be composed and nested to build complex UI layouts. It shows a hierarchical structure where components like PageLayout, NavigationHeader, and PageContent encapsulate other smaller components to form a complete page.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/your-first-component.md#_snippet_1

LANGUAGE: js
CODE:
```
<PageLayout>
  <NavigationHeader>
    <SearchBar />
    <Link to="/docs">Docs</Link>
  </NavigationHeader>
  <Sidebar />
  <PageContent>
    <TableOfContents />
    <DocumentationText />
  </PageContent>
</PageLayout>
```

----------------------------------------

TITLE: Incorrectly Mutating Nested Object in Copied Array (JavaScript)
DESCRIPTION: This snippet illustrates a common pitfall when updating arrays containing objects in React state. Although `nextList` is a copy of `list`, the objects within the array are still references to the original objects. Directly modifying `nextList[0].seen` mutates the original `list[0]` object, violating React's immutability principle and leading to unexpected behavior or rendering issues.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/updating-arrays-in-state.md#_snippet_10

LANGUAGE: javascript
CODE:
```
const nextList = [...list];
nextList[0].seen = true; // Problem: mutates list[0]
setList(nextList);
```

----------------------------------------

TITLE: Optimizing React Component Renders with useMemo and useCallback
DESCRIPTION: This React component demonstrates how `useMemo` and `useCallback` are used to optimize performance. `useMemo` caches the result of `computeRequirements` based on `product` changes, while `useCallback` memoizes the `handleSubmit` function itself, preventing `ShippingForm` from re-rendering unnecessarily when `productId` or `referrer` haven't changed.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useCallback.md#_snippet_7

LANGUAGE: javascript
CODE:
```
import { useMemo, useCallback } from 'react';

function ProductPage({ productId, referrer }) {
  const product = useData('/product/' + productId);

  const requirements = useMemo(() => { // Calls your function and caches its result
    return computeRequirements(product);
  }, [product]);

  const handleSubmit = useCallback((orderDetails) => { // Caches your function itself
    post('/product/' + productId + '/buy', {
      referrer,
      orderDetails,
    });
  }, [productId, referrer]);

  return (
    <div className={theme}>
      <ShippingForm requirements={requirements} onSubmit={handleSubmit} />
    </div>
  );
}
```

----------------------------------------

TITLE: Directly Mutating Nested Object State (JavaScript - Anti-pattern)
DESCRIPTION: This JavaScript snippet illustrates an *incorrect* approach to updating a nested object property in React by directly mutating the state. While it works in plain JavaScript, this method violates React's immutability principle for state and can lead to unexpected behavior or re-rendering issues.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/updating-objects-in-state.md#_snippet_20

LANGUAGE: js
CODE:
```
person.artwork.city = 'New Delhi';
```

----------------------------------------

TITLE: Defining a React Component Function (JavaScript)
DESCRIPTION: This code snippet illustrates the definition of a simple React component named `MyComponent`. It's a function that returns JSX, representing the structure and content of the component. This definition can be used multiple times throughout an application.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/rsc/use-client.md#_snippet_7

LANGUAGE: js
CODE:
```
// This is a definition of a component
function MyComponent() {
  return <p>My Component</p>
}
```

----------------------------------------

TITLE: Submitting Form Data to a Server Function with Hidden Fields in React
DESCRIPTION: This snippet demonstrates integrating a React form with a server function (`'use server'`) for submission handling. It uses a hidden input field to pass additional data, such as a `productId`, which is then retrieved from the `formData` object within the server function. This approach supports progressive enhancement, allowing forms to work even without JavaScript.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react-dom/components/form.md#_snippet_2

LANGUAGE: jsx
CODE:
```
import { updateCart } from './lib.js';

function AddToCart({productId}) {
  async function addToCart(formData) {
    'use server'
    const productId = formData.get('productId')
    await updateCart(productId)
  }
  return (
    <form action={addToCart}>
        <input type="hidden" name="productId" value={productId} />
        <button type="submit">Add to Cart</button>
    </form>

  );
}
```

----------------------------------------

TITLE: Implementing React Form with State Management - JavaScript
DESCRIPTION: This snippet demonstrates a React functional component (`Form`) that manages a quiz form's state using `useState`. It includes handlers for text input (`handleTextareaChange`) and form submission (`handleSubmit`), which asynchronously interacts with a mock API (`submitForm`) to update the form's status (typing, submitting, success) and display errors. The component's UI is declaratively rendered based on its current state.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/reacting-to-input-with-state.md#_snippet_7

LANGUAGE: javascript
CODE:
```
import { useState } from 'react';

export default function Form() {
  const [answer, setAnswer] = useState('');
  const [error, setError] = useState(null);
  const [status, setStatus] = useState('typing');

  if (status === 'success') {
    return <h1>That's right!</h1>
  }

  async function handleSubmit(e) {
    e.preventDefault();
    setStatus('submitting');
    try {
      await submitForm(answer);
      setStatus('success');
    } catch (err) {
      setStatus('typing');
      setError(err);
    }
  }

  function handleTextareaChange(e) {
    setAnswer(e.target.value);
  }

  return (
    <>
      <h2>City quiz</h2>
      <p>
        In which city is there a billboard that turns air into drinkable water?
      </p>
      <form onSubmit={handleSubmit}>
        <textarea
          value={answer}
          onChange={handleTextareaChange}
          disabled={status === 'submitting'}
        />
        <br />
        <button disabled={
          answer.length === 0 ||
          status === 'submitting'
        }>
          Submit
        </button>
        {error !== null &&
          <p className="Error">
            {error.message}
          </p>
        }
      </form>
    </>
  );
}

function submitForm(answer) {
  // Pretend it's hitting the network.
  return new Promise((resolve, reject) => {
    setTimeout(() => {
      let shouldError = answer.toLowerCase() !== 'lima'
      if (shouldError) {
        reject(new Error('Good guess but a wrong answer. Try again!'));
      } else {
        resolve();
      }
    }, 1500);
  });
}
```

----------------------------------------

TITLE: React Event Handler with Substituted State Value (JavaScript)
DESCRIPTION: This snippet visualizes the `onClick` handler during a render where the `number` state is `0`. It demonstrates how React internally processes `setNumber` calls by substituting the current render's state value (`0`) into the expressions, clarifying why multiple calls to `setNumber(number + 1)` result in the state being set to `1` multiple times, ultimately leading to `1` for the next render.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/state-as-a-snapshot.md#_snippet_5

LANGUAGE: JavaScript
CODE:
```
<button onClick={() => {
  setNumber(0 + 1);
  setNumber(0 + 1);
  setNumber(0 + 1);
}}>+3</button>
```

----------------------------------------

TITLE: React Component with Immutable Array Updates (Fixed)
DESCRIPTION: This React component demonstrates the corrected approach to updating objects within arrays immutably. By using the `map` method and object spread syntax (`{ ...artwork, seen: nextSeen }`) to create new objects for updated items, it prevents direct state mutation and resolves the shared state bug, ensuring that each list's state is isolated.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/updating-arrays-in-state.md#_snippet_14

LANGUAGE: javascript
CODE:
```
import { useState } from 'react';

let nextId = 3;
const initialList = [
  { id: 0, title: 'Big Bellies', seen: false },
  { id: 1, title: 'Lunar Landscape', seen: false },
  { id: 2, title: 'Terracotta Army', seen: true },
];

export default function BucketList() {
  const [myList, setMyList] = useState(initialList);
  const [yourList, setYourList] = useState(
    initialList
  );

  function handleToggleMyList(artworkId, nextSeen) {
    setMyList(myList.map(artwork => {
      if (artwork.id === artworkId) {
        // Create a *new* object with changes
        return { ...artwork, seen: nextSeen };
      } else {
        // No changes
        return artwork;
      }
    }));
  }

  function handleToggleYourList(artworkId, nextSeen) {
    setYourList(yourList.map(artwork => {
      if (artwork.id === artworkId) {
        // Create a *new* object with changes
        return { ...artwork, seen: nextSeen };
      } else {
        // No changes
        return artwork;
      }
    }));
  }

  return (
    <>
      <h1>Art Bucket List</h1>
      <h2>My list of art to see:</h2>
      <ItemList
        artworks={myList}
        onToggle={handleToggleMyList} />
      <h2>Your list of art to see:</h2>
      <ItemList
        artworks={yourList}
        onToggle={handleToggleYourList} />
    </>
  );
}

function ItemList({ artworks, onToggle }) {
  return (
    <ul>
      {artworks.map(artwork => (

```

----------------------------------------

TITLE: Corrected Form Submission by Moving Send Logic to Event Handler in React
DESCRIPTION: This snippet provides the corrected implementation, removing the `useEffect` that was causing the issue. The `sendMessage` function is now called directly within the `handleSubmit` event handler. This ensures that the message is sent only when the form is explicitly submitted by the user, aligning the side effect with the user's intended action and preventing premature or unintended message sending.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/you-might-not-need-an-effect.md#_snippet_54

LANGUAGE: js
CODE:
```
import { useState, useEffect } from 'react';

export default function Form() {
  const [showForm, setShowForm] = useState(true);
  const [message, setMessage] = useState('');

  function handleSubmit(e) {
    e.preventDefault();
    setShowForm(false);
    sendMessage(message);
  }

  if (!showForm) {
    return (
      <>
        <h1>Thanks for using our services!</h1>
        <button onClick={() => {
          setMessage('');
          setShowForm(true);
        }}>
          Open chat
        </button>
      </>
    );
  }

  return (
    <form onSubmit={handleSubmit}>
      <textarea
        placeholder="Message"
        value={message}
        onChange={e => setMessage(e.target.value)}
      />
      <button type="submit" disabled={message === ''}>
        Send
      </button>
    </form>
  );
}

function sendMessage(message) {
  console.log('Sending message: ' + message);
}
```

LANGUAGE: css
CODE:
```
label, textarea { margin-bottom: 10px; display: block; }
```

----------------------------------------

TITLE: Server Component Data Fetching in React
DESCRIPTION: This JavaScript code illustrates data fetching within React Server Components. Unlike client-side fetching, data is loaded directly during the component's render on the server, eliminating client-server waterfalls for initial data loads and simplifying data access logic.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/rsc/server-components.md#_snippet_5

LANGUAGE: JavaScript
CODE:
```
import db from './database';

async function Note({id}) {
  // NOTE: loads *during* render.
  const note = await db.notes.get(id);
  return (
    <div>
      <Author id={note.authorId} />
      <p>{note}</p>
    </div>
  );
}

async function Author({id}) {
  // NOTE: loads *after* Note,
  // but is fast if data is co-located.
  const author = await db.authors.get(id);
  return <span>By: {author.name}</span>;
}
```

----------------------------------------

TITLE: Timer Component with Correct Effect Dependency (Solution)
DESCRIPTION: This is the corrected version of the Timer component. The issue of the stale 'increment' value is resolved by adding 'increment' to the useEffect dependency array. This ensures that the effect re-runs whenever 'increment' changes, clearing the old interval and setting up a new one that captures the latest 'increment' value, allowing the counter to update correctly based on the current increment setting.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/separating-events-from-effects.md#_snippet_27

LANGUAGE: json
CODE:
```
{
  "dependencies": {
    "react": "experimental",
    "react-dom": "experimental",
    "react-scripts": "latest"
  },
  "scripts": {
    "start": "react-scripts start",
    "build": "react-scripts build",
    "test": "react-scripts test --env=jsdom",
    "eject": "react-scripts eject"
  }
}
```

LANGUAGE: js
CODE:
```
import { useState, useEffect } from 'react';

export default function Timer() {
  const [count, setCount] = useState(0);
  const [increment, setIncrement] = useState(1);

  useEffect(() => {
    const id = setInterval(() => {
      setCount(c => c + increment);
    }, 1000);
    return () => {
      clearInterval(id);
    };
  }, [increment]);

  return (
    <>
      <h1>
        Counter: {count}
        <button onClick={() => setCount(0)}>Reset</button>
      </h1>
      <hr />
      <p>
        Every second, increment by:
        <button disabled={increment === 0} onClick={() => {
          setIncrement(i => i - 1);
        }}>–</button>
        <b>{increment}</b>
        <button onClick={() => {
          setIncrement(i => i + 1);
        }}>+</button>
      </p>
    </>
  );
}
```

LANGUAGE: css
CODE:
```
button { margin: 10px; }
```

----------------------------------------

TITLE: Managing Chat Connection with React useEffect Dependencies - JavaScript
DESCRIPTION: This React useEffect hook manages a chat room connection, establishing it when the component mounts or roomId changes, and disconnecting on unmount or roomId change. By including roomId in the dependency array, React ensures the effect re-synchronizes whenever the roomId prop updates, maintaining a connection specific to the current room.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/lifecycle-of-reactive-effects.md#_snippet_12

LANGUAGE: js
CODE:
```
function ChatRoom({ roomId }) { 
  useEffect(() => {
    const connection = createConnection(serverUrl, roomId); 
    connection.connect();
    return () => {
      connection.disconnect();
    };
  }, [roomId]); 
  // ...
```

----------------------------------------

TITLE: Solution 1: Fixing StoryTray by Rendering 'Create Story' Separately
DESCRIPTION: This solution demonstrates the simplest fix for the `StoryTray` component. Instead of mutating the `stories` array, the 'Create Story' placeholder is rendered as a separate `<li>` element directly within the component's JSX. This ensures that the `stories` prop remains untouched, making the component pure and predictable. The `App.js` and `style.css` are included for context.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/keeping-components-pure.md#_snippet_10

LANGUAGE: JavaScript
CODE:
```
export default function StoryTray({ stories }) {
  return (
    <ul>
      {stories.map(story => (
        <li key={story.id}>
          {story.label}
        </li>
      ))}
      <li>Create Story</li>
    </ul>
  );
}
```

LANGUAGE: JavaScript
CODE:
```
import { useState, useEffect } from 'react';
import StoryTray from './StoryTray.js';

const initialStories = [
  {id: 0, label: "Ankit's Story" },
  {id: 1, label: "Taylor's Story" },
];

export default function App() {
  const [stories, setStories] = useState([...initialStories])
  const time = useTime();

  // HACK: Prevent the memory from growing forever while you read docs.
  // We're breaking our own rules here.
  if (stories.length > 100) {
    stories.length = 100;
  }

  return (
    <div
      style={{
        width: '100%',
        height: '100%',
        textAlign: 'center',
      }}
    >
      <h2>It is {time.toLocaleTimeString()} now.</h2>
      <StoryTray stories={stories} />
    </div>
  );
}

function useTime() {
  const [time, setTime] = useState(() => new Date());
  useEffect(() => {
    const id = setInterval(() => {
      setTime(new Date());
    }, 1000);
    return () => clearInterval(id);
  }, []);
  return time;
}
```

LANGUAGE: CSS
CODE:
```
ul {
  margin: 0;
  list-style-type: none;
}

li {
  border: 1px solid #aaa;
  border-radius: 6px;
  float: left;
  margin: 5px;
  margin-bottom: 20px;
  padding: 5px;
  width: 70px;
  height: 100px;
}
```

----------------------------------------

TITLE: Migrating to React 18's createRoot API (JavaScript)
DESCRIPTION: This JavaScript snippet demonstrates the migration from the legacy `ReactDOM.render` API to the new `ReactDOM.createRoot` API introduced in React 18. The new API enables concurrent features and is required for applications to fully leverage React 18's capabilities.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/blog/2021/12/17/react-conf-2021-recap.md#_snippet_1

LANGUAGE: javascript
CODE:
```
// before
const container = document.getElementById('root');
ReactDOM.render(<App />, container);

// after
const container = document.getElementById('root');
const root = ReactDOM.createRoot(container);
root.render(<App/>);
```

----------------------------------------

TITLE: React Chat App with Input State Reset using Key Prop
DESCRIPTION: This example demonstrates how to force a React component to reset its internal state when its identity changes. By adding a unique `key` prop to the `Chat` component (e.g., `<Chat key={to.email} contact={to} />`), React treats it as a new instance, effectively clearing the input field upon switching contacts.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/managing-state.md#_snippet_5

LANGUAGE: js
CODE:
```
import { useState } from 'react';
import Chat from './Chat.js';
import ContactList from './ContactList.js';

export default function Messenger() {
  const [to, setTo] = useState(contacts[0]);
  return (
    <div>
      <ContactList
        contacts={contacts}
        selectedContact={to}
        onSelect={contact => setTo(contact)}
      />
      <Chat key={to.email} contact={to} />
    </div>
  )
}

const contacts = [
  { name: 'Taylor', email: 'taylor@mail.com' },
  { name: 'Alice', email: 'alice@mail.com' },
  { name: 'Bob', email: 'bob@mail.com' }
];
```

LANGUAGE: js
CODE:
```
export default function ContactList({
  selectedContact,
  contacts,
  onSelect
}) {
  return (
    <section className="contact-list">
      <ul>
        {contacts.map(contact =>
          <li key={contact.email}>
            <button onClick={() => {
              onSelect(contact);
            }}>
              {contact.name}
            </button>
          </li>
        )}
      </ul>
    </section>
  );
}
```

LANGUAGE: js
CODE:
```
import { useState } from 'react';

export default function Chat({ contact }) {
  const [text, setText] = useState('');
  return (
    <section className="chat">
      <textarea
        value={text}
        placeholder={'Chat to ' + contact.name}
        onChange={e => setText(e.target.value)}
      />
      <br />
      <button>Send to {contact.email}</button>
    </section>
  );
}
```

LANGUAGE: css
CODE:
```
.chat, .contact-list {
  float: left;
  margin-bottom: 20px;
}
ul, li {
  list-style: none;
  margin: 0;
  padding: 0;
}
li button {
  width: 100px;
  padding: 10px;
  margin-right: 10px;
}
textarea {
  height: 150px;
}
```

----------------------------------------

TITLE: Editing Contact Details Form in React (Problem Context)
DESCRIPTION: This React component provides an editable form for contact details (name and email). It uses `useState` to manage its internal form input values, initialized from `initialData`. It includes 'Save' and 'Reset' buttons; 'Save' calls `onSave` with updated data, and 'Reset' reverts the form fields to `initialData`.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/preserving-and-resetting-state.md#_snippet_29

LANGUAGE: javascript
CODE:
```
import { useState } from 'react';

export default function EditContact({ initialData, onSave }) {
  const [name, setName] = useState(initialData.name);
  const [email, setEmail] = useState(initialData.email);
  return (
    <section>
      <label>
        Name:{' '}
        <input
          type="text"
          value={name}
          onChange={e => setName(e.target.value)}
        />
      </label>
      <label>
        Email:{' '}
        <input
          type="email"
          value={email}
          onChange={e => setEmail(e.target.value)}
        />
      </label>
      <button onClick={() => {
        const updatedData = {
          id: initialData.id,
          name: name,
          email: email
        };
        onSave(updatedData);
      }}>
        Save
      </button>
      <button onClick={() => {
        setName(initialData.name);
        setEmail(initialData.email);
      }}>
        Reset
      </button>
    </section>
  );
}
```

----------------------------------------

TITLE: Typing Component Children in React with TypeScript
DESCRIPTION: Explore two common methods for typing component children in React using TypeScript. Use `React.ReactNode` for a broad definition that includes all possible JSX children and JavaScript primitives, or `React.ReactElement` for strictly JSX elements.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/typescript.md#_snippet_15

LANGUAGE: ts
CODE:
```
interface ModalRendererProps {
  title: string;
  children: React.ReactNode;
}
```

LANGUAGE: ts
CODE:
```
interface ModalRendererProps {
  title: string;
  children: React.ReactElement;
}
```

----------------------------------------

TITLE: Implementing a Click Counter with useRef in React
DESCRIPTION: This React component uses the `useRef` hook to create a simple click counter. The `ref.current` property is incremented on each button click, and an alert displays the updated count. This example illustrates how refs can store mutable values that persist across renders without causing the component to re-render, making them suitable for non-visual state.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/escape-hatches.md#_snippet_1

LANGUAGE: javascript
CODE:
```
import { useRef } from 'react';

export default function Counter() {
  let ref = useRef(0);

  function handleClick() {
    ref.current = ref.current + 1;
    alert('You clicked ' + ref.current + ' times!');
  }

  return (
    <button onClick={handleClick}>
      Click me!
    </button>
  );
}
```

----------------------------------------

TITLE: Rendering Nested Components with Context in React
DESCRIPTION: This component demonstrates how `Section` and `Heading` components, utilizing React Context, automatically adjust heading levels based on their nesting depth. It showcases a `ProfilePage` with nested `Post` and `AllPosts` components, illustrating context propagation without prop drilling.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/passing-data-deeply-with-context.md#_snippet_35

LANGUAGE: javascript
CODE:
```
import Heading from './Heading.js';
import Section from './Section.js';

export default function ProfilePage() {
  return (
    <Section>
      <Heading>My Profile</Heading>
      <Post
        title="Hello traveller!"
        body="Read about my adventures."
      />
      <AllPosts />
    </Section>
  );
}

function AllPosts() {
  return (
    <Section>
      <Heading>Posts</Heading>
      <RecentPosts />
    </Section>
  );
}

function RecentPosts() {
  return (
    <Section>
      <Heading>Recent Posts</Heading>
      <Post
        title="Flavors of Lisbon"
        body="...those pastéis de nata!"
      />
      <Post
        title="Buenos Aires in the rhythm of tango"
        body="I loved it!"
      />
    </Section>
  );
}

function Post({ title, body }) {
  return (
    <Section isFancy={true}>
      <Heading>
        {title}
      </Heading>
      <p><i>{body}</i></p>
    </Section>
  );
}
```

----------------------------------------

TITLE: Updating State and Alerting Delayed Value (React, JavaScript)
DESCRIPTION: This example extends the counter component by introducing a 3-second delay before the alert fires. It further illustrates React's state snapshotting, showing that even with an asynchronous delay, the alert(number) will still display the number's value from the moment the event handler was invoked, not the updated state.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/state-as-a-snapshot.md#_snippet_9

LANGUAGE: javascript
CODE:
```
import { useState } from 'react';

export default function Counter() {
  const [number, setNumber] = useState(0);

  return (
    <>
      <h1>{number}</h1>
      <button onClick={() => {
        setNumber(number + 5);
        setTimeout(() => {
          alert(number);
        }, 3000);
      }}>+5</button>
    </>
  )
}
```

LANGUAGE: css
CODE:
```
button { display: inline-block; margin: 10px; font-size: 20px; }
h1 { display: inline-block; margin: 10px; width: 30px; text-align: center; }
```

----------------------------------------

TITLE: Complete useReducer Example for a Counter in React
DESCRIPTION: This comprehensive example demonstrates a full `useReducer` implementation for a simple counter. It includes the reducer function logic for incrementing age, the component's `useReducer` hook call, and a button that dispatches an 'incremented_age' action to update the displayed age.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useReducer.md#_snippet_5

LANGUAGE: javascript
CODE:
```
import { useReducer } from 'react';

function reducer(state, action) {
  if (action.type === 'incremented_age') {
    return {
      age: state.age + 1
    };
  }
  throw Error('Unknown action.');
}

export default function Counter() {
  const [state, dispatch] = useReducer(reducer, { age: 42 });

  return (
    <>
      <button onClick={() => {
        dispatch({ type: 'incremented_age' })
      }}>
        Increment age
      </button>
      <p>Hello! You are {state.age}.</p>
    </>
  );
}
```

----------------------------------------

TITLE: Correct useMemo Calculation with New Object Mutation (JavaScript)
DESCRIPTION: This snippet demonstrates the correct way to handle mutations within `useMemo`. Instead of mutating the original `todos` prop, a *new* array (`filtered`) is created by `filterTodos`, and then this new array is safely mutated. This maintains purity by not altering external data.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useMemo.md#_snippet_39

LANGUAGE: JavaScript
CODE:
```
const visibleTodos = useMemo(() => {
    const filtered = filterTodos(todos, tab);
    // ✅ Correct: mutating an object you created during the calculation
    filtered.push({ id: 'last', text: 'Go for a walk!' });
    return filtered;
  }, [todos, tab]);
```

----------------------------------------

TITLE: Clearing Images During Loading in React Gallery
DESCRIPTION: This enhanced `Gallery` React component addresses the image loading behavior by applying a `key` prop to the `<img>` tag. By setting `key={image.src}`, React is forced to re-create the DOM node when the image source changes, effectively clearing the previous image during the loading of the new one.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/preserving-and-resetting-state.md#_snippet_36

LANGUAGE: javascript
CODE:
```
import { useState } from 'react';

export default function Gallery() {
  const [index, setIndex] = useState(0);
  const hasNext = index < images.length - 1;

  function handleClick() {
    if (hasNext) {
      setIndex(index + 1);
    } else {
      setIndex(0);
    }
  }

  let image = images[index];
  return (
    <>
      <button onClick={handleClick}>
        Next
      </button>
      <h3>
        Image {index + 1} of {images.length}
      </h3>
      <img key={image.src} src={image.src} />
      <p>
        {image.place}
      </p>
    </>
  );
}

let images = [{
  place: 'Penang, Malaysia',
  src: 'https://i.imgur.com/FJeJR8M.jpg'
}, {
  place: 'Lisbon, Portugal',
  src: 'https://i.imgur.com/dB2LRbj.jpg'
}, {
  place: 'Bilbao, Spain',
  src: 'https://i.imgur.com/z08o2TS.jpg'
}, {
  place: 'Valparaíso, Chile',
  src: 'https://i.imgur.com/Y3utgTi.jpg'
}, {
  place: 'Schwyz, Switzerland',
  src: 'https://i.imgur.com/JBbMpWY.jpg'
}, {
  place: 'Prague, Czechia',
  src: 'https://i.imgur.com/QwUKKmF.jpg'
}, {
  place: 'Ljubljana, Slovenia',
  src: 'https://i.imgur.com/3aIiwfm.jpg'
}];
```

----------------------------------------

TITLE: Defining a Task Reducer Function in JavaScript
DESCRIPTION: Defines a reducer function `tasksReducer` that manages a list of tasks based on different action types ('added', 'changed', 'deleted'). It demonstrates how a reducer takes current state and an action to return the next state, forming the core logic for state updates.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/extracting-state-logic-into-a-reducer.md#_snippet_13

LANGUAGE: javascript
CODE:
```
export default function tasksReducer(tasks, action) {
  switch (action.type) {
    case 'added': {
      return [
        ...tasks,
        {
          id: action.id,
          text: action.text,
          done: false,
        },
      ];
    }
    case 'changed': {
      return tasks.map((t) => {
        if (t.id === action.task.id) {
          return action.task;
        } else {
          return t;
        }
      });
    }
    case 'deleted': {
      return tasks.filter((t) => t.id !== action.id);
    }
    default: {
      throw Error('Unknown action: ' + action.type);
    }
  }
}
```

----------------------------------------

TITLE: Shopping List Component with Conditional Styling in React (JSX)
DESCRIPTION: A complete React component (`ShoppingList`) that renders a list of products. It uses the `map()` function to create `<li>` elements, applying conditional styling based on the `isFruit` property to change text color. Each item requires a unique `key` for efficient updates.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/index.md#_snippet_15

LANGUAGE: js
CODE:
```
const products = [
  { title: 'Cabbage', isFruit: false, id: 1 },
  { title: 'Garlic', isFruit: false, id: 2 },
  { title: 'Apple', isFruit: true, id: 3 },
];

export default function ShoppingList() {
  const listItems = products.map(product =>
    <li
      key={product.id}
      style={{
        color: product.isFruit ? 'magenta' : 'darkgreen'
      }}
    >
      {product.title}
    </li>
  );

  return (
    <ul>{listItems}</ul>
  );
}
```

----------------------------------------

TITLE: Fixing Effect Cleanup with Strict Mode
DESCRIPTION: This set of code snippets presents the corrected version of the React application. The `useEffect` hook in the `ChatRoom` component now includes a cleanup function that disconnects the chat connection. Running this in `StrictMode` confirms that the active connection count remains stable, demonstrating how proper cleanup prevents resource leaks and ensures correct behavior, especially when components re-render or unmount.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/StrictMode.md#_snippet_22

LANGUAGE: JavaScript
CODE:
```
import { StrictMode } from 'react';
import { createRoot } from 'react-dom/client';
import './styles.css';

import App from './App';

const root = createRoot(document.getElementById("root"));
root.render(
  <StrictMode>
    <App />
  </StrictMode>
);
```

LANGUAGE: JavaScript
CODE:
```
import { useState, useEffect } from 'react';
import { createConnection } from './chat.js';

const serverUrl = 'https://localhost:1234';

function ChatRoom({ roomId }) {
  useEffect(() => {
    const connection = createConnection(serverUrl, roomId);
    connection.connect();
    return () => connection.disconnect();
  }, [roomId]);

  return <h1>Welcome to the {roomId} room!</h1>;
}

export default function App() {
  const [roomId, setRoomId] = useState('general');
  const [show, setShow] = useState(false);
  return (
    <>
      <label>
        Choose the chat room:{' '}
        <select
          value={roomId}
          onChange={e => setRoomId(e.target.value)}
        >
          <option value="general">general</option>
          <option value="travel">travel</option>
          <option value="music">music</option>
        </select>
      </label>
      <button onClick={() => setShow(!show)}>
        {show ? 'Close chat' : 'Open chat'}
      </button>
      {show && <hr />}
      {show && <ChatRoom roomId={roomId} />}
    </>
  );
}
```

LANGUAGE: JavaScript
CODE:
```
let connections = 0;

export function createConnection(serverUrl, roomId) {
  // A real implementation would actually connect to the server
  return {
    connect() {
      console.log('✅ Connecting to "' + roomId + '" room at ' + serverUrl + '...');
      connections++;
      console.log('Active connections: ' + connections);
    },
    disconnect() {
      console.log('❌ Disconnected from "' + roomId + '" room at ' + serverUrl);
      connections--;
      console.log('Active connections: ' + connections);
    }
  };
}
```

LANGUAGE: CSS
CODE:
```
input { display: block; margin-bottom: 20px; }
button { margin-left: 10px; }
```

----------------------------------------

TITLE: Creating a New Array Without Mutation in JavaScript
DESCRIPTION: This snippet illustrates the immutable approach to updating data. Instead of modifying the original `squares` array, a new array `nextSquares` is created with the desired changes, leaving the original array untouched. This is beneficial for features like undo/redo and performance optimizations in React.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/tutorial-tic-tac-toe.md#_snippet_45

LANGUAGE: jsx
CODE:
```
const squares = [null, null, null, null, null, null, null, null, null];
const nextSquares = ['X', null, null, null, null, null, null, null, null];
// Now `squares` is unchanged, but `nextSquares` first element is 'X' rather than `null`
```

----------------------------------------

TITLE: Using useEffectEvent for Non-Reactive Callbacks in React
DESCRIPTION: Demonstrates wrapping a reactive callback (`onMessage`) with `useEffectEvent` (`onReceiveMessage`) so that it doesn't trigger the `useEffect` dependency check when the callback changes, preventing unnecessary re-connections.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/removing-effect-dependencies.md#_snippet_62

LANGUAGE: javascript
CODE:
```
export default function ChatRoom({ roomId, createConnection, onMessage }) {
  const onReceiveMessage = useEffectEvent(onMessage);

  useEffect(() => {
    const connection = createConnection();
    connection.on('message', (msg) => onReceiveMessage(msg));
    // ...
```

----------------------------------------

TITLE: React useEffect with Stale State Bug (JavaScript, CSS)
DESCRIPTION: This React component demonstrates a stale state bug. A `pointermove` event listener is attached in `useEffect` with an empty dependency array and a suppressed linter warning. The `handleMove` function, which checks the `canMove` state, captures its initial value (`true`), causing the dot to always move regardless of the checkbox state.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/lifecycle-of-reactive-effects.md#_snippet_37

LANGUAGE: javascript
CODE:
```
import { useState, useEffect } from 'react';

export default function App() {
  const [position, setPosition] = useState({ x: 0, y: 0 });
  const [canMove, setCanMove] = useState(true);

  function handleMove(e) {
    if (canMove) {
      setPosition({ x: e.clientX, y: e.clientY });
    }
  }

  useEffect(() => {
    window.addEventListener('pointermove', handleMove);
    return () => window.removeEventListener('pointermove', handleMove);
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, []);

  return (
    <>
      <label>
        <input type="checkbox"
          checked={canMove}
          onChange={e => setCanMove(e.target.checked)} 
        />
        The dot is allowed to move
      </label>
      <hr />
      <div style={{
        position: 'absolute',
        backgroundColor: 'pink',
        borderRadius: '50%',
        opacity: 0.6,
        transform: `translate(${position.x}px, ${position.y}px)`,
        pointerEvents: 'none',
        left: -20,
        top: -20,
        width: 40,
        height: 40,
      }} />
    </>
  );
}
```

LANGUAGE: css
CODE:
```
body {
  height: 200px;
}
```

----------------------------------------

TITLE: Dynamically Mutating Hooks (Bad Practice) - React JavaScript
DESCRIPTION: This snippet shows an anti-pattern where a Hook is dynamically mutated or wrapped by a higher-order function. Hooks should be static and immutable; dynamic manipulation hinders local reasoning, prevents React from optimizing components, and can lead to unpredictable behavior.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/rules/react-calls-components-and-hooks.md#_snippet_2

LANGUAGE: JavaScript
CODE:
```
function ChatInput() {
  const useDataWithLogging = withLogging(useData); // 🔴 Bad: don't write higher order Hooks
  const data = useDataWithLogging();
}
```

----------------------------------------

TITLE: Rendering Contact List and Handling Selection in React
DESCRIPTION: This React functional component, `ContactList`, displays a list of contacts. It receives `contacts` (an array), `selectedId` (the ID of the currently selected contact), and `onSelect` (a callback function) as props. Clicking a contact's button triggers `onSelect` with the contact's ID, and the selected contact's name is displayed in bold.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/you-might-not-need-an-effect.md#_snippet_50

LANGUAGE: javascript
CODE:
```
export default function ContactList({
  contacts,
  selectedId,
  onSelect
}) {
  return (
    <section>
      <ul>
        {contacts.map(contact =>
          <li key={contact.id}>
            <button onClick={() => {
              onSelect(contact.id);
            }}>
              {contact.id === selectedId ?
                <b>{contact.name}</b> :
                contact.name
              }
            </button>
          </li>
        )}
      </ul>
    </section>
  );
}
```

----------------------------------------

TITLE: Importing and Declaring Multiple State Variables in React
DESCRIPTION: This example illustrates how to import `useState` from 'react' and declare multiple state variables within a functional component. It shows different ways to initialize state, including a direct value, a string, and an initializer function for lazy initialization.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useState.md#_snippet_1

LANGUAGE: JavaScript
CODE:
```
import { useState } from 'react';

function MyComponent() {
  const [age, setAge] = useState(28);
  const [name, setName] = useState('Taylor');
  const [todos, setTodos] = useState(() => createTodos());
  // ...
```

----------------------------------------

TITLE: React App Component with Prop Drilling (Initial)
DESCRIPTION: This `App` component demonstrates the problem of prop drilling. It manages the `isLarge` state and calculates `imageSize`, then passes `imageSize` down to the `List` component, which further passes it to `Place` and finally to `PlaceImage`.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/passing-data-deeply-with-context.md#_snippet_43

LANGUAGE: JavaScript
CODE:
```
import { useState } from 'react';
import { places } from './data.js';
import { getImageUrl } from './utils.js';

export default function App() {
  const [isLarge, setIsLarge] = useState(false);
  const imageSize = isLarge ? 150 : 100;
  return (
    <>
      <label>
        <input
          type="checkbox"
          checked={isLarge}
          onChange={e => {
            setIsLarge(e.target.checked);
          }}
        />
        Use large images
      </label>
      <hr />
      <List imageSize={imageSize} />
    </>
  )
}

function List({ imageSize }) {
  const listItems = places.map(place =>
    <li key={place.id}>
      <Place
        place={place}
        imageSize={imageSize}
      />
    </li>
  );
  return <ul>{listItems}</ul>;
}

function Place({ place, imageSize }) {
  return (
    <>
      <PlaceImage
        place={place}
        imageSize={imageSize}
      />
      <p>
        <b>{place.name}</b>
        {': ' + place.description}
      </p>
    </>
  );
}

function PlaceImage({ place, imageSize }) {
  return (
    <img
      src={getImageUrl(place)}
      alt={place.name}
      width={imageSize}
      height={imageSize}
    />
  );
}
```

----------------------------------------

TITLE: Correctly Specifying `useEffect` Dependencies for Video Playback in React
DESCRIPTION: This example shows the correct implementation of `useEffect` by including `isPlaying` in its dependency array. This ensures the effect only re-runs when the `isPlaying` prop changes, preventing unnecessary calls to `video.play()` or `video.pause()` on unrelated state updates (e.g., typing in the input field). It demonstrates how to properly manage effect re-execution based on specific prop or state changes.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/synchronizing-with-effects.md#_snippet_10

LANGUAGE: js
CODE:
```
import { useState, useRef, useEffect } from 'react';

function VideoPlayer({ src, isPlaying }) {
  const ref = useRef(null);

  useEffect(() => {
    if (isPlaying) {
      console.log('Calling video.play()');
      ref.current.play();
    } else {
      console.log('Calling video.pause()');
      ref.current.pause();
    }
  }, [isPlaying]);

  return <video ref={ref} src={src} loop playsInline />;
}

export default function App() {
  const [isPlaying, setIsPlaying] = useState(false);
  const [text, setText] = useState('');
  return (
    <>
      <input value={text} onChange={e => setText(e.target.value)} />
      <button onClick={() => setIsPlaying(!isPlaying)}>
        {isPlaying ? 'Pause' : 'Play'}
      </button>
      <VideoPlayer
        isPlaying={isPlaying}
        src="https://interactive-examples.mdn.mozilla.net/media/cc0-videos/flower.mp4"
      />
    </>
  );
}
```

LANGUAGE: css
CODE:
```
input, button { display: block; margin-bottom: 20px; }
video { width: 250px; }
```

----------------------------------------

TITLE: Reversing an Array in React State (JavaScript)
DESCRIPTION: This snippet demonstrates how to reverse an array stored in React state without directly mutating the original state. It achieves this by first creating a shallow copy of the array using the spread syntax (`[...list]`), then applying the `reverse()` method to the copy, and finally updating the state with the new array. This approach ensures immutability, which is crucial for predictable state management in React.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/updating-arrays-in-state.md#_snippet_9

LANGUAGE: javascript
CODE:
```
import { useState } from 'react';

const initialList = [
  { id: 0, title: 'Big Bellies' },
  { id: 1, title: 'Lunar Landscape' },
  { id: 2, title: 'Terracotta Army' },
];

export default function List() {
  const [list, setList] = useState(initialList);

  function handleClick() {
    const nextList = [...list];
    nextList.reverse();
    setList(nextList);
  }

  return (
    <>
      <button onClick={handleClick}>
        Reverse
      </button>
      <ul>
        {list.map(artwork => (
          <li key={artwork.id}>{artwork.title}</li>
        ))}
      </ul>
    </>
  );
}
```

----------------------------------------

TITLE: MailClient Component with Stable Highlight (Solution)
DESCRIPTION: This is the corrected version of the `MailClient` component. To fix the disappearing highlight, it now stores `highlightedId` (the ID of the highlighted letter) instead of the full `highlightedLetter` object. This ensures that the highlight remains stable even when the `letters` array is updated, as the ID reference remains consistent. `handleHover` and `handleStar` now operate on `letterId`.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/choosing-the-state-structure.md#_snippet_44

LANGUAGE: javascript
CODE:
```
import { useState } from 'react';
import { initialLetters } from './data.js';
import Letter from './Letter.js';

export default function MailClient() {
  const [letters, setLetters] = useState(initialLetters);
  const [highlightedId, setHighlightedId ] = useState(null);

  function handleHover(letterId) {
    setHighlightedId(letterId);
  }

  function handleStar(starredId) {
    setLetters(letters.map(letter => {
      if (letter.id === starredId) {
        return {
          ...letter,
          isStarred: !letter.isStarred
        };
      } else {
        return letter;
      }
    }));
  }

  return (
    <>
      <h2>Inbox</h2>
      <ul>
        {letters.map(letter => (
          <Letter
            key={letter.id}
            letter={letter}
            isHighlighted={
              letter.id === highlightedId
            }
            onHover={handleHover}
            onToggleStar={handleStar}
          />
        ))}
      </ul>
    </>
  );
}
```

----------------------------------------

TITLE: Inserting Items into an Array with Spread and Slice in React
DESCRIPTION: This React component demonstrates how to immutably insert a new item into an array at a specific position (index 1 in this case). It combines the array spread syntax (`...`) with the `slice()` method to create a new array by concatenating the part before the insertion point, the new item, and the part after the insertion point. This ensures the original array is not mutated.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/updating-arrays-in-state.md#_snippet_8

LANGUAGE: javascript
CODE:
```
import { useState } from 'react';

let nextId = 3;
const initialArtists = [
  { id: 0, name: 'Marta Colvin Andrade' },
  { id: 1, name: 'Lamidi Olonade Fakeye'},
  { id: 2, name: 'Louise Nevelson'},
];

export default function List() {
  const [name, setName] = useState('');
  const [artists, setArtists] = useState(
    initialArtists
  );

  function handleClick() {
    const insertAt = 1; // Could be any index
    const nextArtists = [
      // Items before the insertion point:
      ...artists.slice(0, insertAt),
      // New item:
      { id: nextId++, name: name },
      // Items after the insertion point:
      ...artists.slice(insertAt)
    ];
    setArtists(nextArtists);
    setName('');
  }

  return (
    <>
      <h1>Inspiring sculptors:</h1>
      <input
        value={name}
        onChange={e => setName(e.target.value)}
      />
      <button onClick={handleClick}>
        Insert
      </button>
      <ul>
        {artists.map(artist => (
          <li key={artist.id}>{artist.name}</li>
        ))}
      </ul>
    </>
  );
}
```

LANGUAGE: css
CODE:
```
button { margin-left: 5px; }
```

----------------------------------------

TITLE: Example of Direct State Mutation (JavaScript)
DESCRIPTION: This line of JavaScript code explicitly shows a direct mutation of a state property (`person.firstName`). This approach is problematic in React because it bypasses React's state update mechanism, leading to potential rendering issues and making state changes difficult to track.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/updating-objects-in-state.md#_snippet_12

LANGUAGE: js
CODE:
```
person.firstName = e.target.value;
```

----------------------------------------

TITLE: Managing Time and Color State in App Component (React JS)
DESCRIPTION: This React `App` component manages the current time and a selected color using `useState` and a custom `useTime` hook. It renders a dropdown to change the `color` state and passes both `color` and formatted `time` as props to the `Clock` component. This illustrates how parent components manage state and pass dynamic data to children via props.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/passing-props-to-a-component.md#_snippet_18

LANGUAGE: js
CODE:
```
import { useState, useEffect } from 'react';
import Clock from './Clock.js';

function useTime() {
  const [time, setTime] = useState(() => new Date());
  useEffect(() => {
    const id = setInterval(() => {
      setTime(new Date());
    }, 1000);
    return () => clearInterval(id);
  }, []);
  return time;
}

export default function App() {
  const time = useTime();
  const [color, setColor] = useState('lightcoral');
  return (
    <div>
      <p>
        Pick a color:{' '}
        <select value={color} onChange={e => setColor(e.target.value)}>
          <option value="lightcoral">lightcoral</option>
          <option value="midnightblue">midnightblue</option>
          <option value="rebeccapurple">rebeccapurple</option>
        </select>
      </p>
      <Clock color={color} time={time.toLocaleTimeString()} />
    </div>
  );
}
```

----------------------------------------

TITLE: Refactoring React Component with Object Lookup for Data
DESCRIPTION: This advanced refactoring moves the drink-specific data into a `drinks` object, eliminating all conditional logic within the `Drink` component. The component now retrieves properties directly using `drinks[name]`, making it highly scalable and maintainable, especially when adding new drink types.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/conditional-rendering.md#_snippet_21

LANGUAGE: javascript
CODE:
```
const drinks = {
  tea: {
    part: 'leaf',
    caffeine: '15–70 mg/cup',
    age: '4,000+ years'
  },
  coffee: {
    part: 'bean',
    caffeine: '80–185 mg/cup',
    age: '1,000+ years'
  }
};

function Drink({ name }) {
  const info = drinks[name];
  return (
    <section>
      <h1>{name}</h1>
      <dl>
        <dt>Part of plant</dt>
        <dd>{info.part}</dd>
        <dt>Caffeine content</dt>
        <dd>{info.caffeine}</dd>
        <dt>Age</dt>
        <dd>{info.age}</dd>
      </dl>
    </section>
  );
}

export default function DrinkList() {
  return (
    <div>
      <Drink name="tea" />
      <Drink name="coffee" />
    </div>
  );
}
```

----------------------------------------

TITLE: Typing useReducer Hook with TypeScript in a Counter Application
DESCRIPTION: Provides a complete example of typing the `useReducer` Hook in a React counter application using TypeScript. It defines interfaces for state, union types for actions, and explicitly types the reducer function, demonstrating how to manage complex state transitions with full type safety.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/typescript.md#_snippet_7

LANGUAGE: tsx
CODE:
```
import {useReducer} from 'react';

interface State {
   count: number 
};

type CounterAction =
  | { type: "reset" }
  | { type: "setCount"; value: State["count"] }

const initialState: State = { count: 0 };

function stateReducer(state: State, action: CounterAction): State {
  switch (action.type) {
    case "reset":
      return initialState;
    case "setCount":
      return { ...state, count: action.value };
    default:
      throw new Error("Unknown action");
  }
}

export default function App() {
  const [state, dispatch] = useReducer(stateReducer, initialState);

  const addFive = () => dispatch({ type: "setCount", value: state.count + 5 });
  const reset = () => dispatch({ type: "reset" });

  return (
    <div>
      <h1>Welcome to my counter</h1>

      <p>Count: {state.count}</p>
      <button onClick={addFive}>Add 5</button>
      <button onClick={reset}>Reset</button>
    </div>
  );
}
```

LANGUAGE: js
CODE:
```
import AppTSX from "./App.tsx";
export default App = AppTSX;
```

----------------------------------------

TITLE: React Component for Filtering and Displaying People
DESCRIPTION: This complete React component, `List`, imports `people` data and `getImageUrl` utility, then filters the `people` array to get `chemists` and maps them into `<li>` elements. Finally, it renders these list items within an `<ul>` element, demonstrating a full data flow from import to rendering.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/rendering-lists.md#_snippet_10

LANGUAGE: JavaScript
CODE:
```
import { people } from './data.js';
import { getImageUrl } from './utils.js';

export default function List() {
  const chemists = people.filter(person =>
    person.profession === 'chemist'
  );
  const listItems = chemists.map(person =>
    <li>
      <img
        src={getImageUrl(person)}
        alt={person.name}
      />
      <p>
        <b>{person.name}:</b>
        {' ' + person.profession + ' '}
        known for {person.accomplishment}
      </p>
    </li>
  );
  return <ul>{listItems}</ul>;
}
```

----------------------------------------

TITLE: Applying 'use client' Directive in a React Component
DESCRIPTION: This snippet demonstrates how to use the `'use client'` directive at the very beginning of a JavaScript file. Placing this directive marks the module and all its imported dependencies (like `useState`, `formatDate`, and `Button` in this example) as client-side code, ensuring they are evaluated and run on the client, even when imported from a Server Component.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/rsc/use-client.md#_snippet_0

LANGUAGE: JavaScript
CODE:
```
'use client';

import { useState } from 'react';
import { formatDate } from './formatters';
import Button from './button';

export default function RichTextEditor({ timestamp, text }) {
  const date = formatDate(timestamp);
  // ...
  const editButton = <Button />;
  // ...
}
```

----------------------------------------

TITLE: Incorrect Direct Call of handleClick in JSX - React JSX
DESCRIPTION: This snippet illustrates an incorrect way to pass an event handler with an argument in React JSX. Directly calling `handleClick(0)` during rendering causes an immediate state update and an infinite re-render loop, as the function executes on render instead of on click.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/tutorial-tic-tac-toe.md#_snippet_39

LANGUAGE: js
CODE:
```
<Square value={squares[0]} onSquareClick={handleClick(0)} />
```

----------------------------------------

TITLE: Accessing Next State Value After Update in React
DESCRIPTION: This JavaScript snippet shows how to access the *next* state value immediately after calling a `set` function. By saving the computed next value (`count + 1`) into a temporary variable `nextCount` before passing it to `setCount`, you can use `nextCount` for immediate operations, while `count` still reflects its snapshot value from the current render.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useState.md#_snippet_35

LANGUAGE: JavaScript
CODE:
```
const nextCount = count + 1;
setCount(nextCount);

console.log(count);     // 0
console.log(nextCount); // 1
```

----------------------------------------

TITLE: Implementing Messenger Reducer - JavaScript
DESCRIPTION: This JavaScript snippet defines `initialState` and `messengerReducer` for a React `useReducer` hook. The reducer handles `changed_selection` to update the active contact and clear the message, and `edited_message` to update the current message text. It ensures predictable state transitions for the messenger application.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/extracting-state-logic-into-a-reducer.md#_snippet_38

LANGUAGE: JavaScript
CODE:
```
export const initialState = {
  selectedId: 0,
  message: 'Hello',
};

export function messengerReducer(state, action) {
  switch (action.type) {
    case 'changed_selection': {
      return {
        ...state,
        selectedId: action.contactId,
        message: '',
      };
    }
    case 'edited_message': {
      return {
        ...state,
        message: action.message,
      };
    }
    default: {
      throw Error('Unknown action: ' + action.type);
    }
  }
}
```

----------------------------------------

TITLE: Correct Ref Usage: Accessing Refs in Event Handlers and Effects
DESCRIPTION: This example demonstrates the correct way to interact with `ref.current` values in React components. Refs should be read or written within event handlers (e.g., `handleClick`) or `useEffect` hooks, as these are considered side effects and do not interfere with the component's pure rendering phase.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useRef.md#_snippet_8

LANGUAGE: JavaScript
CODE:
```
function MyComponent() {
  // ...
  useEffect(() => {
    // ✅ You can read or write refs in effects
    myRef.current = 123;
  });
  // ...
  function handleClick() {
    // ✅ You can read or write refs in event handlers
    doSomething(myOtherRef.current);
  }
  // ...
}
```

----------------------------------------

TITLE: Updating Parent State from Child Component in React
DESCRIPTION: This `SearchBar` component receives state updater functions as props. It uses the `onChange` event handlers on its input fields to call these functions, passing the new input values (`e.target.value` or `e.target.checked`) to update the parent component's state.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/thinking-in-react.md#_snippet_10

LANGUAGE: JavaScript
CODE:
```
function SearchBar({
  filterText,
  inStockOnly,
  onFilterTextChange,
  onInStockOnlyChange
}) {
  return (
    <form>
      <input
        type="text"
        value={filterText}
        placeholder="Search..."
        onChange={(e) => onFilterTextChange(e.target.value)}
      />
      <label>
        <input
          type="checkbox"
          checked={inStockOnly}
          onChange={(e) => onInStockOnlyChange(e.target.checked)}

```

----------------------------------------

TITLE: Comparing React useEffect Dependencies with Object.is
DESCRIPTION: This snippet provides a method to precisely compare individual dependencies from different renders using Object.is in the browser console. This helps pinpoint the exact dependency that is changing and causing an unwanted re-render loop.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useEffect.md#_snippet_54

LANGUAGE: JavaScript
CODE:
```
Object.is(temp1[0], temp2[0]); // Is the first dependency the same between the arrays?
Object.is(temp1[1], temp2[1]); // Is the second dependency the same between the arrays?
Object.is(temp1[2], temp2[2]); // ... and so on for every dependency ...
```

----------------------------------------

TITLE: Embedding JavaScript Variables as Text in React JSX
DESCRIPTION: This snippet demonstrates embedding a JavaScript variable directly into the text content of a JSX tag using curly braces. The `name` variable's value is rendered inside an `<h1>` element, allowing for dynamic text generation. This technique is useful for displaying variable data within the UI.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/javascript-in-jsx-with-curly-braces.md#_snippet_2

LANGUAGE: JavaScript
CODE:
```
export default function TodoList() {
  const name = 'Gregorio Y. Zara';
  return (
    <h1>{name}'s To Do List</h1>
  );
}
```

----------------------------------------

TITLE: Using JavaScript Variables for Dynamic Attributes in React JSX
DESCRIPTION: This example illustrates how to use JavaScript variables to dynamically set attribute values in JSX. The `src` and `alt` attributes are assigned values from `avatar` and `description` variables, respectively, by enclosing the variable names in curly braces. This allows for dynamic content rendering based on JavaScript logic.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/javascript-in-jsx-with-curly-braces.md#_snippet_1

LANGUAGE: JavaScript
CODE:
```
export default function Avatar() {
  const avatar = 'https://i.imgur.com/7vQD0fPs.jpg';
  const description = 'Gregorio Y. Zara';
  return (
    <img
      className="avatar"
      src={avatar}
      alt={description}
    />
  );
}
```

LANGUAGE: CSS
CODE:
```
.avatar { border-radius: 50%; height: 90px; }
```

----------------------------------------

TITLE: Illustrating Conflicting DOM Manipulation with React Refs and State
DESCRIPTION: This JavaScript snippet demonstrates how direct DOM manipulation using `ref.current.remove()` can conflict with React's state-driven rendering. It shows a component that toggles an element's visibility via `useState` and also allows forceful removal via a ref, leading to a crash when React attempts to re-render the removed element.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/manipulating-the-dom-with-refs.md#_snippet_18

LANGUAGE: javascript
CODE:
```
import { useState, useRef } from 'react';

export default function Counter() {
  const [show, setShow] = useState(true);
  const ref = useRef(null);

  return (
    <div>
      <button
        onClick={() => {
          setShow(!show);
        }}>
        Toggle with setState
      </button>
      <button
        onClick={() => {
          ref.current.remove();
        }}>
        Remove from the DOM
      </button>
      {show && <p ref={ref}>Hello world</p>}
    </div>
  );
}
```

----------------------------------------

TITLE: Controlling a Single Select Box with React State
DESCRIPTION: This snippet demonstrates how to create a controlled single-selection `<select>` element in React. It uses the `useState` hook to manage the `selectedFruit` state, binding it to the `value` prop of the select box. The `onChange` event handler updates the state variable, ensuring the UI reflects the selected option and enabling dynamic re-rendering.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react-dom/components/select.md#_snippet_7

LANGUAGE: js
CODE:
```
function FruitPicker() {
  const [selectedFruit, setSelectedFruit] = useState('orange'); // Declare a state variable...
  // ...
  return (
    <select
      value={selectedFruit} // ...force the select's value to match the state variable...
      onChange={e => setSelectedFruit(e.target.value)} // ... and update the state variable on any change!
    >
      <option value="apple">Apple</option>
      <option value="banana">Banana</option>
      <option value="orange">Orange</option>
    </select>
  );
}
```

----------------------------------------

TITLE: Incorrect useEffect Dependency (Missing) in React
DESCRIPTION: Shows an example of a React `useEffect` hook with a missing dependency (`roomId`). Illustrates the linter warning that occurs when a reactive value used inside the effect is not included in the dependency array, leading to potential bugs.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/removing-effect-dependencies.md#_snippet_5

LANGUAGE: javascript
CODE:
```
const serverUrl = 'https://localhost:1234';

function ChatRoom({ roomId }) {
  useEffect(() => {
    const connection = createConnection(serverUrl, roomId);
    connection.connect();
    return () => connection.disconnect();
  }, []); // 🔴 React Hook useEffect has a missing dependency: 'roomId'
  // ...
}
```

----------------------------------------

TITLE: Representing Visual Form States with useState (React)
DESCRIPTION: This code demonstrates an initial approach to representing various visual states of a form component using multiple boolean `useState` variables. It covers `isEmpty`, `isTyping`, `isSubmitting`, `isSuccess`, and `isError` to ensure all potential UI states are explicitly managed, even if this approach might be refactored later for simplicity.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/reacting-to-input-with-state.md#_snippet_5

LANGUAGE: JavaScript
CODE:
```
const [isEmpty, setIsEmpty] = useState(true);
const [isTyping, setIsTyping] = useState(false);
const [isSubmitting, setIsSubmitting] = useState(false);
const [isSuccess, setIsSuccess] = useState(false);
const [isError, setIsError] = useState(false);
```

----------------------------------------

TITLE: Displaying Pending State with useFormStatus in React
DESCRIPTION: This snippet demonstrates how to use the `useFormStatus` Hook to show a pending state during form submission. It disables the submit button and changes its text to 'Submitting...' while the form action is in progress, improving user feedback.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react-dom/components/form.md#_snippet_4

LANGUAGE: JavaScript
CODE:
```
import { useFormStatus } from "react-dom";
import { submitForm } from "./actions.js";

function Submit() {
  const { pending } = useFormStatus();
  return (
    <button type="submit" disabled={pending}>
      {pending ? "Submitting..." : "Submit"}
    </button>
  );
}

function Form({ action }) {
  return (
    <form action={action}>
      <Submit />
    </form>
  );
}

export default function App() {
  return <Form action={submitForm} />;
}
```

LANGUAGE: JavaScript
CODE:
```
export async function submitForm(query) {
    await new Promise((res) => setTimeout(res, 1000));
}
```

----------------------------------------

TITLE: Creating Server-Only API Fetch Helper (React Server Components)
DESCRIPTION: This snippet defines a server-only helper function `fetchAPI` that encapsulates the use of the secret `process.env.API_PASSWORD`. The `"server-only"` directive ensures this module can only be imported and executed on the server, preventing the secret from reaching the client.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/experimental_taintUniqueValue.md#_snippet_7

LANGUAGE: javascript
CODE:
```
import "server-only";

export function fetchAPI(url) {
  const headers = { Authorization: process.env.API_PASSWORD };
  return fetch(url, { headers });
}
```

----------------------------------------

TITLE: Using useEffectEvent to Separate Dependencies in React Effect (JS)
DESCRIPTION: This code snippet shows a React functional component `Chat` that uses `useEffectEvent` and `useEffect`. The `useEffect` is configured to run only when `roomId` changes. It calls the `onVisit` event created with `useEffectEvent`. The `onVisit` event accesses the latest `notificationCount` without `notificationCount` being a dependency of the `useEffect`, thus preventing the effect from re-running when only `notificationCount` changes.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/removing-effect-dependencies.md#_snippet_25

LANGUAGE: js
CODE:
```
function Chat({ roomId, notificationCount }) {
  const onVisit = useEffectEvent(visitedRoomId => {
    logVisit(visitedRoomId, notificationCount);
  });

  useEffect(() => {
    onVisit(roomId);
  }, [roomId]); // ✅ All dependencies declared
  // ...
}
```

----------------------------------------

TITLE: Demonstrating State Update Batching in React
DESCRIPTION: This React component illustrates how state updates are batched. Despite calling `setNumber(number + 1)` three times within a single `onClick` handler, React batches these updates, resulting in only one re-render and the `number` state being incremented by one (from its initial snapshot value) rather than three, due to the fixed `number` value within that render's scope.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/queueing-a-series-of-state-updates.md#_snippet_0

LANGUAGE: js
CODE:
```
import { useState } from 'react';

export default function Counter() {
  const [number, setNumber] = useState(0);

  return (
    <>
      <h1>{number}</h1>
      <button onClick={() => {
        setNumber(number + 1);
        setNumber(number + 1);
        setNumber(number + 1);
      }}>+3</button>
    </>
  )
}
```

----------------------------------------

TITLE: Solution: Preventing Unnecessary Re-renders with useCallback and memo in React
DESCRIPTION: This snippet shows the correct way to use `useCallback` to prevent unnecessary re-renders of a `memo`-wrapped child component. By wrapping `handleSubmit` in `useCallback`, the function instance remains stable across re-renders (as long as dependencies don't change), allowing `ShippingForm` to effectively skip re-rendering.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useCallback.md#_snippet_6

LANGUAGE: JavaScript
CODE:
```
function ProductPage({ productId, referrer, theme }) {
  // Tell React to cache your function between re-renders...
  const handleSubmit = useCallback((orderDetails) => {
    post('/product/' + productId + '/buy', {
      referrer,
      orderDetails,
    });
  }, [productId, referrer]); // ...so as long as these dependencies don't change...

  return (
    <div className={theme}>
      {/* ...ShippingForm will receive the same props and can skip re-rendering */}
      <ShippingForm onSubmit={handleSubmit} />
    </div>
  );
}
```

----------------------------------------

TITLE: Explicitly Setting Boolean Type for useState in TypeScript
DESCRIPTION: Shows how to explicitly provide a type argument to the `useState` Hook, overriding type inference. This method ensures the state variable is strictly typed, even if the initial value could be ambiguous or if a union type is desired.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/learn/typescript.md#_snippet_4

LANGUAGE: ts
CODE:
```
// Explicitly set the type to "boolean"
const [enabled, setEnabled] = useState<boolean>(false);
```

----------------------------------------

TITLE: Customizing Row Rendering with Indexed Render Props in React
DESCRIPTION: This example showcases a more advanced use of render props where additional data, such as an item's index, is passed to the rendering function. The `RowList` component passes both the `id` and `index` of each row to the `renderRow` prop, enabling the `App` component to apply conditional styling (e.g., highlighting even rows) based on the index. This demonstrates how render props can receive and utilize multiple parameters for flexible rendering.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/Children.md#_snippet_19

LANGUAGE: JavaScript
CODE:
```
import { RowList, Row } from './RowList.js';

export default function App() {
  return (
    <RowList
      rowIds={['first', 'second', 'third']}
      renderRow={(id, index) => {
        return (
          <Row isHighlighted={index % 2 === 0}>
            <p>This is the {id} item.</p>
          </Row> 
        );
      }}
    />
  );
}
```

LANGUAGE: JavaScript
CODE:
```
import { Fragment } from 'react';

export function RowList({ rowIds, renderRow }) {
  return (
    <div className="RowList">
      <h1 className="RowListHeader">
        Total rows: {rowIds.length}
      </h1>
      {rowIds.map((rowId, index) =>
        <Fragment key={rowId}>
          {renderRow(rowId, index)}
        </Fragment>
      )}
    </div>
  );
}

export function Row({ children, isHighlighted }) {
  return (
    <div className={[
      'Row',
      isHighlighted ? 'RowHighlighted' : ''
    ].join(' ')}>
      {children}
    </div>
  );
}
```

LANGUAGE: CSS
CODE:
```
.RowList {
  display: flex;
  flex-direction: column;
  border: 2px solid grey;
  padding: 5px;
}

.RowListHeader {
  padding-top: 5px;
  font-size: 25px;
  font-weight: bold;
  text-align: center;
}

.Row {
  border: 2px dashed black;
  padding: 5px;
  margin: 5px;
}

.RowHighlighted {
  background: #ffa;
}
```

----------------------------------------

TITLE: Removing a Dependency by Making Value Non-Reactive in React
DESCRIPTION: This snippet shows how to remove a dependency (`serverUrl`) from `useEffect` by moving its declaration outside the component, making it a non-reactive value. Since `serverUrl` no longer changes on re-renders, it does not need to be included in the dependency array, allowing `roomId` to be the sole reactive dependency.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/reference/react/useEffect.md#_snippet_25

LANGUAGE: JavaScript
CODE:
```
const serverUrl = 'https://localhost:1234'; 

function ChatRoom({ roomId }) {
  useEffect(() => {
    const connection = createConnection(serverUrl, roomId);
    connection.connect();
    return () => connection.disconnect();
  }, [roomId]); 
  // ...
}
```