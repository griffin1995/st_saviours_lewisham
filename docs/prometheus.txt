TITLE: PromQL: Total HTTP Requests Across All Dimensions
DESCRIPTION: Calculates the grand total of all HTTP requests seen across all applications and instances by summing `http_requests_total` without any grouping labels.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/querying/operators.md#_snippet_20

LANGUAGE: PromQL
CODE:
```
sum(http_requests_total)
```

----------------------------------------

TITLE: Example Prometheus Range Query with cURL
DESCRIPTION: Demonstrates how to use the `curl` command to perform a range query on the `/api/v1/query_range` endpoint. This example evaluates the 'up' expression over a 30-second range with a 15-second resolution.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/querying/api.md#_snippet_8

LANGUAGE: bash
CODE:
```
curl 'http://localhost:9090/api/v1/query_range?query=up&start=2015-07-01T20:10:30.781Z&end=2015-07-01T20:11:00.781Z&step=15s'
```

----------------------------------------

TITLE: Retrieve All Prometheus Targets via API
DESCRIPTION: This snippet documents the `/api/v1/targets` endpoint, which provides a comprehensive overview of Prometheus's target discovery state. It includes both active and dropped targets by default, showing `discoveredLabels` (pre-relabeling) and `labels` (post-relabeling). The `curl` command demonstrates how to access this endpoint, followed by an example JSON response structure.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/querying/api.md#_snippet_23

LANGUAGE: APIDOC
CODE:
```
GET /api/v1/targets
```

LANGUAGE: bash
CODE:
```
curl http://localhost:9090/api/v1/targets
```

LANGUAGE: json
CODE:
```
{
  "status": "success",
  "data": {
    "activeTargets": [
      {
        "discoveredLabels": {
          "__address__": "127.0.0.1:9090",
          "__metrics_path__": "/metrics",
          "__scheme__": "http",
          "job": "prometheus"
        },
        "labels": {
          "instance": "127.0.0.1:9090",
          "job": "prometheus"
        },
        "scrapePool": "prometheus",
        "scrapeUrl": "http://127.0.0.1:9090/metrics",
        "globalUrl": "http://example-prometheus:9090/metrics",
        "lastError": "",
        "lastScrape": "2017-01-17T15:07:44.723715405+01:00",
        "lastScrapeDuration": 0.050688943,
        "health": "up",
        "scrapeInterval": "1m",
        "scrapeTimeout": "10s"
      }
    ],
    "droppedTargets": [
      {
        "discoveredLabels": {
          "__address__": "127.0.0.1:9100",
          "__metrics_path__": "/metrics",
          "__scheme__": "http",
          "__scrape_interval__": "1m",
          "__scrape_timeout__": "10s",
          "job": "node"
        },
        "scrapePool": "node"
      }
    ]
  }
}
```

----------------------------------------

TITLE: Prometheus Global Configuration Schema
DESCRIPTION: Defines the structure and available parameters for the global configuration section in Prometheus. This includes settings for default scrape intervals, timeouts, rule evaluation frequency, external labels for metrics, and various limits on scraped data and labels. It also lists the generic placeholder types used across the configuration.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/configuration/configuration.md#_snippet_1

LANGUAGE: APIDOC
CODE:
```
Generic Placeholders:
  <boolean>: a boolean that can take the values `true` or `false`
  <duration>: a duration matching the regular expression `((([0-9]+)y)?(([0-9]+)w)?(([0-9]+)d)?(([0-9]+)h)?(([0-9]+)m)?(([0-9]+)s)?(([0-9]+)ms)?|0)`, e.g. `1d`, `1h30m`, `5m`, `10s`
  <filename>: a valid path in the current working directory
  <float>: a floating-point number
  <host>: a valid string consisting of a hostname or IP followed by an optional port number
  <int>: an integer value
  <labelname>: a string matching the regular expression `[a-zA-Z_][a-zA-Z0-9_]*`. Any other unsupported character in the source label should be converted to an underscore. For example, the label `app.kubernetes.io/name` should be written as `app_kubernetes_io_name`.
  <labelvalue>: a string of unicode characters
  <path>: a valid URL path
  <scheme>: a string that can take the values `http` or `https`
  <secret>: a regular string that is a secret, such as a password
  <string>: a regular string
  <size>: a size in bytes, e.g. `512MB`. A unit is required. Supported units: B, KB, MB, GB, TB, PB, EB.
  <tmpl_string>: a string which is template-expanded before usage

global:
  # How frequently to scrape targets by default.
  scrape_interval: <duration> (default = 1m)

  # How long until a scrape request times out.
  # It cannot be greater than the scrape interval.
  scrape_timeout: <duration> (default = 10s)

  # The protocols to negotiate during a scrape with the client.
  # Supported values (case sensitive): PrometheusProto, OpenMetricsText0.0.1,
  # OpenMetricsText1.0.0, PrometheusText0.0.4.
  # The default value changes to [ PrometheusProto, OpenMetricsText1.0.0, OpenMetricsText0.0.1, PrometheusText0.0.4 ]
  # when native_histogram feature flag is set.
  scrape_protocols: [<string>, ...] (default = [ OpenMetricsText1.0.0, OpenMetricsText0.0.1, PrometheusText0.0.4 ])

  # How frequently to evaluate rules.
  evaluation_interval: <duration> (default = 1m)

  # Offset the rule evaluation timestamp of this particular group by the
  # specified duration into the past to ensure the underlying metrics have
  # been received. Metric availability delays are more likely to occur when
  # Prometheus is running as a remote write target, but can also occur when
  # there's anomalies with scraping.
  rule_query_offset: <duration> (default = 0s)

  # The labels to add to any time series or alerts when communicating with
  # external systems (federation, remote storage, Alertmanager).
  # Environment variable references `${var}` or `$var` are replaced according
  # to the values of the current environment variables.
  # References to undefined variables are replaced by the empty string.
  # The `$` character can be escaped by using `$$`.
  external_labels:
    <labelname>: <labelvalue> ...

  # File to which PromQL queries are logged.
  # Reloading the configuration will reopen the file.
  query_log_file: <string>

  # File to which scrape failures are logged.
  # Reloading the configuration will reopen the file.
  scrape_failure_log_file: <string>

  # An uncompressed response body larger than this many bytes will cause the
  # scrape to fail. 0 means no limit. Example: 100MB.
  # This is an experimental feature, this behaviour could
  # change or be removed in the future.
  body_size_limit: <size> (default = 0)

  # Per-scrape limit on the number of scraped samples that will be accepted.
  # If more than this number of samples are present after metric relabeling
  # the entire scrape will be treated as failed. 0 means no limit.
  sample_limit: <int> (default = 0)

  # Limit on the number of labels that will be accepted per sample. If more
  # than this number of labels are present on any sample post metric-relabeling,
  # the entire scrape will be treated as failed. 0 means no limit.
  label_limit: <int> (default = 0)

  # Limit on the length (in bytes) of each individual label name. If any label
  # name in a scrape is longer than this number post metric-relabeling, the
  # entire scrape will be treated as failed. Note that label names are UTF-8
  # encoded, and characters can take up to 4 bytes. 0 means no limit.
  label_name_length_limit: <int> (default = 0)
```

----------------------------------------

TITLE: Select Time Series with Specific Labels
DESCRIPTION: Return all time series with the metric `http_requests_total` and the given `job` and `handler` labels.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/querying/examples.md#_snippet_1

LANGUAGE: PromQL
CODE:
```
http_requests_total{job="apiserver", handler="/api/comments"}
```

----------------------------------------

TITLE: Calculate Per-Second Rate of a Metric
DESCRIPTION: Return the per-second rate for all time series with the `http_requests_total` metric name, as measured over the last 5 minutes.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/querying/examples.md#_snippet_7

LANGUAGE: PromQL
CODE:
```
rate(http_requests_total[5m])
```

----------------------------------------

TITLE: Prometheus Disk Space Capacity Planning Formula
DESCRIPTION: This formula provides a rough estimate for the disk space required by a Prometheus server. It calculates the total needed space based on the desired data retention period, the rate of ingested samples, and the average bytes consumed per sample (typically 1-2 bytes).
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/storage.md#_snippet_2

LANGUAGE: Formula
CODE:
```
needed_disk_space = retention_time_seconds * ingested_samples_per_second * bytes_per_sample
```

----------------------------------------

TITLE: Complete Prometheus Configuration with Recording Rules
DESCRIPTION: This comprehensive prometheus.yml configuration integrates global settings, rule file inclusion, and scrape job definitions. It shows how to include prometheus.rules.yml and defines both a 'prometheus' self-scrape job and the 'node' job with production and canary target groups, demonstrating a complete setup.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/getting_started.md#_snippet_11

LANGUAGE: yaml
CODE:
```
global:
  scrape_interval:     15s # By default, scrape targets every 15 seconds.
  evaluation_interval: 15s # Evaluate rules every 15 seconds.

  # Attach these extra labels to all timeseries collected by this Prometheus instance.
  external_labels:
    monitor: 'codelab-monitor'

rule_files:
  - 'prometheus.rules.yml'

scrape_configs:
  - job_name: 'prometheus'

    # Override the global default and scrape targets from this job every 5 seconds.
    scrape_interval: 5s

    static_configs:
      - targets: ['localhost:9090']

  - job_name:       'node'

    # Override the global default and scrape targets from this job every 5 seconds.
    scrape_interval: 5s

    static_configs:
      - targets: ['localhost:8080', 'localhost:8081']
        labels:
          group: 'production'

      - targets: ['localhost:8082']
        labels:
          group: 'canary'
```

----------------------------------------

TITLE: Select All Time Series by Metric Name (PromQL)
DESCRIPTION: Demonstrates the simplest form of an instant vector selector, retrieving the most recent sample for all time series associated with a specified metric name, such as `http_requests_total`.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/querying/basics.md#_snippet_8

LANGUAGE: PromQL
CODE:
```
http_requests_total
```

----------------------------------------

TITLE: Configure Prometheus for Kubernetes Service Discovery
DESCRIPTION: This configuration enables Prometheus to retrieve and synchronize scrape targets from the Kubernetes REST API. It supports different `role` types, including `node` for discovering targets per cluster node and `service` for discovering targets per service port, each providing specific meta labels for relabeling.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/configuration/configuration.md#_snippet_101

LANGUAGE: APIDOC
CODE:
```
Kubernetes SD Configuration Roles:

Role: node
  Description: Discovers one target per cluster node. The target address defaults to the first existing address of the Kubernetes node object in the address type order of NodeInternalIP, NodeExternalIP, NodeLegacyHostIP, and NodeHostName.
  Meta Labels:
    __meta_kubernetes_node_name: The name of the node object.
    __meta_kubernetes_node_provider_id: The cloud provider's name for the node object.
    __meta_kubernetes_node_label_<labelname>: Each label from the node object, with any unsupported characters converted to an underscore.
    __meta_kubernetes_node_labelpresent_<labelname>: "true" for each label from the node object, with any unsupported characters converted to an underscore.
    __meta_kubernetes_node_annotation_<annotationname>: Each annotation from the node object.
    __meta_kubernetes_node_annotationpresent_<annotationname>: "true" for each annotation from the node object.
    __meta_kubernetes_node_address_<address_type>: The first address for each node address type, if it exists.
  Additional Notes: The 'instance' label for the node will be set to the node name as retrieved from the API server.

Role: service
  Description: Discovers a target for each service port for each service. This is generally useful for blackbox monitoring of a service. The address will be set to the Kubernetes DNS name of the service and respective service port.
  Meta Labels:
    __meta_kubernetes_namespace: The namespace of the service object.
    __meta_kubernetes_service_annotation_<annotationname>: Each annotation from the service object.
    __meta_kubernetes_service_annotationpresent_<annotationname>: "true" for each annotation of the service object.
    __meta_kubernetes_service_cluster_ip: The cluster IP address of the service. (Does not apply to services of type ExternalName)
    __meta_kubernetes_service_loadbalancer_ip: The IP address of the loadbalancer. (Applies to services of type LoadBalancer)
    __meta_kubernetes_service_external_name: The DNS name of the service. (Applies to services of type ExternalName)
    __meta_kubernetes_service_label_<labelname>: Each label from the service object, with any unsupported characters converted to an underscore.
    __meta_kubernetes_service_labelpresent_<labelname>: "true" for each label of the service object, with any unsupported characters converted to an underscore.
    __meta_kubernetes_service_name: The name of the service object.
    __meta_kubernetes_service_port_name: Name of the service port for the target.
    __meta_kubernetes_service_port_number: Number of the service port for the target.
    __meta_kubernetes_service_port_protocol: Protocol of the service port for the target.
    __meta_kubernetes_service_type: The type of the service.
```

----------------------------------------

TITLE: Start Multiple Node Exporter Sample Targets
DESCRIPTION: This snippet provides commands to extract the Node Exporter binary and then start three separate instances, each listening on a different port, to serve as example targets for Prometheus to scrape.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/getting_started.md#_snippet_7

LANGUAGE: bash
CODE:
```
tar -xzvf node_exporter-*.*.tar.gz
cd node_exporter-*.*

# Start 3 example targets in separate terminals:
./node_exporter --web.listen-address 127.0.0.1:8080
./node_exporter --web.listen-address 127.0.0.1:8081
./node_exporter --web.listen-address 127.0.0.1:8082
```

----------------------------------------

TITLE: Sum Rate by Job Label
DESCRIPTION: Assuming that the `http_requests_total` time series all have the labels `job` (fanout by job name) and `instance` (fanout by instance of the job), sum over the rate of all instances to get fewer output time series, but still preserve the `job` dimension.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/querying/examples.md#_snippet_8

LANGUAGE: PromQL
CODE:
```
sum by (job) (
  rate(http_requests_total[5m])
)
```

----------------------------------------

TITLE: Prometheus PromQL Aggregation Operators and Syntax
DESCRIPTION: Defines the available aggregation operators in Prometheus PromQL and their general syntax for aggregating elements of an instant vector. It explains the use of `without` and `by` clauses for label dimension control and the requirement of a `parameter` for specific operators.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/querying/operators.md#_snippet_9

LANGUAGE: APIDOC
CODE:
```
Aggregation Operators:
- sum: calculate sum over dimensions
- avg: calculate the arithmetic average over dimensions
- min: select minimum over dimensions
- max: select maximum over dimensions
- bottomk: smallest k elements by sample value
- topk: largest k elements by sample value
- limitk: sample k elements (experimental, requires --enable-feature=promql-experimental-functions)
- limit_ratio: sample a pseudo-random ratio r of elements (experimental, requires --enable-feature=promql-experimental-functions)
- group: all values in the resulting vector are 1
- count: count number of elements in the vector
- count_values: count number of elements with the same value
- stddev: calculate population standard deviation over dimensions
- stdvar: calculate population standard variance over dimensions
- quantile: calculate φ-quantile (0 ≤ φ ≤ 1) over dimensions

Syntax Form 1:
<aggr-op> [without|by (<label list>)] ([parameter,] <vector expression>)

Syntax Form 2:
<aggr-op>([parameter,] <vector expression>) [without|by (<label list>)]

label list: A list of unquoted labels (e.g., (label1, label2) or (label1, label2,)).
without clause: Removes listed labels from the result vector, preserving others.
by clause: Drops labels not listed, even if their values are identical.
parameter: Required for topk, bottomk, limitk, limit_ratio, quantile, and count_values. Used as k, r, φ, or additional label name.
```

----------------------------------------

TITLE: Prometheus API: Instant Vector Result Format (vector)
DESCRIPTION: Describes the JSON format for instant vector results, returned as `vector` type. The `result` property contains an array of series, each with a `metric` object and either a single `value` (numeric sample) or a single `histogram` (native histogram) for a given timestamp, but not both. Series order is not guaranteed unless explicitly sorted.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/querying/api.md#_snippet_19

LANGUAGE: json
CODE:
```
[
  {
    "metric": { "<label_name>": "<label_value>", ... },
    "value": [ <unix_time>, "<sample_value>" ],
    "histogram": [ <unix_time>, <histogram> ]
  },
  ...
]
```

----------------------------------------

TITLE: Prometheus Web Configuration File Schema for HTTPS and Authentication
DESCRIPTION: Defines the YAML structure for the Prometheus `--web.config.file` flag, enabling configuration of TLS server settings, HTTP server options, and basic authentication users. This configuration allows for secure communication and access control for the Prometheus web interface, with changes applied dynamically upon each HTTP request.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/configuration/https.md#_snippet_0

LANGUAGE: yaml
CODE:
```
tls_server_config:
  # Certificate and key files for server to use to authenticate to client.
  cert_file: <filename>
  key_file: <filename>

  # Server policy for client authentication. Maps to ClientAuth Policies.
  # For more detail on clientAuth options:
  # https://golang.org/pkg/crypto/tls/#ClientAuthType
  #
  # NOTE: If you want to enable client authentication, you need to use
  # RequireAndVerifyClientCert. Other values are insecure.
  [ client_auth_type: <string> | default = "NoClientCert" ]

  # CA certificate for client certificate authentication to the server.
  [ client_ca_file: <filename> ]

  # Verify that the client certificate has a Subject Alternate Name (SAN)
  # which is an exact match to an entry in this list, else terminate the
  # connection. SAN match can be one or multiple of the following: DNS,
  # IP, e-mail, or URI address from https://pkg.go.dev/crypto/x509#Certificate.
  [ client_allowed_sans:
    [ - <string> ] ]

  # Minimum TLS version that is acceptable.
  [ min_version: <string> | default = "TLS12" ]

  # Maximum TLS version that is acceptable.
  [ max_version: <string> | default = "TLS13" ]

  # List of supported cipher suites for TLS versions up to TLS 1.2. If empty,
  # Go default cipher suites are used. Available cipher suites are documented
  # in the go documentation:
  # https://golang.org/pkg/crypto/tls/#pkg-constants
  #
  # Note that only the cipher returned by the following function are supported:
  # https://pkg.go.dev/crypto/tls#CipherSuites
  [ cipher_suites:
    [ - <string> ] ]

  # prefer_server_cipher_suites controls whether the server selects the
  # client's most preferred ciphersuite, or the server's most preferred
  # ciphersuite. If true then the server's preference, as expressed in
  # the order of elements in cipher_suites, is used.
  [ prefer_server_cipher_suites: <boolean> | default = true ]

  # Elliptic curves that will be used in an ECDHE handshake, in preference
  # order. Available curves are documented in the go documentation:
  # https://golang.org/pkg/crypto/tls/#CurveID
  [ curve_preferences:
    [ - <string> ] ]

http_server_config:
  # Enable HTTP/2 support. Note that HTTP/2 is only supported with TLS.
  # This can not be changed on the fly.
  [ http2: <boolean> | default = true ]
  # List of headers that can be added to HTTP responses.
  [ headers:
    # Set the Content-Security-Policy header to HTTP responses.
    # Unset if blank.
    [ Content-Security-Policy: <string> ]
    # Set the X-Frame-Options header to HTTP responses.
    # Unset if blank. Accepted values are deny and sameorigin.
    # https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options
    [ X-Frame-Options: <string> ]
    # Set the X-Content-Type-Options header to HTTP responses.
    # Unset if blank. Accepted value is nosniff.
    # https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Content-Type-Options
    [ X-Content-Type-Options: <string> ]
    # Set the X-XSS-Protection header to all responses.
    # Unset if blank.
    # https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-XSS-Protection
    [ X-XSS-Protection: <string> ]
    # Set the Strict-Transport-Security header to HTTP responses.
    # Unset if blank.
    # Please make sure that you use this with care as this header might force
    # browsers to load Prometheus and the other applications hosted on the same
    # domain and subdomains over HTTPS.
    # https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Strict-Transport-Security
    [ Strict-Transport-Security: <string> ] ]

# Usernames and hashed passwords that have full access to the web
# server via basic authentication. If empty, no basic authentication is
# required. Passwords are hashed with bcrypt.
basic_auth_users:
  [ <string>: <secret> ... ]
```

----------------------------------------

TITLE: Calculate Unused Memory per Instance
DESCRIPTION: If two different metrics have the same dimensional labels, binary operators can be applied to them. This expression returns the unused memory in MiB for every instance (on a fictional cluster scheduler exposing these metrics).
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/querying/examples.md#_snippet_9

LANGUAGE: PromQL
CODE:
```
(instance_memory_limit_bytes - instance_memory_usage_bytes) / 1024 / 1024
```

----------------------------------------

TITLE: Prometheus Query Language: Vector Matching Keywords (`on`, `ignoring`)
DESCRIPTION: Details the `on` and `ignoring` keywords used in PromQL for vector matching. These keywords allow for flexible matching between series that may have different label sets, by specifying which labels to consider or ignore during the matching process.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/querying/operators.md#_snippet_5

LANGUAGE: APIDOC
CODE:
```
Vector Matching Keywords:
  - `on(<label_list>)`
  - `ignoring(<label_list>)`

Purpose:
  Allow matching between series with different label sets.
  Label lists provided determine how vectors are combined.
```

----------------------------------------

TITLE: Filter Time Series by Exact Label Matchers (PromQL)
DESCRIPTION: Illustrates how to refine an instant vector selection by appending a comma-separated list of exact label matchers in curly braces, selecting time series that precisely match specified label-value pairs.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/querying/basics.md#_snippet_9

LANGUAGE: PromQL
CODE:
```
http_requests_total{job="prometheus",group="canary"}
```

----------------------------------------

TITLE: Combine Multiple Matchers for a Single Label (PromQL)
DESCRIPTION: Illustrates how to apply multiple label matchers to the same label name. All matchers must pass for a time series to be included in the result, allowing for complex filtering logic.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/querying/basics.md#_snippet_12

LANGUAGE: PromQL
CODE:
```
http_requests_total{replica!="rep-a",replica=~"rep.*"}
```

----------------------------------------

TITLE: Prometheus Alerting Rule Templating Examples
DESCRIPTION: These examples demonstrate how to use templating within Prometheus alerting rule labels and annotations. It shows how to dynamically insert alert instance labels (`$labels`) and the evaluated expression value (`$value`) into alert summaries and descriptions for more informative notifications.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/configuration/alerting_rules.md#_snippet_1

LANGUAGE: Prometheus Template
CODE:
```
# To insert a firing element's label values:
{{ $labels.<labelname> }}
# To insert the numeric expression value of the firing element:
{{ $value }}
```

LANGUAGE: yaml
CODE:
```
groups:
- name: example
  rules:

  # Alert for any instance that is unreachable for >5 minutes.
  - alert: InstanceDown
    expr: up == 0
    for: 5m
    labels:
      severity: page
    annotations:
      summary: "Instance {{ $labels.instance }} down"
      description: "{{ $labels.instance }} of job {{ $labels.job }} has been down for more than 5 minutes."

  # Alert for any instance that has a median request latency >1s.
  - alert: APIHighRequestLatency
    expr: api_http_request_latencies_second{quantile="0.5"} > 1
    for: 10m
    annotations:
      summary: "High request latency on {{ $labels.instance }}"
      description: "{{ $labels.instance }} has a median request latency above 1s (current value: {{ $value }}s)"
```

----------------------------------------

TITLE: Prometheus Relabel Configuration Parameters
DESCRIPTION: Defines the configurable parameters for a Prometheus relabeling rule. These parameters control how labels are transformed during the relabeling process, specifying source labels, separator, target label, regular expression, modulus, replacement value, and the action to perform.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/configuration/configuration.md#_snippet_127

LANGUAGE: YAML
CODE:
```
# The source_labels tells the rule what labels to fetch from the series. Any
# labels which do not exist get a blank value ("").  Their content is concatenated
# using the configured separator and matched against the configured regular expression
# for the replace, keep, and drop actions.
[ source_labels: '[' <labelname> [, ...] ']' ]

# Separator placed between concatenated source label values.
[ separator: <string> | default = ; ]

# Label to which the resulting value is written in a replace action.
# It is mandatory for replace actions. Regex capture groups are available.
[ target_label: <labelname> ]

# Regular expression against which the extracted value is matched.
[ regex: <regex> | default = (.*) ]

# Modulus to take of the hash of the source label values.
[ modulus: <int> ]

# Replacement value against which a regex replace is performed if the
# regular expression matches. Regex capture groups are available.
[ replacement: <string> | default = $1 ]

# Action to perform based on regex matching.
[ action: <relabel_action> | default = replace ]
```

----------------------------------------

TITLE: Prometheus Configuration: Scrape Configurations
DESCRIPTION: A direct list of scrape configurations to be used by Prometheus.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/configuration/configuration.md#_snippet_11

LANGUAGE: APIDOC
CODE:
```
scrape_configs:
  - <scrape_config> ...
```

----------------------------------------

TITLE: Calculate Instant Rate of Increase with irate() in PromQL
DESCRIPTION: `irate()` computes the per-second instant rate of increase for time series, based on the last two data points. It automatically adjusts for counter resets and is suitable for volatile, fast-moving counters. For alerts or slow-moving counters, `rate()` is recommended instead.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/querying/functions.md#_snippet_36

LANGUAGE: PromQL
CODE:
```
irate(http_requests_total{job="api-server"}[5m])
```

----------------------------------------

TITLE: Run Prometheus with persistent data storage using Docker
DESCRIPTION: These commands first create a named Docker volume (prometheus-data) and then start a Prometheus container. The container is configured to use both a custom prometheus.yml via bind-mount and the persistent volume for storing metrics data in /prometheus inside the container. This ensures data is preserved across container restarts.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/installation.md#_snippet_3

LANGUAGE: bash
CODE:
```
# Create persistent volume for your data
docker volume create prometheus-data
# Start Prometheus container
docker run \
    -p 9090:9090 \
    -v /path/to/prometheus.yml:/etc/prometheus/prometheus.yml \
    -v prometheus-data:/prometheus \
    prom/prometheus
```

----------------------------------------

TITLE: Configure Prometheus Scrape Targets with Labels
DESCRIPTION: This configuration snippet for prometheus.yml defines a 'node' job to scrape multiple target endpoints. It demonstrates how to apply different labels, such as 'production' and 'canary', to distinct groups of targets within the same job, allowing for granular target identification.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/getting_started.md#_snippet_8

LANGUAGE: yaml
CODE:
```
scrape_configs:
  - job_name:       'node'

    # Override the global default and scrape targets from this job every 5 seconds.
    scrape_interval: 5s

    static_configs:
      - targets: ['localhost:8080', 'localhost:8081']
        labels:
          group: 'production'

      - targets: ['localhost:8082']
        labels:
          group: 'canary'
```

----------------------------------------

TITLE: Select All Time Series for a Metric
DESCRIPTION: Return all time series with the metric `http_requests_total`.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/querying/examples.md#_snippet_0

LANGUAGE: PromQL
CODE:
```
http_requests_total
```

----------------------------------------

TITLE: Prometheus Application Configuration Flags
DESCRIPTION: Defines the command-line flags used to configure the Prometheus server's behavior, including network settings, storage options, and feature toggles. Each flag acts as a configuration parameter for the application.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/command-line/prometheus.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
Flag: -h, --help
  Description: Show context-sensitive help (also try --help-long and --help-man).
  Default: N/A
```

LANGUAGE: APIDOC
CODE:
```
Flag: --version
  Description: Show application version.
  Default: N/A
```

LANGUAGE: APIDOC
CODE:
```
Flag: --config.file
  Description: Prometheus configuration file path.
  Default: prometheus.yml
```

LANGUAGE: APIDOC
CODE:
```
Flag: --config.auto-reload-interval
  Description: Specifies the interval for checking and automatically reloading the Prometheus configuration file upon detecting changes.
  Default: 30s
```

LANGUAGE: APIDOC
CODE:
```
Flag: --web.listen-address
  Description: Address to listen on for UI, API, and telemetry. Can be repeated.
  Default: 0.0.0.0:9090
```

LANGUAGE: APIDOC
CODE:
```
Flag: --auto-gomaxprocs
  Description: Automatically set GOMAXPROCS to match Linux container CPU quota.
  Default: true
```

LANGUAGE: APIDOC
CODE:
```
Flag: --auto-gomemlimit
  Description: Automatically set GOMEMLIMIT to match Linux container or system memory limit.
  Default: true
```

LANGUAGE: APIDOC
CODE:
```
Flag: --auto-gomemlimit.ratio
  Description: The ratio of reserved GOMEMLIMIT memory to the detected maximum container or system memory.
  Default: 0.9
```

LANGUAGE: APIDOC
CODE:
```
Flag: --web.config.file
  Description: [EXPERIMENTAL] Path to configuration file that can enable TLS or authentication.
  Default: N/A
```

LANGUAGE: APIDOC
CODE:
```
Flag: --web.read-timeout
  Description: Maximum duration before timing out read of the request, and closing idle connections.
  Default: 5m
```

LANGUAGE: APIDOC
CODE:
```
Flag: --web.max-connections
  Description: Maximum number of simultaneous connections across all listeners.
  Default: 512
```

LANGUAGE: APIDOC
CODE:
```
Flag: --web.max-notifications-subscribers
  Description: Limits the maximum number of subscribers that can concurrently receive live notifications. If the limit is reached, new subscription requests will be denied until existing connections close.
  Default: 16
```

LANGUAGE: APIDOC
CODE:
```
Flag: --web.external-url
  Description: The URL under which Prometheus is externally reachable (for example, if Prometheus is served via a reverse proxy). Used for generating relative and absolute links back to Prometheus itself. If the URL has a path portion, it will be used to prefix all HTTP endpoints served by Prometheus. If omitted, relevant URL components will be derived automatically.
  Default: N/A
```

LANGUAGE: APIDOC
CODE:
```
Flag: --web.route-prefix
  Description: Prefix for the internal routes of web endpoints. Defaults to path of --web.external-url.
  Default: N/A
```

LANGUAGE: APIDOC
CODE:
```
Flag: --web.user-assets
  Description: Path to static asset directory, available at /user.
  Default: N/A
```

LANGUAGE: APIDOC
CODE:
```
Flag: --web.enable-lifecycle
  Description: Enable shutdown and reload via HTTP request.
  Default: false
```

LANGUAGE: APIDOC
CODE:
```
Flag: --web.enable-admin-api
  Description: Enable API endpoints for admin control actions.
  Default: false
```

LANGUAGE: APIDOC
CODE:
```
Flag: --web.enable-remote-write-receiver
  Description: Enable API endpoint accepting remote write requests.
  Default: false
```

LANGUAGE: APIDOC
CODE:
```
Flag: --web.remote-write-receiver.accepted-protobuf-messages
  Description: List of the remote write protobuf messages to accept when receiving the remote writes. Supported values: prometheus.WriteRequest, io.prometheus.write.v2.Request.
  Default: prometheus.WriteRequest
```

LANGUAGE: APIDOC
CODE:
```
Flag: --web.enable-otlp-receiver
  Description: Enable API endpoint accepting OTLP write requests.
  Default: false
```

LANGUAGE: APIDOC
CODE:
```
Flag: --web.console.templates
  Description: Path to the console template directory, available at /consoles.
  Default: consoles
```

LANGUAGE: APIDOC
CODE:
```
Flag: --web.console.libraries
  Description: Path to the console library directory.
  Default: console_libraries
```

LANGUAGE: APIDOC
CODE:
```
Flag: --web.page-title
  Description: Document title of Prometheus instance.
  Default: Prometheus Time Series Collection and Processing Server
```

LANGUAGE: APIDOC
CODE:
```
Flag: --web.cors.origin
  Description: Regex for CORS origin. It is fully anchored. Example: 'https?://(domain1\|domain2)\\.com'.
  Default: .*
```

LANGUAGE: APIDOC
CODE:
```
Flag: --storage.tsdb.path
  Description: Base path for metrics storage. Use with server mode only.
  Default: data/
```

LANGUAGE: APIDOC
CODE:
```
Flag: --storage.tsdb.retention.time
  Description: How long to retain samples in storage. If neither this flag nor "storage.tsdb.retention.size" is set, the retention time defaults to 15d. Units Supported: y, w, d, h, m, s, ms. Use with server mode only.
  Default: N/A
```

LANGUAGE: APIDOC
CODE:
```
Flag: --storage.tsdb.retention.size
  Description: Maximum number of bytes that can be stored for blocks. A unit is required, supported units: B, KB, MB, GB, TB, PB, EB. Ex: "512MB". Based on powers-of-2, so 1KB is 1024B. Use with server mode only.
  Default: N/A
```

LANGUAGE: APIDOC
CODE:
```
Flag: --storage.tsdb.no-lockfile
  Description: Do not create lockfile in data directory. Use with server mode only.
  Default: false
```

----------------------------------------

TITLE: Prometheus Alertmanager Configuration YAML Reference
DESCRIPTION: Detailed YAML configuration for Prometheus's Alertmanager integration, including timeout, API version, path prefix, scheme, AWS SigV4 authentication, generic HTTP client settings, and a comprehensive list of supported service discovery configurations for various cloud providers and systems.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/configuration/configuration.md#_snippet_129

LANGUAGE: YAML
CODE:
```
# Per-target Alertmanager timeout when pushing alerts.
[ timeout: <duration> | default = 10s ]

# The api version of Alertmanager.
[ api_version: <string> | default = v2 ]

# Prefix for the HTTP path alerts are pushed to.
[ path_prefix: <path> | default = / ]

# Configures the protocol scheme used for requests.
[ scheme: <scheme> | default = http ]

# Optionally configures AWS's Signature Verification 4 signing process to sign requests.
# Cannot be set at the same time as basic_auth, authorization, oauth2, azuread or google_iam.
# To use the default credentials from the AWS SDK, use `sigv4: {}`.
sigv4:
  # The AWS region. If blank, the region from the default credentials chain
  # is used.
  [ region: <string> ]

  # The AWS API keys. If blank, the environment variables `AWS_ACCESS_KEY_ID`
  # and `AWS_SECRET_ACCESS_KEY` are used.
  [ access_key: <string> ]
  [ secret_key: <secret> ]

  # Named AWS profile used to authenticate.
  [ profile: <string> ]

  # AWS Role ARN, an alternative to using AWS API keys.
  [ role_arn: <string> ]

# HTTP client settings, including authentication methods (such as basic auth and
# authorization), proxy configurations, TLS options, custom HTTP headers, etc.
[ <http_config> ]

# List of Azure service discovery configurations.
azure_sd_configs:
  [ - <azure_sd_config> ... ]

# List of Consul service discovery configurations.
consul_sd_configs:
  [ - <consul_sd_config> ... ]

# List of DNS service discovery configurations.
dns_sd_configs:
  [ - <dns_sd_config> ... ]

# List of EC2 service discovery configurations.
ec2_sd_configs:
  [ - <ec2_sd_config> ... ]

# List of Eureka service discovery configurations.
eureka_sd_configs:
  [ - <eureka_sd_config> ... ]

# List of file service discovery configurations.
file_sd_configs:
  [ - <file_sd_config> ... ]

# List of DigitalOcean service discovery configurations.
digitalocean_sd_configs:
  [ - <digitalocean_sd_config> ... ]

# List of Docker service discovery configurations.
docker_sd_configs:
  [ - <docker_sd_config> ... ]

# List of Docker Swarm service discovery configurations.
dockerswarm_sd_configs:
  [ - <dockerswarm_sd_config> ... ]

# List of GCE service discovery configurations.
gce_sd_configs:
  [ - <gce_sd_config> ... ]

# List of Hetzner service discovery configurations.
hetzner_sd_configs:
  [ - <hetzner_sd_config> ... ]

# List of HTTP service discovery configurations.
http_sd_configs:
  [ - <http_sd_config> ... ]

 # List of IONOS service discovery configurations.
ionos_sd_configs:
  [ - <ionos_sd_config> ... ]

# List of Kubernetes service discovery configurations.
kubernetes_sd_configs:
  [ - <kubernetes_sd_config> ... ]

# List of Lightsail service discovery configurations.
lightsail_sd_configs:
  [ - <lightsail_sd_config> ... ]

# List of Linode service discovery configurations.
linode_sd_configs:
  [ - <linode_sd_config> ... ]

# List of Marathon service discovery configurations.
marathon_sd_configs:
  [ - <marathon_sd_config> ... ]

# List of AirBnB's Nerve service discovery configurations.
nerve_sd_configs:
  [ - <nerve_sd_config> ... ]

# List of Nomad service discovery configurations.
nomad_sd_configs:
  [ - <nomad_sd_config> ... ]

# List of OpenStack service discovery configurations.
openstack_sd_configs:
  [ - <openstack_sd_config> ... ]

# List of OVHcloud service discovery configurations.
ovhcloud_sd_configs:
  [ - <ovhcloud_sd_config> ... ]

# List of PuppetDB service discovery configurations.
puppetdb_sd_configs:
  [ - <puppetdb_sd_config> ... ]

# List of Scaleway service discovery configurations.
scaleway_sd_configs:
  [ - <scaleway_sd_config> ... ]

# List of Zookeeper Serverset service discovery configurations.
serverset_sd_configs:
  [ - <serverset_sd_config> ... ]

# List of Triton service discovery configurations.
triton_sd_configs:
  [ - <triton_sd_config> ... ]

# List of Uyuni service discovery configurations.
uyuni_sd_configs:
  [ - <uyuni_sd_config> ... ]

# List of Vultr service discovery configurations.
vultr_sd_configs:
  [ - <vultr_sd_config> ... ]
```

----------------------------------------

TITLE: Prometheus HTTP Request Configuration (`http_config`)
DESCRIPTION: Specifies the structure for configuring HTTP requests in Prometheus. This includes various authentication methods (basic, bearer, OAuth2), control over HTTP 3xx redirects, HTTP/2 enablement, integration with TLS settings, proxy configurations (URL, no_proxy, environment variables, CONNECT headers), and the ability to define custom HTTP headers.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/configuration/configuration.md#_snippet_66

LANGUAGE: YAML
CODE:
```
basic_auth:
  [ username: <string> ]
  [ username_file: <string> ]
  [ password: <secret> ]
  [ password_file: <string> ]

authorization:
  [ type: <string> | default: Bearer ]
  [ credentials: <secret> ]
  [ credentials_file: <filename> ]

oauth2:
  [ <oauth2> ]

[ follow_redirects: <boolean> | default = true ]

[ enable_http2: <boolean> | default: true ]

tls_config:
  [ <tls_config> ]

[ proxy_url: <string> ]
[ no_proxy: <string> ]
[ proxy_from_environment: <boolean> | default: false ]
[ proxy_connect_header:
  [ <string>: [<secret>, ...] ] ]

http_headers:
  [ <string>:
    [ values: [<string>, ...] ]
    [ secrets: [<secret>, ...] ]
    [ files: [<string>, ...] ] ]
```

----------------------------------------

TITLE: Prometheus Query Language: Vector Matching Overview
DESCRIPTION: Introduces the concept of vector matching in PromQL, which governs how operations between vectors find corresponding elements. It highlights the two primary types of matching behavior: one-to-one and many-to-one/one-to-many.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/querying/operators.md#_snippet_4

LANGUAGE: APIDOC
CODE:
```
Vector Matching:
  Operations between vectors attempt to find a matching element in the right-hand side vector for each entry in the left-hand side.

Types of Matching Behavior:
  - One-to-one
  - Many-to-one/One-to-many
```

----------------------------------------

TITLE: Define Prometheus Scrape Job Configuration
DESCRIPTION: Specifies parameters for a Prometheus scrape job, including frequency, timeout, supported protocols, and metric path. It details how targets are scraped and how labels are handled.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/configuration/configuration.md#_snippet_15

LANGUAGE: YAML
CODE:
```
# The job name assigned to scraped metrics by default.
job_name: <job_name>

# How frequently to scrape targets from this job.
[ scrape_interval: <duration> | default = <global_config.scrape_interval> ]

# Per-scrape timeout when scraping this job.
# It cannot be greater than the scrape interval.
[ scrape_timeout: <duration> | default = <global_config.scrape_timeout> ]

# The protocols to negotiate during a scrape with the client.
# Supported values (case sensitive): PrometheusProto, OpenMetricsText0.0.1,
# OpenMetricsText1.0.0, PrometheusText0.0.4, PrometheusText1.0.0.
[ scrape_protocols: [<string>, ...] | default = <global_config.scrape_protocols> ]

# Fallback protocol to use if a scrape returns blank, unparseable, or otherwise
# invalid Content-Type.
# Supported values (case sensitive): PrometheusProto, OpenMetricsText0.0.1,
# OpenMetricsText1.0.0, PrometheusText0.0.4, PrometheusText1.0.0.
[ fallback_scrape_protocol: <string> ]

# Whether to scrape a classic histogram, even if it is also exposed as a native
# histogram (has no effect without --enable-feature=native-histograms).
[ always_scrape_classic_histograms: <boolean> |
default = <global.always_scrape_classic_hisotgrams> ]

# The HTTP resource path on which to fetch metrics from targets.
[ metrics_path: <path> | default = /metrics ]

# honor_labels controls how Prometheus handles conflicts between labels that are
```

----------------------------------------

TITLE: Prometheus Static Target Configuration
DESCRIPTION: Defines a static list of scrape targets and a common set of labels to apply to all metrics scraped from these targets. This is a straightforward method for specifying fixed targets in Prometheus.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/configuration/configuration.md#_snippet_126

LANGUAGE: yaml
CODE:
```
# The targets specified by the static config.
targets:
  [ - '<host>' ]

# Labels assigned to all metrics scraped from the targets.
labels:
  [ <labelname>: <labelvalue> ... ]
```

----------------------------------------

TITLE: Calculate 90th Percentile of Request Durations
DESCRIPTION: This snippet demonstrates how to calculate the 90th percentile of `http_request_duration_seconds` over the last 10 minutes using `histogram_quantile()`. It shows examples for both classic and native histograms.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/querying/functions.md#_snippet_21

LANGUAGE: PromQL
CODE:
```
histogram_quantile(0.9, rate(http_request_duration_seconds_bucket[10m]))
```

LANGUAGE: PromQL
CODE:
```
histogram_quantile(0.9, rate(http_request_duration_seconds[10m]))
```

----------------------------------------

TITLE: Download and Extract Prometheus Binary
DESCRIPTION: This snippet provides commands to download and extract the Prometheus binary archive for your platform, preparing it for configuration and execution.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/getting_started.md#_snippet_0

LANGUAGE: bash
CODE:
```
tar xvfz prometheus-*.tar.gz
cd prometheus-*
```

----------------------------------------

TITLE: Prometheus Query Language: Arithmetic Binary Operators
DESCRIPTION: Describes the behavior of arithmetic binary operators (+, -, *, /, %, ^) in Prometheus's query language when applied to scalar, vector, and histogram samples, including specific rules for vector matching and histogram interactions.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/querying/operators.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
Prometheus Arithmetic Binary Operators:
  Operators: +, -, *, /, %, ^
  Behavior:
    Scalar/Scalar:
      - Result: Scalar
      - Description: Standard IEEE 754 floating point arithmetic.
    Vector/Scalar:
      - Description: Operator applied to each sample value in the vector.
      - Histogram Samples:
        - *: All bucket populations, count, sum multiplied by scalar.
        - /: Histogram on LHS, scalar on RHS. All bucket populations, count, sum divided by scalar. Division by zero results in Inf/NaN histogram.
        - Other operators (scalar LHS, histogram RHS): Element removed from result.
    Vector/Vector:
      - Description: Operator applied to matching elements based on vector matching. Metric name dropped.
      - Float/Float: Standard arithmetic.
      - Float/Histogram: Same logic as Vector/Scalar (*, / valid, others remove element).
      - Histogram/Histogram:
        - +: Adds matching bucket populations, count, sum.
        - -: Subtracts matching bucket populations, count, sum.
        - Other operations: Element removed from result.
```

----------------------------------------

TITLE: Prometheus Kubernetes EndpointSlice Discovery Role Meta-Labels
DESCRIPTION: Details the `endpointslice` role in Prometheus Kubernetes discovery, which discovers targets from existing EndpointSlices. It explains how it identifies endpoint addresses and additional container ports, requires `discovery.k8s.io/v1` API, and lists all available meta-labels for discovered targets, including those from underlying pods and services.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/configuration/configuration.md#_snippet_104

LANGUAGE: APIDOC
CODE:
```
Available meta labels:
* __meta_kubernetes_namespace: The namespace of the endpoints object.
* __meta_kubernetes_endpointslice_name: The name of endpointslice object.
* __meta_kubernetes_endpointslice_label_<labelname>: Each label from the endpointslice object, with any unsupported characters converted to an underscore.
* __meta_kubernetes_endpointslice_labelpresent_<labelname>: `true` for each label from the endpointslice object, with any unsupported characters converted to an underscore.
* __meta_kubernetes_endpointslice_annotation_<annotationname>: Each annotation from the endpointslice object.
* __meta_kubernetes_endpointslice_annotationpresent_<annotationname>: `true` for each annotation from the endpointslice object.
* For all targets discovered directly from the endpointslice list (those not additionally inferred
  from underlying pods), the following labels are attached:
  * __meta_kubernetes_endpointslice_address_target_kind: Kind of the referenced object.
  * __meta_kubernetes_endpointslice_address_target_name: Name of referenced object.
  * __meta_kubernetes_endpointslice_address_type: The ip protocol family of the address of the target.
  * __meta_kubernetes_endpointslice_endpoint_conditions_ready: Set to `true` or `false` for the referenced endpoint's ready state.
  * __meta_kubernetes_endpointslice_endpoint_conditions_serving: Set to `true` or `false` for the referenced endpoint's serving state.
  * __meta_kubernetes_endpointslice_endpoint_conditions_terminating: Set to `true` or `false` for the referenced endpoint's terminating state.
  * __meta_kubernetes_endpointslice_endpoint_topology_kubernetes_io_hostname: Name of the node hosting the referenced endpoint.
  * __meta_kubernetes_endpointslice_endpoint_topology_present_kubernetes_io_hostname: Flag that shows if the referenced object has a kubernetes.io/hostname annotation.
  * __meta_kubernetes_endpointslice_endpoint_hostname: Hostname of the referenced endpoint.
  * __meta_kubernetes_endpointslice_endpoint_node_name: Name of the Node hosting the referenced endpoint.
  * __meta_kubernetes_endpointslice_endpoint_zone: Zone the referenced endpoint exists in.
  * __meta_kubernetes_endpointslice_port: Port of the referenced endpoint.
  * __meta_kubernetes_endpointslice_port_name: Named port of the referenced endpoint.
  * __meta_kubernetes_endpointslice_port_protocol: Protocol of the referenced endpoint.
* If the endpoints belong to a service, all labels of the `role: service` discovery are attached.
* For all targets backed by a pod, all labels of the `role: pod` discovery are attached.
```

----------------------------------------

TITLE: Prometheus Local Storage Data Directory Structure
DESCRIPTION: This snippet illustrates the typical on-disk layout of a Prometheus server's data directory. It shows the organization of two-hour data blocks (e.g., `01BKGTZQ1SYQJTR4PB43C8PD98`), each containing `chunks`, `tombstones`, `index`, and `meta.json` files. It also depicts the `chunks_head` for the current in-memory block and the `wal` directory containing write-ahead log segments.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/storage.md#_snippet_0

LANGUAGE: plaintext
CODE:
```
./data
├── 01BKGV7JBM69T2G1BGBGM6KB12
│   └── meta.json
├── 01BKGTZQ1SYQJTR4PB43C8PD98
│   ├── chunks
│   │   └── 000001
│   ├── tombstones
│   ├── index
│   └── meta.json
├── 01BKGTZQ1HHWHV8FBJXW1Y3W0K
│   └── meta.json
├── 01BKGV7JC0RY8A6MACW02A2PJD
│   ├── chunks
│   │   └── 000001
│   ├── tombstones
│   ├── index
│   └── meta.json
├── chunks_head
│   └── 000001
└── wal
    ├── 000000002
    └── checkpoint.00000001
        └── 00000000
```

----------------------------------------

TITLE: Prometheus Target Monitoring Metrics
DESCRIPTION: A comprehensive list of Prometheus metrics used to observe the health and performance of target scraping and synchronization. These metrics include counts for active targets, failed scrapes, total scrape pools, sample processing errors (e.g., cache flushes, body size limits, native histogram bucket limits, sample limits, exemplar out-of-order, duplicate timestamps, out-of-bounds, out-of-order samples), and detailed synchronization durations with quantiles for different scrape jobs like alertmanager, blackbox, caddy, cadvisor, grafana, node, and prometheus itself.
SOURCE: https://github.com/prometheus/prometheus/blob/main/model/textparse/testdata/alltypes.237mfs.nometa.prom.txt#_snippet_77

LANGUAGE: Prometheus Metrics
CODE:
```
prometheus_target_scrape_pool_targets{scrape_job="random"} 4
prometheus_target_scrape_pools_failed_total 0
prometheus_target_scrape_pools_total 8
prometheus_target_scrapes_cache_flush_forced_total 0
prometheus_target_scrapes_exceeded_body_size_limit_total 0
prometheus_target_scrapes_exceeded_native_histogram_bucket_limit_total 0
prometheus_target_scrapes_exceeded_sample_limit_total 0
prometheus_target_scrapes_exemplar_out_of_order_total 0
prometheus_target_scrapes_sample_duplicate_timestamp_total 0
prometheus_target_scrapes_sample_out_of_bounds_total 0
prometheus_target_scrapes_sample_out_of_order_total 455
prometheus_target_sync_failed_total{scrape_job="alertmanager"} 0
prometheus_target_sync_failed_total{scrape_job="blackbox"} 0
prometheus_target_sync_failed_total{scrape_job="caddy"} 0
prometheus_target_sync_failed_total{scrape_job="cadvisor"} 0
prometheus_target_sync_failed_total{scrape_job="grafana"} 0
prometheus_target_sync_failed_total{scrape_job="node"} 0
prometheus_target_sync_failed_total{scrape_job="prometheus"} 0
prometheus_target_sync_failed_total{scrape_job="random"} 0
prometheus_target_sync_length_seconds{scrape_job="alertmanager",quantile="0.01"} 2.0522e-05
prometheus_target_sync_length_seconds{scrape_job="alertmanager",quantile="0.05"} 2.0522e-05
prometheus_target_sync_length_seconds{scrape_job="alertmanager",quantile="0.5"} 2.0522e-05
prometheus_target_sync_length_seconds{scrape_job="alertmanager",quantile="0.9"} 0.000141485
prometheus_target_sync_length_seconds{scrape_job="alertmanager",quantile="0.99"} 0.000141485
prometheus_target_sync_length_seconds_sum{scrape_job="alertmanager"} 0.13103036
prometheus_target_sync_length_seconds_count{scrape_job="alertmanager"} 2953
prometheus_target_sync_length_seconds{scrape_job="blackbox",quantile="0.01"} 3.9252e-05
prometheus_target_sync_length_seconds{scrape_job="blackbox",quantile="0.05"} 3.9252e-05
prometheus_target_sync_length_seconds{scrape_job="blackbox",quantile="0.5"} 3.9252e-05
prometheus_target_sync_length_seconds{scrape_job="blackbox",quantile="0.9"} 6.2134e-05
prometheus_target_sync_length_seconds{scrape_job="blackbox",quantile="0.99"} 6.2134e-05
prometheus_target_sync_length_seconds_sum{scrape_job="blackbox"} 0.6044201539999996
prometheus_target_sync_length_seconds_count{scrape_job="blackbox"} 2953
prometheus_target_sync_length_seconds{scrape_job="caddy",quantile="0.01"} 1.3759e-05
prometheus_target_sync_length_seconds{scrape_job="caddy",quantile="0.05"} 1.3759e-05
prometheus_target_sync_length_seconds{scrape_job="caddy",quantile="0.5"} 1.3759e-05
prometheus_target_sync_length_seconds{scrape_job="caddy",quantile="0.9"} 7.8256e-05
prometheus_target_sync_length_seconds{scrape_job="caddy",quantile="0.99"} 7.8256e-05
prometheus_target_sync_length_seconds_sum{scrape_job="caddy"} 0.10369844599999971
prometheus_target_sync_length_seconds_count{scrape_job="caddy"} 2953
prometheus_target_sync_length_seconds{scrape_job="cadvisor",quantile="0.01"} 2.0452e-05
prometheus_target_sync_length_seconds{scrape_job="cadvisor",quantile="0.05"} 2.0452e-05
prometheus_target_sync_length_seconds{scrape_job="cadvisor",quantile="0.5"} 2.0452e-05
prometheus_target_sync_length_seconds{scrape_job="cadvisor",quantile="0.9"} 4.2337e-05
prometheus_target_sync_length_seconds{scrape_job="cadvisor",quantile="0.99"} 4.2337e-05
prometheus_target_sync_length_seconds_sum{scrape_job="cadvisor"} 0.10489659999999998
prometheus_target_sync_length_seconds_count{scrape_job="cadvisor"} 2953
prometheus_target_sync_length_seconds{scrape_job="grafana",quantile="0.01"} 1.4995e-05
prometheus_target_sync_length_seconds{scrape_job="grafana",quantile="0.05"} 1.4995e-05
prometheus_target_sync_length_seconds{scrape_job="grafana",quantile="0.5"} 1.4995e-05
prometheus_target_sync_length_seconds{scrape_job="grafana",quantile="0.9"} 1.7284e-05
prometheus_target_sync_length_seconds{scrape_job="grafana",quantile="0.99"} 1.7284e-05
prometheus_target_sync_length_seconds_sum{scrape_job="grafana"} 0.09031192700000017
prometheus_target_sync_length_seconds_count{scrape_job="grafana"} 2953
prometheus_target_sync_length_seconds{scrape_job="node",quantile="0.01"} 4.1607e-05
prometheus_target_sync_length_seconds{scrape_job="node",quantile="0.05"} 4.1607e-05
prometheus_target_sync_length_seconds{scrape_job="node",quantile="0.5"} 4.1607e-05
prometheus_target_sync_length_seconds{scrape_job="node",quantile="0.9"} 7.416e-05
prometheus_target_sync_length_seconds{scrape_job="node",quantile="0.99"} 7.416e-05
prometheus_target_sync_length_seconds_sum{scrape_job="node"} 0.11539821299999993
prometheus_target_sync_length_seconds_count{scrape_job="node"} 2953
prometheus_target_sync_length_seconds{scrape_job="prometheus",quantile="0.01"} 1.5564e-05
prometheus_target_sync_length_seconds{scrape_job="prometheus",quantile="0.05"} 1.5564e-05
prometheus_target_sync_length_seconds{scrape_job="prometheus",quantile="0.5"} 1.5564e-05
prometheus_target_sync_length_seconds{scrape_job="prometheus",quantile="0.9"} 1.961e-05
```

----------------------------------------

TITLE: Kubernetes Pod Role Discovery and Meta Labels
DESCRIPTION: The `pod` role in Prometheus discovers all Kubernetes pods and exposes their containers as scrape targets. A target is generated for each declared container port, and port-free targets are created for containers without specified ports, allowing manual port addition via relabeling. This section lists all available meta labels for the `pod` role.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/configuration/configuration.md#_snippet_102

LANGUAGE: APIDOC
CODE:
```
Role: pod
Description: Discovers all pods and exposes their containers as targets.

Available Meta Labels:
  __meta_kubernetes_namespace: The namespace of the pod object.
  __meta_kubernetes_pod_name: The name of the pod object.
  __meta_kubernetes_pod_ip: The pod IP of the pod object.
  __meta_kubernetes_pod_label_<labelname>: Each label from the pod object, with any unsupported characters converted to an underscore.
  __meta_kubernetes_pod_labelpresent_<labelname>: true for each label from the pod object, with any unsupported characters converted to an underscore.
  __meta_kubernetes_pod_annotation_<annotationname>: Each annotation from the pod object.
  __meta_kubernetes_pod_annotationpresent_<annotationname>: true for each annotation from the pod object.
  __meta_kubernetes_pod_container_init: true if the container is an InitContainer.
  __meta_kubernetes_pod_container_name: Name of the container the target address points to.
  __meta_kubernetes_pod_container_id: ID of the container the target address points to. The ID is in the form <type>://<container_id>.
  __meta_kubernetes_pod_container_image: The image the container is using.
  __meta_kubernetes_pod_container_port_name: Name of the container port.
  __meta_kubernetes_pod_container_port_number: Number of the container port.
  __meta_kubernetes_pod_container_port_protocol: Protocol of the container port.
  __meta_kubernetes_pod_ready: Set to true or false for the pod's ready state.
  __meta_kubernetes_pod_phase: Set to Pending, Running, Succeeded, Failed or Unknown in the lifecycle.
  __meta_kubernetes_pod_node_name: The name of the node the pod is scheduled onto.
  __meta_kubernetes_pod_host_ip: The current host IP of the pod object.
  __meta_kubernetes_pod_uid: The UID of the pod object.
  __meta_kubernetes_pod_controller_kind: Object kind of the pod controller.
  __meta_kubernetes_pod_controller_name: Name of the pod controller.
```

----------------------------------------

TITLE: Aggregate All Classic Histograms for 90th Percentile
DESCRIPTION: This snippet demonstrates how to calculate the 90th percentile across all classic histograms by specifying only the `le` label in the `sum by` clause, which is required by `histogram_quantile()`.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/querying/functions.md#_snippet_23

LANGUAGE: PromQL
CODE:
```
histogram_quantile(0.9, sum by (le) (rate(http_request_duration_seconds_bucket[10m])))
```

----------------------------------------

TITLE: Prometheus Rule Group Configuration (APIDOC)
DESCRIPTION: This API documentation defines the structure and available parameters for a Prometheus rule group (`<rule_group>`). It specifies properties like `name`, `interval`, `limit`, `query_offset`, `labels`, and the `rules` array, detailing their types and default values for organizing rule evaluation.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/configuration/recording_rules.md#_snippet_3

LANGUAGE: APIDOC
CODE:
```
# The name of the group. Must be unique within a file.
name: <string>

# How often rules in the group are evaluated.
[ interval: <duration> | default = global.evaluation_interval ]

# Limit the number of alerts an alerting rule and series a recording
# rule can produce. 0 is no limit.
[ limit: <int> | default = 0 ]

# Offset the rule evaluation timestamp of this particular group by the specified duration into the past.
[ query_offset: <duration> | default = global.rule_query_offset ]

# Labels to add or overwrite before storing the result for its rules.
# Labels defined in <rule> will override the key if it has a collision.
labels:
  [ <labelname>: <labelvalue> ]

rules:
  [ - <rule> ... ]
```

----------------------------------------

TITLE: Define Basic Prometheus Rule File Structure
DESCRIPTION: This snippet shows the top-level structure of a Prometheus rule file, which must contain a `groups` section to define one or more rule groups. This is the fundamental layout for organizing both recording and alerting rules within Prometheus configurations.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/configuration/recording_rules.md#_snippet_1

LANGUAGE: yaml
CODE:
```
groups:
  [ - <rule_group> ]
```

----------------------------------------

TITLE: Check Prometheus Rule File Syntax with promtool
DESCRIPTION: This snippet demonstrates how to use the `promtool` command-line utility to validate the syntax of a Prometheus rule file without needing to start a Prometheus server. It helps ensure the rule file is well-formatted and free of errors before deployment, exiting with a 0 status on success or 1 on error.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/configuration/recording_rules.md#_snippet_0

LANGUAGE: bash
CODE:
```
promtool check rules /path/to/example.rules.yml
```

----------------------------------------

TITLE: Prometheus Target Relabeling Configuration
DESCRIPTION: Defines a list of configurations for relabeling targets before scraping.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/configuration/configuration.md#_snippet_52

LANGUAGE: APIDOC
CODE:
```
relabel_configs:
  [ - <relabel_config> ... ]
```

----------------------------------------

TITLE: promtool check Command
DESCRIPTION: Checks the validity of various Prometheus resources, including configurations and service discovery. It supports a global query lookback duration and extended information printing.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/command-line/promtool.md#_snippet_3

LANGUAGE: APIDOC
CODE:
```
promtool check:
  Description: Check the resources for validity.
  Flags:
    --query.lookback-delta: The server's maximum query lookback duration. (Default: 5m)
    --extended: Print extended information related to the cardinality of the metrics.
```

----------------------------------------

TITLE: Configure Prometheus Remote Write for v2 Protocol
DESCRIPTION: YAML configuration snippet for `prometheus.yml` to enable remote writing to a specified URL. This configuration uses the `io.prometheus.write.v2.Request` protobuf message format, which is the current standard for sending metrics to a remote write adapter.
SOURCE: https://github.com/prometheus/prometheus/blob/main/documentation/examples/remote_storage/example_write_adapter/README.md#_snippet_1

LANGUAGE: yaml
CODE:
```
remote_write:
  - url: "http://localhost:1234/receive"
    protobuf_message: "io.prometheus.write.v2.Request"
```

----------------------------------------

TITLE: Prometheus HTTP Service Discovery Target Format
DESCRIPTION: Defines the JSON structure expected by Prometheus HTTP Service Discovery endpoints. Each entry in the list represents a target group, containing an array of target addresses and a map of labels to apply to those targets.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/http_sd.md#_snippet_0

LANGUAGE: json
CODE:
```
[
  {
    "targets": [ "<host>", ... ],
    "labels": {
      "<labelname>": "<labelvalue>", ...
    }
  },
  ...
]
```

----------------------------------------

TITLE: Run Prometheus Docker Container
DESCRIPTION: This command launches a Prometheus container using Docker. It runs the `prom/prometheus` image in detached mode (`-d`), assigns it the name `prometheus`, and maps port 9090 on the host's loopback interface (`127.0.0.1`) to port 9090 inside the container, making Prometheus accessible locally.
SOURCE: https://github.com/prometheus/prometheus/blob/main/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
docker run --name prometheus -d -p 127.0.0.1:9090:9090 prom/prometheus
```

----------------------------------------

TITLE: PromQL: Example `increase()` for HTTP Requests
DESCRIPTION: This PromQL example demonstrates using `increase()` to calculate the number of HTTP requests over the last 5 minutes for time series with `job="api-server"`. `increase` should only be used with counters and is primarily for human readability, while `rate` is preferred for recording rules.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/querying/functions.md#_snippet_31

LANGUAGE: PromQL
CODE:
```
increase(http_requests_total{job="api-server"}[5m])
```

----------------------------------------

TITLE: Prometheus Query Language: Logical/Set Binary Operators
DESCRIPTION: Describes the `and`, `or`, and `unless` logical/set binary operators in PromQL. These operators are exclusively defined between instant vectors and perform intersection, union, and complement operations based on matching label sets.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/querying/operators.md#_snippet_3

LANGUAGE: APIDOC
CODE:
```
Operators (defined only between instant vectors):
  - `and` (intersection)
  - `or` (union)
  - `unless` (complement)

Behavior:
1.  `vector1 and vector2`:
    -   Results in elements of `vector1` that have exactly matching label sets in `vector2`.
    -   Other elements are dropped.
    -   Metric name and values are carried over from `vector1`.
2.  `vector1 or vector2`:
    -   Contains all original elements of `vector1`.
    -   Additionally includes all elements of `vector2` which do not have matching label sets in `vector1`.
3.  `vector1 unless vector2`:
    -   Results in elements of `vector1` for which there are no elements in `vector2` with exactly matching label sets.
    -   All matching elements in both vectors are dropped.

Note: These operators work identically for float samples and histogram samples as they do not interact with sample values.
```

----------------------------------------

TITLE: histogram_quantile() Function Reference
DESCRIPTION: Detailed reference for the `histogram_quantile()` function in Prometheus, including its parameters, behavior with different histogram types, interpolation methods, and special return values for edge cases.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/querying/functions.md#_snippet_20

LANGUAGE: APIDOC
CODE:
```
Function: histogram_quantile(φ scalar, b instant-vector)
Purpose: Calculates the φ-quantile (0 ≤ φ ≤ 1) from a classic or native histogram.

Parameters:
  φ (scalar): The quantile to calculate (0 to 1).
  b (instant-vector):
    - Classic Histograms: Float samples are observation counts per bucket. Each must have an 'le' label for the inclusive upper bound.
    - Native Histograms: Each sample is treated individually as a separate histogram.

Return Values:
  - NaN: If 'b' has 0 observations, 'b' has <2 buckets (classic), highest bucket lacks '+Inf' upper bound (classic), or φ is NaN.
  - -Inf: If φ < 0.
  - +Inf: If φ > 1.
  - Interpolated quantile value: Otherwise.

Interpolation:
  - Linear (uniform distribution assumed): For classic histograms, native histograms with custom bucket boundaries, and the zero bucket of other native histograms.
  - Exponential (uniform population in higher resolution assumed): For non-zero buckets of native histograms with standard exponential bucketing.

Special Cases (Classic Histograms):
  - Fewer than two buckets: NaN returned.
  - Highest bucket must have '+Inf' upper bound: Otherwise, NaN returned.
  - Quantile in highest bucket: Upper bound of second highest bucket returned.
  - Quantile in lowest bucket: If upper bound > 0, lower limit assumed 0 and linear interpolation applies. Otherwise, upper bound of lowest bucket returned.

Special Cases (Native Histograms - Zero Bucket):
  - Finite width zero bucket, positive observations exist, no negative: Assumed to contain no negative observations.
  - Finite width zero bucket, negative observations exist, no positive: Assumed to contain no positive observations.
```

----------------------------------------

TITLE: PromQL: Sum HTTP Requests by Application and Group
DESCRIPTION: An equivalent query to `sum without (instance)`, this calculates the total HTTP requests per application and group by explicitly grouping `http_requests_total` by `application` and `group` labels.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/querying/operators.md#_snippet_19

LANGUAGE: PromQL
CODE:
```
sum by (application, group) (http_requests_total)
```

----------------------------------------

TITLE: Replace Label Values with label_replace() in PromQL
DESCRIPTION: `label_replace()` modifies a destination label's value by applying a regular expression to a source label's value. It allows for capturing groups to be referenced in the replacement string, enabling flexible label manipulation. If the regex doesn't match, the timeseries remains unchanged.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/querying/functions.md#_snippet_38

LANGUAGE: PromQL
CODE:
```
label_replace(up{job="api-server",service="a:c"}, "foo", "$1", "service", "(.*):.*")
```

LANGUAGE: PromQL
CODE:
```
label_replace(up{job="api-server",service="a:c"}, "foo", "$name", "service", "(?P<name>.*):(?P<version>.*)")
```

----------------------------------------

TITLE: Prometheus Self-Monitoring Configuration (prometheus.yml)
DESCRIPTION: This YAML configuration file sets up Prometheus to scrape its own metrics endpoint. It defines a global scrape interval, external labels for identification, and a specific job for self-monitoring with a shorter scrape interval.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/getting_started.md#_snippet_1

LANGUAGE: yaml
CODE:
```
global:
  scrape_interval:     15s # By default, scrape targets every 15 seconds.

  # Attach these labels to any time series or alerts when communicating with
  # external systems (federation, remote storage, Alertmanager).
  external_labels:
    monitor: 'codelab-monitor'

# A scrape configuration containing exactly one endpoint to scrape:
# Here it's Prometheus itself.
scrape_configs:
  # The job name is added as a label `job=<job_name>` to any timeseries scraped from this config.
  - job_name: 'prometheus'

    # Override the global default and scrape targets from this job every 5 seconds.
    scrape_interval: 5s

    static_configs:
      - targets: ['localhost:9090']
```

----------------------------------------

TITLE: Configure OTLP Tracing Export in Prometheus
DESCRIPTION: This configuration block details how to set up exporting traces from Prometheus to a tracing backend using the OTLP protocol. It includes options for client type (HTTP/gRPC), endpoint, sampling probability, security settings, headers, compression, timeout, and TLS configuration. Tracing is currently an experimental feature.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/configuration/configuration.md#_snippet_136

LANGUAGE: YAML
CODE:
```
# Client used to export the traces. Options are 'http' or 'grpc'.
[ client_type: <string> | default = grpc ]

# Endpoint to send the traces to. Should be provided in format <host>:<port>.
[ endpoint: <string> ]

# Sets the probability a given trace will be sampled. Must be a float from 0 through 1.
[ sampling_fraction: <float> | default = 0 ]

# If disabled, the client will use a secure connection.
[ insecure: <boolean> | default = false ]

# Key-value pairs to be used as headers associated with gRPC or HTTP requests.
headers:
  [ <string>: <string> ... ]

# Compression key for supported compression types. Supported compression: gzip.
[ compression: <string> ]

# Maximum time the exporter will wait for each batch export.
[ timeout: <duration> | default = 10s ]

# TLS configuration.
tls_config:
  [ <tls_config> ]
```

----------------------------------------

TITLE: Promtool: Analyze TSDB Churn, Cardinality, and Compaction
DESCRIPTION: The `promtool tsdb analyze` subcommand analyzes various aspects of the Prometheus TSDB, including churn, label pair cardinality, and compaction efficiency. It supports limiting output, extended analysis, and series selection.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/command-line/promtool.md#_snippet_28

LANGUAGE: APIDOC
CODE:
```
promtool tsdb analyze
  Flags:
    --limit <number>: How many items to show in each list. (Default: 20)
    --extended: Run extended analysis.
    --match <selector>: Series selector to analyze. Only 1 set of matchers is supported now.
  Arguments:
    db path <path>: Database path. (Default: data/)
    block id <id>: Block to analyze. (Default: the last block)
```

----------------------------------------

TITLE: Prometheus Relabeling Actions Reference
DESCRIPTION: Details the various actions that can be performed during Prometheus relabeling. These actions define how labels are manipulated based on regular expression matches or other conditions, including replacing, dropping, keeping, case conversion, and hashing.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/configuration/configuration.md#_snippet_128

LANGUAGE: APIDOC
CODE:
```
<relabel_action>:
  replace:
    description: Match `regex` against the concatenated `source_labels`. Then, set `target_label` to `replacement`, with match group references (${1}, ${2}, ...) in `replacement` substituted by their value. If `regex` does not match, no replacement takes place.
  lowercase:
    description: Maps the concatenated `source_labels` to their lower case.
  uppercase:
    description: Maps the concatenated `source_labels` to their upper case.
  keep:
    description: Drop targets for which `regex` does not match the concatenated `source_labels`.
  drop:
    description: Drop targets for which `regex` matches the concatenated `source_labels`.
  keepequal:
    description: Drop targets for which the concatenated `source_labels` do not match `target_label`.
  dropequal:
    description: Drop targets for which the concatenated `source_labels` do match `target_label`.
  hashmod:
    description: Set `target_label` to the `modulus` of a hash of the concatenated `source_labels`.
  labelmap:
    description: Match `regex` against all source label names, not just those specified in `source_labels`. Then copy the values of the matching labels to label names given by `replacement` with match group references (${1}, ${2}, ...) in `replacement` substituted by their value.
  labeldrop:
    description: Match `regex` against all label names. Any label that matches will be removed from the set of labels.
  labelkeep:
    description: Match `regex` against all label names. Any label that does not match will be removed from the set of labels.
```

----------------------------------------

TITLE: Prometheus Range Query API Endpoint Definition
DESCRIPTION: Defines the `/api/v1/query_range` endpoint for evaluating Prometheus expression queries over a time range. It supports both GET and POST methods, allowing URL-encoded parameters directly or in the request body for large queries. Details all required and optional URL query parameters and the expected JSON response structure.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/querying/api.md#_snippet_7

LANGUAGE: APIDOC
CODE:
```
Endpoint: /api/v1/query_range
Methods: GET, POST

URL Query Parameters:
  query: <string> - Prometheus expression query string.
  start: <rfc3339 | unix_timestamp> - Start timestamp, inclusive.
  end: <rfc3339 | unix_timestamp> - End timestamp, inclusive.
  step: <duration | float> - Query resolution step width in duration format or float number of seconds.
  timeout: <duration> (Optional) - Evaluation timeout. Defaults to and is capped by the value of the -query.timeout flag.
  limit: <number> (Optional) - Maximum number of returned series. 0 means disabled.

Request Body (POST with Content-Type: application/x-www-form-urlencoded):
  Parameters can be URL-encoded directly in the request body.

Response Data Format (JSON):
  resultType: "matrix"
  result: <value> (See range-vector result format)
```

----------------------------------------

TITLE: PromQL One-to-One Vector Matching
DESCRIPTION: This section describes the default one-to-one vector matching behavior in PromQL. It demonstrates how to use the `ignoring` keyword to exclude specific labels from matching and the `on` keyword to explicitly include only a specified set of labels. Two entries match if they have the exact same set of labels and corresponding values, after applying any `ignoring` or `on` clauses.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/querying/operators.md#_snippet_7

LANGUAGE: PromQL
CODE:
```
<vector expr> <bin-op> ignoring(<label list>) <vector expr>
<vector expr> <bin-op> on(<label list>) <vector expr>
```

LANGUAGE: PromQL
CODE:
```
method_code:http_errors:rate5m{method="get", code="500"}  24
method_code:http_errors:rate5m{method="get", code="404"}  30
method_code:http_errors:rate5m{method="put", code="501"}  3
method_code:http_errors:rate5m{method="post", code="500"} 6
method_code:http_errors:rate5m{method="post", code="404"} 21

method:http_requests:rate5m{method="get"}  600
method:http_requests:rate5m{method="del"}  34
method:http_requests:rate5m{method="post"} 120
```

LANGUAGE: PromQL
CODE:
```
method_code:http_errors:rate5m{code="500"} / ignoring(code) method:http_requests:rate5m
```

LANGUAGE: PromQL
CODE:
```
{method="get"}  0.04            //  24 / 600
{method="post"} 0.05            //   6 / 120
```

----------------------------------------

TITLE: Enable Extra Scrape Metrics in Prometheus
DESCRIPTION: When enabled, for each instance scrape, Prometheus stores a sample in additional time series: `scrape_timeout_seconds` (the configured `scrape_timeout`), `scrape_sample_limit` (the configured `sample_limit`), and `scrape_body_size_bytes` (the uncompressed size of the most recent scrape response). This allows for measuring how close targets are to timing out with `scrape_duration_seconds / scrape_timeout_seconds`, or reaching sample limits with `scrape_samples_post_metric_relabeling / scrape_sample_limit`. For targets with no sample limit, `scrape_sample_limit` can be zero, leading to `+Inf` for the division; to query only targets with a limit, use `scrape_samples_post_metric_relabeling / (scrape_sample_limit > 0)`.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/feature_flags.md#_snippet_2

LANGUAGE: Prometheus CLI
CODE:
```
--enable-feature=extra-scrape-metrics
```

----------------------------------------

TITLE: APIDOC: `increase()` Function Definition
DESCRIPTION: `increase(v range-vector)` calculates the increase in the time series in the range vector, automatically adjusting for counter resets. It extrapolates to cover the full time range and can result in non-integer values. For histogram samples, it calculates the increase for each component.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/querying/functions.md#_snippet_30

LANGUAGE: APIDOC
CODE:
```
increase(v range-vector)
```

----------------------------------------

TITLE: Run Prometheus in Agent Mode
DESCRIPTION: Activates Prometheus's 'Agent mode', which is optimized for metrics collection and forwarding.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/command-line/prometheus.md#_snippet_23

LANGUAGE: APIDOC
CODE:
```
--agent <boolean>
```

----------------------------------------

TITLE: Define Prometheus File SD Targets in JSON
DESCRIPTION: This JSON example demonstrates the structure for defining static targets within a file-based service discovery configuration for Prometheus. It shows how to specify target hosts and associated labels.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/configuration/configuration.md#_snippet_93

LANGUAGE: JSON
CODE:
```
[
  {
    "targets": [ "<host>", ... ],
    "labels": {
      "<labelname>": "<labelvalue>", ...
    }
  },
  ...
]
```

----------------------------------------

TITLE: Prometheus Query Language: Comparison Binary Operators
DESCRIPTION: Explains the `==`, `!=`, `>`, `<`, `>=`, `<=` comparison operators in PromQL. It details their application between scalar/scalar, vector/scalar, and vector/vector value pairs, and how the `bool` modifier alters their default filtering behavior to return `0` or `1`.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/querying/operators.md#_snippet_2

LANGUAGE: APIDOC
CODE:
```
Operators:
  - `==` (equal)
  - `!=` (not-equal)
  - `>` (greater-than)
  - `<` (less-than)
  - `>=` (greater-or-equal)
  - `<=` (less-or-equal)

Behavior:
1.  Between two scalars:
    -   `bool` modifier is mandatory.
    -   Results in a scalar `0` (false) or `1` (true).
2.  Between an instant vector and a scalar:
    -   Applied to each data sample's value.
    -   Vector elements where comparison is `false` are dropped.
    -   Works only with float samples. Histogram samples are removed with an info-level annotation.
    -   With `bool` modifier: Elements that would be dropped get value `0`, kept elements get `1`. Metric name is dropped.
3.  Between two instant vectors:
    -   Default: Behaves as a filter applied to matching entries.
    -   Elements where expression is not true or no match are dropped.
    -   Float vs. Float: Works as usual.
    -   Float vs. Histogram: Invalid, element removed with info annotation.
    -   Histogram vs. Histogram: `==` and `!=` work; other operations are invalid.
    -   With `bool` modifier: Elements that would be dropped get value `0`, kept elements get `1`. Metric name is dropped.
```

----------------------------------------

TITLE: Select Range Vector for Time Series
DESCRIPTION: Return a whole range of time (in this case 5 minutes up to the query time) for a vector, making it a range vector. Note that an expression resulting in a range vector cannot be graphed directly, but viewed in the tabular ("Console") view of the expression browser.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/querying/examples.md#_snippet_2

LANGUAGE: PromQL
CODE:
```
http_requests_total{job="apiserver", handler="/api/comments"}[5m]
```

----------------------------------------

TITLE: Define Dockerfile for custom Prometheus image with baked-in config
DESCRIPTION: This Dockerfile defines a custom Prometheus image. It starts from the official prom/prometheus base image and adds a prometheus.yml configuration file directly into the image's /etc/prometheus/ directory. This approach is suitable when the configuration is static and consistent across environments.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/installation.md#_snippet_4

LANGUAGE: Dockerfile
CODE:
```
FROM prom/prometheus
ADD prometheus.yml /etc/prometheus/
```

----------------------------------------

TITLE: Prometheus API: Range Vector Result Format (matrix)
DESCRIPTION: Describes the JSON format for range vector results, returned as `matrix` type. The `result` property contains an array of series, each with a `metric` object and either `values` (numeric samples) or `histograms` (native histograms), or both. For a given timestamp, there will only be one sample of either float or histogram type. Series are returned sorted by `metric`.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/querying/api.md#_snippet_18

LANGUAGE: json
CODE:
```
[
  {
    "metric": { "<label_name>": "<label_value>", ... },
    "values": [ [ <unix_time>, "<sample_value>" ], ... ],
    "histograms": [ [ <unix_time>, <histogram> ], ... ]
  },
  ...
]
```

----------------------------------------

TITLE: Aggregate 90th Percentile by Job Label
DESCRIPTION: This snippet shows how to aggregate the 90th percentile of request durations by the `job` label. It provides examples for classic histograms, requiring the `le` label in the `by` clause, and native histograms.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/querying/functions.md#_snippet_22

LANGUAGE: PromQL
CODE:
```
histogram_quantile(0.9, sum by (job, le) (rate(http_request_duration_seconds_bucket[10m])))
```

LANGUAGE: PromQL
CODE:
```
histogram_quantile(0.9, sum by (job) (rate(http_request_duration_seconds[10m])))
```

----------------------------------------

TITLE: Configure Prometheus OTLP Metrics Receiver
DESCRIPTION: Enables Prometheus to act as a receiver for the OTLP Metrics protocol. Similar to remote write, this is for low-volume scenarios and not a substitute for scraping.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/querying/api.md#_snippet_50

LANGUAGE: APIDOC
CODE:
```
Enable the OTLP receiver by setting `--web.enable-otlp-receiver`.
When enabled, the OTLP receiver endpoint is `/api/v1/otlp/v1/metrics`.
```

----------------------------------------

TITLE: Prometheus Remote Read and Write API Endpoints
DESCRIPTION: Details the HTTP endpoints and protocols used by Prometheus for remote read and write operations. Prometheus can act as both a client and a server for these protocols. The write protocol has stable and experimental specifications, while the read protocol is not yet stable. All PromQL evaluation occurs within Prometheus, even for remote reads.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/storage.md#_snippet_3

LANGUAGE: APIDOC
CODE:
```
Prometheus Remote Storage Protocols and Endpoints:

- Remote Write Protocol:
    - Purpose: Prometheus can write samples to or receive samples from a remote URL.
    - Format: Snappy-compressed Protocol Buffer encoding over HTTP.
    - Specifications:
        - Stable: 1.0 version (https://prometheus.io/docs/specs/remote_write_spec/)
        - Experimental: 2.0 version (https://prometheus.io/docs/specs/remote_write_spec_2_0/)
    - Server Endpoint: `/api/v1/write` (enabled by `--web.enable-remote-write-receiver` flag)

- Remote Read Protocol:
    - Purpose: Prometheus can read (back) sample data from or return sample data to a remote URL.
    - Format: Snappy-compressed Protocol Buffer encoding over HTTP.
    - Stability: Not yet considered a stable API.
    - Server Endpoint: `/api/v1/read` (https://prometheus.io/docs/prometheus/latest/querying/remote_read_api/)
    - Limitation: Prometheus only fetches raw series data; all PromQL evaluation happens in Prometheus itself.
```

----------------------------------------

TITLE: Configure Prometheus for Remote Write and Read
DESCRIPTION: YAML configuration snippet for `prometheus.yml` to enable remote write functionality for sending samples and remote read for retrieving data (currently InfluxDB only) to the remote storage adapter.
SOURCE: https://github.com/prometheus/prometheus/blob/main/documentation/examples/remote_storage/remote_storage_adapter/README.md#_snippet_5

LANGUAGE: YAML
CODE:
```
# Remote write configuration (for Graphite, OpenTSDB, or InfluxDB).
remote_write:
  - url: "http://localhost:9201/write"

# Remote read configuration (for InfluxDB only at the moment).
remote_read:
  - url: "http://localhost:9201/read"
```

----------------------------------------

TITLE: Define Prometheus Recording Rule for CPU Rate
DESCRIPTION: This YAML configuration defines a Prometheus recording rule named 'cpu-node'. It records the result of the averaged CPU rate PromQL expression into a new metric job_instance_mode:node_cpu_seconds:avg_rate5m, making aggregated data available as a persisted time series for efficient querying.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/getting_started.md#_snippet_10

LANGUAGE: yaml
CODE:
```
groups:
- name: cpu-node
  rules:
  - record: job_instance_mode:node_cpu_seconds:avg_rate5m
    expr: avg by (job, instance, mode) (rate(node_cpu_seconds_total[5m]))
```

----------------------------------------

TITLE: Update Prometheus Remote Write HTTP/2 Configuration
DESCRIPTION: In Prometheus 3.0, the `http_config.enable_http2` option in `remote_write` items now defaults to `false`. To re-enable HTTP/2 for remote write, explicitly set this option to `true` in your configuration.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/migration.md#_snippet_0

LANGUAGE: YAML
CODE:
```
http_config.enable_http2: true
```

----------------------------------------

TITLE: Prometheus v3 Alertmanager API Compatibility
DESCRIPTION: Prometheus v3 no longer supports Alertmanager's v1 API, requiring Alertmanager version 0.16.0 or later. Users must update their Alertmanager configuration to use `api_version: v2` instead of `api_version: v1` to ensure compatibility.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/migration.md#_snippet_9

LANGUAGE: APIDOC
CODE:
```
Alertmanager API Compatibility:
  - Prometheus v3 requires Alertmanager v0.16.0+
  - Disallows `alerting: alertmanagers: [api_version: v1]`
  - Requires `alerting: alertmanagers: [api_version: v2]`
```

----------------------------------------

TITLE: Kubernetes Endpoints Role Discovery and Meta Labels
DESCRIPTION: The `endpoints` role in Prometheus discovers targets from the listed endpoints of a Kubernetes service. For each endpoint address, one target is discovered per port. If an endpoint is backed by a pod, additional container ports of that pod (not bound to an endpoint port) are also discovered as targets. Note that the Endpoints API is deprecated in Kubernetes v1.33+, and `endpointslice` role is recommended instead. This section lists all available meta labels for the `endpoints` role.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/configuration/configuration.md#_snippet_103

LANGUAGE: APIDOC
CODE:
```
Role: endpoints
Description: Discovers targets from listed endpoints of a service. For each endpoint address one target is discovered per port. If the endpoint is backed by a pod, all additional container ports of the pod, not bound to an endpoint port, are discovered as targets as well.
Note: Endpoints API is deprecated in Kubernetes v1.33+. Use `endpointslice` role instead.

Available Meta Labels:
  __meta_kubernetes_namespace: The namespace of the endpoints object.
  __meta_kubernetes_endpoints_name: The names of the endpoints object.
  __meta_kubernetes_endpoints_label_<labelname>: Each label from the endpoints object, with any unsupported characters converted to an underscore.
  __meta_kubernetes_endpoints_labelpresent_<labelname>: true for each label from the endpoints object, with any unsupported characters converted to an underscore.
  __meta_kubernetes_endpoints_annotation_<annotationname>: Each annotation from the endpoints object.
  __meta_kubernetes_endpoints_annotationpresent_<annotationname>: true for each annotation from the endpoints object.

Labels for targets discovered directly from endpoints list (not inferred from underlying pods):
  __meta_kubernetes_endpoint_hostname: Hostname of the endpoint.
  __meta_kubernetes_endpoint_node_name: Name of the node hosting the endpoint.
  __meta_kubernetes_endpoint_ready: Set to true or false for the endpoint's ready state.
  __meta_kubernetes_endpoint_port_name: Name of the endpoint port.
  __meta_kubernetes_endpoint_port_protocol: Protocol of the endpoint port.
  __meta_kubernetes_endpoint_address_target_kind: Kind of the endpoint address target.
  __meta_kubernetes_endpoint_address_target_name: Name of the endpoint address target.

Inherited Labels:
  If the endpoints belong to a service, all labels of the `role: service` discovery are attached.
  For all targets backed by a pod, all labels of the `role: pod` discovery are attached.
```

----------------------------------------

TITLE: Match Time Series with Empty Label Values (PromQL)
DESCRIPTION: Demonstrates how a label matcher with an empty string value (`label=""`) selects time series that either have the label explicitly set to an empty string or do not have the specific label set at all.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/querying/basics.md#_snippet_11

LANGUAGE: PromQL
CODE:
```
http_requests_total{environment=""}
```

----------------------------------------

TITLE: Prometheus Kubernetes Discovery Configuration Example
DESCRIPTION: Provides a YAML configuration example for Prometheus Kubernetes discovery, showing how to specify API server addresses and the discovery role (e.g., `endpoints`, `endpointslice`, `service`, `pod`, `node`, `ingress`). It also mentions the optional kubeconfig path.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/configuration/configuration.md#_snippet_106

LANGUAGE: YAML
CODE:
```
# The information to access the Kubernetes API.

# The API server addresses. If left empty, Prometheus is assumed to run inside
# of the cluster and will discover API servers automatically and use the pod's
# CA certificate and bearer token file at /var/run/secrets/kubernetes.io/serviceaccount/.
[ api_server: <host> ]

# The Kubernetes role of entities that should be discovered.
# One of endpoints, endpointslice, service, pod, node, or ingress.
role: <string>

# Optional path to a kubeconfig file.
```

----------------------------------------

TITLE: Prometheus TSDB and Web Operational Metrics Snapshot
DESCRIPTION: A comprehensive list of operational metrics exposed by a Prometheus server, detailing the state and performance of its Time Series Database (TSDB), including compaction, write-ahead log (WAL) activity, head block management, and web server request handling. These metrics are crucial for monitoring the health and efficiency of a Prometheus instance.
SOURCE: https://github.com/prometheus/prometheus/blob/main/model/textparse/testdata/alltypes.237mfs.nometa.prom.txt#_snippet_88

LANGUAGE: Prometheus Exposition Format
CODE:
```
prometheus_tsdb_compaction_duration_seconds_bucket{le="1024"} 183
prometheus_tsdb_compaction_duration_seconds_bucket{le="2048"} 183
prometheus_tsdb_compaction_duration_seconds_bucket{le="4096"} 183
prometheus_tsdb_compaction_duration_seconds_bucket{le="8192"} 183
prometheus_tsdb_compaction_duration_seconds_bucket{le="+Inf"} 183
prometheus_tsdb_compaction_duration_seconds_sum 254.9095696899999
prometheus_tsdb_compaction_duration_seconds_count 183
prometheus_tsdb_compaction_populating_block 0
prometheus_tsdb_compactions_failed_total 0
prometheus_tsdb_compactions_skipped_total 0
prometheus_tsdb_compactions_total 183
prometheus_tsdb_compactions_triggered_total 14855
prometheus_tsdb_data_replay_duration_seconds 5.550163617
prometheus_tsdb_exemplar_exemplars_appended_total 0
prometheus_tsdb_exemplar_exemplars_in_storage 0
prometheus_tsdb_exemplar_last_exemplars_timestamp_seconds 0
prometheus_tsdb_exemplar_max_exemplars 0
prometheus_tsdb_exemplar_out_of_order_exemplars_total 0
prometheus_tsdb_exemplar_series_with_exemplars_in_storage 0
prometheus_tsdb_head_active_appenders 0
prometheus_tsdb_head_chunks 31476
prometheus_tsdb_head_chunks_created_total 4.893432e+06
prometheus_tsdb_head_chunks_removed_total 4.861956e+06
prometheus_tsdb_head_chunks_storage_size_bytes 7.237299e+06
prometheus_tsdb_head_gc_duration_seconds_sum 4.773801686000001
prometheus_tsdb_head_gc_duration_seconds_count 123
prometheus_tsdb_head_max_time 1.738949375191e+12
prometheus_tsdb_head_max_time_seconds 1.738949375e+09
prometheus_tsdb_head_min_time 1.738944000171e+12
prometheus_tsdb_head_min_time_seconds 1.738944e+09
prometheus_tsdb_head_out_of_order_samples_appended_total{type="float"} 0
prometheus_tsdb_head_out_of_order_samples_appended_total{type="histogram"} 0
prometheus_tsdb_head_samples_appended_total{type="float"} 5.85543187e+08
prometheus_tsdb_head_samples_appended_total{type="histogram"} 0
prometheus_tsdb_head_series 10720
prometheus_tsdb_head_series_created_total 18541
prometheus_tsdb_head_series_not_found_total 0
prometheus_tsdb_head_series_removed_total 7821
prometheus_tsdb_head_truncations_failed_total 0
prometheus_tsdb_head_truncations_total 123
prometheus_tsdb_isolation_high_watermark 7.852949e+06
prometheus_tsdb_isolation_low_watermark 7.852949e+06
prometheus_tsdb_lowest_timestamp 1.73618640004e+12
prometheus_tsdb_lowest_timestamp_seconds 1.7361864e+09
prometheus_tsdb_mmap_chunk_corruptions_total 0
prometheus_tsdb_mmap_chunks_total 4.851264e+06
prometheus_tsdb_out_of_bound_samples_total{type="float"} 0
prometheus_tsdb_out_of_order_samples_total{type="float"} 517
prometheus_tsdb_out_of_order_samples_total{type="histogram"} 0
prometheus_tsdb_reloads_failures_total 0
prometheus_tsdb_reloads_total 14822
prometheus_tsdb_retention_limit_bytes 0
prometheus_tsdb_retention_limit_seconds 2.6784e+06
prometheus_tsdb_size_retentions_total 0
prometheus_tsdb_snapshot_replay_error_total 0
prometheus_tsdb_storage_blocks_bytes 2.762863592e+09
prometheus_tsdb_symbol_table_size_bytes 10616
prometheus_tsdb_time_retentions_total 5
prometheus_tsdb_tombstone_cleanup_seconds_bucket{le="+Inf"} 0
prometheus_tsdb_tombstone_cleanup_seconds_sum 0
prometheus_tsdb_tombstone_cleanup_seconds_count 0
prometheus_tsdb_too_old_samples_total{type="float"} 0
prometheus_tsdb_vertical_compactions_total 0
prometheus_tsdb_wal_completed_pages_total 109271
prometheus_tsdb_wal_corruptions_total 0
prometheus_tsdb_wal_fsync_duration_seconds{quantile="0.5"} NaN
prometheus_tsdb_wal_fsync_duration_seconds{quantile="0.9"} NaN
prometheus_tsdb_wal_fsync_duration_seconds{quantile="0.99"} NaN
prometheus_tsdb_wal_fsync_duration_seconds_sum 4.842524568000002
prometheus_tsdb_wal_fsync_duration_seconds_count 123
prometheus_tsdb_wal_page_flushes_total 2.293951e+06
prometheus_tsdb_wal_segment_current 24726
prometheus_tsdb_wal_storage_size_bytes 6.9168385e+07
prometheus_tsdb_wal_truncate_duration_seconds_sum 121.61954577099996
prometheus_tsdb_wal_truncate_duration_seconds_count 62
prometheus_tsdb_wal_truncations_failed_total 0
prometheus_tsdb_wal_truncations_total 62
prometheus_tsdb_wal_writes_failed_total 0
prometheus_web_federation_errors_total 0
prometheus_web_federation_warnings_total 0
promhttp_metric_handler_requests_in_flight 1
promhttp_metric_handler_requests_total{code="200"} 4.059092e+06
promhttp_metric_handler_requests_total{code="500"} 0
promhttp_metric_handler_requests_total{code="503"} 0
# EOF
```

----------------------------------------

TITLE: Promtool: Unit Testing
DESCRIPTION: The `promtool test` command provides unit testing capabilities for Prometheus components, such as rules. It can output JUnit XML test results.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/command-line/promtool.md#_snippet_23

LANGUAGE: APIDOC
CODE:
```
promtool test
  Flags:
    --junit <file>: File path to store JUnit XML test results.
```

----------------------------------------

TITLE: Prometheus TLS Connection Configuration (`tls_config`)
DESCRIPTION: Details the configuration options for secure TLS connections within Prometheus. This includes specifying CA certificates, client certificates and keys for mutual authentication, the server name indication (SNI), an option to disable server certificate validation, and the minimum acceptable TLS version.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/configuration/configuration.md#_snippet_67

LANGUAGE: YAML
CODE:
```
[ ca: <string> ]
[ ca_file: <filename> ]

[ cert: <string> ]
[ cert_file: <filename> ]
[ key: <secret> ]
[ key_file: <filename> ]

[ server_name: <string> ]

[ insecure_skip_verify: <boolean> ]

[ min_version: <string> ]
```

----------------------------------------

TITLE: Prometheus HTTP API Generic Placeholders
DESCRIPTION: Defines common data type placeholders used across the Prometheus HTTP API, including timestamp formats (RFC3339/Unix), series selectors, duration formats, and boolean values.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/querying/api.md#_snippet_1

LANGUAGE: APIDOC
CODE:
```
<rfc3339 | unix_timestamp>: Input timestamps may be provided either in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) format or as a Unix timestamp
in seconds, with optional decimal places for sub-second precision. Output
timestamps are always represented as Unix timestamps in seconds.
<series_selector>: Prometheus [time series
selectors](basics.md#time-series-selectors) like `http_requests_total` or
`http_requests_total{method=~"(GET|POST)"}` and need to be URL-encoded.
<duration>: [the subset of Prometheus float literals using time units](basics.md#float-literals-and-time-durations).
For example, `5m` refers to a duration of 5 minutes.
<bool>: boolean values (strings `true` and `false`).
```

----------------------------------------

TITLE: Define a Basic Prometheus Alerting Rule
DESCRIPTION: This YAML configuration defines a basic Prometheus alerting rule named 'HighRequestLatency'. It specifies an expression to evaluate, a 'for' duration before firing, a 'keep_firing_for' duration, and custom labels and annotations for the alert.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/configuration/alerting_rules.md#_snippet_0

LANGUAGE: yaml
CODE:
```
groups:
- name: example
  labels:
    team: myteam
  rules:
  - alert: HighRequestLatency
    expr: job:request_latency_seconds:mean5m{job="myjob"} > 0.5
    for: 10m
    keep_firing_for: 5m
    labels:
      severity: page
    annotations:
      summary: High request latency
```

----------------------------------------

TITLE: Enable Exemplars Storage in Prometheus
DESCRIPTION: Enables the storage of exemplars, which are references to data outside of the MetricSet, commonly used for trace IDs. This feature implements a fixed-size circular buffer in memory and appends exemplars to the WAL for local persistence. The size of the buffer can be controlled via the `storage`/`exemplars` configuration block.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/feature_flags.md#_snippet_0

LANGUAGE: Prometheus CLI
CODE:
```
--enable-feature=exemplar-storage
```

----------------------------------------

TITLE: PromQL Range Selector Behavior Change in Prometheus v3
DESCRIPTION: Prometheus v3 changes range selectors and lookback to be left-open and right-closed, ensuring consistent sample counts. This affects queries where the left boundary aligns with sample timestamps, particularly subqueries. Users may need to extend query windows, e.g., from `foo[1m:1m]` to `foo[2m:1m]`, to ensure sufficient data for calculations.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/migration.md#_snippet_2

LANGUAGE: PromQL
CODE:
```
foo[1m:1m]
foo[2m:1m]
```

----------------------------------------

TITLE: Select Time Series Using Regex Label Matching
DESCRIPTION: Using regular expressions, select time series only for jobs whose name match a certain pattern, in this case, all jobs that end with `server`.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/querying/examples.md#_snippet_3

LANGUAGE: PromQL
CODE:
```
http_requests_total{job=~".*server"}
```

----------------------------------------

TITLE: Prometheus Remote Write Configuration Block Reference
DESCRIPTION: Detailed reference for the Prometheus `<remote_write>` configuration block, outlining its parameters, their types, default values, and descriptions. It covers general settings, relabeling, and various authentication mechanisms like AWS SigV4, Azure AD, and Google IAM.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/configuration/configuration.md#_snippet_131

LANGUAGE: APIDOC
CODE:
```
# The URL of the endpoint to send samples to.
url: <string>

# protobuf message to use when writing to the remote write endpoint.
#
# * The `prometheus.WriteRequest` represents the message introduced in Remote Write 1.0, which
# will be deprecated eventually.
# * The `io.prometheus.write.v2.Request` was introduced in Remote Write 2.0 and replaces the former,
# by improving efficiency and sending metadata, created timestamp and native histograms by default.
#
# Before changing this value, consult with your remote storage provider (or test) what message it supports.
# Read more on https://prometheus.io/docs/specs/remote_write_spec_2_0/#io-prometheus-write-v2-request
[ protobuf_message: <prometheus.WriteRequest | io.prometheus.write.v2.Request> | default = prometheus.WriteRequest ]

# Timeout for requests to the remote write endpoint.
[ remote_timeout: <duration> | default = 30s ]

# Custom HTTP headers to be sent along with each remote write request.
# Be aware that headers that are set by Prometheus itself can't be overwritten.
headers:
  [ <string>: <string> ... ]

# List of remote write relabel configurations.
write_relabel_configs:
  [ - <relabel_config> ... ]

# Name of the remote write config, which if specified must be unique among remote write configs.
# The name will be used in metrics and logging in place of a generated value to help users distinguish between
# remote write configs.
[ name: <string> ]

# Enables sending of exemplars over remote write. Note that exemplar storage itself must be enabled for exemplars to be scraped in the first place.
[ send_exemplars: <boolean> | default = false ]

# Enables sending of native histograms, also known as sparse histograms, over remote write.
# For the `io.prometheus.write.v2.Request` message, this option is noop (always true).
[ send_native_histograms: <boolean> | default = false ]

# When enabled, remote-write will resolve the URL host name via DNS, choose one of the IP addresses at random, and connect to it.
# When disabled, remote-write relies on Go's standard behavior, which is to try to connect to each address in turn.
# The connection timeout applies to the whole operation, i.e. in the latter case it is spread over all attempt.
# This is an experimental feature, and its behavior might still change, or even get removed.
[ round_robin_dns: <boolean> | default = false ]

# Optionally configures AWS's Signature Verification 4 signing process to
# sign requests. Cannot be set at the same time as basic_auth, authorization, oauth2, or azuread.
# To use the default credentials from the AWS SDK, use `sigv4: {}`.
sigv4:
  # The AWS region. If blank, the region from the default credentials chain
  # is used.
  [ region: <string> ]

  # The AWS API keys. If blank, the environment variables `AWS_ACCESS_KEY_ID`
  # and `AWS_SECRET_ACCESS_KEY` are used.
  [ access_key: <string> ]
  [ secret_key: <secret> ]

  # Named AWS profile used to authenticate.
  [ profile: <string> ]

  # AWS Role ARN, an alternative to using AWS API keys.
  [ role_arn: <string> ]

# Optional AzureAD configuration.
# Cannot be used at the same time as basic_auth, authorization, oauth2, sigv4 or google_iam.
azuread:
  # The Azure Cloud. Options are 'AzurePublic', 'AzureChina', or 'AzureGovernment'.
  [ cloud: <string> | default = AzurePublic ]

  # Azure Managed Identity.  Leave 'client_id' blank to use the default managed identity.
  [ managed_identity:
      [ client_id: <string> ] ]

  # Azure OAuth.
  [ oauth:
      [ client_id: <string> ]
      [ client_secret: <string> ]
      [ tenant_id: <string> ] ]

  # Azure SDK auth.
  # See https://learn.microsoft.com/en-us/azure/developer/go/azure-sdk-authentication
  [ sdk:
      [ tenant_id: <string> ] ]

# WARNING: Remote write is NOT SUPPORTED by Google Cloud. This configuration is reserved for future use.
# Optional Google Cloud Monitoring configuration.
# Cannot be used at the same time as basic_auth, authorization, oauth2, sigv4 or azuread.
# To use the default credentials from the Google Cloud SDK, use `google_iam: {}`.
google_iam:
  # Service account key with monitoring write permissions.
  credentials_file: <file_name>
```

----------------------------------------

TITLE: Prometheus Binary Operator Precedence and Associativity
DESCRIPTION: Details the order of operations for binary operators in Prometheus queries, including their associativity rules (left-associative for most, right-associative for `^`).
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/querying/operators.md#_snippet_24

LANGUAGE: APIDOC
CODE:
```
Prometheus Binary Operator Precedence (Highest to Lowest):

1. ^ (Right-associative)
2. *, /, %, atan2 (Left-associative)
3. +, - (Left-associative)
4. ==, !=, <=, <, >=, > (Left-associative)
5. and, unless (Left-associative)
6. or (Left-associative)

Examples:
- `2 * 3 % 2` is equivalent to `(2 * 3) % 2`
- `2 ^ 3 ^ 2` is equivalent to `2 ^ (3 ^ 2)`
```

----------------------------------------

TITLE: Prometheus Alertmanager and Relabeling Configuration
DESCRIPTION: This YAML snippet shows the basic configuration blocks for defining static Alertmanager configurations and applying relabeling rules to Alertmanagers and alerts within Prometheus.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/configuration/configuration.md#_snippet_130

LANGUAGE: yaml
CODE:
```
static_configs:
  [ - <static_config> ... ]

# List of Alertmanager relabel configurations.
relabel_configs:
  [ - <relabel_config> ... ]

# List of alert relabel configurations.
alert_relabel_configs:
  [ - <relabel_config> ... ]
```

----------------------------------------

TITLE: Configure Simple Alert Field Templates in Prometheus
DESCRIPTION: This snippet demonstrates how to embed Go templating within Prometheus alert annotations and labels. Templates are executed for each firing alert, so they should be kept lightweight to avoid performance issues.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/configuration/template_examples.md#_snippet_0

LANGUAGE: yaml
CODE:
```
alert: InstanceDown
expr: up == 0
for: 5m
labels:
  severity: page
annotations:
  summary: "Instance {{$labels.instance}} down"
  description: "{{$labels.instance}} of job {{$labels.job}} has been down for more than 5 minutes."
```

----------------------------------------

TITLE: Bind-mount Prometheus configuration file using Docker
DESCRIPTION: This command runs Prometheus in a Docker container, bind-mounting a specific prometheus.yml file from the host into the container's configuration directory (/etc/prometheus/prometheus.yml). This allows users to provide their own custom configuration.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/installation.md#_snippet_1

LANGUAGE: bash
CODE:
```
docker run \
    -p 9090:9090 \
    -v /path/to/prometheus.yml:/etc/prometheus/prometheus.yml \
    prom/prometheus
```

----------------------------------------

TITLE: Calculate HTTP Request Duration Fraction
DESCRIPTION: This Prometheus expression calculates the estimated fraction of HTTP requests over the last hour that completed within 200 milliseconds (0.2 seconds) using the `histogram_fraction()` function.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/querying/functions.md#_snippet_19

LANGUAGE: Prometheus
CODE:
```
histogram_fraction(0, 0.2, rate(http_request_duration_seconds[1h]))
```

----------------------------------------

TITLE: Prometheus Kubernetes Service Discovery Configuration Options
DESCRIPTION: Defines configuration options for Prometheus's Kubernetes service discovery, including mutually exclusive API server/kubeconfig, namespace discovery, label/field selectors, and metadata attachment. It also highlights performance considerations for selectors and general HTTP client settings.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/configuration/configuration.md#_snippet_107

LANGUAGE: APIDOC
CODE:
```
# Note that api_server and kube_config are mutually exclusive.
[ kubeconfig_file: <filename> ]

# Optional namespace discovery. If omitted, all namespaces are used.
namespaces:
  own_namespace: <boolean>
  names:
    [ - <string> ]

# Optional label and field selectors to limit the discovery process to a subset of available resources.
# See https://kubernetes.io/docs/concepts/overview/working-with-objects/field-selectors/
# and https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/ to learn more about the possible
# filters that can be used. The endpoints role supports pod, service and endpoints selectors.
# The pod role supports node selectors when configured with `attach_metadata: {node: true}`.
# Other roles only support selectors matching the role itself (e.g. node role can only contain node selectors).

# Note: When making decision about using field/label selector make sure that this
# is the best approach - it will prevent Prometheus from reusing single list/watch
# for all scrape configs. This might result in a bigger load on the Kubernetes API,
# because per each selector combination there will be additional LIST/WATCH. On the other hand,
# if you just want to monitor small subset of pods in large cluster it's recommended to use selectors.
# Decision, if selectors should be used or not depends on the particular situation.
[ selectors:
  [ - role: <string>
    [ label: <string> ]
    [ field: <string> ] ]]

# Optional metadata to attach to discovered targets. If omitted, no additional metadata is attached.
attach_metadata:
# Attaches node metadata to discovered targets. Valid for roles: pod, endpoints, endpointslice.
# When set to true, Prometheus must have permissions to get Nodes.
  [ node: <boolean> | default = false ]

# HTTP client settings, including authentication methods (such as basic auth and
# authorization), proxy configurations, TLS options, custom HTTP headers, etc.
[ <http_config> ]
```

----------------------------------------

TITLE: Configure Prometheus Kubernetes Service Discovery
DESCRIPTION: List of Kubernetes service discovery configurations for Prometheus.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/configuration/configuration.md#_snippet_37

LANGUAGE: APIDOC
CODE:
```
kubernetes_sd_configs:
  [ - <kubernetes_sd_config> ... ]
```

----------------------------------------

TITLE: promtool check service-discovery Command
DESCRIPTION: Performs service discovery for a specified job name and reports the results, including relabeling. Requires a Prometheus config file and job name as arguments.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/command-line/promtool.md#_snippet_4

LANGUAGE: APIDOC
CODE:
```
promtool check service-discovery:
  Description: Perform service discovery for the given job name and report the results, including relabeling.
  Flags:
    --timeout: The time to wait for discovery results. (Default: 30s)
  Arguments:
    config-file: The prometheus config file. (Required: Yes)
    job: The job to run service discovery for. (Required: Yes)
```

----------------------------------------

TITLE: Enable OTLP Delta to Cumulative Conversion
DESCRIPTION: Allows Prometheus to convert incoming OTLP metrics from delta temporality to their cumulative equivalent. This conversion utilizes the `deltatocumulative` processor from the OpenTelemetry Collector.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/querying/api.md#_snippet_51

LANGUAGE: APIDOC
CODE:
```
To enable, pass `--enable-feature=otlp-deltatocumulative`.
```

----------------------------------------

TITLE: Prometheus PromQL Expression Test Case Definition
DESCRIPTION: Defines the YAML structure for testing Prometheus PromQL expressions. It includes the PromQL expression to evaluate, the specific time at which the expression should be evaluated, and a list of expected samples that should result from the evaluation.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/configuration/unit_testing_rules.md#_snippet_6

LANGUAGE: APIDOC
CODE:
```
# Expression to evaluate
expr: <string>

# The time elapsed from time=0s when the expression has to be evaluated.
eval_time: <duration>

# Expected samples at the given evaluation time.
exp_samples:
  [ - <sample> ]
```

----------------------------------------

TITLE: Prometheus Expected Sample Structure
DESCRIPTION: Specifies the expected labels and value for a sample resulting from a PromQL expression evaluation in a Prometheus unit test. Labels are defined in the usual series notation, and the value represents the expected numeric outcome of the expression.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/configuration/unit_testing_rules.md#_snippet_7

LANGUAGE: APIDOC
CODE:
```
# Labels of the sample in usual series notation '<metric name>{<label name>=<label value>, ...}'
# Examples:
#      series_name{label1="value1", label2="value2"}
#      go_goroutines{job="prometheus", instance="localhost:9090"}
labels: <string>

# The expected value of the PromQL expression.
value: <number>
```

----------------------------------------

TITLE: Example Prometheus Instant Query Response
DESCRIPTION: Illustrates a sample JSON response from the Prometheus HTTP API for an instant query, showing a vector result with 'up' metrics for different instances and their values.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/querying/api.md#_snippet_6

LANGUAGE: json
CODE:
```
{
   "status" : "success",
   "data" : {
      "resultType" : "vector",
      "result" : [
         {
            "metric" : {
               "__name__" : "up",
               "job" : "prometheus",
               "instance" : "localhost:9090"
            },
            "value": [ 1435781451.781, "1" ]
         },
         {
            "metric" : {
               "__name__" : "up",
               "job" : "node",
               "instance" : "localhost:9100"
            },
            "value" : [ 1435781451.781, "0" ]
         }
      ]
   }
}
```

----------------------------------------

TITLE: Calculate Per-Second Average Rate in PromQL
DESCRIPTION: `rate(v range-vector)` calculates the per-second average rate of increase for time series, automatically adjusting for counter resets and extrapolating to range ends. It works on native histograms by calculating the rate of increase for each component. This function is best suited for counters and for alerting or graphing slow-moving counters. When combining with aggregation, `rate()` should be applied first.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/querying/functions.md#_snippet_45

LANGUAGE: APIDOC
CODE:
```
rate(v range-vector)
  v: The range vector for which to calculate the rate.
```

LANGUAGE: PromQL
CODE:
```
rate(http_requests_total{job="api-server"}[5m])
```

----------------------------------------

TITLE: Example Prometheus Recording Rule Configuration
DESCRIPTION: This example illustrates a simple Prometheus rule file containing a recording rule within a group. It demonstrates how to define a new time series (`code:prometheus_http_requests_total:sum`) based on an aggregation of an existing metric, which can then be queried much faster.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/configuration/recording_rules.md#_snippet_2

LANGUAGE: yaml
CODE:
```
groups:
  - name: example
    rules:
    - record: code:prometheus_http_requests_total:sum
      expr: sum by (code) (prometheus_http_requests_total)
```

----------------------------------------

TITLE: APIDOC: quantile Aggregation Operator
DESCRIPTION: Documentation for `quantile` aggregation operator. This operator calculates the φ-quantile, which is the value ranking at number φ*N among N metric values. φ is provided as an aggregation parameter (e.g., `quantile(0.5, ...)` for median, `quantile(0.95, ...)` for 95th percentile). Special handling for φ: `NaN` returns `NaN`, φ < 0 returns `-Inf`, and φ > 1 returns `+Inf`.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/querying/operators.md#_snippet_17

LANGUAGE: APIDOC
CODE:
```
`quantile` calculates the φ-quantile, the value that ranks at number φ*N among the N metric values of the dimensions aggregated over. φ is provided as the aggregation parameter. For example, `quantile(0.5, ...)` calculates the median, `quantile(0.95, ...)` the 95th percentile. For φ = `NaN`, `NaN` is returned. For φ < 0, `-Inf` is returned. For φ > 1, `+Inf` is returned.
```

----------------------------------------

TITLE: Prometheus HTTP API JSON Response Envelope Format
DESCRIPTION: Defines the standard JSON structure for all successful and error responses from the Prometheus HTTP API, including status, data, error details, warnings, and info annotations.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/querying/api.md#_snippet_0

LANGUAGE: json
CODE:
```
{
  "status": "success" | "error",
  "data": <data>,

  // Only set if status is "error". The data field may still hold
  // additional data.
  "errorType": "<string>",
  "error": "<string>",

  // Only set if there were warnings while executing the request.
  // There will still be data in the data field.
  "warnings": ["<string>"],
  // Only set if there were info-level annotations while executing the request.
  "infos": ["<string>"]
}
```

----------------------------------------

TITLE: Set Query Timeout
DESCRIPTION: Defines the maximum time a query may take before being aborted. This flag is for use with server mode only.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/command-line/prometheus.md#_snippet_19

LANGUAGE: APIDOC
CODE:
```
--query.timeout <duration>
Default: 2m
Usage: server mode only
```

----------------------------------------

TITLE: Delay `__name__` Label Removal in PromQL Engine
DESCRIPTION: This feature flag changes how the `__name__` label is removed from PromQL query results, delaying its removal to the last step of evaluation. This allows preserving the label with `label_replace` and `label_join`, and helps prevent 'vector cannot contain metrics with the same labelset' errors.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/feature_flags.md#_snippet_11

LANGUAGE: Bash
CODE:
```
--enable-feature=promql-delayed-name-removal
```

----------------------------------------

TITLE: APIDOC: topk and bottomk Aggregation Operators
DESCRIPTION: Documentation for `topk` and `bottomk` aggregation operators. These operators return a subset of input samples, including original labels. `by` and `without` are used for bucketing. They operate only on float samples, treating `NaN` values as farthest from top/bottom. Histogram samples are ignored. In instant queries, results are ordered by value. With `by`/`without`, series within buckets are sorted, but bucket order is not guaranteed. No sorting applies to range queries.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/querying/operators.md#_snippet_12

LANGUAGE: APIDOC
CODE:
```
`topk` and `bottomk` are different from other aggregators in that a subset of the input samples, including the original labels, are returned in the result vector. `by` and `without` are only used to bucket the input vector. Similar to `min` and `max`, they only operate on float samples, considering `NaN` values to be farthest from the top or bottom, respectively. Histogram samples in the input vector are ignored, flagged by an info-level annotation.

If used in an instant query, `topk` and `bottomk` return series ordered by value in descending or ascending order, respectively. If used with `by` or `without`, then series within each bucket are sorted by value, and series in the same bucket are returned consecutively, but there is no guarantee that buckets of series will be returned in any particular order. No sorting applies to range queries.
```

----------------------------------------

TITLE: Promtool TSDB: Create Blocks From Recording Rules
DESCRIPTION: This command creates blocks of data specifically for new recording rules. It allows backfilling data based on existing Prometheus data.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/command-line/promtool.md#_snippet_34

LANGUAGE: APIDOC
CODE:
```
Command: promtool tsdb create-blocks-from rules
Description: Create blocks of data for new recording rules.
Flags:
  --http.config.file: HTTP client configuration file for promtool to connect to Prometheus.
  --url: The URL for the Prometheus API with the data where the rule will be backfilled from. (Default: http://localhost:9090)
  --start: The time to start backfilling the new rule from. Must be a RFC3339 formatted date or Unix timestamp. Required.
  --end: If an end time is provided, all recording rules in the rule files provided will be backfilled to the end time. Default will backfill up to 3 hours ago. Must be a RFC3339 formatted date or Unix timestamp.
  --output-dir: Output directory for generated blocks. (Default: data/)
  --eval-interval: How frequently to evaluate rules when backfilling if a value is not set in the recording rule files. (Default: 60s)
Arguments:
  rule-files: A list of one or more files containing recording rules to be backfilled. All recording rules listed in the files will be backfilled. Alerting rules are not evaluated. (Required: Yes)
```

----------------------------------------

TITLE: RPC Latency Summary Metric
DESCRIPTION: Offers a summary of RPC latency distributions, including approximate quantiles (0.5, 0.9, 0.99) for different service types (exponential, normal, uniform). It also provides the sum of all observed latencies and the total count of observations.
SOURCE: https://github.com/prometheus/prometheus/blob/main/model/textparse/testdata/alltypes.5mfs.om.txt#_snippet_3

LANGUAGE: Prometheus Metrics
CODE:
```
# HELP rpc_durations_seconds RPC latency distributions.
# TYPE rpc_durations_seconds summary
rpc_durations_seconds{service="exponential",quantile="0.5"} 7.689368882420941e-07
rpc_durations_seconds{service="exponential",quantile="0.9"} 1.6537614174305048e-06
rpc_durations_seconds{service="exponential",quantile="0.99"} 2.0965499063061924e-06
rpc_durations_seconds_sum{service="exponential"} 2.0318666372575776e-05
rpc_durations_seconds_count{service="exponential"} 22
rpc_durations_seconds_created{service="exponential"} 1.7268398130168908e+09
rpc_durations_seconds{service="normal",quantile="0.5"} -5.066758674917046e-06
rpc_durations_seconds{service="normal",quantile="0.9"} 0.0002935723711788224
rpc_durations_seconds{service="normal",quantile="0.99"} 0.0003023094636293776
rpc_durations_seconds_sum{service="normal"} -8.452185437166741e-05
rpc_durations_seconds_count{service="normal"} 15
rpc_durations_seconds_created{service="normal"} 1.726839813016714e+09
rpc_durations_seconds{service="uniform",quantile="0.5"} 9.005014931474918e-05
rpc_durations_seconds{service="uniform",quantile="0.9"} 0.00017801230208182325
rpc_durations_seconds{service="uniform",quantile="0.99"} 0.00018641524538180192
rpc_durations_seconds_sum{service="uniform"} 0.0011666095700533677
rpc_durations_seconds_count{service="uniform"} 11
rpc_durations_seconds_created{service="uniform"} 1.72683981301684e+09
```

----------------------------------------

TITLE: Select Time Series Excluding Labels by Regex
DESCRIPTION: To select all HTTP status codes except 4xx ones.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/querying/examples.md#_snippet_4

LANGUAGE: PromQL
CODE:
```
http_requests_total{status!~"4.."}
```

----------------------------------------

TITLE: promtool check config Command
DESCRIPTION: Checks the validity of Prometheus configuration files, offering options for syntax-only checks, linting, and ignoring unknown fields. It can also check configurations for Prometheus in Agent mode.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/command-line/promtool.md#_snippet_5

LANGUAGE: APIDOC
CODE:
```
promtool check config:
  Description: Check if the config files are valid or not.
  Flags:
    --syntax-only: Only check the config file syntax, ignoring file and content validation referenced in the config.
    --lint: Linting checks to apply to the rules/scrape configs specified in the config. Available options are: all, duplicate-rules, none, too-long-scrape-interval. Use --lint=none to disable linting. (Default: duplicate-rules)
    --lint-fatal: Make lint errors exit with exit code 3. (Default: false)
    --ignore-unknown-fields: Ignore unknown fields in the rule groups read by the config files. This is useful when you want to extend rule files with custom metadata. Ensure that those fields are removed before loading them into the Prometheus server as it performs strict checks by default. (Default: false)
    --agent: Check config file for Prometheus in Agent mode.
  Arguments:
    config-files: The config files to check. (Required: Yes)
```

----------------------------------------

TITLE: PromQL Aggregation Functions: _over_time()
DESCRIPTION: The `_over_time()` functions allow for aggregating series of a given range vector over a specified time interval, returning an instant vector with per-series aggregation results. These functions handle float and histogram samples differently, with some requiring an experimental feature flag.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/querying/functions.md#_snippet_59

LANGUAGE: APIDOC
CODE:
```
<aggregation>_over_time(range-vector)
  Description: Aggregates each series of a given range vector over time and returns an instant vector with per-series aggregation results. All values in the specified interval have the same weight.

  Histogram Handling:
    - count_over_time, last_over_time, present_over_time(): Act on float and histogram samples in the same way.
    - avg_over_time(), sum_over_time(): Act on histogram samples in a way that corresponds to the respective aggregation operators. If a series contains a mix of float samples and histogram samples within the range, the corresponding result is removed entirely from the output vector (flagged by a warn-level annotation).
    - All other functions: Ignore histogram samples. Input ranges containing only histogram samples are silently removed from the output. For ranges with a mix of histogram and float samples, only the float samples are processed and the omission of the histogram samples is flagged by an info-level annotation.

  Functions:
    avg_over_time(range-vector): The average value of all float or histogram samples in the specified interval.
    min_over_time(range-vector): The minimum value of all float samples in the specified interval.
    max_over_time(range-vector): The maximum value of all float samples in the specified interval.
    sum_over_time(range-vector): The sum of all float or histogram samples in the specified interval.
    count_over_time(range-vector): The count of all samples in the specified interval.
    quantile_over_time(scalar, range-vector): The φ-quantile (0 ≤ φ ≤ 1) of all float samples in the specified interval.
    stddev_over_time(range-vector): The population standard deviation of all float samples in the specified interval.
    stdvar_over_time(range-vector): The population standard variance of all float samples in the specified interval.
    last_over_time(range-vector): The most recent sample in the specified interval.
    present_over_time(range-vector): The value 1 for any series in the specified interval.

  Experimental Functions (requires --enable-feature=promql-experimental-functions):
    mad_over_time(range-vector): The median absolute deviation of all float samples in the specified interval.
```

----------------------------------------

TITLE: Prometheus Alerting Rule Configuration (APIDOC)
DESCRIPTION: This API documentation specifies the syntax for defining an alerting rule in Prometheus. It includes fields such as `alert` for the alert name, `expr` for the PromQL expression, `for` for pending duration, `keep_firing_for` for sustained firing, and optional `labels` and `annotations` for adding metadata to each alert.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/configuration/recording_rules.md#_snippet_5

LANGUAGE: APIDOC
CODE:
```
# The name of the alert. Must be a valid label value.
alert: <string>

# The PromQL expression to evaluate. Every evaluation cycle this is
# evaluated at the current time, and all resultant time series become
# pending/firing alerts.
expr: <string>

# Alerts are considered firing once they have been returned for this long.
# Alerts which have not yet fired for long enough are considered pending.
[ for: <duration> | default = 0s ]

# How long an alert will continue firing after the condition that triggered it
# has cleared.
[ keep_firing_for: <duration> | default = 0s ]

# Labels to add or overwrite for each alert.
labels:
  [ <labelname>: <tmpl_string> ]

# Annotations to add to each alert.
annotations:
  [ <labelname>: <tmpl_string> ]
```

----------------------------------------

TITLE: PromQL Query for Averaged CPU Rate
DESCRIPTION: This PromQL expression calculates the per-second rate of CPU time, averaged over all CPUs per instance, while preserving job, instance, and mode dimensions. It's designed to aggregate node_cpu_seconds_total over a 5-minute window, useful for creating recording rules.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/getting_started.md#_snippet_9

LANGUAGE: promql
CODE:
```
avg by (job, instance, mode) (rate(node_cpu_seconds_total[5m]))
```

----------------------------------------

TITLE: Count Running Instances per Application
DESCRIPTION: Assuming a metric contains one time series per running instance, this query counts the number of running instances per application.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/querying/examples.md#_snippet_12

LANGUAGE: PromQL
CODE:
```
count by (app) (instance_cpu_time_ns)
```

----------------------------------------

TITLE: PromQL: Get Top 5 HTTP Request Counts
DESCRIPTION: Retrieves the 5 time series with the largest `http_requests_total` values across all instances, returning the original labels along with the values.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/querying/operators.md#_snippet_22

LANGUAGE: PromQL
CODE:
```
topk(5, http_requests_total)
```

----------------------------------------

TITLE: Prometheus Static Target Configuration
DESCRIPTION: Defines a list of statically configured targets with labels for a scrape job.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/configuration/configuration.md#_snippet_51

LANGUAGE: APIDOC
CODE:
```
static_configs:
  [ - <static_config> ... ]
```

----------------------------------------

TITLE: Example Prometheus Instant Query using cURL
DESCRIPTION: Demonstrates how to perform an instant query for the 'up' metric at a specific timestamp using the cURL command-line tool against the Prometheus HTTP API.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/querying/api.md#_snippet_5

LANGUAGE: bash
CODE:
```
curl 'http://localhost:9090/api/v1/query?query=up&time=2015-07-01T20:10:51.781Z'
```

----------------------------------------

TITLE: PromQL Offset Modifier for Time Shifting
DESCRIPTION: Demonstrates how to use the `offset` modifier to shift the evaluation time of instant and range vectors. The `offset` modifier must immediately follow the selector. Examples include shifting by minutes, weeks, and using negative offsets for future comparisons.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/querying/basics.md#_snippet_19

LANGUAGE: PromQL
CODE:
```
http_requests_total offset 5m
```

LANGUAGE: PromQL
CODE:
```
sum(http_requests_total{method="GET"} offset 5m) // GOOD.
```

LANGUAGE: PromQL
CODE:
```
sum(http_requests_total{method="GET"}) offset 5m // INVALID.
```

LANGUAGE: PromQL
CODE:
```
rate(http_requests_total[5m] offset 1w)
```

LANGUAGE: PromQL
CODE:
```
rate(http_requests_total[5m] offset -1w)
```

----------------------------------------

TITLE: Prometheus HTTP API Instant Query URL Parameters
DESCRIPTION: Lists the URL query parameters available for the Prometheus instant query endpoint, including the query string, optional evaluation timestamp, timeout, and a limit on the number of returned series.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/querying/api.md#_snippet_3

LANGUAGE: APIDOC
CODE:
```
query=<string>: Prometheus expression query string.
time=<rfc3339 | unix_timestamp>: Evaluation timestamp. Optional.
timeout=<duration>: Evaluation timeout. Optional. Defaults to and
   is capped by the value of the `-query.timeout` flag.
limit=<number>: Maximum number of returned series. Doesn’t affect scalars or strings but truncates the number of series for matrices and vectors. Optional. 0 means disabled.
```

----------------------------------------

TITLE: Prometheus HTTP API Instant Query Endpoint
DESCRIPTION: Details the HTTP endpoint for evaluating Prometheus expression queries at a single point in time, supporting both GET and POST methods to accommodate large queries.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/querying/api.md#_snippet_2

LANGUAGE: APIDOC
CODE:
```
GET /api/v1/query
POST /api/v1/query
```

----------------------------------------

TITLE: Prometheus Management API: Readiness Check Endpoint
DESCRIPTION: Verifies if Prometheus is fully initialized and ready to process queries and serve traffic. This endpoint returns 200 OK when Prometheus is operational.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/management_api.md#_snippet_1

LANGUAGE: APIDOC
CODE:
```
GET /-/ready
HEAD /-/ready
```

----------------------------------------

TITLE: Set Max Query Samples
DESCRIPTION: Sets the maximum number of samples a single query can load into memory. Queries will fail if they attempt to load more samples than this limit, which also restricts the number of samples a query can return. This flag is for use with server mode only.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/command-line/prometheus.md#_snippet_21

LANGUAGE: APIDOC
CODE:
```
--query.max-samples <int>
Default: 50000000
Usage: server mode only
```

----------------------------------------

TITLE: Prometheus Management API: Configuration Reload Endpoint
DESCRIPTION: Triggers a dynamic reload of Prometheus's configuration and rule files without restarting the server. This functionality is disabled by default and requires the --web.enable-lifecycle flag to be enabled. Alternatively, a SIGHUP signal can achieve the same.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/management_api.md#_snippet_2

LANGUAGE: APIDOC
CODE:
```
PUT  /-/reload
POST /-/reload
```

----------------------------------------

TITLE: Prometheus Common Service Discovery Configuration Parameters
DESCRIPTION: Defines common configuration parameters applicable to Prometheus service discovery mechanisms, including authentication credentials, tenant scope, refresh intervals, scraping port, and endpoint availability. It also mentions a `tls_config` block for secure connections.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/configuration/configuration.md#_snippet_88

LANGUAGE: APIDOC
CODE:
```
# credential to authenticate.
[ application_credential_secret: <secret> ]

# Whether the service discovery should list all instances for all projects.
# It is only relevant for the 'instance' role and usually requires admin permissions.
[ all_tenants: <boolean> | default: false ]

# Refresh interval to re-read the instance list.
[ refresh_interval: <duration> | default = 60s ]

# The port to scrape metrics from. If using the public IP address, this must
# instead be specified in the relabeling rule.
[ port: <int> | default = 80 ]

# The availability of the endpoint to connect to. Must be one of public, admin or internal.
[ availability: <string> | default = "public" ]

# TLS configuration.
tls_config:
  [ <tls_config> ]
```

----------------------------------------

TITLE: Run Prometheus with default configuration using Docker
DESCRIPTION: This command starts a Prometheus container with a sample configuration, exposing it on port 9090. It's a basic way to get Prometheus running quickly for initial setup or testing.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/installation.md#_snippet_0

LANGUAGE: bash
CODE:
```
docker run -p 9090:9090 prom/prometheus
```

----------------------------------------

TITLE: Filter Time Series with Regex and Negative Label Matchers (PromQL)
DESCRIPTION: Shows how to use regular expression (`=~`) and negative (`!=`) label matchers to select time series. This example filters for specific environments and excludes a particular HTTP method.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/querying/basics.md#_snippet_10

LANGUAGE: PromQL
CODE:
```
http_requests_total{environment=~"staging|testing|development",method!="GET"}
```

----------------------------------------

TITLE: Match operators
DESCRIPTION: This snippet showcases the parsing of various label match operators in PromQL, including equality (=), inequality (!=), regex match (=~), and regex non-match (!~). It details how these operators are represented within the AST as different MatchOp types.
SOURCE: https://github.com/prometheus/prometheus/blob/main/web/ui/module/lezer-promql/test/expression.txt#_snippet_13

LANGUAGE: PromQL
CODE:
```
metric_name{a="1",b!="2",c=~"3",d!~"4"}
```

LANGUAGE: PromQL AST
CODE:
```
PromQL(
    VectorSelector(
      Identifier,
      LabelMatchers(
        UnquotedLabelMatcher(
            LabelName,
            MatchOp(EqlSingle),
            StringLiteral
        ),
        UnquotedLabelMatcher(
            LabelName,
            MatchOp(Neq),
            StringLiteral
        ),
        UnquotedLabelMatcher(
            LabelName,
            MatchOp(EqlRegex),
            StringLiteral
        ),
        UnquotedLabelMatcher(
            LabelName,
            MatchOp(NeqRegex),
            StringLiteral
        )
      )
    )
)
```

----------------------------------------

TITLE: Querying OTLP Delta Metrics with PromQL
DESCRIPTION: Guidance on querying natively ingested OTLP delta metrics using PromQL. Standard counter functions like `rate()` and `increase()` are unsuitable for delta metrics and will produce incorrect results. Instead, `sum_over_time()` should be used to aggregate delta values over a specified range, or to calculate a per-second rate.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/feature_flags.md#_snippet_18

LANGUAGE: PromQL
CODE:
```
sum_over_time(delta_metric[<range>])
```

LANGUAGE: PromQL
CODE:
```
sum_over_time(delta_metric[<range>]) / <range>
```

----------------------------------------

TITLE: Prometheus Scrape Label Name Length Limit
DESCRIPTION: Sets a limit on the length (in bytes) of individual label names after metric relabeling. If any label name is longer, the entire scrape will fail. Label names are UTF-8 encoded. A value of 0 means no limit.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/configuration/configuration.md#_snippet_57

LANGUAGE: APIDOC
CODE:
```
[ label_name_length_limit: <int> | default = 0 ]
```

----------------------------------------

TITLE: APIDOC: limitk and limit_ratio Aggregation Operators
DESCRIPTION: Documentation for `limitk` and `limit_ratio` aggregation operators. These operators return a deterministic pseudo-random subset of input samples, preserving original labels. `limitk` selects _k_ samples, while `limit_ratio` selects a ratio _r_ of samples (determined by `parameter`). They work with both float and histogram samples. _r_ can be between +1 and -1; its absolute value is the selection ratio, but a negative _r_ inverts selection order, useful for selecting complements (e.g., `limit_ratio(-0.9, ...)` returns the complement of `limit_ratio(0.1, ...)`).
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/querying/operators.md#_snippet_13

LANGUAGE: APIDOC
CODE:
```
`limitk` and `limit_ratio` also return a subset of the input samples, including the original labels in the result vector. The subset is selected in a deterministic pseudo-random way. `limitk` picks _k_ samples, while `limit_ratio` picks a ratio _r_ of samples (each determined by `parameter`). This happens independent of the sample type. Therefore, it works for both float samples and histogram samples. _r_ can be between +1 and -1. The absolute value of _r_ is used as the selection ratio, but the selection order is inverted for a negative _r_, which can be used to select complements. For example, `limit_ratio(0.1, ...)` returns a deterministic set of approximatiely 10% of the input samples, while `limit_ratio(-0.9, ...)` returns precisely the remaining approximately 90% of the input samples not returned by `limit_ratio(0.1, ...)`. 
```

----------------------------------------

TITLE: PromQL Function: absent() - Check for Absence of Time Series
DESCRIPTION: The `absent()` function returns an empty vector if the input vector contains any elements (float or histogram samples). If the input vector has no elements, it returns a 1-element vector with the value 1. This is particularly useful for alerting when no time series exist for a specified metric name and label combination.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/querying/functions.md#_snippet_1

LANGUAGE: APIDOC
CODE:
```
absent(v instant-vector)
```

LANGUAGE: PromQL
CODE:
```
absent(nonexistent{job="myjob"})
# => {job="myjob"}

absent(nonexistent{job="myjob",instance=~\".*\"})
# => {job="myjob"}

absent(sum(nonexistent{job="myjob"}))
# => {}
```

----------------------------------------

TITLE: Prometheus Metric Relabeling Configuration
DESCRIPTION: Defines a list of configurations for relabeling metrics after scraping.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/configuration/configuration.md#_snippet_53

LANGUAGE: APIDOC
CODE:
```
metric_relabel_configs:
  [ - <relabel_config> ... ]
```

----------------------------------------

TITLE: Create a TSDB Snapshot
DESCRIPTION: This administrative API allows creating a snapshot of all current TSDB data into a new directory under the data directory. It can optionally skip data present only in the head block that has not yet been compacted to disk. This API requires the `--web.enable-admin-api` flag to be set.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/querying/api.md#_snippet_46

LANGUAGE: APIDOC
CODE:
```
POST /api/v1/admin/tsdb/snapshot
PUT /api/v1/admin/tsdb/snapshot
  Description: Creates a snapshot of all current data into 'snapshots/<datetime>-<rand>' under the TSDB's data directory.
  Query Parameters:
    skip_head: boolean (Optional)
      Description: Skip data present in the head block that has not yet been compacted to disk.
  Response:
    Type: JSON object
    Properties:
      status: string ("success")
      data: object
        name: string (The name of the created snapshot directory.)
  Notes:
    - Requires '--web.enable-admin-api' to be set.
    - Snapshot location: '<data-dir>/snapshots/<snapshot-name>'
    - PUT method supported from v2.9.
```

LANGUAGE: bash
CODE:
```
curl -XPOST http://localhost:9090/api/v1/admin/tsdb/snapshot
```

LANGUAGE: json
CODE:
```
{
  "status": "success",
  "data": {
    "name": "20171210T211224Z-2be650b6d019eb54"
  }
}
```

----------------------------------------

TITLE: Define and Reuse Templates in Prometheus
DESCRIPTION: This section demonstrates how to define reusable templates using `{{define "name"}}...{{end}}` and then invoke them with `{{template "name"}}`. It also illustrates passing multiple arguments to a template using the `args` function, enhancing modularity and code sharing.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/configuration/template_examples.md#_snippet_5

LANGUAGE: go-template
CODE:
```
{{/* Define the template */}}
{{define "myTemplate"}}
  do something
{{end}}

{{/* Use the template */}}
{{template "myTemplate"}}
```

LANGUAGE: go-template
CODE:
```
{{define "myMultiArgTemplate"}}
  First argument: {{.arg0}}
  Second argument: {{.arg1}}
{{end}}
{{template "myMultiArgTemplate" (args 1 2)}}
```

----------------------------------------

TITLE: Enable Type and Unit Labels Feature in Prometheus
DESCRIPTION: This feature flag enables Prometheus to inject reserved `__type__` and `__unit__` labels into metrics, sourced from existing scrape and ingestion formats. It allows users to select metrics based on type or unit and handle series with the same name but different types/units, improving metadata accessibility in PromQL.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/feature_flags.md#_snippet_19

LANGUAGE: Shell
CODE:
```
--enable-feature=type-and-unit-labels
```

----------------------------------------

TITLE: Set Max Concurrent Rule Evaluations
DESCRIPTION: Establishes a global concurrency limit for independent rules that can run concurrently. If this flag is set, the 'query.max-concurrency' flag may need to be adjusted accordingly. This flag is for use with server mode only.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/command-line/prometheus.md#_snippet_14

LANGUAGE: APIDOC
CODE:
```
--rules.max-concurrent-evals <int>
Default: 4
Usage: server mode only
```

----------------------------------------

TITLE: Calculate Rate Over a Subquery Range
DESCRIPTION: Return the 5-minute rate of the `http_requests_total` metric for the past 30 minutes, with a resolution of 1 minute.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/querying/examples.md#_snippet_5

LANGUAGE: PromQL
CODE:
```
rate(http_requests_total[5m])[30m:1m]
```

----------------------------------------

TITLE: Prometheus File-Based Service Discovery Configuration Schema
DESCRIPTION: Specifies the configuration parameters for Prometheus's file-based service discovery. It defines patterns for files from which target groups are extracted and the refresh interval for re-reading these files. It also notes the __meta_filepath meta label available during relabeling.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/configuration/configuration.md#_snippet_95

LANGUAGE: YAML
CODE:
```
# Patterns for files from which target groups are extracted.
files:
  [ - <filename_pattern> ... ]

# Refresh interval to re-read the files.
[ refresh_interval: <duration> | default = 5m ]
```

----------------------------------------

TITLE: PromQL Invalid Time Duration Unit Combinations
DESCRIPTION: This snippet highlights examples of invalid syntax when attempting to combine time units with float literals in PromQL, such as suffixing hexadecimal numbers, using floating-point numbers with units, or suffixing special values like ±Inf or NaN.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/querying/basics.md#_snippet_6

LANGUAGE: PromQL
CODE:
```
0xABm # No suffixing of hexadecimal numbers.
1.5h # Time units cannot be combined with a floating point.
+Infd # No suffixing of ±Inf or NaN.
```

----------------------------------------

TITLE: Promtool Check Metrics Command
DESCRIPTION: The `promtool check metrics` command is used to lint Prometheus metrics passed via standard input for consistency and correctness. It helps ensure that metrics adhere to Prometheus best practices.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/command-line/promtool.md#_snippet_10

LANGUAGE: APIDOC
CODE:
```
Command: promtool check metrics
  Description: Pass Prometheus metrics over stdin to lint them for consistency and correctness.
  Flags:
    --lint <string> (Default: duplicate-rules): Linting checks to apply. Available options are: all, duplicate-rules, none. Use --lint=none to disable linting.
    --lint-fatal <boolean> (Default: false): Make lint errors exit with exit code 3.
    --ignore-unknown-fields <boolean> (Default: false): Ignore unknown fields in the rule files. This is useful when you want to extend rule files with custom metadata. Ensure that those fields are removed before loading them into the Prometheus server as it performs strict checks by default.
  Arguments:
    rule-files <string>: The rule files to check, default is read from standard input.
```

LANGUAGE: shell
CODE:
```
cat metrics.prom | promtool check metrics
```

LANGUAGE: shell
CODE:
```
curl -s http://localhost:9090/metrics | promtool check metrics
```

----------------------------------------

TITLE: Prometheus Configuration: Remote Write Settings
DESCRIPTION: Defines settings related to the remote write feature, allowing Prometheus to send scraped data to remote storage systems.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/configuration/configuration.md#_snippet_13

LANGUAGE: APIDOC
CODE:
```
remote_write:
  - <remote_write> ...
```

----------------------------------------

TITLE: Query Prometheus Label Values API
DESCRIPTION: This section outlines the Prometheus API endpoint for retrieving all values associated with a specific label name. It supports the GET method and optional URL query parameters for time range and series filtering. It also explains the "Values Escaping" method required for label names containing special characters like `/`, demonstrating how to encode them using UTF-8 codepoints.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/querying/api.md#_snippet_16

LANGUAGE: APIDOC
CODE:
```
GET /api/v1/label/<label_name>/values

URL Query Parameters:
  start: <rfc3339 | unix_timestamp> (Optional) - Start timestamp.
  end: <rfc3339 | unix_timestamp> (Optional) - End timestamp.
  match[]: <series_selector> (Optional) - Repeated series selector argument that selects the series from which to read the label values.
  limit: <number> (Optional) - Maximum number of returned series. 0 means disabled.

Response Data:
  A list of string label values.

Label Name Encoding (Values Escaping):
  - Prepend label with 'U__'.
  - Letters, numbers, colons appear as-is.
  - Single underscores convert to double underscores.
  - Other characters: UTF-8 codepoint as hex integer, surrounded by underscores (e.g., ' ' becomes '_20_', '.' becomes '_2e_').
```

LANGUAGE: bash
CODE:
```
curl http://localhost:9090/api/v1/label/http_status_code/values
```

LANGUAGE: json
CODE:
```
{
   "status" : "success",
   "data" : [
      "200",
      "504"
   ]
}
```

LANGUAGE: bash
CODE:
```
curl http://localhost:9090/api/v1/label/U__http_2e_status_code/values
```

LANGUAGE: json
CODE:
```
{
   "status" : "success",
   "data" : [
      "200",
      "404"
   ]
}
```

----------------------------------------

TITLE: promtool check rules Command
DESCRIPTION: Checks the validity of Prometheus rule files.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/command-line/promtool.md#_snippet_9

LANGUAGE: APIDOC
CODE:
```
promtool check rules:
  Description: Check if the rule files are valid or not.
```

----------------------------------------

TITLE: PromQL Time Duration Units Reference
DESCRIPTION: This API documentation lists the available time units in PromQL that can be combined with decimal integer numbers to specify durations, along with their equivalences in seconds and specific considerations (e.g., ignoring leap seconds).
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/querying/basics.md#_snippet_4

LANGUAGE: APIDOC
CODE:
```
ms – milliseconds
s – seconds – 1s equals 1000ms
m – minutes – 1m equals 60s (ignoring leap seconds)
h – hours – 1h equals 60m
d – days – 1d equals 24h (ignoring so-called daylight saving time)
w – weeks – 1w equals 7d
y – years – 1y equals 365d (ignoring leap days)
```

----------------------------------------

TITLE: PromQL Subquery Syntax
DESCRIPTION: Defines the syntax for PromQL subqueries, which allow running an instant query over a specified range and optional resolution, resulting in a range vector. It also shows how `offset` and `@` modifiers can be applied to subqueries.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/querying/basics.md#_snippet_21

LANGUAGE: PromQL
CODE:
```
<instant_query> '[' <range> ':' [<resolution>] ']' [ @ <float_literal> ] [ offset <float_literal> ]
```

----------------------------------------

TITLE: Configure Prometheus HTTP Client Settings
DESCRIPTION: The `http_config` parameter allows for comprehensive configuration of HTTP client settings, including authentication methods (basic auth, authorization), proxy settings, TLS options, and custom HTTP headers.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/configuration/configuration.md#_snippet_23

LANGUAGE: APIDOC
CODE:
```
[ <http_config> ]
```

----------------------------------------

TITLE: PromQL: Sum HTTP Requests Excluding Instance
DESCRIPTION: Calculates the total number of HTTP requests per application and group by summing `http_requests_total` and excluding the `instance` label from the aggregation grouping.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/querying/operators.md#_snippet_18

LANGUAGE: PromQL
CODE:
```
sum without (instance) (http_requests_total)
```

----------------------------------------

TITLE: Prometheus Recording Rule Configuration (APIDOC)
DESCRIPTION: This API documentation outlines the syntax for defining a recording rule within Prometheus. It details the `record` field for the output metric name, the `expr` field for the PromQL expression to be evaluated, and optional `labels` to attach to the newly recorded time series.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/configuration/recording_rules.md#_snippet_4

LANGUAGE: APIDOC
CODE:
```
# The name of the time series to output to. Must be a valid metric name.
record: <string>

# The PromQL expression to evaluate. Every evaluation cycle this is
# evaluated at the current time, and the result recorded as a new set of
# time series with the metric name as given by 'record'.
expr: <string>

# Labels to add or overwrite before storing the result.
labels:
  [ <labelname>: <labelvalue> ]
```

----------------------------------------

TITLE: Prometheus Alert Test Case Definition
DESCRIPTION: Defines the YAML structure for testing Prometheus alerting rules. It specifies the evaluation time, the alert name to be tested, and a list of expected firing alerts. This allows users to verify if specific alerts are firing or not firing under given conditions.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/configuration/unit_testing_rules.md#_snippet_4

LANGUAGE: APIDOC
CODE:
```
# The time elapsed from time=0s when the alerts have to be checked.
eval_time: <duration>

# Name of the alert to be tested.
alertname: <string>

# List of expected alerts which are firing under the given alertname at
# given evaluation time. If you want to test if an alerting rule should
# not be firing, then you can mention the above fields and leave 'exp_alerts' empty.
exp_alerts:
  [ - <alert> ]
```

----------------------------------------

TITLE: Prometheus Remote Write Queue and Metadata Configuration
DESCRIPTION: Configures the queue for writing samples to remote storage, including buffering capacity, maximum and minimum concurrency (shards), batch size, send deadlines, and retry backoff strategies. It also defines settings for sending series metadata, such as frequency and whether to send it, and includes a placeholder for HTTP client settings.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/configuration/configuration.md#_snippet_132

LANGUAGE: APIDOC
CODE:
```
queue_config:
  capacity: <int> | default = 10000
  max_shards: <int> | default = 50
  min_shards: <int> | default = 1
  max_samples_per_send: <int> | default = 2000
  batch_send_deadline: <duration> | default = 5s
  min_backoff: <duration> | default = 30ms
  max_backoff: <duration> | default = 5s
  retry_on_http_429: <boolean> | default = false
  sample_age_limit: <duration> | default = 0s
metadata_config:
  send: <boolean> | default = true
  send_interval: <duration> | default = 1m
  max_samples_per_send: <int> | default = 500
http_config: <http_config>
```

----------------------------------------

TITLE: Prometheus Target Labeling and Relabeling
DESCRIPTION: Describes how the scrape pool applies default target labels (such as `job` and `instance`) to each target and then applies target relabeling configurations to produce the final list of targets to be scraped.
SOURCE: https://github.com/prometheus/prometheus/blob/main/documentation/internal_architecture.md#_snippet_4

LANGUAGE: APIDOC
CODE:
```
Process: Target Labeling and Relabeling
Component: Scrape Pool
Action:
  - Applies default target labels (e.g., 'job', 'instance') to each target.
  - Applies target relabeling configurations (relabel_config) to produce final list of targets.
```

----------------------------------------

TITLE: Configure Prometheus Docker Service Discovery
DESCRIPTION: List of Docker service discovery configurations for Prometheus.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/configuration/configuration.md#_snippet_27

LANGUAGE: APIDOC
CODE:
```
docker_sd_configs:
  [ - <docker_sd_config> ... ]
```

----------------------------------------

TITLE: Retrieve Prometheus TSDB Cardinality Statistics
DESCRIPTION: This API endpoint provides various cardinality statistics about the Prometheus TSDB, including head block stats, series count by metric name, label value counts, memory usage by label name, and series count by label pair. It supports an optional `limit` query parameter to control the number of returned items.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/querying/api.md#_snippet_44

LANGUAGE: APIDOC
CODE:
```
GET /api/v1/status/tsdb
  Description: Returns various cardinality statistics about the Prometheus TSDB.
  Query Parameters:
    limit: number (Optional)
      Description: Limit the number of returned items for each set of statistics. Default: 10.
  Response:
    Type: JSON object
    Properties:
      status: string ("success")
      data: object
        headStats: object
          numSeries: number (The number of series.)
          chunkCount: number (The number of chunks.)
          minTime: number (The current minimum timestamp in milliseconds.)
          maxTime: number (The current maximum timestamp in milliseconds.)
        seriesCountByMetricName: array of objects
          name: string (Metric name)
          value: number (Series count)
        labelValueCountByLabelName: array of objects
          name: string (Label name)
          value: number (Value count)
        memoryInBytesByLabelName: array of objects
          name: string (Label name)
          value: number (Memory used in bytes)
        seriesCountByLabelPair: array of objects
          name: string (Label value pair, e.g., "job=prometheus")
          value: number (Series count)
```

LANGUAGE: bash
CODE:
```
curl http://localhost:9090/api/v1/status/tsdb
```

LANGUAGE: json
CODE:
```
{
  "status": "success",
  "data": {
    "headStats": {
      "numSeries": 508,
      "chunkCount": 937,
      "minTime": 1591516800000,
      "maxTime": 1598896800143
    },
    "seriesCountByMetricName": [
      {
        "name": "net_conntrack_dialer_conn_failed_total",
        "value": 20
      },
      {
        "name": "prometheus_http_request_duration_seconds_bucket",
        "value": 20
      }
    ],
    "labelValueCountByLabelName": [
      {
        "name": "__name__",
        "value": 211
      },
      {
        "name": "event",
        "value": 3
      }
    ],
    "memoryInBytesByLabelName": [
      {
        "name": "__name__",
        "value": 8266
      },
      {
        "name": "instance",
        "value": 28
      }
    ],
    "seriesCountByLabelValuePair": [
      {
        "name": "job=prometheus",
        "value": 425
      },
      {
        "name": "instance=localhost:9090",
        "value": 425
      }
    ]
  }
}
```

----------------------------------------

TITLE: Select Range Vector with Time Duration (PromQL)
DESCRIPTION: Demonstrates a range vector selector, which retrieves a range of samples over a specified duration (e.g., `[5m]`) for time series matching the given metric name and label matchers. The range is left-open and right-closed.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/querying/basics.md#_snippet_18

LANGUAGE: PromQL
CODE:
```
http_requests_total{job="prometheus"}[5m]
```

----------------------------------------

TITLE: Get Top 3 CPU Users by Application and Process
DESCRIPTION: If a fictional cluster scheduler exposed CPU usage metrics like:

    instance_cpu_time_ns{app="lion", proc="web", rev="34d0f99", env="prod", job="cluster-manager"}
    instance_cpu_time_ns{app="elephant", proc="worker", rev="34d0f99", env="prod", job="cluster-manager"}
    instance_cpu_time_ns{app="turtle", proc="api", rev="4d3a513", env="prod", job="cluster-manager"}
    instance_cpu_time_ns{app="fox", proc="widget", rev="4d3a513", env="prod", job="cluster-manager"}
    ...

This query gets the top 3 CPU users grouped by application (`app`) and process type (`proc`).
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/querying/examples.md#_snippet_11

LANGUAGE: PromQL
CODE:
```
topk(3, sum by (app, proc) (rate(instance_cpu_time_ns[5m])))
```

----------------------------------------

TITLE: Match Metric Names Using `__name__` Label (PromQL)
DESCRIPTION: Explains how metric names can be treated as an internal `__name__` label, allowing for advanced matching operations like regex matching on metric names to select groups of related metrics.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/querying/basics.md#_snippet_15

LANGUAGE: PromQL
CODE:
```
{__name__=~"job:.*"}
```

----------------------------------------

TITLE: Prometheus Web UI and API Endpoints
DESCRIPTION: Details the default port, web UI access, and the /api/v1 endpoint for programmatic interaction with Prometheus, including querying, metadata, and server status inspection. Also covers console templates.
SOURCE: https://github.com/prometheus/prometheus/blob/main/documentation/internal_architecture.md#_snippet_9

LANGUAGE: APIDOC
CODE:
```
Prometheus Web UI and API:
  Default Port: 9090
  Endpoints:
    /: 
      Description: Web UI for human interaction.
      Purpose: Running expression queries, inspecting active alerts, server status.
    /api/v1:
      Description: Programmatic API for data access.
      Purpose: Querying, metadata retrieval, server status inspection.
      Reference: https://prometheus.io/docs/prometheus/latest/querying/api/
    /consoles:
      Description: Serves user-defined HTML templates.
      Purpose: Access to TSDB data via templates.
      Condition: Only when console templates are present and configured.
```

----------------------------------------

TITLE: PromQL Time Duration Unit Examples
DESCRIPTION: This snippet demonstrates how decimal integer numbers can be suffixed with time units (ms, s, m, h) in PromQL to represent specific durations, showing their equivalent float literal values in seconds.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/querying/basics.md#_snippet_5

LANGUAGE: PromQL
CODE:
```
1s # Equivalent to 1.
2m # Equivalent to 120.
1ms # Equivalent to 0.001.
-2h # Equivalent to -7200.
```

----------------------------------------

TITLE: Round Down Values with PromQL `floor()`
DESCRIPTION: The `floor()` function returns a vector where all float samples from the input vector are rounded down to the nearest integer value. Histogram samples in the input vector are silently ignored. It handles `+Inf` and `±0` appropriately.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/querying/functions.md#_snippet_16

LANGUAGE: APIDOC
CODE:
```
floor(v instant-vector)
```

----------------------------------------

TITLE: Enable OTLP Delta to Cumulative Conversion
DESCRIPTION: This feature flag enables Prometheus to convert OTLP delta metrics into their cumulative equivalent, preventing them from being dropped. It uses the OpenTelemetry collector's `deltatocumulative` processor and maintains in-memory state, which is lost on restart, causing counter resets. This feature cannot be used with `otlp-native-delta-ingestion`.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/feature_flags.md#_snippet_13

LANGUAGE: APIDOC
CODE:
```
--enable-feature=otlp-deltatocumulative
```

----------------------------------------

TITLE: Prometheus Remote Read Endpoint Configuration
DESCRIPTION: Defines settings for querying a remote read endpoint, including its URL, an optional unique name, required label matchers for queries, request timeout, custom HTTP headers, and options for reading recent data and filtering external labels. It also includes a placeholder for HTTP client settings.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/configuration/configuration.md#_snippet_133

LANGUAGE: APIDOC
CODE:
```
url: <string>
name: <string>
required_matchers:
  <labelname>: <labelvalue> ...
remote_timeout: <duration> | default = 1m
headers:
  <string>: <string> ...
read_recent: <boolean> | default = false
filter_external_labels: <boolean> | default = true
http_config: <http_config>
```

----------------------------------------

TITLE: Start Prometheus Server with Custom Configuration
DESCRIPTION: Execute this command to start the Prometheus server, instructing it to use the specified `prometheus.yml` configuration file. By default, Prometheus stores its time series database in the `./data` directory.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/getting_started.md#_snippet_2

LANGUAGE: bash
CODE:
```
./prometheus --config.file=prometheus.yml
```

----------------------------------------

TITLE: Prometheus API: Find Time Series by Label Matchers
DESCRIPTION: This section details the `/api/v1/series` endpoint, which allows users to retrieve a list of time series matching specified label selectors. It supports `match[]`, `start`, `end`, and `limit` parameters, and can handle large numbers of selectors via POST requests for dynamic or extensive queries.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/querying/api.md#_snippet_14

LANGUAGE: APIDOC
CODE:
```
GET /api/v1/series
POST /api/v1/series

URL query parameters:
- match[]=<series_selector>: Repeated series selector argument that selects the
  series to return. At least one match[] argument must be provided.
- start=<rfc3339 | unix_timestamp>: Start timestamp.
- end=<rfc3339 | unix_timestamp>: End timestamp.
- limit=<number>: Maximum number of returned series. Optional. 0 means disabled.
```

LANGUAGE: bash
CODE:
```
curl -g 'http://localhost:9090/api/v1/series?' --data-urlencode 'match[]=up' --data-urlencode 'match[]=process_start_time_seconds{job="prometheus"}'
```

LANGUAGE: json
CODE:
```
{
   "status" : "success",
   "data" : [
      {
         "__name__" : "up",
         "job" : "prometheus",
         "instance" : "localhost:9090"
      },
      {
         "__name__" : "up",
         "job" : "node",
         "instance" : "localhost:9091"
      },
      {
         "__name__" : "process_start_time_seconds",
         "job" : "prometheus",
         "instance" : "localhost:9090"
      }
   ]
}
```

----------------------------------------

TITLE: Define Prometheus File SD Targets in YAML
DESCRIPTION: This YAML example illustrates the structure for defining static targets within a file-based service discovery configuration for Prometheus. It shows how to specify target hosts and associated labels.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/configuration/configuration.md#_snippet_94

LANGUAGE: YAML
CODE:
```
- targets:
  [ - '<host>' ]
  labels:
    [ <labelname>: <labelvalue> ... ]
```

----------------------------------------

TITLE: PromQL Function: absent_over_time() - Check for Absence Over Time
DESCRIPTION: The `absent_over_time()` function returns an empty vector if the provided range vector has any elements (float or histogram samples). If the range vector has no elements, it returns a 1-element vector with the value 1. This function is valuable for alerting when no time series exist for a given metric and label combination over a specified duration.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/querying/functions.md#_snippet_2

LANGUAGE: APIDOC
CODE:
```
absent_over_time(v range-vector)
```

LANGUAGE: PromQL
CODE:
```
absent_over_time(nonexistent{job="myjob"}[1h])
# => {job="myjob"}

absent_over_time(nonexistent{job="myjob",instance=~\".*\"}[1h])
# => {job="myjob"}

absent_over_time(sum(nonexistent{job="myjob"})[1h:])
# => {}
```

----------------------------------------

TITLE: PromQL At-Time (@) Modifier for Specific Timestamps
DESCRIPTION: Illustrates the usage of the `@` modifier to evaluate instant and range vectors at a specific Unix timestamp. Like `offset`, it must immediately follow the selector. Includes examples with `start()` and `end()` special values for range queries, and demonstrates interaction with the `offset` modifier.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/querying/basics.md#_snippet_20

LANGUAGE: PromQL
CODE:
```
http_requests_total @ 1609746000
```

LANGUAGE: PromQL
CODE:
```
sum(http_requests_total{method="GET"} @ 1609746000) // GOOD.
```

LANGUAGE: PromQL
CODE:
```
sum(http_requests_total{method="GET"}) @ 1609746000 // INVALID.
```

LANGUAGE: PromQL
CODE:
```
rate(http_requests_total[5m] @ 1609746000)
```

LANGUAGE: PromQL
CODE:
```
# offset after @
http_requests_total @ 1609746000 offset 5m
```

LANGUAGE: PromQL
CODE:
```
# offset before @
http_requests_total offset 5m @ 1609746000
```

LANGUAGE: PromQL
CODE:
```
http_requests_total @ start()
```

LANGUAGE: PromQL
CODE:
```
rate(http_requests_total[5m] @ end())
```

----------------------------------------

TITLE: Prometheus Rule Test File Format (YAML Schema)
DESCRIPTION: Defines the top-level YAML structure for Prometheus rule test files, including rule file paths, evaluation interval, fuzzy comparison settings, group evaluation order, and a list of test groups.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/configuration/unit_testing_rules.md#_snippet_1

LANGUAGE: yaml
CODE:
```
# This is a list of rule files to consider for testing. Globs are supported.
rule_files:
  [ - <file_name> ]

[ evaluation_interval: <duration> | default = 1m ]

# Setting fuzzy_compare true will very slightly weaken floating point comparisons.
# This will (effectively) ignore differences in the last bit of the mantissa.
[ fuzzy_compare: <boolean> | default = false ]

# The order in which group names are listed below will be the order of evaluation of
# rule groups (at a given evaluation time). The order is guaranteed only for the groups mentioned below.
# All the groups need not be mentioned below.
group_eval_order:
  [ - <group_name> ]

# All the tests are listed here.
tests:
  [ - <test_group> ]
```

----------------------------------------

TITLE: Backfill Historical Data for Prometheus Recording Rules
DESCRIPTION: This example demonstrates using `promtool` to create historical data blocks for recording rules defined in `rules.yaml` and `rules2.yaml`. It specifies a start and end timestamp and connects to a Prometheus server to fetch source data. The generated blocks must be manually moved to the Prometheus data directory for use.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/storage.md#_snippet_6

LANGUAGE: shell
CODE:
```
$ promtool tsdb create-blocks-from rules \n    --start 1617079873 \n    --end 1617097873 \n    --url http://mypromserver.com:9090 \n    rules.yaml rules2.yaml
```

----------------------------------------

TITLE: Run promtool for Prometheus Rule Testing
DESCRIPTION: Demonstrates how to execute `promtool` to test Prometheus rules, supporting both single and multiple test files.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/configuration/unit_testing_rules.md#_snippet_0

LANGUAGE: shell
CODE:
```
# For a single test file.
./promtool test rules test.yml

# If you have multiple test files, say test1.yml,test2.yml,test2.yml
./promtool test rules test1.yml test2.yml test3.yml
```

----------------------------------------

TITLE: PromQL: Count Binaries by Build Version
DESCRIPTION: Uses `count_values` to count the occurrences of each unique `build_version` value, creating a new series for each unique version with a label named 'version'.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/querying/operators.md#_snippet_21

LANGUAGE: PromQL
CODE:
```
count_values("version", build_version)
```

----------------------------------------

TITLE: Configure Agent WAL Maximum Retention Time
DESCRIPTION: Sets the maximum age samples may be before being forcibly deleted when the WAL is truncated. This flag is applicable only in agent mode.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/command-line/prometheus.md#_snippet_5

LANGUAGE: APIDOC
CODE:
```
--storage.agent.retention.max-time <duration>
Usage: agent mode only
```

----------------------------------------

TITLE: Promtool Query Series Command
DESCRIPTION: The `promtool query series` command retrieves series matching a selector within a specified time range from a Prometheus server.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/command-line/promtool.md#_snippet_14

LANGUAGE: APIDOC
CODE:
```
Command: promtool query series
  Description: Run series query.
  Flags:
    --match <string>...: Series selector. Can be specified multiple times.
    --start <string>: Start time (RFC3339 or Unix timestamp).
    --end <string>: End time (RFC3339 or Unix timestamp).
  Arguments:
    server <string> (Required): Prometheus server to query.
```

----------------------------------------

TITLE: Promtool: Unit Tests for Rules
DESCRIPTION: The `promtool test rules` subcommand performs unit tests specifically for Prometheus rules. It supports filtering tests by name, enabling debug mode, showing differential output, and ignoring unknown fields in test files.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/command-line/promtool.md#_snippet_24

LANGUAGE: APIDOC
CODE:
```
promtool test rules
  Flags:
    --run <regexp>: If set, will only run test groups whose names match the regular expression. Can be specified multiple times.
    --debug: Enable unit test debugging. (Default: false)
    --diff: [Experimental] Print colored differential output between expected & received output. (Default: false)
    --ignore-unknown-fields: Ignore unknown fields in the test files. This is useful when you want to extend rule files with custom metadata. Ensure that those fields are removed before loading them into the Prometheus server as it performs strict checks by default. (Default: false)
  Arguments:
    test-rule-file <file>: The unit test file. (Required)
```

----------------------------------------

TITLE: promtool check web-config Command
DESCRIPTION: Checks the validity of Prometheus web configuration files.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/command-line/promtool.md#_snippet_6

LANGUAGE: APIDOC
CODE:
```
promtool check web-config:
  Description: Check if the web config files are valid or not.
  Arguments:
    web-config-files: The config files to check. (Required: Yes)
```

----------------------------------------

TITLE: Prometheus Metric Name Validation Scheme
DESCRIPTION: Specifies the validation scheme for metric and label names. Options are "utf8" for full UTF-8 support or "legacy" for a restricted character set. Defaults to "utf8".
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/configuration/configuration.md#_snippet_61

LANGUAGE: APIDOC
CODE:
```
[ metric_name_validation_scheme: <string> | default "utf8" ]
```

----------------------------------------

TITLE: Prometheus Configuration: Rule Files
DESCRIPTION: Specifies a list of glob patterns for files containing Prometheus rules and alerts. Rules and alerts are read from all matching files.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/configuration/configuration.md#_snippet_9

LANGUAGE: APIDOC
CODE:
```
rule_files:
  - <filepath_glob> ...
```

----------------------------------------

TITLE: Iterate Over Query Results in Prometheus Templates
DESCRIPTION: This example shows a basic `range` loop to iterate over the results of a Prometheus query. The special `.` variable holds the current sample's value within each loop iteration, allowing access to its labels and values.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/configuration/template_examples.md#_snippet_1

LANGUAGE: go-template
CODE:
```
{{ range query "up" }}
  {{ .Labels.instance }} {{ .Value }}
{{ end }}
```

----------------------------------------

TITLE: Prometheus Docker Engine Service Discovery Configuration
DESCRIPTION: This configuration enables Prometheus to discover scrape targets from Docker Engine hosts by identifying containers and their exposed network IPs and ports. It provides a comprehensive list of meta labels for detailed relabeling and filtering, along with configuration options to fine-tune the discovery process.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/configuration/configuration.md#_snippet_74

LANGUAGE: APIDOC
CODE:
```
__meta_docker_container_id: the id of the container
__meta_docker_container_name: the name of the container
__meta_docker_container_network_mode: the network mode of the container
__meta_docker_container_label_<labelname>: each label of the container, with any unsupported characters converted to an underscore
__meta_docker_network_id: the ID of the network
__meta_docker_network_name: the name of the network
__meta_docker_network_ingress: whether the network is ingress
__meta_docker_network_internal: whether the network is internal
__meta_docker_network_label_<labelname>: each label of the network, with any unsupported characters converted to an underscore
__meta_docker_network_scope: the scope of the network
__meta_docker_network_ip: the IP of the container in this network
__meta_docker_port_private: the port on the container
__meta_docker_port_public: the external port if a port-mapping exists
__meta_docker_port_public_ip: the public IP if a port-mapping exists
```

LANGUAGE: YAML
CODE:
```
# Address of the Docker daemon.
host: <string>

# The port to scrape metrics from, when `role` is nodes, and for discovered
# tasks and services that don't have published ports.
[ port: <int> | default = 80 ]

# The host to use if the container is in host networking mode.
[ host_networking_host: <string> | default = "localhost" ]

# Sort all non-nil networks in ascending order based on network name and
# get the first network if the container has multiple networks defined,
# thus avoiding collecting duplicate targets.
[ match_first_network: <boolean> | default = true ]

# Optional filters to limit the discovery process to a subset of available
# resources.
# The available filters are listed in the upstream documentation:
# https://docs.docker.com/engine/api/v1.40/#operation/ContainerList
[ filters:
  [ - name: <string>
      values: <string>, [...] ]

# The time after which the containers are refreshed.
[ refresh_interval: <duration> | default = 60s ]

# HTTP client settings, including authentication methods (such as basic auth and
# authorization), proxy configurations, TLS options, custom HTTP headers, etc.
[ <http_config> ]
```

----------------------------------------

TITLE: PromQL Combined Time Duration Unit Examples
DESCRIPTION: This snippet illustrates how multiple time units can be concatenated in PromQL to form a single duration, emphasizing the requirement for units to be ordered from longest to shortest and appear only once.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/querying/basics.md#_snippet_7

LANGUAGE: PromQL
CODE:
```
1h30m # Equivalent to 5400s and thus 5400.
12h34m56s # Equivalent to 45296s and thus 45296.
54s321ms # Equivalent to 54.321.
```

----------------------------------------

TITLE: Prometheus Template Functions for String Manipulation (APIDOC)
DESCRIPTION: This section details Prometheus template functions for various string operations. Capabilities include case conversion, extracting host from host:port strings, regular expression matching and replacement, and generating direct links to the Prometheus expression browser for given expressions.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/configuration/template_reference.md#_snippet_3

LANGUAGE: APIDOC
CODE:
```
title(string): string
  Notes: cases.Title, capitalises first character of each word.
toUpper(string): string
  Notes: strings.ToUpper, converts all characters to upper case.
toLower(string): string
  Notes: strings.ToLower, converts all characters to lower case.
stripPort(string): string
  Notes: net.SplitHostPort, splits string into host and port, then returns only host.
match(pattern string, text string): boolean
  Notes: regexp.MatchString Tests for a unanchored regexp match.
reReplaceAll(pattern string, replacement string, text string): string
  Notes: Regexp.ReplaceAllString Regexp substitution, unanchored.
graphLink(expr string): string
  Notes: Returns path to graph view in the expression browser for the expression.
tableLink(expr string): string
  Notes: Returns path to tabular ("Table") view in the expression browser for the expression.
parseDuration(string): float
  Notes: Parses a duration string such as "1h" into the number of seconds it represents.
stripDomain(string): string
  Notes: Removes the domain part of a FQDN. Leaves port untouched.
```

----------------------------------------

TITLE: Prometheus Scrape Configuration for RabbitMQ Exporter
DESCRIPTION: This Prometheus `scrape_configs` entry defines a job named 'RabbitMQ' that uses Kubernetes service discovery to find pods. It includes a relabeling rule to keep only pods labeled with `app: rabbitmq`, ensuring Prometheus scrapes the RabbitMQ exporter running within those pods.
SOURCE: https://github.com/prometheus/prometheus/blob/main/documentation/examples/kubernetes-rabbitmq/README.md#_snippet_0

LANGUAGE: YAML
CODE:
```
scrape_configs:
- job_name: 'RabbitMQ'
  kubernetes_sd_configs:
  - role: pod
  relabel_configs:
  - source_labels:
    - __meta_kubernetes_pod_label_app
    regex: rabbitmq
    action: keep
```

----------------------------------------

TITLE: Prometheus Configuration: Alerting Settings
DESCRIPTION: Defines settings related to the Alertmanager, including alert relabeling configurations and a list of Alertmanager instances.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/configuration/configuration.md#_snippet_12

LANGUAGE: APIDOC
CODE:
```
alerting:
  alert_relabel_configs:
    - <relabel_config> ...
  alertmanagers:
    - <alertmanager_config> ...
```

----------------------------------------

TITLE: PromQL Many-to-One and One-to-Many Vector Matching
DESCRIPTION: This section explains how to explicitly request many-to-one or one-to-many vector matching in PromQL using `group_left` or `group_right` modifiers. These modifiers are essential when one side of the operation has a higher cardinality, allowing a single element from the 'one'-side to match with multiple elements from the 'many'-side. The label list provided with the group modifier specifies additional labels from the 'one'-side to be included in the result metrics.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/querying/operators.md#_snippet_8

LANGUAGE: PromQL
CODE:
```
<vector expr> <bin-op> ignoring(<label list>) group_left(<label list>) <vector expr>
<vector expr> <bin-op> ignoring(<label list>) group_right(<label list>) <vector expr>
<vector expr> <bin-op> on(<label list>) group_left(<label list>) <vector expr>
<vector expr> <bin-op> on(<label list>) group_right(<label list>) <vector expr>
```

LANGUAGE: PromQL
CODE:
```
method_code:http_errors:rate5m / ignoring(code) group_left method:http_requests:rate5m
```

LANGUAGE: PromQL
CODE:
```
{method="get", code="500"}  0.04            //  24 / 600
{method="get", code="404"}  0.05            //  30 / 600
{method="post", code="500"} 0.05            //   6 / 120
{method="post", code="404"} 0.175           //  21 / 120
```

----------------------------------------

TITLE: Build Prometheus Alerts and Grafana Dashboards
DESCRIPTION: Commands to generate `prometheus_alerts.yaml` with alerts and a directory `dashboards_out` containing Grafana dashboard JSON files. These `make` targets compile the Jsonnet mixin configurations into deployable Prometheus and Grafana assets.
SOURCE: https://github.com/prometheus/prometheus/blob/main/documentation/prometheus-mixin/README.md#_snippet_2

LANGUAGE: bash
CODE:
```
$ make prometheus_alerts.yaml
$ make dashboards_out
```

----------------------------------------

TITLE: Nested Subquery for Derivative of Rate
DESCRIPTION: An example of a nested subquery. The subquery for the `deriv` function uses the default resolution. Note that using subqueries unnecessarily is unwise.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/querying/examples.md#_snippet_6

LANGUAGE: PromQL
CODE:
```
max_over_time(deriv(rate(distance_covered_total[5s])[30s:5s])[10m:])
```

----------------------------------------

TITLE: Filter Prometheus Targets by Scrape Pool Name
DESCRIPTION: This snippet illustrates filtering Prometheus targets using the `scrapePool` query parameter. This allows users to retrieve targets belonging to a specific scrape pool, such as `node_exporter`. The example shows the `curl` command and the corresponding JSON response for a filtered scrape pool.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/querying/api.md#_snippet_25

LANGUAGE: bash
CODE:
```
curl 'http://localhost:9090/api/v1/targets?scrapePool=node_exporter'
```

LANGUAGE: json
CODE:
```
{
  "status": "success",
  "data": {
    "activeTargets": [
      {
        "discoveredLabels": {
          "__address__": "127.0.0.1:9091",
          "__metrics_path__": "/metrics",
          "__scheme__": "http",
          "job": "node_exporter"
        },
        "labels": {
          "instance": "127.0.0.1:9091",
          "job": "node_exporter"
        },
        "scrapePool": "node_exporter",
        "scrapeUrl": "http://127.0.0.1:9091/metrics",
        "globalUrl": "http://example-prometheus:9091/metrics",
        "lastError": "",
        "lastScrape": "2017-01-17T15:07:44.723715405+01:00",
        "lastScrapeDuration": 50688943,
        "health": "up"
      }
    ],
    "droppedTargets": []
  }
}
```

----------------------------------------

TITLE: Prometheus TSDB Local Storage Configuration Flags
DESCRIPTION: These flags configure Prometheus's local time series database (TSDB) storage, controlling the data path, retention duration, maximum storage size, and write-ahead log compression. Proper configuration is crucial for managing disk space and optimizing performance.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/storage.md#_snippet_1

LANGUAGE: APIDOC
CODE:
```
--storage.tsdb.path: string
  Description: Where Prometheus writes its database.
  Default: data/

--storage.tsdb.retention.time: string (duration)
  Description: How long to retain samples in storage. If neither this flag nor storage.tsdb.retention.size is set, the retention time defaults to 15d.
  Supported units: y, w, d, h, m, s, ms

--storage.tsdb.retention.size: string (bytes)
  Description: The maximum number of bytes of storage blocks to retain. The oldest data will be removed first. Based on powers-of-2 (e.g., 1KB is 1024B).
  Default: 0 (disabled)
  Supported units: B, KB, MB, GB, TB, PB, EB
  Note: Only persistent blocks are deleted to honor this retention, though WAL and m-mapped chunks are counted in the total size.

--storage.tsdb.wal-compression: boolean
  Description: Enables compression of the write-ahead log (WAL). Expect WAL size to be halved with little extra CPU load.
  Introduced: 2.11.0
  Enabled by default: 2.20.0
  Caution: Once enabled, downgrading Prometheus to a version below 2.11.0 will require deleting the WAL.
```

----------------------------------------

TITLE: Prometheus Rules API Endpoint Definition
DESCRIPTION: Defines the HTTP GET endpoint for accessing Prometheus rules and active alerts. This endpoint allows filtering by rule type, name, group, file path, and labels, and supports pagination using `group_limit` and `group_next_token` parameters.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/querying/api.md#_snippet_26

LANGUAGE: APIDOC
CODE:
```
GET /api/v1/rules

URL query parameters:
- type=alert|record: return only the alerting rules (e.g. type=alert) or the recording rules (e.g. type=record). When the parameter is absent or empty, no filtering is done.
- rule_name[]=<string>: only return rules with the given rule name. If the parameter is repeated, rules with any of the provided names are returned. If we've filtered out all the rules of a group, the group is not returned. When the parameter is absent or empty, no filtering is done.
- rule_group[]=<string>: only return rules with the given rule group name. If the parameter is repeated, rules with any of the provided rule group names are returned. When the parameter is absent or empty, no filtering is done.
- file[]=<string>: only return rules with the given filepath. If the parameter is repeated, rules with any of the provided filepaths are returned. When the parameter is absent or empty, no filtering is done.
- exclude_alerts=<bool>: only return rules, do not return active alerts.
- match[]=<label_selector>: only return rules that have configured labels that satisfy the label selectors. If the parameter is repeated, rules that match any of the sets of label selectors are returned. Note that matching is on the labels in the definition of each rule, not on the values after template expansion (for alerting rules). Optional.
- group_limit=<number>: The `group_limit` parameter allows you to specify a limit for the number of rule groups that is returned in a single response. If the total number of rule groups exceeds the specified `group_limit` value, the response will include a `groupNextToken` property. You can use the value of this `groupNextToken` property in subsequent requests in the `group_next_token` parameter to paginate over the remaining rule groups. The `groupNextToken` property will not be present in the final response, indicating that you have retrieved all the available rule groups. Please note that there are no guarantees regarding the consistency of the response if the rule groups are being modified during the pagination process.
- group_next_token: the pagination token that was returned in previous request when the `group_limit` property is set. The pagination token is used to iteratively paginate over a large number of rule groups. To use the `group_next_token` parameter, the `group_limit` parameter also need to be present. If a rule group that coincides with the next token is removed while you are paginating over the rule groups, a response with status code 400 will be returned.
```

----------------------------------------

TITLE: Backfilling OpenMetrics Data into Prometheus TSDB
DESCRIPTION: Explains how to use the `promtool` command-line utility to create TSDB blocks from OpenMetrics formatted data. It outlines the command syntax, default output directory, and important considerations such as avoiding backfilling data from the last 3 hours due to potential overlap with the current head block, and the need for the `--storage.tsdb.allow-overlapping-blocks` flag for older Prometheus versions if overlaps occur. Native histograms and staleness markers are not supported by this procedure.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/storage.md#_snippet_4

LANGUAGE: Shell
CODE:
```
promtool tsdb create-blocks-from openmetrics <input file> [<output directory>]
```

----------------------------------------

TITLE: Configure Exemplar Storage in Prometheus
DESCRIPTION: This configuration snippet defines the maximum size of the circular buffer used to store exemplars for all series in Prometheus. Note that exemplar storage is an experimental feature and requires explicit enabling via a feature flag.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/configuration/configuration.md#_snippet_135

LANGUAGE: YAML
CODE:
```
# Configures the maximum size of the circular buffer used to store exemplars for all series. Resizable during runtime.
[ max_exemplars: <int> | default = 100000 ]
```

----------------------------------------

TITLE: Prometheus Rule Test Series Data Format (YAML Schema)
DESCRIPTION: Describes the YAML format for defining input series data in Prometheus rule tests, including standard series notation, expanding notation for generating multiple samples, and native histogram notation with detailed property descriptions.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/configuration/unit_testing_rules.md#_snippet_3

LANGUAGE: yaml
CODE:
```
# This follows the usual series notation '<metric name>{<label name>=<label value>, ...}'
# Examples:
#      series_name{label1="value1", label2="value2"}
#      go_goroutines{job="prometheus", instance="localhost:9090"}
series: <string>

# This uses expanding notation.
# Expanding notation:
#     'a+bxn' becomes 'a a+b a+(2*b) a+(3*b) … a+(n*b)'
#     Read this as series starts at a, then n further samples incrementing by b.
#     'a-bxn' becomes 'a a-b a-(2*b) a-(3*b) … a-(n*b)'
#     Read this as series starts at a, then n further samples decrementing by b (or incrementing by negative b).
#     'axn' becomes 'a a a … a' (a n+1 times) - it's a shorthand for 'a+0xn'
# There are special values to indicate missing and stale samples:
#     '_' represents a missing sample from scrape
#     'stale' indicates a stale sample
# Examples:
#     1. '-2+4x3' becomes '-2 2 6 10' - series starts at -2, then 3 further samples incrementing by 4.
#     2. ' 1-2x4' becomes '1 -1 -3 -5 -7' - series starts at 1, then 4 further samples decrementing by 2.
#     3. ' 1x4' becomes '1 1 1 1 1' - shorthand for '1+0x4', series starts at 1, then 4 further samples incrementing by 0.
#     4. ' 1 _x3 stale' becomes '1 _ _ _ stale' - the missing sample cannot increment, so 3 missing samples are produced by the '_x3' expression.
#
# Native histogram notation:
#     Native histograms can be used instead of floating point numbers using the following notation:
#     {{schema:1 sum:-0.3 count:3.1 z_bucket:7.1 z_bucket_w:0.05 buckets:[5.1 10 7] offset:-3 n_buckets:[4.1 5] n_offset:-5 counter_reset_hint:gauge}}
#     Native histograms support the same expanding notation as floating point numbers, i.e. 'axn', 'a+bxn' and 'a-bxn'.
#     All properties are optional and default to 0. The order is not important. The following properties are supported:
#     - schema (int):
#         Currently valid schema numbers are -4 <= n <= 8. They are all for
#         base-2 bucket schemas, where 1 is a bucket boundary in each case, and
#         then each power of two is divided into 2^n logarithmic buckets.  Or
#         in other words, each bucket boundary is the previous boundary times
#         2^(2^-n).
#     - sum (float):
#         The sum of all observations, including the zero bucket.
#     - count (non-negative float):
#         The number of observations, including those that are NaN and including the zero bucket.
#     - z_bucket (non-negative float):
#         The sum of all observations in the zero bucket.
#     - z_bucket_w (non-negative float):
#         The width of the zero bucket.
#         If z_bucket_w > 0, the zero bucket contains all observations -z_bucket_w <= x <= z_bucket_w.
#         Otherwise, the zero bucket only contains observations that are exactly 0.
#     - buckets (list of non-negative floats):
#         Observation counts in positive buckets. Each represents an absolute count.
#     - offset (int):
#         The starting index of the first entry in the positive buckets.
#     - n_buckets (list of non-negative floats):
#         Observation counts in negative buckets. Each represents an absolute count.
#     - n_offset (int):
#         The starting index of the first entry in the negative buckets.
```

----------------------------------------

TITLE: PromQL: Get Estimated Min/Max from Histogram with `histogram_quantile()`
DESCRIPTION: The `histogram_quantile()` function estimates quantile values from histograms. It can be used with `0` to get the estimated minimum value and `1` to get the estimated maximum value. The function includes internal logic to mitigate floating point precision errors and enforce monotonicity in bucket counts.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/querying/functions.md#_snippet_25

LANGUAGE: PromQL
CODE:
```
histogram_quantile(0, v instant-vector)
```

LANGUAGE: PromQL
CODE:
```
histogram_quantile(1, v instant-vector)
```

----------------------------------------

TITLE: Example Prometheus Alerting Rules (`alerts.yml`)
DESCRIPTION: An example `alerts.yml` file containing Prometheus alerting rules. This file defines two alert rules, `InstanceDown` and `AnotherInstanceDown`, with their respective expressions, `for` clauses, labels, and annotations, used in conjunction with the unit tests.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/configuration/unit_testing_rules.md#_snippet_9

LANGUAGE: yaml
CODE:
```
# This is the rules file.

groups:
- name: example
  rules:

  - alert: InstanceDown
    expr: up == 0
    for: 5m
    labels:
        severity: page
    annotations:
        summary: "Instance {{ $labels.instance }} down"
        description: "{{ $labels.instance }} of job {{ $labels.job }} has been down for more than 5 minutes."

  - alert: AnotherInstanceDown
    expr: up == 0
    for: 10m
    labels:
        severity: page
    annotations:
        summary: "Instance {{ $labels.instance }} down"
        description: "{{ $labels.instance }} of job {{ $labels.job }} has been down for more than 5 minutes."
```

----------------------------------------

TITLE: Workaround for Reserved Keyword Metric Names (PromQL)
DESCRIPTION: Provides a valid method to query for time series whose metric name is a reserved keyword by explicitly using the internal `__name__` label, bypassing the keyword restriction.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/querying/basics.md#_snippet_17

LANGUAGE: PromQL
CODE:
```
{__name__="on"} # Good!
```

----------------------------------------

TITLE: Set Alertmanager Notification Batch Size
DESCRIPTION: Specifies the maximum number of notifications to include per batch when sending to the Alertmanager. This flag is for use with server mode only.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/command-line/prometheus.md#_snippet_16

LANGUAGE: APIDOC
CODE:
```
--alertmanager.notification-batch-size <int>
Default: 256
Usage: server mode only
```

----------------------------------------

TITLE: Set Remote Read Concurrent Call Limit
DESCRIPTION: Specifies the maximum number of concurrent remote read calls allowed. A value of 0 means no limit. This flag is for use with server mode only.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/command-line/prometheus.md#_snippet_9

LANGUAGE: APIDOC
CODE:
```
--storage.remote.read-concurrent-limit <int>
Default: 10
Usage: server mode only
```

----------------------------------------

TITLE: Prometheus Engine Query Duration Metrics
DESCRIPTION: Metrics related to the duration of Prometheus engine queries, broken down by different processing slices like queue time and result sorting. Includes quantile values (0.5, 0.9, 0.99), total sum, and total count of query durations for performance analysis.
SOURCE: https://github.com/prometheus/prometheus/blob/main/model/textparse/testdata/alltypes.237mfs.nometa.prom.txt#_snippet_12

LANGUAGE: Prometheus Metrics
CODE:
```
prometheus_engine_query_duration_seconds{slice="queue_time",quantile="0.5"} 4.628e-06
prometheus_engine_query_duration_seconds{slice="queue_time",quantile="0.9"} 1.6082e-05
prometheus_engine_query_duration_seconds{slice="queue_time",quantile="0.99"} 4.1174e-05
prometheus_engine_query_duration_seconds_sum{slice="queue_time"} 8720.662071224393
prometheus_engine_query_duration_seconds_count{slice="queue_time"} 1.7428526e+07
prometheus_engine_query_duration_seconds{slice="result_sort",quantile="0.5"} 7.83e-07
prometheus_engine_query_duration_seconds{slice="result_sort",quantile="0.9"} 1.994e-06
prometheus_engine_query_duration_seconds{slice="result_sort",quantile="0.99"} 1.458e-05
prometheus_engine_query_duration_seconds_sum{slice="result_sort"} 2.337879348999977
prometheus_engine_query_duration_seconds_count{slice="result_sort"} 1.208154e+06
```

----------------------------------------

TITLE: Retrieve Prometheus Label Names API
DESCRIPTION: This section describes the Prometheus API endpoint for fetching all available label names. It details the supported HTTP methods (GET/POST), optional URL query parameters like `start`, `end`, `match[]`, and `limit` for time range and series filtering, and the expected JSON response format which is a list of strings.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/querying/api.md#_snippet_15

LANGUAGE: APIDOC
CODE:
```
GET /api/v1/labels
POST /api/v1/labels

URL Query Parameters:
  start: <rfc3339 | unix_timestamp> (Optional) - Start timestamp.
  end: <rfc3339 | unix_timestamp> (Optional) - End timestamp.
  match[]: <series_selector> (Optional) - Repeated series selector argument that selects the series from which to read the label names.
  limit: <number> (Optional) - Maximum number of returned series. 0 means disabled.

Response Data:
  A list of string label names.
```

LANGUAGE: bash
CODE:
```
curl 'localhost:9090/api/v1/labels'
```

LANGUAGE: json
CODE:
```
{
    "status": "success",
    "data": [
        "__name__",
        "call",
        "code",
        "config",
        "dialer_name",
        "endpoint",
        "event",
        "goversion",
        "handler",
        "instance",
        "interval",
        "job",
        "le",
        "listener_name",
        "name",
        "quantile",
        "reason",
        "role",
        "scrape_job",
        "slice",
        "version"
    ]
}
```

----------------------------------------

TITLE: promtool Top-Level Commands
DESCRIPTION: Overview of the main commands available in the promtool utility for various Prometheus-related tasks.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/command-line/promtool.md#_snippet_1

LANGUAGE: APIDOC
CODE:
```
promtool Commands:
  help: Show help.
  check: Check the resources for validity.
  query: Run query against a Prometheus server.
  debug: Fetch debug information.
  push: Push to a Prometheus server.
  test: Unit testing.
  tsdb: Run tsdb commands.
  promql: PromQL formatting and editing. Requires the --experimental flag.
```

----------------------------------------

TITLE: Delete Series Data in Prometheus TSDB
DESCRIPTION: Deletes data for a selection of series within a specified time range. The data is marked for deletion and will be cleaned up in future compactions or explicitly via the Clean Tombstones endpoint. A `204` status is returned upon successful deletion.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/querying/api.md#_snippet_47

LANGUAGE: APIDOC
CODE:
```
POST /api/v1/admin/tsdb/delete_series
PUT /api/v1/admin/tsdb/delete_series

URL query parameters:
- `match[]=<series_selector>`: Repeated label matcher argument that selects the series to delete. At least one `match[]` argument must be provided.
- `start=<rfc3339 | unix_timestamp>`: Start timestamp. Optional and defaults to minimum possible time.
- `end=<rfc3339 | unix_timestamp>`: End timestamp. Optional and defaults to maximum possible time.
```

LANGUAGE: bash
CODE:
```
curl -X POST \
  -g 'http://localhost:9090/api/v1/admin/tsdb/delete_series?match[]=up&match[]=process_start_time_seconds{job="prometheus"}'
```

----------------------------------------

TITLE: Prometheus Management API: Graceful Shutdown Endpoint
DESCRIPTION: Initiates a graceful shutdown of the Prometheus server, allowing it to complete ongoing operations before exiting. This endpoint is disabled by default and requires the --web.enable-lifecycle flag to be enabled. Alternatively, a SIGTERM signal can achieve the same.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/management_api.md#_snippet_3

LANGUAGE: APIDOC
CODE:
```
PUT  /-/quit
POST /-/quit
```

----------------------------------------

TITLE: Aggregate All Native Histograms for 90th Percentile
DESCRIPTION: This snippet shows how to calculate the 90th percentile across all native histograms. Unlike classic histograms, aggregation works without any `by` clause for native histograms.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/querying/functions.md#_snippet_24

LANGUAGE: PromQL
CODE:
```
histogram_quantile(0.9, sum(rate(http_request_duration_seconds[10m])))
```

----------------------------------------

TITLE: Display Single Metric Value in Prometheus Templates
DESCRIPTION: This snippet demonstrates how to query for a specific metric and display its first value, applying humanization. Due to Go's strong typing, it's crucial to check if samples were returned to prevent execution errors, especially if data is unavailable.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/configuration/template_examples.md#_snippet_2

LANGUAGE: go-template
CODE:
```
{{ with query "some_metric{instance='someinstance'}" }}
  {{ . | first | value | humanize }}
{{ end }}
```

----------------------------------------

TITLE: Prometheus Template Functions for Humanizing and Converting Numbers (APIDOC)
DESCRIPTION: This documentation outlines Prometheus template functions for converting numerical values into human-readable formats. Functions include humanizing numbers with metric prefixes, durations, percentages, and Unix timestamps, as well as converting timestamps to `time.Time` objects. Output is optimized for human consumption and may vary across Prometheus versions.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/configuration/template_reference.md#_snippet_2

LANGUAGE: APIDOC
CODE:
```
humanize(number or string): string
  Notes: Converts a number to a more readable format, using metric prefixes.
humanize1024(number or string): string
  Notes: Like `humanize`, but uses 1024 as the base rather than 1000.
humanizeDuration(number or string): string
  Notes: Converts a duration in seconds to a more readable format.
humanizePercentage(number or string): string
  Notes: Converts a ratio value to a fraction of 100.
humanizeTimestamp(number or string): string
  Notes: Converts a Unix timestamp in seconds to a more readable format.
toTime(number or string): *time.Time
  Notes: Converts a Unix timestamp in seconds to a time.Time.
```

----------------------------------------

TITLE: Prometheus API: Native Histogram Format
DESCRIPTION: Defines the experimental JSON format for native histograms, used as a placeholder `<histogram>` in other result types. It includes `count` (total observations), `sum` (sum of observations), and `buckets`. Each bucket is an array containing a `<boundary_rule>` (integer 0-3), `<left_boundary>`, `<right_boundary>`, and `<count_in_bucket>`. The boundary rule specifies inclusivity: 0='open left', 1='open right', 2='open both', 3='closed both'.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/querying/api.md#_snippet_22

LANGUAGE: json
CODE:
```
{
  "count": "<count_of_observations>",
  "sum": "<sum_of_observations>",
  "buckets": [ [ <boundary_rule>, "<left_boundary>", "<right_boundary>", "<count_in_bucket>" ], ... ]
}
```

----------------------------------------

TITLE: Prometheus HTTP API Instant Query Result Data Format
DESCRIPTION: Specifies the structure of the `data` field within the JSON response for instant queries, indicating the result type (matrix, vector, scalar, or string) and the actual query result value.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/querying/api.md#_snippet_4

LANGUAGE: json
CODE:
```
{
  "resultType": "matrix" | "vector" | "scalar" | "string",
  "result": <value>
}
```

----------------------------------------

TITLE: Configure Remote Storage Flush Deadline
DESCRIPTION: Specifies how long to wait for flushing samples on shutdown or configuration reload.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/command-line/prometheus.md#_snippet_7

LANGUAGE: APIDOC
CODE:
```
--storage.remote.flush-deadline <duration>
Default: 1m
```

----------------------------------------

TITLE: Query Prometheus Target Metadata (Experimental)
DESCRIPTION: This section details the experimental `/api/v1/targets/metadata` endpoint, designed for retrieving metadata about metrics scraped from targets. It outlines the available URL query parameters (`match_target`, `metric`, `limit`) and provides multiple examples demonstrating how to use `curl` to query specific metric metadata or filter targets, along with their corresponding JSON responses.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/querying/api.md#_snippet_30

LANGUAGE: APIDOC
CODE:
```
GET /api/v1/targets/metadata

URL query parameters:

- `match_target=<label_selectors>`: Label selectors that match targets by their label sets. All targets are selected if left empty.
- `metric=<string>`: A metric name to retrieve metadata for. All metric metadata is retrieved if left empty.
- `limit=<number>`: Maximum number of targets to match.
```

LANGUAGE: bash
CODE:
```
curl -G http://localhost:9091/api/v1/targets/metadata \
    --data-urlencode 'metric=go_goroutines' \
    --data-urlencode 'match_target={job="prometheus"}' \
    --data-urlencode 'limit=2'
```

LANGUAGE: json
CODE:
```
{
  "status": "success",
  "data": [
    {
      "target": {
        "instance": "127.0.0.1:9090",
        "job": "prometheus"
      },
      "type": "gauge",
      "help": "Number of goroutines that currently exist.",
      "unit": ""
    },
    {
      "target": {
        "instance": "127.0.0.1:9091",
        "job": "prometheus"
      },
      "type": "gauge",
      "help": "Number of goroutines that currently exist.",
      "unit": ""
    }
  ]
}
```

LANGUAGE: bash
CODE:
```
curl -G http://localhost:9091/api/v1/targets/metadata \
    --data-urlencode 'match_target={instance="127.0.0.1:9090"}'
```

LANGUAGE: json
CODE:
```
{
  "status": "success",
  "data": [
    // ...
    {
      "target": {
        "instance": "127.0.0.1:9090",
        "job": "prometheus"
      },
      "metric": "prometheus_treecache_zookeeper_failures_total",
      "type": "counter",
      "help": "The total number of ZooKeeper failures.",
      "unit": ""
    },
    {
      "target": {
        "instance": "127.0.0.1:9090",
        "job": "prometheus"
      },
      "metric": "prometheus_tsdb_reloads_total",
      "type": "counter",
      "help": "Number of times the database reloaded block data from disk.",
      "unit": ""
    },
    // ...
  ]
}
```

----------------------------------------

TITLE: Prometheus Scrape Sample Limit
DESCRIPTION: Sets a per-scrape limit on the number of accepted samples after metric relabeling. If more samples are present, the entire scrape will fail. A value of 0 means no limit.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/configuration/configuration.md#_snippet_55

LANGUAGE: APIDOC
CODE:
```
[ sample_limit: <int> | default = 0 ]
```

----------------------------------------

TITLE: Prometheus System and Application Metrics
DESCRIPTION: This snippet displays a collection of Prometheus metrics, including network connection tracking statistics (established, failed, accepted, closed), process resource utilization (CPU, memory, FDs), and internal Prometheus metrics related to API notifications, build information, configuration reloads, and query engine performance. Metrics are presented with their labels and values.
SOURCE: https://github.com/prometheus/prometheus/blob/main/model/textparse/testdata/alltypes.237mfs.nometa.prom.txt#_snippet_11

LANGUAGE: Prometheus Metrics
CODE:
```
net_conntrack_dialer_conn_established_total{dialer_name="random"} 4
net_conntrack_dialer_conn_failed_total{dialer_name="alertmanager",reason="refused"} 0
net_conntrack_dialer_conn_failed_total{dialer_name="alertmanager",reason="resolution"} 0
net_conntrack_dialer_conn_failed_total{dialer_name="alertmanager",reason="timeout"} 0
net_conntrack_dialer_conn_failed_total{dialer_name="alertmanager",reason="unknown"} 0
net_conntrack_dialer_conn_failed_total{dialer_name="blackbox",reason="refused"} 0
net_conntrack_dialer_conn_failed_total{dialer_name="blackbox",reason="resolution"} 0
net_conntrack_dialer_conn_failed_total{dialer_name="blackbox",reason="timeout"} 0
net_conntrack_dialer_conn_failed_total{dialer_name="blackbox",reason="unknown"} 0
net_conntrack_dialer_conn_failed_total{dialer_name="caddy",reason="refused"} 0
net_conntrack_dialer_conn_failed_total{dialer_name="caddy",reason="resolution"} 0
net_conntrack_dialer_conn_failed_total{dialer_name="caddy",reason="timeout"} 0
net_conntrack_dialer_conn_failed_total{dialer_name="caddy",reason="unknown"} 0
net_conntrack_dialer_conn_failed_total{dialer_name="cadvisor",reason="refused"} 0
net_conntrack_dialer_conn_failed_total{dialer_name="cadvisor",reason="resolution"} 0
net_conntrack_dialer_conn_failed_total{dialer_name="cadvisor",reason="timeout"} 0
net_conntrack_dialer_conn_failed_total{dialer_name="cadvisor",reason="unknown"} 0
net_conntrack_dialer_conn_failed_total{dialer_name="default",reason="refused"} 0
net_conntrack_dialer_conn_failed_total{dialer_name="default",reason="resolution"} 0
net_conntrack_dialer_conn_failed_total{dialer_name="default",reason="timeout"} 0
net_conntrack_dialer_conn_failed_total{dialer_name="default",reason="unknown"} 0
net_conntrack_dialer_conn_failed_total{dialer_name="grafana",reason="refused"} 0
net_conntrack_dialer_conn_failed_total{dialer_name="grafana",reason="resolution"} 0
net_conntrack_dialer_conn_failed_total{dialer_name="grafana",reason="timeout"} 0
net_conntrack_dialer_conn_failed_total{dialer_name="grafana",reason="unknown"} 2
net_conntrack_dialer_conn_failed_total{dialer_name="node",reason="refused"} 0
net_conntrack_dialer_conn_failed_total{dialer_name="node",reason="resolution"} 0
net_conntrack_dialer_conn_failed_total{dialer_name="node",reason="timeout"} 0
net_conntrack_dialer_conn_failed_total{dialer_name="node",reason="unknown"} 0
net_conntrack_dialer_conn_failed_total{dialer_name="prometheus",reason="refused"} 0
net_conntrack_dialer_conn_failed_total{dialer_name="prometheus",reason="resolution"} 0
net_conntrack_dialer_conn_failed_total{dialer_name="prometheus",reason="timeout"} 0
net_conntrack_dialer_conn_failed_total{dialer_name="prometheus",reason="unknown"} 0
net_conntrack_dialer_conn_failed_total{dialer_name="random",reason="refused"} 0
net_conntrack_dialer_conn_failed_total{dialer_name="random",reason="resolution"} 0
net_conntrack_dialer_conn_failed_total{dialer_name="random",reason="timeout"} 0
net_conntrack_dialer_conn_failed_total{dialer_name="random",reason="unknown"} 0
net_conntrack_listener_conn_accepted_total{listener_name="http"} 561771
net_conntrack_listener_conn_closed_total{listener_name="http"} 561723
process_cpu_seconds_total 96501.42
process_max_fds 65000
process_network_receive_bytes_total 9.89686846606e+11
process_network_transmit_bytes_total 3.743928187168e+12
process_open_fds 124
process_resident_memory_bytes 1.72822528e+08
process_start_time_seconds 1.73806369023e+09
process_virtual_memory_bytes 4.608667648e+09
process_virtual_memory_max_bytes 1.8446744073709552e+19
prometheus_api_notification_active_subscribers 2
prometheus_api_notification_updates_dropped_total 0
prometheus_api_notification_updates_sent_total 5
prometheus_api_remote_read_queries 0
prometheus_build_info{branch="HEAD",goarch="amd64",goos="linux",goversion="go1.23.4",revision="7086161a93b262aa0949dbf2aba15a5a7b13e0a3",tags="netgo,builtinassets,stringlabels",version="3.1.0"} 1
prometheus_config_last_reload_success_timestamp_seconds 1.7380636976181264e+09
prometheus_config_last_reload_successful 1
prometheus_engine_queries 0
prometheus_engine_queries_concurrent_max 20
prometheus_engine_query_duration_seconds{slice="inner_eval",quantile="0.5"} 8.075e-05
prometheus_engine_query_duration_seconds{slice="inner_eval",quantile="0.9"} 0.000917449
prometheus_engine_query_duration_seconds{slice="inner_eval",quantile="0.99"} 0.009315769
prometheus_engine_query_duration_seconds_sum{slice="inner_eval"} 12506.67007997419
prometheus_engine_query_duration_seconds_count{slice="inner_eval"} 8.714071e+06
prometheus_engine_query_duration_seconds{slice="prepare_time",quantile="0.5"} 2.228e-05
prometheus_engine_query_duration_seconds{slice="prepare_time",quantile="0.9"} 6.2819e-05
prometheus_engine_query_duration_seconds{slice="prepare_time",quantile="0.99"} 0.000399637
prometheus_engine_query_duration_seconds_sum{slice="prepare_time"} 490.326247638047
prometheus_engine_query_duration_seconds_count{slice="prepare_time"} 8.714071e+06
```

----------------------------------------

TITLE: Prometheus Consul Service Discovery Configuration Parameters
DESCRIPTION: Defines the YAML configuration parameters for integrating Prometheus with Consul's Catalog API for service discovery. This configuration specifies how Prometheus connects to Consul, filters services, and handles various network and authentication settings, including deprecated fields and enterprise-only options.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/configuration/configuration.md#_snippet_72

LANGUAGE: yaml
CODE:
```
# The information to access the Consul API. It is to be defined
# as the Consul documentation requires.
[ server: <host> | default = "localhost:8500" ]
# Prefix for URIs for when consul is behind an API gateway (reverse proxy).
[ path_prefix: <string> ]
[ token: <secret> ]
[ datacenter: <string> ]
# Namespaces are only supported in Consul Enterprise.
[ namespace: <string> ]
# Admin Partitions are only supported in Consul Enterprise.
[ partition: <string> ]
[ scheme: <string> | default = "http" ]
# The username and password fields are deprecated in favor of the basic_auth configuration.
[ username: <string> ]
[ password: <secret> ]

# A list of services for which targets are retrieved. If omitted, all services
# are scraped.
services:
  [ - <string> ]

# A Consul Filter expression used to filter the catalog results
# See https://www.consul.io/api-docs/catalog#list-services to know more
# about the filter expressions that can be used.
[ filter: <string> ]

# The `tags` and `node_meta` fields are deprecated in Consul in favor of `filter`.
# An optional list of tags used to filter nodes for a given service. Services must contain all tags in the list.
tags:
  [ - <string> ]

# Node metadata key/value pairs to filter nodes for a given service. As of Consul 1.14, consider `filter` instead.
[ node_meta:
  [ <string>: <string> ... ] ]

# The string by which Consul tags are joined into the tag label.
[ tag_separator: <string> | default = , ]

# Allow stale Consul results (see https://www.consul.io/api/features/consistency.html). Will reduce load on Consul.
[ allow_stale: <boolean> | default = true ]

# The time after which the provided names are refreshed.
# On large setup it might be a good idea to increase this value because the catalog will change all the time.
[ refresh_interval: <duration> | default = 30s ]

# HTTP client settings, including authentication methods (such as basic auth and
# authorization), proxy configurations, TLS options, custom HTTP headers, etc.
[ <http_config> ]
```

----------------------------------------

TITLE: PromQL Basic Float Literal Examples
DESCRIPTION: This snippet provides examples of basic valid float literals in PromQL, demonstrating positive and negative values, scientific notation, hexadecimal representation, and special values like negative infinity and NaN.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/querying/basics.md#_snippet_2

LANGUAGE: PromQL
CODE:
```
23
-2.43
3.4e-9
0x8f
-Inf
NaN
```

----------------------------------------

TITLE: Prometheus Range Query JSON Response Example
DESCRIPTION: Illustrates the typical JSON response structure returned by the `/api/v1/query_range` endpoint for a successful query. The 'data' section contains 'resultType' as 'matrix' and 'result' as an array of metric series with their corresponding timestamped values.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/querying/api.md#_snippet_9

LANGUAGE: json
CODE:
```
{
   "status" : "success",
   "data" : {
      "resultType" : "matrix",
      "result" : [
         {
            "metric" : {
               "__name__" : "up",
               "job" : "prometheus",
               "instance" : "localhost:9090"
            },
            "values" : [
               [ 1435781430.781, "1" ],
               [ 1435781445.781, "1" ],
               [ 1435781460.781, "1" ]
            ]
         },
         {
            "metric" : {
               "__name__" : "up",
               "job" : "node",
               "instance" : "localhost:9091"
            },
            "values" : [
               [ 1435781430.781, "0" ],
               [ 1435781445.781, "0" ],
               [ 1435781460.781, "1" ]
            ]
         }
      ]
   }
}
```

----------------------------------------

TITLE: Prometheus Configuration: Scrape Config Files
DESCRIPTION: Specifies a list of glob patterns for files containing scrape configurations. Scrape configurations are read from all matching files and appended to the main list of scrape configurations.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/configuration/configuration.md#_snippet_10

LANGUAGE: APIDOC
CODE:
```
scrape_config_files:
  - <filepath_glob> ...
```

----------------------------------------

TITLE: Enable Automatic Configuration Reload in Prometheus
DESCRIPTION: This flag enables Prometheus to automatically reload its configuration file at a specified interval, defaulting to 30 seconds. Reloads are triggered by checksum changes in the main config or referenced files, requiring atomic updates for consistency.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/feature_flags.md#_snippet_12

LANGUAGE: Bash
CODE:
```
--enable-feature=auto-reload-config
```

----------------------------------------

TITLE: Prometheus Query Language: Group Modifiers (`group_left`, `group_right`)
DESCRIPTION: Explains the `group_left` and `group_right` modifiers in PromQL, which enable many-to-one/one-to-many vector matching. It also notes that these modifiers can only be used with comparison and arithmetic binary operators, not with logical/set operators.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/querying/operators.md#_snippet_6

LANGUAGE: APIDOC
CODE:
```
Group Modifiers:
  - `group_left(<label_list>)`
  - `group_right(<label_list>)`

Purpose:
  Enable many-to-one/one-to-many vector matching.
  Label lists can be provided to include labels from the 'one'-side in the result metrics.

Usage Constraints:
  - Can only be used for comparison and arithmetic binary operators.
  - Cannot be used with `and`, `unless`, or `or` operations (which match with all possible entries by default).
```

----------------------------------------

TITLE: Prometheus TLS Configuration: max_version
DESCRIPTION: Defines the maximum acceptable TLS version for Prometheus. Supported values are TLS10, TLS11, TLS12, and TLS13. If not specified, Prometheus defaults to TLS 1.3, aligning with Go's default maximum version.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/configuration/configuration.md#_snippet_68

LANGUAGE: APIDOC
CODE:
```
max_version: <string>
  Description: Maximum acceptable TLS version.
  Accepted values: TLS10 (TLS 1.0), TLS11 (TLS 1.1), TLS12 (TLS 1.2), TLS13 (TLS 1.3).
  Default: TLS 1.3 (Go default maximum version).
  Reference: See MaxVersion in https://pkg.go.dev/crypto/tls#Config.
```

----------------------------------------

TITLE: Manage Prometheus Timestamp Staleness Tracking (track_timestamps_staleness)
DESCRIPTION: The `track_timestamps_staleness` parameter controls whether Prometheus inserts a staleness marker in the TSDB for metrics with explicit timestamps. If 'true', a staleness marker is added when a metric disappears or the target is down.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/configuration/configuration.md#_snippet_18

LANGUAGE: APIDOC
CODE:
```
[ track_timestamps_staleness: <boolean> | default = false ]
```

----------------------------------------

TITLE: Prometheus DNS Service Discovery Configuration
DESCRIPTION: This YAML configuration block defines how Prometheus performs DNS-based service discovery. It allows specifying a list of DNS domain names to query, the type of DNS query to perform (e.g., SRV, A, AAAA, MX, NS), an optional port number for non-SRV queries, and the refresh interval for the discovery data.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/configuration/configuration.md#_snippet_80

LANGUAGE: YAML
CODE:
```
# A list of DNS domain names to be queried.
names:
  [ - <string> ]

# The type of DNS query to perform. One of SRV, A, AAAA, MX or NS.
[ type: <string> | default = 'SRV' ]

# The port number used if the query type is not SRV.
[ port: <int>]

# The time after which the provided names are refreshed.
[ refresh_interval: <duration> | default = 30s ]
```

----------------------------------------

TITLE: Configure Prometheus to Federate Metrics
DESCRIPTION: This YAML configuration demonstrates how to set up a Prometheus server to federate metrics from other Prometheus instances. It configures a `scrape_configs` entry targeting the `/federate` endpoint, enabling `honor_labels` to preserve original labels, and using `match[]` parameters to select specific series like those with `job="prometheus"` or metric names matching `job:.*`.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/federation.md#_snippet_0

LANGUAGE: YAML
CODE:
```
scrape_configs:
  - job_name: 'federate'
    scrape_interval: 15s

    honor_labels: true
    metrics_path: '/federate'

    params:
      'match[]':
        - '{job="prometheus"}'
        - '{__name__=~"job:.*"}'

    static_configs:
      - targets:
        - 'source-prometheus-1:9090'
        - 'source-prometheus-2:9090'
        - 'source-prometheus-3:9090'
```

----------------------------------------

TITLE: Bind-mount Prometheus configuration directory using Docker
DESCRIPTION: This command runs Prometheus in a Docker container, bind-mounting an entire directory from the host (e.g., /path/to/config) into the container's /etc/prometheus directory. This method is useful for managing multiple configuration files or a more complex configuration structure.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/installation.md#_snippet_2

LANGUAGE: bash
CODE:
```
docker run \
    -p 9090:9090 \
    -v /path/to/config:/etc/prometheus \
    prom/prometheus
```

----------------------------------------

TITLE: Predict Linear Regression for Time Series in PromQL
DESCRIPTION: `predict_linear(v range-vector, t scalar)` predicts the value of time series `t` seconds from now, based on the range vector `v`, using simple linear regression. The range vector must have at least two float samples. It should only be used with gauges and works only for float samples, ignoring histogram samples. `NaN` is returned for `+Inf` or `-Inf` in the range vector.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/querying/functions.md#_snippet_44

LANGUAGE: APIDOC
CODE:
```
predict_linear(v range-vector, t scalar)
  v: The range vector containing time series data.
  t: A scalar representing the number of seconds from now to predict.
```

----------------------------------------

TITLE: Prometheus API: Query Metric Metadata with Limit
DESCRIPTION: Example demonstrating how to retrieve metadata for a limited number of metrics using the `/api/v1/metadata` endpoint. The response shows two metrics, with `http_requests_total` having multiple metadata objects due to differing HELP values.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/querying/api.md#_snippet_32

LANGUAGE: bash
CODE:
```
curl -G http://localhost:9090/api/v1/metadata?limit=2
```

LANGUAGE: json
CODE:
```
{
  "status": "success",
  "data": {
    "cortex_ring_tokens": [
      {
        "type": "gauge",
        "help": "Number of tokens in the ring",
        "unit": ""
      }
    ],
    "http_requests_total": [
      {
        "type": "counter",
        "help": "Number of HTTP requests",
        "unit": ""
      },
      {
        "type": "counter",
        "help": "Amount of HTTP requests",
        "unit": ""
      }
    ]
  }
}
```

----------------------------------------

TITLE: Count and Sum Histogram Observations with PromQL `histogram_count()` and `histogram_sum()`
DESCRIPTION: The `histogram_count()` function returns the count of observations, and `histogram_sum()` returns the sum of observations, both from histogram samples in an instant vector. Float samples are ignored. These functions are useful for calculating rates of observations from histogram series.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/querying/functions.md#_snippet_18

LANGUAGE: APIDOC
CODE:
```
histogram_count(v instant-vector)
histogram_sum(v instant-vector)
```

LANGUAGE: PromQL
CODE:
```
histogram_count(rate(http_request_duration_seconds[10m]))
```

----------------------------------------

TITLE: Calculate Delta of Time Series Values with PromQL `delta()`
DESCRIPTION: The `delta()` function calculates the difference between the first and last value of each time series element in a range vector, returning an instant vector. It extrapolates the delta to cover the full time range and is primarily used with gauges. It also supports histogram samples by calculating differences in their components.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/querying/functions.md#_snippet_12

LANGUAGE: APIDOC
CODE:
```
delta(v range-vector)
```

LANGUAGE: PromQL
CODE:
```
delta(cpu_temp_celsius{host="zeus"}[2h])
```

----------------------------------------

TITLE: Prometheus Alert Field Template Variables
DESCRIPTION: Details the specific variables and their convenience aliases available within Prometheus alert field templates, providing access to alert values, labels, and external configuration.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/configuration/template_reference.md#_snippet_5

LANGUAGE: APIDOC
CODE:
```
Alert Field Template Variables:
  .Value / $value: The alert value.
  .Labels / $labels: The alert labels.
  .ExternalLabels / $externalLabels: The globally configured external labels.
  .ExternalURL / $externalURL: The external URL (configured with `--web.external-url`).
```

----------------------------------------

TITLE: Filter Prometheus Targets by State Parameter
DESCRIPTION: This snippet demonstrates how to use the `state` query parameter with the `/api/v1/targets` endpoint to filter results. The `state` parameter accepts `active`, `dropped`, or `any`. The example shows filtering for `active` targets, resulting in an empty `droppedTargets` array if no dropped targets match.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/querying/api.md#_snippet_24

LANGUAGE: bash
CODE:
```
curl 'http://localhost:9090/api/v1/targets?state=active'
```

LANGUAGE: json
CODE:
```
{
  "status": "success",
  "data": {
    "activeTargets": [
      {
        "discoveredLabels": {
          "__address__": "127.0.0.1:9090",
          "__metrics_path__": "/metrics",
          "__scheme__": "http",
          "job": "prometheus"
        },
        "labels": {
          "instance": "127.0.0.1:9090",
          "job": "prometheus"
        },
        "scrapePool": "prometheus",
        "scrapeUrl": "http://127.0.0.1:9090/metrics",
        "globalUrl": "http://example-prometheus:9090/metrics",
        "lastError": "",
        "lastScrape": "2017-01-17T15:07:44.723715405+01:00",
        "lastScrapeDuration": 50688943,
        "health": "up"
      }
    ],
    "droppedTargets": []
  }
}
```

----------------------------------------

TITLE: Prometheus HTTP Service Discovery Target Examples
DESCRIPTION: Illustrates practical examples of the JSON format for Prometheus HTTP Service Discovery. These examples show how to define multiple target groups, each with specific targets and associated metadata labels like datacenter and job.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/http_sd.md#_snippet_1

LANGUAGE: json
CODE:
```
[
    {
        "targets": ["10.0.10.2:9100", "10.0.10.3:9100", "10.0.10.4:9100", "10.0.10.5:9100"],
        "labels": {
            "__meta_datacenter": "london",
            "__meta_prometheus_job": "node"
        }
    },
    {
        "targets": ["10.0.40.2:9100", "10.0.40.3:9100"],
        "labels": {
            "__meta_datacenter": "london",
            "__meta_prometheus_job": "alertmanager"
        }
    },
    {
        "targets": ["10.0.40.2:9093", "10.0.40.3:9093"],
        "labels": {
            "__meta_datacenter": "newyork",
            "__meta_prometheus_job": "alertmanager"
        }
    }
]
```

----------------------------------------

TITLE: PromQL Offset Duration with Arithmetic Expressions
DESCRIPTION: Examples illustrating the application of arithmetic expressions to define offset durations in PromQL. This enables flexible time shifting, such as `1h / 2` for a 30-minute offset or `(2 ^ 3) * 1m` for an 8-minute offset.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/feature_flags.md#_snippet_16

LANGUAGE: PromQL
CODE:
```
http_requests_total offset (1h / 2)  # 30 minute offset
http_requests_total offset ((2 ^ 3) * 1m)  # 8 minute offset
```

----------------------------------------

TITLE: Configure Prometheus Scrape Failure Log File
DESCRIPTION: The `scrape_failure_log_file` parameter specifies the file path where Prometheus logs scrape failures. This file is reopened upon configuration reload.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/configuration/configuration.md#_snippet_22

LANGUAGE: APIDOC
CODE:
```
[ scrape_failure_log_file: <string> ]
```

----------------------------------------

TITLE: APIDOC: count_values Aggregation Operator
DESCRIPTION: Documentation for `count_values` aggregation operator. This operator outputs one time series per unique sample value. Each series includes an additional label, whose name is specified by the aggregation parameter and whose value is the unique sample value. The value of each time series represents the count of that sample value. It supports both float and histogram samples; for histograms, a compact string representation is used as the label value.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/querying/operators.md#_snippet_15

LANGUAGE: APIDOC
CODE:
```
`count_values` outputs one time series per unique sample value. Each series has an additional label. The name of that label is given by the aggregation parameter, and the label value is the unique sample value. The value of each time series is the number of times that sample value was present. `count_values` works with both float samples and histogram samples. For the latter, a compact string representation of the histogram sample value is used as the label value.
```

----------------------------------------

TITLE: Prometheus Rule Group Evaluation Interval
DESCRIPTION: Indicates the configured evaluation interval in seconds for each rule group. This metric confirms how frequently Prometheus attempts to evaluate rules within a specific group, typically set to 15 seconds.
SOURCE: https://github.com/prometheus/prometheus/blob/main/model/textparse/testdata/alltypes.237mfs.nometa.prom.txt#_snippet_72

LANGUAGE: Prometheus Metrics
CODE:
```
prometheus_rule_group_interval_seconds{rule_group="/etc/prometheus/rules/ansible_managed.rules;ansible managed alert rules"} 15
prometheus_rule_group_interval_seconds{rule_group="/etc/prometheus/rules/ansible_managed.yml;ansible managed alert rules"} 15
prometheus_rule_group_interval_seconds{rule_group="/etc/prometheus/rules/node_alerts.rules;node-exporter"} 15
prometheus_rule_group_interval_seconds{rule_group="/etc/prometheus/rules/node_alerts.yaml;node-exporter"} 15
prometheus_rule_group_interval_seconds{rule_group="/etc/prometheus/rules/node_rules.rules;node-exporter.rules"} 15
prometheus_rule_group_interval_seconds{rule_group="/etc/prometheus/rules/node_rules.yaml;node-exporter.rules"} 15
prometheus_rule_group_interval_seconds{rule_group="/etc/prometheus/rules/prometheus_alerts.rules;prometheus"} 15
prometheus_rule_group_interval_seconds{rule_group="/etc/prometheus/rules/prometheus_alerts.yaml;prometheus"} 15
```

----------------------------------------

TITLE: Configure Prometheus Scrape Protocol Scheme
DESCRIPTION: The `scheme` parameter configures the protocol scheme (e.g., HTTP or HTTPS) used for requests when scraping targets.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/configuration/configuration.md#_snippet_19

LANGUAGE: APIDOC
CODE:
```
[ scheme: <scheme> | default = http ]
```

----------------------------------------

TITLE: Prometheus Kubernetes Ingress Discovery Role Meta-Labels
DESCRIPTION: Describes the `ingress` role in Prometheus Kubernetes discovery, which discovers a target for each path of an Ingress object, useful for blackbox monitoring. It requires `networking.k8s.io/v1` API and lists all available meta-labels for discovered targets.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/configuration/configuration.md#_snippet_105

LANGUAGE: APIDOC
CODE:
```
Available meta labels:
* __meta_kubernetes_namespace: The namespace of the ingress object.
* __meta_kubernetes_ingress_name: The name of the ingress object.
* __meta_kubernetes_ingress_label_<labelname>: Each label from the ingress object, with any unsupported characters converted to an underscore.
* __meta_kubernetes_ingress_labelpresent_<labelname>: `true` for each label from the ingress object, with any unsupported characters converted to an underscore.
* __meta_kubernetes_ingress_annotation_<annotationname>: Each annotation from the ingress object.
* __meta_kubernetes_ingress_annotationpresent_<annotationname>: `true` for each annotation from the ingress object.
* __meta_kubernetes_ingress_class_name: Class name from ingress spec, if present.
* __meta_kubernetes_ingress_scheme: Protocol scheme of ingress, `https` if TLS
  config is set. Defaults to `http`.
* __meta_kubernetes_ingress_path: Path from ingress spec. Defaults to `/`.
```

----------------------------------------

TITLE: Configure OTLP Metric Translation and Attribute Promotion
DESCRIPTION: Defines parameters for OpenTelemetry Protocol (OTLP) metric translation and resource attribute handling in Prometheus. It includes options for promoting or ignoring resource attributes, selecting translation strategies, and managing identifying resource attributes.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/configuration/configuration.md#_snippet_14

LANGUAGE: APIDOC
CODE:
```
otlp:
  # Promote specific list of resource attributes to labels.
  # It cannot be configured simultaneously with 'promote_all_resource_attributes: true'.
  [ promote_resource_attributes: [<string>, ...] | default = [ ] ]
  # Promoting all resource attributes to labels, except for the ones configured with 'ignore_resource_attributes'.
  # Be aware that changes in attributes received by the OTLP endpoint may result in time series churn and lead to high memory usage by the Prometheus server.
  # It cannot be set to 'true' simultaneously with 'promote_resource_attributes'.
  [ promote_all_resource_attributes: <boolean> | default = false ]
  # Which resource attributes to ignore, can only be set when 'promote_all_resource_attributes' is true.
  [ ignore_resource_attributes: [<string>, ...] | default = [] ]
  # Configures translation of OTLP metrics when received through the OTLP metrics
  # endpoint. Available values:
  # - "UnderscoreEscapingWithSuffixes" refers to commonly agreed normalization used
  #   by OpenTelemetry in https://github.com/open-telemetry/opentelemetry-collector-contrib/tree/main/pkg/translator/prometheus
  # - "NoUTF8EscapingWithSuffixes" is a mode that relies on UTF-8 support in Prometheus.
  #   It preserves all special characters like dots, but still adds required metric name suffixes
  #   for units and _total, as UnderscoreEscapingWithSuffixes does.
  # - (EXPERIMENTAL) "NoTranslation" is a mode that relies on UTF-8 support in Prometheus.
  #
  #   WARNING: The "NoTranslation" setting has significant known risks and limitations (see https://prometheus.io/docs/practices/naming/
  #   for details):
  #       * Impaired UX when using PromQL in plain YAML (e.g. alerts, rules, dashboard, autoscaling configuration).
  #       * Series collisions which in the best case may result in OOO errors, in the worst case a silently malformed
  #         time series. For instance, you may end up in situation of ingesting `foo.bar` series with unit
  #         `seconds` and a separate series `foo.bar` with unit `milliseconds`.
  [ translation_strategy: <string> | default = "UnderscoreEscapingWithSuffixes" ]
  # Enables adding "service.name", "service.namespace" and "service.instance.id"
  # resource attributes to the "target_info" metric, on top of converting
  # them into the "instance" and "job" labels.
  [ keep_identifying_resource_attributes: <boolean> | default = false]
  # Configures optional translation of OTLP explicit bucket histograms into native histograms with custom buckets.
  [ convert_histograms_to_nhcb: <boolean> | default = false]

# Settings related to the remote read feature.
remote_read:
  [ - <remote_read> ... ]

# Storage related settings that are runtime reloadable.
storage:
  [ tsdb: <tsdb> ]
  [ exemplars: <exemplars> ]

# Configures exporting traces.
tracing:
  [ <tracing_config> ]
```

----------------------------------------

TITLE: Prometheus General Configuration Parameters
DESCRIPTION: Describes common configuration parameters applicable across various Prometheus service discovery mechanisms, including refresh intervals and HTTP client settings.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/configuration/configuration.md#_snippet_113

LANGUAGE: APIDOC
CODE:
```
refresh_interval: <duration> | default = 60s
<http_config>
```

----------------------------------------

TITLE: Prometheus GCE SD: Available Meta Labels for Relabeling
DESCRIPTION: This section lists the meta labels exposed by Prometheus GCE service discovery, which can be used during relabeling. These labels provide detailed metadata about GCE instances, such as ID, name, machine type, IP addresses, project, and zone, enabling dynamic target configuration.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/configuration/configuration.md#_snippet_96

LANGUAGE: APIDOC
CODE:
```
__meta_gce_instance_id: numeric ID of the instance
__meta_gce_instance_name: name of the instance
__meta_gce_label_<labelname>: GCE label of the instance (unsupported chars converted to underscore)
__meta_gce_machine_type: full or partial URL of the machine type
__meta_gce_metadata_<name>: metadata item of the instance
__meta_gce_network: network URL of the instance
__meta_gce_private_ip: private IP address of the instance
__meta_gce_interface_ipv4_<name>: IPv4 address of each named interface
__meta_gce_project: GCP project where instance is running
__meta_gce_public_ip: public IP address of the instance (if present)
__meta_gce_subnetwork: subnetwork URL of the instance
__meta_gce_tags: comma separated list of instance tags
__meta_gce_zone: GCE zone URL where instance is running
```

----------------------------------------

TITLE: Configure Alert Rule For Grace Period
DESCRIPTION: Defines the minimum duration between an alert and its restored 'for' state. This grace period is maintained only for alerts with a configured 'for' time greater than the grace period itself. This flag is for use with server mode only.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/command-line/prometheus.md#_snippet_12

LANGUAGE: APIDOC
CODE:
```
--rules.alert.for-grace-period <duration>
Default: 10m
Usage: server mode only
```

----------------------------------------

TITLE: PromQL Range Query with Arithmetic Duration Expressions
DESCRIPTION: Examples demonstrating the use of arithmetic expressions to define time ranges in PromQL queries. This allows for dynamic and calculated range specifications, such as `5m * 2` for a 10-minute range or `(5+2) * 1m` for a 7-minute range.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/feature_flags.md#_snippet_15

LANGUAGE: PromQL
CODE:
```
rate(http_requests_total[5m * 2])  # 10 minute range
rate(http_requests_total[(5+2) * 1m])  # 7 minute range
```

----------------------------------------

TITLE: Prometheus Server Ready Status
DESCRIPTION: This simple metric indicates whether the Prometheus server is ready to serve requests. A value of '1' typically means the server is operational and healthy, while '0' would indicate it's not ready.
SOURCE: https://github.com/prometheus/prometheus/blob/main/model/textparse/testdata/alltypes.237mfs.nometa.prom.txt#_snippet_66

LANGUAGE: Prometheus Metrics
CODE:
```
prometheus_ready 1
```

----------------------------------------

TITLE: Prometheus Docker Swarm Node Discovery Configuration
DESCRIPTION: This YAML configuration block defines how Prometheus discovers Docker Swarm nodes. It specifies the Docker daemon host, the 'nodes' role for target retrieval, an optional port for scraping metrics, and allows for filters to refine the discovery process. It also includes settings for refresh interval and HTTP client configurations.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/configuration/configuration.md#_snippet_78

LANGUAGE: YAML
CODE:
```
# Address of the Docker daemon.
host: <string>

# Role of the targets to retrieve. Must be `services`, `tasks`, or `nodes`.
role: <string>

# The port to scrape metrics from, when `role` is nodes, and for discovered
# tasks and services that don't have published ports.
[ port: <int> | default = 80 ]

# Optional filters to limit the discovery process to a subset of available
# resources.
# The available filters are listed in the upstream documentation:
# Services: https://docs.docker.com/engine/api/v1.40/#operation/ServiceList
# Tasks: https://docs.docker.com/engine/api/v1.40/#operation/TaskList
# Nodes: https://docs.docker.com/engine/api/v1.40/#operation/NodeList
[ filters:
  [ - name: <string>
      values: <string>, [...] ]

# The time after which the service discovery data is refreshed.
[ refresh_interval: <duration> | default = 60s ]

# HTTP client settings, including authentication methods (such as basic auth and
# authorization), proxy configurations, TLS options, custom HTTP headers, etc.
[ <http_config> ]
```

----------------------------------------

TITLE: Prometheus API: Get Alertmanagers Status
DESCRIPTION: Returns an overview of the current state of Prometheus alertmanager discovery, including both active and dropped Alertmanagers.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/querying/api.md#_snippet_35

LANGUAGE: APIDOC
CODE:
```
GET /api/v1/alertmanagers
```

----------------------------------------

TITLE: Calculate Per-Second Derivative with PromQL `deriv()`
DESCRIPTION: The `deriv()` function calculates the per-second derivative of each float time series in a range vector using simple linear regression. It requires at least two float samples and is only applicable to gauges. Elements containing only histogram samples are ignored.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/querying/functions.md#_snippet_13

LANGUAGE: APIDOC
CODE:
```
deriv(v range-vector)
```

----------------------------------------

TITLE: Prometheus Scrape Label Value Length Limit
DESCRIPTION: Sets a limit on the length (in bytes) of individual label values after metric relabeling. If any label value is longer, the entire scrape will fail. Label values are UTF-8 encoded. A value of 0 means no limit.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/configuration/configuration.md#_snippet_58

LANGUAGE: APIDOC
CODE:
```
[ label_value_length_limit: <int> | default = 0 ]
```

----------------------------------------

TITLE: Prometheus Total Go Scheduler Pauses for GC
DESCRIPTION: This snippet presents Prometheus metrics for the total time Go's scheduler is paused specifically for garbage collection activities. It includes a histogram of pause durations, the total sum of pause times, and the total count of such pauses. This provides a comprehensive view of the overhead introduced by GC on the scheduler.
SOURCE: https://github.com/prometheus/prometheus/blob/main/model/textparse/testdata/alltypes.237mfs.nometa.prom.txt#_snippet_4

LANGUAGE: Prometheus Metrics
CODE:
```
go_sched_pauses_total_gc_seconds_bucket{le="6.399999999999999e-08"} 0
go_sched_pauses_total_gc_seconds_bucket{le="6.399999999999999e-07"} 0
go_sched_pauses_total_gc_seconds_bucket{le="7.167999999999999e-06"} 137212
go_sched_pauses_total_gc_seconds_bucket{le="8.191999999999999e-05"} 208425
go_sched_pauses_total_gc_seconds_bucket{le="0.0009175039999999999"} 376121
go_sched_pauses_total_gc_seconds_bucket{le="0.010485759999999998"} 381798
go_sched_pauses_total_gc_seconds_bucket{le="0.11744051199999998"} 381863
go_sched_pauses_total_gc_seconds_bucket{le="+Inf"} 381864
go_sched_pauses_total_gc_seconds_sum 20.343611904000003
go_sched_pauses_total_gc_seconds_count 381864
```

----------------------------------------

TITLE: Prometheus Go Scheduler Pauses for Other Stop-the-World Events
DESCRIPTION: This snippet shows Prometheus metrics for Go runtime scheduler pauses caused by 'stop-the-world' events other than garbage collection. It includes a histogram of pause durations, the total sum of pause times, and the total count of such pauses. These metrics help identify other system-level or runtime-initiated pauses.
SOURCE: https://github.com/prometheus/prometheus/blob/main/model/textparse/testdata/alltypes.237mfs.nometa.prom.txt#_snippet_3

LANGUAGE: Prometheus Metrics
CODE:
```
go_sched_pauses_stopping_other_seconds_bucket{le="6.399999999999999e-08"} 0
go_sched_pauses_stopping_other_seconds_bucket{le="6.399999999999999e-07"} 0
go_sched_pauses_stopping_other_seconds_bucket{le="7.167999999999999e-06"} 0
go_sched_pauses_stopping_other_seconds_bucket{le="8.191999999999999e-05"} 0
go_sched_pauses_stopping_other_seconds_bucket{le="0.0009175039999999999"} 0
go_sched_pauses_stopping_other_seconds_bucket{le="0.010485759999999998"} 0
go_sched_pauses_stopping_other_seconds_bucket{le="0.11744051199999998"} 0
go_sched_pauses_stopping_other_seconds_bucket{le="+Inf"} 0
go_sched_pauses_stopping_other_seconds_sum 0
go_sched_pauses_stopping_other_seconds_count 0
```

----------------------------------------

TITLE: Prometheus Go Scheduler Pauses for Stopping GC
DESCRIPTION: This snippet provides Prometheus metrics related to the time Go's scheduler spends paused during garbage collection's 'stop-the-world' phase. It includes a histogram of pause durations, the total sum of pause times, and the total count of such pauses. Monitoring these pauses is critical for understanding GC impact on application responsiveness.
SOURCE: https://github.com/prometheus/prometheus/blob/main/model/textparse/testdata/alltypes.237mfs.nometa.prom.txt#_snippet_2

LANGUAGE: Prometheus Metrics
CODE:
```
go_sched_pauses_stopping_gc_seconds_bucket{le="6.399999999999999e-08"} 0
go_sched_pauses_stopping_gc_seconds_bucket{le="6.399999999999999e-07"} 236272
go_sched_pauses_stopping_gc_seconds_bucket{le="7.167999999999999e-06"} 380799
go_sched_pauses_stopping_gc_seconds_bucket{le="8.191999999999999e-05"} 381741
go_sched_pauses_stopping_gc_seconds_bucket{le="0.0009175039999999999"} 381807
go_sched_pauses_stopping_gc_seconds_bucket{le="0.010485759999999998"} 381862
go_sched_pauses_stopping_gc_seconds_bucket{le="0.11744051199999998"} 381864
go_sched_pauses_stopping_gc_seconds_bucket{le="+Inf"} 381864
go_sched_pauses_stopping_gc_seconds_sum 0.191211904
go_sched_pauses_stopping_gc_seconds_count 381864
```

----------------------------------------

TITLE: Prometheus Scrape Target Limit
DESCRIPTION: Sets a per-scrape configuration limit on the number of unique targets accepted after target relabeling. If more targets are present, Prometheus will mark them as failed without scraping. A value of 0 means no limit. This is an experimental feature.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/configuration/configuration.md#_snippet_59

LANGUAGE: APIDOC
CODE:
```
[ target_limit: <int> | default = 0 ]
```

----------------------------------------

TITLE: Binary expression with group_x() labels.
DESCRIPTION: This snippet illustrates a PromQL binary expression with `on()` and `group_left()` modifiers. It details how these grouping and matching modifiers are represented in the AST, affecting how metrics are joined and aggregated.
SOURCE: https://github.com/prometheus/prometheus/blob/main/web/ui/module/lezer-promql/test/expression.txt#_snippet_15

LANGUAGE: PromQL
CODE:
```
metric1 + on(foo) group_left(bar, baz) metric2
```

LANGUAGE: PromQL AST
CODE:
```
PromQL(
    BinaryExpr(
        VectorSelector(
          Identifier
        ),
      Add,
        MatchingModifierClause(
          On,
          GroupingLabels(
              LabelName
          )
          GroupLeft,
          GroupingLabels(
            LabelName,
            LabelName
          )
        ),
        VectorSelector(
            Identifier
        )
  )
)
```

----------------------------------------

TITLE: Configure Alert Rule For Outage Tolerance
DESCRIPTION: Sets the maximum time to tolerate a Prometheus outage for restoring the 'for' state of an alert. This flag is for use with server mode only.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/command-line/prometheus.md#_snippet_11

LANGUAGE: APIDOC
CODE:
```
--rules.alert.for-outage-tolerance <duration>
Default: 1h
Usage: server mode only
```

----------------------------------------

TITLE: Prometheus API: Query Alertmanagers Status
DESCRIPTION: Example demonstrating how to retrieve the status of active and dropped Alertmanagers connected to Prometheus. The response lists URLs for each discovered Alertmanager.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/querying/api.md#_snippet_36

LANGUAGE: bash
CODE:
```
curl http://localhost:9090/api/v1/alertmanagers
```

LANGUAGE: json
CODE:
```
{
  "status": "success",
  "data": {
    "activeAlertmanagers": [
      {
        "url": "http://127.0.0.1:9090/api/v1/alerts"
      }
    ],
    "droppedAlertmanagers": [
      {
        "url": "http://127.0.0.1:9093/api/v1/alerts"
      }
    ]
  }
}
```

----------------------------------------

TITLE: Promtool: TSDB Commands
DESCRIPTION: The `promtool tsdb` command provides various utilities for managing and interacting with Prometheus's Time Series Database (TSDB).
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/command-line/promtool.md#_snippet_25

LANGUAGE: APIDOC
CODE:
```
promtool tsdb
  Description: Run tsdb commands.
  Subcommands: bench, analyze, list, dump
```

----------------------------------------

TITLE: Filter Prometheus Metrics by 99th Percentile (PromQL)
DESCRIPTION: This PromQL query filters the `prometheus_target_interval_length_seconds` metric to specifically show only the 99th percentile latencies, demonstrating label-based filtering.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/getting_started.md#_snippet_4

LANGUAGE: PromQL
CODE:
```
prometheus_target_interval_length_seconds{quantile="0.99"}
```

----------------------------------------

TITLE: Prometheus Management API: Health Check Endpoint
DESCRIPTION: Checks the basic health status of the Prometheus server. This endpoint always returns a 200 OK status, indicating the server process is running.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/management_api.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
GET /-/healthy
HEAD /-/healthy
```

----------------------------------------

TITLE: Prometheus Rule Group Performance and Evaluation Metrics
DESCRIPTION: This snippet displays various Prometheus metrics related to rule group operations. It includes `prometheus_rule_group_last_duration_seconds` for the total evaluation duration, `prometheus_rule_group_last_evaluation_samples` for the number of samples processed, `prometheus_rule_group_last_evaluation_timestamp_seconds` for the last successful evaluation time, `prometheus_rule_group_last_restore_duration_seconds` for the time taken to restore state, and `prometheus_rule_group_last_rule_duration_sum_seconds` for the sum of individual rule evaluation durations within a group. Each metric is uniquely identified by the `rule_group` label, which specifies the rule file path and the group name.
SOURCE: https://github.com/prometheus/prometheus/blob/main/model/textparse/testdata/alltypes.237mfs.nometa.prom.txt#_snippet_76

LANGUAGE: Prometheus Metrics
CODE:
```
prometheus_rule_group_last_duration_seconds{rule_group="/etc/prometheus/rules/ansible_managed.yml;ansible managed alert rules"} 0.001104624
prometheus_rule_group_last_duration_seconds{rule_group="/etc/prometheus/rules/node_alerts.rules;node-exporter"} 0.022040842
prometheus_rule_group_last_duration_seconds{rule_group="/etc/prometheus/rules/node_alerts.yaml;node-exporter"} 0.048928087
prometheus_rule_group_last_duration_seconds{rule_group="/etc/prometheus/rules/node_rules.rules;node-exporter.rules"} 0.002766703
prometheus_rule_group_last_duration_seconds{rule_group="/etc/prometheus/rules/node_rules.yaml;node-exporter.rules"} 0.002218466
prometheus_rule_group_last_duration_seconds{rule_group="/etc/prometheus/rules/prometheus_alerts.rules;prometheus"} 0.010245447
prometheus_rule_group_last_duration_seconds{rule_group="/etc/prometheus/rules/prometheus_alerts.yaml;prometheus"} 0.009232393
prometheus_rule_group_last_evaluation_samples{rule_group="/etc/prometheus/rules/ansible_managed.rules;ansible managed alert rules"} 2
prometheus_rule_group_last_evaluation_samples{rule_group="/etc/prometheus/rules/ansible_managed.yml;ansible managed alert rules"} 2
prometheus_rule_group_last_evaluation_samples{rule_group="/etc/prometheus/rules/node_alerts.rules;node-exporter"} 10
prometheus_rule_group_last_evaluation_samples{rule_group="/etc/prometheus/rules/node_alerts.yaml;node-exporter"} 10
prometheus_rule_group_last_evaluation_samples{rule_group="/etc/prometheus/rules/node_rules.rules;node-exporter.rules"} 11
prometheus_rule_group_last_evaluation_samples{rule_group="/etc/prometheus/rules/node_rules.yaml;node-exporter.rules"} 11
prometheus_rule_group_last_evaluation_samples{rule_group="/etc/prometheus/rules/prometheus_alerts.rules;prometheus"} 0
prometheus_rule_group_last_evaluation_samples{rule_group="/etc/prometheus/rules/prometheus_alerts.yaml;prometheus"} 0
prometheus_rule_group_last_evaluation_timestamp_seconds{rule_group="/etc/prometheus/rules/ansible_managed.rules;ansible managed alert rules"} 1.738949373753179e+09
prometheus_rule_group_last_evaluation_timestamp_seconds{rule_group="/etc/prometheus/rules/ansible_managed.yml;ansible managed alert rules"} 1.738949366900781e+09
prometheus_rule_group_last_evaluation_timestamp_seconds{rule_group="/etc/prometheus/rules/node_alerts.rules;node-exporter"} 1.7389493632087085e+09
prometheus_rule_group_last_evaluation_timestamp_seconds{rule_group="/etc/prometheus/rules/node_alerts.yaml;node-exporter"} 1.7389493666743164e+09
prometheus_rule_group_last_evaluation_timestamp_seconds{rule_group="/etc/prometheus/rules/node_rules.rules;node-exporter.rules"} 1.7389493675395968e+09
prometheus_rule_group_last_evaluation_timestamp_seconds{rule_group="/etc/prometheus/rules/node_rules.yaml;node-exporter.rules"} 1.7389493623381927e+09
prometheus_rule_group_last_evaluation_timestamp_seconds{rule_group="/etc/prometheus/rules/prometheus_alerts.rules;prometheus"} 1.738949366856423e+09
prometheus_rule_group_last_evaluation_timestamp_seconds{rule_group="/etc/prometheus/rules/prometheus_alerts.yaml;prometheus"} 1.738949369917499e+09
prometheus_rule_group_last_restore_duration_seconds{rule_group="/etc/prometheus/rules/ansible_managed.rules;ansible managed alert rules"} 0.002032625
prometheus_rule_group_last_restore_duration_seconds{rule_group="/etc/prometheus/rules/ansible_managed.yml;ansible managed alert rules"} 9.1853e-05
prometheus_rule_group_last_restore_duration_seconds{rule_group="/etc/prometheus/rules/node_alerts.rules;node-exporter"} 0.000166088
prometheus_rule_group_last_restore_duration_seconds{rule_group="/etc/prometheus/rules/node_alerts.yaml;node-exporter"} 0.000108127
prometheus_rule_group_last_restore_duration_seconds{rule_group="/etc/prometheus/rules/node_rules.rules;node-exporter.rules"} 6.408e-06
prometheus_rule_group_last_restore_duration_seconds{rule_group="/etc/prometheus/rules/node_rules.yaml;node-exporter.rules"} 2.621e-06
prometheus_rule_group_last_restore_duration_seconds{rule_group="/etc/prometheus/rules/prometheus_alerts.rules;prometheus"} 8.4979e-05
prometheus_rule_group_last_restore_duration_seconds{rule_group="/etc/prometheus/rules/prometheus_alerts.yaml;prometheus"} 0.000104444
prometheus_rule_group_last_rule_duration_sum_seconds{rule_group="/etc/prometheus/rules/ansible_managed.rules;ansible managed alert rules"} 0.000685176
prometheus_rule_group_last_rule_duration_sum_seconds{rule_group="/etc/prometheus/rules/ansible_managed.yml;ansible managed alert rules"} 0.001035099
prometheus_rule_group_last_rule_duration_sum_seconds{rule_group="/etc/prometheus/rules/node_alerts.rules;node-exporter"} 0.021769662
prometheus_rule_group_last_rule_duration_sum_seconds{rule_group="/etc/prometheus/rules/node_alerts.yaml;node-exporter"} 0.042017156
prometheus_rule_group_last_rule_duration_sum_seconds{rule_group="/etc/prometheus/rules/node_rules.rules;node-exporter.rules"} 0.00260535
```

----------------------------------------

TITLE: Configure Prometheus File Service Discovery
DESCRIPTION: List of file service discovery configurations for Prometheus.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/configuration/configuration.md#_snippet_32

LANGUAGE: APIDOC
CODE:
```
file_sd_configs:
  [ - <file_sd_config> ... ]
```

----------------------------------------

TITLE: Prometheus Nomad Service Discovery Configuration
DESCRIPTION: Configures Prometheus to discover scrape targets from Nomad's Service API. This snippet details the YAML configuration options for connecting to the Nomad API, including settings for staleness, namespace, refresh interval, region, server URL, and tag separator. It also lists the meta labels available for relabeling discovered targets.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/configuration/configuration.md#_snippet_116

LANGUAGE: yaml
CODE:
```
# The information to access the Nomad API. It is to be defined
# as the Nomad documentation requires.
[ allow_stale: <boolean> | default = true ]
[ namespace: <string> | default = default ]
[ refresh_interval: <duration> | default = 60s ]
[ region: <string> | default = global ]
# The URL to connect to the API.
[ server: <string> ]
[ tag_separator: <string> | default = ,]
```

LANGUAGE: APIDOC
CODE:
```
__meta_nomad_address: the service address of the target
__meta_nomad_dc: the datacenter name for the target
__meta_nomad_namespace: the namespace of the target
__meta_nomad_node_id: the node name defined for the target
__meta_nomad_service: the name of the service the target belongs to
__meta_nomad_service_address: the service address of the target
__meta_nomad_service_id: the service ID of the target
__meta_nomad_service_port: the service port of the target
__meta_nomad_tags: the list of tags of the target joined by the tag separator
```

----------------------------------------

TITLE: Count Counter Resets in PromQL
DESCRIPTION: `resets(v range-vector)` returns the number of counter resets within the provided time range for each input time series. Resets are detected by any decrease in float samples or complex changes in native histograms (e.g., decrease in buckets, count, or schema changes). This function should only be used with counters.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/querying/functions.md#_snippet_46

LANGUAGE: APIDOC
CODE:
```
resets(v range-vector)
  v: The range vector to check for counter resets.
```

----------------------------------------

TITLE: Limit Time Series to Top K Elements
DESCRIPTION: When exploring metrics for their labels, to e.g. be able to aggregate over some of them, this query limits the returned time series to the top 10 elements.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/querying/examples.md#_snippet_13

LANGUAGE: PromQL
CODE:
```
limitk(10, app_foo_metric_bar)
```

----------------------------------------

TITLE: Enable Concurrent Rule Evaluation in Prometheus
DESCRIPTION: This flag allows rules within a rule group that have no detectable dependencies on other rules to be evaluated concurrently, potentially improving latency and resource utilization. The maximum number of concurrent evaluations can be configured with `--rules.max-concurrent-rule-evals`.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/feature_flags.md#_snippet_7

LANGUAGE: Bash
CODE:
```
--enable-feature=concurrent-rule-eval
```

----------------------------------------

TITLE: Prometheus API: Scalar Result Format
DESCRIPTION: Describes the JSON format for scalar results, returned as `scalar` type. The `result` property is a two-element array containing a Unix timestamp and a quoted scalar value.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/querying/api.md#_snippet_20

LANGUAGE: json
CODE:
```
[ <unix_time>, "<scalar_value>" ]
```

----------------------------------------

TITLE: RPC Latency Histogram Metric
DESCRIPTION: Provides a histogram of RPC latency distributions, allowing for the analysis of response time percentiles. It includes buckets for various duration ranges, the sum of all observed latencies, and the total count of observations.
SOURCE: https://github.com/prometheus/prometheus/blob/main/model/textparse/testdata/alltypes.5mfs.om.txt#_snippet_2

LANGUAGE: Prometheus Metrics
CODE:
```
# HELP rpc_durations_histogram_seconds RPC latency distributions.
# TYPE rpc_durations_histogram_seconds histogram
rpc_durations_histogram_seconds_bucket{le="-0.00099"} 0
rpc_durations_histogram_seconds_bucket{le="-0.00089"} 0
rpc_durations_histogram_seconds_bucket{le="-0.0007899999999999999"} 0
rpc_durations_histogram_seconds_bucket{le="-0.0006899999999999999"} 0
rpc_durations_histogram_seconds_bucket{le="-0.0005899999999999998"} 0
rpc_durations_histogram_seconds_bucket{le="-0.0004899999999999998"} 0
rpc_durations_histogram_seconds_bucket{le="-0.0003899999999999998"} 3
rpc_durations_histogram_seconds_bucket{le="-0.0001899999999999998"} 5
rpc_durations_histogram_seconds_bucket{le="-8.999999999999979e-05"} 5
rpc_durations_histogram_seconds_bucket{le="1.0000000000000216e-05"} 8
rpc_durations_histogram_seconds_bucket{le="0.00011000000000000022"} 9
rpc_durations_histogram_seconds_bucket{le="0.00021000000000000023"} 11
rpc_durations_histogram_seconds_bucket{le="0.0003100000000000002"} 15
rpc_durations_histogram_seconds_bucket{le="0.0004100000000000002"} 15
rpc_durations_histogram_seconds_bucket{le="0.0005100000000000003"} 15
rpc_durations_histogram_seconds_bucket{le="0.0006100000000000003"} 15
rpc_durations_histogram_seconds_bucket{le="0.0007100000000000003"} 15
rpc_durations_histogram_seconds_bucket{le="0.0008100000000000004"} 15
rpc_durations_histogram_seconds_bucket{le="0.0009100000000000004"} 15
rpc_durations_histogram_seconds_bucket{le="+Inf"} 15
rpc_durations_histogram_seconds_sum -8.452185437166741e-05
rpc_durations_histogram_seconds_count 15
rpc_durations_histogram_seconds_created 1.726839813016302e+09
```

----------------------------------------

TITLE: Calculate Average of Histogram Observations with PromQL `histogram_avg()`
DESCRIPTION: The `histogram_avg()` function returns the arithmetic average of observed values stored in each histogram sample in an instant vector. Float samples are ignored. It can be used to compute average request duration from native histograms, equivalent to `histogram_sum()` divided by `histogram_count()`.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/querying/functions.md#_snippet_17

LANGUAGE: APIDOC
CODE:
```
histogram_avg(v instant-vector)
```

LANGUAGE: PromQL
CODE:
```
histogram_avg(rate(http_request_duration_seconds[5m]))
```

LANGUAGE: PromQL
CODE:
```
  histogram_sum(rate(http_request_duration_seconds[5m]))
/
  histogram_count(rate(http_request_duration_seconds[5m]))
```

----------------------------------------

TITLE: Prometheus Keep Dropped Targets Limit
DESCRIPTION: Sets a limit per scrape configuration on the number of targets dropped by relabeling that will be kept in memory. A value of 0 means no limit.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/configuration/configuration.md#_snippet_60

LANGUAGE: APIDOC
CODE:
```
[ keep_dropped_targets: <int> | default = 0 ]
```

----------------------------------------

TITLE: OpenStack Load Balancer Role Discovery and Meta Labels
DESCRIPTION: Describes the `loadbalancer` role for Prometheus OpenStack discovery, which targets one Octavia loadbalancer with a `PROMETHEUS` listener. It lists the available meta labels for relabeling, including availability zone, floating IP, ID, name, provider, operating status, provisioning status, tags, VIP, and project ID.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/configuration/configuration.md#_snippet_86

LANGUAGE: APIDOC
CODE:
```
Role: loadbalancer
  Description: Discovers one target per Octavia loadbalancer with a PROMETHEUS listener.
  Target Address Default: VIP address of the load balancer.
  Meta Labels for Relabeling:
    __meta_openstack_loadbalancer_availability_zone: The availability zone of the OpenStack load balancer.
    __meta_openstack_loadbalancer_floating_ip: The floating IP of the OpenStack load balancer.
    __meta_openstack_loadbalancer_id: The OpenStack load balancer ID.
    __meta_openstack_loadbalancer_name: The OpenStack load balancer name.
    __meta_openstack_loadbalancer_provider: The Octavia provider of the OpenStack load balancer.
    __meta_openstack_loadbalancer_operating_status: The operating status of the OpenStack load balancer.
    __meta_openstack_loadbalancer_provisioning_status: The provisioning status of the OpenStack load balancer.
    __meta_openstack_loadbalancer_tags: Comma separated list of the OpenStack load balancer.
    __meta_openstack_loadbalancer_vip: The VIP of the OpenStack load balancer.
    __meta_openstack_project_id: The project (tenant) owning this load balancer.
```

----------------------------------------

TITLE: Prometheus HTTP Request Duration for Ready Endpoint
DESCRIPTION: Histogram, sum, and count metrics for HTTP request durations served by the readiness check ('/-/ready') endpoint. These metrics indicate the performance of the application's readiness probes.
SOURCE: https://github.com/prometheus/prometheus/blob/main/model/textparse/testdata/alltypes.237mfs.nometa.prom.txt#_snippet_16

LANGUAGE: Prometheus Metrics
CODE:
```
prometheus_http_request_duration_seconds_bucket{handler="-/ready",le="0.1"} 49
prometheus_http_request_duration_seconds_bucket{handler="-/ready",le="0.2"} 49
prometheus_http_request_duration_seconds_bucket{handler="-/ready",le="0.4"} 49
prometheus_http_request_duration_seconds_bucket{handler="-/ready",le="1"} 49
prometheus_http_request_duration_seconds_bucket{handler="-/ready",le="3"} 49
prometheus_http_request_duration_seconds_bucket{handler="-/ready",le="8"} 49
prometheus_http_request_duration_seconds_bucket{handler="-/ready",le="20"} 49
prometheus_http_request_duration_seconds_bucket{handler="-/ready",le="60"} 49
prometheus_http_request_duration_seconds_bucket{handler="-/ready",le="120"} 49
prometheus_http_request_duration_seconds_bucket{handler="-/ready",le="+Inf"} 49
prometheus_http_request_duration_seconds_sum{handler="-/ready"} 0.005040123000000002
prometheus_http_request_duration_seconds_count{handler="-/ready"} 49
```

----------------------------------------

TITLE: PromQL Numeric Literal
DESCRIPTION: Demonstrates a numeric literal with an exponent in PromQL and its parsing as a NumberDurationLiteral.
SOURCE: https://github.com/prometheus/prometheus/blob/main/web/ui/module/lezer-promql/test/expression.txt#_snippet_0

LANGUAGE: PromQL
CODE:
```
0.123e3

==>

PromQL(NumberDurationLiteral)
```

----------------------------------------

TITLE: Calculate Unused Memory Summed by Application and Process
DESCRIPTION: The same expression as before, but summed by application and process.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/querying/examples.md#_snippet_10

LANGUAGE: PromQL
CODE:
```
sum by (app, proc) (
  instance_memory_limit_bytes - instance_memory_usage_bytes
) / 1024 / 1024
```

----------------------------------------

TITLE: Prometheus API: Query Runtime Information
DESCRIPTION: Example demonstrating how to retrieve detailed runtime properties of the Prometheus server, such as start time, current working directory, hostname, and various internal metrics like goroutine count and storage retention.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/querying/api.md#_snippet_42

LANGUAGE: bash
CODE:
```
curl http://localhost:9090/api/v1/status/runtimeinfo
```

LANGUAGE: json
CODE:
```
{
  "status": "success",
  "data": {
    "startTime": "2019-11-02T17:23:59.301361365+01:00",
    "CWD": "/",
    "hostname" : "DESKTOP-717H17Q",
    "serverTime": "2025-01-05T18:27:33Z",
    "reloadConfigSuccess": true,
    "lastConfigTime": "2019-11-02T17:23:59+01:00",
    "timeSeriesCount": 873,
    "corruptionCount": 0,
    "goroutineCount": 48,
    "GOMAXPROCS": 4,
    "GOGC": "",
    "GODEBUG": "",
    "storageRetention": "15d"
  }
}
```

----------------------------------------

TITLE: Prometheus EC2 Service Discovery Meta Labels
DESCRIPTION: Lists the meta labels available on targets discovered via EC2 service discovery, which can be used during Prometheus relabeling. These labels provide detailed information about the EC2 instance, such as AMI, instance ID, state, type, IP addresses, region, and tags.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/configuration/configuration.md#_snippet_82

LANGUAGE: APIDOC
CODE:
```
* `__meta_ec2_ami`: the EC2 Amazon Machine Image
* `__meta_ec2_architecture`: the architecture of the instance
* `__meta_ec2_availability_zone`: the availability zone in which the instance is running
* `__meta_ec2_availability_zone_id`: the [availability zone ID](https://docs.aws.amazon.com/ram/latest/userguide/working-with-az-ids.html) in which the instance is running (requires `ec2:DescribeAvailabilityZones`)
* `__meta_ec2_instance_id`: the EC2 instance ID
* `__meta_ec2_instance_lifecycle`: the lifecycle of the EC2 instance, set only for 'spot' or 'scheduled' instances, absent otherwise
* `__meta_ec2_instance_state`: the state of the EC2 instance
* `__meta_ec2_instance_type`: the type of the EC2 instance
* `__meta_ec2_ipv6_addresses`: comma separated list of IPv6 addresses assigned to the instance's network interfaces, if present
* `__meta_ec2_owner_id`: the ID of the AWS account that owns the EC2 instance
* `__meta_ec2_platform`: the Operating System platform, set to 'windows' on Windows servers, absent otherwise
* `__meta_ec2_primary_ipv6_addresses`: comma separated list of the Primary IPv6 addresses of the instance, if present. The list is ordered based on the position of each corresponding network interface in the attachment order.
* `__meta_ec2_primary_subnet_id`: the subnet ID of the primary network interface, if available
* `__meta_ec2_private_dns_name`: the private DNS name of the instance, if available
* `__meta_ec2_private_ip`: the private IP address of the instance, if present
* `__meta_ec2_public_dns_name`: the public DNS name of the instance, if available
* `__meta_ec2_public_ip`: the public IP address of the instance, if available
* `__meta_ec2_region`: the region of the instance
* `__meta_ec2_subnet_id`: comma separated list of subnets IDs in which the instance is running, if available
* `__meta_ec2_tag_<tagkey>`: each tag value of the instance
* `__meta_ec2_vpc_id`: the ID of the VPC in which the instance is running, if available
```

----------------------------------------

TITLE: PromQL Function: time()
DESCRIPTION: The `time()` function returns the number of seconds that have elapsed since January 1, 1970 UTC. It's important to note that this function provides the timestamp at which the PromQL expression is evaluated, not the current real-world time.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/querying/functions.md#_snippet_55

LANGUAGE: APIDOC
CODE:
```
time()
  Description: Returns the number of seconds since January 1, 1970 UTC.
  Note: This returns the time at which the expression is evaluated, not the current time.
```

----------------------------------------

TITLE: Prometheus Rule Evaluation Performance and Failure Metrics
DESCRIPTION: This set of metrics provides insights into the performance and reliability of Prometheus rule evaluations. It includes the duration of rule evaluations (with quantiles, sum, and count) and the total number of failures, broken down by specific rule groups. This helps in identifying slow or failing alert and recording rules.
SOURCE: https://github.com/prometheus/prometheus/blob/main/model/textparse/testdata/alltypes.237mfs.nometa.prom.txt#_snippet_68

LANGUAGE: Prometheus Metrics
CODE:
```
prometheus_rule_evaluation_duration_seconds{quantile="0.5"} 0.000214623
prometheus_rule_evaluation_duration_seconds{quantile="0.9"} 0.001456135
prometheus_rule_evaluation_duration_seconds{quantile="0.99"} 0.008111814
prometheus_rule_evaluation_duration_seconds_sum 5209.704794862625
prometheus_rule_evaluation_duration_seconds_count 7.203456e+06
prometheus_rule_evaluation_failures_total{rule_group="/etc/prometheus/rules/ansible_managed.rules;ansible managed alert rules"} 0
prometheus_rule_evaluation_failures_total{rule_group="/etc/prometheus/rules/ansible_managed.yml;ansible managed alert rules"} 0
prometheus_rule_evaluation_failures_total{rule_group="/etc/prometheus/rules/node_alerts.rules;node-exporter"} 0
```

----------------------------------------

TITLE: Configure Prometheus DNS Service Discovery
DESCRIPTION: List of DNS service discovery configurations for Prometheus.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/configuration/configuration.md#_snippet_29

LANGUAGE: APIDOC
CODE:
```
dns_sd_configs:
  [ - <dns_sd_config> ... ]
```

----------------------------------------

TITLE: APIDOC: `idelta()` Function Definition
DESCRIPTION: `idelta(v range-vector)` calculates the difference between the last two samples in the range vector `v`, returning an instant vector with the given deltas and equivalent labels. It should only be used with gauges. Elements with mixed float and histogram samples will be omitted from the result.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/querying/functions.md#_snippet_29

LANGUAGE: APIDOC
CODE:
```
idelta(v range-vector)
```

----------------------------------------

TITLE: Prometheus Rule Evaluations Total
DESCRIPTION: Shows the cumulative count of successful rule evaluations for different rule groups. High values indicate frequent evaluation of the specified rule files, reflecting active monitoring and alerting.
SOURCE: https://github.com/prometheus/prometheus/blob/main/model/textparse/testdata/alltypes.237mfs.nometa.prom.txt#_snippet_70

LANGUAGE: Prometheus Metrics
CODE:
```
prometheus_rule_evaluations_total{rule_group="/etc/prometheus/rules/ansible_managed.rules;ansible managed alert rules"} 118092
prometheus_rule_evaluations_total{rule_group="/etc/prometheus/rules/ansible_managed.yml;ansible managed alert rules"} 118090
prometheus_rule_evaluations_total{rule_group="/etc/prometheus/rules/node_alerts.rules;node-exporter"} 1.4761e+06
prometheus_rule_evaluations_total{rule_group="/etc/prometheus/rules/node_alerts.yaml;node-exporter"} 1.476125e+06
prometheus_rule_evaluations_total{rule_group="/etc/prometheus/rules/node_rules.rules;node-exporter.rules"} 649495
prometheus_rule_evaluations_total{rule_group="/etc/prometheus/rules/node_rules.yaml;node-exporter.rules"} 649484
prometheus_rule_evaluations_total{rule_group="/etc/prometheus/rules/prometheus_alerts.rules;prometheus"} 1.358035e+06
prometheus_rule_evaluations_total{rule_group="/etc/prometheus/rules/prometheus_alerts.yaml;prometheus"} 1.358035e+06
```

----------------------------------------

TITLE: Prometheus Remote Read API Data Formats
DESCRIPTION: Details the data formats returned by the Prometheus Remote Read API, including raw samples and streamed chunks utilizing XOR compression.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/querying/remote_read_api.md#_snippet_1

LANGUAGE: APIDOC
CODE:
```
## Samples
This returns a message that includes a list of raw samples matching the requested query.

## Streamed Chunks
These streamed chunks utilize an XOR algorithm inspired by the [Gorilla](http://www.vldb.org/pvldb/vol8/p1816-teller.pdf) compression to encode the chunks. However, it provides resolution to the millisecond instead of to the second.
```

----------------------------------------

TITLE: Prometheus Go Mutex Wait Time Metric
DESCRIPTION: This snippet provides the Prometheus metric for the total cumulative time Go goroutines have spent waiting to acquire a `sync.Mutex`. A high value indicates potential contention and bottlenecks in concurrent operations. This metric is crucial for identifying performance issues related to synchronization.
SOURCE: https://github.com/prometheus/prometheus/blob/main/model/textparse/testdata/alltypes.237mfs.nometa.prom.txt#_snippet_6

LANGUAGE: Prometheus Metrics
CODE:
```
go_sync_mutex_wait_total_seconds_total 628.29966272
```

----------------------------------------

TITLE: promtool Global Flags
DESCRIPTION: Global flags available for the promtool command-line utility, affecting its overall behavior.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/command-line/promtool.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
promtool Global Flags:
  -h, --help: Show context-sensitive help (also try --help-long and --help-man).
  --version: Show application version.
  --experimental: Enable experimental commands.
  --enable-feature ...: Comma separated feature names to enable. Valid options: promql-experimental-functions, promql-delayed-name-removal. See https://prometheus.io/docs/prometheus/latest/feature_flags/ for more details
```

----------------------------------------

TITLE: Prometheus Rule Test Group Configuration (YAML Schema)
DESCRIPTION: Specifies the structure for a test group within a Prometheus rule test file, detailing input series, group name, and sections for alerting rule tests and PromQL expression tests, along with external labels and URL.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/configuration/unit_testing_rules.md#_snippet_2

LANGUAGE: yaml
CODE:
```
# Series data
[ interval: <duration> | default = evaluation_interval ]
input_series:
  [ - <series> ]

# Name of the test group
[ name: <string> ]

# Unit tests for the above data.

# Unit tests for alerting rules. We consider the alerting rules from the input file.
alert_rule_test:
  [ - <alert_test_case> ]

# Unit tests for PromQL expressions.
promql_expr_test:
  [ - <promql_test_case> ]

# External labels accessible to the alert template.
external_labels:
  [ <labelname>: <string> ... ]

# External URL accessible to the alert template.
# Usually set using --web.external-url.
  [ external_url: <string> ]
```

----------------------------------------

TITLE: Configure Alert Rule Resend Delay
DESCRIPTION: Sets the minimum amount of time to wait before resending an alert to Alertmanager. This flag is for use with server mode only.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/command-line/prometheus.md#_snippet_13

LANGUAGE: APIDOC
CODE:
```
--rules.alert.resend-delay <duration>
Default: 1m
Usage: server mode only
```

----------------------------------------

TITLE: Configure Agent Storage Path
DESCRIPTION: Base path for metrics storage. This flag is to be used exclusively with agent mode.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/command-line/prometheus.md#_snippet_2

LANGUAGE: APIDOC
CODE:
```
--storage.agent.path <string>
Default: data-agent/
Usage: agent mode only
```

----------------------------------------

TITLE: Query All Prometheus Target Interval Lengths (PromQL)
DESCRIPTION: This PromQL query retrieves all time series for the `prometheus_target_interval_length_seconds` metric, showing the actual time between target scrapes. It returns various series distinguished by labels like latency percentiles.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/getting_started.md#_snippet_3

LANGUAGE: PromQL
CODE:
```
prometheus_target_interval_length_seconds
```

----------------------------------------

TITLE: Configure Prometheus HTTP Service Discovery
DESCRIPTION: List of HTTP service discovery configurations for Prometheus.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/configuration/configuration.md#_snippet_35

LANGUAGE: APIDOC
CODE:
```
http_sd_configs:
  [ - <http_sd_config> ... ]
```

----------------------------------------

TITLE: Configure Query Lookback Delta
DESCRIPTION: Sets the maximum lookback duration for retrieving metrics during expression evaluations and federation. This flag is for use with server mode only.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/command-line/prometheus.md#_snippet_18

LANGUAGE: APIDOC
CODE:
```
--query.lookback-delta <duration>
Default: 5m
Usage: server mode only
```

----------------------------------------

TITLE: APIDOC: sum and avg Aggregation Operators
DESCRIPTION: Documentation for `sum` and `avg` aggregation operators. `sum` adds sample values, similar to `+`. `avg` divides the sum by the number of aggregated samples, similar to `/`. Both require input samples to be either all float or all histogram. Mixing sample types results in removal of the corresponding vector element and a warn-level annotation.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/querying/operators.md#_snippet_10

LANGUAGE: APIDOC
CODE:
```
`sum` sums up sample values in the same way as the `+` binary operator does between two values. Similarly, `avg` divides the sum by the number of aggregated samples in the same way as the `/` binary operator. Therefore, all sample values aggregation into a single resulting vector element must either be float samples or histogram samples. An aggregation of a mix of both is invalid, resulting in the removeal of the corresponding vector element from the output vector, flagged by a warn-level annotation.
```

----------------------------------------

TITLE: APIDOC: min and max Aggregation Operators
DESCRIPTION: Documentation for `min` and `max` aggregation operators. These operators only work on float samples, adhering to IEEE 754 floating point arithmetic. `NaN` is considered a minimum or maximum only if all aggregated values are `NaN`. Histogram samples in the input vector are ignored, flagged by an info-level annotation.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/querying/operators.md#_snippet_11

LANGUAGE: APIDOC
CODE:
```
`min` and `max` only operate on float samples, following IEEE 754 floating point arithmetic, which in particular implies that `NaN` is only ever considered a minimum or maximum if all aggregated values are `NaN`. Histogram samples in the input vector are ignored, flagged by an info-level annotation.
```

----------------------------------------

TITLE: Prometheus API: String Result Format
DESCRIPTION: Describes the JSON format for string results, returned as `string` type. The `result` property is a two-element array containing a Unix timestamp and a quoted string value.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/querying/api.md#_snippet_21

LANGUAGE: json
CODE:
```
[ <unix_time>, "<string_value>" ]
```

----------------------------------------

TITLE: Prometheus Alert Notification System Metrics
DESCRIPTION: This section details metrics related to Prometheus's alert notification system. It covers the number of discovered Alertmanagers, dropped notifications, errors encountered during sending, latency of notifications (with quantiles), queue capacity and length, and the total count of successfully sent notifications. These metrics are crucial for monitoring the health and performance of the alerting pipeline.
SOURCE: https://github.com/prometheus/prometheus/blob/main/model/textparse/testdata/alltypes.237mfs.nometa.prom.txt#_snippet_65

LANGUAGE: Prometheus Metrics
CODE:
```
prometheus_notifications_alertmanagers_discovered 1
prometheus_notifications_dropped_total 0
prometheus_notifications_errors_total{alertmanager="http://demo.do.prometheus.io:9093/api/v2/alerts"} 0
prometheus_notifications_latency_seconds{alertmanager="http://demo.do.prometheus.io:9093/api/v2/alerts",quantile="0.5"} 0.001566044
prometheus_notifications_latency_seconds{alertmanager="http://demo.do.prometheus.io:9093/api/v2/alerts",quantile="0.9"} 0.003927931
prometheus_notifications_latency_seconds{alertmanager="http://demo.do.prometheus.io:9093/api/v2/alerts",quantile="0.99"} 0.013928135
prometheus_notifications_latency_seconds_sum{alertmanager="http://demo.do.prometheus.io:9093/api/v2/alerts"} 194.15032606200046
prometheus_notifications_latency_seconds_count{alertmanager="http://demo.do.prometheus.io:9093/api/v2/alerts"} 75180
prometheus_notifications_queue_capacity 10000
prometheus_notifications_queue_length 0
prometheus_notifications_sent_total{alertmanager="http://demo.do.prometheus.io:9093/api/v2/alerts"} 141616
```

----------------------------------------

TITLE: Promtool Debug All Command
DESCRIPTION: The `promtool debug all` command fetches all available debug information from a specified Prometheus server.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/command-line/promtool.md#_snippet_20

LANGUAGE: APIDOC
CODE:
```
Command: promtool debug all
  Description: Fetch all debug information.
  Arguments:
    server <string> (Required): Prometheus server to get all debug information from.
```

----------------------------------------

TITLE: Prometheus EC2 Service Discovery Configuration Options
DESCRIPTION: Provides the YAML configuration structure for `ec2_sd_config` in Prometheus. It defines parameters for connecting to the AWS EC2 API, including region, credentials, refresh interval, scrape port, and advanced filtering options for instance discovery.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/configuration/configuration.md#_snippet_83

LANGUAGE: YAML
CODE:
```
# The information to access the EC2 API.

# The AWS region. If blank, the region from the instance metadata is used.
[ region: <string> ]

# Custom endpoint to be used.
[ endpoint: <string> ]

# The AWS API keys. If blank, the environment variables `AWS_ACCESS_KEY_ID`
# and `AWS_SECRET_ACCESS_KEY` are used.
[ access_key: <string> ]
[ secret_key: <secret> ]
# Named AWS profile used to connect to the API.
[ profile: <string> ]

# AWS Role ARN, an alternative to using AWS API keys.
[ role_arn: <string> ]

# Refresh interval to re-read the instance list.
[ refresh_interval: <duration> | default = 60s ]

# The port to scrape metrics from. If using the public IP address, this must
# instead be specified in the relabeling rule.
[ port: <int> | default = 80 ]

# Filters can be used optionally to filter the instance list by other criteria.
# Available filter criteria can be found here:
# https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeInstances.html
# Filter API documentation: https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_Filter.html
filters:
  [ - name: <string>
      values: <string>, [...] ]

# HTTP client settings, including authentication methods (such as basic auth and
# authorization), proxy configurations, TLS options, custom HTTP headers, etc.
[ <http_config> ]
```

----------------------------------------

TITLE: Control Prometheus Timestamp Respect (honor_timestamps)
DESCRIPTION: The `honor_timestamps` parameter determines whether Prometheus uses the timestamps present in scraped metric data. If set to 'true', the target's provided timestamps are used. If 'false', these timestamps are ignored.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/configuration/configuration.md#_snippet_17

LANGUAGE: APIDOC
CODE:
```
[ honor_timestamps: <boolean> | default = true ]
```

----------------------------------------

TITLE: promtool check ready Command
DESCRIPTION: Checks if the Prometheus server is ready. It can connect to a specified URL and use an HTTP client configuration file.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/command-line/promtool.md#_snippet_8

LANGUAGE: APIDOC
CODE:
```
promtool check ready:
  Description: Check if the Prometheus server is ready.
  Flags:
    --http.config.file: HTTP client configuration file for promtool to connect to Prometheus.
    --url: The URL for the Prometheus server. (Default: http://localhost:9090)
```

----------------------------------------

TITLE: Promtool Query Range Command
DESCRIPTION: The `promtool query range` command performs a range PromQL query over a specified time interval against a Prometheus server.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/command-line/promtool.md#_snippet_13

LANGUAGE: APIDOC
CODE:
```
Command: promtool query range
  Description: Run range query.
  Flags:
    --header <string>: Extra headers to send to server.
    --start <string>: Query range start time (RFC3339 or Unix timestamp).
    --end <string>: Query range end time (RFC3339 or Unix timestamp).
    --step <string>: Query step size (duration).
  Arguments:
    server <string> (Required): Prometheus server to query.
    expr <string> (Required): PromQL query expression.
```

----------------------------------------

TITLE: Prometheus Go Manual Histogram Metrics Exposition
DESCRIPTION: This snippet displays the Prometheus exposition format for a `golang_manual_histogram_seconds` metric. It illustrates how a histogram's buckets, sum, and count are exposed, including labels for different service instances (ports 5001, 5002, 5003). The `HELP` and `TYPE` lines provide metadata about the metric.
SOURCE: https://github.com/prometheus/prometheus/blob/main/model/textparse/testdata/1histogram.om.txt#_snippet_0

LANGUAGE: Prometheus Metrics
CODE:
```
# HELP golang_manual_histogram_seconds This is a histogram with manually selected parameters
# TYPE golang_manual_histogram_seconds histogram
golang_manual_histogram_seconds_bucket{address="0.0.0.0",generation="20",port="5001",le="0.005"} 0
golang_manual_histogram_seconds_bucket{address="0.0.0.0",generation="20",port="5001",le="0.01"} 0
golang_manual_histogram_seconds_bucket{address="0.0.0.0",generation="20",port="5001",le="0.025"} 0
golang_manual_histogram_seconds_bucket{address="0.0.0.0",generation="20",port="5001",le="0.05"} 0
golang_manual_histogram_seconds_bucket{address="0.0.0.0",generation="20",port="5001",le="0.1"} 0
golang_manual_histogram_seconds_bucket{address="0.0.0.0",generation="20",port="5001",le="0.25"} 0
golang_manual_histogram_seconds_bucket{address="0.0.0.0",generation="20",port="5001",le="0.5"} 0
golang_manual_histogram_seconds_bucket{address="0.0.0.0",generation="20",port="5001",le="1.0"} 0
golang_manual_histogram_seconds_bucket{address="0.0.0.0",generation="20",port="5001",le="2.5"} 0
golang_manual_histogram_seconds_bucket{address="0.0.0.0",generation="20",port="5001",le="5.0"} 0
golang_manual_histogram_seconds_bucket{address="0.0.0.0",generation="20",port="5001",le="10.0"} 1
golang_manual_histogram_seconds_bucket{address="0.0.0.0",generation="20",port="5001",le="+Inf"} 1
golang_manual_histogram_seconds_sum{address="0.0.0.0",generation="20",port="5001"} 10.0
golang_manual_histogram_seconds_count{address="0.0.0.0",generation="20",port="5001"} 1
golang_manual_histogram_seconds_bucket{address="0.0.0.0",generation="20",port="5002",le="0.005"} 0
golang_manual_histogram_seconds_bucket{address="0.0.0.0",generation="20",port="5002",le="0.01"} 0
golang_manual_histogram_seconds_bucket{address="0.0.0.0",generation="20",port="5002",le="0.025"} 0
golang_manual_histogram_seconds_bucket{address="0.0.0.0",generation="20",port="5002",le="0.05"} 0
golang_manual_histogram_seconds_bucket{address="0.0.0.0",generation="20",port="5002",le="0.1"} 0
golang_manual_histogram_seconds_bucket{address="0.0.0.0",generation="20",port="5002",le="0.25"} 0
golang_manual_histogram_seconds_bucket{address="0.0.0.0",generation="20",port="5002",le="0.5"} 0
golang_manual_histogram_seconds_bucket{address="0.0.0.0",generation="20",port="5002",le="1.0"} 0
golang_manual_histogram_seconds_bucket{address="0.0.0.0",generation="20",port="5002",le="2.5"} 0
golang_manual_histogram_seconds_bucket{address="0.0.0.0",generation="20",port="5002",le="5.0"} 0
golang_manual_histogram_seconds_bucket{address="0.0.0.0",generation="20",port="5002",le="10.0"} 1
golang_manual_histogram_seconds_bucket{address="0.0.0.0",generation="20",port="5002",le="+Inf"} 1
golang_manual_histogram_seconds_sum{address="0.0.0.0",generation="20",port="5002"} 10.0
golang_manual_histogram_seconds_count{address="0.0.0.0",generation="20",port="5002"} 1
golang_manual_histogram_seconds_bucket{address="0.0.0.0",generation="20",port="5003",le="0.005"} 0
golang_manual_histogram_seconds_bucket{address="0.0.0.0",generation="20",port="5003",le="0.01"} 0
golang_manual_histogram_seconds_bucket{address="0.0.0.0",generation="20",port="5003",le="0.025"} 0
golang_manual_histogram_seconds_bucket{address="0.0.0.0",generation="20",port="5003",le="0.05"} 0
golang_manual_histogram_seconds_bucket{address="0.0.0.0",generation="20",port="5003",le="0.1"} 0
golang_manual_histogram_seconds_bucket{address="0.0.0.0",generation="20",port="5003",le="0.25"} 0
golang_manual_histogram_seconds_bucket{address="0.0.0.0",generation="20",port="5003",le="0.5"} 0
golang_manual_histogram_seconds_bucket{address="0.0.0.0",generation="20",port="5003",le="1.0"} 0
golang_manual_histogram_seconds_bucket{address="0.0.0.0",generation="20",port="5003",le="2.5"} 0
golang_manual_histogram_seconds_bucket{address="0.0.0.0",generation="20",port="5003",le="5.0"} 0
golang_manual_histogram_seconds_bucket{address="0.0.0.0",generation="20",port="5003",le="10.0"} 1
golang_manual_histogram_seconds_bucket{address="0.0.0.0",generation="20",port="5003",le="+Inf"} 1
golang_manual_histogram_seconds_sum{address="0.0.0.0",generation="20",port="5003"} 10.0
golang_manual_histogram_seconds_count{address="0.0.0.0",generation="20",port="5003"} 1
# EOF
```

----------------------------------------

TITLE: Prometheus OAuth 2.0 Client Credentials Configuration
DESCRIPTION: Configures OAuth 2.0 authentication for Prometheus, supporting client credentials or password grant types. Prometheus obtains an access token from a specified endpoint using provided client ID and secret.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/configuration/configuration.md#_snippet_69

LANGUAGE: APIDOC
CODE:
```
OAuth 2.0 Configuration (`<oauth2>`):
  Description: OAuth 2.0 authentication using the client credentials or password grant type.
  Prometheus fetches an access token from the specified endpoint with the given client access and secret keys.
  
  Parameters:
    client_id: <string> (Required)
    client_secret: <secret> (Optional)
    client_secret_file: <filename> (Optional, mutually exclusive with `client_secret`)
      Description: Read the client secret from a file.
    scopes:
      - <string> ... (Optional)
      Description: Scopes for the token request.
    token_url: <string> (Required)
      Description: The URL to fetch the token from.
    endpoint_params:
      <string>: <string> ... (Optional)
      Description: Optional parameters to append to the token URL. E.g., for 'password' grant type.
    tls_config:
      <tls_config> (Optional)
      Description: Configures the token request's TLS settings.
    proxy_url: <string> (Optional)
      Description: Optional proxy URL.
    no_proxy: <string> (Optional)
      Description: Comma-separated string of IPs, CIDR, domain names to exclude from proxying.
    proxy_from_environment: <boolean> | default: false (Optional)
      Description: Use proxy URL indicated by environment variables (HTTP_PROXY, https_proxy, HTTPs_PROXY, https_proxy, and no_proxy).
    proxy_connect_header:
      <string>: [<secret>, ...] (Optional)
      Description: Specifies headers to send to proxies during CONNECT requests.
    http_headers:
      <string>:
        values: [<string>, ...] (Optional)
        secrets: [<secret>, ...] (Optional)
        files: [<string>, ...] (Optional)
      Description: Custom HTTP headers to be sent along with each request. Headers set by Prometheus cannot be overwritten.
```

LANGUAGE: yaml
CODE:
```
client_id: <string>
[ client_secret: <secret> ]

# Read the client secret from a file.
# It is mutually exclusive with `client_secret`.
[ client_secret_file: <filename> ]

# Scopes for the token request.
scopes:
  [ - <string> ... ]

# The URL to fetch the token from.
token_url: <string>

# Optional parameters to append to the token URL.
# To set 'password' grant type, add it to params:
# endpoint_params:
#   grant_type: 'password'
#   username: 'username@example.com'
#   password: 'strongpassword'
endpoint_params:
  [ <string>: <string> ... ]

# Configures the token request's TLS settings.
tls_config:
  [ <tls_config> ]

# Optional proxy URL.
[ proxy_url: <string> ]
# Comma-separated string that can contain IPs, CIDR notation, domain names
# that should be excluded from proxying. IP and domain names can
# contain port numbers.
[ no_proxy: <string> ]
# Use proxy URL indicated by environment variables (HTTP_PROXY, https_proxy, HTTPs_PROXY, https_proxy, and no_proxy)
[ proxy_from_environment: <boolean> | default: false ]
# Specifies headers to send to proxies during CONNECT requests.
[ proxy_connect_header:
  [ <string>: [<secret>, ...] ] ]

# Custom HTTP headers to be sent along with each request.
# Headers that are set by Prometheus itself can't be overwritten.
http_headers:
  # Header name.
  [ <string>:
    # Header values.
    [ values: [<string>, ...] ]
    # Headers values. Hidden in configuration page.
    [ secrets: [<secret>, ...] ]
    # Files to read header values from.
    [ files: [<string>, ...] ] ]
```

----------------------------------------

TITLE: Configure Prometheus Label Conflict Resolution (honor_labels)
DESCRIPTION: The `honor_labels` parameter controls how Prometheus resolves conflicts between labels from scraped data and server-side labels (like 'job' and 'instance'). Setting it to 'true' preserves scraped labels, useful for federation or Pushgateway. If 'false', conflicting scraped labels are renamed to 'exported_<original-label>'.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/configuration/configuration.md#_snippet_16

LANGUAGE: APIDOC
CODE:
```
[ honor_labels: <boolean> | default = false ]
```

----------------------------------------

TITLE: Prometheus Docker Swarm Service Discovery: Tasks Role
DESCRIPTION: The `tasks` role in Prometheus's Docker Swarm service discovery is designed to discover individual Swarm tasks and expose their published ports as scrape targets. Similar to services, if a task has no published ports, a target is created using the `port` parameter from the service discovery configuration. This section details the extensive list of meta labels available for tasks, including container, service, network, and node-related information. A specific limitation regarding network meta labels for host-mode published ports is also noted.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/configuration/configuration.md#_snippet_77

LANGUAGE: APIDOC
CODE:
```
Role: tasks
Description: Discovers Docker Swarm tasks and exposes their ports as targets.
  - Generates a target for each published port.
  - If no published ports, uses 'port' parameter from SD configuration.
Meta Labels:
  - __meta_dockerswarm_container_label_<labelname>: Each label of the container, with unsupported characters converted to an underscore.
  - __meta_dockerswarm_task_id: The ID of the task.
  - __meta_dockerswarm_task_container_id: The container ID of the task.
  - __meta_dockerswarm_task_desired_state: The desired state of the task.
  - __meta_dockerswarm_task_slot: The slot of the task.
  - __meta_dockerswarm_task_state: The state of the task.
  - __meta_dockerswarm_task_port_publish_mode: The publish mode of the task port.
  - __meta_dockerswarm_service_id: The ID of the service.
  - __meta_dockerswarm_service_name: The name of the service.
  - __meta_dockerswarm_service_mode: The mode of the service.
  - __meta_dockerswarm_service_label_<labelname>: Each label of the service, with unsupported characters converted to an underscore.
  - __meta_dockerswarm_network_id: The ID of the network.
  - __meta_dockerswarm_network_name: The name of the network.
  - __meta_dockerswarm_network_ingress: Whether the network is ingress.
  - __meta_dockerswarm_network_internal: Whether the network is internal.
  - __meta_dockerswarm_network_label_<labelname>: Each label of the network, with unsupported characters converted to an underscore.
  - __meta_dockerswarm_network_label: Each label of the network, with unsupported characters converted to an underscore.
  - __meta_dockerswarm_network_scope: The scope of the network.
  - __meta_dockerswarm_node_id: The ID of the node.
  - __meta_dockerswarm_node_hostname: The hostname of the node.
  - __meta_dockerswarm_node_address: The address of the node.
  - __meta_dockerswarm_node_availability: The availability of the node.
  - __meta_dockerswarm_node_label_<labelname>: Each label of the node, with unsupported characters converted to an underscore.
  - __meta_dockerswarm_node_platform_architecture: The architecture of the node.
  - __meta_dockerswarm_node_platform_os: The operating system of the node.
  - __meta_dockerswarm_node_role: The role of the node.
  - __meta_dockerswarm_node_status: The status of the node.
Note: __meta_dockerswarm_network_* meta labels are not populated for ports published with 'mode=host'.
```

----------------------------------------

TITLE: Prometheus API: Query Metadata for Specific Metric
DESCRIPTION: Example demonstrating how to filter metric metadata for a specific metric name, `http_requests_total`, using the `metric` query parameter. This returns all available metadata entries for the specified metric.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/querying/api.md#_snippet_34

LANGUAGE: bash
CODE:
```
curl -G http://localhost:9090/api/v1/metadata?metric=http_requests_total
```

LANGUAGE: json
CODE:
```
{
  "status": "success",
  "data": {
    "http_requests_total": [
      {
        "type": "counter",
        "help": "Number of HTTP requests",
        "unit": ""
      },
      {
        "type": "counter",
        "help": "Amount of HTTP requests",
        "unit": ""
      }
    ]
  }
}
```

----------------------------------------

TITLE: Prometheus Logging Configuration Flags
DESCRIPTION: These flags control the logging behavior of the Prometheus server. Users can specify the minimum severity level for log messages and choose between different output formats.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/command-line/prometheus.md#_snippet_24

LANGUAGE: APIDOC
CODE:
```
Flag: --log.level
  Description: Only log messages with the given severity or above. One of: [debug, info, warn, error]
  Default: info

Flag: --log.format
  Description: Output format of log messages. One of: [logfmt, json]
  Default: logfmt
```

----------------------------------------

TITLE: Set Alertmanager Notification Queue Capacity
DESCRIPTION: Defines the capacity of the queue for pending Alertmanager notifications. This flag is for use with server mode only.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/command-line/prometheus.md#_snippet_15

LANGUAGE: APIDOC
CODE:
```
--alertmanager.notification-queue-capacity <int>
Default: 10000
Usage: server mode only
```

----------------------------------------

TITLE: Join Label Values with label_join() in PromQL
DESCRIPTION: `label_join()` concatenates the values of specified source labels using a given separator and assigns the result to a new destination label. This function is useful for creating composite labels from existing ones, supporting any number of source labels.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/querying/functions.md#_snippet_37

LANGUAGE: PromQL
CODE:
```
label_join(up{job="api-server",src1="a",src2="b",src3="c"}, "foo", ",", "src1", "src2", "src3")
```

----------------------------------------

TITLE: Build and run custom Prometheus Docker image
DESCRIPTION: These commands build a Docker image named my-prometheus from the current directory (which should contain the Dockerfile and prometheus.yml defined previously). After building, a container is run from this custom image, exposing Prometheus on port 9090.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/installation.md#_snippet_5

LANGUAGE: bash
CODE:
```
docker build -t my-prometheus .
docker run -p 9090:9090 my-prometheus
```

----------------------------------------

TITLE: Prometheus Configuration: Convert Classic Histograms to Native
DESCRIPTION: Specifies whether to convert all scraped classic histograms into native histograms with custom buckets.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/configuration/configuration.md#_snippet_6

LANGUAGE: APIDOC
CODE:
```
convert_classic_histograms_to_nhcb: <bool> | default = false
```

----------------------------------------

TITLE: View Prometheus Command-Line Flags
DESCRIPTION: This command displays all available command-line flags for the Prometheus server. These flags are used to configure immutable system parameters such as storage locations, the amount of data to keep on disk, and in memory.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/configuration/configuration.md#_snippet_0

LANGUAGE: Shell
CODE:
```
./prometheus -h
```

----------------------------------------

TITLE: Set Remote Read Sample Limit
DESCRIPTION: Defines the maximum overall number of samples to return via the remote read interface in a single query. A value of 0 means no limit. This limit is ignored for streamed response types. Use with server mode only.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/command-line/prometheus.md#_snippet_8

LANGUAGE: APIDOC
CODE:
```
--storage.remote.read-sample-limit <int>
Default: 5e7
Usage: server mode only
```

----------------------------------------

TITLE: Prometheus TSDB Runtime Configuration
DESCRIPTION: Configures runtime-reloadable settings for the Time Series Database (TSDB). Specifically, it sets the `out_of_order_time_window` which determines how old an out-of-order or out-of-bounds sample can be relative to the TSDB's maximum time for ingestion.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/configuration/configuration.md#_snippet_134

LANGUAGE: APIDOC
CODE:
```
out_of_order_time_window: <duration> | default = 0s
```

----------------------------------------

TITLE: Retrieve Active Alerts via Prometheus API
DESCRIPTION: This section documents the `/api/v1/alerts` endpoint, which provides a list of all currently active alerts. It includes a `curl` command example to demonstrate how to query the endpoint and a sample JSON response illustrating the expected data structure for active alerts.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/querying/api.md#_snippet_29

LANGUAGE: APIDOC
CODE:
```
GET /api/v1/alerts
```

LANGUAGE: bash
CODE:
```
curl http://localhost:9090/api/v1/alerts
```

LANGUAGE: json
CODE:
```
{
    "data": {
        "alerts": [
            {
                "activeAt": "2018-07-04T20:27:12.60602144+02:00",
                "annotations": {},
                "labels": {
                    "alertname": "my-alert"
                },
                "state": "firing",
                "value": "1e+00"
            }
        ]
    },
    "status": "success"
}
```

----------------------------------------

TITLE: Advanced Iteration with Nested Queries and HTML in Prometheus Templates
DESCRIPTION: This advanced example demonstrates iterating over network devices and displaying their receive/transmit rates within an HTML table. It showcases nested queries and highlights how the `.` variable's scope changes inside a `range` loop when no explicit variable is specified.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/configuration/template_examples.md#_snippet_4

LANGUAGE: html
CODE:
```
<table>
{{ range printf "node_network_receive_bytes{job='node',instance='%s',device!='lo'}" .Params.instance | query | sortByLabel "device"}}
  <tr><th colspan=2>{{ .Labels.device }}</th></tr>
  <tr>
    <td>Received</td>
    <td>{{ with printf "rate(node_network_receive_bytes{job='node',instance='%s',device='%s'}[5m])" .Labels.instance .Labels.device | query }}{{ . | first | value | humanize }}B/s{{end}}</td>
  </tr>
  <tr>
    <td>Transmitted</td>
    <td>{{ with printf "rate(node_network_transmit_bytes{job='node',instance='%s',device='%s'}[5m])" .Labels.instance .Labels.device | query }}{{ . | first | value | humanize }}B/s{{end}}</td>
  </tr>{{ end }}
</table>
```

----------------------------------------

TITLE: Promtool: Run TSDB Write Performance Benchmark
DESCRIPTION: The `promtool tsdb bench write` subcommand runs a write performance benchmark for the Prometheus TSDB. It allows specifying output path, number of metrics, and scrapes to simulate.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/command-line/promtool.md#_snippet_27

LANGUAGE: APIDOC
CODE:
```
promtool tsdb bench write
  Flags:
    --out <path>: Set the output path. (Default: benchout)
    --metrics <number>: Number of metrics to read. (Default: 10000)
    --scrapes <number>: Number of scrapes to simulate. (Default: 3000)
  Arguments:
    file <file>: Input file with samples data. (Default: ../../tsdb/testdata/20kseries.json)
```

----------------------------------------

TITLE: Prometheus HTTP Request Metrics Exposition
DESCRIPTION: Displays various Prometheus metrics, including `prometheus_http_request_duration_seconds_bucket` (histogram buckets), `prometheus_http_request_duration_seconds_sum` (total duration), and `prometheus_http_request_duration_seconds_count` (total requests) for different HTTP handlers. It also includes `prometheus_http_requests_total` for specific HTTP status codes and handlers. These metrics provide insights into the performance and usage of the Prometheus HTTP server.
SOURCE: https://github.com/prometheus/prometheus/blob/main/model/textparse/testdata/alltypes.237mfs.nometa.prom.txt#_snippet_39

LANGUAGE: Prometheus Metrics
CODE:
```
prometheus_http_request_duration_seconds_bucket{handler="/rules",le="20"} 8673
prometheus_http_request_duration_seconds_bucket{handler="/rules",le="60"} 8673
prometheus_http_request_duration_seconds_bucket{handler="/rules",le="120"} 8673
prometheus_http_request_duration_seconds_bucket{handler="/rules",le="+Inf"} 8673
prometheus_http_request_duration_seconds_sum{handler="/rules"} 2.776021043000005
prometheus_http_request_duration_seconds_count{handler="/rules"} 8673
prometheus_http_request_duration_seconds_bucket{handler="/service-discovery",le="0.1"} 20
prometheus_http_request_duration_seconds_bucket{handler="/service-discovery",le="0.2"} 20
prometheus_http_request_duration_seconds_bucket{handler="/service-discovery",le="0.4"} 20
prometheus_http_request_duration_seconds_bucket{handler="/service-discovery",le="1"} 20
prometheus_http_request_duration_seconds_bucket{handler="/service-discovery",le="3"} 20
prometheus_http_request_duration_seconds_bucket{handler="/service-discovery",le="8"} 20
prometheus_http_request_duration_seconds_bucket{handler="/service-discovery",le="20"} 20
prometheus_http_request_duration_seconds_bucket{handler="/service-discovery",le="60"} 20
prometheus_http_request_duration_seconds_bucket{handler="/service-discovery",le="120"} 20
prometheus_http_request_duration_seconds_bucket{handler="/service-discovery",le="+Inf"} 20
prometheus_http_request_duration_seconds_sum{handler="/service-discovery"} 0.004057062
prometheus_http_request_duration_seconds_count{handler="/service-discovery"} 20
prometheus_http_request_duration_seconds_bucket{handler="/status",le="0.1"} 46
prometheus_http_request_duration_seconds_bucket{handler="/status",le="0.2"} 46
prometheus_http_request_duration_seconds_bucket{handler="/status",le="0.4"} 46
prometheus_http_request_duration_seconds_bucket{handler="/status",le="1"} 46
prometheus_http_request_duration_seconds_bucket{handler="/status",le="3"} 46
prometheus_http_request_duration_seconds_bucket{handler="/status",le="8"} 46
prometheus_http_request_duration_seconds_bucket{handler="/status",le="20"} 46
prometheus_http_request_duration_seconds_bucket{handler="/status",le="60"} 46
prometheus_http_request_duration_seconds_bucket{handler="/status",le="120"} 46
prometheus_http_request_duration_seconds_bucket{handler="/status",le="+Inf"} 46
prometheus_http_request_duration_seconds_sum{handler="/status"} 0.010107473
prometheus_http_request_duration_seconds_count{handler="/status"} 46
prometheus_http_request_duration_seconds_bucket{handler="/targets",le="0.1"} 39
prometheus_http_request_duration_seconds_bucket{handler="/targets",le="0.2"} 39
prometheus_http_request_duration_seconds_bucket{handler="/targets",le="0.4"} 39
prometheus_http_request_duration_seconds_bucket{handler="/targets",le="1"} 39
prometheus_http_request_duration_seconds_bucket{handler="/targets",le="3"} 39
prometheus_http_request_duration_seconds_bucket{handler="/targets",le="8"} 39
prometheus_http_request_duration_seconds_bucket{handler="/targets",le="20"} 39
prometheus_http_request_duration_seconds_bucket{handler="/targets",le="60"} 39
prometheus_http_request_duration_seconds_bucket{handler="/targets",le="120"} 39
prometheus_http_request_duration_seconds_bucket{handler="/targets",le="+Inf"} 39
prometheus_http_request_duration_seconds_sum{handler="/targets"} 0.009001180000000001
prometheus_http_request_duration_seconds_count{handler="/targets"} 39
prometheus_http_request_duration_seconds_bucket{handler="/tsdb-status",le="0.1"} 49
prometheus_http_request_duration_seconds_bucket{handler="/tsdb-status",le="0.2"} 49
prometheus_http_request_duration_seconds_bucket{handler="/tsdb-status",le="0.4"} 49
prometheus_http_request_duration_seconds_bucket{handler="/tsdb-status",le="1"} 49
prometheus_http_request_duration_seconds_bucket{handler="/tsdb-status",le="3"} 49
prometheus_http_request_duration_seconds_bucket{handler="/tsdb-status",le="8"} 49
prometheus_http_request_duration_seconds_bucket{handler="/tsdb-status",le="20"} 49
prometheus_http_request_duration_seconds_bucket{handler="/tsdb-status",le="60"} 49
prometheus_http_request_duration_seconds_bucket{handler="/tsdb-status",le="120"} 49
prometheus_http_request_duration_seconds_bucket{handler="/tsdb-status",le="+Inf"} 49
prometheus_http_request_duration_seconds_sum{handler="/tsdb-status"} 0.018204165
prometheus_http_request_duration_seconds_count{handler="/tsdb-status"} 49
prometheus_http_requests_total{code="200",handler="/"} 0
prometheus_http_requests_total{code="200",handler="/-/healthy"} 29524
prometheus_http_requests_total{code="200",handler="/-/quit"} 0
prometheus_http_requests_total{code="200",handler="/-/ready"} 49
prometheus_http_requests_total{code="200",handler="/-/reload"} 0
prometheus_http_requests_total{code="200",handler="/alertmanager-discovery"} 0
prometheus_http_requests_total{code="200",handler="/alerts"} 48
prometheus_http_requests_total{code="200",handler="/api/v1/*path"} 0
```

----------------------------------------

TITLE: promtool check healthy Command
DESCRIPTION: Checks if the Prometheus server is healthy. It can connect to a specified URL and use an HTTP client configuration file.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/command-line/promtool.md#_snippet_7

LANGUAGE: APIDOC
CODE:
```
promtool check healthy:
  Description: Check if the Prometheus server is healthy.
  Flags:
    --http.config.file: HTTP client configuration file for promtool to connect to Prometheus.
    --url: The URL for the Prometheus server. (Default: http://localhost:9090)
```

----------------------------------------

TITLE: Prometheus HTTP Request Duration Metrics for /metrics Handler
DESCRIPTION: Illustrates Prometheus histogram buckets, sum, and count for HTTP request durations for the `/metrics` endpoint. This is crucial for monitoring the performance of Prometheus's own metrics exposition.
SOURCE: https://github.com/prometheus/prometheus/blob/main/model/textparse/testdata/alltypes.237mfs.nometa.prom.txt#_snippet_36

LANGUAGE: Prometheus Metrics
CODE:
```
prometheus_http_request_duration_seconds_bucket{handler="/metrics",le="0.1"} 3.988654e+06
prometheus_http_request_duration_seconds_bucket{handler="/metrics",le="0.2"} 4.052461e+06
prometheus_http_request_duration_seconds_bucket{handler="/metrics",le="0.4"} 4.057771e+06
prometheus_http_request_duration_seconds_bucket{handler="/metrics",le="1"} 4.058809e+06
prometheus_http_request_duration_seconds_bucket{handler="/metrics",le="3"} 4.059071e+06
prometheus_http_request_duration_seconds_bucket{handler="/metrics",le="8"} 4.059092e+06
prometheus_http_request_duration_seconds_bucket{handler="/metrics",le="20"} 4.059092e+06
prometheus_http_request_duration_seconds_bucket{handler="/metrics",le="60"} 4.059092e+06
prometheus_http_request_duration_seconds_bucket{handler="/metrics",le="120"} 4.059092e+06
prometheus_http_request_duration_seconds_bucket{handler="/metrics",le="+Inf"} 4.059092e+06
prometheus_http_request_duration_seconds_sum{handler="/metrics"} 107584.12561354278
prometheus_http_request_duration_seconds_count{handler="/metrics"} 4.059092e+06
```

----------------------------------------

TITLE: Prometheus Docker Swarm Service Discovery: Services Role
DESCRIPTION: The `services` role in Prometheus's Docker Swarm service discovery is responsible for discovering Swarm services and exposing their published ports as scrape targets. For services without published ports, a target is created using the `port` parameter defined in the service discovery configuration. This section lists the meta labels available for this role, which can be used for relabeling or filtering targets.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/configuration/configuration.md#_snippet_76

LANGUAGE: APIDOC
CODE:
```
Role: services
Description: Discovers Docker Swarm services and exposes their ports as targets.
  - Generates a target for each published port.
  - If no published ports, uses 'port' parameter from SD configuration.
Meta Labels:
  - __meta_dockerswarm_service_id: The ID of the service.
  - __meta_dockerswarm_service_name: The name of the service.
  - __meta_dockerswarm_service_mode: The mode of the service.
  - __meta_dockerswarm_service_endpoint_port_name: The name of the endpoint port, if available.
  - __meta_dockerswarm_service_endpoint_port_publish_mode: The publish mode of the endpoint port.
  - __meta_dockerswarm_service_label_<labelname>: Each label of the service, with unsupported characters converted to an underscore.
  - __meta_dockerswarm_service_task_container_hostname: The container hostname of the target, if available.
  - __meta_dockerswarm_service_task_container_image: The container image of the target.
  - __meta_dockerswarm_service_updating_status: The status of the service, if available.
  - __meta_dockerswarm_network_id: The ID of the network.
  - __meta_dockerswarm_network_name: The name of the network.
  - __meta_dockerswarm_network_ingress: Whether the network is ingress.
  - __meta_dockerswarm_network_internal: Whether the network is internal.
  - __meta_dockerswarm_network_label_<labelname>: Each label of the network, with unsupported characters converted to an underscore.
  - __meta_dockerswarm_network_scope: The scope of the network.
```

----------------------------------------

TITLE: Prometheus HTTP Request Duration Metrics Output
DESCRIPTION: Displays a sample of Prometheus `prometheus_http_request_duration_seconds` metrics, including histogram buckets, total sum, and count, for various internal HTTP handlers within a Prometheus instance. This data is typically exposed via the `/metrics` endpoint and is used for monitoring and performance analysis.
SOURCE: https://github.com/prometheus/prometheus/blob/main/model/textparse/testdata/alltypes.237mfs.nometa.prom.txt#_snippet_32

LANGUAGE: Prometheus Exposition Format
CODE:
```
prometheus_http_request_duration_seconds_bucket{handler="/config",le="8"} 13
prometheus_http_request_duration_seconds_bucket{handler="/config",le="20"} 13
prometheus_http_request_duration_seconds_bucket{handler="/config",le="60"} 13
prometheus_http_request_duration_seconds_bucket{handler="/config",le="120"} 13
prometheus_http_request_duration_seconds_bucket{handler="/config",le="+Inf"} 13
prometheus_http_request_duration_seconds_sum{handler="/config"} 0.0024490289999999997
prometheus_http_request_duration_seconds_count{handler="/config"} 13
prometheus_http_request_duration_seconds_bucket{handler="/consoles/*filepath",le="0.1"} 33
prometheus_http_request_duration_seconds_bucket{handler="/consoles/*filepath",le="0.2"} 34
prometheus_http_request_duration_seconds_bucket{handler="/consoles/*filepath",le="0.4"} 34
prometheus_http_request_duration_seconds_bucket{handler="/consoles/*filepath",le="1"} 34
prometheus_http_request_duration_seconds_bucket{handler="/consoles/*filepath",le="3"} 34
prometheus_http_request_duration_seconds_bucket{handler="/consoles/*filepath",le="8"} 34
prometheus_http_request_duration_seconds_bucket{handler="/consoles/*filepath",le="20"} 34
prometheus_http_request_duration_seconds_bucket{handler="/consoles/*filepath",le="60"} 34
prometheus_http_request_duration_seconds_bucket{handler="/consoles/*filepath",le="120"} 34
prometheus_http_request_duration_seconds_bucket{handler="/consoles/*filepath",le="+Inf"} 34
prometheus_http_request_duration_seconds_sum{handler="/consoles/*filepath"} 0.5689515199999999
prometheus_http_request_duration_seconds_count{handler="/consoles/*filepath"} 34
prometheus_http_request_duration_seconds_bucket{handler="/debug/*subpath",le="0.1"} 4
prometheus_http_request_duration_seconds_bucket{handler="/debug/*subpath",le="0.2"} 4
prometheus_http_request_duration_seconds_bucket{handler="/debug/*subpath",le="0.4"} 4
prometheus_http_request_duration_seconds_bucket{handler="/debug/*subpath",le="1"} 4
prometheus_http_request_duration_seconds_bucket{handler="/debug/*subpath",le="3"} 4
prometheus_http_request_duration_seconds_bucket{handler="/debug/*subpath",le="8"} 4
prometheus_http_request_duration_seconds_bucket{handler="/debug/*subpath",le="20"} 4
prometheus_http_request_duration_seconds_bucket{handler="/debug/*subpath",le="60"} 4
prometheus_http_request_duration_seconds_bucket{handler="/debug/*subpath",le="120"} 4
prometheus_http_request_duration_seconds_bucket{handler="/debug/*subpath",le="+Inf"} 4
prometheus_http_request_duration_seconds_sum{handler="/debug/*subpath"} 0.086499352
prometheus_http_request_duration_seconds_count{handler="/debug/*subpath"} 4
prometheus_http_request_duration_seconds_bucket{handler="/favicon.ico",le="0.1"} 177
prometheus_http_request_duration_seconds_bucket{handler="/favicon.ico",le="0.2"} 177
prometheus_http_request_duration_seconds_bucket{handler="/favicon.ico",le="0.4"} 177
prometheus_http_request_duration_seconds_bucket{handler="/favicon.ico",le="1"} 177
prometheus_http_request_duration_seconds_bucket{handler="/favicon.ico",le="3"} 177
prometheus_http_request_duration_seconds_bucket{handler="/favicon.ico",le="8"} 177
prometheus_http_request_duration_seconds_bucket{handler="/favicon.ico",le="20"} 177
prometheus_http_request_duration_seconds_bucket{handler="/favicon.ico",le="60"} 177
prometheus_http_request_duration_seconds_bucket{handler="/favicon.ico",le="120"} 177
prometheus_http_request_duration_seconds_bucket{handler="/favicon.ico",le="+Inf"} 177
prometheus_http_request_duration_seconds_sum{handler="/favicon.ico"} 0.05591882500000002
prometheus_http_request_duration_seconds_count{handler="/favicon.ico"} 177
prometheus_http_request_duration_seconds_bucket{handler="/favicon.svg",le="0.1"} 770
prometheus_http_request_duration_seconds_bucket{handler="/favicon.svg",le="0.2"} 770
prometheus_http_request_duration_seconds_bucket{handler="/favicon.svg",le="0.4"} 770
prometheus_http_request_duration_seconds_bucket{handler="/favicon.svg",le="1"} 770
prometheus_http_request_duration_seconds_bucket{handler="/favicon.svg",le="3"} 770
prometheus_http_request_duration_seconds_bucket{handler="/favicon.svg",le="8"} 770
prometheus_http_request_duration_seconds_bucket{handler="/favicon.svg",le="20"} 770
prometheus_http_request_duration_seconds_bucket{handler="/favicon.svg",le="60"} 770
prometheus_http_request_duration_seconds_bucket{handler="/favicon.svg",le="120"} 770
prometheus_http_request_duration_seconds_bucket{handler="/favicon.svg",le="+Inf"} 770
prometheus_http_request_duration_seconds_sum{handler="/favicon.svg"} 0.3058455699999999
prometheus_http_request_duration_seconds_count{handler="/favicon.svg"} 770
prometheus_http_request_duration_seconds_bucket{handler="/federate",le="0.1"} 4
prometheus_http_request_duration_seconds_bucket{handler="/federate",le="0.2"} 4
prometheus_http_request_duration_seconds_bucket{handler="/federate",le="0.4"} 4
prometheus_http_request_duration_seconds_bucket{handler="/federate",le="1"} 4
```

----------------------------------------

TITLE: Prometheus API: Get Configuration
DESCRIPTION: Returns the currently loaded Prometheus configuration file in YAML format. Note that YAML comments are not included due to library limitations.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/querying/api.md#_snippet_37

LANGUAGE: APIDOC
CODE:
```
GET /api/v1/status/config
```

----------------------------------------

TITLE: Prometheus Consul SD Configuration Meta Labels
DESCRIPTION: Describes the meta labels available on targets during relabeling when using Consul service discovery in Prometheus. These labels provide detailed information about the Consul service and node, which can be used for advanced target filtering and modification during the relabeling phase.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/configuration/configuration.md#_snippet_71

LANGUAGE: APIDOC
CODE:
```
__meta_consul_address: the address of the target
__meta_consul_dc: the datacenter name for the target
__meta_consul_health: the health status of the service
__meta_consul_partition: the admin partition name where the service is registered
__meta_consul_metadata_<key>: each node metadata key value of the target
__meta_consul_node: the node name defined for the target
__meta_consul_service_address: the service address of the target
__meta_consul_service_id: the service ID of the target
__meta_consul_service_metadata_<key>: each service metadata key value of the target
__meta_consul_service_port: the service port of the target
__meta_consul_service: the name of the service the target belongs to
__meta_consul_tagged_address_<key>: each node tagged address key value of the target
__meta_consul_tags: the list of tags of the target joined by the tag separator
```

----------------------------------------

TITLE: Prometheus Scrape Label Limit
DESCRIPTION: Sets a limit on the number of labels accepted per sample after metric relabeling. If exceeded, the entire scrape will fail. A value of 0 means no limit.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/configuration/configuration.md#_snippet_56

LANGUAGE: APIDOC
CODE:
```
[ label_limit: <int> | default = 0 ]
```

----------------------------------------

TITLE: Set Max Concurrent Queries
DESCRIPTION: Specifies the maximum number of queries that can be executed concurrently. This flag is for use with server mode only.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/command-line/prometheus.md#_snippet_20

LANGUAGE: APIDOC
CODE:
```
--query.max-concurrency <int>
Default: 20
Usage: server mode only
```

----------------------------------------

TITLE: Prometheus Configuration: Label Value Length Limit
DESCRIPTION: Configures the maximum length (in bytes) for individual label values. If any label value in a scrape exceeds this limit after metric-relabeling, the entire scrape will be treated as failed. A value of 0 disables the limit. Note that label values are UTF-8 encoded, and characters can take up to 4 bytes.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/configuration/configuration.md#_snippet_2

LANGUAGE: APIDOC
CODE:
```
label_value_length_limit: <int> | default = 0
```

----------------------------------------

TITLE: Promtool TSDB: Create Blocks From OpenMetrics
DESCRIPTION: This command imports samples from an OpenMetrics input file and generates TSDB blocks. Consult the storage documentation for further details.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/command-line/promtool.md#_snippet_33

LANGUAGE: APIDOC
CODE:
```
Command: promtool tsdb create-blocks-from openmetrics
Description: Import samples from OpenMetrics input and produce TSDB blocks. Please refer to the storage docs for more details.
Flags:
  --label: Label to attach to metrics. Can be specified multiple times. Example --label=label_name=label_value
Arguments:
  input file: OpenMetrics file to read samples from. (Required: Yes)
  output directory: Output directory for generated blocks. (Default: data/)
```

----------------------------------------

TITLE: Prometheus Template Functions Reference
DESCRIPTION: Reference for various utility functions available in Prometheus templates, detailing their arguments, return types, and specific notes on usage and availability.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/configuration/template_reference.md#_snippet_4

LANGUAGE: APIDOC
CODE:
```
args:
  Arguments: []interface{}
  Returns: map[string]interface{}
  Notes: This converts a list of objects to a map with keys arg0, arg1 etc. This is intended to allow multiple arguments to be passed to templates.
```

LANGUAGE: APIDOC
CODE:
```
tmpl:
  Arguments: string, []interface{}
  Returns: nothing
  Notes: Like the built-in `template`, but allows non-literals as the template name. Note that the result is assumed to be safe, and will not be auto-escaped. Only available in consoles.
```

LANGUAGE: APIDOC
CODE:
```
safeHtml:
  Arguments: string
  Returns: string
  Notes: Marks string as HTML not requiring auto-escaping.
```

LANGUAGE: APIDOC
CODE:
```
externalURL:
  Arguments: _none_
  Returns: string
  Notes: The external URL under which Prometheus is externally reachable.
```

LANGUAGE: APIDOC
CODE:
```
pathPrefix:
  Arguments: _none_
  Returns: string
  Notes: The external URL [path](https://pkg.go.dev/net/url#URL) for use in console templates.
```

----------------------------------------

TITLE: Prometheus HTTP Request Total Metrics
DESCRIPTION: This snippet shows examples of `prometheus_http_requests_total` metrics, which count the total number of HTTP requests. The metrics are labeled by `code` (HTTP status code) and `handler` (the API endpoint or path). This helps in monitoring request volume and error rates for specific endpoints.
SOURCE: https://github.com/prometheus/prometheus/blob/main/model/textparse/testdata/alltypes.237mfs.nometa.prom.txt#_snippet_41

LANGUAGE: Prometheus
CODE:
```
prometheus_http_requests_total{code="422",handler="/api/v1/query"} 114
prometheus_http_requests_total{code="422",handler="/api/v1/query_range"} 31
prometheus_http_requests_total{code="499",handler="/api/v1/query"} 7
prometheus_http_requests_total{code="499",handler="/api/v1/query_range"} 20
prometheus_http_requests_total{code="503",handler="/api/v1/query"} 7
prometheus_http_requests_total{code="503",handler="/api/v1/query_range"} 4
prometheus_http_requests_total{code="503",handler="/api/v1/status/config"} 1
```

----------------------------------------

TITLE: Prometheus TSDB Checkpoint Metrics
DESCRIPTION: Counters for the total number of TSDB checkpoint creations and deletions, including those that failed. Checkpoints are crucial for data integrity and recovery in the TSDB, and these metrics help monitor their success rate.
SOURCE: https://github.com/prometheus/prometheus/blob/main/model/textparse/testdata/alltypes.237mfs.nometa.prom.txt#_snippet_82

LANGUAGE: APIDOC
CODE:
```
prometheus_tsdb_checkpoint_creations_failed_total 0
prometheus_tsdb_checkpoint_creations_total 62
prometheus_tsdb_checkpoint_deletions_failed_total 0
prometheus_tsdb_checkpoint_deletions_total 62
```

----------------------------------------

TITLE: Simple At end
DESCRIPTION: This snippet shows the parsing of a simple `@ end()` at-modifier in PromQL. It illustrates how the `end()` function within the at-modifier is represented in the AST as a preprocessor.
SOURCE: https://github.com/prometheus/prometheus/blob/main/web/ui/module/lezer-promql/test/expression.txt#_snippet_22

LANGUAGE: PromQL
CODE:
```
foo @ end()
```

LANGUAGE: PromQL AST
CODE:
```
PromQL(
    StepInvariantExpr(
        VectorSelector(
            Identifier
        ),
      At,
      AtModifierPreprocessors(End),
    )
)
```

----------------------------------------

TITLE: Configure Agent WAL Minimum Retention Time
DESCRIPTION: Sets the minimum age samples may be before being considered for deletion when the WAL is truncated. This flag is applicable only in agent mode.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/command-line/prometheus.md#_snippet_4

LANGUAGE: APIDOC
CODE:
```
--storage.agent.retention.min-time <duration>
Usage: agent mode only
```

----------------------------------------

TITLE: Prometheus Linode SD Configuration Meta Labels
DESCRIPTION: This section details the meta labels available for targets discovered from Linode instances using Linode APIv4. These labels provide extensive information about Linode instances, such as instance ID, label, image, various IP addresses, region, type, status, and resource specifications, which are crucial for advanced relabeling rules.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/configuration/configuration.md#_snippet_111

LANGUAGE: APIDOC
CODE:
```
__meta_linode_instance_id: the id of the linode instance
__meta_linode_instance_label: the label of the linode instance
__meta_linode_image: the slug of the linode instance's image
__meta_linode_private_ipv4: the private IPv4 of the linode instance
__meta_linode_public_ipv4: the public IPv4 of the linode instance
__meta_linode_public_ipv6: the public IPv6 of the linode instance
__meta_linode_private_ipv4_rdns: the reverse DNS for the first private IPv4 of the linode instance
__meta_linode_public_ipv4_rdns: the reverse DNS for the first public IPv4 of the linode instance
__meta_linode_public_ipv6_rdns: the reverse DNS for the first public IPv6 of the linode instance
__meta_linode_region: the region of the linode instance
__meta_linode_type: the type of the linode instance
__meta_linode_status: the status of the linode instance
__meta_linode_tags: a list of tags of the linode instance joined by the tag separator
__meta_linode_group: the display group a linode instance is a member of
__meta_linode_gpus: the number of GPU's of the linode instance
__meta_linode_hypervisor: the virtualization software powering the linode instance
__meta_linode_backups: the backup service status of the linode instance
__meta_linode_specs_disk_bytes: the amount of storage space the linode instance has access to
__meta_linode_specs_memory_bytes: the amount of RAM the linode instance has access to
__meta_linode_specs_vcpus: the number of VCPUS this linode has access to
__meta_linode_specs_transfer_bytes: the amount of network transfer the linode instance is allotted each month
__meta_linode_extra_ips: a list of all extra IPv4 addresses assigned to the linode instance joined by the tag separator
__meta_linode_ipv6_ranges: a list of IPv6 ranges with mask assigned to the linode instance joined by the tag separator
```

----------------------------------------

TITLE: Graph Prometheus Chunks Creation Rate (PromQL)
DESCRIPTION: This PromQL expression calculates and graphs the per-second rate of new chunks being created in the Prometheus time series database over a 1-minute window, useful for monitoring storage activity.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/getting_started.md#_snippet_6

LANGUAGE: PromQL
CODE:
```
rate(prometheus_tsdb_head_chunks_created_total[1m])
```

----------------------------------------

TITLE: Enable Memory Snapshot on Prometheus Shutdown
DESCRIPTION: Allows Prometheus to take a snapshot of in-memory chunks and series information during shutdown, storing it on disk. This reduces startup time by enabling restoration of the memory state from the snapshot, minimizing the need for a full WAL replay.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/feature_flags.md#_snippet_1

LANGUAGE: Prometheus CLI
CODE:
```
--enable-feature=memory-snapshot-on-shutdown
```

----------------------------------------

TITLE: Prometheus Lightsail SD Configuration Options
DESCRIPTION: This YAML configuration block defines the parameters for Prometheus to connect and discover targets from AWS Lightsail. It includes options for specifying AWS region, custom API endpoint, access keys, IAM role ARN, refresh interval, and the default port for scraping metrics, along with general HTTP client settings.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/configuration/configuration.md#_snippet_110

LANGUAGE: yaml
CODE:
```
# The information to access the Lightsail API.

# The AWS region. If blank, the region from the instance metadata is used.
[ region: <string> ]

# Custom endpoint to be used.
[ endpoint: <string> ]

# The AWS API keys. If blank, the environment variables `AWS_ACCESS_KEY_ID`
# and `AWS_SECRET_ACCESS_KEY` are used.
[ access_key: <string> ]
[ secret_key: <secret> ]
# Named AWS profile used to connect to the API.
[ profile: <string> ]

# AWS Role ARN, an alternative to using AWS API keys.
[ role_arn: <string> ]

# Refresh interval to re-read the instance list.
[ refresh_interval: <duration> | default = 60s ]

# The port to scrape metrics from. If using the public IP address, this must
# instead be specified in the relabeling rule.
[ port: <int> | default = 80 ]

# HTTP client settings, including authentication methods (such as basic auth and
# authorization), proxy configurations, TLS options, custom HTTP headers, etc.
[ <http_config> ]
```

----------------------------------------

TITLE: PromQL Line Comments
DESCRIPTION: Explains how to add single-line comments in PromQL using the hash symbol (`#`).
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/querying/basics.md#_snippet_22

LANGUAGE: PromQL
CODE:
```
# This is a comment
```

----------------------------------------

TITLE: Prometheus v3 Log Format Example
DESCRIPTION: This snippet illustrates the new log message format adopted in Prometheus v3, which uses `log/slog`. The format changes include `time` instead of `ts`, `source` instead of `caller`, and additional fields like `operational information`, `fd_limits`, and `vm_limits`.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/migration.md#_snippet_7

LANGUAGE: Log Format
CODE:
```
time=2024-10-24T00:03:07.542+02:00 level=INFO source=/home/user/go/src/github.com/prometheus/prometheus/cmd/prometheus/main.go:640 msg="No time or size retention was set so using the default time retention" duration=15d
time=2024-10-24T00:03:07.542+02:00 level=INFO source=/home/user/go/src/github.com/prometheus/prometheus/cmd/prometheus/main.go:681 msg="Starting Prometheus Server" mode=server version="(version=, branch=, revision=7c7116fea8343795cae6da42960cacd0207a2af8)"
time=2024-10-24T00:03:07.542+02:00 level=INFO source=/home/user/go/src/github.com/prometheus/prometheus/cmd/prometheus/main.go:686 msg="operational information" build_context="(go=go1.23.0, platform=linux/amd64, user=, date=, tags=unknown)" host_details="(Linux 5.15.0-124-generic #134-Ubuntu SMP Fri Sep 27 20:20:17 UTC 2024 x86_64 gigafips (none))" fd_limits="(soft=1048576, hard=1048576)" vm_limits="(soft=unlimited, hard=unlimited)"
```

----------------------------------------

TITLE: PromQL Function: day_of_month() - Extract Day of Month
DESCRIPTION: The `day_of_month()` function interprets float samples in `v` as Unix timestamps (seconds since January 1, 1970 UTC) and returns the day of the month (in UTC) for each timestamp. Returned values range from 1 to 31. Histogram samples are silently ignored.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/querying/functions.md#_snippet_8

LANGUAGE: APIDOC
CODE:
```
day_of_month(v=vector(time()) instant-vector)
```

----------------------------------------

TITLE: Prometheus Serverset Service Discovery Configuration
DESCRIPTION: Configures Prometheus to discover scrape targets from Serversets stored in Zookeeper. This method is commonly used with Finagle and Aurora. It provides specific meta labels for target relabeling, such as path, endpoint host/port, and shard information. Only JSON format for Serverset data is currently supported.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/configuration/configuration.md#_snippet_117

LANGUAGE: APIDOC
CODE:
```
__meta_serverset_path: the full path to the serverset member node in Zookeeper
__meta_serverset_endpoint_host: the host of the default endpoint
__meta_serverset_endpoint_port: the port of the default endpoint
__meta_serverset_endpoint_host_<endpoint>: the host of the given endpoint
__meta_serverset_endpoint_port_<endpoint>: the port of the given endpoint
__meta_serverset_shard: the shard number of the member
__meta_serverset_status: the status of the member
```

LANGUAGE: yaml
CODE:
```
# The Zookeeper servers.
servers:
  - <host>
# Paths can point to a single serverset, or the root of a tree of serversets.
paths:
  - <string>
[ timeout: <duration> | default = 10s ]
```

----------------------------------------

TITLE: Prometheus Docker Swarm Node Meta Labels
DESCRIPTION: These meta labels are available during the relabeling phase for targets discovered via the Docker Swarm `nodes` role. They provide detailed information about the discovered node, such as its address, availability, engine version, hostname, ID, custom labels, manager status, platform details, role, and current status.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/configuration/configuration.md#_snippet_79

LANGUAGE: APIDOC
CODE:
```
__meta_dockerswarm_node_address: the address of the node
__meta_dockerswarm_node_availability: the availability of the node
__meta_dockerswarm_node_engine_version: the version of the node engine
__meta_dockerswarm_node_hostname: the hostname of the node
__meta_dockerswarm_node_id: the ID of the node
__meta_dockerswarm_node_label_<labelname>: each label of the node, with any unsupported characters converted to an underscore
__meta_dockerswarm_node_manager_address: the address of the manager component of the node
__meta_dockerswarm_node_manager_leader: the leadership status of the manager component of the node (true or false)
__meta_dockerswarm_node_manager_reachability: the reachability of the manager component of the node
__meta_dockerswarm_node_platform_architecture: the architecture of the node
__meta_dockerswarm_node_platform_os: the operating system of the node
__meta_dockerswarm_node_role: the role of the node
__meta_dockerswarm_node_status: the status of the node
```

----------------------------------------

TITLE: Prometheus OpenStack Discovery Configuration Options
DESCRIPTION: Provides the YAML configuration options for Prometheus to access the OpenStack API and define discovery parameters. It includes settings for role, region, identity endpoint, various authentication credentials (username, password, domain, project, application credentials), and their usage constraints.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/configuration/configuration.md#_snippet_87

LANGUAGE: YAML
CODE:
```
# The information to access the OpenStack API.

# The OpenStack role of entities that should be discovered.
role: <openstack_role>

# The OpenStack Region.
region: <string>

# identity_endpoint specifies the HTTP endpoint that is required to work with
# the Identity API of the appropriate version. While it's ultimately needed by
# all of the identity services, it will often be populated by a provider-level
# function.
[ identity_endpoint: <string> ]

# username is required if using Identity V2 API. Consult with your provider's
# control panel to discover your account's username. In Identity V3, either
# userid or a combination of username and domain_id or domain_name are needed.
[ username: <string> ]
[ userid: <string> ]

# password for the Identity V2 and V3 APIs. Consult with your provider's
# control panel to discover your account's preferred method of authentication.
[ password: <secret> ]

# At most one of domain_id and domain_name must be provided if using username
# with Identity V3. Otherwise, either are optional.
[ domain_name: <string> ]
[ domain_id: <string> ]

# The project_id and project_name fields are optional for the Identity V2 API.
# Some providers allow you to specify a project_name instead of the project_id.
# Some require both. Your provider's authentication policies will determine
# how these fields influence authentication.
[ project_name: <string> ]
[ project_id: <string> ]

# The application_credential_id or application_credential_name fields are
# required if using an application credential to authenticate. Some providers
# allow you to create an application credential to authenticate rather than a
# password.
[ application_credential_name: <string> ]
[ application_credential_id: <string> ]

# The application_credential_secret field is required if using an application
```

----------------------------------------

TITLE: APIDOC: `histogram_stdvar()` Function Definition
DESCRIPTION: `histogram_stdvar(v instant-vector)` returns the estimated standard variance of observations for each histogram sample in `v`. Similar to `histogram_stddev()`, it assumes observations in a bucket have the value of the mean of the bucket boundaries. Float samples are ignored and do not show up in the returned vector.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/querying/functions.md#_snippet_27

LANGUAGE: APIDOC
CODE:
```
histogram_stdvar(v instant-vector)
```

----------------------------------------

TITLE: Prometheus Eureka Service Discovery Meta Labels
DESCRIPTION: Describes the meta labels available for targets discovered via Eureka service discovery, which can be used during relabeling to enrich target metadata.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/configuration/configuration.md#_snippet_119

LANGUAGE: APIDOC
CODE:
```
__meta_eureka_app_name: the name of the app
__meta_eureka_app_instance_id: the ID of the app instance
__meta_eureka_app_instance_hostname: the hostname of the instance
__meta_eureka_app_instance_homepage_url: the homepage url of the app instance
__meta_eureka_app_instance_statuspage_url: the status page url of the app instance
__meta_eureka_app_instance_healthcheck_url: the health check url of the app instance
__meta_eureka_app_instance_ip_addr: the IP address of the app instance
__meta_eureka_app_instance_vip_address: the VIP address of the app instance
__meta_eureka_app_instance_secure_vip_address: the secure VIP address of the app instance
__meta_eureka_app_instance_status: the status of the app instance
__meta_eureka_app_instance_port: the port of the app instance
__meta_eureka_app_instance_port_enabled: the port enabled of the app instance
__meta_eureka_app_instance_secure_port: the secure port address of the app instance
__meta_eureka_app_instance_secure_port_enabled: the secure port of the app instance
__meta_eureka_app_instance_country_id: the country ID of the app instance
__meta_eureka_app_instance_metadata_<metadataname>: app instance metadata
__meta_eureka_app_instance_datacenterinfo_name: the datacenter name of the app instance
__meta_eureka_app_instance_datacenterinfo_<metadataname>: the datacenter metadata
```

----------------------------------------

TITLE: Prometheus Target Synchronization Length Metrics
DESCRIPTION: Metrics detailing the duration of target synchronization processes within Prometheus, including quantiles, sum, and count for different scrape jobs. These indicate the efficiency and latency of Prometheus's scraping mechanism.
SOURCE: https://github.com/prometheus/prometheus/blob/main/model/textparse/testdata/alltypes.237mfs.nometa.prom.txt#_snippet_78

LANGUAGE: APIDOC
CODE:
```
prometheus_target_sync_length_seconds{scrape_job="prometheus",quantile="0.99"} 1.961e-05
prometheus_target_sync_length_seconds_sum{scrape_job="prometheus"} 0.10655758600000016
prometheus_target_sync_length_seconds_count{scrape_job="prometheus"} 2953
prometheus_target_sync_length_seconds{scrape_job="random",quantile="0.01"} 4.1299e-05
prometheus_target_sync_length_seconds{scrape_job="random",quantile="0.05"} 4.1299e-05
prometheus_target_sync_length_seconds{scrape_job="random",quantile="0.5"} 4.1299e-05
prometheus_target_sync_length_seconds{scrape_job="random",quantile="0.9"} 4.8586e-05
prometheus_target_sync_length_seconds{scrape_job="random",quantile="0.99"} 4.8586e-05
prometheus_target_sync_length_seconds_sum{scrape_job="random"} 0.20406449899999993
prometheus_target_sync_length_seconds_count{scrape_job="random"} 2953
```

----------------------------------------

TITLE: Initialize CodeMirror PromQL with Default Setup
DESCRIPTION: Demonstrates the easiest way to set up CodeMirror with the PromQL extension, activating syntax highlighting, offline autocompletion, and offline linting by default.
SOURCE: https://github.com/prometheus/prometheus/blob/main/web/ui/module/codemirror-promql/README.md#_snippet_3

LANGUAGE: typescript
CODE:
```
import {PromQLExtension} from '@prometheus-io/codemirror-promql';
import {basicSetup} from '@codemirror/basic-setup';
import {EditorState} from '@codemirror/state';
import {EditorView} from '@codemirror/view';

const promQL = new PromQLExtension()
new EditorView({
    state: EditorState.create({
        extensions: [basicSetup, promQL.asExtension()],
    }),
    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
    // tslint:disable-next-line:no-non-null-assertion
    parent: document.getElementById('editor')!,
});
```

----------------------------------------

TITLE: Example JSON Response for Prometheus Rules API
DESCRIPTION: Illustrates the structure of a successful JSON response from the `/api/v1/rules` endpoint, including details for alerting and recording rules, their active alerts, annotations, labels, and health status.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/querying/api.md#_snippet_28

LANGUAGE: json
CODE:
```
{
    "data": {
        "groups": [
            {
                "rules": [
                    {
                        "alerts": [
                            {
                                "activeAt": "2018-07-04T20:27:12.60602144+02:00",
                                "annotations": {
                                    "summary": "High request latency"
                                },
                                "labels": {
                                    "alertname": "HighRequestLatency",
                                    "severity": "page"
                                },
                                "state": "firing",
                                "value": "1e+00"
                            }
                        ],
                        "annotations": {
                            "summary": "High request latency"
                        },
                        "duration": 600,
                        "health": "ok",
                        "labels": {
                            "severity": "page"
                        },
                        "name": "HighRequestLatency",
                        "query": "job:request_latency_seconds:mean5m{job=\"myjob\"} > 0.5",
                        "type": "alerting"
                    },
                    {
                        "health": "ok",
                        "name": "job:http_inprogress_requests:sum",
                        "query": "sum by (job) (http_inprogress_requests)",
                        "type": "recording"
                    }
                ],
                "file": "/rules.yaml",
                "interval": 60,
                "limit": 0,
                "name": "example"
            }
        ]
    },
    "status": "success"
}
```

----------------------------------------

TITLE: Prometheus API: Query Metric Metadata with Limit Per Metric
DESCRIPTION: Example showing how to retrieve only one metadata entry per metric using the `limit_per_metric` parameter. This is useful for getting a concise overview of metric metadata.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/querying/api.md#_snippet_33

LANGUAGE: bash
CODE:
```
curl -G http://localhost:9090/api/v1/metadata?limit_per_metric=1
```

LANGUAGE: json
CODE:
```
{
  "status": "success",
  "data": {
    "cortex_ring_tokens": [
      {
        "type": "gauge",
        "help": "Number of tokens in the ring",
        "unit": ""
      }
    ],
    "http_requests_total": [
      {
        "type": "counter",
        "help": "Number of HTTP requests",
        "unit": ""
      }
    ]
  }
}
```

----------------------------------------

TITLE: Count Prometheus Time Series (PromQL)
DESCRIPTION: This PromQL query uses the `count()` aggregation function to determine the total number of time series returned for the `prometheus_target_interval_length_seconds` metric.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/getting_started.md#_snippet_5

LANGUAGE: PromQL
CODE:
```
count(prometheus_target_interval_length_seconds)
```

----------------------------------------

TITLE: APIDOC: stddev and stdvar Aggregation Operators
DESCRIPTION: Documentation for `stddev` (standard deviation) and `stdvar` (standard variance) aggregation operators. These operators only work with float samples, adhering to IEEE 754 floating point arithmetic. Histogram samples in the input vector are ignored, flagged by an info-level annotation.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/querying/operators.md#_snippet_16

LANGUAGE: APIDOC
CODE:
```
`stddev` and `stdvar` only work with float samples, following IEEE 754 floating point arithmetic. Histogram samples in the input vector are ignored, flagged by an info-level annotation.
```

----------------------------------------

TITLE: Valid Vector Selectors with Non-Empty Label Matchers (PromQL)
DESCRIPTION: Provides examples of valid PromQL vector selectors that either use a regex matching one or more characters (`.+`) or combine a regex matching any string (`.*`) with another non-empty label matcher, satisfying the requirement for a non-empty selection.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/querying/basics.md#_snippet_14

LANGUAGE: PromQL
CODE:
```
{job=~\".+\"}
```

LANGUAGE: PromQL
CODE:
```
{job=~\".*\",method=\"get\"}
```

----------------------------------------

TITLE: Connect PromQL Autocompletion to Remote Prometheus Server
DESCRIPTION: Configures the PromQL autocompletion to fetch metric names, label names, and label values from a specified remote Prometheus server URL.
SOURCE: https://github.com/prometheus/prometheus/blob/main/web/ui/module/codemirror-promql/README.md#_snippet_6

LANGUAGE: typescript
CODE:
```
const promQL = new PromQLExtension().setComplete({remote: {url: 'https://prometheus.land'}})
```

----------------------------------------

TITLE: Retrieve Prometheus WAL Replay Statistics
DESCRIPTION: This API endpoint returns real-time information about the Write-Ahead Log (WAL) replay process, including the number of segments replayed, total segments, progress percentage, and current state. It is available even before the server is ready and updates in real time.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/querying/api.md#_snippet_45

LANGUAGE: APIDOC
CODE:
```
GET /api/v1/status/walreplay
  Description: Returns information about the WAL replay process.
  Response:
    Type: JSON object
    Properties:
      status: string ("success")
      data: object
        min: number (The number of segments replayed so far.)
        max: number (The total number segments needed to be replayed.)
        current: number (The progress of the replay (0 - 100%).)
        state: string (The state of the replay.)
          Possible values: "waiting", "in progress", "done"
    Notes: Available before server is ready, updated in real time.
```

LANGUAGE: bash
CODE:
```
curl http://localhost:9090/api/v1/status/walreplay
```

LANGUAGE: json
CODE:
```
{
  "status": "success",
  "data": {
    "min": 2,
    "max": 5,
    "current": 40,
    "state": "in progress"
  }
}
```

----------------------------------------

TITLE: Prometheus DNS Service Discovery Meta Labels
DESCRIPTION: These meta labels are available during the relabeling phase for targets discovered via DNS-based service discovery. They provide information about the DNS record that produced the discovered target, including the record name, and specific fields for SRV, MX, and NS records.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/configuration/configuration.md#_snippet_81

LANGUAGE: APIDOC
CODE:
```
__meta_dns_name: the record name that produced the discovered target.
__meta_dns_srv_record_target: the target field of the SRV record
__meta_dns_srv_record_port: the port field of the SRV record
__meta_dns_mx_record_target: the target field of the MX record
__meta_dns_ns_record_target: the target field of the NS record
```

----------------------------------------

TITLE: Enable PromQL Duration Expression Feature
DESCRIPTION: This feature flag enables the use of arithmetic expressions within time durations in PromQL range queries and offset durations. It supports standard arithmetic operators like `+`, `-`, `*`, `/`, `%`, and `^`. This flag does not affect the `@` timestamp operator.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/feature_flags.md#_snippet_14

LANGUAGE: APIDOC
CODE:
```
--enable-feature=promql-duration-expr
```

----------------------------------------

TITLE: PromQL Case Insensitivity for Aggregations and Binary Operators
DESCRIPTION: Demonstrates PromQL's case insensitivity for aggregation operators (SUM, AVG) and binary operator modifiers (IGNORing, withOUT), showing how they are parsed correctly regardless of case.
SOURCE: https://github.com/prometheus/prometheus/blob/main/web/ui/module/lezer-promql/test/expression.txt#_snippet_8

LANGUAGE: PromQL
CODE:
```
SuM BY(testlabel1) (testmetric1) / IGNOring(testlabel2) AVG withOUT(testlabel3) (testmetric2)

==>

PromQL(
    BinaryExpr(
        AggregateExpr(
          AggregateOp(Sum),
          AggregateModifier(
            By,
            GroupingLabels(
                LabelName
            )
          ),
          FunctionCallBody(
                VectorSelector(
                  Identifier
                )
          )
        ),
      Div,
        MatchingModifierClause(
          Ignoring,
          GroupingLabels(
              LabelName
          )
        ),
        AggregateExpr(
          AggregateOp(Avg),
          AggregateModifier(
            Without,
            GroupingLabels(
                LabelName
            )
          ),
          FunctionCallBody(
                VectorSelector(
                    Identifier
                )
          )
      )
  )
)
```

----------------------------------------

TITLE: Prometheus HTTP Response Size Metrics (Histogram)
DESCRIPTION: This snippet illustrates Prometheus histogram metrics for HTTP response sizes. It includes `prometheus_http_response_size_bytes_bucket` for cumulative counts within size ranges, `prometheus_http_response_size_bytes_sum` for the total bytes served, and `prometheus_http_response_size_bytes_count` for the total number of responses. These metrics are labeled by `handler` (the API endpoint) and `le` (less than or equal to) for buckets, providing insights into response size distributions.
SOURCE: https://github.com/prometheus/prometheus/blob/main/model/textparse/testdata/alltypes.237mfs.nometa.prom.txt#_snippet_42

LANGUAGE: Prometheus
CODE:
```
prometheus_http_response_size_bytes_bucket{handler="/",le="100"} 688
prometheus_http_response_size_bytes_bucket{handler="/",le="1000"} 688
prometheus_http_response_size_bytes_bucket{handler="/",le="10000"} 688
prometheus_http_response_size_bytes_bucket{handler="/",le="100000"} 688
prometheus_http_response_size_bytes_bucket{handler="/",le="1e+06"} 688
prometheus_http_response_size_bytes_bucket{handler="/",le="1e+07"} 688
prometheus_http_response_size_bytes_bucket{handler="/",le="1e+08"} 688
prometheus_http_response_size_bytes_bucket{handler="/",le="1e+09"} 688
prometheus_http_response_size_bytes_bucket{handler="/",le="+Inf"} 688
prometheus_http_response_size_bytes_sum{handler="/"} 19952
prometheus_http_response_size_bytes_count{handler="/"} 688
prometheus_http_response_size_bytes_bucket{handler="/-/healthy",le="100"} 29524
prometheus_http_response_size_bytes_bucket{handler="/-/healthy",le="1000"} 29524
prometheus_http_response_size_bytes_bucket{handler="/-/healthy",le="10000"} 29524
prometheus_http_response_size_bytes_bucket{handler="/-/healthy",le="100000"} 29524
prometheus_http_response_size_bytes_bucket{handler="/-/healthy",le="1e+06"} 29524
prometheus_http_response_size_bytes_bucket{handler="/-/healthy",le="1e+07"} 29524
prometheus_http_response_size_bytes_bucket{handler="/-/healthy",le="1e+08"} 29524
prometheus_http_response_size_bytes_bucket{handler="/-/healthy",le="1e+09"} 29524
prometheus_http_response_size_bytes_bucket{handler="/-/healthy",le="+Inf"} 29524
prometheus_http_response_size_bytes_sum{handler="/-/healthy"} 885720
prometheus_http_response_size_bytes_count{handler="/-/healthy"} 29524
prometheus_http_response_size_bytes_bucket{handler="/-/ready",le="100"} 49
prometheus_http_response_size_bytes_bucket{handler="/-/ready",le="1000"} 49
prometheus_http_response_size_bytes_bucket{handler="/-/ready",le="10000"} 49
prometheus_http_response_size_bytes_bucket{handler="/-/ready",le="100000"} 49
prometheus_http_response_size_bytes_bucket{handler="/-/ready",le="1e+06"} 49
prometheus_http_response_size_bytes_bucket{handler="/-/ready",le="1e+07"} 49
prometheus_http_response_size_bytes_bucket{handler="/-/ready",le="1e+08"} 49
prometheus_http_response_size_bytes_bucket{handler="/-/ready",le="1e+09"} 49
prometheus_http_response_size_bytes_bucket{handler="/-/ready",le="+Inf"} 49
prometheus_http_response_size_bytes_sum{handler="/-/ready"} 1372
prometheus_http_response_size_bytes_count{handler="/-/ready"} 49
prometheus_http_response_size_bytes_bucket{handler="/alerts",le="100"} 0
prometheus_http_response_size_bytes_bucket{handler="/alerts",le="1000"} 0
prometheus_http_response_size_bytes_bucket{handler="/alerts",le="10000"} 48
prometheus_http_response_size_bytes_bucket{handler="/alerts",le="100000"} 48
prometheus_http_response_size_bytes_bucket{handler="/alerts",le="1e+06"} 48
prometheus_http_response_size_bytes_bucket{handler="/alerts",le="1e+07"} 48
prometheus_http_response_size_bytes_bucket{handler="/alerts",le="1e+08"} 48
prometheus_http_response_size_bytes_bucket{handler="/alerts",le="1e+09"} 48
prometheus_http_response_size_bytes_bucket{handler="/alerts",le="+Inf"} 48
prometheus_http_response_size_bytes_sum{handler="/alerts"} 84096
prometheus_http_response_size_bytes_count{handler="/alerts"} 48
prometheus_http_response_size_bytes_bucket{handler="/api/v1/*path",le="100"} 27
prometheus_http_response_size_bytes_bucket{handler="/api/v1/*path",le="1000"} 27
prometheus_http_response_size_bytes_bucket{handler="/api/v1/*path",le="10000"} 27
prometheus_http_response_size_bytes_bucket{handler="/api/v1/*path",le="100000"} 27
prometheus_http_response_size_bytes_bucket{handler="/api/v1/*path",le="1e+06"} 27
prometheus_http_response_size_bytes_bucket{handler="/api/v1/*path",le="1e+07"} 27
prometheus_http_response_size_bytes_bucket{handler="/api/v1/*path",le="1e+08"} 27
prometheus_http_response_size_bytes_bucket{handler="/api/v1/*path",le="1e+09"} 27
prometheus_http_response_size_bytes_bucket{handler="/api/v1/*path",le="+Inf"} 27
prometheus_http_response_size_bytes_sum{handler="/api/v1/*path"} 0
prometheus_http_response_size_bytes_count{handler="/api/v1/*path"} 27
prometheus_http_response_size_bytes_bucket{handler="/api/v1/alertmanagers",le="100"} 0
prometheus_http_response_size_bytes_bucket{handler="/api/v1/alertmanagers",le="1000"} 8
prometheus_http_response_size_bytes_bucket{handler="/api/v1/alertmanagers",le="10000"} 8
prometheus_http_response_size_bytes_bucket{handler="/api/v1/alertmanagers",le="100000"} 8
```

----------------------------------------

TITLE: Prometheus Scaleway Service Discovery Configuration
DESCRIPTION: This YAML configuration block defines the settings for Prometheus to discover targets from Scaleway. It includes parameters for authentication (access key, secret key, or secret key file), project ID, target role (instance or baremetal), port, API URL, zone, and filters for names and tags, along with refresh interval and HTTP client settings.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/configuration/configuration.md#_snippet_123

LANGUAGE: yaml
CODE:
```
# Access key to use. https://console.scaleway.com/project/credentials
access_key: <string>

# Secret key to use when listing targets. https://console.scaleway.com/project/credentials
# It is mutually exclusive with `secret_key_file`.
[ secret_key: <secret> ]

# Sets the secret key with the credentials read from the configured file.
# It is mutually exclusive with `secret_key`.
[ secret_key_file: <filename> ]

# Project ID of the targets.
project_id: <string>

# Role of the targets to retrieve. Must be `instance` or `baremetal`.
role: <string>

# The port to scrape metrics from.
[ port: <int> | default = 80 ]

# API URL to use when doing the server listing requests.
[ api_url: <string> | default = "https://api.scaleway.com" ]

# Zone is the availability zone of your targets (e.g. fr-par-1).
[ zone: <string> | default = fr-par-1 ]

# NameFilter specify a name filter (works as a LIKE) to apply on the server listing request.
[ name_filter: <string> ]

# TagsFilter specify a tag filter (a server needs to have all defined tags to be listed) to apply on the server listing request.
tags_filter:
[ - <string> ]

# Refresh interval to re-read the targets list.
[ refresh_interval: <duration> | default = 60s ]

# HTTP client settings, including authentication methods (such as basic auth and
# authorization), proxy configurations, TLS options, custom HTTP headers, etc.
[ <http_config> ]
```

----------------------------------------

TITLE: Configure Prometheus OVHcloud Service Discovery
DESCRIPTION: List of OVHcloud service discovery configurations for Prometheus.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/configuration/configuration.md#_snippet_45

LANGUAGE: APIDOC
CODE:
```
ovhcloud_sd_configs:
  [ - <ovhcloud_sd_config> ... ]
```

----------------------------------------

TITLE: Configure Agent WAL Compression
DESCRIPTION: Compress the agent Write-Ahead Log (WAL). If this flag is set to false, the --storage.agent.wal-compression-type flag will be ignored. This flag is for use with agent mode only.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/command-line/prometheus.md#_snippet_3

LANGUAGE: APIDOC
CODE:
```
--storage.agent.wal-compression <boolean>
Default: true
Usage: agent mode only
```

----------------------------------------

TITLE: Retrieve Prometheus Build Information
DESCRIPTION: This API endpoint returns various build-related properties of the Prometheus server, such as version, revision, and Go version. All returned values are strings. Note that the exact properties may change between versions.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/querying/api.md#_snippet_43

LANGUAGE: APIDOC
CODE:
```
GET /api/v1/status/buildinfo
  Description: Returns various build information properties about the Prometheus server.
  Response:
    Type: JSON object
    Properties:
      status: string ("success")
      data: object
        version: string
        revision: string
        branch: string
        buildUser: string
        buildDate: string
        goVersion: string
    Notes: All values are strings. Exact properties may change without notice.
```

LANGUAGE: bash
CODE:
```
curl http://localhost:9090/api/v1/status/buildinfo
```

LANGUAGE: json
CODE:
```
{
  "status": "success",
  "data": {
    "version": "2.13.1",
    "revision": "cb7cbad5f9a2823a622aaa668833ca04f50a0ea7",
    "branch": "master",
    "buildUser": "julius@desktop",
    "buildDate": "20191102-16:19:59",
    "goVersion": "go1.13.1"
  }
}
```

----------------------------------------

TITLE: Prometheus API: Query Configuration
DESCRIPTION: Example demonstrating how to retrieve the active Prometheus configuration. The response contains the YAML content of the loaded configuration file.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/querying/api.md#_snippet_38

LANGUAGE: bash
CODE:
```
curl http://localhost:9090/api/v1/status/config
```

LANGUAGE: json
CODE:
```
{
  "status": "success",
  "data": {
    "yaml": "<content of the loaded config file in YAML>"
  }
}
```

----------------------------------------

TITLE: APIDOC: group and count Aggregation Operators
DESCRIPTION: Documentation for `group` and `count` aggregation operators. These operators do not interact with sample values and function identically for both float and histogram samples.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/querying/operators.md#_snippet_14

LANGUAGE: APIDOC
CODE:
```
`group` and `count` do not interact with the sample values, they work in the same way for float samples and histogram samples.
```

----------------------------------------

TITLE: Query Prometheus Exemplars API (Experimental)
DESCRIPTION: This section details the experimental Prometheus API endpoint for querying exemplars, which are trace IDs or other identifiers associated with specific metric observations. It supports GET/POST methods and requires `query`, `start`, and `end` parameters. The response includes `seriesLabels` and an array of `exemplars`, each with `labels`, `value`, and `timestamp`. This feature is explicitly marked as experimental and subject to change.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/querying/api.md#_snippet_17

LANGUAGE: APIDOC
CODE:
```
GET /api/v1/query_exemplars
POST /api/v1/query_exemplars

URL Query Parameters:
  query: <string> - Prometheus expression query string.
  start: <rfc3339 | unix_timestamp> - Start timestamp.
  end: <rfc3339 | unix_timestamp> - End timestamp.

Response Data:
  An array of objects, each containing:
    seriesLabels: Object of label-value pairs for the series.
    exemplars: Array of exemplar objects, each with:
      labels: Object of label-value pairs for the exemplar (e.g., trace_id).
      value: String representation of the metric value.
      timestamp: Unix timestamp (float) of the exemplar.
```

LANGUAGE: bash
CODE:
```
curl -g 'http://localhost:9090/api/v1/query_exemplars?query=test_exemplar_metric_total&start=2020-09-14T15:22:25.479Z&end=2020-09-14T15:23:25.479Z'
```

LANGUAGE: json
CODE:
```
{
    "status": "success",
    "data": [
        {
            "seriesLabels": {
                "__name__": "test_exemplar_metric_total",
                "instance": "localhost:8090",
                "job": "prometheus",
                "service": "bar"
            },
            "exemplars": [
                {
                    "labels": {
                        "trace_id": "EpTxMJ40fUus7aGY"
                    },
                    "value": "6",
                    "timestamp": 1600096945.479
                }
            ]
        },
        {
            "seriesLabels": {
                "__name__": "test_exemplar_metric_total",
                "instance": "localhost:8090",
                "job": "prometheus",
                "service": "foo"
            },
            "exemplars": [
                {
                    "labels": {
                        "trace_id": "Olp9XHlq763ccsfa"
                    },
                    "value": "19",
                    "timestamp": 1600096955.479
                },
                {
                    "labels": {
                        "trace_id": "hCtjygkIHwAN9vs4"
                    },
                    "value": "20",
                    "timestamp": 1600096965.489
                }
            ]
        }
    ]
}
```

----------------------------------------

TITLE: Prometheus Native Histogram Configuration Parameters
DESCRIPTION: Defines configuration parameters related to native histograms in Prometheus, including the minimum bucket factor for histogram buckets and a boolean flag to enable conversion of classic histograms to native custom buckets.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/configuration/configuration.md#_snippet_65

LANGUAGE: APIDOC
CODE:
```
native_histogram_min_bucket_factor: <float> | default = 0
convert_classic_histograms_to_nhcb: <bool> | default = <global.convert_classic_histograms_to_nhcb>
```

----------------------------------------

TITLE: Prometheus Native Histogram Bucket Limit
DESCRIPTION: Sets a limit on the total number of positive and negative buckets allowed in a single native histogram. Resolution will be reduced or scrape will fail if the limit is exceeded. A value of 0 means no limit.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/configuration/configuration.md#_snippet_63

LANGUAGE: APIDOC
CODE:
```
[ native_histogram_bucket_limit: <int> | default = 0 ]
```

----------------------------------------

TITLE: Prometheus Azure Service Discovery Configuration
DESCRIPTION: Enables Prometheus to discover scrape targets from Azure Virtual Machines. Requires specific Azure API permissions for VM and network interface read access. Provides a set of meta labels for relabeling discovered targets.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/configuration/configuration.md#_snippet_70

LANGUAGE: APIDOC
CODE:
```
Azure SD Configuration (`<azure_sd_config>`):
  Description: Azure SD configurations allow retrieving scrape targets from Azure VMs.
  
  Required Permissions:
  * Microsoft.Compute/virtualMachines/read: Required for VM discovery
  * Microsoft.Network/networkInterfaces/read: Required for VM discovery
  * Microsoft.Compute/virtualMachineScaleSets/virtualMachines/read: Required for scale set (VMSS) discovery
  * Microsoft.Compute/virtualMachineScaleSets/virtualMachines/networkInterfaces/read: Required for scale set (VMSS) discovery
  
  Available Meta Labels for Relabeling:
  * __meta_azure_machine_id: the machine ID
  * __meta_azure_machine_location: the location the machine runs in
  * __meta_azure_machine_name: the machine name
  * __meta_azure_machine_computer_name: the machine computer name
  * __meta_azure_machine_os_type: the machine operating system
  * __meta_azure_machine_private_ip: the machine's private IP
  * __meta_azure_machine_public_ip: the machine's public IP if it exists
  * __meta_azure_machine_resource_group: the machine's resource group
  * __meta_azure_machine_tag_<tagname>: each tag value of the machine
  * __meta_azure_machine_scale_set: the name of the scale set which the vm is part of (only set if using a scale set)
  * __meta_azure_machine_size: the machine size
  * __meta_azure_subscription_id: the subscription ID
  * __meta_azure_tenant_id: the tenant ID
  
  Configuration Options:
    environment: <string> | default = AzurePublicCloud (Optional)
      Description: The Azure environment.
    authentication_method: <string> | default = OAuth (Optional)
      Description: The authentication method, either OAuth, ManagedIdentity or SDK. SDK authentication uses environment variables by default.
    subscription_id: <string> (Required)
      Description: The subscription ID.
    tenant_id: <string> (Optional)
      Description: Only required with authentication_method OAuth.
    client_id: <string> (Optional)
      Description: Only required with authentication_method OAuth.
    client_secret: <secret> (Optional)
      Description: Only required with authentication_method OAuth.
    resource_group: <string> (Optional)
      Description: Limits discovery to this resource group.
    refresh_interval: <duration> | default = 300s (Optional)
      Description: Refresh interval to re-read the instance list.
    port: <int> | default = 80 (Optional)
      Description: The port to scrape metrics from. If using the public IP address, this must instead be specified in the relabeling rule.
    HTTP client settings, including authentication methods (such as basic auth and...
```

LANGUAGE: yaml
CODE:
```
# The information to access the Azure API.
# The Azure environment.
[ environment: <string> | default = AzurePublicCloud ]

# The authentication method, either OAuth, ManagedIdentity or SDK.
# See https://docs.microsoft.com/en-us/azure/active-directory/managed-identities-azure-resources/overview
# SDK authentication method uses environment variables by default.
# See https://learn.microsoft.com/en-us/azure/developer/go/azure-sdk-authentication
[ authentication_method: <string> | default = OAuth]
# The subscription ID. Always required.
subscription_id: <string>
# Optional tenant ID. Only required with authentication_method OAuth.
[ tenant_id: <string> ]
# Optional client ID. Only required with authentication_method OAuth.
[ client_id: <string> ]
# Optional client secret. Only required with authentication_method OAuth.
[ client_secret: <secret> ]

# Optional resource group name. Limits discovery to this resource group.
[ resource_group: <string> ]

# Refresh interval to re-read the instance list.
[ refresh_interval: <duration> | default = 300s ]

# The port to scrape metrics from. If using the public IP address, this must
# instead be specified in the relabeling rule.
[ port: <int> | default = 80 ]

# HTTP client settings, including authentication methods (such as basic auth and
```

----------------------------------------

TITLE: PromQL Test Script Load Command Example
DESCRIPTION: Provides a concrete example of the 'load' command, showing how to load data for a specific metric ('my_metric{env="prod"}') with a 1-minute interval and various point types, including a native histogram.
SOURCE: https://github.com/prometheus/prometheus/blob/main/promql/promqltest/README.md#_snippet_2

LANGUAGE: PromQL Test Script
CODE:
```
load 1m
    my_metric{env="prod"} 5 2+3x2 _ stale {{schema:1 sum:3 count:22 buckets:[5 10 7]}}
```

----------------------------------------

TITLE: Prometheus Rule Group Evaluation Duration Statistics
DESCRIPTION: Provides statistics on the duration of rule group evaluations in seconds, including various quantiles (0.01, 0.05, 0.5, 0.9, 0.99), the total sum of durations, and the total count of evaluations. These metrics help assess the performance and latency of rule processing, identifying potential bottlenecks.
SOURCE: https://github.com/prometheus/prometheus/blob/main/model/textparse/testdata/alltypes.237mfs.nometa.prom.txt#_snippet_71

LANGUAGE: Prometheus Metrics
CODE:
```
prometheus_rule_group_duration_seconds{quantile="0.01"} 0.000735928
prometheus_rule_group_duration_seconds{quantile="0.05"} 0.000818857
prometheus_rule_group_duration_seconds{quantile="0.5"} 0.004852081
prometheus_rule_group_duration_seconds{quantile="0.9"} 0.022897759
prometheus_rule_group_duration_seconds{quantile="0.99"} 0.069327797
prometheus_rule_group_duration_seconds_sum 5335.451440133042
prometheus_rule_group_duration_seconds_count 472359
```

----------------------------------------

TITLE: Illegal Vector Selector: Missing Metric Name or Non-Empty Label Matcher (PromQL)
DESCRIPTION: Highlights an invalid PromQL vector selector where neither a metric name is specified nor is there at least one label matcher that does not match the empty string. This query will result in an error.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/querying/basics.md#_snippet_13

LANGUAGE: PromQL
CODE:
```
{job=~\".*\"} # Bad!
```

----------------------------------------

TITLE: OpenStack Hypervisor Role Discovery and Meta Labels
DESCRIPTION: Describes the `hypervisor` role for Prometheus OpenStack discovery, which targets one Nova hypervisor node per target. It lists the available meta labels for relabeling, including host IP, hostname, ID, state, status, and type.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/configuration/configuration.md#_snippet_84

LANGUAGE: APIDOC
CODE:
```
Role: hypervisor
  Description: Discovers one target per Nova hypervisor node.
  Target Address Default: host_ip attribute of the hypervisor.
  Meta Labels for Relabeling:
    __meta_openstack_hypervisor_host_ip: The hypervisor node's IP address.
    __meta_openstack_hypervisor_hostname: The hypervisor node's name.
    __meta_openstack_hypervisor_id: The hypervisor node's ID.
    __meta_openstack_hypervisor_state: The hypervisor node's state.
    __meta_openstack_hypervisor_status: The hypervisor node's status.
    __meta_openstack_hypervisor_type: The hypervisor node's type.
```

----------------------------------------

TITLE: Configure Prometheus DigitalOcean Service Discovery
DESCRIPTION: List of DigitalOcean service discovery configurations for Prometheus.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/configuration/configuration.md#_snippet_26

LANGUAGE: APIDOC
CODE:
```
digitalocean_sd_configs:
  [ - <digitalocean_sd_config> ... ]
```

----------------------------------------

TITLE: Promtool Query Labels Command
DESCRIPTION: The `promtool query labels` command fetches label values for a given label name, optionally filtered by series selectors and time range, from a Prometheus server.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/command-line/promtool.md#_snippet_15

LANGUAGE: APIDOC
CODE:
```
Command: promtool query labels
  Description: Run labels query.
  Flags:
    --start <string>: Start time (RFC3339 or Unix timestamp).
    --end <string>: End time (RFC3339 or Unix timestamp).
    --match <string>...: Series selector. Can be specified multiple times.
  Arguments:
    server <string> (Required): Prometheus server to query.
    name <string> (Required): Label name to provide label values for.
```

----------------------------------------

TITLE: Binary expression with bool modifier
DESCRIPTION: This example demonstrates a PromQL binary expression using the `bool` modifier. It shows how the `bool` modifier is parsed into the AST, affecting the output of the comparison operation.
SOURCE: https://github.com/prometheus/prometheus/blob/main/web/ui/module/lezer-promql/test/expression.txt#_snippet_14

LANGUAGE: PromQL
CODE:
```
metric_name > bool 1
```

LANGUAGE: PromQL AST
CODE:
```
PromQL(
    BinaryExpr(
        VectorSelector(
          Identifier
        ),
      Gtr,
      BoolModifier(Bool),
      NumberDurationLiteral
    )
)
```

----------------------------------------

TITLE: Round Sample Values in PromQL
DESCRIPTION: `round(v instant-vector, to_nearest=1 scalar)` rounds the sample values of all elements in `v` to the nearest integer, with ties rounding up. An optional `to_nearest` argument allows rounding to a specified multiple. Histogram samples in the input vector are silently ignored.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/querying/functions.md#_snippet_47

LANGUAGE: APIDOC
CODE:
```
round(v instant-vector, to_nearest=1 scalar)
  v: The instant vector whose sample values are to be rounded.
  to_nearest: Optional. The nearest multiple to which values should be rounded (defaults to 1).
```

----------------------------------------

TITLE: Build and Run Prometheus Remote Write Adapter
DESCRIPTION: Instructions to compile the Go-based example remote write adapter and then execute it. This server is designed to listen for and receive time series data from Prometheus's remote storage output.
SOURCE: https://github.com/prometheus/prometheus/blob/main/documentation/examples/remote_storage/example_write_adapter/README.md#_snippet_0

LANGUAGE: shell
CODE:
```
go build

./example_write_adapter
```

----------------------------------------

TITLE: Set Custom HTTP Error Handler for Prometheus Client
DESCRIPTION: Users can define a custom error handler function to intercept and manage HTTP errors that occur when the PrometheusClient communicates with the Prometheus server. This allows for centralized error logging or custom error responses.
SOURCE: https://github.com/prometheus/prometheus/blob/main/web/ui/module/codemirror-promql/README.md#_snippet_10

LANGUAGE: typescript
CODE:
```
const promQL = new PromQLExtension().setComplete({remote: {httpErrorHandler: (error: any) => console.error(error)}})
```

----------------------------------------

TITLE: Prometheus Template Functions for Querying Time Series Data (APIDOC)
DESCRIPTION: This section documents Prometheus template functions designed for querying the local database and processing time series results. These functions enable direct database queries, extraction of specific samples or labels, and sorting of time series data for use within templates.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/configuration/template_reference.md#_snippet_1

LANGUAGE: APIDOC
CODE:
```
query(query string): []sample
  Notes: Queries the database, does not support returning range vectors.
first([]sample): sample
  Notes: Equivalent to `index a 0`
label(label string, sample sample): string
  Notes: Equivalent to `index sample.Labels label`
value(sample sample): interface{}
  Notes: Equivalent to `sample.Value`
sortByLabel(label string, []samples): []sample
  Notes: Sorts the samples by the given label. Is stable.
```

----------------------------------------

TITLE: Prometheus HTTP Request Duration Metrics Examples
DESCRIPTION: Examples of Prometheus metrics collected for HTTP request durations across different API handlers. This includes histogram buckets (le for 'less than or equal to'), total sum of durations, and total request count for each handler.
SOURCE: https://github.com/prometheus/prometheus/blob/main/model/textparse/testdata/alltypes.237mfs.nometa.prom.txt#_snippet_19

LANGUAGE: Prometheus Metrics
CODE:
```
prometheus_http_request_duration_seconds_bucket{handler="/api/v1/*path",le="0.4"} 27
prometheus_http_request_duration_seconds_bucket{handler="/api/v1/*path",le="1"} 27
prometheus_http_request_duration_seconds_bucket{handler="/api/v1/*path",le="3"} 27
prometheus_http_request_duration_seconds_bucket{handler="/api/v1/*path",le="8"} 27
prometheus_http_request_duration_seconds_bucket{handler="/api/v1/*path",le="20"} 27
prometheus_http_request_duration_seconds_bucket{handler="/api/v1/*path",le="60"} 27
prometheus_http_request_duration_seconds_bucket{handler="/api/v1/*path",le="120"} 27
prometheus_http_request_duration_seconds_bucket{handler="/api/v1/*path",le="+Inf"} 27
prometheus_http_request_duration_seconds_sum{handler="/api/v1/*path"} 0.001724389
prometheus_http_request_duration_seconds_count{handler="/api/v1/*path"} 27
prometheus_http_request_duration_seconds_bucket{handler="/api/v1/alertmanagers",le="0.1"} 8
prometheus_http_request_duration_seconds_bucket{handler="/api/v1/alertmanagers",le="0.2"} 8
prometheus_http_request_duration_seconds_bucket{handler="/api/v1/alertmanagers",le="0.4"} 8
prometheus_http_request_duration_seconds_bucket{handler="/api/v1/alertmanagers",le="1"} 8
prometheus_http_request_duration_seconds_bucket{handler="/api/v1/alertmanagers",le="3"} 8
prometheus_http_request_duration_seconds_bucket{handler="/api/v1/alertmanagers",le="8"} 8
prometheus_http_request_duration_seconds_bucket{handler="/api/v1/alertmanagers",le="20"} 8
prometheus_http_request_duration_seconds_bucket{handler="/api/v1/alertmanagers",le="60"} 8
prometheus_http_request_duration_seconds_bucket{handler="/api/v1/alertmanagers",le="120"} 8
prometheus_http_request_duration_seconds_bucket{handler="/api/v1/alertmanagers",le="+Inf"} 8
prometheus_http_request_duration_seconds_sum{handler="/api/v1/alertmanagers"} 0.042492975999999995
prometheus_http_request_duration_seconds_count{handler="/api/v1/alertmanagers"} 8
prometheus_http_request_duration_seconds_bucket{handler="/api/v1/alerts",le="0.1"} 14630
prometheus_http_request_duration_seconds_bucket{handler="/api/v1/alerts",le="0.2"} 14635
prometheus_http_request_duration_seconds_bucket{handler="/api/v1/alerts",le="0.4"} 14635
prometheus_http_request_duration_seconds_bucket{handler="/api/v1/alerts",le="1"} 14635
prometheus_http_request_duration_seconds_bucket{handler="/api/v1/alerts",le="3"} 14635
prometheus_http_request_duration_seconds_bucket{handler="/api/v1/alerts",le="8"} 14635
prometheus_http_request_duration_seconds_bucket{handler="/api/v1/alerts",le="20"} 14635
prometheus_http_request_duration_seconds_bucket{handler="/api/v1/alerts",le="60"} 14635
prometheus_http_request_duration_seconds_bucket{handler="/api/v1/alerts",le="120"} 14635
prometheus_http_request_duration_seconds_bucket{handler="/api/v1/alerts",le="+Inf"} 14635
prometheus_http_request_duration_seconds_sum{handler="/api/v1/alerts"} 19.028669391999912
prometheus_http_request_duration_seconds_count{handler="/api/v1/alerts"} 14635
prometheus_http_request_duration_seconds_bucket{handler="/api/v1/format_query",le="0.1"} 4
prometheus_http_request_duration_seconds_bucket{handler="/api/v1/format_query",le="0.2"} 4
prometheus_http_request_duration_seconds_bucket{handler="/api/v1/format_query",le="0.4"} 4
prometheus_http_request_duration_seconds_bucket{handler="/api/v1/format_query",le="1"} 4
prometheus_http_request_duration_seconds_bucket{handler="/api/v1/format_query",le="3"} 4
prometheus_http_request_duration_seconds_bucket{handler="/api/v1/format_query",le="8"} 4
prometheus_http_request_duration_seconds_bucket{handler="/api/v1/format_query",le="20"} 4
prometheus_http_request_duration_seconds_bucket{handler="/api/v1/format_query",le="60"} 4
prometheus_http_request_duration_seconds_bucket{handler="/api/v1/format_query",le="120"} 4
prometheus_http_request_duration_seconds_bucket{handler="/api/v1/format_query",le="+Inf"} 4
prometheus_http_request_duration_seconds_sum{handler="/api/v1/format_query"} 0.023786675
prometheus_http_request_duration_seconds_count{handler="/api/v1/format_query"} 4
prometheus_http_request_duration_seconds_bucket{handler="/api/v1/label/:name/values",le="0.1"} 17773
prometheus_http_request_duration_seconds_bucket{handler="/api/v1/label/:name/values",le="0.2"} 17860
prometheus_http_request_duration_seconds_bucket{handler="/api/v1/label/:name/values",le="0.4"} 17939
prometheus_http_request_duration_seconds_bucket{handler="/api/v1/label/:name/values",le="1"} 17970
prometheus_http_request_duration_seconds_bucket{handler="/api/v1/label/:name/values",le="3"} 17971
prometheus_http_request_duration_seconds_bucket{handler="/api/v1/label/:name/values",le="8"} 17971
prometheus_http_request_duration_seconds_bucket{handler="/api/v1/label/:name/values",le="20"} 17971
prometheus_http_request_duration_seconds_bucket{handler="/api/v1/label/:name/values",le="60"} 17971
prometheus_http_request_duration_seconds_bucket{handler="/api/v1/label/:name/values",le="120"} 17971
```

----------------------------------------

TITLE: Configure Scrape Fallback Protocol for Prometheus v3
DESCRIPTION: Prometheus v3 enforces stricter Content-Type header validation during scraping, failing scrapes if the header is missing or invalid. To prevent failures for targets not providing correct headers, the `fallback_scrape_protocol` parameter can be specified within the `scrape_config`.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/migration.md#_snippet_4

LANGUAGE: APIDOC
CODE:
```
scrape_config:
  - job_name: example_job
    fallback_scrape_protocol: prometheus
```

----------------------------------------

TITLE: Get Prometheus v3.x.x as Go Library
DESCRIPTION: How to import Prometheus v3.y.z releases as a Go module. Due to `go mod` rules, these releases are tagged as `v0.3y.z` (with `y` padded to two digits) to indicate potential API breaking changes within major version zero.
SOURCE: https://github.com/prometheus/prometheus/blob/main/README.md#_snippet_7

LANGUAGE: Go
CODE:
```
go get github.com/prometheus/prometheus@v0.300.0
```

----------------------------------------

TITLE: Prometheus API: Get Flag Values
DESCRIPTION: Returns the flag values with which Prometheus was configured. All returned values are of string type.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/querying/api.md#_snippet_39

LANGUAGE: APIDOC
CODE:
```
GET /api/v1/status/flags
```

----------------------------------------

TITLE: Run Remote Storage Adapter for InfluxDB
DESCRIPTION: Example command to start the remote storage adapter, configured to connect to an InfluxDB instance, including authentication and organization/bucket details.
SOURCE: https://github.com/prometheus/prometheus/blob/main/documentation/examples/remote_storage/remote_storage_adapter/README.md#_snippet_3

LANGUAGE: Shell
CODE:
```
INFLUXDB_AUTH_TOKEN=<token> ./remote_storage_adapter --influxdb-url=http://localhost:8086/ --influxdb.organization=<organization_name> --influxdb.bucket=<bucket_name>
```

----------------------------------------

TITLE: PromQL: Traditional Join Query for Info Metrics
DESCRIPTION: Demonstrates the conventional, verbose method of joining info metrics like `target_info` with other series using `* on (...) group_left (...)` syntax to add data labels. This approach can lead to 'identity crisis' issues when data labels change.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/querying/functions.md#_snippet_33

LANGUAGE: PromQL
CODE:
```
rate(http_server_request_duration_seconds_count[2m])
* on (job, instance) group_left (k8s_cluster_name)
  target_info
```

----------------------------------------

TITLE: Configure Prometheus GCE Service Discovery
DESCRIPTION: List of GCE service discovery configurations for Prometheus.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/configuration/configuration.md#_snippet_33

LANGUAGE: APIDOC
CODE:
```
gce_sd_configs:
  [ - <gce_sd_config> ... ]
```

----------------------------------------

TITLE: Hetzner Service Discovery Configuration
DESCRIPTION: Defines the configuration for Prometheus to discover scrape targets from Hetzner Cloud and Robot APIs. It specifies available roles (robot or hcloud), default port, refresh interval, and optional label selectors for hcloud. It also lists various meta-labels available for relabeling based on server attributes.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/configuration/configuration.md#_snippet_98

LANGUAGE: APIDOC
CODE:
```
Meta Labels (All targets):
  __meta_hetzner_server_id: The ID of the server
  __meta_hetzner_server_name: The name of the server
  __meta_hetzner_server_status: The status of the server
  __meta_hetzner_public_ipv4: The public IPv4 address of the server
  __meta_hetzner_public_ipv6_network: The public IPv6 network (/64) of the server
  __meta_hetzner_datacenter: The datacenter of the server

Meta Labels (role: hcloud):
  __meta_hetzner_hcloud_image_name: The image name of the server
  __meta_hetzner_hcloud_image_description: The description of the server image
  __meta_hetzner_hcloud_image_os_flavor: The OS flavor of the server image
  __meta_hetzner_hcloud_image_os_version: The OS version of the server image
  __meta_hetzner_hcloud_datacenter_location: The location of the server
  __meta_hetzner_hcloud_datacenter_location_network_zone: The network zone of the server
  __meta_hetzner_hcloud_server_type: The type of the server
  __meta_hetzner_hcloud_cpu_cores: The CPU cores count of the server
  __meta_hetzner_hcloud_cpu_type: The CPU type of the server (shared or dedicated)
  __meta_hetzner_hcloud_memory_size_gb: The amount of memory of the server (in GB)
  __meta_hetzner_hcloud_disk_size_gb: The disk size of the server (in GB)
  __meta_hetzner_hcloud_private_ipv4_<networkname>: The private IPv4 address of the server within a given network
  __meta_hetzner_hcloud_label_<labelname>: Each label of the server, with any unsupported characters converted to an underscore
  __meta_hetzner_hcloud_labelpresent_<labelname>: `true` for each label of the server, with any unsupported characters converted to an underscore

Meta Labels (role: robot):
  __meta_hetzner_robot_product: The product of the server
  __meta_hetzner_robot_cancelled: The server cancellation status
```

LANGUAGE: YAML
CODE:
```
# The Hetzner role of entities that should be discovered.
# One of robot or hcloud.
role: <string>

# The port to scrape metrics from.
[ port: <int> | default = 80 ]

# The time after which the servers are refreshed.
[ refresh_interval: <duration> | default = 60s ]

# Label selector used to filter the servers when fetching them from the API. See https://docs.hetzner.cloud/#label-selector for more details.
# Only used when role is hcloud.
[ label_selector: <string> ]

# HTTP client settings, including authentication methods (such as basic auth and
# authorization), proxy configurations, TLS options, custom HTTP headers, etc.
[ <http_config> ]
```

----------------------------------------

TITLE: Sort Instant Vector Elements in Ascending Order in PromQL
DESCRIPTION: `sort(v instant-vector)` returns vector elements sorted by their float sample values in ascending order. Histogram samples are silently ignored. This function only affects the results of instant queries, as range query results have a fixed output ordering.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/querying/functions.md#_snippet_50

LANGUAGE: APIDOC
CODE:
```
sort(v instant-vector)
  v: The instant vector whose elements will be sorted.
```

----------------------------------------

TITLE: Configure Prometheus EC2 Service Discovery
DESCRIPTION: List of EC2 service discovery configurations for Prometheus.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/configuration/configuration.md#_snippet_30

LANGUAGE: APIDOC
CODE:
```
ec2_sd_configs:
  [ - <ec2_sd_config> ... ]
```

----------------------------------------

TITLE: Configure Prometheus Azure Service Discovery
DESCRIPTION: List of Azure service discovery configurations for Prometheus.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/configuration/configuration.md#_snippet_24

LANGUAGE: APIDOC
CODE:
```
azure_sd_configs:
  [ - <azure_sd_config> ... ]
```

----------------------------------------

TITLE: Prometheus Lightsail SD Configuration Meta Labels
DESCRIPTION: This section lists the meta labels available for targets discovered from AWS Lightsail instances. These labels can be used during relabeling to dynamically modify target metadata, allowing for flexible scraping configurations based on instance properties like availability zone, instance name, and IP addresses.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/configuration/configuration.md#_snippet_109

LANGUAGE: APIDOC
CODE:
```
__meta_lightsail_availability_zone: the availability zone in which the instance is running
__meta_lightsail_blueprint_id: the Lightsail blueprint ID
__meta_lightsail_bundle_id: the Lightsail bundle ID
__meta_lightsail_instance_name: the name of the Lightsail instance
__meta_lightsail_instance_state: the state of the Lightsail instance
__meta_lightsail_instance_support_code: the support code of the Lightsail instance
__meta_lightsail_ipv6_addresses: comma separated list of IPv6 addresses assigned to the instance's network interfaces, if present
__meta_lightsail_private_ip: the private IP address of the instance
__meta_lightsail_public_ip: the public IP address of the instance, if available
__meta_lightsail_region: the region of the instance
__meta_lightsail_tag_<tagkey>: each tag value of the instance
```

----------------------------------------

TITLE: PromQL: Sample 10 Time Series
DESCRIPTION: Selects a deterministic pseudo-random subset of 10 time series from `http_requests_total` using `limitk`, useful for inspecting labels and their values without processing all series.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/querying/operators.md#_snippet_23

LANGUAGE: PromQL
CODE:
```
limitk(10, http_requests_total)
```

----------------------------------------

TITLE: Prometheus Marathon Service Discovery Configuration
DESCRIPTION: Configures Prometheus to discover scrape targets from the Marathon REST API. This snippet details the YAML configuration options for connecting to Marathon servers, setting refresh intervals, and handling authentication. It also lists the meta labels available for relabeling discovered targets.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/configuration/configuration.md#_snippet_114

LANGUAGE: yaml
CODE:
```
# List of URLs to be used to contact Marathon servers.
# You need to provide at least one server URL.
servers:
  - <string>

# Polling interval
[ refresh_interval: <duration> | default = 30s ]

# Optional authentication information for token-based authentication
# https://docs.mesosphere.com/1.11/security/ent/iam-api/#passing-an-authentication-token
# It is mutually exclusive with `auth_token_file` and other authentication mechanisms.
[ auth_token: <secret> ]

# Optional authentication information for token-based authentication
# https://docs.mesosphere.com/1.11/security/ent/iam-api/#passing-an-authentication-token
# It is mutually exclusive with `auth_token` and other authentication mechanisms.
[ auth_token_file: <filename> ]

# HTTP client settings, including authentication methods (such as basic auth and
# authorization), proxy configurations, TLS options, custom HTTP headers, etc.
[ <http_config> ]
```

LANGUAGE: APIDOC
CODE:
```
__meta_marathon_app: the name of the app (with slashes replaced by dashes)
__meta_marathon_image: the name of the Docker image used (if available)
__meta_marathon_task: the ID of the Mesos task
__meta_marathon_app_label_<labelname>: any Marathon labels attached to the app, with any unsupported characters converted to an underscore
__meta_marathon_port_definition_label_<labelname>: the port definition labels, with any unsupported characters converted to an underscore
__meta_marathon_port_mapping_label_<labelname>: the port mapping labels, with any unsupported characters converted to an underscore
__meta_marathon_port_index: the port index number (e.g. `1` for `PORT1`)
```

----------------------------------------

TITLE: PromQL String Literal Examples
DESCRIPTION: Demonstrates different ways to define string literals in PromQL using double quotes, single quotes, and backticks, highlighting the varying escaping rules for each type. Backticks do not parse escape characters, unlike single or double quotes.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/querying/basics.md#_snippet_0

LANGUAGE: PromQL
CODE:
```
"this is a string"
'these are unescaped: \n \\ \t'
`these are not unescaped: \n ' " \t`
```

----------------------------------------

TITLE: PromQL Function: day_of_week() - Extract Day of Week
DESCRIPTION: The `day_of_week()` function interprets float samples in `v` as Unix timestamps (seconds since January 1, 1970 UTC) and returns the day of the week (in UTC) for each timestamp. Returned values range from 0 (Sunday) to 6 (Saturday). Histogram samples are silently ignored.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/querying/functions.md#_snippet_9

LANGUAGE: APIDOC
CODE:
```
day_of_week(v=vector(time()) instant-vector)
```

----------------------------------------

TITLE: Sort Instant Vector Elements in Descending Order in PromQL
DESCRIPTION: Similar to `sort`, `sort_desc()` sorts vector elements by their float sample values, but in descending order. Histogram samples are silently ignored. This function only affects the results of instant queries.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/querying/functions.md#_snippet_51

LANGUAGE: APIDOC
CODE:
```
sort_desc(v instant-vector)
  v: The instant vector whose elements will be sorted in descending order.
```

----------------------------------------

TITLE: Prometheus Console Template Variables and Features
DESCRIPTION: Explains the unique variables and functionalities available within Prometheus console templates, including URL parameters, path information, and access to shared template libraries.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/configuration/template_reference.md#_snippet_6

LANGUAGE: APIDOC
CODE:
```
Console Template Variables and Features:
  Location: Exposed on `/consoles/`, sourced from `-web.console.templates` flag.
  Rendering: Rendered with `html/template` (Go), provides auto-escaping. Use `safe*` functions to bypass.
  .Params / $params: Map of URL parameters.
  .RawParams / $rawParams: Map of list values for URL parameters with the same name.
  .Path / $path: The URL path, excluding `/consoles/` prefix.
  .ExternalLabels / $externalLabels: Globally configured external labels.
  Shared Libraries: Access to templates defined in `{{define "templateName"}}...{{end}}` found in `*.lib` files from `-web.console.libraries` flag. Reserved names: `prom`, `_prom`, and `__`.
```

----------------------------------------

TITLE: Promtool Query Analyze Command
DESCRIPTION: The `promtool query analyze` command helps analyze the usage patterns of specific metrics by running queries against a Prometheus server.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/command-line/promtool.md#_snippet_16

LANGUAGE: APIDOC
CODE:
```
Command: promtool query analyze
  Description: Run queries against your Prometheus to analyze the usage pattern of certain metrics.
  Flags:
    --server <string>: Prometheus server to query.
    --type <string>: Type of metric: histogram.
    --duration <string> (Default: 1h): Time frame to analyze.
    --time <string>: Query time (RFC3339 or Unix timestamp), defaults to now.
    --match <string>...: Series selector. Can be specified multiple times.
```

----------------------------------------

TITLE: Prometheus HTTP Response Size Metrics for /query
DESCRIPTION: Displays Prometheus HTTP response size metrics (histogram buckets, sum, and count) for the /query endpoint, showing the distribution of response sizes.
SOURCE: https://github.com/prometheus/prometheus/blob/main/model/textparse/testdata/alltypes.237mfs.nometa.prom.txt#_snippet_61

LANGUAGE: Prometheus Metrics
CODE:
```
prometheus_http_response_size_bytes_bucket{handler="/query",le="100"} 0
prometheus_http_response_size_bytes_bucket{handler="/query",le="1000"} 0
prometheus_http_response_size_bytes_bucket{handler="/query",le="10000"} 1774
prometheus_http_response_size_bytes_bucket{handler="/query",le="100000"} 1774
prometheus_http_response_size_bytes_bucket{handler="/query",le="1e+06"} 1774
prometheus_http_response_size_bytes_bucket{handler="/query",le="1e+07"} 1774
prometheus_http_response_size_bytes_bucket{handler="/query",le="1e+08"} 1774
prometheus_http_response_size_bytes_bucket{handler="/query",le="1e+09"} 1774
prometheus_http_response_size_bytes_bucket{handler="/query",le="+Inf"} 1774
prometheus_http_response_size_bytes_sum{handler="/query"} 3.108048e+06
prometheus_http_response_size_bytes_count{handler="/query"} 1774
```

----------------------------------------

TITLE: Prometheus Triton Service Discovery Configuration
DESCRIPTION: Configures Prometheus to discover scrape targets from Triton Container Monitor discovery endpoints. It supports two roles: 'container' for virtual machines (SmartOS zones, lx/KVM/bhyve branded zones) and 'cn' for compute nodes (servers/global zones). Each role provides distinct meta labels for relabeling. The configuration includes parameters for account, role, DNS suffix, endpoint, groups, port, refresh interval, version, and TLS settings.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/configuration/configuration.md#_snippet_118

LANGUAGE: APIDOC
CODE:
```
container role meta labels:
__meta_triton_groups: the list of groups belonging to the target joined by a comma separator
__meta_triton_machine_alias: the alias of the target container
__meta_triton_machine_brand: the brand of the target container
__meta_triton_machine_id: the UUID of the target container
__meta_triton_machine_image: the target container's image type
__meta_triton_server_id: the server UUID the target container is running on
```

LANGUAGE: APIDOC
CODE:
```
cn role meta labels:
__meta_triton_machine_alias: the hostname of the target (requires triton-cmon 1.7.0 or newer)
__meta_triton_machine_id: the UUID of the target
```

LANGUAGE: yaml
CODE:
```
# The information to access the Triton discovery API.

# The account to use for discovering new targets.
account: <string>

# The type of targets to discover, can be set to:
# * "container" to discover virtual machines (SmartOS zones, lx/KVM/bhyve branded zones) running on Triton
# * "cn" to discover compute nodes (servers/global zones) making up the Triton infrastructure
[ role : <string> | default = "container" ]

# The DNS suffix which should be applied to target.
dns_suffix: <string>

# The Triton discovery endpoint (e.g. 'cmon.us-east-3b.triton.zone'). This is
# often the same value as dns_suffix.
endpoint: <string>

# A list of groups for which targets are retrieved, only supported when `role` == `container`.
# If omitted all containers owned by the requesting account are scraped.
groups:
  [ - <string> ... ]

# The port to use for discovery and metric scraping.
[ port: <int> | default = 9163 ]

# The interval which should be used for refreshing targets.
[ refresh_interval: <duration> | default = 60s ]

# The Triton discovery API version.
[ version: <int> | default = 1 ]

# TLS configuration.
tls_config:
  [ <tls_config> ]
```

----------------------------------------

TITLE: Prometheus HTTP Request Duration Metrics for /api/v1/status/config
DESCRIPTION: Metrics showing the distribution, total sum, and count of HTTP request durations for the `/api/v1/status/config` endpoint. These metrics are crucial for monitoring the performance and latency of configuration status requests.
SOURCE: https://github.com/prometheus/prometheus/blob/main/model/textparse/testdata/alltypes.237mfs.nometa.prom.txt#_snippet_21

LANGUAGE: Prometheus Metrics
CODE:
```
prometheus_http_request_duration_seconds_bucket{handler="/api/v1/status/config",le="8"} 84723
prometheus_http_request_duration_seconds_bucket{handler="/api/v1/status/config",le="20"} 84723
prometheus_http_request_duration_seconds_bucket{handler="/api/v1/status/config",le="60"} 84723
prometheus_http_request_duration_seconds_bucket{handler="/api/v1/status/config",le="120"} 84723
prometheus_http_request_duration_seconds_bucket{handler="/api/v1/status/config",le="+Inf"} 84723
prometheus_http_request_duration_seconds_sum{handler="/api/v1/status/config"} 228.93575751199964
prometheus_http_request_duration_seconds_count{handler="/api/v1/status/config"} 84723
```

----------------------------------------

TITLE: Initialize Prometheus Client Cache with Metric List
DESCRIPTION: The Prometheus client's embedded cache can be pre-populated with an initial list of metric names. This is beneficial when metric names are already available elsewhere in the application, allowing them to be shared with the client for improved autocompletion or performance.
SOURCE: https://github.com/prometheus/prometheus/blob/main/web/ui/module/codemirror-promql/README.md#_snippet_15

LANGUAGE: typescript
CODE:
```
const promQL = new PromQLExtension().setComplete({
    remote: {
        cache: {
            initialMetricList: [
                'ALERTS',
                'ALERTS_FOR_STATE',
                'alertmanager_alerts',
                'alertmanager_alerts_invalid_total',
                'alertmanager_alerts_received_total'
            ]
        }
    }
})
```

----------------------------------------

TITLE: Build Prometheus with Make (Embedded Web Assets)
DESCRIPTION: Shows how to build Prometheus using the `make build` command. This method compiles and embeds the web assets directly into the binary, allowing Prometheus to be run from any directory without needing to be in the repository root.
SOURCE: https://github.com/prometheus/prometheus/blob/main/README.md#_snippet_3

LANGUAGE: Bash
CODE:
```
make build
./prometheus --config.file=your_config.yml
```

----------------------------------------

TITLE: Serve Old Prometheus 2.x Web UI
DESCRIPTION: This feature flag allows users to fall back to the Prometheus 2.x web UI instead of the new Prometheus 3.0 UI. It is useful for users who prefer the older interface due to the new UI's ongoing development and feature completeness.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/feature_flags.md#_snippet_8

LANGUAGE: Bash
CODE:
```
--enable-feature=old-ui
```

----------------------------------------

TITLE: PromQL Test Script Eval Command Syntax (Instant & Range)
DESCRIPTION: Illustrates the syntax for the 'eval' command, used to run a query against the loaded data and assert the expected result. It supports both instant and range queries, allowing specification of time, range, step, expected annotations ('expect' lines), and expected output series and points.
SOURCE: https://github.com/prometheus/prometheus/blob/main/promql/promqltest/README.md#_snippet_3

LANGUAGE: PromQL Test Script
CODE:
```
# Instant query
eval instant at <time> <query>
    <expect>
    ...
    <expect>
    <series> <points>
    ...
    <series> <points>
    
# Range query
eval range from <start> to <end> step <step> <query>
    <expect>
    ...
    <expect>
    <series> <points>
    ...
    <series> <points>
```

----------------------------------------

TITLE: Prometheus HTTP Request Total Metrics for API Endpoints
DESCRIPTION: This snippet displays a collection of `prometheus_http_requests_total` metrics, which track the total number of HTTP requests made to various handlers within a Prometheus server, categorized by HTTP status code. It serves as an implicit documentation of the exposed API endpoints and their observed request counts and response statuses.
SOURCE: https://github.com/prometheus/prometheus/blob/main/model/textparse/testdata/alltypes.237mfs.nometa.prom.txt#_snippet_40

LANGUAGE: APIDOC
CODE:
```
prometheus_http_requests_total{code="200",handler="/api/v1/admin/tsdb/clean_tombstones"} 0
```

LANGUAGE: APIDOC
CODE:
```
prometheus_http_requests_total{code="200",handler="/api/v1/admin/tsdb/delete_series"} 0
```

LANGUAGE: APIDOC
CODE:
```
prometheus_http_requests_total{code="200",handler="/api/v1/admin/tsdb/snapshot"} 0
```

LANGUAGE: APIDOC
CODE:
```
prometheus_http_requests_total{code="200",handler="/api/v1/alertmanagers"} 8
```

LANGUAGE: APIDOC
CODE:
```
prometheus_http_requests_total{code="200",handler="/api/v1/alerts"} 14635
```

LANGUAGE: APIDOC
CODE:
```
prometheus_http_requests_total{code="200",handler="/api/v1/format_query"} 3
```

LANGUAGE: APIDOC
CODE:
```
prometheus_http_requests_total{code="200",handler="/api/v1/label/:name/values"} 14679
```

LANGUAGE: APIDOC
CODE:
```
prometheus_http_requests_total{code="200",handler="/api/v1/labels"} 4915
```

LANGUAGE: APIDOC
CODE:
```
prometheus_http_requests_total{code="200",handler="/api/v1/metadata"} 2093
```

LANGUAGE: APIDOC
CODE:
```
prometheus_http_requests_total{code="200",handler="/api/v1/notifications"} 12
```

LANGUAGE: APIDOC
CODE:
```
prometheus_http_requests_total{code="200",handler="/api/v1/notifications/live"} 4529
```

LANGUAGE: APIDOC
CODE:
```
prometheus_http_requests_total{code="200",handler="/api/v1/otlp/v1/metrics"} 0
```

LANGUAGE: APIDOC
CODE:
```
prometheus_http_requests_total{code="200",handler="/api/v1/parse_query"} 247
```

LANGUAGE: APIDOC
CODE:
```
prometheus_http_requests_total{code="200",handler="/api/v1/query"} 326411
```

LANGUAGE: APIDOC
CODE:
```
prometheus_http_requests_total{code="200",handler="/api/v1/query_exemplars"} 841
```

LANGUAGE: APIDOC
CODE:
```
prometheus_http_requests_total{code="200",handler="/api/v1/query_range"} 1.183734e+06
```

LANGUAGE: APIDOC
CODE:
```
prometheus_http_requests_total{code="200",handler="/api/v1/read"} 16
```

LANGUAGE: APIDOC
CODE:
```
prometheus_http_requests_total{code="200",handler="/api/v1/rules"} 88658
```

LANGUAGE: APIDOC
CODE:
```
prometheus_http_requests_total{code="200",handler="/api/v1/scrape_pools"} 142
```

LANGUAGE: APIDOC
CODE:
```
prometheus_http_requests_total{code="200",handler="/api/v1/series"} 1235
```

LANGUAGE: APIDOC
CODE:
```
prometheus_http_requests_total{code="200",handler="/api/v1/status/buildinfo"} 4413
```

LANGUAGE: APIDOC
CODE:
```
prometheus_http_requests_total{code="200",handler="/api/v1/status/config"} 84722
```

LANGUAGE: APIDOC
CODE:
```
prometheus_http_requests_total{code="200",handler="/api/v1/status/flags"} 32
```

LANGUAGE: APIDOC
CODE:
```
prometheus_http_requests_total{code="200",handler="/api/v1/status/runtimeinfo"} 863
```

LANGUAGE: APIDOC
CODE:
```
prometheus_http_requests_total{code="200",handler="/api/v1/status/tsdb"} 94
```

LANGUAGE: APIDOC
CODE:
```
prometheus_http_requests_total{code="200",handler="/api/v1/status/walreplay"} 49
```

LANGUAGE: APIDOC
CODE:
```
prometheus_http_requests_total{code="200",handler="/api/v1/targets"} 191
```

LANGUAGE: APIDOC
CODE:
```
prometheus_http_requests_total{code="200",handler="/api/v1/targets/metadata"} 16
```

LANGUAGE: APIDOC
CODE:
```
prometheus_http_requests_total{code="200",handler="/api/v1/write"} 0
```

LANGUAGE: APIDOC
CODE:
```
prometheus_http_requests_total{code="200",handler="/assets/*filepath"} 2213
```

LANGUAGE: APIDOC
CODE:
```
prometheus_http_requests_total{code="200",handler="/classic/static/*filepath"} 0
```

LANGUAGE: APIDOC
CODE:
```
prometheus_http_requests_total{code="200",handler="/config"} 13
```

LANGUAGE: APIDOC
CODE:
```
prometheus_http_requests_total{code="200",handler="/consoles/*filepath"} 17
```

LANGUAGE: APIDOC
CODE:
```
prometheus_http_requests_total{code="200",handler="/debug/*subpath"} 3
```

LANGUAGE: APIDOC
CODE:
```
prometheus_http_requests_total{code="200",handler="/favicon.ico"} 0
```

LANGUAGE: APIDOC
CODE:
```
prometheus_http_requests_total{code="200",handler="/favicon.svg"} 769
```

LANGUAGE: APIDOC
CODE:
```
prometheus_http_requests_total{code="200",handler="/federate"} 4
```

LANGUAGE: APIDOC
CODE:
```
prometheus_http_requests_total{code="200",handler="/flags"} 9
```

LANGUAGE: APIDOC
CODE:
```
prometheus_http_requests_total{code="200",handler="/graph"} 0
```

LANGUAGE: APIDOC
CODE:
```
prometheus_http_requests_total{code="200",handler="/manifest.json"} 0
```

LANGUAGE: APIDOC
CODE:
```
prometheus_http_requests_total{code="200",handler="/metrics"} 4.059092e+06
```

LANGUAGE: APIDOC
CODE:
```
prometheus_http_requests_total{code="200",handler="/query"} 1774
```

LANGUAGE: APIDOC
CODE:
```
prometheus_http_requests_total{code="200",handler="/rules"} 8673
```

LANGUAGE: APIDOC
CODE:
```
prometheus_http_requests_total{code="200",handler="/service-discovery"} 20
```

LANGUAGE: APIDOC
CODE:
```
prometheus_http_requests_total{code="200",handler="/status"} 46
```

LANGUAGE: APIDOC
CODE:
```
prometheus_http_requests_total{code="200",handler="/targets"} 39
```

LANGUAGE: APIDOC
CODE:
```
prometheus_http_requests_total{code="200",handler="/tsdb-status"} 49
```

LANGUAGE: APIDOC
CODE:
```
prometheus_http_requests_total{code="200",handler="/version"} 0
```

LANGUAGE: APIDOC
CODE:
```
prometheus_http_requests_total{code="204",handler="/api/v1/*path"} 27
```

LANGUAGE: APIDOC
CODE:
```
prometheus_http_requests_total{code="204",handler="/api/v1/notifications/live"} 5
```

LANGUAGE: APIDOC
CODE:
```
prometheus_http_requests_total{code="301",handler="/debug/*subpath"} 1
```

LANGUAGE: APIDOC
CODE:
```
prometheus_http_requests_total{code="302",handler="/"} 688
```

LANGUAGE: APIDOC
CODE:
```
prometheus_http_requests_total{code="302",handler="/graph"} 751
```

LANGUAGE: APIDOC
CODE:
```
prometheus_http_requests_total{code="400",handler="/api/v1/format_query"} 1
```

LANGUAGE: APIDOC
CODE:
```
prometheus_http_requests_total{code="400",handler="/api/v1/label/:name/values"} 3292
```

LANGUAGE: APIDOC
CODE:
```
prometheus_http_requests_total{code="400",handler="/api/v1/labels"} 6
```

LANGUAGE: APIDOC
CODE:
```
prometheus_http_requests_total{code="400",handler="/api/v1/parse_query"} 18
```

LANGUAGE: APIDOC
CODE:
```
prometheus_http_requests_total{code="400",handler="/api/v1/query"} 155
```

LANGUAGE: APIDOC
CODE:
```
prometheus_http_requests_total{code="400",handler="/api/v1/query_range"} 263
```

LANGUAGE: APIDOC
CODE:
```
prometheus_http_requests_total{code="400",handler="/api/v1/rules"} 4
```

LANGUAGE: APIDOC
CODE:
```
prometheus_http_requests_total{code="400",handler="/api/v1/series"} 11
```

LANGUAGE: APIDOC
CODE:
```
prometheus_http_requests_total{code="400",handler="/api/v1/targets/metadata"} 2
```

LANGUAGE: APIDOC
CODE:
```
prometheus_http_requests_total{code="404",handler="/assets/*filepath"} 12
```

LANGUAGE: APIDOC
CODE:
```
prometheus_http_requests_total{code="404",handler="/classic/static/*filepath"} 103
```

LANGUAGE: APIDOC
CODE:
```
prometheus_http_requests_total{code="404",handler="/consoles/*filepath"} 17
```

LANGUAGE: APIDOC
CODE:
```
prometheus_http_requests_total{code="404",handler="/favicon.ico"} 177
```

LANGUAGE: APIDOC
CODE:
```
prometheus_http_requests_total{code="416",handler="/favicon.svg"} 1
```

----------------------------------------

TITLE: Prometheus Docker Swarm Service Discovery Configuration
DESCRIPTION: This section introduces the Docker Swarm service discovery configuration for Prometheus, allowing target retrieval from Docker Swarm engine. It notes that one of several roles can be configured for target discovery, which will be detailed further.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/configuration/configuration.md#_snippet_75

LANGUAGE: APIDOC
CODE:
```
Roles:
  One of the following roles can be configured to discover targets.
```

----------------------------------------

TITLE: Prometheus API: Query Flag Values
DESCRIPTION: Example demonstrating how to retrieve the command-line flag values used to start the Prometheus server. The response includes various configuration parameters and their string values.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/querying/api.md#_snippet_40

LANGUAGE: bash
CODE:
```
curl http://localhost:9090/api/v1/status/flags
```

LANGUAGE: json
CODE:
```
{
  "status": "success",
  "data": {
    "alertmanager.notification-queue-capacity": "10000",
    "alertmanager.timeout": "10s",
    "log.level": "info",
    "query.lookback-delta": "5m",
    "query.max-concurrency": "20"
  }
}
```

----------------------------------------

TITLE: Extract Minute of Hour with minute() in PromQL
DESCRIPTION: `minute()` interprets float samples as UTC timestamps and returns the minute of the hour (0-59) for each. Histogram samples are silently ignored. It defaults to the current time if no vector is provided.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/querying/functions.md#_snippet_42

LANGUAGE: APIDOC
CODE:
```
minute(v=vector(time()) instant-vector)
  Description: Interprets float samples in 'v' as timestamps (seconds since Jan 1, 1970 UTC).
  Returns: The minute of the hour (in UTC) for each timestamp (0 to 59).
  Ignored: Histogram samples in the input vector.
```

----------------------------------------

TITLE: Prometheus Expected Alert Structure
DESCRIPTION: Specifies the expected labels and annotations for a firing alert within a Prometheus unit test. These fields represent the expanded labels and annotations that an alert is expected to have, matching what is visible in the `/alerts` endpoint.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/configuration/unit_testing_rules.md#_snippet_5

LANGUAGE: APIDOC
CODE:
```
# These are the expanded labels and annotations of the expected alert.
# Note: labels also include the labels of the sample associated with the
# alert (same as what you see in `/alerts`, without series `__name__` and `alertname`)
exp_labels:
  [ <labelname>: <string> ]
exp_annotations:
  [ <labelname>: <string> ]
```

----------------------------------------

TITLE: PromQL Function: clamp_max() - Clamp Values to an Upper Limit
DESCRIPTION: The `clamp_max()` function restricts the values of all float samples in the input vector `v` to have an upper limit of `max`. Histogram samples in the input vector are ignored silently.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/querying/functions.md#_snippet_6

LANGUAGE: APIDOC
CODE:
```
clamp_max(v instant-vector, max scalar)
```

----------------------------------------

TITLE: Configure Prometheus Consul Service Discovery
DESCRIPTION: List of Consul service discovery configurations for Prometheus.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/configuration/configuration.md#_snippet_25

LANGUAGE: APIDOC
CODE:
```
consul_sd_configs:
  [ - <consul_sd_config> ... ]
```

----------------------------------------

TITLE: OpenStack Instance Role Discovery and Meta Labels
DESCRIPTION: Describes the `instance` role for Prometheus OpenStack discovery, which targets one network interface of a Nova instance. It lists the available meta labels for relabeling, including IP addresses, flavor, ID, image, name, status, project ID, and user ID.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/configuration/configuration.md#_snippet_85

LANGUAGE: APIDOC
CODE:
```
Role: instance
  Description: Discovers one target per network interface of Nova instance.
  Target Address Default: Private IP address of the network interface.
  Meta Labels for Relabeling:
    __meta_openstack_address_pool: The pool of the private IP.
    __meta_openstack_instance_flavor: The flavor name of the OpenStack instance, or the flavor ID if the flavor name isn't available.
    __meta_openstack_instance_id: The OpenStack instance ID.
    __meta_openstack_instance_image: The ID of the image the OpenStack instance is using.
    __meta_openstack_instance_name: The OpenStack instance name.
    __meta_openstack_instance_status: The status of the OpenStack instance.
    __meta_openstack_private_ip: The private IP of the OpenStack instance.
    __meta_openstack_project_id: The project (tenant) owning this instance.
    __meta_openstack_public_ip: The public IP of the OpenStack instance.
    __meta_openstack_tag_<key>: Each metadata item of the instance, with any unsupported characters converted to an underscore.
    __meta_openstack_user_id: The user account owning the tenant.
```

----------------------------------------

TITLE: Prometheus TSDB Compaction Duration Seconds Histogram
DESCRIPTION: Histogram metrics for the duration of TSDB compaction processes. This helps monitor the performance and efficiency of background data compaction, which is critical for long-term storage and query performance.
SOURCE: https://github.com/prometheus/prometheus/blob/main/model/textparse/testdata/alltypes.237mfs.nometa.prom.txt#_snippet_87

LANGUAGE: APIDOC
CODE:
```
prometheus_tsdb_compaction_duration_seconds_bucket{le="1"} 61
prometheus_tsdb_compaction_duration_seconds_bucket{le="2"} 155
prometheus_tsdb_compaction_duration_seconds_bucket{le="4"} 180
prometheus_tsdb_compaction_duration_seconds_bucket{le="8"} 183
prometheus_tsdb_compaction_duration_seconds_bucket{le="16"} 183
prometheus_tsdb_compaction_duration_seconds_bucket{le="32"} 183
prometheus_tsdb_compaction_duration_seconds_bucket{le="64"} 183
prometheus_tsdb_compaction_duration_seconds_bucket{le="128"} 183
prometheus_tsdb_compaction_duration_seconds_bucket{le="256"} 183
prometheus_tsdb_compaction_duration_seconds_bucket{le="512"} 183
```

----------------------------------------

TITLE: Prometheus HTTP Response Size Metrics for /api/v1/notifications
DESCRIPTION: Shows the `prometheus_http_response_size_bytes` histogram buckets, sum, and count for the `/api/v1/notifications` API handler. These metrics provide insight into the size distribution and volume of responses from the notifications endpoint.
SOURCE: https://github.com/prometheus/prometheus/blob/main/model/textparse/testdata/alltypes.237mfs.nometa.prom.txt#_snippet_50

LANGUAGE: Prometheus Metrics
CODE:
```
prometheus_http_response_size_bytes_bucket{handler="/api/v1/notifications",le="100"} 12
prometheus_http_response_size_bytes_bucket{handler="/api/v1/notifications",le="1000"} 12
prometheus_http_response_size_bytes_bucket{handler="/api/v1/notifications",le="10000"} 12
prometheus_http_response_size_bytes_bucket{handler="/api/v1/notifications",le="100000"} 12
prometheus_http_response_size_bytes_bucket{handler="/api/v1/notifications",le="1e+06"} 12
prometheus_http_response_size_bytes_bucket{handler="/api/v1/notifications",le="1e+07"} 12
prometheus_http_response_size_bytes_bucket{handler="/api/v1/notifications",le="1e+08"} 12
prometheus_http_response_size_bytes_bucket{handler="/api/v1/notifications",le="1e+09"} 12
prometheus_http_response_size_bytes_bucket{handler="/api/v1/notifications",le="+Inf"} 12
prometheus_http_response_size_bytes_sum{handler="/api/v1/notifications"} 360
prometheus_http_response_size_bytes_count{handler="/api/v1/notifications"} 12
```

----------------------------------------

TITLE: Prometheus HTTP Request Duration Metrics for /api/v1/status/walreplay
DESCRIPTION: Metrics showing the distribution, total sum, and count of HTTP request durations for the `/api/v1/status/walreplay` endpoint. These metrics help monitor the performance of requests related to WAL replay status.
SOURCE: https://github.com/prometheus/prometheus/blob/main/model/textparse/testdata/alltypes.237mfs.nometa.prom.txt#_snippet_25

LANGUAGE: Prometheus Metrics
CODE:
```
prometheus_http_request_duration_seconds_bucket{handler="/api/v1/status/walreplay",le="0.1"} 49
prometheus_http_request_duration_seconds_bucket{handler="/api/v1/status/walreplay",le="0.2"} 49
prometheus_http_request_duration_seconds_bucket{handler="/api/v1/status/walreplay",le="0.4"} 49
prometheus_http_request_duration_seconds_bucket{handler="/api/v1/status/walreplay",le="1"} 49
prometheus_http_request_duration_seconds_bucket{handler="/api/v1/status/walreplay",le="3"} 49
prometheus_http_request_duration_seconds_bucket{handler="/api/v1/status/walreplay",le="8"} 49
prometheus_http_request_duration_seconds_bucket{handler="/api/v1/status/walreplay",le="20"} 49
prometheus_http_request_duration_seconds_bucket{handler="/api/v1/status/walreplay",le="60"} 49
prometheus_http_request_duration_seconds_bucket{handler="/api/v1/status/walreplay",le="120"} 49
prometheus_http_request_duration_seconds_bucket{handler="/api/v1/status/walreplay",le="+Inf"} 49
```

----------------------------------------

TITLE: Prometheus Fanout Storage Implementation
DESCRIPTION: Details the `storage.Storage` implementation for fanout storage, which abstracts local and remote storage. It merges query results from local and remote sources for reads and duplicates writes to all destinations. It differentiates between primary (local) and secondary (remote) storages.
SOURCE: https://github.com/prometheus/prometheus/blob/main/documentation/internal_architecture.md#_snippet_6

LANGUAGE: Go
CODE:
```
Interface: storage.Storage
  Location: github.com/prometheus/prometheus/storage/interface.go#L31-L44
  Description: Interface for Prometheus storage systems.

Implementation: Fanout Storage
  Location: github.com/prometheus/prometheus/storage/fanout.go#L27-L32
  Capabilities:
    - Read: Merges query results from local and remote sources.
    - Write: Duplicates samples to all local and remote destinations.
  Internal: Differentiates primary (local) and secondary (remote) storages.
```

----------------------------------------

TITLE: APIDOC: `hour()` Function Definition
DESCRIPTION: `hour(v=vector(time()) instant-vector)` interprets float samples in `v` as timestamps and returns the hour of the day (in UTC) for each. Returned values are from 0 to 23. Histogram samples in the input vector are ignored silently.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/querying/functions.md#_snippet_28

LANGUAGE: APIDOC
CODE:
```
hour(v=vector(time()) instant-vector)
```

----------------------------------------

TITLE: Override Prometheus API Prefix for Client Queries
DESCRIPTION: The Prometheus client defaults to using `/api/v1` as its API prefix when constructing queries. This setting allows overriding that default to a custom path, which is useful if Prometheus is served under a different base URL.
SOURCE: https://github.com/prometheus/prometheus/blob/main/web/ui/module/codemirror-promql/README.md#_snippet_13

LANGUAGE: typescript
CODE:
```
const promql = new PromQLExtension().setComplete({remote: {apiPrefix: '/my/api/prefix'}})
```

----------------------------------------

TITLE: Configure Prometheus Lookback Interval for Metrics
DESCRIPTION: This setting allows overriding the default time interval used by the Prometheus client when querying metadata like metrics and labels. The `lookbackInterval` value must be specified in milliseconds, with a default of 12 hours.
SOURCE: https://github.com/prometheus/prometheus/blob/main/web/ui/module/codemirror-promql/README.md#_snippet_9

LANGUAGE: typescript
CODE:
```
const promQL = new PromQLExtension().setComplete({remote: {lookbackInterval: 12 * 60 * 60 * 1000}})
```

----------------------------------------

TITLE: Configure Alertmanager Drain Notification Queue on Shutdown
DESCRIPTION: Determines whether any outstanding Alertmanager notifications should be sent when shutting down. If set to false, any outstanding notifications will be dropped. This flag is for use with server mode only.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/command-line/prometheus.md#_snippet_17

LANGUAGE: APIDOC
CODE:
```
--alertmanager.drain-notification-queue-on-shutdown <boolean>
Default: true
Usage: server mode only
```

----------------------------------------

TITLE: Compress WAL Records with Snappy
DESCRIPTION: Added an option to compress Write-Ahead Log (WAL) records using Snappy, which can significantly reduce disk space usage for the WAL.
SOURCE: https://github.com/prometheus/prometheus/blob/main/tsdb/CHANGELOG.md#_snippet_3

LANGUAGE: Go
CODE:
```
FEATURE: Provide option to compress WAL records using Snappy.
```

----------------------------------------

TITLE: Prometheus TSDB Compaction Chunk Samples Histogram
DESCRIPTION: Histogram metrics for the number of samples within chunks processed during TSDB compactions. This helps understand the distribution of data density in compacted chunks and the efficiency of the compaction process.
SOURCE: https://github.com/prometheus/prometheus/blob/main/model/textparse/testdata/alltypes.237mfs.nometa.prom.txt#_snippet_85

LANGUAGE: APIDOC
CODE:
```
prometheus_tsdb_compaction_chunk_samples_bucket{le="4"} 1407
prometheus_tsdb_compaction_chunk_samples_bucket{le="6"} 1544
prometheus_tsdb_compaction_chunk_samples_bucket{le="9"} 1881
prometheus_tsdb_compaction_chunk_samples_bucket{le="13.5"} 2065
prometheus_tsdb_compaction_chunk_samples_bucket{le="20.25"} 2782
prometheus_tsdb_compaction_chunk_samples_bucket{le="30.375"} 4342
prometheus_tsdb_compaction_chunk_samples_bucket{le="45.5625"} 6180
prometheus_tsdb_compaction_chunk_samples_bucket{le="68.34375"} 11518
prometheus_tsdb_compaction_chunk_samples_bucket{le="102.515625"} 13890
prometheus_tsdb_compaction_chunk_samples_bucket{le="153.7734375"} 4.810155e+06
prometheus_tsdb_compaction_chunk_samples_bucket{le="230.66015625"} 4.86058e+06
prometheus_tsdb_compaction_chunk_samples_bucket{le="345.990234375"} 4.861956e+06
prometheus_tsdb_compaction_chunk_samples_bucket{le="+Inf"} 4.861956e+06
prometheus_tsdb_compaction_chunk_samples_sum 5.86000708e+08
prometheus_tsdb_compaction_chunk_samples_count 4.861956e+06
```

----------------------------------------

TITLE: PromQL: Quoted Metric and Label Name Parsing
DESCRIPTION: Demonstrates parsing of a PromQL query that uses both a quoted metric name and a quoted label name within a `VectorSelector`, `{"metric_name", "foo"="bar"}`. The parser correctly identifies both quoted elements.
SOURCE: https://github.com/prometheus/prometheus/blob/main/web/ui/module/lezer-promql/test/expression.txt#_snippet_48

LANGUAGE: PromQL
CODE:
```
{"metric_name", "foo"="bar"}
```

----------------------------------------

TITLE: PromQL Function: year()
DESCRIPTION: The `year()` function extracts the year in UTC for each of the given times within an instant vector. Similar to `sqrt()`, it silently ignores any histogram samples present in the input vector, focusing solely on float samples.
SOURCE: https://github.com/prometheus/prometheus/blob/main/docs/querying/functions.md#_snippet_58

LANGUAGE: APIDOC
CODE:
```
year(v=vector(time()) instant-vector)
  v: An instant vector, typically derived from time-based functions.
  Description: Returns the year for each of the given times in UTC.
  Behavior: Histogram samples in the input vector are ignored silently.
```