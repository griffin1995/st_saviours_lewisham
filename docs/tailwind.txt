TITLE: Applying Custom Container Query Variant in HTML
DESCRIPTION: This HTML snippet illustrates how to use a custom container query variant, `@8xl:flex-row`, defined in the Tailwind CSS theme. By applying `@container` to a parent `div`, its child elements can respond to the custom `8xl` breakpoint, changing their layout from `flex-col` to `flex-row` when the container reaches the specified size.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/docs/responsive-design.mdx#_snippet_19

LANGUAGE: html
CODE:
```
<div class="@container">
  <div class="flex flex-col @8xl:flex-row">
    <!-- ... -->
  </div>
</div>
```

----------------------------------------

TITLE: Defining Custom Utilities with @utility API in Tailwind CSS v4
DESCRIPTION: Tailwind CSS v4 replaces the @layer utilities and @layer components at-rules with the new @utility API for defining custom classes. This change aligns with native cascade layers and allows custom utilities to be sorted based on property count, enabling easier overriding by other Tailwind utilities.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/docs/upgrade-guide.mdx#_snippet_20

LANGUAGE: CSS
CODE:
```
@layer utilities {
  .tab-4 {
    tab-size: 4;
  }
}
@utility tab-4 {
  tab-size: 4;
}
```

LANGUAGE: CSS
CODE:
```
@layer components {
  .btn {
    border-radius: 0.5rem;
    padding: 0.5rem 1rem;
    background-color: ButtonFace;
  }
}
@utility btn {
  border-radius: 0.5rem;
  padding: 0.5rem 1rem;
  background-color: ButtonFace;
}
```

----------------------------------------

TITLE: Conditionally Styling Specific Children with Data Attributes and * Variant in JSX
DESCRIPTION: This JSX example illustrates how to combine the `*` variant with data attribute selectors (`data-[slot]`) to conditionally apply styles to specific direct children. The `Field` component uses `data-[slot=description]:*:mt-4` to add top margin only to children with `data-slot="description"`, like the `Description` component. This enables advanced conditional styling from a parent component without complex arbitrary variants.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/blog/tailwindcss-v3-4/index.mdx#_snippet_5

LANGUAGE: jsx
CODE:
```
function Field({ children }) {
  return (
    <div className="data-[slot=description]:*:mt-4 ...">
      {children}
    </div>
  )
}

function Description({ children }) {
  return (
    <p data-slot="description" ...>{children}</p>
  )
}

function Example() {
  return (
    <Field>
      <Label>First name</Label>
      <Input />
      <Description>Please tell me you know your own name.</Description>
    </Field>
  )
}
```

----------------------------------------

TITLE: Importing Tailwind CSS in Main CSS File
DESCRIPTION: This CSS snippet imports the Tailwind CSS framework into your main stylesheet. It's a crucial step to make Tailwind's utilities available for use in your project after installation and configuration.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/blog/tailwindcss-v4-alpha/index.mdx#_snippet_13

LANGUAGE: CSS
CODE:
```
@import "tailwindcss";
```

----------------------------------------

TITLE: Tailwind CSS Card Component Example (JSX)
DESCRIPTION: A React/JSX example demonstrating a UI card component styled entirely with Tailwind CSS utility classes. It features a responsive layout, custom SVG icon, and dynamic text content, showcasing the utility-first approach for styling directly in markup.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/docs/styling-with-utility-classes.mdx#_snippet_0

LANGUAGE: jsx
CODE:
```
<div className="mx-auto flex max-w-sm items-center gap-x-4 rounded-xl bg-white p-6 shadow-lg outline outline-black/5 dark:bg-slate-800 dark:shadow-none dark:-outline-offset-1 dark:outline-white/10">
  <svg className="size-12 shrink-0" viewBox="0 0 40 40">
    <defs>
      <linearGradient x1="50%" y1="0%" x2="50%" y2="100%" id="a">
        <stop stopColor="#2397B3" offset="0%"></stop>
        <stop stopColor="#13577E" offset="100%"></stop>
      </linearGradient>
      <linearGradient x1="50%" y1="0%" x2="50%" y2="100%" id="b">
        <stop stopColor="#73DFF2" offset="0%"></stop>
        <stop stopColor="#47B1EB" offset="100%"></stop>
      </linearGradient>
    </defs>
    <g fill="none" fillRule="evenodd">
      <path
        d="M28.872 22.096c.084.622.128 1.258.128 1.904 0 7.732-6.268 14-14 14-2.176 0-4.236-.496-6.073-1.382l-6.022 2.007c-1.564.521-3.051-.966-2.53-2.53l2.007-6.022A13.944 13.944 0 0 1 1 24c0-7.331 5.635-13.346 12.81-13.95A9.967 9.967 0 0 0 13 14c0 5.523 4.477 10 10 10a9.955 9.955 0 0 0 5.872-1.904z"
        fill="url(#a)"
        transform="translate(1 1)"
      ></path>
      <path
        d="M35.618 20.073l2.007 6.022c.521 1.564-.966 3.051-2.53 2.53l-6.022-2.007A13.944 13.944 0 0 1 23 28c-7.732 0-14-6.268-14-14S15.268 0 23 0s14 6.268 14 14c0 2.176-.496 4.236-1.382 6.073z"
        fill="url(#b)"
        transform="translate(1 1)"
      ></path>
      <path
        d="M18 17a2 2 0 1 0 0-4 2 2 0 0 0 0 4zM24 17a2 2 0 1 0 0-4 2 2 0 0 0 0 4zM30 17a2 2 0 1 0 0-4 2 2 0 0 0 0 4z"
        fill="#FFF"
      ></path>
    </g>
  </svg>
  <div>
    <div className="text-xl font-medium text-black dark:text-white">ChitChat</div>
    <p className="text-gray-500 dark:text-gray-400">You have a new message!</p>
  </div>
</div>
```

----------------------------------------

TITLE: Implementing Tabs with Headless UI in React
DESCRIPTION: This snippet demonstrates how to create a basic tab interface using the `Tab` component from `@headlessui/react`. It shows the declarative structure for `Tab.Group`, `Tab.List`, `Tab`, `Tab.Panels`, and `Tab.Panel` to manage tab navigation and content display, abstracting away accessibility concerns.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/blog/headless-ui-v1-4/index.mdx#_snippet_0

LANGUAGE: jsx
CODE:
```
import { Tab } from '@headlessui/react'

function MyTabs() {
  return (
    <Tab.Group>
      <Tab.List>
        <Tab>Tab 1</Tab>
        <Tab>Tab 2</Tab>
        <Tab>Tab 3</Tab>
      </Tab.List>
      <Tab.Panels>
        <Tab.Panel>Content 1</Tab.Panel>
        <Tab.Panel>Content 2</Tab.Panel>
        <Tab.Panel>Content 3</Tab.Panel>
      </Tab.Panels>
    </Tab.Group>
  )
}
```

----------------------------------------

TITLE: Update Tailwind CLI Commands for v4
DESCRIPTION: Adjust your build commands to use the new dedicated `@tailwindcss/cli` package for Tailwind CSS v4, replacing the old `tailwindcss` package.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/docs/upgrade-guide.mdx#_snippet_3

LANGUAGE: sh
CODE:
```
npx @tailwindcss/cli -i input.css -o output.css
```

----------------------------------------

TITLE: Installing Tailwind CSS v3.1 via npm
DESCRIPTION: This command installs the latest version of Tailwind CSS using npm, updating an existing project or setting up a new one with the most recent features and bug fixes.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/blog/tailwindcss-v3-1/index.mdx#_snippet_0

LANGUAGE: sh
CODE:
```
npm install tailwindcss@latest
```

----------------------------------------

TITLE: Integrating Theme Variables with Framer Motion in JSX
DESCRIPTION: This JSX snippet illustrates how native CSS variables, derived from the Tailwind theme, can be directly utilized within JavaScript UI libraries like Framer Motion. This avoids the need for resolveConfig(), streamlining the integration of design tokens into animation properties.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/blog/tailwindcss-v4-alpha/index.mdx#_snippet_10

LANGUAGE: jsx
CODE:
```
// [!code filename:JSX]
import { motion } from "framer-motion";

export const MyComponent = () => (
  <motion.div initial={{ y: "var(--spacing-8)" }} animate={{ y: 0 }} exit={{ y: "var(--spacing-8)" }}>
    {children}
  </motion.div>
);
```

----------------------------------------

TITLE: Tailwind CSS Card Component Example (HTML)
DESCRIPTION: A standard HTML example demonstrating a UI card component styled entirely with Tailwind CSS utility classes. It features an image, text content, and showcases the direct application of utility classes for layout and appearance.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/docs/styling-with-utility-classes.mdx#_snippet_1

LANGUAGE: html
CODE:
```
<!-- prettier-ignore -->
<div class="mx-auto flex max-w-sm items-center gap-x-4 rounded-xl bg-white p-6 shadow-lg outline outline-black/5 dark:bg-slate-800 dark:shadow-none dark:-outline-offset-1 dark:outline-white/10">
  <img class="size-12 shrink-0" src="/img/logo.svg" alt="ChitChat Logo" />
  <div>
    <div class="text-xl font-medium text-black dark:text-white">ChitChat</div>
    <p class="text-gray-500 dark:text-gray-400">You have a new message!</p>
  </div>
</div>
```

----------------------------------------

TITLE: Using CSS Variables in Arbitrary Values in Tailwind CSS v4
DESCRIPTION: Tailwind CSS v4 updates the syntax for using CSS variables as arbitrary values. Due to potential ambiguities with recent CSS changes, the new syntax requires parentheses () instead of square brackets [] for variable shorthand.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/docs/upgrade-guide.mdx#_snippet_22

LANGUAGE: HTML
CODE:
```
<div class="bg-[--brand-color]"></div>
<div class="bg-(--brand-color)"></div>
```

----------------------------------------

TITLE: Styling Radio Button Labels with Tailwind CSS and Pointer Variants (JSX)
DESCRIPTION: This JSX snippet demonstrates styling a radio button label using Tailwind CSS, including responsive adjustments for coarse pointer devices (e.g., touchscreens) via the `pointer-coarse:p-4` utility. It sets up a flexible layout, applies various background, text, ring, and focus styles, and visually hides the native radio input.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/blog/tailwindcss-v4-1/index.mdx#_snippet_16

LANGUAGE: JSX
CODE:
```
<label className="flex items-center justify-center rounded-md bg-white p-2 text-sm font-semibold text-gray-900 uppercase ring-1 ring-gray-300 not-data-focus:not-has-checked:ring-inset hover:bg-gray-50 has-checked:bg-indigo-600 has-checked:text-white has-checked:ring-0 has-checked:hover:bg-indigo-500 has-focus-visible:outline-2 has-focus-visible:outline-offset-2 has-focus-visible:outline-indigo-600 data-focus:ring-2 data-focus:ring-indigo-600 data-focus:ring-offset-2 data-focus:has-checked:ring-2 sm:flex-1 dark:bg-transparent dark:text-white dark:ring-white/20 dark:hover:bg-gray-950/50 pointer-coarse:p-4">
          <input type="radio" name="memory-option" value="128 GB" className="sr-only" />
          <span>128 GB</span>
        </label>
```

----------------------------------------

TITLE: Hiding Elements Visually with sr-only (HTML)
DESCRIPTION: This snippet demonstrates the use of the `sr-only` utility class in Tailwind CSS. Applying `sr-only` to an element, such as a `<span>` tag, visually hides it from sighted users while ensuring it remains accessible to screen readers. This is useful for providing descriptive text for icons or other non-textual elements without cluttering the visual interface.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/docs/display.mdx#_snippet_15

LANGUAGE: html
CODE:
```
<!-- [!code classes:sr-only] -->
<a href="#">
  <svg><!-- ... --></svg>
  <span class="sr-only">Settings</span>
</a>
```

----------------------------------------

TITLE: Applying Dynamic Data Attribute Variants - HTML
DESCRIPTION: This HTML snippet illustrates the ability to target custom boolean data attributes dynamically in Tailwind CSS v4.0. The `data-current:opacity-100` variant applies styles when the `data-current` attribute is present, removing the need for explicit variant configuration.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/blog/tailwindcss-v4/index.mdx#_snippet_14

LANGUAGE: HTML
CODE:
```
<div data-current class="opacity-75 data-current:opacity-100">
  <!-- ... -->
</div>
```

----------------------------------------

TITLE: Demonstrating Logical Properties with Tailwind CSS (JSX)
DESCRIPTION: This JSX example showcases how logical properties behave in both left-to-right (LTR) and right-to-left (RTL) contexts. It uses standard `left-0` and `right-0` for demonstration, setting up two columns to visually compare positioning based on text direction, illustrating the need for logical properties like `start-0` for adaptable layouts.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/docs/top-right-bottom-left.mdx#_snippet_4

LANGUAGE: jsx
CODE:
```
<div className="grid grid-cols-2 place-items-center gap-x-4">
      <div className="flex flex-col items-start gap-y-4">
        <p className="text-sm font-medium">Left-to-right</p>
        <div className="relative size-18 rounded-lg sm:size-32">
          <div className="absolute inset-0">
            <Stripes border className="h-full rounded-lg" />
          </div>
          <div className="absolute top-0 left-0 flex size-14 items-center justify-center rounded-lg bg-purple-500 p-4"></div>
        </div>
      </div>
      <div className="flex flex-col items-end gap-y-4">
        <p className="text-sm font-medium">Right-to-left</p>
        <div className="relative size-18 rounded-lg sm:size-32">
          <div className="absolute inset-0">
            <Stripes border className="h-full rounded-lg" />
          </div>
          <div className="absolute top-0 right-0 flex size-14 items-center justify-center rounded-lg bg-purple-500 p-4"></div>
        </div>
      </div>
    </div>
```

----------------------------------------

TITLE: Update PostCSS Configuration for Tailwind CSS v4
DESCRIPTION: Migrate your PostCSS configuration to use the new dedicated `@tailwindcss/postcss` package in v4. In v4, imports and vendor prefixing are handled automatically, allowing you to remove `postcss-import` and `autoprefixer`.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/docs/upgrade-guide.mdx#_snippet_1

LANGUAGE: js
CODE:
```
export default {
  plugins: {
    "@tailwindcss/postcss": {}
  }
};
```

----------------------------------------

TITLE: Managing Hover Styles on Mobile in Tailwind CSS v4
DESCRIPTION: In Tailwind CSS v4, the hover variant now applies only when the primary input device supports hover, which can affect touch devices. If tap-to-hover functionality is required, the hover variant can be overridden with a custom variant using the old implementation, though treating hover as an enhancement is generally recommended.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/docs/upgrade-guide.mdx#_snippet_23

LANGUAGE: CSS
CODE:
```
@media (hover: hover) {
  .hover\:underline:hover {
    text-decoration: underline;
  }
}
```

LANGUAGE: CSS
CODE:
```
@custom-variant hover (&:hover);
```

----------------------------------------

TITLE: Composing Tailwind CSS Variants in HTML
DESCRIPTION: This snippet illustrates the enhanced composability of Tailwind CSS v4 variants. It shows how `group-*` can be combined with `has-*` and `focus` to create complex, dynamic selectors like `group-has-[&:focus]:opacity-100`, demonstrating the framework's shift towards more flexible and powerful variant combinations.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/blog/tailwindcss-v4-alpha/index.mdx#_snippet_2

LANGUAGE: HTML
CODE:
```
<div class="group">
  <div class="group-has-[&:focus]:opacity-100">
  <div class="group-has-focus:opacity-100">
      <!-- ... -->
    </div>
  </div>
</div>
```

----------------------------------------

TITLE: Importing Tailwind CSS v4.0 in CSS
DESCRIPTION: This CSS line imports the entire Tailwind CSS framework into a project's stylesheet. In v4.0, this single @import rule replaces the previous @tailwind directives, streamlining the process of including Tailwind's base styles, components, and utilities.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/blog/tailwindcss-v4/index.mdx#_snippet_6

LANGUAGE: CSS
CODE:
```
@import "tailwindcss";
```

----------------------------------------

TITLE: Resetting Element Margins and Paddings in Preflight CSS
DESCRIPTION: This Preflight CSS rule removes all default margins and paddings from all elements, including pseudo-elements and specific form controls. This ensures a clean slate, preventing accidental reliance on browser-default spacing and promoting consistent spacing based on Tailwind's utility classes.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/docs/preflight.mdx#_snippet_1

LANGUAGE: CSS
CODE:
```
*,
::after,
::before,
::backdrop,
::file-selector-button {
  margin: 0;
  padding: 0;
}
```

----------------------------------------

TITLE: Applying Container-Based Responsive Queries in Tailwind CSS
DESCRIPTION: Demonstrates how to use Tailwind CSS's container query variants (`@container`, `@md`) to apply styles based on the width of a parent container, rather than the global viewport. This enables more localized responsive designs.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/docs/hover-focus-and-other-states.mdx#_snippet_37

LANGUAGE: HTML
CODE:
```
<div class="@container">
  <div class="flex flex-col @md:flex-row">
    <!-- ... -->
  </div>
</div>
```

----------------------------------------

TITLE: Avoiding Dynamic Class Names from Props in JSX with Tailwind
DESCRIPTION: This JSX code shows an incorrect method of constructing Tailwind class names using string interpolation with component props. Since Tailwind scans files as plain text, it cannot resolve `bg-${color}-600` into complete class names like `bg-blue-600`, resulting in missing styles.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/docs/detecting-classes-in-source-files.mdx#_snippet_3

LANGUAGE: JSX
CODE:
```
function Button({ color, children }) {
  return <button className={`bg-${color}-600 hover:bg-${color}-500 ...`}>{children}</button>;
}
```

----------------------------------------

TITLE: Installing Tailwind CSS Standalone CLI (macOS arm64)
DESCRIPTION: This snippet demonstrates how to download the standalone Tailwind CSS CLI executable for macOS arm64, grant it executable permissions, and rename it for convenient use. This process allows users to get started without Node.js or npm.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/blog/standalone-cli/index.mdx#_snippet_0

LANGUAGE: sh
CODE:
```
# Example for macOS arm64
curl -sLO https://github.com/tailwindlabs/tailwindcss/releases/latest/download/tailwindcss-macos-arm64
chmod +x tailwindcss-macos-arm64
mv tailwindcss-macos-arm64 tailwindcss
```

----------------------------------------

TITLE: HTML Example for Class-based Dark Mode Toggling
DESCRIPTION: This HTML snippet demonstrates how the `dark` class is applied to the `<html>` element to activate dark mode utilities. When the `dark` class is present, `dark:bg-black` will override `bg-white`, changing the background color. This setup requires JavaScript to dynamically add or remove the `dark` class.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/docs/dark-mode.mdx#_snippet_2

LANGUAGE: html
CODE:
```
<html class="dark">
  <body>
    <div class="bg-white dark:bg-black">
      <!-- ... -->
    </div>
  </body>
</html>
```

----------------------------------------

TITLE: Accessing Theme Variables in CSS - Generated CSS
DESCRIPTION: This snippet shows the generated CSS output from the `@theme` configuration, where all defined design tokens are automatically converted into CSS custom properties (variables) under the `:root` selector. This enables runtime access and manipulation of theme values directly in CSS or JavaScript.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/blog/tailwindcss-v4/index.mdx#_snippet_12

LANGUAGE: CSS
CODE:
```
:root {
  --font-display: "Satoshi", "sans-serif";

  --breakpoint-3xl: 1920px;

  --color-avocado-100: oklch(0.99 0 0);
  --color-avocado-200: oklch(0.98 0.04 113.22);
  --color-avocado-300: oklch(0.94 0.11 115.03);
  --color-avocado-400: oklch(0.92 0.19 114.08);
  --color-avocado-500: oklch(0.84 0.18 117.33);
  --color-avocado-600: oklch(0.53 0.12 118.34);

  --ease-fluid: cubic-bezier(0.3, 0, 0, 1);
  --ease-snappy: cubic-bezier(0.2, 0, 0, 1);

  /* ... */
}
```

----------------------------------------

TITLE: Balancing Headline Text with `text-balance` in HTML
DESCRIPTION: This snippet demonstrates the `text-balance` utility, which leverages `text-wrap: balance` CSS property to automatically optimize the wrapping of headline text. It helps prevent awkward line breaks and ensures a visually balanced appearance for headings, improving readability without manual adjustments.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/blog/tailwindcss-v3-4/index.mdx#_snippet_7

LANGUAGE: HTML
CODE:
```
<article>
  <h3 class="text-balance ...">Beloved Manhattan soup stand closes<h3>
  <p>New Yorkers are facing the winter chill...</p>
</article>
```

----------------------------------------

TITLE: Using Arbitrary Container Query Values in HTML
DESCRIPTION: This HTML snippet demonstrates the use of arbitrary container query values, such as `@min-[475px]`, for one-off responsive styling without modifying the theme. When the `@container` element's width is at least `475px`, the child element's flex direction will change from `flex-col` to `flex-row`, providing flexible, on-the-fly breakpoint control.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/docs/responsive-design.mdx#_snippet_20

LANGUAGE: html
CODE:
```
<div class="@container">
  <div class="flex flex-col @min-[475px]:flex-row">
    <!-- ... -->
  </div>
</div>
```

----------------------------------------

TITLE: Tailwind CSS Variant: has-[...]
DESCRIPTION: CSS equivalent for the Tailwind CSS `has-[...]` variant, applying styles to an element if it contains a specific selector.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/docs/hover-focus-and-other-states.mdx#_snippet_91

LANGUAGE: css
CODE:
```
&:has(...)
```

----------------------------------------

TITLE: Tailwind CSS Peer-Invalid for Input Validation
DESCRIPTION: Demonstrates how to implement client-side input validation styling using Tailwind CSS `peer` and `peer-invalid` variants. The `peer` class is applied to the input field, and a sibling element (a paragraph) uses `peer-invalid:visible` to show an error message when the input's state is invalid. This allows for dynamic UI updates without JavaScript.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/docs/hover-focus-and-other-states.mdx#_snippet_22

LANGUAGE: jsx
CODE:
```
<div className="mx-auto max-w-md border-x border-x-gray-200 px-6 pt-6 pb-5 dark:border-x-gray-800 dark:bg-gray-950/10">
  <form>
    <div>
      <label htmlFor="email-2" className="block text-sm font-medium text-gray-700 dark:text-gray-300">
        Email
      </label>
      <div className="mt-1">
        <input
          type="email"
          name="email"
          id="email-2"
          className="peer block w-full rounded-md border border-gray-300 px-3 py-2 placeholder-gray-400 shadow-sm invalid:border-pink-500 invalid:text-pink-600 focus:border-sky-500 focus:outline focus:outline-sky-500 focus:invalid:border-pink-500 focus:invalid:outline-pink-500 disabled:border-gray-200 disabled:bg-gray-50 disabled:text-gray-500 disabled:shadow-none sm:text-sm"
          defaultValue="george@krugerindustrial."
          placeholder="you@example.com"
        />
        <p className="invisible mt-2 text-sm text-pink-600 peer-invalid:visible">
          Please provide a valid email address.
        </p>
      </div>
    </div>
  </form>
</div>
```

LANGUAGE: html
CODE:
```
<!-- [!code classes:peer-invalid:visible] -->
<!-- [!code classes:peer] -->
<form>
  <label class="block">
    <span class="...">Email</span>
    <input type="email" class="peer ..." />
    <p class="invisible peer-invalid:visible ...">Please provide a valid email address.</p>
  </label>
</form>
```

----------------------------------------

TITLE: Defining Purple Oklch Color Palette in CSS
DESCRIPTION: This snippet defines a comprehensive set of purple color shades using CSS custom properties and the Oklch color model. These variables are essential for maintaining a unified purple color scheme across a project, facilitating easy updates and consistency.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/docs/colors.mdx#_snippet_22

LANGUAGE: CSS
CODE:
```
--color-purple-50: oklch(0.977 0.014 308.299);
--color-purple-100: oklch(0.946 0.033 307.174);
--color-purple-200: oklch(0.902 0.063 306.703);
--color-purple-300: oklch(0.827 0.119 306.383);
--color-purple-400: oklch(0.714 0.203 305.504);
--color-purple-500: oklch(0.627 0.265 303.9);
--color-purple-600: oklch(0.558 0.288 302.321);
--color-purple-700: oklch(0.496 0.265 301.924);
--color-purple-800: oklch(0.438 0.218 303.724);
--color-purple-900: oklch(0.381 0.176 304.987);
--color-purple-950: oklch(0.291 0.149 302.717);
```

----------------------------------------

TITLE: Applying Dark Mode Styles to HTML Elements with Tailwind CSS
DESCRIPTION: This HTML snippet demonstrates how to apply dark mode specific styles using Tailwind CSS's `dark` variant. It shows how to change background colors (`dark:bg-gray-800`), text colors (`dark:text-white`, `dark:text-gray-400`), and other properties when the user's system is in dark mode. The `dark:` prefix conditionally applies the utility class based on the `prefers-color-scheme` media query.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/docs/dark-mode.mdx#_snippet_0

LANGUAGE: HTML
CODE:
```
<!-- [!code word:dark\:bg-gray-800] -->
<!-- prettier-ignore -->
<div class="bg-white dark:bg-gray-800 rounded-lg px-6 py-8 ring shadow-xl ring-gray-900/5">
  <div>
    <span class="inline-flex items-center justify-center rounded-md bg-indigo-500 p-2 shadow-lg">
      <svg class="h-6 w-6 stroke-white" ...>
        <!-- ... -->
      </svg>
    </span>
  </div>
  <!-- prettier-ignore -->
  <!-- [!code word:dark\:text-white] -->
  <h3 class="text-gray-900 dark:text-white mt-5 text-base font-medium tracking-tight ">Writes upside-down</h3>
  <!-- prettier-ignore -->
  <!-- [!code word:dark\:text-gray-400] -->
  <p class="text-gray-500 dark:text-gray-400 mt-2 text-sm ">
    The Zero Gravity Pen can be used to write in any orientation, including upside-down. It even works in outer space.
  </p>
</div>
```

----------------------------------------

TITLE: Displaying Sticky Time Labels in Calendar Grid (JSX)
DESCRIPTION: This `div` element is responsible for displaying the time labels (e.g., '5 PM') along the left edge of the calendar grid. It uses Tailwind CSS for sticky positioning (`sticky left-0`), grid placement (`col-start-1`, `row-start`), background (`bg-white`), padding, text alignment, font styling, and dark mode adaptations. The `uppercase` class ensures the time text is capitalized.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/docs/overflow.mdx#_snippet_18

LANGUAGE: JSX
CODE:
```
<div className="sticky left-0 col-start-1 row-start-14 border-r border-gray-100 bg-white p-1.5 text-right text-xs font-medium text-gray-400 uppercase dark:border-gray-200/5 dark:bg-gray-800">\n          5 PM\n        </div>
```

----------------------------------------

TITLE: Incorrect Mobile Styling with sm:text-center - HTML
DESCRIPTION: This HTML snippet demonstrates a common mistake in Tailwind CSS responsive design. Using `sm:text-center` will only apply text centering on screens 640px and wider, failing to center text on smaller, mobile screens. It highlights that `sm:` targets the small breakpoint and above, not just small screens.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/docs/responsive-design.mdx#_snippet_5

LANGUAGE: HTML
CODE:
```
<!-- This will only center text on screens 640px and wider, not on small screens -->
<div class="sm:text-center"></div>
```

----------------------------------------

TITLE: Sorting Tailwind CSS Classes with Prettier in HTML
DESCRIPTION: This snippet illustrates the automatic class sorting functionality provided by the official Prettier plugin for Tailwind CSS. It demonstrates how the plugin reorders utility classes within an HTML element's `class` attribute to follow a consistent and recommended order, improving readability and maintainability. The 'Before' state shows unsorted classes, while the 'After' state displays the same classes sorted by the plugin.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/docs/editor-setup.mdx#_snippet_0

LANGUAGE: HTML
CODE:
```
<!-- Before -->
<button class="text-white px-4 sm:px-8 py-2 sm:py-3 bg-sky-700 hover:bg-sky-800">Submit</button>

<!-- After -->
<button class="bg-sky-700 px-4 py-2 text-white hover:bg-sky-800 sm:px-8 sm:py-3">Submit</button>
```

----------------------------------------

TITLE: Defining Tailwind CSS Color Palettes with OKLCH and Hex
DESCRIPTION: This snippet defines a comprehensive set of CSS custom properties for various color scales (gray, zinc, neutral, stone) using the OKLCH color model, along with standard black and white in hex. These variables are designed for use in CSS, particularly within frameworks like Tailwind CSS, allowing for consistent and reusable color definitions across a project. They can be remapped or reused under different names.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/docs/colors.mdx#_snippet_28

LANGUAGE: css
CODE:
```
--color-gray-500: oklch(0.551 0.027 264.364);
  --color-gray-600: oklch(0.446 0.03 256.802);
  --color-gray-700: oklch(0.373 0.034 259.733);
  --color-gray-800: oklch(0.278 0.033 256.848);
  --color-gray-900: oklch(0.21 0.034 264.665);
  --color-gray-950: oklch(0.13 0.028 261.692);

  --color-zinc-50: oklch(0.985 0 0);
  --color-zinc-100: oklch(0.967 0.001 286.375);
  --color-zinc-200: oklch(0.92 0.004 286.32);
  --color-zinc-300: oklch(0.871 0.006 286.286);
  --color-zinc-400: oklch(0.705 0.015 286.067);
  --color-zinc-500: oklch(0.552 0.016 285.938);
  --color-zinc-600: oklch(0.442 0.017 285.786);
  --color-zinc-700: oklch(0.37 0.013 285.805);
  --color-zinc-800: oklch(0.274 0.006 286.033);
  --color-zinc-900: oklch(0.21 0.006 285.885);
  --color-zinc-950: oklch(0.141 0.005 285.823);

  --color-neutral-50: oklch(0.985 0 0);
  --color-neutral-100: oklch(0.97 0 0);
  --color-neutral-200: oklch(0.922 0 0);
  --color-neutral-300: oklch(0.87 0 0);
  --color-neutral-400: oklch(0.708 0 0);
  --color-neutral-500: oklch(0.556 0 0);
  --color-neutral-600: oklch(0.439 0 0);
  --color-neutral-700: oklch(0.371 0 0);
  --color-neutral-800: oklch(0.269 0 0);
  --color-neutral-900: oklch(0.205 0 0);
  --color-neutral-950: oklch(0.145 0 0);

  --color-stone-50: oklch(0.985 0.001 106.423);
  --color-stone-100: oklch(0.97 0.001 106.424);
  --color-stone-200: oklch(0.923 0.003 48.717);
  --color-stone-300: oklch(0.869 0.005 56.366);
  --color-stone-400: oklch(0.709 0.01 56.259);
  --color-stone-500: oklch(0.553 0.013 58.071);
  --color-stone-600: oklch(0.444 0.011 73.639);
  --color-stone-700: oklch(0.374 0.01 67.558);
  --color-stone-800: oklch(0.268 0.007 34.298);
  --color-stone-900: oklch(0.216 0.006 56.043);
  --color-stone-950: oklch(0.147 0.004 49.25);

  --color-black: #000;
  --color-white: #fff;
```

----------------------------------------

TITLE: Using theme() Function for Breakpoints in Tailwind CSS v4
DESCRIPTION: Shows how to use the `theme()` function with CSS variable names for breakpoints in media queries, where direct CSS variables are not supported. This is the updated syntax for v4.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/docs/upgrade-guide.mdx#_snippet_26

LANGUAGE: CSS
CODE:
```
@media (width >= theme(--breakpoint-xl)) {
  /* ... */
}
```

----------------------------------------

TITLE: Applying Multi-Line Text Truncation with Tailwind CSS
DESCRIPTION: Demonstrates how to use the `line-clamp-3` utility class in Tailwind CSS to truncate text after three lines. This utility is now built directly into the framework, eliminating the need for a separate plugin and simplifying multi-line text truncation.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/blog/tailwindcss-v3-3/index.mdx#_snippet_22

LANGUAGE: HTML
CODE:
```
<div className="px-4 sm:px-0">
  <article className="mx-auto max-w-sm bg-white p-8 text-sm leading-6 text-slate-700 shadow-xl sm:text-base sm:leading-7 dark:bg-slate-800 dark:text-slate-400">
    <time dateTime="2020-03-16" className="block text-sm leading-6 text-slate-500 dark:text-slate-400">
      Mar 10, 2020
    </time>
    <h2 className="mt-2 text-lg font-semibold text-slate-900 dark:text-slate-200">Boost your conversion rate</h2>
    <p className="mt-4 line-clamp-3 text-sm leading-6 text-slate-500 dark:text-slate-400">
      <>
        Nulla dolor velit adipisicing duis excepteur esse in duis nostrud occaecat mollit incididunt deserunt sunt.
        Ut ut sunt laborum ex occaecat eu tempor labore enim adipisicing minim ad. Est in quis eu dolore occaecat
        excepteur fugiat dolore nisi aliqua fugiat enim ut cillum. Labore enim duis nostrud eu. Est ut eiusmod
        consequat irure quis deserunt ex. Enim laboris dolor magna pariatur. Dolor et ad sint voluptate sunt elit
        mollit officia ad enim sit consectetur enim.
      </>
    </p>
    <div className="mt-4 flex gap-x-2.5 text-sm leading-6 font-semibold text-slate-900 dark:text-slate-200">
      <img
        className="h-6 w-6 flex-none rounded-full bg-slate-50 dark:bg-slate-900"
        src="https://images.unsplash.com/photo-1517841905240-472988babdf9?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=facearea&facepad=2&w=256&h=256&q=80"
        alt=""
      />
      <>Lindsay Walton</>
    </div>
  </article>
</div>
```

LANGUAGE: HTML
CODE:
```
<article>
  <div>
    <time datetime="2020-03-16" class="block text-sm/6 text-gray-600">Mar 10, 2020</time>
    <h2 class="mt-2 text-lg font-semibold text-gray-900">Boost your conversion rate</h2>
    >
    <p class="mt-4 line-clamp-3 text-sm/6 text-gray-600">
      Nulla dolor velit adipisicing duis excepteur esse in duis nostrud occaecat mollit incididunt deserunt sunt. Ut ut
      sunt laborum ex occaecat eu tempor labore enim adipisicing minim ad. Est in quis eu dolore occaecat excepteur
      fugiat dolore nisi aliqua fugiat enim ut cillum. Labore enim duis nostrud eu. Est ut eiusmod consequat irure quis
      deserunt ex. Enim laboris dolor magna pariatur. Dolor et ad sint voluptate sunt elit mollit officia ad enim sit
      consectetur enim.
    </p>
  </div>
  <div class="mt-4 flex gap-x-2.5 text-sm leading-6 font-semibold text-gray-900">
    <img src="..." class="h-6 w-6 flex-none rounded-full bg-gray-50" />
    Lindsay Walton
  </div>
</article>
```

----------------------------------------

TITLE: Using Arbitrary Peer Variants with Custom Selectors
DESCRIPTION: Illustrates how to create one-off 'peer-*' variants using arbitrary values by providing a custom CSS selector within square brackets, such as 'peer-[.is-dirty]'. This allows styling based on a peer's state combined with an arbitrary class or attribute.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/docs/hover-focus-and-other-states.mdx#_snippet_25

LANGUAGE: html
CODE:
```
<form>
  <label for="email">Email:</label>
  <input id="email" name="email" type="email" class="is-dirty peer" required />
  <div class="peer-[.is-dirty]:peer-required:block hidden">This field is required.</div>
  <!-- ... -->
</form>
```

LANGUAGE: css
CODE:
```
.peer-\[\.is-dirty\]\:peer-required\:block {
  &:is(:where(.peer):is(.is-dirty) ~ *) {
    &:is(:where(.peer):required ~ *) {
      display: block;
    }
  }
}
```

----------------------------------------

TITLE: Customize Tailwind CSS Theme with @theme Directive
DESCRIPTION: Demonstrates how to customize design tokens like fonts, breakpoints, colors, and easing functions in Tailwind CSS using the @theme directive in your CSS file. This allows for global design system adjustments.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/docs/adding-custom-styles.mdx#_snippet_0

LANGUAGE: css
CODE:
```
@theme {
  --font-display: "Satoshi", "sans-serif";

  --breakpoint-3xl: 120rem;

  --color-avocado-100: oklch(0.99 0 0);
  --color-avocado-200: oklch(0.98 0.04 113.22);
  --color-avocado-300: oklch(0.94 0.11 115.03);
  --color-avocado-400: oklch(0.92 0.19 114.08);
  --color-avocado-500: oklch(0.84 0.18 117.33);
  --color-avocado-600: oklch(0.53 0.12 118.34);

  --ease-fluid: cubic-bezier(0.3, 0, 0, 1);
  --ease-snappy: cubic-bezier(0.2, 0, 0, 1);

  /* ... */
}
```

----------------------------------------

TITLE: Styling Parent with `has-checked` in Tailwind CSS
DESCRIPTION: This HTML snippet demonstrates how to use the `has-checked` utility class in Tailwind CSS to style a `<label>` element when its descendant `<input type="radio">` is checked. The `has-checked` class applies specific background, text, and ring styles to the parent label based on the radio button's state, supporting both light and dark modes.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/docs/hover-focus-and-other-states.mdx#_snippet_9

LANGUAGE: HTML
CODE:
```
<label
  class="has-checked:bg-indigo-50 has-checked:text-indigo-900 has-checked:ring-indigo-200 dark:has-checked:bg-indigo-950 dark:has-checked:text-indigo-200 dark:has-checked:ring-indigo-900 ..."
>
  <svg fill="currentColor">
    <!-- ... -->
  </svg>
  Google Pay
  <input type="radio" class="checked:border-indigo-500 ..." />
</label>
```

----------------------------------------

TITLE: Installing Headless UI for React
DESCRIPTION: This command line snippet shows how to install the latest version of `@headlessui/react` using npm. This is the standard way to upgrade or add the Headless UI library to a React project.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/blog/headless-ui-v1-4/index.mdx#_snippet_8

LANGUAGE: sh
CODE:
```
# For React
npm install @headlessui/react
```

----------------------------------------

TITLE: Handle Gradient Variants Consistently in Tailwind v4
DESCRIPTION: Details how gradient variants in Tailwind CSS v4 preserve values, unlike v3 where they would 'reset' the entire gradient. The first HTML example demonstrates a gradient with a dark mode variant. The second HTML example shows how to explicitly use `via-none` to 'unset' a three-stop gradient back to a two-stop gradient in a specific state, which is necessary due to the new preservation behavior.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/docs/upgrade-guide.mdx#_snippet_12

LANGUAGE: html
CODE:
```
<div class="bg-gradient-to-r from-red-500 to-yellow-400 dark:from-blue-500">
  <!-- ... -->
</div>
```

LANGUAGE: html
CODE:
```
<div class="bg-linear-to-r from-red-500 via-orange-400 to-yellow-400 dark:via-none dark:from-blue-500 dark:to-teal-400">
  <!-- ... -->
</div>
```

----------------------------------------

TITLE: Animating with CSS Variables in React (Motion Library)
DESCRIPTION: Demonstrates how to animate CSS variable values directly using the Motion library in React, leveraging Tailwind CSS v4's generation of CSS variables for theme values.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/docs/upgrade-guide.mdx#_snippet_28

LANGUAGE: JSX
CODE:
```
<motion.div animate={{ backgroundColor: "var(--color-blue-500)" }} />
```

----------------------------------------

TITLE: Configuring Design Tokens with @theme - CSS
DESCRIPTION: This CSS snippet illustrates the new CSS-first configuration approach in Tailwind CSS v4.0, using the `@theme` directive. It allows defining design tokens like fonts, breakpoints, colors, and easing functions directly within the CSS file, eliminating the need for a separate `tailwind.config.js`.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/blog/tailwindcss-v4/index.mdx#_snippet_11

LANGUAGE: CSS
CODE:
```
@import "tailwindcss";

@theme {
  --font-display: "Satoshi", "sans-serif";

  --breakpoint-3xl: 1920px;

  --color-avocado-100: oklch(0.99 0 0);
  --color-avocado-200: oklch(0.98 0.04 113.22);
  --color-avocado-300: oklch(0.94 0.11 115.03);
  --color-avocado-400: oklch(0.92 0.19 114.08);
  --color-avocado-500: oklch(0.84 0.18 117.33);
  --color-avocado-600: oklch(0.53 0.12 118.34);

  --ease-fluid: cubic-bezier(0.3, 0, 0, 1);
  --ease-snappy: cubic-bezier(0.2, 0, 0, 1);

  /* ... */
}
```

----------------------------------------

TITLE: Styling Interactive Pseudo-Classes with Tailwind CSS
DESCRIPTION: Shows how to apply styles for common interactive pseudo-classes like :hover, :focus, and :active using their respective Tailwind CSS utility variants.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/docs/hover-focus-and-other-states.mdx#_snippet_2

LANGUAGE: html
CODE:
```
<!-- [!code classes:hover:bg-violet-600,focus:outline-2,focus:outline-offset-2,focus:outline-violet-500,active:bg-violet-700] -->
<!-- prettier-ignore -->
<button class="bg-violet-500 hover:bg-violet-600 focus:outline-2 focus:outline-offset-2 focus:outline-violet-500 active:bg-violet-700 ...">
  Save changes
</button>
```

----------------------------------------

TITLE: Avoiding Conflicting Classes with Conditional Logic in React/JSX
DESCRIPTION: Provides a best practice example for preventing conflicting utility classes in React or similar component-based libraries. It demonstrates using conditional logic within JSX to apply only the desired class based on component props, ensuring a single source of truth for styling.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/docs/styling-with-utility-classes.mdx#_snippet_31

LANGUAGE: jsx
CODE:
```
// [!code filename:example.jsx]
// [!code word:gridLayout\ \?\ \"grid\"\ \:\ \"flex\"]
export function Example({ gridLayout }) {
  return <div className={gridLayout ? "grid" : "flex"}>{/* ... */}</div>;
}
```

----------------------------------------

TITLE: Defining Container Query Ranges with Tailwind CSS
DESCRIPTION: This snippet demonstrates how to combine `@min-*` and `@max-*` variants to create container query ranges. The `@min-md:@max-xl:hidden` utility hides the element only when the container's width is between the 'md' and 'xl' breakpoints, providing fine-grained control over responsiveness.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/blog/tailwindcss-v4/index.mdx#_snippet_18

LANGUAGE: HTML
CODE:
```
<div class="@container">
  <div class="flex @min-md:@max-xl:hidden">
    <!-- ... -->
  </div>
</div>
```

----------------------------------------

TITLE: Mapping Props to Static Class Names in JSX with Tailwind
DESCRIPTION: This JSX snippet demonstrates the recommended way to handle conditional styling with props in Tailwind CSS. By mapping prop values to complete, static class name strings within an object, Tailwind's plain-text scanner can easily detect all possible class names at build-time, ensuring proper CSS generation.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/docs/detecting-classes-in-source-files.mdx#_snippet_4

LANGUAGE: JSX
CODE:
```
function Button({ color, children }) {
  const colorVariants = {
    blue: "bg-blue-600 hover:bg-blue-500",
    red: "bg-red-600 hover:bg-red-500"
  };

  return <button className={`${colorVariants[color]} ...`}>{children}</button>;
}
```

----------------------------------------

TITLE: JavaScript for Three-Way Theme Toggling (Light, Dark, System)
DESCRIPTION: This JavaScript snippet provides logic for a three-way theme toggle, supporting light, dark, and system-preferred modes. It checks `localStorage` for a saved theme preference and falls back to `window.matchMedia` for system preference if no explicit theme is set. It then applies or removes the `dark` class on the `<html>` element, and includes examples for explicitly setting light, dark, or system themes via `localStorage`.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/docs/dark-mode.mdx#_snippet_5

LANGUAGE: javascript
CODE:
```
document.documentElement.classList.toggle(
  "dark",
  localStorage.theme === "dark" ||
    (!("theme" in localStorage) && window.matchMedia("(prefers-color-scheme: dark)").matches)
);

// Whenever the user explicitly chooses light mode
localStorage.theme = "light";

// Whenever the user explicitly chooses dark mode
localStorage.theme = "dark";

// Whenever the user explicitly chooses to respect the OS preference
localStorage.removeItem("theme");
```

----------------------------------------

TITLE: Importing Tailwind CSS in Main CSS File (CLI Flow) - CSS
DESCRIPTION: This CSS snippet imports the Tailwind CSS framework into your main application stylesheet, preparing it for compilation using the Tailwind CSS CLI.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/blog/tailwindcss-v4-alpha/index.mdx#_snippet_18

LANGUAGE: css
CODE:
```
/* [!code filename:app.css] */
@import "tailwindcss";
```

----------------------------------------

TITLE: Configuring PostCSS Plugin for Tailwind CSS v4.0
DESCRIPTION: This JavaScript snippet shows a minimal PostCSS configuration file that adds the @tailwindcss/postcss plugin. This configuration is essential for PostCSS to process Tailwind CSS directives and generate the final CSS output, simplifying the setup by reducing boilerplate.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/blog/tailwindcss-v4/index.mdx#_snippet_5

LANGUAGE: JavaScript
CODE:
```
export default {
  plugins: ["@tailwindcss/postcss"]
};
```

----------------------------------------

TITLE: Configuring PostCSS Plugin for Tailwind CSS v4 Alpha - JavaScript
DESCRIPTION: This JavaScript configuration for postcss.config.js adds the @tailwindcss/postcss plugin to your PostCSS setup, enabling it to process Tailwind CSS directives in your stylesheets.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/blog/tailwindcss-v4-alpha/index.mdx#_snippet_15

LANGUAGE: js
CODE:
```
// [!code filename:postcss.config.js]
module.exports = {
  plugins: {
    "@tailwindcss/postcss": {},
  },
};
```

----------------------------------------

TITLE: Adding Viewport Meta Tag in HTML
DESCRIPTION: This snippet demonstrates how to include the viewport meta tag in the <head> of an HTML document. This tag is crucial for proper responsive behavior across different devices, ensuring the page scales correctly.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/docs/responsive-design.mdx#_snippet_2

LANGUAGE: HTML
CODE:
```
<meta name="viewport" content="width=device-width, initial-scale=1.0" />
```

----------------------------------------

TITLE: Tailwind CSS Dark Mode Class Usage in HTML
DESCRIPTION: This HTML snippet demonstrates the direct application of Tailwind CSS `dark:` variant classes to elements. It shows how to define default styles for light mode and then override them with `dark:` prefixed classes for dark mode, such as `dark:bg-gray-900` and `dark:text-white`, ensuring the UI adapts to the user's preferred color scheme.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/docs/hover-focus-and-other-states.mdx#_snippet_39

LANGUAGE: HTML
CODE:
```
<!-- [!code classes:dark:bg-gray-900] -->
<!-- [!code classes:dark:text-white] -->
<!-- [!code classes:dark:text-gray-400] -->
<div class="bg-white dark:bg-gray-900 ...">
  <!-- ... -->
  <h3 class="text-gray-900 dark:text-white ...">Writes upside-down</h3>
  <p class="text-gray-500 dark:text-gray-400 ...">
    The Zero Gravity Pen can be used to write in any orientation, including upside-down. It even works in outer space.
  </p>
</div>
```

----------------------------------------

TITLE: Implementing Min-Width Container Queries with Tailwind CSS
DESCRIPTION: This snippet demonstrates how to use native container queries in Tailwind CSS v4.0 without the need for a plugin. It applies a `@container` class to the parent element and uses `@sm:` and `@lg:` variants to define responsive grid column changes based on the container's width.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/blog/tailwindcss-v4/index.mdx#_snippet_16

LANGUAGE: HTML
CODE:
```
<div class="@container">
  <div class="grid grid-cols-1 @sm:grid-cols-3 @lg:grid-cols-4">
    <!-- ... -->
  </div>
</div>
```

----------------------------------------

TITLE: Creating a Reusable React Component with Tailwind CSS
DESCRIPTION: Demonstrates how to create a reusable React component (VacationCard) to encapsulate Tailwind CSS styles and structure. This promotes a single source of truth for styles, making them easily updatable. The example includes both the direct JSX usage of Tailwind classes and the component's definition.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/docs/styling-with-utility-classes.mdx#_snippet_28

LANGUAGE: jsx
CODE:
```
<div className="bg-white">
  <div className="mx-auto w-72 bg-white px-8 py-6  sm:w-96 sm:px-12 sm:py-8">
    <div>
      <img
        className="rounded-lg"
        src="https://images.unsplash.com/photo-1452784444945-3f422708fe5e?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=512&q=80"
        width="512"
        height="341"
        alt="Beach"
      />
      <div className="mt-4">
          <div className="text-xs font-bold text-sky-500">Private Villa</div>
          <div className="mt-1 font-bold text-gray-700">
            <a href="#" className="hover:underline">Relaxing All-Inclusive Resort in Cancun</a>
          </div>
          <div className="mt-2 text-sm text-gray-600">$299 USD per night</div>
      </div>
    </div>
  </div>
</div>
```

LANGUAGE: jsx
CODE:
```
export function VacationCard({ img, imgAlt, eyebrow, title, pricing, url }) {
  return (
    <div>
      <img className="rounded-lg" src={img} alt={imgAlt} />
      <div className="mt-4">
        <div className="text-xs font-bold text-sky-500">{eyebrow}</div>
        <div className="mt-1 font-bold text-gray-700">
          <a href={url} className="hover:underline">
            {title}
          </a>
        </div>
        <div className="mt-2 text-sm text-gray-600">{pricing}</div>
      </div>
    </div>
  );
}
```

----------------------------------------

TITLE: Comparing Traditional CSS and Tailwind for State Styling
DESCRIPTION: This comparison demonstrates the difference in approach between traditional CSS and Tailwind CSS when styling element states. Traditional CSS often groups styles for multiple states under one class, while Tailwind uses specific utility classes with variants for each state.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/docs/styling-with-utility-classes.mdx#_snippet_5

LANGUAGE: html
CODE:
```
/* [!code filename:HTML] */
<button class="btn">Save changes</button>
```

LANGUAGE: css
CODE:
```
<style>
  .btn {
    background-color: var(--color-sky-500);
    &:hover {
      background-color: var(--color-sky-700);
    }
  }
</style>
```

----------------------------------------

TITLE: Styling Disabled Input Wrapper with :has() in JSX
DESCRIPTION: This snippet demonstrates how to style a wrapper element based on the `:disabled` state of its child `<input>` using the CSS `:has()` pseudo-class within a Tailwind CSS class. It allows for conditional styling of the parent `<span>` without JavaScript. The `has-[:disabled]:opacity-50` class applies `opacity-50` to the `<span>` when the nested `<input>` is disabled.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/blog/tailwindcss-v3-4/index.mdx#_snippet_3

LANGUAGE: jsx
CODE:
```
export function Input({ ... }) {
  return (
    <span className="has-[:disabled]:opacity-50 ...">
      <input ... />
    </span>
  )
}
```

----------------------------------------

TITLE: Centering Items with `items-center` in Tailwind CSS (HTML/JSX)
DESCRIPTION: This snippet demonstrates how to use the `items-center` utility in Tailwind CSS to vertically center flex items along the container's cross axis. It includes both a React JSX example and a plain HTML example for implementation.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/docs/align-items.mdx#_snippet_2

LANGUAGE: tsx
CODE:
```
<div className="grid grid-cols-1">
  <Stripes border className="col-start-1 row-start-1 rounded-lg" />
  <div className="col-start-1 row-start-1 flex w-full items-center gap-4 rounded-lg text-center font-mono text-sm leading-6 font-bold text-white">
    <div className="flex flex-1 items-center justify-center rounded-lg bg-violet-500 py-4">01</div>
    <div className="flex flex-1 items-center justify-center rounded-lg bg-violet-500 py-12">02</div>
    <div className="flex flex-1 items-center justify-center rounded-lg bg-violet-500 py-8">03</div>
  </div>
</div>
```

LANGUAGE: html
CODE:
```
<!-- [!code classes:items-center] -->
<div class="flex items-center ...">
  <div class="py-4">01</div>
  <div class="py-12">02</div>
  <div class="py-8">03</div>
</div>
```

----------------------------------------

TITLE: Using Arbitrary CSS Properties with Tailwind CSS HTML
DESCRIPTION: This example illustrates the use of arbitrary CSS properties within Tailwind CSS, allowing direct application of any CSS property and value. It shows how to set `mask-type` to `luminance` by default and change it to `alpha` on hover, demonstrating flexibility with modifiers.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/blog/tailwindcss-v3/index.mdx#_snippet_13

LANGUAGE: HTML
CODE:
```
<div class="[mask-type:luminance] hover:[mask-type:alpha]">
  <!-- ... -->
</div>
```

----------------------------------------

TITLE: Defining Tailwind CSS Padding Utilities API Table
DESCRIPTION: This JSX snippet defines the comprehensive API table for Tailwind CSS padding utilities. It maps various prefixes (p, px, py, ps, pe, pt, pr, pb, pl) to their respective CSS properties (padding, padding-inline, padding-block, etc.) and demonstrates how different value types (numbers, px, custom properties, arbitrary values) are translated into CSS.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/docs/padding.mdx#_snippet_0

LANGUAGE: jsx
CODE:
```
<ApiTable\n  rows={[\n    ["p", "padding"],\n    ["px", "padding-inline"],\n    ["py", "padding-block"],\n    ["ps", "padding-inline-start"],\n    ["pe", "padding-inline-end"],\n    ["pt", "padding-top"],\n    ["pr", "padding-right"],\n    ["pb", "padding-bottom"],\n    ["pl", "padding-left"],\n  ].flatMap(([prefix, property]) => [\n    [`${prefix}-<number>`, `${property}: calc(var(--spacing) * <number>);`],\n    [`${prefix}-px`, `${property}: 1px;`],\n    [`${prefix}-(<custom-property>)`, `${property}: var(<custom-property>);`],\n    [`${prefix}-[<value>]`, `${property}: <value>;`],\n  ])}\n/>
```

----------------------------------------

TITLE: Installing Tailwind CSS v4.1 with PostCSS via npm
DESCRIPTION: This shell command installs the latest versions of `tailwindcss` and `@tailwindcss/postcss` using npm. This setup is for projects that use PostCSS as their CSS preprocessor, enabling Tailwind CSS to be processed as a PostCSS plugin, which is a common and flexible way to integrate it into various build workflows.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/blog/tailwindcss-v4-1/index.mdx#_snippet_32

LANGUAGE: Shell
CODE:
```
npm install tailwindcss@latest @tailwindcss/postcss@latest
```

----------------------------------------

TITLE: Implementing a Toggle Switch with Headless UI and React
DESCRIPTION: This snippet demonstrates how to create a customizable toggle switch component using React and Headless UI's `Switch` component. It manages the enabled state with React's `useState` hook and applies Tailwind CSS classes dynamically based on the state for visual styling. The `classNames` helper function is used to conditionally join CSS classes, ensuring a fully functional and accessible component.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/blog/tailwind-ui-now-with-react-and-vue-support/index.mdx#_snippet_0

LANGUAGE: JSX
CODE:
```
import { useState } from "react";
import { Switch } from "@headlessui/react";

function classNames(...classes) {
  return classes.filter(Boolean).join(" ");
}

export default function Example() {
  const [enabled, setEnabled] = useState(false);

  return (
    <Switch
      checked={enabled}
      onChange={setEnabled}
      className={classNames(
        enabled ? "bg-indigo-600" : "bg-gray-200",
        "relative inline-flex h-6 w-11 flex-shrink-0 cursor-pointer rounded-full border-2 border-transparent transition-colors duration-200 ease-in-out focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2 focus:outline-none",
      )}
    >
      <span className="sr-only">Use setting</span>
      <span
        aria-hidden="true"
        className={classNames(
          enabled ? "translate-x-5" : "translate-x-0",
          "pointer-events-none inline-block h-5 w-5 transform rounded-full bg-white shadow ring-0 transition duration-200 ease-in-out",
        )}
      />
    </Switch>
  );
}
```

----------------------------------------

TITLE: Applying Hover Styles with Tailwind CSS
DESCRIPTION: Demonstrates how to apply conditional styles on hover using Tailwind CSS utility classes, contrasting it with traditional CSS approaches where the same class name handles different states.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/docs/hover-focus-and-other-states.mdx#_snippet_0

LANGUAGE: html
CODE:
```
<!-- [!code classes:hover:bg-sky-700] -->
<button class="bg-sky-500 hover:bg-sky-700 ...">Save changes</button>
```

LANGUAGE: css
CODE:
```
.btn-primary {
  background-color: #0ea5e9;
}

.btn-primary:hover {
  background-color: #0369a1;
}
```

LANGUAGE: css
CODE:
```
.bg-sky-500 {
  background-color: #0ea5e9;
}

.hover\:bg-sky-700:hover {
  background-color: #0369a1;
}
```

----------------------------------------

TITLE: Styling HTML Form Inputs with Tailwind CSS State Variants
DESCRIPTION: Demonstrates how to apply Tailwind CSS utility classes using pseudo-class variants like :invalid, :focus, and :disabled to style form elements based on their state. This approach reduces conditional logic in templates by letting the browser apply styles automatically, providing a cleaner way to manage UI states.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/docs/hover-focus-and-other-states.mdx#_snippet_8

LANGUAGE: JSX
CODE:
```
<div className="mx-auto max-w-md border-x border-x-gray-200 px-6 py-5 dark:border-x-gray-800 dark:bg-gray-950/10">
  <form>
    <div>
      <label htmlFor="username" className="block text-sm font-medium text-gray-700 dark:text-gray-300">
        Username
      </label>
      <div className="mt-1">
        <input
          type="text"
          name="username"
          id="username"
          className="block w-full rounded-md border border-gray-300 px-3 py-2 placeholder-gray-400 shadow-sm invalid:border-pink-500 invalid:text-pink-600 focus:border-sky-500 focus:outline focus:outline-sky-500 focus:invalid:border-pink-500 focus:invalid:outline-pink-500 disabled:border-gray-200 disabled:bg-gray-50 disabled:text-gray-500 disabled:shadow-none sm:text-sm dark:disabled:border-gray-700 dark:disabled:bg-gray-800/20"
          defaultValue="tbone"
          disabled
        />
      </div>
    </div>
    <div className="mt-6">
      <label htmlFor="email" className="block text-sm font-medium text-gray-700 dark:text-gray-300">
        Email
      </label>
      <div className="mt-1">
        <input
          type="email"
          name="email"
          id="email-1"
          className="block w-full rounded-md border border-gray-300 px-3 py-2 placeholder-gray-400 shadow-sm invalid:border-pink-500 invalid:text-pink-600 focus:border-sky-500 focus:outline focus:outline-sky-500 focus:invalid:border-pink-500 focus:invalid:outline-pink-500 disabled:border-gray-200 disabled:bg-gray-50 disabled:text-gray-500 disabled:shadow-none sm:text-sm dark:disabled:border-gray-700 dark:disabled:bg-gray-800/20"
          defaultValue="george@krugerindustrial."
          placeholder="you@example.com"
        />
      </div>
    </div>
    <div className="mt-6">
      <label htmlFor="password" className="block text-sm font-medium text-gray-700 dark:text-gray-300">
        Password
      </label>
      <div className="mt-1">
        <input
          type="password"
          name="password"
          id="password"
          autoComplete="none"
          className="block w-full rounded-md border border-gray-300 px-3 py-2 placeholder-gray-400 shadow-sm invalid:border-pink-500 invalid:text-pink-600 focus:border-sky-500 focus:outline focus:outline-sky-500 focus:invalid:border-pink-500 focus:invalid:outline-pink-500 disabled:border-gray-200 disabled:bg-gray-50 disabled:text-gray-500 disabled:shadow-none sm:text-sm dark:disabled:border-gray-700 dark:disabled:bg-gray-800/20"
          defaultValue="Bosco"
        />
      </div>
    </div>
    <div className="mt-6 text-right">
      <button className="rounded-md bg-sky-500 px-5 py-2.5 text-sm leading-5 font-semibold text-white hover:bg-sky-700">
        Save changes
      </button>
    </div>
  </form>
</div>
```

LANGUAGE: HTML
CODE:
```
<input
  type="text"
  value="tbone"
  disabled
  class="invalid:border-pink-500 invalid:text-pink-600 focus:border-sky-500 focus:outline focus:outline-sky-500 focus:invalid:border-pink-500 focus:invalid:outline-pink-500 disabled:border-gray-200 disabled:bg-gray-50 disabled:text-gray-500 disabled:shadow-none dark:disabled:border-gray-700 dark:disabled:bg-gray-800/20 ..."
/>
```

----------------------------------------

TITLE: Integrating Tailwind CSS Play CDN into HTML
DESCRIPTION: This snippet demonstrates how to include the Tailwind CSS Play CDN in an HTML document. By adding the provided script tag to the `<head>`, developers can use all Tailwind features directly in the browser for development or quick demos, without a build step.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/blog/tailwindcss-v3/index.mdx#_snippet_14

LANGUAGE: HTML
CODE:
```
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Example</title>
    <script src="https://cdn.tailwindcss.com/"></script> <!-- [!code ++] -->
  </head>
  <body>
    <!-- -->
  </body>
</html>
```

----------------------------------------

TITLE: Styling Form Elements for Pointer Devices with Tailwind CSS
DESCRIPTION: This snippet demonstrates how to use Tailwind CSS's `pointer-coarse` variant to adjust the layout and padding of a form's radio button group when the user is interacting with a low-precision input device like a touchscreen. It shows a memory option selector where the grid columns and padding change for coarse pointers.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/blog/tailwindcss-v4-1/index.mdx#_snippet_15

LANGUAGE: HTML
CODE:
```
<fieldset aria-label="Choose a memory option" className="mx-auto max-w-md">
  <div className="flex items-center justify-between">
    <div className="text-sm/6 font-medium text-gray-900 dark:text-white">RAM</div>
    <a href="#" className="text-sm/6 font-medium text-indigo-600 hover:text-indigo-500 dark:text-indigo-400">
      See performance specs
    </a>
  </div>
  <div className="mt-4 grid grid-cols-6 gap-2 max-sm:grid-cols-3 pointer-coarse:mt-6 pointer-coarse:grid-cols-3 pointer-coarse:gap-4">
    <label className="flex items-center justify-center rounded-md bg-white p-2 text-sm font-semibold text-gray-900 uppercase ring-1 ring-gray-300 not-data-focus:not-has-checked:ring-inset hover:bg-gray-50 has-checked:bg-indigo-600 has-checked:text-white has-checked:ring-0 has-checked:hover:bg-indigo-500 has-focus-visible:outline-2 has-focus-visible:outline-offset-2 has-focus-visible:outline-indigo-600 data-focus:ring-2 data-focus:ring-indigo-600 data-focus:ring-offset-2 data-focus:has-checked:ring-2 sm:flex-1 dark:bg-transparent dark:text-white dark:ring-white/20 dark:hover:bg-gray-950/50 pointer-coarse:p-4">
      <input type="radio" name="memory-option" value="4 GB" className="sr-only" />
      <span>4 GB</span>
    </label>
    <label className="flex items-center justify-center rounded-md bg-white p-2 text-sm font-semibold text-gray-900 uppercase ring-1 ring-gray-300 not-data-focus:not-has-checked:ring-inset hover:bg-gray-50 has-checked:bg-indigo-600 has-checked:text-white has-checked:ring-0 has-checked:hover:bg-indigo-500 has-focus-visible:outline-2 has-focus-visible:outline-offset-2 has-focus-visible:outline-indigo-600 data-focus:ring-2 data-focus:ring-indigo-600 data-focus:ring-offset-2 data-focus:has-checked:ring-2 sm:flex-1 dark:bg-transparent dark:text-white dark:ring-white/20 dark:hover:bg-gray-950/50 pointer-coarse:p-4">
      <input type="radio" name="memory-option" value="8 GB" className="sr-only" defaultChecked />
      <span>8 GB</span>
    </label>
    <label className="flex items-center justify-center rounded-md bg-white p-2 text-sm font-semibold text-gray-900 uppercase ring-1 ring-gray-300 not-data-focus:not-has-checked:ring-inset hover:bg-gray-50 has-checked:bg-indigo-600 has-checked:text-white has-checked:ring-0 has-checked:hover:bg-indigo-500 has-focus-visible:outline-2 has-focus-visible:outline-offset-2 has-focus-visible:outline-indigo-600 data-focus:ring-2 data-focus:ring-indigo-600 data-focus:ring-offset-2 data-focus:has-checked:ring-2 sm:flex-1 dark:bg-transparent dark:text-white dark:ring-white/20 dark:hover:bg-gray-950/50 pointer-coarse:p-4">
      <input type="radio" name="memory-option" value="16 GB" className="sr-only" />
      <span>16 GB</span>
    </label>
    <label className="flex items-center justify-center rounded-md bg-white p-2 text-sm font-semibold text-gray-900 uppercase ring-1 ring-gray-300 not-data-focus:not-has-checked:ring-inset hover:bg-gray-50 has-checked:bg-indigo-600 has-checked:text-white has-checked:ring-0 has-checked:hover:bg-indigo-500 has-focus-visible:outline-2 has-focus-visible:outline-offset-2 has-focus-visible:outline-indigo-600 data-focus:ring-2 data-focus:ring-indigo-600 data-focus:ring-offset-2 data-focus:has-checked:ring-2 sm:flex-1 dark:bg-transparent dark:text-white dark:ring-white/20 dark:hover:bg-gray-950/50 pointer-coarse:p-4">
      <input type="radio" name="memory-option" value="32 GB" className="sr-only" />
      <span>32 GB</span>
    </label>
    <label className="flex items-center justify-center rounded-md bg-white p-2 text-sm font-semibold text-gray-900 uppercase ring-1 ring-gray-300 not-data-focus:not-has-checked:ring-inset hover:bg-gray-50 has-checked:bg-indigo-600 has-checked:text-white has-checked:ring-0 has-checked:hover:bg-indigo-500 has-focus-visible:outline-2 has-focus-visible:outline-offset-2 has-focus-visible:outline-indigo-600 data-focus:ring-2 data-focus:ring-indigo-600 data-focus:ring-offset-2 data-focus:has-checked:ring-2 sm:flex-1 dark:bg-transparent dark:text-white dark:ring-white/20 dark:hover:bg-gray-950/50 pointer-coarse:p-4">
      <input type="radio" name="memory-option" value="64 GB" className="sr-only" />
      <span>64 GB</span>
    </label>
  </div>
</fieldset>
```

----------------------------------------

TITLE: Applying Dynamic Viewport Height with Tailwind CSS
DESCRIPTION: This HTML snippet demonstrates how to apply the `h-dvh` utility class from Tailwind CSS to a `div` element. This class sets the height of the element to 100% of the dynamic viewport height, which adjusts for browser UI changes on mobile devices, providing a more reliable full-height layout.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/blog/tailwindcss-v3-4/index.mdx#_snippet_1

LANGUAGE: HTML
CODE:
```
<!-- [!code word:h-dvh] -->
<div class="h-dvh">
  <!-- ... -->
</div>
```

----------------------------------------

TITLE: Integrating Tailwind CSS v4.0 with Vite
DESCRIPTION: This TypeScript configuration snippet demonstrates how to integrate Tailwind CSS v4.0 into a Vite project using the dedicated @tailwindcss/vite plugin. It imports defineConfig from Vite and the tailwindcss plugin, then adds the plugin to the plugins array within the Vite configuration, offering improved performance over the PostCSS plugin for Vite users.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/blog/tailwindcss-v4/index.mdx#_snippet_7

LANGUAGE: TypeScript
CODE:
```
import { defineConfig } from "vite";
import tailwindcss from "@tailwindcss/vite";

export default defineConfig({
  plugins: [
    tailwindcss()
  ]
});
```

----------------------------------------

TITLE: Implementing Continuous CSS Animations with Negative Delay (JSX)
DESCRIPTION: This `Logo` component demonstrates a CSS-driven animation technique where logos continuously move across the screen and pause on hover. It leverages a negative `animation-delay` to offset the starting position of each logo within a shared animation keyframe, allowing them to appear at different points in their cycle. The `group-hover:[animation-play-state:running]` class dynamically controls the animation's play state based on the parent's hover, eliminating the need for JavaScript state management.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/blog/2024-09-12-radiant-a-beautiful-new-marketing-site-template/index.mdx#_snippet_5

LANGUAGE: JSX
CODE:
```
// [!code filename:logo-timeline.tsx]
function Logo({
  label,
  src,
  className,
}: {
  label: string
  src: string
  className: string
}) {
  return (
    <div
      className={clsx(
        className,
        'absolute top-2 grid grid-cols-[1rem,1fr] items-center gap-2 whitespace-nowrap px-3 py-1',
        'rounded-full bg-gradient-to-t from-gray-800 from-50% to-gray-700 ring-1 ring-inset ring-white/10',
        // [!code highlight:2]
        '[--move-x-from:-100%] [--move-x-to:calc(100%+100cqw)] [animation-iteration-count:infinite] [animation-name:move-x] [animation-play-state:paused] [animation-timing-function:linear] group-hover:[animation-play-state:running]',
      )}
    >
      <img alt="" src={src} className="size-4" />
      <span className="text-sm/6 font-medium text-white">{label}</span>
    </div>
  )
}

export function LogoTimeline() {
  return (
    /* ... */
    <Row>
      <Logo
        label="Loom"
        src="./logo-timeline/loom.svg"
        // [!code highlight:2]
        className="[animation-delay:-26s] [animation-duration:30s]"
      />
      <Logo
        label="Gmail"
        src="./logo-timeline/gmail.svg"
        // [!code highlight:2]
        className="[animation-delay:-8s] [animation-duration:30s]"
      />
    </Row>
    /* ... */
```

----------------------------------------

TITLE: Comparing Old vs. New Tailwind CSS RTL Styling
DESCRIPTION: This HTML snippet illustrates the transition from explicit LTR/RTL variants (`ltr:ml-3 rtl:mr-3`) to the new logical property utility (`ms-3`) in Tailwind CSS. The `ms-3` class automatically handles margin-start based on the text direction, simplifying multi-directional UI development.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/blog/tailwindcss-v3-3/index.mdx#_snippet_5

LANGUAGE: HTML
CODE:
```
<div class="group flex items-center">
  <img class="h-12 w-12 shrink-0 rounded-full" src="..." alt="" />
  <div class="ltr:ml-3 rtl:mr-3"><!-- [!code --] -->
    <div class="ms-3"><!-- [!code ++] -->
      <p
        class="text-sm font-medium text-slate-700 group-hover:text-slate-900"
        dark-class="text-sm font-medium text-slate-300 group-hover:text-white"
      >
        ...
      </p>
      <p
        class="text-sm font-medium text-slate-500 group-hover:text-slate-700"
        dark-class="text-sm font-medium text-slate-500 group-hover:text-slate-300"
      >
        ...
      </p>
    </div>
  </div>
</div>
```

----------------------------------------

TITLE: Correct Mobile-First Text Alignment with Tailwind CSS - HTML
DESCRIPTION: This HTML snippet showcases the recommended mobile-first approach for responsive text alignment in Tailwind CSS. `text-center` applies centering to all screen sizes by default, while `sm:text-left` then overrides this to left-align text specifically on screens 640px and wider, demonstrating proper progressive enhancement.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/docs/responsive-design.mdx#_snippet_6

LANGUAGE: HTML
CODE:
```
<!-- This will center text on mobile, and left align it on screens 640px and wider -->
<div class="text-center sm:text-left"></div>
```

----------------------------------------

TITLE: Building a Custom Dropdown with Headless UI and React
DESCRIPTION: This snippet demonstrates how to create a custom dropdown menu using the `@headlessui/react` library. It leverages `Menu`, `Menu.Button`, and `Menu.Items` components to provide built-in accessibility features like keyboard navigation and ARIA attribute management. The example shows how to style the components using Tailwind CSS utility classes and includes active and disabled states for menu items, abstracting away complex accessibility logic.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/blog/headless-ui-unstyled-accessible-ui-components/index.mdx#_snippet_0

LANGUAGE: jsx
CODE:
```
import { Menu } from "@headlessui/react";

function MyDropdown() {
  return (
    <Menu as="div" className="relative">
      <Menu.Button className="rounded bg-blue-600 px-4 py-2 text-white ...">Options</Menu.Button>
      <Menu.Items className="absolute right-0 mt-1">
        <Menu.Item>
          {({ active }) => (
            <a className={`${active && "bg-blue-500 text-white"} ...`} href="/account-settings">
              Account settings
            </a>
          )}
        </Menu.Item>
        <Menu.Item>
          {({ active }) => (
            <a className={`${active && "bg-blue-500 text-white"} ...`} href="/documentation">
              Documentation
            </a>
          )}
        </Menu.Item>
        <Menu.Item disabled>
          <span className="opacity-75 ...">Invite a friend (coming soon!)</span>
        </Menu.Item>
      </Menu.Items>
    </Menu>
  );
}
```

----------------------------------------

TITLE: Importing Tailwind CSS in Main CSS File (PostCSS Flow) - CSS
DESCRIPTION: This CSS snippet imports the Tailwind CSS framework into your main application stylesheet, making its utility classes available when processed by PostCSS.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/blog/tailwindcss-v4-alpha/index.mdx#_snippet_16

LANGUAGE: css
CODE:
```
/* [!code filename:app.css] */
@import "tailwindcss";
```

----------------------------------------

TITLE: Migrate Tailwind CSS Imports to v4
DESCRIPTION: In Tailwind CSS v4, the `@tailwind` directives are removed. Instead, import Tailwind using a regular CSS `@import` statement.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/docs/upgrade-guide.mdx#_snippet_4

LANGUAGE: css
CODE:
```
@import "tailwindcss";
```

----------------------------------------

TITLE: Building a Responsive Component with Tailwind Utility Classes
DESCRIPTION: This example demonstrates a fully responsive UI component built entirely with Tailwind CSS utility classes. It showcases how to apply styles for different screen sizes, as well as interactive states like hover and active, without writing custom CSS.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/docs/styling-with-utility-classes.mdx#_snippet_2

LANGUAGE: jsx
CODE:
```
<div className="mx-auto max-w-sm space-y-2 rounded-xl bg-white px-8 py-8 shadow-lg ring ring-black/5 @sm:flex @sm:items-center @sm:space-y-0 @sm:gap-x-6 @sm:py-4">
      <img
        className="mx-auto block h-24 rounded-full @sm:mx-0 @sm:shrink-0"
        src={erinLindford.src}
        alt="Woman's Face"
      />
      <div className="space-y-2 text-center @sm:text-left">
        <div className="space-y-0.5">
          <p className="text-lg font-semibold text-black">Erin Lindford</p>
          <p className="font-medium text-gray-500">Product Engineer</p>
        </div>
        <button className="rounded-full border border-purple-200 px-4 py-1 text-sm font-semibold text-purple-600 hover:border-transparent hover:bg-purple-600 hover:text-white active:bg-purple-700">
          Message
        </button>
      </div>
    </div>
```

LANGUAGE: html
CODE:
```
<!-- [!code classes:sm:flex-row,sm:py-4,sm:gap-6,sm:mx-0,sm:shrink-0,sm:text-left,sm:items-center] -->
<!-- [!code classes:hover:text-white,hover:bg-purple-600,hover:border-transparent,active:bg-purple-700] -->
<div class="flex flex-col gap-2 p-8 sm:flex-row sm:items-center sm:gap-6 sm:py-4 ...">
  <img class="mx-auto block h-24 rounded-full sm:mx-0 sm:shrink-0" src="/img/erin-lindford.jpg" alt="" />
  <div class="space-y-2 text-center sm:text-left">
    <div class="space-y-0.5">
      <p class="text-lg font-semibold text-black">Erin Lindford</p>
      <p class="font-medium text-gray-500">Product Engineer</p>
    </div>
    <!-- prettier-ignore -->
    <button class="border-purple-200 text-purple-600 hover:border-transparent hover:bg-purple-600 hover:text-white active:bg-purple-700 ...">
      Message
    </button>
  </div>
</div>
```

----------------------------------------

TITLE: Configure Vite for Tailwind CSS v4
DESCRIPTION: If you're using Vite, migrate from the PostCSS plugin to the new dedicated `@tailwindcss/vite` plugin for improved performance and developer experience.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/docs/upgrade-guide.mdx#_snippet_2

LANGUAGE: ts
CODE:
```
import { defineConfig } from "vite";
import tailwindcss from "@tailwindcss/vite";

export default defineConfig({
  plugins: [
    tailwindcss()
  ]
});
```

----------------------------------------

TITLE: Using Headless UI Listbox as Uncontrolled Component with defaultValue (React)
DESCRIPTION: This snippet illustrates how to use Headless UI's Listbox component as an uncontrolled component in React by providing a 'defaultValue' instead of a 'value'. This approach is beneficial for traditional HTML forms or APIs that collect state via FormData, simplifying state management. It requires the @headlessui/react dependency.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/blog/2022-09-09-new-personal-website-heroicons-2-headless-ui-v17/index.mdx#_snippet_2

LANGUAGE: jsx
CODE:
```
import { Listbox } from "@headlessui/react";

const people = [
  { id: 1, name: "Durward Reynolds" },
  { id: 2, name: "Kenton Towne" },
  { id: 3, name: "Therese Wunsch" },
  { id: 4, name: "Benedict Kessler" },
  { id: 5, name: "Katelyn Rohan" }
];

function Example() {
  return (
    <form action="/projects/1/assignee" method="post">
      <Listbox name="assignee" defaultValue={people[0]}>
        <Listbox.Button>{({ value }) => value.name}</Listbox.Button>
        <Listbox.Options>
          {people.map((person) => (
            <Listbox.Option key={person.id} value={person}>
              {person.name}
            </Listbox.Option>
          ))}
        </Listbox.Options>
      </Listbox>
      <button>Submit</button>
    </form>
  );
}
```

----------------------------------------

TITLE: Style child elements based on parent state using Tailwind CSS `group-*` variants
DESCRIPTION: Describes how to use the `group` class on a parent element and `group-*` variants (e.g., `group-hover`) on child elements to apply styles based on the parent's state. It illustrates with an example where hovering over a card changes the color of text and an SVG inside it. This pattern works with every pseudo-class variant, such as `group-focus` or `group-active`.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/docs/hover-focus-and-other-states.mdx#_snippet_15

LANGUAGE: jsx
CODE:
```
<a
  href="#"
  className="group mx-auto block max-w-xs space-y-3 rounded-lg bg-white p-4 shadow-lg ring-1 ring-gray-900/5 hover:bg-sky-500 hover:ring-sky-500 dark:bg-white/5 dark:ring-white/10"
>
  <div className="flex items-center space-x-3">
    <svg className="h-6 w-6 stroke-sky-500 group-hover:stroke-white" fill="none" viewBox="0 0 24 24">
      <path
        strokeLinecap="round"
        strokeLinejoin="round"
        strokeWidth="2"
        d="M11 19H6.931A1.922 1.922 0 015 17.087V8h12.069C18.135 8 19 8.857 19 9.913V11"
      />
      <path
        strokeLinecap="round"
        strokeLinejoin="round"
        strokeWidth="2"
        d="M14 7.64L13.042 6c-.36-.616-1.053-1-1.806-1H7.057C5.921 5 5 5.86 5 6.92V11M17 15v4M19 17h-4"
      />
    </svg>
    <div className="text-sm font-semibold text-gray-900 group-hover:text-white dark:text-white">New project</div>
  </div>
  <p className="text-sm text-gray-500 group-hover:text-white dark:text-gray-400">
    Create a new project from a variety of starting templates.
  </p>
</a>
```

LANGUAGE: html
CODE:
```
<!-- [!code classes:group-hover:stroke-white] -->
<!-- [!code classes:group-hover:text-white] -->
<!-- [!code classes:group-hover:text-white] -->
<!-- [!code classes:group] -->
<a href="#" class="group ...">
  <div>
    <svg class="stroke-sky-500 group-hover:stroke-white ..." fill="none" viewBox="0 0 24 24">
      <!-- ... -->
    </svg>
    <h3 class="text-gray-900 group-hover:text-white ...">New project</h3>
  </div>
  <p class="text-gray-500 group-hover:text-white ...">Create a new project from a variety of starting templates.</p>
</a>
```

----------------------------------------

TITLE: Using Arbitrary Dynamic Variant Value in HTML
DESCRIPTION: This HTML snippet shows how to use an arbitrary value, `top-start`, with the custom `placement-*` dynamic variant. This allows for flexible styling based on values not explicitly defined in the `matchVariant` plugin configuration.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/blog/tailwindcss-v3-2/index.mdx#_snippet_29

LANGUAGE: HTML
CODE:
```
<div class="placement-[top-start]:mb-2 ...">
  <!-- ... -->
</div>
```

----------------------------------------

TITLE: Tailwind CSS Arbitrary Max-Width Container Query
DESCRIPTION: The @max-[...] alias in Tailwind CSS allows for arbitrary max-width container queries, where '...' can be replaced with any custom width value. This provides flexibility for defining custom responsive breakpoints.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/docs/hover-focus-and-other-states.mdx#_snippet_159

LANGUAGE: CSS
CODE:
```
@container (width < ...)
```

----------------------------------------

TITLE: Updating Variant Stacking Order in Tailwind CSS v4
DESCRIPTION: Tailwind CSS v4 changes the application of stacked variants from right-to-left to left-to-right, mirroring CSS syntax. Projects should reverse the order of any order-sensitive stacked variants, such as direct child (*) or typography plugin variants, to adapt to this change.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/docs/upgrade-guide.mdx#_snippet_21

LANGUAGE: HTML
CODE:
```
<!-- prettier-ignore -->
<ul class="py-4 first:*:pt-0 last:*:pb-0">
<ul class="py-4 *:first:pt-0 *:last:pb-0">
  <li>One</li>
  <li>Two</li>
  <li>Three</li>
</ul>
```

----------------------------------------

TITLE: Aligning Dropdown Menu Items with Subgrid in Tailwind CSS HTML
DESCRIPTION: This example illustrates the practical application of `grid-cols-subgrid` for aligning items within a dropdown menu. By using subgrid, items with icons can be aligned with those without, ensuring consistent text alignment across all menu options, which is crucial for a clean UI.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/blog/tailwindcss-v3-4/index.mdx#_snippet_10

LANGUAGE: HTML
CODE:
```
<div role="menu" class="grid grid-cols-[auto_1fr]">
  <!-- [!code word:grid-cols-subgrid] -->
  <a href="#" class="col-span-2 grid-cols-subgrid">
    <svg class="mr-2">...</svg>
    <span class="col-start-2">Account</span>
  </a>
  <a href="#" class="col-span-2 grid-cols-subgrid">
    <svg class="mr-2">...</svg>
    <span class="col-start-2">Settings</span>
  </a>
  <a href="#" class="col-span-2 grid-cols-subgrid">
    <span class="col-start-2">Sign out</span>
  </a>
</div>
```

----------------------------------------

TITLE: Styling Headless UI Listbox Options with Tailwind CSS Data Attributes (JSX)
DESCRIPTION: This snippet demonstrates how to style Headless UI `Listbox.Option` components using the new `data-headlessui-state` attributes and the `@headlessui/tailwindcss` plugin. It applies conditional Tailwind CSS classes based on the `ui-active` and `ui-selected` states, allowing for CSS-only styling without render props. The `key` and `value` props are used for component identification and data binding, while `CheckIcon` is conditionally displayed based on selection.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/blog/2022-09-09-new-personal-website-heroicons-2-headless-ui-v17/index.mdx#_snippet_3

LANGUAGE: jsx
CODE:
```
<Listbox.Option
  key={person.id}
  value={person}
  className="ui-active:bg-blue-500 ui-active:text-white ui-not-active:bg-white ui-not-active:text-black"
>
  <CheckIcon className="ui-selected:block hidden" />
  {person.name}
</Listbox.Option>
```

----------------------------------------

TITLE: Generated CSS for Dynamic Spacing Utilities - CSS
DESCRIPTION: This generated CSS snippet shows how Tailwind CSS v4.0 derives dynamic spacing utilities. It defines a `--spacing` CSS variable and then uses `calc()` to generate utility classes like `mt-8`, `w-17`, and `pr-29` based on multiples of this variable, enabling arbitrary spacing values out of the box.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/blog/tailwindcss-v4/index.mdx#_snippet_15

LANGUAGE: CSS
CODE:
```
@layer theme {
  :root {
    --spacing: 0.25rem;
  }
}

@layer utilities {
  .mt-8 {
    margin-top: calc(var(--spacing) * 8);
  }
  .w-17 {
    width: calc(var(--spacing) * 17);
  }
  .pr-29 {
    padding-right: calc(var(--spacing) * 29);
  }
}
```

----------------------------------------

TITLE: Applying Focus Ring Utilities in HTML
DESCRIPTION: This HTML snippet demonstrates the new `ring` utilities in Tailwind CSS, which provide a better alternative to the `outline` property for focus styles. Classes like `focus:ring-2`, `focus:ring-blue-300`, and `focus:ring-opacity-50` apply a customizable box-shadow ring on focus without affecting layout, improving accessibility and aesthetics.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/blog/tailwindcss-v2/index.mdx#_snippet_9

LANGUAGE: html
CODE:
```
<button class="focus:ring-opacity-50 focus:ring-2 focus:ring-blue-300 focus:outline-none ...">
  <!-- ... -->
</button>
```

----------------------------------------

TITLE: Enabling Dark Mode in Tailwind CSS Configuration
DESCRIPTION: This JavaScript snippet demonstrates how to enable dark mode in Tailwind CSS by setting the `darkMode` property to `media` in `tailwind.config.js`. This configuration allows Tailwind to automatically apply dark mode styles based on the user's operating system preference.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/blog/tailwindcss-v2/index.mdx#_snippet_3

LANGUAGE: js
CODE:
```
module.exports = {
  darkMode: "media",
  // ...
};
```

----------------------------------------

TITLE: Loading JavaScript Config Files in Tailwind CSS v4
DESCRIPTION: Explains how to explicitly load a JavaScript config file in Tailwind CSS v4 using the `@config` directive, as automatic detection is no longer supported. Note that some options like `corePlugins`, `safelist`, and `separator` are not supported in v4.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/docs/upgrade-guide.mdx#_snippet_27

LANGUAGE: CSS
CODE:
```
@config "../../tailwind.config.js";
```

----------------------------------------

TITLE: Implementing RTL and LTR Layout Modifiers with Tailwind CSS
DESCRIPTION: This section illustrates the use of Tailwind CSS's `rtl` and `ltr` modifiers for creating multi-directional layouts. It demonstrates how these modifiers can adjust element positioning and spacing based on the text direction, ensuring proper alignment for both left-to-right and right-to-left content.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/blog/tailwindcss-v3/index.mdx#_snippet_11

LANGUAGE: JSX
CODE:
```
<div className="mx-auto grid max-w-lg grid-cols-1 gap-x-6 gap-y-10 sm:grid-cols-2">
      <div dir="ltr">
        <p className="mb-4 text-sm font-medium text-slate-500 dark:text-slate-400">Left-to-right</p>
        <div className="group flex items-center">
          <img
            className="h-12 w-12 shrink-0 rounded-full"
            src="https://images.unsplash.com/photo-1472099645785-5658abf4ff4e?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=facearea&facepad=2&w=256&h=256&q=80"
            alt=""
          />
          <div className="ml-3 rtl:mr-3 rtl:ml-0">
            <p className="text-sm font-medium text-slate-700 group-hover:text-slate-900 dark:text-slate-300 dark:group-hover:text-white">
              <>Tom Cook</>
            </p>
            <p className="text-sm font-medium text-slate-500 group-hover:text-slate-700 dark:group-hover:text-slate-300">
              <>Director of Operations</>
            </p>
          </div>
        </div>
      </div>
      <div dir="rtl">
        <p className="mb-4 text-sm font-medium text-slate-500 dark:text-slate-400">Right-to-left</p>
        <div className="group flex items-center">
          <img
            className="h-12 w-12 shrink-0 rounded-full"
            src="https://images.unsplash.com/photo-1563833717765-00462801314e?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=facearea&facepad=2&w=256&h=256&q=80"
            alt=""
          />
          <div className="ml-3 rtl:mr-3 rtl:ml-0">
            <p className="text-sm font-medium text-slate-700 group-hover:text-slate-900 dark:text-slate-300 dark:group-hover:text-white">
              <>تامر كرم</>
            </p>
            <p className="text-sm font-medium text-slate-500 group-hover:text-slate-700 dark:group-hover:text-slate-300">
              <>الرئيس التنفيذي</>
            </p>
          </div>
        </div>
      </div>
    </div>
```

LANGUAGE: HTML
CODE:
```
<div class="group flex items-center">
  <img class="h-12 w-12 shrink-0 rounded-full" src="..." alt="" />
  >
  <!-- [!code highlight:2] -->
  <div class="ltr:ml-3 rtl:mr-3">
    <p class="text-sm font-medium text-slate-700 group-hover:text-slate-900">...</p>
    <p class="text-sm font-medium text-slate-500 group-hover:text-slate-700">...</p>
  </div>
</div>
```

----------------------------------------

TITLE: Applying Viewport-Based Responsive Breakpoints in Tailwind CSS
DESCRIPTION: Shows how to use Tailwind CSS's responsive variants (`md`, `lg`) to change an element's styling based on the viewport width. This example dynamically adjusts a grid's column count for different screen sizes.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/docs/hover-focus-and-other-states.mdx#_snippet_36

LANGUAGE: HTML
CODE:
```
<div class="grid grid-cols-3 md:grid-cols-4 lg:grid-cols-6">
  <!-- ... -->
</div>
```

----------------------------------------

TITLE: Update Space-between Selector for Performance
DESCRIPTION: Explains the change in the `space-x-*` and `space-y-*` utility selectors to address performance issues on large pages. The CSS shows the 'before' and 'now' selector logic. The HTML provides a migration example, recommending flex or grid layout with `gap` instead of `space-y-*` for better control and performance.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/docs/upgrade-guide.mdx#_snippet_11

LANGUAGE: css
CODE:
```
/* Before */
.space-y-4 > :not([hidden]) ~ :not([hidden]) {
  margin-top: 1rem;
}

/* Now */
.space-y-4 > :not(:last-child) {
  margin-bottom: 1rem;
}
```

LANGUAGE: html
CODE:
```
<div class="space-y-4 p-4"> <!-- [!code --] -->
<div class="flex flex-col gap-4 p-4"> <!-- [!code ++] -->
  <label for="name">Name</label>
  <input type="text" name="name" />
</div>
```

----------------------------------------

TITLE: Implementing Basic Container Queries in HTML with Tailwind CSS
DESCRIPTION: This snippet demonstrates the basic syntax for applying container queries using the @tailwindcss/container-queries plugin. It shows how to define a container element with @container and then apply responsive styles within it using @lg:flex, which applies flex when the container reaches the lg breakpoint. This differentiates container queries from standard media queries.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/blog/tailwindcss-v3-2/index.mdx#_snippet_32

LANGUAGE: HTML
CODE:
```
<div class="@container">
  <div class="block @lg:flex">
    <!-- ... -->
  </div>
</div>
```

----------------------------------------

TITLE: Setting Percentage Maximum Width with Tailwind CSS HTML
DESCRIPTION: This snippet illustrates how to apply percentage-based maximum widths to elements using Tailwind CSS `max-w-full` or `max-w-<fraction>` utilities. These utilities allow elements to take up a specified percentage of their parent's width, ensuring responsive behavior. Examples include `max-w-9/10`, `max-w-3/4`, `max-w-1/2`, and `max-w-1/3`.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/docs/max-width.mdx#_snippet_32

LANGUAGE: html
CODE:
```
<!-- [!code classes:max-w-3/4,max-w-9/10,max-w-1/2,max-w-1/3] -->
<div class="w-full max-w-9/10 ...">max-w-9/10</div>
<div class="w-full max-w-3/4 ...">max-w-3/4</div>
<div class="w-full max-w-1/2 ...">max-w-1/2</div>
<div class="w-full max-w-1/3 ...">max-w-1/3</div>
```

----------------------------------------

TITLE: Simulating Fixed Header in React/JSX with Absolute Positioning
DESCRIPTION: This React/JSX snippet demonstrates how to create a scrollable container with a header that appears fixed, using `absolute` positioning within a `relative` parent. The `overflow-auto` class on the content area enables scrolling, while the header remains visible at the top. This pattern is useful for components that need a static header within a confined, scrollable region, rather than truly fixed to the viewport.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/docs/position.mdx#_snippet_4

LANGUAGE: jsx
CODE:
```
<div className="px-3">
  <div className="relative mx-auto h-80 max-w-md overflow-hidden bg-white shadow-lg ring-1 ring-gray-900/5 dark:bg-gray-800">
    <div className="absolute top-0 right-0 left-0 flex items-center bg-gray-50/90 px-4 py-3 text-sm font-semibold text-gray-900 ring-1 ring-gray-900/10 backdrop-blur-sm dark:bg-gray-700/90 dark:text-gray-200 dark:ring-black/10">
      Contacts
    </div>
    <div className="flex h-80 flex-col divide-y divide-gray-200 overflow-auto dark:divide-gray-200/5">
      <div className="flex items-center gap-4 p-4">
        <img
          className="size-12 rounded-full"
          src="https://images.unsplash.com/photo-1501196354995-cbb51c65aaea?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=facearea&facepad=4&w=256&h=256&q=80"
        />
        <strong className="text-sm font-medium text-gray-900 dark:text-gray-200">Andrew Alfred</strong>
      </div>
      <div className="flex items-center gap-4 p-4">
        <img
          className="size-12 rounded-full"
          src="https://images.unsplash.com/photo-1531123897727-8f129e1688ce?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=facearea&facepad=4&w=256&h=256&q=80"
        />
        <strong className="text-sm font-medium text-gray-900 dark:text-gray-200">Debra Houston</strong>
      </div>
      <div className="flex items-center gap-4 p-4">
        <img
          className="size-12 rounded-full"
          src="https://images.unsplash.com/photo-1517841905240-472988babdf9?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=facearea&facepad=4&w=256&h=256&q=80"
        />
        <strong className="text-sm font-medium text-gray-900 dark:text-gray-200">Jane White</strong>
      </div>
      <div className="flex items-center gap-4 p-4">
        <img
          className="size-12 rounded-full"
          src="https://images.unsplash.com/photo-1531427186611-ecfd6d936c79?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=facearea&facepad=4&w=256&h=256&q=80"
        />
        <strong className="text-sm font-medium text-gray-900 dark:text-gray-200">Ray Flint</strong>
      </div>
      <div className="flex items-center gap-4 p-4">
        <img
          className="size-12 rounded-full"
          src="https://images.unsplash.com/photo-1580489944761-15a19d654956?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=facearea&facepad=4&w=256&h=256&q=80"
        />
        <strong className="text-sm font-medium text-gray-900 dark:text-gray-200">Mindy Albrect</strong>
      </div>
      <div className="flex items-center gap-4 p-4">
        <img
          className="size-12 rounded-full"
          src="https://images.unsplash.com/photo-1492562080023-ab3db95bfbce?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=facearea&facepad=4&w=256&h=256&q=80"
        />
        <strong className="text-sm font-medium text-gray-900 dark:text-gray-200">David Arnold</strong>
      </div>
    </div>
  </div>
</div>
```

----------------------------------------

TITLE: Implementing Enter/Leave Animations with Headless UI Transition Component (React)
DESCRIPTION: This snippet demonstrates how to use the Headless UI `Transition` component in React to add enter and leave animations to an element. It leverages Tailwind CSS utility classes for defining animation properties like opacity and duration, making it easy to style transitions without being coupled to Tailwind. The `show` prop controls the visibility, triggering the animations.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/blog/building-react-and-vue-support-for-tailwind-ui/index.mdx#_snippet_1

LANGUAGE: JSX
CODE:
```
<Transition
  show={isOpen}
  enter="transition-opacity duration-75"
  enterFrom="opacity-0"
  enterTo="opacity-100"
  leave="transition-opacity duration-150"
  leaveFrom="opacity-100"
  leaveTo="opacity-0"
>
  I will fade in and out
</Transition>
```

----------------------------------------

TITLE: Avatar Group with Repeated Tailwind CSS Utility Classes
DESCRIPTION: This code demonstrates a common scenario where the same set of Tailwind CSS utility classes (`inline-block h-12 w-12 rounded-full ring-2 ring-white`) are repeated for multiple elements (avatar images) to achieve a consistent design.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/docs/styling-with-utility-classes.mdx#_snippet_25

LANGUAGE: JSX
CODE:
```
<div className="bg-white">
    <div className="mx-auto w-72 px-8 py-6 sm:w-96 sm:px-12 sm:py-8">
      <div className="flex items-center space-x-2 text-base">
        <h4 className="text-base font-semibold text-slate-900">Contributors</h4>
        <span className="rounded-full bg-slate-100 px-2 py-1 text-xs font-semibold text-slate-700">204</span>
      </div>
      <div className="mt-3 flex -space-x-2 overflow-hidden">
        <img
          className="inline-block h-12 w-12 rounded-full ring-2 ring-white"
          src="https://images.unsplash.com/photo-1491528323818-fdd1faba62cc?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=facearea&facepad=2&w=256&h=256&q=80"
          alt=""
        />
        <img
          className="inline-block h-12 w-12 rounded-full ring-2 ring-white"
          src="https://images.unsplash.com/photo-1550525811-e5869dd03032?ixlib=rb-1.2.1&auto=format&fit=facearea&facepad=2&w=256&h=256&q=80"
          alt=""
        />
        <img
          className="inline-block h-12 w-12 rounded-full ring-2 ring-white"
          src="https://images.unsplash.com/photo-1500648767791-00dcc994a43e?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=facearea&facepad=2.25&w=256&h=256&q=80"
          alt=""
        />
        <img
          className="inline-block h-12 w-12 rounded-full ring-2 ring-white"
          src="https://images.unsplash.com/photo-1472099645785-5658abf4ff4e?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=facearea&facepad=2&w=256&h=256&q=80"
          alt=""
        />
        <img
          className="inline-block h-12 w-12 rounded-full ring-2 ring-white"
          src="https://images.unsplash.com/photo-1517365830460-955ce3ccd263?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=facearea&facepad=2&w=256&h=256&q=80"
          alt=""
        />
      </div>
      <div className="mt-3 text-sm font-medium">
        <a href="#" className="text-blue-500">
          + 198 others
        </a>
      </div>
    </div>
  </div>
```

LANGUAGE: HTML
CODE:
```
<div>
  <div class="flex items-center space-x-2 text-base">
    <h4 class="font-semibold text-slate-900">Contributors</h4>
    <span class="bg-slate-100 px-2 py-1 text-xs font-semibold text-slate-700 ...">204</span>
  </div>
  <div class="mt-3 flex -space-x-2 overflow-hidden">
    <!-- prettier-ignore -->
    <img class="inline-block h-12 w-12 rounded-full ring-2 ring-white" src="https://images.unsplash.com/photo-1491528323818-fdd1faba62cc?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=facearea&facepad=2&w=256&h=256&q=80" alt="" />
    <!-- prettier-ignore -->
    <img class="inline-block h-12 w-12 rounded-full ring-2 ring-white" src="https://images.unsplash.com/photo-1550525811-e5869dd03032?ixlib=rb-1.2.1&auto=format&fit=facearea&facepad=2&w=256&h=256&q=80" alt="" />
    <!-- prettier-ignore -->
    <img class="inline-block h-12 w-12 rounded-full ring-2 ring-white" src="https://images.unsplash.com/photo-1500648767791-00dcc994a43e?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=facearea&facepad=2.25&w=256&h=256&q=80" alt="" />
    <!-- prettier-ignore -->
    <img class="inline-block h-12 w-12 rounded-full ring-2 ring-white" src="https://images.unsplash.com/photo-1472099645785-5658abf4ff4e?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=facearea&facepad=2&w=256&h=256&q=80" alt="" />
    <!-- prettier-ignore -->
    <img class="inline-block h-12 w-12 rounded-full ring-2 ring-white" src="https://images.unsplash.com/photo-1517365830460-955ce3ccd263?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=facearea&facepad=2&w=256&h=256&q=80" alt="" />
  </div>
  <div class="mt-3 text-sm font-medium">
    <a href="#" class="text-blue-500">+ 198 others</a>
  </div>
</div>
```

----------------------------------------

TITLE: Compiling Tailwind CSS with CLI Tool - Shell
DESCRIPTION: This shell command uses the @tailwindcss/cli to process app.css, which contains Tailwind imports, and outputs the compiled CSS to dist/app.css.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/blog/tailwindcss-v4-alpha/index.mdx#_snippet_19

LANGUAGE: sh
CODE:
```
npx @tailwindcss/cli@next -i app.css -o dist/app.css
```

----------------------------------------

TITLE: Use CSS Variables Without `var()` in Tailwind CSS
DESCRIPTION: This snippet demonstrates how to use CSS variables as arbitrary values in Tailwind CSS without explicitly wrapping them in `var()`. This simplifies the syntax for dynamic styles, especially when combined with pseudo-classes like `hover:`, allowing direct integration of values from sources like databases.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/blog/tailwindcss-v3-3/index.mdx#_snippet_25

LANGUAGE: js
CODE:
```
export function MyComponent({ company }) {
  return (
    <div
      style={{
        "--brand-color": company.brandColor,
        "--brand-hover-color": company.brandHoverColor,
      }}
      className="bg-[--brand-color] hover:bg-[--brand-hover-color]"
    />
  );
}
```

----------------------------------------

TITLE: Configuring Tailwind CSS with a Single Preset (JavaScript)
DESCRIPTION: This JavaScript snippet demonstrates how to configure Tailwind CSS to use a single custom preset. The `presets` array in `module.exports` specifies a base configuration, replacing Tailwind's default settings. This is useful for sharing common brand styles across multiple projects.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/blog/tailwindcss-1-9/index.mdx#_snippet_0

LANGUAGE: JavaScript
CODE:
```
module.exports = {
  presets: [require("@my-company/tailwind-base")],
  theme: {
    extend: {
      // Project specific overrides...
    }
  }
};
```

----------------------------------------

TITLE: Simplified Tailwind CSS Peer-Has-Checked Syntax
DESCRIPTION: This concise HTML snippet demonstrates the core usage of the `peer` class and `peer-has-checked:hidden` variant. It shows how a sibling element (an SVG icon) can be hidden when a checkbox nested within a `peer` labeled element is checked.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/docs/hover-focus-and-other-states.mdx#_snippet_13

LANGUAGE: HTML
CODE:
```
<!-- [!code classes:peer-has-checked:hidden,peer] -->
<div>
  <label class="peer ...">
    <input type="checkbox" name="todo[1]" checked />
    Create a to do list
  </label>
  <svg class="peer-has-checked:hidden ..."><!-- ... --></svg>
</div>
```

----------------------------------------

TITLE: Using Tailwind's `theme()` Function in CSS
DESCRIPTION: This CSS snippet illustrates the use of Tailwind's `theme()` function to retrieve values from the `tailwind.config.js` file. It applies configured border-radius, background color, and text color to a `.select2-dropdown` element, centralizing design token management.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/blog/tailwindcss-v3-1/index.mdx#_snippet_4

LANGUAGE: CSS
CODE:
```
.select2-dropdown {
  border-radius: theme(borderRadius.lg);
  background-color: theme(colors.gray.100);
  color: theme(colors.gray.900);
}
/* ... */
```

----------------------------------------

TITLE: Matching Dynamic Viewport Height with Tailwind CSS HTML
DESCRIPTION: This snippet demonstrates the `h-dvh` utility in Tailwind CSS, which sets an element's height to the dynamic viewport height. This height adjusts automatically based on the presence or absence of dynamic browser UI elements (like address bars on mobile), providing a more accurate 'visible' height.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/docs/height.mdx#_snippet_6

LANGUAGE: HTML
CODE:
```
<!-- [!code classes:h-dvh] -->
<div class="h-dvh">
  <!-- ... -->
</div>
```

----------------------------------------

TITLE: Understanding CSS Precedence with Conflicting Tailwind Utility Classes
DESCRIPTION: Explains how Tailwind CSS resolves conflicts when multiple utility classes target the same CSS property on an element. The class defined later in the stylesheet takes precedence, regardless of its order in the HTML `class` attribute.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/docs/styling-with-utility-classes.mdx#_snippet_30

LANGUAGE: html
CODE:
```
<!-- [!code filename:HTML] -->
<!-- prettier-ignore -->
<div class="grid flex">
  <!-- ... -->
</div>
```

LANGUAGE: css
CODE:
```
/* [!code filename: CSS] */
.flex {
  display: flex;
}
.grid {
  display: grid;
}
```

----------------------------------------

TITLE: Tailwind CSS Class Detection in a JSX Component
DESCRIPTION: Provides a JSX code example of a `Button` component to demonstrate how Tailwind CSS scans project files. It identifies potential class names (e.g., `px-4`, `py-2`, `rounded-md`) within the code to generate only the necessary CSS, rather than a large static stylesheet.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/docs/styling-with-utility-classes.mdx#_snippet_18

LANGUAGE: JSX
CODE:
```
export default function Button({ size, children }) {
  let sizeClasses = {
    md: "px-4 py-2 rounded-md text-base",
    lg: "px-5 py-3 rounded-lg text-lg",
  }[size];

  return (
    <button type="button" className={`font-bold ${sizeClasses}`}>
      {children}
    </button>
  );
}
```

----------------------------------------

TITLE: Configuring Prettier to Use Tailwind CSS Plugin
DESCRIPTION: This JSON snippet shows how to add the `prettier-plugin-tailwindcss` to your Prettier configuration file (e.g., `.prettierrc`). Including the plugin in the `plugins` array enables Prettier to automatically sort Tailwind CSS classes when formatting files.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/blog/automatic-class-sorting-with-prettier/index.mdx#_snippet_2

LANGUAGE: json
CODE:
```
{
  "plugins": ["prettier-plugin-tailwindcss"]
}
```

----------------------------------------

TITLE: Applying Custom Breakpoints in Tailwind CSS HTML
DESCRIPTION: This HTML snippet illustrates how to apply the previously defined custom breakpoints (`xs` and `3xl`) to an element using Tailwind CSS utility classes. It shows how `xs:grid-cols-2` and `3xl:grid-cols-6` modify the grid layout based on the custom breakpoint sizes.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/docs/responsive-design.mdx#_snippet_10

LANGUAGE: html
CODE:
```
<div class="grid xs:grid-cols-2 3xl:grid-cols-6">
  <!-- ... -->
</div>
```

----------------------------------------

TITLE: Applying arbitrary variants with at-rules like '@supports'
DESCRIPTION: Demonstrates the use of at-rules such as '@supports' within arbitrary variants. This example applies 'display: grid' only if the browser supports 'display: grid', otherwise it defaults to 'display: flex'.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/docs/hover-focus-and-other-states.mdx#_snippet_79

LANGUAGE: HTML
CODE:
```
<!-- [!code classes:[@supports(display:grid)]:grid] -->
      <div class="flex [@supports(display:grid)]:grid">
        <!-- ... -->
      </div>
```

LANGUAGE: CSS
CODE:
```
.\\[\\@supports\\(display\\:grid\\)\\]\\:grid {
        @supports (display:grid) {
          display: grid;
        }
      }
```

----------------------------------------

TITLE: Basic group-has-* Usage in HTML
DESCRIPTION: Illustrates the fundamental usage of the `group` class on a parent element and the `group-has-[selector]:` variant on a child element to conditionally apply styles. The SVG element is hidden by default and becomes visible if an `<a>` tag is present within the parent `div`.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/docs/hover-focus-and-other-states.mdx#_snippet_11

LANGUAGE: html
CODE:
```
<!-- [!code classes:group-has-[a]:block,group] -->
<div class="group ...">
  <img src="..." />
  <h4>Spencer Sharp</h4>
  <svg class="hidden group-has-[a]:block ..."><!-- ... --></svg>
  <p>Product Designer at <a href="...">planeteria.tech</a></p>
</div>
```

----------------------------------------

TITLE: Extended Arbitrary Value Support in HTML
DESCRIPTION: This HTML snippet illustrates the expanded arbitrary value support in Tailwind CSS, allowing developers to use custom values for various utilities. Examples include setting `col-start` to an arbitrary number, `object` position, and `placeholder` color using hexadecimal values.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/blog/tailwindcss-2-2/index.mdx#_snippet_15

LANGUAGE: HTML
CODE:
```
<div class="col-start-[73] object-[50%] placeholder-[#aabbcc] ..."></div>
```

----------------------------------------

TITLE: Styling Form Elements with Tailwind CSS
DESCRIPTION: Demonstrates how to apply Tailwind CSS classes to a radio button label for styling based on checked state, focus, and pointer type, including responsive adjustments for coarse pointers.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/docs/hover-focus-and-other-states.mdx#_snippet_48

LANGUAGE: HTML
CODE:
```
<label className="flex items-center justify-center rounded-md bg-white p-2 text-sm font-semibold text-gray-900 uppercase ring-1 ring-gray-300 not-data-focus:not-has-checked:ring-inset hover:bg-gray-50 has-checked:bg-indigo-600 has-checked:text-white has-checked:ring-0 has-checked:hover:bg-indigo-500 has-focus-visible:outline-2 has-focus-visible:outline-offset-2 has-focus-visible:outline-indigo-600 data-focus:ring-2 data-focus:ring-indigo-600 data-focus:ring-offset-2 data-focus:has-checked:ring-2 sm:flex-1 dark:bg-transparent dark:text-white dark:ring-white/20 dark:hover:bg-gray-950/50 pointer-coarse:p-4">
          <input type="radio" name="memory-option" value="128 GB" className="sr-only" />
          <span>128 GB</span>
        </label>
```

----------------------------------------

TITLE: Using `outline-white` and `outline-black` for General Purpose Focus Indicators (HTML)
DESCRIPTION: This example illustrates the use of `outline-white` and `outline-black` utilities to create unobtrusive focus indicators. These utilities render a 2px dotted outline with a 2px offset, providing clear visual feedback for keyboard users while maintaining sufficient contrast on both dark and light backgrounds.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/blog/tailwindcss-1-9/index.mdx#_snippet_4

LANGUAGE: HTML
CODE:
```
<!-- Use `outline-white` on dark backgrounds -->
<div class="bg-gray-900">
  <button class="focus:outline-white ...">
    <!-- ... -->
  </button>
</div>

<!-- Use `outline-black` on light backgrounds -->
<div class="bg-white">
  <button class="focus:outline-black ...">
    <!-- ... -->
  </button>
</div>
```

----------------------------------------

TITLE: Defining Slate Oklch Color Palette in CSS
DESCRIPTION: This snippet defines a range of slate color shades using CSS custom properties and the Oklch color function. These variables are valuable for establishing a neutral yet distinct color scheme, providing a standardized way to apply slate colors across different UI elements.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/docs/colors.mdx#_snippet_26

LANGUAGE: CSS
CODE:
```
--color-slate-50: oklch(0.984 0.003 247.858);
--color-slate-100: oklch(0.968 0.007 247.896);
--color-slate-200: oklch(0.929 0.013 255.508);
--color-slate-300: oklch(0.869 0.022 252.894);
--color-slate-400: oklch(0.704 0.04 256.788);
--color-slate-500: oklch(0.554 0.046 257.417);
--color-slate-600: oklch(0.446 0.043 257.281);
--color-slate-700: oklch(0.372 0.044 257.287);
--color-slate-800: oklch(0.279 0.041 260.031);
--color-slate-900: oklch(0.208 0.042 265.755);
--color-slate-950: oklch(0.129 0.042 264.695);
```

----------------------------------------

TITLE: Basic Text Color Usage in React/JSX
DESCRIPTION: This React/JSX snippet demonstrates applying basic text color utilities like `text-blue-600` and `dark:text-sky-400` to a paragraph element, showcasing how to set text color for different themes within a React component.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/docs/color.mdx#_snippet_1

LANGUAGE: jsx
CODE:
```
<div className="relative text-center text-xl leading-6 font-medium">
  <p className="text-blue-600 dark:text-sky-400">The quick brown fox jumps over the lazy dog.</p>
</div>
```

----------------------------------------

TITLE: Implementing Basic Container Queries in Tailwind CSS HTML
DESCRIPTION: This HTML snippet illustrates the basic usage of Tailwind CSS container queries. It marks a parent element with `@container` and then applies responsive styles to its children using `@md:flex-row`, which changes the flex direction when the container reaches its medium size.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/docs/responsive-design.mdx#_snippet_14

LANGUAGE: html
CODE:
```
<div class="@container">
  <div class="flex flex-col @md:flex-row">
    <!-- ... -->
  </div>
</div>
```

----------------------------------------

TITLE: Tailwind CSS Configuration in ESM and TypeScript
DESCRIPTION: Example configuration files for Tailwind CSS, demonstrating both ES Module (JavaScript) and TypeScript syntax. These configurations define content sources, theme extensions, and plugins for a Tailwind project, leveraging modern module systems and type safety.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/blog/tailwindcss-v3-3/index.mdx#_snippet_1

LANGUAGE: javascript
CODE:
```
/** @type {import('tailwindcss').Config} */
export default {
  content: [],
  theme: {
    extend: {},
  },
  plugins: [],
};
```

LANGUAGE: typescript
CODE:
```
import type { Config } from 'tailwindcss'

export default {
  content: [],
  theme: {
    extend: {},
  },
  plugins: [],
} satisfies Config
```

----------------------------------------

TITLE: Tailwind CSS: Adding Base Styles via HTML Element Classes
DESCRIPTION: The simplest way to apply global default styles, such as text color, background color, or font family, is by adding Tailwind CSS classes directly to the html or body elements. This keeps your base styling decisions co-located with your markup. It provides a quick and declarative method for setting page-wide defaults.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/docs/adding-custom-styles.mdx#_snippet_17

LANGUAGE: HTML
CODE:
```
<!doctype html>
<html lang="en" class="bg-gray-100 font-serif text-gray-900">
  <!-- ... -->
</html>
```

----------------------------------------

TITLE: Implementing Sticky Headers with Tailwind CSS in HTML
DESCRIPTION: This HTML snippet demonstrates how to create sticky headers within a scrollable container using Tailwind CSS's `sticky` utility. Elements with `sticky` and `top-0` will remain at the top of their parent container when scrolled past, until the parent itself scrolls out of view. This is commonly used for navigation bars or section headers in a list.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/docs/position.mdx#_snippet_6

LANGUAGE: HTML
CODE:
```
<div className="px-3">\n  <div className="relative mx-auto -my-px h-80 max-w-md overflow-auto bg-white shadow-lg ring-1 ring-gray-900/5 dark:bg-gray-800">\n    <div className="relative">\n      <div className="sticky top-0 flex items-center bg-gray-50/90 px-4 py-3 text-sm font-semibold text-gray-900 ring-1 ring-gray-900/10 backdrop-blur-sm dark:bg-gray-700/90 dark:text-gray-200 dark:ring-black/10">\n        A\n      </div>\n      <div className="divide-y divide-gray-200 dark:divide-gray-200/5">\n        <div className="flex items-center gap-4 p-4">\n          <img\n            className="size-12 rounded-full"\n            src="https://images.unsplash.com/photo-1501196354995-cbb51c65aaea?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=facearea&facepad=4&w=256&h=256&q=80"\n          />\n          <strong className="text-sm font-medium text-gray-900 dark:text-gray-200">Andrew Alfred</strong>\n        </div>\n        <div className="flex items-center gap-4 p-4">\n          <img\n            className="size-12 rounded-full"\n            src="https://images.unsplash.com/photo-1531123897727-8f129e1688ce?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=facearea&facepad=4&w=256&h=256&q=80"\n          />\n          <strong className="text-sm font-medium text-gray-900 dark:text-gray-200">Aisha Houston</strong>\n        </div>\n        <div className="flex items-center gap-4 p-4">\n          <img\n            className="size-12 rounded-full"\n            src="https://images.unsplash.com/photo-1517841905240-472988babdf9?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=facearea&facepad=4&w=256&h=256&q=80"\n          />\n          <strong className="text-sm font-medium text-gray-900 dark:text-gray-200">Anna White</strong>\n        </div>\n        <div className="flex items-center gap-4 p-4">\n          <img\n            className="size-12 rounded-full"\n            src="https://images.unsplash.com/photo-1531427186611-ecfd6d936c79?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=facearea&facepad=4&w=256&h=256&q=80"\n          />\n          <strong className="text-sm font-medium text-gray-900 dark:text-gray-200">Andy Flint</strong>\n        </div>\n      </div>\n    </div>\n    <div className="relative">\n      <div className="sticky top-0 flex items-center bg-gray-50/90 px-4 py-3 text-sm font-semibold text-gray-900 ring-1 ring-gray-900/10 backdrop-blur-sm dark:bg-gray-700/90 dark:text-gray-200 dark:ring-black/10">\n        B\n      </div>\n      <div className="divide-y divide-gray-200 dark:divide-gray-200/5">\n        <div className="flex items-center gap-4 p-4">\n          <img\n            className="size-12 rounded-full"\n            src="https://images.unsplash.com/photo-1501196354995-cbb51c65aaea?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=facearea&facepad=4&w=256&h=256&q=80"\n          />\n          <strong className="text-sm font-medium text-gray-900 dark:text-gray-200">Bob Alfred</strong>\n        </div>\n        <div className="flex items-center gap-4 p-4">\n          <img\n            className="size-12 rounded-full"\n            src="https://images.unsplash.com/photo-1531123897727-8f129e1688ce?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=facearea&facepad=4&w=256&h=256&q=80"\n          />\n          <strong className="text-sm font-medium text-gray-900 dark:text-gray-200">Bianca Houston</strong>\n        </div>\n        <div className="flex items-center gap-4 p-4">\n          <img\n            className="size-12 rounded-full"\n            src="https://images.unsplash.com/photo-1517841905240-472988babdf9?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=facearea&facepad=4&w=256&h=256&q=80"\n          />\n          <strong className="text-sm font-medium text-gray-900 dark:text-gray-200">Brianna White</strong>\n        </div>\n        <div className="flex items-center gap-4 p-4">\n          <img\n            className="size-12 rounded-full"\n            src="https://images.unsplash.com/photo-1531427186611-ecfd6d936c79?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=facearea&facepad=4&w=256&h=256&q=80"\n          />\n          <strong className="text-sm font-medium text-gray-900 dark:text-gray-200">Bert Flint</strong>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>
```

----------------------------------------

TITLE: Apply Arbitrary Values in Tailwind CSS with Square Brackets
DESCRIPTION: Illustrates how to use Tailwind's square bracket notation to apply arbitrary CSS values directly to utility classes, such as top: 117px. This is useful for precise positioning or values not covered by the default design system.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/docs/adding-custom-styles.mdx#_snippet_1

LANGUAGE: html
CODE:
```
<div class="top-[117px]">
  <!-- ... -->
</div>
```

----------------------------------------

TITLE: Conditional Styling with supports-[display:grid] (HTML)
DESCRIPTION: This HTML snippet demonstrates using the `supports-[...]` variant to apply `grid` display only if the browser supports CSS Grid. The `flex` class is applied by default, providing a fallback for browsers without grid support.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/blog/tailwindcss-v3-2/index.mdx#_snippet_3

LANGUAGE: html
CODE:
```
<div class="flex supports-[display:grid]:grid ...">
  <!-- ... -->
</div>
```

----------------------------------------

TITLE: Creating a Block-Level Grid Container with Tailwind CSS
DESCRIPTION: This snippet demonstrates how to use the `grid` utility class in Tailwind CSS to create a block-level grid container. It defines a 3x3 grid using `grid-cols-3` and `grid-rows-3`, with `gap-4` for spacing between grid items. This utility is essential for building complex, responsive layouts.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/docs/display.mdx#_snippet_8

LANGUAGE: JSX
CODE:
```
<div className="relative grid grid-cols-3 grid-rows-3 gap-4 rounded-lg text-center font-mono text-sm leading-6 font-bold text-white">
      <div className="absolute inset-0">
        <Stripes border className="h-full rounded-lg" />
      </div>
      <div className="relative rounded-lg bg-fuchsia-500 p-4">01</div>
      <div className="relative rounded-lg bg-fuchsia-500 p-4">02</div>
      <div className="relative rounded-lg bg-fuchsia-500 p-4">03</div>
      <div className="relative rounded-lg bg-fuchsia-500 p-4">04</div>
      <div className="relative rounded-lg bg-fuchsia-500 p-4">05</div>
      <div className="relative rounded-lg bg-fuchsia-500 p-4">06</div>
      <div className="relative rounded-lg bg-fuchsia-500 p-4">07</div>
      <div className="relative rounded-lg bg-fuchsia-500 p-4">08</div>
      <div className="relative rounded-lg bg-fuchsia-500 p-4">09</div>
    </div>
```

LANGUAGE: HTML
CODE:
```
<div class="grid grid-cols-3 grid-rows-3 gap-4">
  <!-- ... -->
</div>
```

----------------------------------------

TITLE: Configuring Tailwind CSS with TypeScript Types
DESCRIPTION: This JavaScript configuration file for Tailwind CSS includes a JSDoc type annotation to enable first-party TypeScript type checking. This provides IDE support for the configuration object, making it easier to define content paths, extend themes, and add plugins with autocompletion and validation.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/blog/tailwindcss-v3-1/index.mdx#_snippet_1

LANGUAGE: js
CODE:
```
/** @type {import('tailwindcss').Config} */
module.exports = {
  content: [
    // ...
  ],
  theme: {
    extend: {},
  },
  plugins: []
};
```

----------------------------------------

TITLE: Tailwind CSS v3 to v4 Utility Renames Reference
DESCRIPTION: Provides a comprehensive mapping of renamed utility classes in Tailwind CSS v4, including changes to shadow, drop-shadow, blur, backdrop-blur, rounded, outline, and ring utilities, to ensure consistency and predictability.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/docs/upgrade-guide.mdx#_snippet_6

LANGUAGE: APIDOC
CODE:
```
v3             | v4
---------------|---------------
shadow-sm      | shadow-xs
shadow         | shadow-sm
drop-shadow-sm | drop-shadow-xs
drop-shadow    | drop-shadow-sm
blur-sm        | blur-xs
blur           | blur-sm
backdrop-blur-sm | backdrop-blur-xs
backdrop-blur  | backdrop-blur-sm
rounded-sm     | rounded-xs
rounded        | rounded-sm
outline-none   | outline-hidden
ring           | ring-3
```

----------------------------------------

TITLE: Configuring and Using Prefixes in Tailwind CSS v4
DESCRIPTION: Tailwind CSS v4 introduces a new syntax for prefixes, resembling variants and appearing at the beginning of class names. While class names include prefixes, theme variables should be configured without them, as the generated CSS variables will automatically include the prefix to prevent conflicts.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/docs/upgrade-guide.mdx#_snippet_19

LANGUAGE: HTML
CODE:
```
<div class="tw:flex tw:bg-red-500 tw:hover:bg-red-600">
  <!-- ... -->
</div>
```

LANGUAGE: CSS
CODE:
```
@import "tailwindcss" prefix(tw);

@theme {
  --font-display: "Satoshi", "sans-serif";

  --breakpoint-3xl: 120rem;

  --color-avocado-100: oklch(0.99 0 0);
  --color-avocado-200: oklch(0.98 0.04 113.22);
  --color-avocado-300: oklch(0.94 0.11 115.03);

  /* ... */
}
```

LANGUAGE: CSS
CODE:
```
:root {
  --tw-font-display: "Satoshi", "sans-serif";

  --tw-breakpoint-3xl: 120rem;

  --tw-color-avocado-100: oklch(0.99 0 0);
  --tw-color-avocado-200: oklch(0.98 0.04 113.22);
  --tw-color-avocado-300: oklch(0.94 0.11 115.03);

  /* ... */
}
```

----------------------------------------

TITLE: Enabling Dark Mode for Typography with Tailwind CSS
DESCRIPTION: This HTML snippet demonstrates how to apply dark mode styles to an article's typography. By adding `dark:prose-invert` to the `article` element, the typography colors automatically adapt to a dark theme when the `dark` class is active on the body.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/blog/tailwindcss-typography-v0-5/index.mdx#_snippet_1

LANGUAGE: html
CODE:
```
<body class="bg-white dark:bg-gray-900">
  <article class="prose dark:prose-invert">{{ markdown }}</article>
</body>
```

----------------------------------------

TITLE: Supporting Reduced Motion with Tailwind CSS
DESCRIPTION: This HTML snippet shows how to use `motion-reduce` variants to conditionally disable transitions and transforms for users who prefer reduced motion. It ensures a smoother experience for accessibility-conscious users.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/docs/transition-property.mdx#_snippet_10

LANGUAGE: HTML
CODE:
```
<button class="transform transition hover:-translate-y-1 motion-reduce:transition-none motion-reduce:hover:transform-none ...">
  <!-- ... -->
</button>
```

----------------------------------------

TITLE: Apply responsive grid columns with Tailwind CSS
DESCRIPTION: This HTML snippet demonstrates how to use Tailwind CSS's responsive prefixes to apply `grid-cols-3` only at the `sm` breakpoint and above. The `sm:` prefix ensures the style is conditional, allowing for adaptive layouts.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/docs/styling-with-utility-classes.mdx#_snippet_7

LANGUAGE: html
CODE:
```
<div class="grid grid-cols-2 sm:grid-cols-3">
  <!-- ... -->
</div>
```

----------------------------------------

TITLE: Avoiding Dynamic Class Names in HTML with Tailwind
DESCRIPTION: This HTML snippet illustrates an incorrect way to construct class names dynamically using interpolation. Tailwind CSS scans files as plain text and cannot understand string concatenation, meaning `text-red-600` and `text-green-600` will not be detected, leading to missing styles.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/docs/detecting-classes-in-source-files.mdx#_snippet_1

LANGUAGE: HTML
CODE:
```
<div class="text-{{ error ? 'red' : 'green' }}-600"></div>
```

----------------------------------------

TITLE: Compiling Tailwind CSS with New CLI and JIT Mode
DESCRIPTION: This command demonstrates the usage of the new high-performance Tailwind CLI. It compiles your CSS, outputs it to `dist/tailwind.css`, enables watch mode for automatic rebuilding on changes, activates Just-in-Time (JIT) mode for on-demand compilation, and purges unused CSS by scanning HTML files within the `src` directory.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/blog/tailwindcss-2-2/index.mdx#_snippet_1

LANGUAGE: sh
CODE:
```
npx tailwindcss -o dist/tailwind.css --watch --jit --purge="./src/**/*.html"
```

----------------------------------------

TITLE: Creating a User List with Headless UI Dropdown Menu in React
DESCRIPTION: This React component displays a list of 'people' data, where each person's entry includes an image, name, email, and an interactive dropdown menu. It utilizes `@headlessui/react` for the `Menu` and `Transition` components to manage dropdown state and animations, and `@heroicons/react/solid` for the vertical dots icon. The `classNames` utility (assumed to be imported or defined elsewhere) is used for conditional Tailwind CSS styling based on menu item active state.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/blog/building-react-and-vue-support-for-tailwind-ui/index.mdx#_snippet_5

LANGUAGE: javascript
CODE:
```
import { Menu, Transition } from "@headlessui/react";
import { DotsVerticalIcon } from "@heroicons/react/solid";
import { Fragment } from "react";

const people = [
  {
    name: "Calvin Hawkins",
    email: "calvin.hawkins@example.com",
    image:
      "https://images.unsplash.com/photo-1491528323818-fdd1faba62cc?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=facearea&facepad=2&w=256&h=256&q=80",
  },
  {
    name: "Kristen Ramos",
    email: "kristen.ramos@example.com",
    image:
      "https://images.unsplash.com/photo-1550525811-e5869dd03032?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=facearea&facepad=2&w=256&h=256&q=80",
  },
  {
    name: "Ted Fox",
    email: "ted.fox@example.com",
    image:
      "https://images.unsplash.com/photo-1500648767791-00dcc994a43e?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=facearea&facepad=2&w=256&h=256&q=80",
  },
];

export default function Example() {
  return (
    <ul className="divide-y divide-gray-200">
      {people.map((person) => (
        <li key={person.email} className="flex py-4">
          <img className="h-10 w-10 rounded-full" src={person.image.src} alt="" />
          <div className="ml-3">
            <p className="text-sm font-medium text-gray-900">{person.name}</p>
            <p className="text-sm text-gray-500">{person.email}</p>
          </div>
          <Menu as="div" className="relative ml-3 inline-block text-left">
            {({ open }) => (
              <>
                <div>
                  <Menu.Button className="flex items-center rounded-full bg-gray-100 text-gray-400 hover:text-gray-600 focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2 focus:ring-offset-gray-100 focus:outline-none">
                    <span className="sr-only">Open options</span>
                    <DotsVerticalIcon className="h-5 w-5" aria-hidden="true" />
                  </Menu.Button>
                </div>

                <Transition
                  show={open}
                  as={Fragment}
                  enter="transition ease-out duration-100"
                  enterFrom="transform opacity-0 scale-95"
                  enterTo="transform opacity-100 scale-100"
                  leave="transition ease-in duration-75"
                  leaveFrom="transform opacity-100 scale-100"
                  leaveTo="transform opacity-0 scale-95"
                >
                  <Menu.Items
                    static
                    className="ring-opacity-5 absolute right-0 mt-2 w-56 origin-top-right rounded-md bg-white shadow-lg ring-1 ring-black focus:outline-none"
                  >
                    <div className="py-1">
                      <Menu.Item>
                        {({ active }) => (
                          <a
                            href="#"
                            className={classNames(
                              active ? "bg-gray-100 text-gray-900" : "text-gray-700",
                              "block px-4 py-2 text-sm",
                            )}
                          >
                            View details
                          </a>
                        )}
                      </Menu.Item>
                      <Menu.Item>
                        {({ active }) => (
                          <a
                            href="#"
                            className={classNames(
                              active ? "bg-gray-100 text-gray-900" : "text-gray-700",
                              "block px-4 py-2 text-sm",
                            )}
                          >
                            Send message
                          </a>
                        )}
                      </Menu.Item>
                    </div>
                  </Menu.Items>
                </Transition>
              </>
            )}
          </Menu>
        </li>
      ))}
    </ul>
  );
}
```

----------------------------------------

TITLE: Updating Tailwind CSS to Latest Version (Shell)
DESCRIPTION: This command line snippet shows how to update the Tailwind CSS package to its latest stable version using npm, the Node.js package manager. This ensures access to the newest features and bug fixes without breaking changes for minor version updates.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/blog/tailwindcss-v3-1/index.mdx#_snippet_27

LANGUAGE: Shell
CODE:
```
npm install tailwindcss@latest
```

----------------------------------------

TITLE: Implementing Sticky Table Headers with Tailwind CSS (HTML)
DESCRIPTION: This HTML snippet demonstrates a table structure styled with Tailwind CSS to achieve sticky headers. It uses `border-separate` and `border-spacing-0` on the table element, along with `sticky top-0 z-10` on the table headers, to ensure the headers and their borders remain visible at the top of the viewport during vertical scrolling. This approach is crucial for correct border behavior with sticky elements.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/blog/tailwindcss-v3-1/index.mdx#_snippet_12

LANGUAGE: html
CODE:
```
<!-- [!code word:border-separate] -->
<!-- [!code word:border-spacing-0] -->
<table class="border-separate border-spacing-0">
  <thead class="bg-gray-50">
    <tr>
      <th class="sticky top-0 z-10 border-b border-gray-300 ...">Name</th>
      <th class="sticky top-0 z-10 border-b border-gray-300 ...">Email</th>
      <th class="sticky top-0 z-10 border-b border-gray-300 ...">Role</th>
    </tr>
  </thead>
  <tbody class="bg-white">
    <tr>
      <td class="border-b border-gray-200 ...">Courtney Henry</td>
      <td class="border-b border-gray-200 ...">courtney.henry@example.com</td>
      <td class="border-b border-gray-200 ...">Admin</td>
    </tr>
    <!-- ... -->
  </tbody>
</table>
```

----------------------------------------

TITLE: Applying User-Driven Form Validation Styles with Tailwind CSS
DESCRIPTION: This HTML snippet demonstrates how to use the new `user-valid` and `user-invalid` variants in Tailwind CSS to apply border styles (green for valid, red for invalid) to input fields only after the user has interacted with them, preventing immediate invalid state display on page load. The `required` attribute ensures validation is active.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/blog/tailwindcss-v4-1/index.mdx#_snippet_29

LANGUAGE: HTML
CODE:
```
<input required class="border user-valid:border-green-500" />
<input required class="border user-invalid:border-red-500" />
```

----------------------------------------

TITLE: Leveraging Modern CSS Features in Tailwind CSS v4.0
DESCRIPTION: This snippet demonstrates how Tailwind CSS v4.0 utilizes modern CSS features like native cascade layers (@layer), color-mix() for color manipulation, and registered custom properties (@property) for advanced styling capabilities. It shows examples of utility classes defined using these features, such as margin-inline for logical properties and color-mix() for opacity adjustments.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/blog/tailwindcss-v4/index.mdx#_snippet_3

LANGUAGE: CSS
CODE:
```
@layer theme, base, components, utilities;

@layer utilities {
  .mx-6 {
    margin-inline: calc(var(--spacing) * 6);
  }
  .bg-blue-500\/50 {
    background-color: color-mix(in oklab, var(--color-blue-500) 50%, transparent);
  }
}

@property --tw-gradient-from {
  syntax: "<color>";
  inherits: false;
  initial-value: #0000;
}
```

----------------------------------------

TITLE: Tailwind CSS Inline Styles with CSS Variables in JSX
DESCRIPTION: Illustrates a useful pattern of setting CSS variables dynamically using inline styles within a React/JSX component. These dynamically set variables can then be referenced by Tailwind CSS utility classes, providing a powerful way to manage and apply dynamic styles.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/docs/styling-with-utility-classes.mdx#_snippet_24

LANGUAGE: JSX
CODE:
```
export function BrandedButton({ buttonColor, buttonColorHover, textColor, children }) {
  return (
    <button
      style={{
        "--bg-color": buttonColor,
        "--bg-color-hover": buttonColorHover,
        "--text-color": textColor,
      }}
      className="bg-(--bg-color) text-(--text-color) hover:bg-(--bg-color-hover) ..."
    >
      {children}
    </button>
  );
}
```

----------------------------------------

TITLE: Creating Block-Level Flex Containers with Tailwind CSS
DESCRIPTION: Illustrates the `flex` utility for creating a block-level flex container. This enables the use of flexbox properties to control the layout and alignment of its direct children.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/docs/display.mdx#_snippet_6

LANGUAGE: HTML
CODE:
```
<!-- [!code classes:flex] -->
<div class="flex items-center">
  <img src="path/to/image.jpg" />
  <div>
    <strong>Andrew Alfred</strong>
    <span>Technical advisor</span>
  </div>
</div>
```

----------------------------------------

TITLE: Implementing Anchor Positioning with Headless UI Menu in React
DESCRIPTION: This React component demonstrates how to use the new `anchor` prop on `MenuItems` to control the positioning of a dropdown. It leverages the integrated Floating UI to ensure dropdowns remain visible and allows fine-tuning placement with CSS variables like `--anchor-gap` and `--anchor-padding`.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/blog/headless-ui-v2/index.mdx#_snippet_1

LANGUAGE: jsx
CODE:
```
import { Menu, MenuButton, MenuItem, MenuItems } from "@headlessui/react";

function Example() {
  return (
    <Menu>
      <MenuButton>Options</MenuButton>
      <MenuItems
        // [!code highlight:3]
        anchor="bottom start"
        className="[--anchor-gap:8px] [--anchor-padding:8px]"
      >
        <MenuItem>
          <button>Edit</button>
        </MenuItem>
        <MenuItem>
          <button>Duplicate</button>
        </MenuItem>
        <hr />
        <MenuItem>
          <button>Archive</button>
        </MenuItem>
        <MenuItem>
          <button>Delete</button>
        </MenuItem>
      </MenuItems>
    </Menu>
  );
}
```

----------------------------------------

TITLE: Combining Dark Mode with Hover States in HTML
DESCRIPTION: This HTML snippet demonstrates how to combine dark mode utilities with hover states in Tailwind CSS. The `dark:hover:bg-gray-50` class ensures that the button's background changes on hover specifically when dark mode is enabled, providing interactive styling for both light and dark themes.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/blog/tailwindcss-v2/index.mdx#_snippet_5

LANGUAGE: html
CODE:
```
<button class="bg-gray-900 hover:bg-gray-800 dark:bg-white dark:hover:bg-gray-50">
  <!-- ... -->
</button>
```

----------------------------------------

TITLE: Console Warning for Upcoming Breaking Changes
DESCRIPTION: This text snippet shows the console warning message displayed by Tailwind CSS when there are unadopted upcoming breaking changes or deprecations. It advises users to opt-in to these changes to simplify future upgrades and provides a link to more information.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/blog/tailwindcss-1-7/index.mdx#_snippet_11

LANGUAGE: txt
CODE:
```
risk - There are upcoming breaking changes: removeDeprecatedGapUtilities
risk - We highly recommend opting-in to these changes now to simplify upgrading Tailwind in the future.
risk - https://tailwindcss.com/docs/upcoming-changes
```

----------------------------------------

TITLE: Getting Resolved CSS Variable Values in JavaScript
DESCRIPTION: This code snippet explains how to programmatically retrieve the computed, resolved value of a CSS variable (a Tailwind theme variable) using JavaScript. It utilizes `getComputedStyle` on the document root to access the current value of a specified CSS custom property.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/docs/theme.mdx#_snippet_27

LANGUAGE: javascript
CODE:
```
let styles = getComputedStyle(document.documentElement);
let shadow = styles.getPropertyValue("--shadow-xl");
```

----------------------------------------

TITLE: Adding Horizontal Space Between Elements using Tailwind CSS
DESCRIPTION: This HTML snippet illustrates how to use the `space-x-<number>` utility in Tailwind CSS to add horizontal spacing between direct child elements within a flex container. The `space-x-4` class applies a margin-left to all children except the first, creating a consistent gap.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/docs/margin.mdx#_snippet_7

LANGUAGE: html
CODE:
```
<!-- [!code classes:space-x-4] -->
<div class="flex space-x-4 ...">
  <div>01</div>
  <div>02</div>
  <div>03</div>
</div>
```

----------------------------------------

TITLE: Using Arbitrary Container Query Values in HTML with Tailwind CSS
DESCRIPTION: This HTML snippet demonstrates the use of arbitrary values for container queries in Tailwind CSS. The @[618px]:flex syntax allows applying styles based on a precise pixel value for the container's width, providing flexibility beyond predefined breakpoints. This is useful for specific design requirements that don't align with the default scale.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/blog/tailwindcss-v3-2/index.mdx#_snippet_34

LANGUAGE: HTML
CODE:
```
<div class="@container">
  <div class="block @[618px]:flex">
    <!-- ... -->
  </div>
</div>
```

----------------------------------------

TITLE: Cascading Disabled States in Headless UI React Forms
DESCRIPTION: This example demonstrates how Headless UI's `Fieldset` and `Field` components can manage disabled states, similar to native HTML `<fieldset>`. It shows how to conditionally disable a `Field` based on the selection of another input, and how `data-disabled` attributes allow for fine-tuned styling of disabled elements like labels.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/blog/headless-ui-v2/index.mdx#_snippet_5

LANGUAGE: jsx
CODE:
```
import { Button, Description, Field, Fieldset, Input, Label, Legend, Select } from "@headlessui/react";
import { regions } from "./countries";

export function Example() {
  const [country, setCountry] = useState(null);

  return (
    <form action="/shipping">
      <Fieldset>
        <Legend>Shipping details</Legend>
        <Field>
          <Label>Street address</Label>
          <Input name="address" />
        </Field>
        <Field>
          <Label>Country</Label>
          <Description>We currently only ship to North America.</Description>
          <Select name="country" value={country} onChange={(event) => setCountry(event.target.value)}>
            <option></option>
            <option>Canada</option>
            <option>Mexico</option>
            <option>United States</option>
          </Select>
        </Field>
        // [!code highlight:4]
        <Field disabled={!country}>
          <Label className="data-[disabled]:opacity-40">State/province</Label>
          <Select name="region" className="data-[disabled]:opacity-50">
            <option></option>
            {country && regions[country].map((region) => <option>{region}</option>)}
          </Select>
        </Field>
        <Button>Submit</Button>
      </Fieldset>
    </form>
  );
}
```

----------------------------------------

TITLE: Referencing Theme Variable in Inline HTML Styles
DESCRIPTION: This HTML example shows how a theme variable, `--color-mint-500`, can be directly referenced as a standard CSS variable using `var()` within inline styles. This provides flexibility for applying design tokens in scenarios where a utility class might not be suitable, such as arbitrary values or dynamic styles.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/docs/theme.mdx#_snippet_2

LANGUAGE: html
CODE:
```
<!-- [!code filename:HTML] -->
<!-- [!code word:var(--color-mint-500)] -->
<div style="background-color: var(--color-mint-500)">
  <!-- ... -->
</div>
```

----------------------------------------

TITLE: Applying Font Size and Line Height with Tailwind CSS Shorthand
DESCRIPTION: Illustrates the new shorthand syntax in Tailwind CSS for simultaneously setting `font-size` and `line-height` using a single utility class, such as `text-lg/7`. This new approach simplifies styling by combining previously separate utilities into one.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/blog/tailwindcss-v3-3/index.mdx#_snippet_24

LANGUAGE: HTML
CODE:
```
<p class="text-lg leading-7 ...">
<p class="text-lg/7 ...">
  So I started to walk into the water. I won't lie to you boys, I was terrified. But I pressed on, and as I made my way
  past the breakers a strange calm came over me. I don't know if it was divine intervention or the kinship of all living
  things but I tell you Jerry at that moment, I <em>was</em> a marine biologist.
</p>
```

LANGUAGE: HTML
CODE:
```
<p class="text-sm/[17px] ..."></p>
```

----------------------------------------

TITLE: Tailwind CSS Dark Mode Example with prefers-color-scheme in JSX
DESCRIPTION: This JSX snippet demonstrates a UI component styled with Tailwind CSS, showcasing how to apply different visual themes for light and dark modes. It uses the `dark:` variant to provide specific styles that activate when the user's system prefers a dark color scheme, illustrating the visual difference between the two modes.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/docs/hover-focus-and-other-states.mdx#_snippet_38

LANGUAGE: JSX
CODE:
```
<div className="grid grid-cols-1 sm:grid-cols-2">
  <div className="p-8 pt-7">
    <p className="mb-2 text-sm font-medium text-gray-500">Light mode</p>
    <div className="rounded-lg bg-white px-6 py-8 shadow-xl ring-1 ring-gray-900/5">
      <div>
        <span className="inline-flex items-center justify-center rounded-md bg-indigo-500 p-2 shadow-lg">
          <svg
            className="h-6 w-6 text-white"
            fill="none"
            viewBox="0 0 24 24"
            stroke="currentColor"
            aria-hidden="true"
          >
            <path
              strokeLinecap="round"
              strokeLinejoin="round"
              strokeWidth="2"
              d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z"
            />
          </svg>
        </span>
      </div>
      {/* This is not an h3 because we're converting h3's to links in MDX files */}
      <div className="mt-5 text-base font-medium tracking-tight text-gray-900">Writes upside-down</div>
      <p className="mt-2 text-sm text-gray-500">
        The Zero Gravity Pen can be used to write in any orientation, including upside-down. It even works in outer
        space.
      </p>
    </div>
  </div>
  <div className="border-l border-l-transparent bg-black/90 p-8 pt-7 dark:border-l-white/10 dark:bg-transparent">
    <p className="mb-2 text-sm font-medium text-gray-400">Dark mode</p>
    <div className="rounded-lg bg-gray-800 px-6 py-8 shadow-xl ring-1 ring-gray-900/5">
      <div>
        <span className="inline-flex items-center justify-center rounded-md bg-indigo-500 p-2 shadow-lg">
          <svg
            className="h-6 w-6 text-white"
            fill="none"
            viewBox="0 0 24 24"
            stroke="currentColor"
            aria-hidden="true"
          >
            <path
              strokeLinecap="round"
              strokeLinejoin="round"
              strokeWidth="2"
              d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z"
            />
          </svg>
        </span>
      </div>
      {/* This is not an h3 because we're converting h3's to links in MDX files */}
      <div className="mt-5 text-base font-medium tracking-tight text-white">Writes upside-down</div>
      <p className="mt-2 text-sm text-gray-400">
        The Zero Gravity Pen can be used to write in any orientation, including upside-down. It even works in outer
        space.
      </p>
    </div>
  </div>
</div>
```

----------------------------------------

TITLE: Style File Input Buttons with Tailwind CSS `file` Variant
DESCRIPTION: Demonstrates how to style the button within file input elements using the `file` variant in Tailwind CSS. This allows for custom styling of the file upload button, including background, text color, border, and hover effects.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/docs/hover-focus-and-other-states.mdx#_snippet_31

LANGUAGE: html
CODE:
```
<input
  type="file"
  class="file:mr-4 file:rounded-full file:border-0 file:bg-violet-50 file:px-4 file:py-2 file:text-sm file:font-semibold file:text-violet-700 hover:file:bg-violet-100 dark:file:bg-violet-600 dark:file:text-violet-100 dark:hover:file:bg-violet-500 ..."
/>
```

----------------------------------------

TITLE: Using Arbitrary Values and CSS Variables for Opacity in HTML
DESCRIPTION: This HTML snippet illustrates the use of arbitrary values and CSS variables to define color opacity in Tailwind CSS. The `bg-pink-500/[71.37%]` class applies a precise 71.37% opacity, while `bg-cyan-400/(--my-alpha-value)` demonstrates using a CSS variable for dynamic opacity control. This flexibility allows for advanced customization beyond predefined utility classes.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/docs/colors.mdx#_snippet_6

LANGUAGE: HTML
CODE:
```
<div class="bg-pink-500/[71.37%]"><!-- ... --></div>
<div class="bg-cyan-400/(--my-alpha-value)"><!-- ... --></div>
```

----------------------------------------

TITLE: Disabling Transitions for Reduced Motion Preference in HTML
DESCRIPTION: This HTML snippet demonstrates the use of the `motion-reduce` variant to conditionally disable CSS transitions. When a user has the `prefers-reduced-motion` media feature enabled, the `motion-reduce:transition-none` class will apply, preventing potentially problematic motion for sensitive users. This enhances accessibility by respecting user preferences.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/blog/tailwindcss-1-6/index.mdx#_snippet_2

LANGUAGE: html
CODE:
```
<div class="transition duration-150 ease-in-out motion-reduce:transition-none ... ..."></div>
```

----------------------------------------

TITLE: Conditional Styling with supports-[backdrop-filter] (HTML)
DESCRIPTION: This HTML snippet shows how to apply styles like `bg-black/25` and `backdrop-blur` only if the browser supports the `backdrop-filter` CSS property. It provides a fallback `bg-black/75` for unsupported environments, ensuring a consistent visual experience.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/blog/tailwindcss-v3-2/index.mdx#_snippet_4

LANGUAGE: html
CODE:
```
<div class="bg-black/75 supports-[backdrop-filter]:bg-black/25 supports-[backdrop-filter]:backdrop-blur ...">
  <!-- ... -->
</div>
```

----------------------------------------

TITLE: Referencing Theme Variables in HTML Arbitrary Values
DESCRIPTION: This HTML snippet demonstrates how to use the exposed native CSS variables directly within Tailwind's arbitrary value syntax. This eliminates the need for the theme() function, simplifying the process of applying theme-defined values to properties like padding or margin.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/blog/tailwindcss-v4-alpha/index.mdx#_snippet_9

LANGUAGE: html
CODE:
```
<!-- [!code filename:index.html] -->
<div class="p-[calc(var(--spacing-6)-1px)]">
  <!-- ... -->
</div>
```

----------------------------------------

TITLE: Create decorative effects with ::before and ::after in Tailwind CSS
DESCRIPTION: Illustrates how to apply `before` and `after` variants to generate decorative visual elements, such as a background shape, using Tailwind CSS utility classes for enhanced styling.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/docs/hover-focus-and-other-states.mdx#_snippet_28

LANGUAGE: html
CODE:
```
<blockquote class="text-center text-2xl font-semibold text-gray-900 italic dark:text-white">
  When you look
  <span class="relative inline-block before:absolute before:-inset-1 before:block before:-skew-y-3 before:bg-pink-500">
    <span class="relative text-white dark:text-gray-950">annoyed</span>
  </span>
  all the time, people think that you're busy.
</blockquote>
```

----------------------------------------

TITLE: Applying Prefers-Contrast Variants in HTML with Tailwind CSS
DESCRIPTION: This snippet demonstrates how to use Tailwind CSS's `contrast-more` and `contrast-less` variants to apply conditional styling based on the user's `prefers-contrast` operating system setting. It shows how to modify border color, placeholder color, and opacity for improved accessibility.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/blog/tailwindcss-v3-1/index.mdx#_snippet_17

LANGUAGE: html
CODE:
```
<form>
  <label class="block">
    <span class="block text-sm font-medium text-slate-700">Social Security Number</span>
    <!-- [!code word:contrast-more\:border-slate-400] -->
    <!-- [!code word:contrast-more\:placeholder-slate-500] -->
    <!-- [!code word:contrast-more\:opacity-100] -->
    <input
      class="border-slate-200 placeholder-slate-400 contrast-more:border-slate-400 contrast-more:placeholder-slate-500"
    />
    <p class="mt-2 text-sm text-slate-600 opacity-10 contrast-more:opacity-100">We need this to steal your identity.</p>
  </label>
</form>
```

----------------------------------------

TITLE: Customizing Tailwind CSS Color Palette in JavaScript
DESCRIPTION: This JavaScript snippet shows how to customize the default color palette in `tailwind.config.js` using the new `tailwindcss/colors` module. It imports specific color sets like `trueGray`, `indigo`, `rose`, and `amber` to define a custom theme color configuration, allowing developers to curate their own palette.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/blog/tailwindcss-v2/index.mdx#_snippet_2

LANGUAGE: js
CODE:
```
const colors = require("tailwindcss/colors");

module.exports = {
  theme: {
    colors: {
      gray: colors.trueGray,
      indigo: colors.indigo,
      red: colors.rose,
      yellow: colors.amber
    }
  }
};
```

----------------------------------------

TITLE: Overriding Preflight Border Styles for Specific Elements
DESCRIPTION: This CSS snippet demonstrates how to override Preflight's default border resets for specific elements, particularly useful when integrating third-party libraries that might conflict with the global border reset. By defining a custom rule within the `@layer base`, it ensures that elements within `.google-map` do not inherit the `border: 0 solid;` rule.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/docs/preflight.mdx#_snippet_3

LANGUAGE: CSS
CODE:
```
@layer base {
  .google-map * {
    border-style: none;
  }
}
```

----------------------------------------

TITLE: Installing Tailwind CSS v4 Alpha with Vite
DESCRIPTION: This command installs the alpha version of Tailwind CSS v4 and its new Vite plugin. It's the first step to integrate the new engine into a Vite-based project.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/blog/tailwindcss-v4-alpha/index.mdx#_snippet_11

LANGUAGE: Shell
CODE:
```
npm install tailwindcss@next @tailwindcss/vite@next
```

----------------------------------------

TITLE: Overriding Tailwind CSS Default Breakpoint
DESCRIPTION: This CSS snippet shows how to override a default Tailwind CSS theme variable, specifically `--breakpoint-sm`. By redefining it to `30rem` within the `@theme` block, the `sm:` variant will now trigger at this new viewport size instead of its default, allowing for custom responsive design breakpoints.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/docs/theme.mdx#_snippet_12

LANGUAGE: css
CODE:
```
@import "tailwindcss";

@theme {
  --breakpoint-sm: 30rem;
}
```

----------------------------------------

TITLE: Installing Tailwind CSS v4.1 with Vite via npm
DESCRIPTION: This shell command installs the latest versions of `tailwindcss` and `@tailwindcss/vite` using npm. This integration is specifically designed for projects using Vite as their build tool, providing optimized and seamless integration of Tailwind CSS within the Vite development server and build process.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/blog/tailwindcss-v4-1/index.mdx#_snippet_31

LANGUAGE: Shell
CODE:
```
npm install tailwindcss@latest @tailwindcss/vite@latest
```

----------------------------------------

TITLE: Styling Descendants with group-has-* in React/JSX
DESCRIPTION: Demonstrates how to apply styles to an element based on the presence of a specific descendant within a parent element marked with the `group` class, using the `group-has-[selector]:` variant in Tailwind CSS. This example shows a user list where an SVG icon appears only if a link (`<a>`) is present in the user's description.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/docs/hover-focus-and-other-states.mdx#_snippet_10

LANGUAGE: jsx
CODE:
```
<div className="mx-auto grid max-w-md divide-y divide-gray-100 border-x border-x-gray-200 text-gray-700 dark:divide-gray-800 dark:border-x-gray-800 dark:bg-gray-950/10 dark:text-gray-300">
  <div className="group grid grid-cols-[32px_1fr_auto] items-center gap-x-4 px-4 py-4 pt-6">
    <img
      className="size-[32px] rounded-full"
      src="https://spotlight.tailwindui.com/_next/image?url=%2F_next%2Fstatic%2Fmedia%2Favatar.51a13c67.jpg&w=128&q=80"
      alt=""
    />
    {/* This is not an h4 because we're converting h4's to links in MDX files */}
    <div className="font-semibold text-gray-900 dark:text-white">Spencer Sharp</div>
    <svg
      fill="none"
      viewBox="0 0 24 24"
      strokeWidth="1.5"
      stroke="currentColor"
      className="hidden size-4 group-has-[a]:block"
    >
      <path strokeLinecap="round" strokeLinejoin="round" d="M4.5 19.5l15-15m0 0H8.25m11.25 0v11.25" />
    </svg>
    <p className="col-start-2 text-sm">
      Product Designer at{" "}
      <a href="#" className="dark;text-blue-400 text-blue-500 underline">
        planeteria.tech
      </a>
    </p>
  </div>
  <div className="group grid grid-cols-[32px_1fr_auto] items-center gap-x-4 px-4 py-4">
    <img
      className="size-[32px] rounded-full"
      src="https://images.unsplash.com/photo-1539571696357-5a69c17a67c6?q=80&w=256&h=256&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D"
      alt=""
    />
    {/* This is not an h4 because we're converting h4's to links in MDX files */}
    <div className="font-semibold text-gray-900 dark:text-white">Casey Jordan</div>
    <svg
      fill="none"
      viewBox="0 0 24 24"
      strokeWidth="1.5"
      stroke="currentColor"
      className="hidden size-4 group-has-[a]:block"
    >
      <path strokeLinecap="round" strokeLinejoin="round" d="M4.5 19.5l15-15m0 0H8.25m11.25 0v11.25" />
    </svg>
    <p className="col-start-2 text-sm">Just happy to be here.</p>
  </div>
  <div className="group grid grid-cols-[32px_1fr_auto] items-center gap-x-4 px-4 py-4">
    <img
      className="size-[32px] rounded-full"
      src="https://images.unsplash.com/photo-1590895340509-793cb98788c9?q=80&w=256&h=256&&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D"
      alt=""
    />
    {/* This is not an h4 because we're converting h4's to links in MDX files */}
    <div className="font-semibold text-gray-900 dark:text-white">Alex Reed</div>
    <svg
      fill="none"
      viewBox="0 0 24 24"
      strokeWidth="1.5"
      stroke="currentColor"
      className="hidden size-4 group-has-[a]:block"
    >
      <path strokeLinecap="round" strokeLinejoin="round" d="M4.5 19.5l15-15m0 0H8.25m11.25 0v11.25" />
    </svg>
    <p className="col-start-2 text-sm">
      A multidisciplinary designer, working at the intersection of art and technology. <br />
      <br />
      <a href="#" className="dark;text-blue-400 text-blue-500 underline">
        alex-reed.com
      </a>
    </p>
  </div>
  <div className="group grid grid-cols-[32px_1fr_auto] items-center gap-x-4 px-4 py-4 pb-6">
    <img
      className="size-[32px] rounded-full"
      src="https://images.unsplash.com/photo-1517841905240-472988babdf9?q=80&w=256&h=256&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D"
      alt=""
    />
    {/* This is not an h4 because we're converting h4's to links in MDX files */}
    <div className="font-semibold text-gray-900 dark:text-white">Taylor Bailey</div>
    <svg
      fill="none"
      viewBox="0 0 24 24"
      strokeWidth="1.5"
      stroke="currentColor"
      className="hidden size-4 group-has-[a]:block"
    >
      <path strokeLinecap="round" strokeLinejoin="round" d="M4.5 19.5l15-15m0 0H8.25m11.25 0v11.25" />
    </svg>
    <p className="col-start-2 text-sm">Pushing pixels. Slinging divs.</p>
  </div>
</div>
```

----------------------------------------

TITLE: Tailwind CSS Variant: hover
DESCRIPTION: CSS equivalent for the Tailwind CSS `hover` variant, applying styles when an element is hovered over.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/docs/hover-focus-and-other-states.mdx#_snippet_82

LANGUAGE: css
CODE:
```
@media (hover: hover) { &:hover }
```

----------------------------------------

TITLE: Tailwind CSS Inline Styles for Dynamic Values in JSX
DESCRIPTION: Explains how to use inline styles within a React/JSX component to apply dynamic values (e.g., from a database or API) for CSS properties like `backgroundColor` and `color`. This approach allows for flexible styling while still leveraging Tailwind CSS for other utility classes.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/docs/styling-with-utility-classes.mdx#_snippet_22

LANGUAGE: JSX
CODE:
```
export function BrandedButton({ buttonColor, textColor, children }) {
  return (
    <button
      style={{
        backgroundColor: buttonColor,
        color: textColor,
      }}
      className="rounded-md px-3 py-1.5 font-medium"
    >
      {children}
    </button>
  );
}
```

----------------------------------------

TITLE: Migrate `outline-none` to `outline-hidden` in Tailwind CSS v4
DESCRIPTION: Illustrates the migration of the `outline-none` utility to `outline-hidden` in Tailwind CSS v4. This change clarifies that `outline-hidden` sets an invisible outline for accessibility, while a new `outline-none` utility now truly sets `outline-style: none`.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/docs/upgrade-guide.mdx#_snippet_9

LANGUAGE: HTML
CODE:
```
- <input class="focus:outline-none" />
+ <input class="focus:outline-hidden" />
```

----------------------------------------

TITLE: Extending Tailwind CSS Preflight with Custom Base Styles in CSS
DESCRIPTION: This CSS snippet shows how to add custom base styles on top of Tailwind CSS's Preflight using the `@layer base` directive. It defines default font sizes for heading elements (h1, h2, h3) and styling for anchor tags, integrating custom styles into Tailwind's layer system.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/docs/preflight.mdx#_snippet_12

LANGUAGE: CSS
CODE:
```
@layer base {
  h1 {
    font-size: var(--text-2xl);
  }
  h2 {
    font-size: var(--text-xl);
  }
  h3 {
    font-size: var(--text-lg);
  }
  a {
    color: var(--color-blue-600);
    text-decoration-line: underline;
  }
}
```

----------------------------------------

TITLE: Updating Tailwind CSS to Latest Version via npm
DESCRIPTION: This Bash command updates the Tailwind CSS package to its latest stable version using npm. It is a prerequisite for accessing new features and improvements introduced in recent releases, such as the `forced-color-adjust` utilities in v3.4.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/blog/tailwindcss-v3-4/index.mdx#_snippet_16

LANGUAGE: Bash
CODE:
```
$ npm install tailwindcss@latest
```

----------------------------------------

TITLE: Applying Styles within a Breakpoint Range (md to xl) - HTML
DESCRIPTION: This HTML snippet demonstrates how to apply a utility class (`flex`) only within a specific breakpoint range using stacked responsive variants. The `md:max-xl:flex` class ensures that `display: flex` is active exclusively from the `md` breakpoint up to, but not including, the `xl` breakpoint, providing fine-grained control over responsive layouts.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/docs/responsive-design.mdx#_snippet_7

LANGUAGE: HTML
CODE:
```
<div class="md:max-xl:flex">
  <!-- ... -->
</div>
```

----------------------------------------

TITLE: Style Nth Child Element with Tailwind CSS
DESCRIPTION: Styles an element at a specific position or based on a pattern among its siblings. This variant provides flexible control for styling elements based on their index, supporting both fixed positions and functional notation like 3n+1.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/docs/hover-focus-and-other-states.mdx#_snippet_208

LANGUAGE: Svelte
CODE:
```
<nav>
  <img src="/logo.svg" alt="Vandelay Industries" />
  {#each links as link}
    <a href="#" class="mx-2 nth-3:mx-6 nth-[3n+1]:mx-7 ...">
      <!-- ... -->
    </a>
  {/each}
  <button>More</button>
</nav>
```

----------------------------------------

TITLE: Apply Styles Based on Specific Data Attribute Value in HTML
DESCRIPTION: This HTML snippet shows how to apply Tailwind CSS styles conditionally based on a specific value of a `data-*` attribute. The `data-[size=large]:p-8` class will apply `p-8` (padding) if the `data-size` attribute has the value `large`.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/docs/hover-focus-and-other-states.mdx#_snippet_67

LANGUAGE: html
CODE:
```
<!-- Will apply -->
<div data-size="large" class="data-[size=large]:p-8">
  <!-- ... -->
</div>

<!-- Will not apply -->
<div data-size="medium" class="data-[size=large]:p-8">
  <!-- ... -->
</div>
```

----------------------------------------

TITLE: Importing Fonts and Tailwind CSS with @import
DESCRIPTION: This CSS snippet demonstrates the correct order for `@import` statements: external font imports (like Google Fonts) must precede other imports, such as `@import "tailwindcss"`. It also shows how to define a custom font variable (`--font-roboto`) within the `@theme` block after importing the font, making it available for use in Tailwind CSS.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/docs/font-family.mdx#_snippet_5

LANGUAGE: CSS
CODE:
```
@import url("https://fonts.googleapis.com/css2?family=Roboto&display=swap"); /* [!code highlight] */
@import "tailwindcss";

@theme {
  --font-roboto: "Roboto", sans-serif; /* [!code highlight] */
}
```

----------------------------------------

TITLE: Extending Tailwind CSS Default Theme with Custom Font
DESCRIPTION: This CSS snippet demonstrates how to extend the default Tailwind CSS theme by adding a new custom font variable, `--font-script`. By defining this variable within the `@theme` block, a new `font-script` utility class becomes available for use in HTML, allowing for custom typography.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/docs/theme.mdx#_snippet_10

LANGUAGE: css
CODE:
```
@import "tailwindcss";

@theme {
  --font-script: Great Vibes, cursive;
}
```

----------------------------------------

TITLE: Applying Logical Borders with Tailwind CSS (HTML)
DESCRIPTION: This HTML snippet illustrates the use of Tailwind CSS logical properties such as `border-s-4`. It demonstrates how the `border-inline-start-width` property dynamically adjusts to the text direction, applying the border to the left in `ltr` (left-to-right) contexts and to the right in `rtl` (right-to-left) contexts.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/docs/border-width.mdx#_snippet_4

LANGUAGE: html
CODE:
```
<!-- [!code word:dir="ltr"] -->
<!-- [!code word:dir="rtl"] -->
<!-- [!code classes:border-s-4] -->
<div dir="ltr">
  <div class="border-s-4 ..."></div>
</div>
<div dir="rtl">
  <div class="border-s-4 ..."></div>
</div>
```

----------------------------------------

TITLE: Applying Logical Margins with Tailwind CSS
DESCRIPTION: This snippet demonstrates the use of Tailwind CSS logical margin utilities, `ms-<number>` (margin-inline-start) and `me-<number>` (margin-inline-end). It shows how these utilities adjust spacing based on text direction (`ltr` for left-to-right and `rtl` for right-to-left), providing consistent layout regardless of writing mode.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/docs/margin.mdx#_snippet_6

LANGUAGE: html
CODE:
```
<!-- [!code classes:ms-8,me-8] -->
<!-- [!code word:dir="ltr"] -->
<!-- [!code word:dir="rtl"] -->
<div>
  <div dir="ltr">
    <div class="ms-8 ...">ms-8</div>
    <div class="me-8 ...">me-8</div>
  </div>
  <div dir="rtl">
    <div class="ms-8 ...">ms-8</div>
    <div class="me-8 ...">me-8</div>
  </div>
</div>
```

----------------------------------------

TITLE: Installing Tailwind CSS v4.0 with PostCSS
DESCRIPTION: This shell command installs Tailwind CSS v4.0 along with its PostCSS plugin using npm. It's the first step in setting up Tailwind CSS for a project, providing the core framework and the necessary PostCSS integration for build processes.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/blog/tailwindcss-v4/index.mdx#_snippet_4

LANGUAGE: Shell
CODE:
```
npm i tailwindcss @tailwindcss/postcss;
```

----------------------------------------

TITLE: Adding Dividers Between Child Elements with Tailwind CSS (HTML/JSX)
DESCRIPTION: This snippet illustrates the use of Tailwind CSS `divide-x-*` and `divide-*-*` utilities to apply a border color between child elements. Specifically, `divide-x-4 divide-indigo-500` creates a 4px wide indigo-500 border vertically between grid items. This feature is useful for visually separating content within a container. No specific dependencies beyond Tailwind CSS are required.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/docs/border-color.mdx#_snippet_6

LANGUAGE: JSX
CODE:
```
<div className="mx-auto grid max-w-lg grid-cols-3 divide-x-4 divide-indigo-500 rounded-lg text-center font-mono text-sm leading-6 font-bold text-gray-400">
  <div className="p-4 outline-1 -outline-offset-1 outline-gray-900/20 outline-dashed dark:outline-white/20">01</div>
  <div className="p-4 outline-1 -outline-offset-1 outline-gray-900/20 outline-dashed dark:outline-white/20">02</div>
  <div className="p-4 outline-1 -outline-offset-1 outline-gray-900/20 outline-dashed dark:outline-white/20">03</div>
</div>
```

LANGUAGE: HTML
CODE:
```
<!-- [!code classes:divide-indigo-500] -->
<div class="grid grid-cols-3 divide-x-4 divide-indigo-500">
  <div>01</div>
  <div>02</div>
  <div>03</div>
</div>
```

----------------------------------------

TITLE: Defining Custom Breakpoint Variant in Tailwind CSS (CSS)
DESCRIPTION: This CSS snippet demonstrates how to define a custom responsive breakpoint variant in Tailwind CSS. By setting `--breakpoint-3xl` to `120rem` within the `@theme` block, a new `3xl` variant is created, which will activate when the viewport is `120rem` or wider.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/docs/theme.mdx#_snippet_6

LANGUAGE: css
CODE:
```
@import "tailwindcss";

@theme {
  --breakpoint-3xl: 120rem;
}
```

----------------------------------------

TITLE: Creating Message: JavaScript API Client
DESCRIPTION: This JavaScript snippet illustrates publishing a new message using an ApiClient. It initializes the client with a token and then calls the messages.create method, passing conversation_id and message as parameters.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/blog/2022-12-15-protocol-api-documentation-template/index.mdx#_snippet_1

LANGUAGE: js
CODE:
```
import ApiClient from '@example/protocol-api'
const client = new ApiClient(token)
await client.messages.create({
  conversation_id: 'xgQQXg3hrtjh7AvZ',
  message: 'You\'re what the French call \'les incompetents.\'',
})
```

----------------------------------------

TITLE: Implementing a Dialog (Modal) with Headless UI in React
DESCRIPTION: This React component demonstrates how to create a modal dialog using Headless UI's `Dialog` component. It manages the dialog's open/closed state with `useState` and includes an overlay, title, description, and action buttons. It's suitable for traditional modals or full-page take-over UIs.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/blog/headless-ui-v1/index.mdx#_snippet_0

LANGUAGE: jsx
CODE:
```
import { useState } from "react";
import { Dialog } from "@headlessui/react";

function MyDialog() {
  let [isOpen, setIsOpen] = useState(true);

  return (
    <Dialog open={isOpen} onClose={setIsOpen}>
      <Dialog.Overlay />

      <Dialog.Title>Deactivate account</Dialog.Title>
      <Dialog.Description>This will permanently deactivate your account</Dialog.Description>

      <p>
        Are you sure you want to deactivate your account? All of your data will be permanently removed. This action
        cannot be undone.
      </p>

      <button onClick={() => setIsOpen(false)}>Deactivate</button>
      <button onClick={() => setIsOpen(false)}>Cancel</button>
    </Dialog>
  );
}
```

----------------------------------------

TITLE: Directly Using CSS Theme Variables in Vue/Svelte/CSS Modules
DESCRIPTION: Presents an alternative to `@apply` for bundled stylesheets (like Vue `<style>` blocks or CSS modules) by directly using CSS theme variables, which can also improve performance by reducing Tailwind's processing overhead.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/docs/upgrade-guide.mdx#_snippet_31

LANGUAGE: Vue
CODE:
```
<template>
  <h1>Hello world!</h1>
</template>

<style>
  h1 {
    color: var(--text-red-500);
  }
</style>
```

----------------------------------------

TITLE: Tailwind CSS Logical Property Mapping: rounded-se-*
DESCRIPTION: Illustrates the mapping from the modern Tailwind CSS logical utility class `rounded-se-*` to its corresponding standard CSS property `border-start-end-radius` and the older, directional Tailwind utility class `rounded-tr-*`. This helps in migrating to or understanding flow-relative styling.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/blog/tailwindcss-v3-3/index.mdx#_snippet_13

LANGUAGE: Tailwind CSS (Logical)
CODE:
```
{"rounded-se-*"}
```

LANGUAGE: CSS
CODE:
```
border-start-end-radius
```

LANGUAGE: Tailwind CSS (Directional)
CODE:
```
{"rounded-tr-*"}
```

----------------------------------------

TITLE: Applying Dark Mode with Responsive Breakpoints in HTML
DESCRIPTION: This HTML snippet shows how to apply dark mode styles conditionally based on responsive breakpoints in Tailwind CSS. The `lg:dark:bg-black` class ensures that the background color changes to black in dark mode only on large screens and above, allowing for responsive dark mode designs.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/blog/tailwindcss-v2/index.mdx#_snippet_6

LANGUAGE: html
CODE:
```
<div class="lg:bg-white lg:dark:bg-black ...">
  <!-- ... -->
</div>
```

----------------------------------------

TITLE: Access theme values with deprecated theme() function in Tailwind CSS
DESCRIPTION: The theme() function allows direct access to Tailwind theme values using dot notation. While functional, this method is deprecated, and it is recommended to use CSS theme variables for accessing theme values instead for future compatibility and best practices.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/docs/functions-and-directives.mdx#_snippet_12

LANGUAGE: css
CODE:
```
.my-element {
  margin: theme(spacing.12);
}
```

----------------------------------------

TITLE: Applying Colored Drop Shadows with JSX/React
DESCRIPTION: This JSX example demonstrates how to apply colored drop shadows to SVG elements using Tailwind CSS utility classes within a React component. It showcases `drop-shadow-cyan-500/50`, `drop-shadow-sky-500/50`, and `drop-shadow-indigo-500/50` to create distinct colored shadows on different SVG shapes, along with `drop-shadow-xl` for shadow size.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/blog/tailwindcss-v4-1/index.mdx#_snippet_13

LANGUAGE: JSX
CODE:
```
<div className="grid grid-cols-3 items-end gap-8 max-sm:grid-cols-1">
      <div className="flex flex-col items-center">
        <p className="mb-3 text-center font-mono text-xs font-medium text-gray-500">drop-shadow-cyan-500/50</p>
        <svg className="size-28 text-gray-950/100 drop-shadow-xl drop-shadow-cyan-500/50" viewBox="0 0 84 84">
          <path
            d="M22.0992 77L2.19922 42.5L22.0992 8H61.8992L81.7992 42.5L61.8992 77H22.0992Z"
            className="fill-cyan-500"
          />
        </svg>
      </div>
      <div className="flex flex-col items-center">
        <p className="mb-3 text-center font-mono text-xs font-medium text-gray-500">drop-shadow-sky-500/50</p>
        <svg className="size-28 text-gray-950/100 drop-shadow-xl drop-shadow-sky-500/50" viewBox="0 0 84 84">
          <path
            d="M22.0992 77L2.19922 42.5L22.0992 8H61.8992L81.7992 42.5L61.8992 77H22.0992Z"
            className="fill-sky-500"
          />
        </svg>
      </div>
      <div className="flex flex-col items-center">
        <p className="mb-3 text-center font-mono text-xs font-medium text-gray-500">drop-shadow-indigo-500/50</p>
        <svg className="size-28 text-gray-950/100 drop-shadow-xl drop-shadow-indigo-500/50" viewBox="0 0 84 84">
          <path
            d="M22.0992 77L2.19922 42.5L22.0992 8H61.8992L81.7992 42.5L61.8992 77H22.0992Z"
            className="fill-indigo-500"
          />
        </svg>
      </div>
    </div>
```

----------------------------------------

TITLE: Apply Tailwind CSS classes based on ARIA state
DESCRIPTION: Demonstrates how to use ARIA state variants in Tailwind CSS to apply styles directly to an element based on its ARIA attributes, such as `aria-sort` for table headers. This allows for dynamic styling without JavaScript.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/docs/hover-focus-and-other-states.mdx#_snippet_64

LANGUAGE: HTML
CODE:
```
<!-- [!code classes:aria-[sort=ascending]:bg-[url('/img/down-arrow.svg')],aria-[sort=descending]:bg-[url('/img/up-arrow.svg')]] -->
<table>
  <thead>
    <tr>
      <th
        aria-sort="ascending"
        class="aria-[sort=ascending]:bg-[url('/img/down-arrow.svg')] aria-[sort=descending]:bg-[url('/img/up-arrow.svg')]"
      >
        Invoice #
      </th>
      <!-- ... -->
    </tr>
  </thead>
  <!-- ... -->
</table>
```

LANGUAGE: CSS
CODE:
```
.aria-\[sort\=ascending\]\:bg-\[url\(\'\/img\/down-arrow\.svg\'\)\] {
  &[aria-sort="ascending"] {
    background-image: url('/img/down-arrow.svg');
  }
}
.aria-\[sort\=descending\]\:bg-\[url\(\'\/img\/up-arrow\.svg\'\)\] {
  &[aria-sort="descending"] {
    background-image: url('/img/up-arrow.svg');
  }
}
```

----------------------------------------

TITLE: Hide Spinner with prefers-reduced-motion in Tailwind CSS
DESCRIPTION: Demonstrates how to use the `motion-reduce` variant to hide a spinning animation when the user has requested reduced motion, improving accessibility. The example shows a disabled button with a spinner that disappears when `prefers-reduced-motion: reduce` is active.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/docs/hover-focus-and-other-states.mdx#_snippet_40

LANGUAGE: jsx
CODE:
```
<div className="flex items-center justify-center">
  <button
    type="button"
    className="inline-flex items-center rounded-md bg-indigo-500 px-4 py-2 text-sm leading-6 font-semibold text-white shadow"
    disabled
  >
    <svg
      className="mr-3 -ml-1 h-5 w-5 animate-spin text-white motion-reduce:hidden"
      fill="none"
      viewBox="0 0 24 24"
    >
      <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
      <path
        className="opacity-75"
        fill="currentColor"
        d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"
      ></path>
    </svg>
    Processing...
  </button>
</div>
```

LANGUAGE: html
CODE:
```
<!-- [!code classes:motion-reduce:hidden] -->
<button type="button" class="bg-indigo-500 ..." disabled>
  <svg class="animate-spin motion-reduce:hidden ..." viewBox="0 0 24 24"><!-- ... --></svg>
  Processing...
</button>
```

----------------------------------------

TITLE: Tailwind CSS: aria-required selector
DESCRIPTION: Applies styles when an element has the ARIA required state set to true, using the `&[aria-required="true"]` selector.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/docs/hover-focus-and-other-states.mdx#_snippet_185

LANGUAGE: CSS
CODE:
```
&[aria-required="true"]
```

----------------------------------------

TITLE: Tailwind CSS: Adding Custom Base Styles with @layer Directive
DESCRIPTION: For defining custom default base styles for specific HTML elements (e.g., h1, h2), use the @layer base directive in your CSS. This integrates your custom styles into Tailwind's base layer, ensuring they are processed correctly within the framework's cascade. It's ideal for establishing consistent typography or other element-specific defaults.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/docs/adding-custom-styles.mdx#_snippet_18

LANGUAGE: CSS
CODE:
```
@layer base {
  h1 {
    font-size: var(--text-2xl);
  }

  h2 {
    font-size: var(--text-xl);
  }
}
```

----------------------------------------

TITLE: Proportional Flex Item Growth with Tailwind CSS
DESCRIPTION: This example illustrates the use of `grow-<number>` utilities, such as `grow-3` and `grow-7`, to control the proportional growth of flex items. Items will expand relative to each other based on their assigned growth factors, distributing available space accordingly.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/docs/flex-grow.mdx#_snippet_1

LANGUAGE: html
CODE:
```
<!-- [!code classes:grow-3,grow-7] -->
<div class="flex ...">
  <div class="size-14 grow-3 ...">01</div>
  <div class="size-14 grow-7 ...">02</div>
  <div class="size-14 grow-3 ...">03</div>
</div>
```

----------------------------------------

TITLE: Applying overflow-hidden Utility for Content Clipping
DESCRIPTION: This snippet illustrates the application of the `overflow-hidden` utility in Tailwind CSS to clip any content that extends beyond the element's defined boundaries. This is useful for containing content within a specific area and preventing it from spilling out.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/docs/overflow.mdx#_snippet_1

LANGUAGE: JavaScript
CODE:
```
<div className="relative mx-auto flex max-w-sm items-center gap-6 overflow-hidden rounded-xl bg-white shadow-lg ring-1 ring-black/5 dark:bg-gray-800">\n  <img\n    className="absolute -left-6 h-24 w-24 rounded-full shadow-lg"\n    src="https://images.unsplash.com/photo-1501196354995-cbb51c65aaea?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=facearea&facepad=4&w=256&h=256&q=80"\n  />\n  <div className="flex flex-col py-5 pl-24">\n    <strong className="text-sm font-medium text-gray-900 dark:text-gray-200">Andrew Alfred</strong>\n    <span className="text-sm font-medium text-gray-500 dark:text-gray-400">Technical advisor</span>\n  </div>\n</div>
```

LANGUAGE: HTML
CODE:
```
<!-- [!code classes:overflow-hidden] -->\n<div class="overflow-hidden ...">\n  <!-- ... -->\n</div>
```

----------------------------------------

TITLE: Applying Arbitrary Box Shadow Value - Tailwind CSS
DESCRIPTION: Applies an arbitrary box shadow value directly using bracket notation, enabling the use of any valid CSS `box-shadow` value not predefined by Tailwind's scale.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/docs/box-shadow.mdx#_snippet_20

LANGUAGE: CSS
CODE:
```
box-shadow: <value>;
```

----------------------------------------

TITLE: Defining Shared Theme Variables in a Separate CSS File
DESCRIPTION: This CSS snippet demonstrates how to define a collection of shared theme variables (e.g., spacing, fonts, colors) within a dedicated CSS file. This approach facilitates reusability and consistency across multiple projects by centralizing design tokens in a single, importable file.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/docs/theme.mdx#_snippet_21

LANGUAGE: css
CODE:
```
@theme {
  --*: initial;

  --spacing: 4px;

  --font-body: Inter, sans-serif;

  --color-lagoon: oklch(0.72 0.11 221.19);
  --color-coral: oklch(0.74 0.17 40.24);
  --color-driftwood: oklch(0.79 0.06 74.59);
  --color-tide: oklch(0.49 0.08 205.88);
  --color-dusk: oklch(0.82 0.15 72.09);
}
```

----------------------------------------

TITLE: Creating a Custom Dropdown Menu with Headless UI Menu Component (React)
DESCRIPTION: This example illustrates how to build a custom dropdown menu using the Headless UI `Menu` component in React. It utilizes compound components like `Menu.Button`, `Menu.Items`, and `Menu.Item` to manage dropdown state and accessibility. The `Menu.Item` component uses a render prop to expose the `active` state, allowing for dynamic styling based on user interaction.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/blog/building-react-and-vue-support-for-tailwind-ui/index.mdx#_snippet_2

LANGUAGE: JSX
CODE:
```
import { Menu } from "@headlessui/react";

function MyDropdown() {
  return (
    <Menu as="div" className="relative">
      <Menu.Button className="rounded bg-blue-600 px-4 py-2 text-white ...">Options</Menu.Button>
      <Menu.Items className="absolute right-0 mt-1">
        <Menu.Item>
          {({ active }) => (
            <a className={`${active && "bg-blue-500 text-white"} ...`} href="/account-settings">
              Account settings
            </a>
          )}
        </Menu.Item>
        <Menu.Item>
          {({ active }) => (
            <a className={`${active && "bg-blue-500 text-white"} ...`} href="/documentation">
              Documentation
            </a>
          )}
        </Menu.Item>
        <Menu.Item disabled>
          <span className="opacity-75 ...">Invite a friend (coming soon!)</span>
        </Menu.Item>
      </Menu.Items>
    </Menu>
  );
}
```

----------------------------------------

TITLE: Manual HTML Form Input with ARIA Attributes
DESCRIPTION: This snippet illustrates the traditional way of building an HTML input field, manually associating a label and description using `id`, `for`, `aria-labelledby`, and `aria-describedby` attributes to ensure proper accessibility. This approach requires careful management of IDs and attributes.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/blog/headless-ui-v2/index.mdx#_snippet_3

LANGUAGE: jsx
CODE:
```
<div>
  <label id="name-label" for="name-input">
    Name
  </label>
  <input id="name-input" aria-labelledby="name-label" aria-describedby="name-description" />
  <p id="name-description">Use your real name so people will recognize you.</p>
</div>
```

----------------------------------------

TITLE: Referencing Tailwind Colors in CSS
DESCRIPTION: This snippet demonstrates how Tailwind CSS colors are exposed as CSS variables (e.g., `--color-blue-500`) and can be directly referenced in your custom CSS for styling components, ensuring consistency with your design system.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/docs/colors.mdx#_snippet_9

LANGUAGE: css
CODE:
```
@import "tailwindcss";

@layer components {
  .typography {
    color: var(--color-gray-950);
    a {
      color: var(--color-blue-500);
      &:hover {
        color: var(--color-blue-800);
      }
    }
  }
}
```

----------------------------------------

TITLE: Combining Reduced Motion Variants with Responsive and Pseudo-Class Variants in HTML
DESCRIPTION: This HTML snippet showcases the flexibility of combining `motion-reduce` variants with other Tailwind CSS variants like responsive (`sm:`) and pseudo-class (`hover:`). It demonstrates how to apply conditional styles based on user motion preference, screen size, and interaction states, allowing for fine-grained control over UI behavior and accessibility.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/blog/tailwindcss-1-6/index.mdx#_snippet_4

LANGUAGE: html
CODE:
```
<!-- With responsive variants -->
<div class="sm:motion-reduce:translate-y-0"></div>

<!-- With pseudo-class variants -->
<div class="motion-reduce:hover:translate-y-0"></div>

<!-- With responsive and pseudo-class variants -->
<div class="sm:motion-reduce:hover:translate-y-0"></div>
```

----------------------------------------

TITLE: Tailwind CSS Container Query for @7xl Breakpoint
DESCRIPTION: Defines a container query that applies styles when the container's width is greater than or equal to 80rem, corresponding to the @7xl breakpoint in Tailwind CSS.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/docs/hover-focus-and-other-states.mdx#_snippet_144

LANGUAGE: CSS
CODE:
```
@container (width >= 80rem)
```

----------------------------------------

TITLE: Tailwind CSS Border Style Utilities API
DESCRIPTION: This section provides a reference for Tailwind CSS utility classes that control the border style of an element. It includes classes for solid, dashed, dotted, double, hidden, and no borders, as well as their corresponding CSS properties. It also lists divide-* utilities for styling borders between child elements.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/docs/border-style.mdx#_snippet_0

LANGUAGE: CSS
CODE:
```
border-style: solid;
```

LANGUAGE: CSS
CODE:
```
border-style: dashed;
```

LANGUAGE: CSS
CODE:
```
border-style: dotted;
```

LANGUAGE: CSS
CODE:
```
border-style: double;
```

LANGUAGE: CSS
CODE:
```
border-style: hidden;
```

LANGUAGE: CSS
CODE:
```
border-style: none;
```

LANGUAGE: CSS
CODE:
```
& > :not(:last-child) {
  border-style: solid;
}
```

LANGUAGE: CSS
CODE:
```
& > :not(:last-child) {
  border-style: dashed;
}
```

LANGUAGE: CSS
CODE:
```
& > :not(:last-child) {
  border-style: dotted;
}
```

LANGUAGE: CSS
CODE:
```
& > :not(:last-child) {
  border-style: double;
}
```

LANGUAGE: CSS
CODE:
```
& > :not(:last-child) {
  border-style: hidden;
}
```

LANGUAGE: CSS
CODE:
```
& > :not(:last-child) {
  border-style: none;
}
```

----------------------------------------

TITLE: Applying a 3/2 Aspect Ratio to an Image (HTML)
DESCRIPTION: This snippet demonstrates how to apply a 3/2 aspect ratio to an image using the `aspect-3/2` utility class in Tailwind CSS. It ensures the image maintains a specific width-to-height proportion while covering its container.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/docs/aspect-ratio.mdx#_snippet_0

LANGUAGE: HTML
CODE:
```
<!-- [!code classes:aspect-3/2] -->
<img class="aspect-3/2 object-cover ..." src="/img/villas.jpg" />
```

----------------------------------------

TITLE: Applying Styles with Range-Based Breakpoint Variant in HTML
DESCRIPTION: This HTML snippet demonstrates how the `max-*` variant simplifies applying styles within a specific breakpoint range. The `sr-only` utility will be active from the `md` breakpoint up to (but not including) the `xl` breakpoint, avoiding the need to explicitly undo the style.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/blog/tailwindcss-v3-2/index.mdx#_snippet_21

LANGUAGE: HTML
CODE:
```
<div class="md:max-xl:sr-only">
  <!-- ... -->
</div>
```

----------------------------------------

TITLE: Creating Dynamic Dialog Transitions with Headless UI and React
DESCRIPTION: This example illustrates how to implement a dialog with distinct enter and leave transition styles using stacked data attributes. It uses `data-[closed]:data-[enter]:-translate-x-8` for entering from the left and `data-[closed]:data-[leave]:translate-x-8` for leaving to the right, showcasing advanced transition control.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/blog/2024-06-21-headless-ui-v2-1/index.mdx#_snippet_1

LANGUAGE: jsx
CODE:
```
import { Dialog } from "@headlessui/react";
import { useState } from "react";

function Example() {
  let [isOpen, setIsOpen] = useState(false);

  return (
    <>
      <button onClick={() => setIsOpen(true)}>Open dialog</button>
      <Dialog
        open={isOpen}
        onClose={() => setIsOpen(false)}
        // [!code highlight:8]
        transition
        className={`
          transition duration-300 ease-out
          data-[closed]:opacity-0
          data-[closed]:data-[enter]:-translate-x-8
          data-[closed]:data-[leave]:translate-x-8
        `}
      >
        {/* Dialog content… */}
      </Dialog>
    </>
  );
}
```

----------------------------------------

TITLE: Applying `forced-color-adjust-none` in HTML
DESCRIPTION: This HTML snippet demonstrates the use of the `forced-color-adjust-none` utility class within a `div` element. This utility prevents the browser's forced colors mode from altering the specified colors within that element, ensuring critical design elements, like product color choices, retain their intended appearance. It requires Tailwind CSS v3.4 or later.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/blog/tailwindcss-v3-4/index.mdx#_snippet_15

LANGUAGE: HTML
CODE:
```
<fieldset>
  <legend>Choose a color</legend>
  <div class="forced-color-adjust-none ...">
    <label>
      <input class="sr-only" type="radio" name="color-choice" value="white" />
      <span class="sr-only">White</span>
      <span class="size-6 rounded-full bg-white"></span>
    </label>
    <label>
      <input class="sr-only" type="radio" name="color-choice" value="gray" />
      <span class="sr-only">Gray</span>
      <span class="size-6 rounded-full bg-gray-300"></span>
    </label>
    <!-- ... -->
  </div>
</fieldset>
```

----------------------------------------

TITLE: Customizing Tailwind CSS Animation Theme (CSS)
DESCRIPTION: This code shows how to define a custom animation, `wiggle`, within your Tailwind CSS theme using the `@theme` directive. It includes the `@keyframes` definition for the animation, allowing you to use `--animate-wiggle` as a custom animation utility.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/docs/animation.mdx#_snippet_14

LANGUAGE: css
CODE:
```
@theme {\n  /* [!code highlight:12] */\n  --animate-wiggle: wiggle 1s ease-in-out infinite;\n\n  @keyframes wiggle {\n    0%,\n    100% {\n      transform: rotate(-3deg);\n    }\n    50% {\n      transform: rotate(3deg);\n    }\n  }\n}
```

----------------------------------------

TITLE: Applying Fixed Positioning to Elements in HTML with Tailwind CSS
DESCRIPTION: This HTML snippet directly demonstrates the `fixed` utility in Tailwind CSS. It positions a `div` element relative to the browser viewport, ensuring it remains visible at the top, right, and left edges even when the page scrolls. The `relative` class on the parent `div` is shown for context, highlighting how `fixed` elements are positioned independently of their normal document flow.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/docs/position.mdx#_snippet_5

LANGUAGE: html
CODE:
```
<!-- [!code classes:fixed] -->
<div class="relative">
  <div class="fixed top-0 right-0 left-0">Contacts</div>
  <div>
    <div>
      <img src="/img/andrew.jpg" />
      <strong>Andrew Alfred</strong>
    </div>
    <div>
      <img src="/img/debra.jpg" />
      <strong>Debra Houston</strong>
    </div>
    <!-- ... -->
  </div>
</div>
```

----------------------------------------

TITLE: Comparing `wrap-break-word` and `wrap-anywhere` in Flex Containers (JSX)
DESCRIPTION: This JSX snippet demonstrates the visual and functional differences between `wrap-break-word` and `wrap-anywhere` within flexbox layouts in a React component. It highlights how `wrap-anywhere` provides more effective mid-word breaking for intrinsic sizing in flex items, making it ideal for scenarios like user profiles with long email addresses, ensuring content fits without overflow.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/blog/tailwindcss-v4-1/index.mdx#_snippet_11

LANGUAGE: JSX
CODE:
```
<div>
    <p className="mb-3 text-center font-mono text-xs font-medium text-gray-500 dark:text-gray-400">wrap-break-word</p>
    <div className="mx-auto flex max-w-sm items-center gap-4 rounded-xl bg-white p-3 shadow-sm ring ring-black/2.5 dark:bg-black/10 dark:ring-white/10">
      <img
        className="size-16 rounded-full outline -outline-offset-1 outline-black/10 dark:outline-white/10"
        src="https://images.unsplash.com/photo-1500648767791-00dcc994a43e?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=facearea&facepad=2&w=256&h=256&q=80"
        alt=""
      />
      <div className="wrap-break-word">
        <p className="text-sm font-medium text-gray-900 dark:text-white">Jay Riemenschneider</p>
        <p className="text-sm text-gray-500 dark:text-gray-400">jason.riemenschneider@vandelayindustries.com</p>
      </div>
    </div>
    <p className="mt-8 mb-3 text-center font-mono text-xs font-medium text-gray-500 dark:text-gray-400">
      wrap-anywhere
    </p>
    <div className="mx-auto flex max-w-sm items-center gap-4 rounded-xl bg-white p-3 shadow-sm ring ring-black/2.5 dark:bg-black/10 dark:ring-white/10">
      <img
        className="size-16 rounded-full outline -outline-offset-1 outline-black/10 dark:outline-white/10"
        src="https://images.unsplash.com/photo-1500648767791-00dcc994a43e?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=facearea&facepad=2&w=256&h=256&q=80"
        alt=""
      />
      <div className="wrap-anywhere">
        <p className="text-sm font-medium text-gray-900 dark:text-white">Jay Riemenschneider</p>
        <p className="text-sm text-gray-500 dark:text-gray-400">jason.riemenschneider@vandelayindustries.com</p>
      </div>
    </div>
  </div>
```

----------------------------------------

TITLE: Constraining Images and Videos in CSS
DESCRIPTION: This CSS snippet defines default responsive behavior for `img` and `video` elements, ensuring they do not overflow their parent containers while maintaining their aspect ratio. It sets their maximum width to 100% and height to auto, making them responsive by default.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/docs/preflight.mdx#_snippet_10

LANGUAGE: CSS
CODE:
```
img,
video {
  max-width: 100%;
  height: auto;
}
```

----------------------------------------

TITLE: Matching Small Viewport Height with Tailwind CSS HTML
DESCRIPTION: This snippet demonstrates the `h-svh` utility in Tailwind CSS, which sets an element's height to the small viewport height. This corresponds to the smallest possible viewport size, assuming all dynamic browser UI elements (like address bars) are visible. It's ideal for ensuring content remains visible even when the browser UI is expanded.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/docs/height.mdx#_snippet_8

LANGUAGE: HTML
CODE:
```
<!-- [!code classes:h-svh] -->
<div class="h-svh">
  <!-- ... -->
</div>
```

----------------------------------------

TITLE: Setting SVG Fill to Current Text Color - HTML
DESCRIPTION: This example illustrates the use of the `fill-current` utility to set an SVG's fill color to the current text color of its parent element. This allows for dynamic styling where the SVG's color automatically matches the surrounding text, often used for icons within buttons or text blocks. The `fill: currentColor;` CSS property is applied.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/docs/fill.mdx#_snippet_1

LANGUAGE: html
CODE:
```
<!-- [!code classes:fill-current] -->
<button class="bg-white text-indigo-600 hover:bg-indigo-600 hover:text-white ...">
  <svg class="size-5 fill-current ...">
    <!-- ... -->
  </svg>
  Check for updates
</button>
```

----------------------------------------

TITLE: Configure Default Placeholder Color in Tailwind v4 Preflight
DESCRIPTION: Explains that in Tailwind CSS v4, placeholder text now defaults to the current text color at 50% opacity, a change from v3's `gray-400`. It provides CSS base styles to revert to the v3 `gray-400` placeholder color behavior if desired.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/docs/upgrade-guide.mdx#_snippet_16

LANGUAGE: css
CODE:
```
@layer base {
  input::placeholder,
  textarea::placeholder {
    color: var(--color-gray-400);
  }
}
```

----------------------------------------

TITLE: Registering External Source Paths with Tailwind CSS
DESCRIPTION: This snippet demonstrates how to explicitly register external library paths using the `@source` directive. This is crucial for ensuring Tailwind scans dependencies that might be ignored by default, such as those listed in your `.gitignore` file.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/docs/detecting-classes-in-source-files.mdx#_snippet_6

LANGUAGE: CSS
CODE:
```
@import "tailwindcss";
@source "../node_modules/@acmecorp/ui-lib";
```

----------------------------------------

TITLE: Style input when user-invalid with :user-invalid
DESCRIPTION: Applies styles to an input element when it is invalid and the user has interacted with it using the `user-invalid` variant. This provides validation feedback only after user engagement, preventing premature error messages.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/docs/hover-focus-and-other-states.mdx#_snippet_223

LANGUAGE: html
CODE:
```
<!-- [!code classes:user-invalid:border-red-500] -->
<input required class="border user-invalid:border-red-500" />
```

----------------------------------------

TITLE: Applying line-clamp for Multi-line Truncation in HTML
DESCRIPTION: Demonstrates how to use `line-clamp-<number>` utilities, specifically `line-clamp-3`, to truncate multi-line text content within an HTML paragraph element after a specified number of lines, providing a concise display.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/docs/line-clamp.mdx#_snippet_1

LANGUAGE: html
CODE:
```
<!-- [!code classes:line-clamp-3] -->
<article>
  <time>Mar 10, 2020</time>
  <h2>Boost your conversion rate</h2>
  <p class="line-clamp-3">
    Nulla dolor velit adipisicing duis excepteur esse in duis nostrud occaecat mollit incididunt deserunt sunt. Ut ut
    sunt laborum ex occaecat eu tempor labore enim adipisicing minim ad. Est in quis eu dolore occaecat excepteur fugiat
    dolore nisi aliqua fugiat enim ut cillum. Labore enim duis nostrud eu. Est ut eiusmod consequat irure quis deserunt
    ex. Enim laboris dolor magna pariatur. Dolor et ad sint voluptate sunt elit mollit officia ad enim sit consectetur
    enim.
  </p>
  <div>
    <img src="/img/lindsay.jpg" />
    Lindsay Walton
  </div>
</article>
```

----------------------------------------

TITLE: Centering Grid Items with Tailwind CSS `place-self-center` (JSX)
DESCRIPTION: This JSX snippet demonstrates how to use the `place-self-center` utility class in Tailwind CSS within a React component to center an individual item within a grid container along both axes. It shows a practical application in a React environment, requiring a parent grid container.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/docs/place-self.mdx#_snippet_2

LANGUAGE: JSX
CODE:
```
<div className="grid grid-cols-3 place-items-stretch gap-4 font-mono text-sm leading-6 font-bold text-white">
  <div className="flex items-center justify-center rounded-lg bg-sky-300 p-8 dark:bg-sky-800 dark:text-sky-500">
    01
  </div>
  <div className="grid grid-cols-1">
    <Stripes border className="col-start-1 row-start-1 rounded-lg" />
    <div className="col-start-1 row-start-1 flex size-14 items-center justify-center place-self-center rounded-lg bg-sky-500">
      02
    </div>
  </div>
  <div className="flex items-center justify-center rounded-lg bg-sky-300 p-8 dark:bg-sky-800 dark:text-sky-500">
    03
  </div>
  <div className="flex items-center justify-center rounded-lg bg-sky-300 p-8 dark:bg-sky-800 dark:text-sky-500">
    04
  </div>
  <div className="flex items-center justify-center rounded-lg bg-sky-300 p-8 dark:bg-sky-800 dark:text-sky-500">
    05
  </div>
  <div className="flex items-center justify-center rounded-lg bg-sky-300 p-8 dark:bg-sky-800 dark:text-sky-500">
    06
  </div>
</div>
```

----------------------------------------

TITLE: Default Transition Properties in Tailwind CSS
DESCRIPTION: This utility applies a default set of CSS transition properties, timing function, and duration. It's used to enable smooth transitions for common visual changes like color, background, opacity, and transforms.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/docs/transition-property.mdx#_snippet_0

LANGUAGE: CSS
CODE:
```
transition-property: color, background-color, border-color, text-decoration-color, fill, stroke, --tw-gradient-from, --tw-gradient-via, --tw-gradient-to, opacity, box-shadow, transform, translate, scale, rotate, filter, -webkit-backdrop-filter, backdrop-filter;
transition-timing-function: var(--default-transition-timing-function); /* cubic-bezier(0.4, 0, 0.2, 1) */
transition-duration: var(--default-transition-duration); /* 150ms */
```

----------------------------------------

TITLE: Using CSS Variables for Theme Colors in Tailwind CSS v4
DESCRIPTION: Illustrates the recommended approach of using CSS variables for theme values instead of the `theme()` function for background colors in Tailwind CSS v4, leading to simpler and smaller bundle sizes.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/docs/upgrade-guide.mdx#_snippet_25

LANGUAGE: CSS
CODE:
```
.my-class {
  background-color: var(--color-red-500);
}
```

----------------------------------------

TITLE: CSS Container Query for Width
DESCRIPTION: Demonstrates a basic CSS container query that applies styles when the container's width is less than a specified value. This is a standard CSS feature used for element-based responsiveness, often abstracted by frameworks like Tailwind CSS.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/docs/hover-focus-and-other-states.mdx#_snippet_150

LANGUAGE: CSS
CODE:
```
@container (width < 28rem)
```

----------------------------------------

TITLE: Define Custom Component Classes in CSS
DESCRIPTION: Demonstrates how to define custom component classes like `card` within the `@layer components` directive in CSS. These classes can be overridden by utility classes.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/docs/adding-custom-styles.mdx#_snippet_19

LANGUAGE: css
CODE:
```
/* [!code filename:CSS] */
/* [!code highlight:2] */
@layer components {
  .card {
    background-color: var(--color-white);
    border-radius: var(--rounded-lg);
    padding: var(--spacing-6);
    box-shadow: var(--shadow-xl);
  }
  /* [!code highlight:2] */
}
```

----------------------------------------

TITLE: Update Shadow, Radius, and Blur Utilities to v4
DESCRIPTION: Demonstrates how to update `shadow`, `rounded`, and `blur` utilities from their v3 'bare' or `-sm` versions to the new v4 `-xs` or `-sm` equivalents. This ensures consistency with the updated named value scales.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/docs/upgrade-guide.mdx#_snippet_7

LANGUAGE: HTML
CODE:
```
- <input class="shadow-sm" />
+ <input class="shadow-xs" />

- <input class="shadow" />
+ <input class="shadow-sm" />
```

----------------------------------------

TITLE: Tailwind CSS Dark Mode Example (JSX)
DESCRIPTION: An interactive example demonstrating how to apply Tailwind CSS utility classes for both light and dark modes within a React JSX component. It showcases a side-by-side comparison of elements styled for different color schemes.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/docs/styling-with-utility-classes.mdx#_snippet_9

LANGUAGE: jsx
CODE:
```
<div className="grid grid-cols-1 sm:grid-cols-2">
  <div className="p-8 pt-7">
    <p className="mb-2 text-sm font-medium text-gray-500">Light mode</p>
    <div className="rounded-lg bg-white px-6 py-8 shadow-xl ring ring-gray-900/5">
      <div>
        <span className="inline-flex items-center justify-center rounded-md bg-indigo-500 p-2 shadow-lg">
          <svg
            className="h-6 w-6 text-white"
            fill="none"
            viewBox="0 0 24 24"
            stroke="currentColor"
            aria-hidden="true"
          >
            <path
              strokeLinecap="round"
              strokeLinejoin="round"
              strokeWidth="2"
              d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z"
            />
          </svg>
        </span>
      </div>
      <p className="mt-5 text-base font-medium tracking-tight text-gray-900">Writes upside-down</p>
      <p
        className="mt-2 text-sm text-gray-500"
        children={`The Zero Gravity Pen can be used to write in any orientation,
          including upside-down. It even works in outer space.`}
      />
    </div>
  </div>
  <div className="bg-gray-900 p-8 pt-7">
    <p className="mb-2 text-sm font-medium text-gray-400">Dark mode</p>
    <div className="rounded-lg bg-gray-800 px-6 py-8 shadow-xl ring ring-gray-900/5">
      <div>
        <span className="inline-flex items-center justify-center rounded-md bg-indigo-500 p-2 shadow-lg">
          <svg
            className="h-6 w-6 text-white"
            fill="none"
            viewBox="0 0 24 24"
            stroke="currentColor"
            aria-hidden="true"
          >
            <path
              strokeLinecap="round"
              strokeLinejoin="round"
              strokeWidth="2"
              d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z"
            />
          </svg>
        </span>
      </div>
      <p className="mt-5 text-base font-medium tracking-tight text-white">Writes upside-down</p>
      <p
        className="mt-2 text-sm text-gray-400"
        children={`The Zero Gravity Pen can be used to write in any orientation,
          including upside-down. It even works in outer space.`}
      />
    </div>
  </div>
</div>
```

----------------------------------------

TITLE: Tailwind CSS: Defining Design Tokens with @theme Directive
DESCRIPTION: The `@theme` directive is used to define and manage your project's custom design tokens, such as fonts, colors, breakpoints, and easing functions, directly within your CSS.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/docs/functions-and-directives.mdx#_snippet_1

LANGUAGE: CSS
CODE:
```
@theme {
  --font-display: "Satoshi", "sans-serif";

  --breakpoint-3xl: 120rem;

  --color-avocado-100: oklch(0.99 0 0);
  --color-avocado-200: oklch(0.98 0.04 113.22);
  --color-avocado-300: oklch(0.94 0.11 115.03);
  --color-avocado-400: oklch(0.92 0.19 114.08);
  --color-avocado-500: oklch(0.84 0.18 117.33);
  --color-avocado-600: oklch(0.53 0.12 118.34);

  --ease-fluid: cubic-bezier(0.3, 0, 0, 1);
  --ease-snappy: cubic-bezier(0.2, 0, 0, 1);

  /* ... */
}
```

----------------------------------------

TITLE: Default Tailwind CSS Import Structure in CSS
DESCRIPTION: This CSS snippet illustrates the default import structure for Tailwind CSS, showing how different parts of the framework are imported into specific CSS layers. It defines the `theme`, `base` (Preflight), `components`, and `utilities` layers and imports their respective CSS files, providing the full set of Tailwind's default styles.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/docs/preflight.mdx#_snippet_13

LANGUAGE: CSS
CODE:
```
@layer theme, base, components, utilities;

@import "tailwindcss/theme.css" layer(theme);
@import "tailwindcss/preflight.css" layer(base);
@import "tailwindcss/utilities.css" layer(utilities);
```

----------------------------------------

TITLE: Updating Vue Components to Script Setup Syntax - Vue 3
DESCRIPTION: This snippet illustrates how to refactor a Vue 3 single-file component to utilize the modern `<script setup>` syntax. It demonstrates importing reactive state (`ref`) from Vue and UI components from `@headlessui/vue` and `@heroicons/vue/solid`, making them implicitly available to the template. This approach significantly reduces boilerplate by removing the need for explicit component registration.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/blog/2022-05-23-headless-ui-v1-6-tailwind-ui-team-management/index.mdx#_snippet_5

LANGUAGE: html
CODE:
```
<template>
  <Listbox as="div" v-model="selected">
    <!-- ... -->
  </Listbox>
</template>

<script setup>
  import { ref } from "vue";
  import { Listbox, ListboxButton, ListboxLabel, ListboxOption, ListboxOptions } from "@headlessui/vue";
  import { CheckIcon, SelectorIcon } from "@heroicons/vue/solid";

  const people = [
    { id: 1, name: "Wade Cooper" },
    // ...
  ];

  const selected = ref(people[3]);
</script>
```

----------------------------------------

TITLE: Applying Arbitrary Breakpoint Values in Tailwind CSS HTML
DESCRIPTION: This HTML snippet demonstrates the use of one-off, arbitrary breakpoint values directly in Tailwind CSS utility classes. It uses `min-[320px]:text-center` and `max-[600px]:bg-sky-300` to apply styles based on specific pixel values, useful for unique, non-reusable breakpoints.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/docs/responsive-design.mdx#_snippet_13

LANGUAGE: html
CODE:
```
<div class="max-[600px]:bg-sky-300 min-[320px]:text-center">
  <!-- ... -->
</div>
```

----------------------------------------

TITLE: Deprecated Tailwind CSS Utilities and Their Modern Replacements
DESCRIPTION: This table lists Tailwind CSS utilities that have been deprecated and removed since v3, along with their recommended modern alternatives. Users should update their stylesheets to use the new utilities for compatibility and best practices.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/docs/upgrade-guide.mdx#_snippet_5

LANGUAGE: Tailwind CSS
CODE:
```
Deprecated: bg-opacity-*
Replacement: Use opacity modifiers like bg-black/50
```

LANGUAGE: Tailwind CSS
CODE:
```
Deprecated: text-opacity-*
Replacement: Use opacity modifiers like text-black/50
```

LANGUAGE: Tailwind CSS
CODE:
```
Deprecated: border-opacity-*
Replacement: Use opacity modifiers like border-black/50
```

LANGUAGE: Tailwind CSS
CODE:
```
Deprecated: divide-opacity-*
Replacement: Use opacity modifiers like divide-black/50
```

LANGUAGE: Tailwind CSS
CODE:
```
Deprecated: ring-opacity-*
Replacement: Use opacity modifiers like ring-black/50
```

LANGUAGE: Tailwind CSS
CODE:
```
Deprecated: placeholder-opacity-*
Replacement: Use opacity modifiers like placeholder-black/50
```

LANGUAGE: Tailwind CSS
CODE:
```
Deprecated: flex-shrink-*
Replacement: shrink-*
```

LANGUAGE: Tailwind CSS
CODE:
```
Deprecated: flex-grow-*
Replacement: grow-*
```

LANGUAGE: Tailwind CSS
CODE:
```
Deprecated: overflow-ellipsis
Replacement: text-ellipsis
```

LANGUAGE: Tailwind CSS
CODE:
```
Deprecated: decoration-slice
Replacement: box-decoration-slice
```

LANGUAGE: Tailwind CSS
CODE:
```
Deprecated: decoration-clone
Replacement: box-decoration-clone
```

----------------------------------------

TITLE: Applying Typography Styles with Tailwind CSS Prose Classes (HTML)
DESCRIPTION: This HTML snippet demonstrates how to apply typographic styles to a block of content using the @tailwindcss/typography plugin. By adding the 'prose' class (and responsive variants like 'lg:prose-xl') to an <article> element, all nested vanilla HTML content (like <h1> and <p> tags) will automatically receive beautiful, well-formatted typographic defaults. This eliminates the need for extensive custom CSS to style rich-text content.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/blog/tailwindcss-typography/index.mdx#_snippet_0

LANGUAGE: HTML
CODE:
```
<article class="prose lg:prose-xl">
  <h1>Garlic bread with cheese: What the science tells us</h1>
  <p>
    For years parents have espoused the health benefits of eating garlic bread with cheese to their children, with the
    food earning such an iconic status in our culture that kids will often dress up as warm, cheesy loaf for Halloween.
  </p>
  <p>
    But a recent study shows that the celebrated appetizer may be linked to a series of rabies cases springing up around
    the country.
  </p>
  <!-- ... -->
</article>
```

----------------------------------------

TITLE: Applying Dark Mode Styles with Tailwind CSS in HTML
DESCRIPTION: This HTML snippet illustrates the application of Tailwind CSS `dark:` variants to conditionally style elements based on the active theme. It showcases how `dark:bg-gray-800`, `dark:text-white`, and `dark:text-gray-400` are used to change background and text colors in dark mode, providing a concise example of responsive theming.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/docs/colors.mdx#_snippet_8

LANGUAGE: html
CODE:
```
<!-- [!code word:dark\:bg-gray-800] -->
<!-- prettier-ignore -->
<div class="bg-white dark:bg-gray-800 rounded-lg px-6 py-8 ring shadow-xl ring-gray-900/5">
  <div>
    <span class="inline-flex items-center justify-center rounded-md bg-indigo-500 p-2 shadow-lg">
      <svg class="h-6 w-6 stroke-white" ...>
        <!-- ... -->
      </svg>
    </span>
  </div>
  <!-- prettier-ignore -->
  <!-- [!code word:dark\:text-white] -->
  <h3 class="text-gray-900 dark:text-white mt-5 text-base font-medium tracking-tight ">Writes upside-down</h3>
  <!-- prettier-ignore -->
  <!-- [!code word:dark\:text-gray-400] -->
  <p class="text-gray-500 dark:text-gray-400 mt-2 text-sm ">
    The Zero Gravity Pen can be used to write in any orientation, including upside-down. It even works in outer space.
  </p>
</div>
```

----------------------------------------

TITLE: Demonstrating Logical Padding with JSX
DESCRIPTION: This JSX snippet illustrates the application of `ps-8` and `pe-8` Tailwind CSS utilities for logical padding in both left-to-right (LTR) and right-to-left (RTL) text directions. It shows how these utilities adapt to the text flow, with `ps-8` applying padding to the start and `pe-8` to the end of the inline axis, regardless of the physical left/right.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/docs/padding.mdx#_snippet_5

LANGUAGE: JSX
CODE:
```
<div className="grid grid-cols-2 place-items-center gap-x-4">
  <div className="flex flex-col items-start gap-y-4">
    <p className="text-sm font-medium">Left-to-right</p>
    <div className="flex overflow-hidden rounded-lg bg-indigo-500 font-mono text-sm leading-6 font-bold text-white">
      <Stripes noColor className="min-h-full w-8 rounded-s-lg text-white/50" />
      <div className="p-4">ps-8</div>
    </div>
    <div className="mt-4 flex overflow-hidden rounded-lg bg-indigo-500 font-mono text-sm leading-6 font-bold text-white">
      <div className="p-4">pe-8</div>
      <Stripes noColor className="min-h-full w-8 rounded-e-lg text-white/50" />
    </div>
  </div>
  <div className="flex flex-col items-end gap-y-4">
    <p className="text-sm font-medium">Right-to-left</p>
    <div className="flex overflow-hidden rounded-lg bg-indigo-500 font-mono text-sm leading-6 font-bold text-white">
      <div className="p-4">ps-8</div>
      <Stripes noColor className="min-h-full w-8 rounded-e-lg text-white/50" />
    </div>
    <div className="mt-4 flex overflow-hidden rounded-lg bg-indigo-500 font-mono text-sm leading-6 font-bold text-white">
      <Stripes noColor className="min-h-full w-8 rounded-s-lg text-white/50" />
      <div className="p-4">pe-8</div>
    </div>
  </div>
</div>
```

----------------------------------------

TITLE: Customizing Tailwind CSS Blur Theme
DESCRIPTION: This example shows how to extend Tailwind CSS's default blur scale by adding a custom blur value to the theme configuration in `tailwind.config.js`. This allows for creating new utility classes, such as `blur-2xs`, with specific pixel values tailored to your design system.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/docs/filter-blur.mdx#_snippet_4

LANGUAGE: JavaScript
CODE:
```
// tailwind.config.js
module.exports = {
  theme: {
    extend: {
      blur: {
        '2xs': '2px'
      }
    }
  }
}
```

----------------------------------------

TITLE: Implementing Scroll Snapping with snap-end in React/JSX
DESCRIPTION: This React/JSX snippet demonstrates how to create a horizontally scrollable container where child elements snap to their end when scrolled. It utilizes Tailwind CSS classes like `snap-x`, `snap-mandatory`, and `overflow-x-auto` on the parent container, and `shrink-0`, `snap-end`, `scroll-mx-6` on the child elements to achieve the snapping effect. It includes visual indicators and image elements to illustrate the behavior.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/docs/scroll-snap-align.mdx#_snippet_5

LANGUAGE: jsx
CODE:
```
<div className="relative">
  <div className="mr-6 mb-6 flex items-end justify-end pt-10">
    <div className="dark:highlight-white/10 mr-2 rounded bg-indigo-50 px-1.5 font-mono text-[0.625rem] leading-6 text-indigo-600 ring-1 ring-indigo-600 ring-inset dark:bg-indigo-500 dark:text-white dark:ring-0">
      snap point
    </div>
    <div className="absolute top-0 right-6 bottom-0 border-l border-indigo-500"></div>
  </div>
  <div className="relative flex w-full snap-x snap-mandatory gap-6 overflow-x-auto pb-14">
    <div className="shrink-0 snap-end scroll-mx-6">
      <div className="w-3 shrink-0 sm:-mr-[2px] sm:w-10"></div>
    </div>
    <div className="shrink-0 snap-end scroll-mx-6">
      <img
        className="h-40 w-80 shrink-0 rounded-lg bg-white"
        src="https://images.unsplash.com/photo-1604999565976-8913ad2ddb7c?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=320&h=160&q=80"
      />
    </div>
    <div className="shrink-0 snap-end scroll-mx-6">
      <img
        className="h-40 w-80 shrink-0 rounded-lg bg-white"
        src="https://images.unsplash.com/photo-1540206351-d6465b3ac5c1?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=320&h=160&q=80"
      />
    </div>
    <div className="shrink-0 snap-end scroll-mx-6">
      <img
        className="h-40 w-80 shrink-0 rounded-lg bg-white"
        src="https://images.unsplash.com/photo-1622890806166-111d7f6c7c97?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=320&h=160&q=80"
      />
    </div>
    <div className="shrink-0 snap-end scroll-mx-6">
      <img
        className="h-40 w-80 shrink-0 rounded-lg bg-white"
        src="https://images.unsplash.com/photo-1590523277543-a94d2e4eb00b?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=320&h=160&q=80"
      />
    </div>
    <div className="shrink-0 snap-end scroll-mx-6">
      <img
        className="h-40 w-80 shrink-0 rounded-lg bg-white"
        src="https://images.unsplash.com/photo-1575424909138-46b05e5919ec?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=320&h=160&q=80"
      />
    </div>
    <div className="shrink-0 snap-end scroll-mx-6 pr-6">
      <img
        className="h-40 w-80 shrink-0 rounded-lg bg-white"
        src="https://images.unsplash.com/photo-1559333086-b0a56225a93c?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=320&h=160&q=80"
      />
    </div>
  </div>
</div>
```

----------------------------------------

TITLE: Installing Tailwind CSS v4.1 with CLI via npm
DESCRIPTION: This shell command installs the latest versions of `tailwindcss` and `@tailwindcss/cli` using npm. This setup is suitable for projects where Tailwind CSS is managed directly via its command-line interface, allowing for standalone compilation and other CLI-specific features.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/blog/tailwindcss-v4-1/index.mdx#_snippet_30

LANGUAGE: Shell
CODE:
```
npm install tailwindcss@latest @tailwindcss/cli@latest
```

----------------------------------------

TITLE: Filtering Combobox Results in React
DESCRIPTION: This snippet demonstrates how to implement a basic string comparison filter for the Headless UI `Combobox` component in React. It manages selected person and query states using `useState`, dynamically filtering the `people` array based on the query input. This allows users to quickly narrow down options in a large dataset.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/blog/headless-ui-v1-5/index.mdx#_snippet_0

LANGUAGE: jsx
CODE:
```
import { useState } from 'react'
import { Combobox } from '@headlessui/react'

const people = [
  'Wade Cooper',
  'Arlene McCoy',
  'Devon Webb',
  'Tom Cook',
  'Tanya Fox',
  'Hellen Schmidt',
]

function MyCombobox() {
  const [selectedPerson, setSelectedPerson] = useState(people[0])
  const [query, setQuery] = useState('')

  const filteredPeople =
    query === ''
      ? people
      : people.filter((person) => {
          return person.toLowerCase().includes(query.toLowerCase())
        })

  return (
    <Combobox value={selectedPerson} onChange={setSelectedPerson}>
      <Combobox.Input onChange={(event) => setQuery(event.target.value)} />
      <Combobox.Options>
        {filteredPeople.map((person) => (
          <Combobox.Option key={person} value={person}>
            {person}
          </Combobox.Option>
        ))}
      </Combobox.Options>
    </Combobox>
  )
}
```

----------------------------------------

TITLE: Tailwind CSS @max-lg Container Query Alias
DESCRIPTION: The @max-lg alias in Tailwind CSS provides a shorthand for a container query that targets elements when their container's width is less than 32rem. This simplifies applying styles based on the parent container's size rather than the viewport.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/docs/hover-focus-and-other-states.mdx#_snippet_151

LANGUAGE: CSS
CODE:
```
@container (width < 32rem)
```

----------------------------------------

TITLE: Implementing Bidirectional Scrolling with Tailwind CSS and React
DESCRIPTION: This React component demonstrates how to create a scrollable container using Tailwind CSS's `overflow-scroll` utility. It sets up a grid layout for a calendar-like interface, ensuring both horizontal and vertical scrolling when content exceeds the container's dimensions. Sticky headers and time labels are also implemented to maintain visibility during scrolling.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/docs/overflow.mdx#_snippet_12

LANGUAGE: JSX
CODE:
```
<div className="overflow-hidden dark:bg-gray-800">
  <div className="grid max-h-90 grid-cols-[70px_repeat(7,150px)] grid-rows-[auto_repeat(16,50px)] overflow-scroll">
    {/* Calendar frame */}
    <div className="sticky top-0 z-10 col-start-1 row-start-1 border-b border-gray-100 bg-white bg-clip-padding py-2 text-sm font-medium text-gray-900 dark:border-black/10 dark:bg-gradient-to-b dark:from-gray-600 dark:to-gray-700 dark:text-gray-200"></div>
    <div className="sticky top-0 z-10 col-start-2 row-start-1 border-b border-gray-100 bg-white bg-clip-padding py-2 text-center text-sm font-medium text-gray-900 dark:border-black/10 dark:bg-gradient-to-b dark:from-gray-600 dark:to-gray-700 dark:text-gray-200">
      Sun
    </div>
    <div className="sticky top-0 z-10 col-start-3 row-start-1 border-b border-gray-100 bg-white bg-clip-padding py-2 text-center text-sm font-medium text-gray-900 dark:border-black/10 dark:bg-gradient-to-b dark:from-gray-600 dark:to-gray-700 dark:text-gray-200">
      Mon
    </div>
    <div className="sticky top-0 z-10 col-start-4 row-start-1 border-b border-gray-100 bg-white bg-clip-padding py-2 text-center text-sm font-medium text-gray-900 dark:border-black/10 dark:bg-gradient-to-b dark:from-gray-600 dark:to-gray-700 dark:text-gray-200">
      Tue
    </div>
    <div className="sticky top-0 z-10 col-start-5 row-start-1 border-b border-gray-100 bg-white bg-clip-padding py-2 text-center text-sm font-medium text-gray-900 dark:border-black/10 dark:bg-gradient-to-b dark:from-gray-600 dark:to-gray-700 dark:text-gray-200">
      Wed
    </div>
    <div className="sticky top-0 z-10 col-start-6 row-start-1 border-b border-gray-100 bg-white bg-clip-padding py-2 text-center text-sm font-medium text-gray-900 dark:border-black/10 dark:bg-gradient-to-b dark:from-gray-600 dark:to-gray-700 dark:text-gray-200">
      Thu
    </div>
    <div className="sticky top-0 z-10 col-start-7 row-start-1 border-b border-gray-100 bg-white bg-clip-padding py-2 text-center text-sm font-medium text-gray-900 dark:border-black/10 dark:bg-gradient-to-b dark:from-gray-600 dark:to-gray-700 dark:text-gray-200">
      Fri
    </div>
    <div className="sticky top-0 z-10 col-start-8 row-start-1 border-b border-gray-100 bg-white bg-clip-padding py-2 text-center text-sm font-medium text-gray-900 dark:border-black/10 dark:bg-gradient-to-b dark:from-gray-600 dark:to-gray-700 dark:text-gray-200">
      Sat
    </div>
    <div className="sticky left-0 col-start-1 row-start-2 border-r border-gray-100 bg-white p-1.5 text-right text-xs font-medium text-gray-400 uppercase dark:border-gray-200/5 dark:bg-gray-800">
      5 AM
    </div>
    <div className="col-start-2 row-start-2 border-r border-b border-gray-100 dark:border-gray-200/5"></div>
    <div className="col-start-3 row-start-2 border-r border-b border-gray-100 dark:border-gray-200/5"></div>
    <div className="col-start-4 row-start-2 border-r border-b border-gray-100 dark:border-gray-200/5"></div>
    <div className="col-start-5 row-start-2 border-r border-b border-gray-100 dark:border-gray-200/5"></div>
    <div className="col-start-6 row-start-2 border-r border-b border-gray-100 dark:border-gray-200/5"></div>
    <div className="col-start-7 row-start-2 border-r border-b border-gray-100 dark:border-gray-200/5"></div>
    <div className="col-start-8 row-start-2 border-b border-gray-100 dark:border-gray-200/5"></div>
    <div className="sticky left-0 col-start-1 row-start-3 border-r border-gray-100 bg-white p-1.5 text-right text-xs font-medium text-gray-400 uppercase dark:border-gray-200/5 dark:bg-gray-800">
      6 AM
    </div>
    <div className="col-start-2 row-start-3 border-r border-b border-gray-100 dark:border-gray-200/5"></div>
    <div className="col-start-3 row-start-3 border-r border-b border-gray-100 dark:border-gray-200/5"></div>
    <div className="col-start-4 row-start-3 border-r border-b border-gray-100 dark:border-gray-200/5"></div>
    <div className="col-start-5 row-start-3 border-r border-b border-gray-100 dark:border-gray-200/5"></div>
    <div className="col-start-6 row-start-3 border-r border-b border-gray-100 dark:border-gray-200/5"></div>
    <div className="col-start-7 row-start-3 border-r border-b border-gray-100 dark:border-gray-200/5"></div>
    <div className="col-start-8 row-start-3 border-b border-gray-100 dark:border-gray-200/5"></div>
    <div className="sticky left-0 col-start-1 row-start-4 border-r border-gray-100 bg-white p-1.5 text-right text-xs font-medium text-gray-400 uppercase dark:border-gray-200/5 dark:bg-gray-800">
      7 AM
    </div>
  </div>
</div>
```

----------------------------------------

TITLE: Centering Text with Tailwind CSS
DESCRIPTION: This snippet shows how to center text within an HTML element using the `text-center` utility class provided by Tailwind CSS. Apply this class to any block-level element to horizontally center its text content.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/docs/text-align.mdx#_snippet_2

LANGUAGE: html
CODE:
```
<!-- [!code classes:text-center] -->
<p class="text-center">So I started to walk into the water...</p>
```

----------------------------------------

TITLE: Adding Vertical Margin with Tailwind CSS (HTML)
DESCRIPTION: This snippet demonstrates how to apply vertical margin to an element using Tailwind CSS `my-<number>` utilities. The `my-8` class adds a margin of 8 units to both the top and bottom of the element, useful for vertical spacing.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/docs/margin.mdx#_snippet_4

LANGUAGE: HTML
CODE:
```
<!-- [!code classes:my-8] -->
<div class="my-8 ...">my-8</div>
```

----------------------------------------

TITLE: Stacking Multiple Tailwind CSS Variants
DESCRIPTION: Illustrates how to combine multiple Tailwind CSS variants, such as dark mode, responsive breakpoints, and hover states, to target highly specific design conditions.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/docs/hover-focus-and-other-states.mdx#_snippet_1

LANGUAGE: html
CODE:
```
<!-- [!code classes:dark:md:hover:bg-fuchsia-600] -->
<button class="dark:md:hover:bg-fuchsia-600 ...">Save changes</button>
```

----------------------------------------

TITLE: Tailwind CSS Utility for :disabled
DESCRIPTION: Applies styles to disabled form elements, such as input fields, buttons, or select boxes. This is commonly used to visually indicate an inactive or non-interactive state.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/docs/hover-focus-and-other-states.mdx#_snippet_106

LANGUAGE: CSS
CODE:
```
&:disabled
```

----------------------------------------

TITLE: Applying Responsive Width Utilities in HTML
DESCRIPTION: This HTML snippet illustrates how to apply responsive width utility classes using Tailwind CSS. By default, the image has a width of w-16, which changes to md:w-32 on medium screens and lg:w-48 on large screens, showcasing conditional styling based on breakpoints.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/docs/responsive-design.mdx#_snippet_3

LANGUAGE: HTML
CODE:
```
<img class="w-16 md:w-32 lg:w-48" src="..." />
```

----------------------------------------

TITLE: Optimize Transitions with motion-safe and motion-reduce Variants
DESCRIPTION: Compares the usage of `motion-reduce` and `motion-safe` variants for applying transitions. `motion-safe` is often more concise when most users prefer motion, as it avoids extensive 'undoing' of styles that `motion-reduce` might require.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/docs/hover-focus-and-other-states.mdx#_snippet_41

LANGUAGE: html
CODE:
```
<!-- [!code classes:motion-reduce:hover:translate-y-0] -->
<!-- [!code classes:motion-reduce:transition-none] -->
<!-- [!code classes:motion-safe:hover:-translate-x-0.5] -->
<!-- [!code classes:motion-safe:transition] -->
<!-- Using `motion-reduce` can mean lots of "undoing" styles -->
<button class="transition hover:-translate-y-0.5 motion-reduce:transition-none motion-reduce:hover:translate-y-0 ...">
  Save changes
</button>

<!-- Using `motion-safe` is less code in these situations -->
<button class="motion-safe:transition motion-safe:hover:-translate-x-0.5 ...">Save changes</button>
```

----------------------------------------

TITLE: Installing Tailwind CSS with PostCSS
DESCRIPTION: This command installs the latest versions of Tailwind CSS and its PostCSS plugin using npm. This setup allows Tailwind CSS to be used as a PostCSS plugin within your build pipeline, compatible with various PostCSS-enabled environments.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/blog/tailwindcss-v4-1/index.mdx#_snippet_2

LANGUAGE: sh
CODE:
```
npm install tailwindcss@latest @tailwindcss/postcss@latest
```

----------------------------------------

TITLE: Understanding Generated CSS for Tailwind Variants
DESCRIPTION: This snippet illustrates the underlying CSS generated by Tailwind for a utility class with a variant, such as `hover:bg-sky-700`. It highlights how Tailwind conditionally applies styles based on the variant's condition.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/docs/styling-with-utility-classes.mdx#_snippet_4

LANGUAGE: css
CODE:
```
/* [!code filename: Generated CSS] */
.hover\:bg-sky-700 {
  &:hover {
    background-color: var(--color-sky-700);
  }
}
```

----------------------------------------

TITLE: Tailwind CSS @max-3xl Container Query Alias
DESCRIPTION: The @max-3xl alias in Tailwind CSS provides a shorthand for a container query that targets elements when their container's width is less than 48rem. This simplifies applying styles based on the parent container's size rather than the viewport.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/docs/hover-focus-and-other-states.mdx#_snippet_154

LANGUAGE: CSS
CODE:
```
@container (width < 48rem)
```

----------------------------------------

TITLE: Tailwind CSS @max-6xl Container Query Alias
DESCRIPTION: The @max-6xl alias in Tailwind CSS provides a shorthand for a container query that targets elements when their container's width is less than 72rem. This simplifies applying styles based on the parent container's size rather than the viewport.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/docs/hover-focus-and-other-states.mdx#_snippet_157

LANGUAGE: CSS
CODE:
```
@container (width < 72rem)
```

----------------------------------------

TITLE: Creating Pill Buttons with Tailwind CSS
DESCRIPTION: This snippet demonstrates how to create a pill-shaped button using the `rounded-full` utility class in Tailwind CSS. This class applies a maximum border-radius to make the element fully rounded, commonly used for buttons or avatars.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/docs/border-radius.mdx#_snippet_5

LANGUAGE: React
CODE:
```
<div className="flex justify-center gap-4 text-center text-sm leading-6 font-bold text-white">
  <div className="flex shrink-0 flex-col items-center">
    <p className="mb-3 text-center font-mono text-xs font-medium text-gray-500 dark:text-gray-400">rounded-full</p>
    <button className="rounded-full bg-cyan-500 px-4 py-2 text-sm font-semibold text-white">Save Changes</button>
  </div>
</div>
```

LANGUAGE: HTML
CODE:
```
<!-- [!code classes:rounded-full] -->
<button class="rounded-full ...">Save Changes</button>
```

----------------------------------------

TITLE: Basic Text Color Usage in HTML
DESCRIPTION: This HTML snippet illustrates the application of `text-blue-600` and `dark:text-sky-400` classes to control the text color of a paragraph element, providing a straightforward example for web development.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/docs/color.mdx#_snippet_2

LANGUAGE: html
CODE:
```
<p class="text-blue-600 dark:text-sky-400">The quick brown fox...</p>
```

----------------------------------------

TITLE: Combine Arbitrary Values with Responsive Modifiers in Tailwind CSS
DESCRIPTION: Shows how to combine arbitrary values with Tailwind's interactive and responsive modifiers (e.g., hover, lg). This allows for dynamic styling based on states or screen sizes using custom values.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/docs/adding-custom-styles.mdx#_snippet_2

LANGUAGE: html
CODE:
```
<div class="top-[117px] lg:top-[344px]">
  <!-- ... -->
</div>
```

----------------------------------------

TITLE: Apply Focus Styles with Tailwind CSS
DESCRIPTION: Styles an element when it receives keyboard or programmatic focus. This is crucial for accessibility, highlighting interactive elements like input fields or buttons when they are active.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/docs/hover-focus-and-other-states.mdx#_snippet_194

LANGUAGE: HTML
CODE:
```
<input class="border-gray-300 focus:border-blue-400 ..." />
```

----------------------------------------

TITLE: Run Tailwind CSS Upgrade Tool
DESCRIPTION: Use the official upgrade tool to automate the migration process from Tailwind CSS v3 to v4. This tool handles dependencies, configuration file migration, and template file changes. Requires Node.js 20 or higher.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/docs/upgrade-guide.mdx#_snippet_0

LANGUAGE: sh
CODE:
```
$ npx @tailwindcss/upgrade
```

----------------------------------------

TITLE: Demonstrate RTL and LTR Layouts with Tailwind CSS (React JSX)
DESCRIPTION: This React JSX snippet illustrates the visual effect of `rtl` and `ltr` variants in Tailwind CSS for multi-directional layouts. It shows how elements behave differently in left-to-right and right-to-left contexts, specifically for text alignment and margins.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/docs/hover-focus-and-other-states.mdx#_snippet_70

LANGUAGE: javascript
CODE:
```
<div className="mx-auto grid max-w-lg grid-cols-1 gap-x-6 gap-y-10 sm:grid-cols-2">
  <div dir="ltr">
    <p className="mb-4 text-sm font-medium">Left-to-right</p>
    <div className="group flex items-center">
      <img
        className="h-12 w-12 shrink-0 rounded-full"
        src="https://images.unsplash.com/photo-1472099645785-5658abf4ff4e?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=facearea&facepad=2&w=256&h=256&q=80"
        alt=""
      />
      <div className="ml-3 rtl:mr-3 rtl:ml-0">
        <p className="text-sm font-medium text-gray-700 group-hover:text-gray-900 dark:text-gray-300 dark:group-hover:text-white">
          Tom Cook
        </p>
        <p className="text-sm font-medium text-gray-500 group-hover:text-gray-700 dark:group-hover:text-gray-300">
          Director of Operations
        </p>
      </div>
    </div>
  </div>
  <div dir="rtl">
    <p className="mb-4 text-sm font-medium">Right-to-left</p>
    <div className="group flex items-center">
      <img
        className="h-12 w-12 shrink-0 rounded-full"
        src="https://images.unsplash.com/photo-1563833717765-00462801314e?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=facearea&facepad=2&w=256&h=256&q=80"
        alt=""
      />
      <div className="ml-3 rtl:mr-3 rtl:ml-0">
        <p className="text-sm font-medium text-gray-700 group-hover:text-gray-900 dark:text-gray-300 dark:group-hover:text-white">
          تامر كرم
        </p>
        <p className="text-sm font-medium text-gray-500 group-hover:text-gray-700 dark:group-hover:text-gray-300">
          الرئيس التنفيذي
        </p>
      </div>
    </div>
  </div>
</div>
```

----------------------------------------

TITLE: Stacking Multiple Tailwind Variants
DESCRIPTION: Discover how to combine multiple Tailwind variants to apply styles only when several conditions are met. This example shows how to style a button when it is both disabled and hovered.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/docs/styling-with-utility-classes.mdx#_snippet_6

LANGUAGE: html
CODE:
```
<!-- [!code classes:disabled:hover:bg-sky-500] -->
<button class="bg-sky-500 disabled:hover:bg-sky-500 ...">Save changes</button>
```

----------------------------------------

TITLE: Update Tailwind CSS to Latest Version
DESCRIPTION: Provides the command-line instruction to update an existing Tailwind CSS installation to its latest version using npm. This ensures access to the newest features and bug fixes.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/blog/tailwindcss-v3-3/index.mdx#_snippet_30

LANGUAGE: sh
CODE:
```
npm install -D tailwindcss@latest
```

----------------------------------------

TITLE: Processing Nested CSS with Tailwind CSS
DESCRIPTION: This snippet showcases how Tailwind CSS, leveraging Lightning CSS, processes nested CSS rules. It allows developers to write more organized and readable CSS with nesting, which Tailwind then flattens for broad browser compatibility without requiring a separate preprocessor.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/docs/compatibility.mdx#_snippet_2

LANGUAGE: css
CODE:
```
.typography {
  p {
    font-size: var(--text-base);
  }
  img {
    border-radius: var(--radius-lg);
  }
}
```

----------------------------------------

TITLE: Applying Tailwind CSS Color Utilities in JSX
DESCRIPTION: This JSX snippet demonstrates the application of various Tailwind CSS color utilities within a React component structure. It shows how to set background, border, text, and outline colors, including dark mode variations, to style a notification-like UI element.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/docs/colors.mdx#_snippet_3

LANGUAGE: javascript
CODE:
```
<div className="bg-black/5 p-8 text-sm">
  <div className="mx-auto flex max-w-md items-center gap-4 rounded-lg bg-white p-6 shadow-md outline outline-black/5 dark:bg-gray-800">
    <span className="inline-flex shrink-0 rounded-full border border-pink-300 bg-pink-100 p-2 dark:border-pink-300/10 dark:bg-pink-400/10">
      <svg
        xmlns="http://www.w3.org/2000/svg"
        fill="none"
        viewBox="0 0 24 24"
        strokeWidth={1.5}
        className="size-6 stroke-pink-700 dark:stroke-pink-500"
      >
        <path
          strokeLinecap="round"
          strokeLinejoin="round"
          d="M14.857 17.082a23.848 23.848 0 0 0 5.454-1.31A8.967 8.967 0 0 1 18 9.75V9A6 6 0 0 0 6 9v.75a8.967 8.967 0 0 1-2.312 6.022c1.733.64 3.56 1.085 5.455 1.31m5.714 0a24.255 24.255 0 0 1-5.714 0m5.714 0a3 3 0 1 1-5.714 0"
        />
      </svg>
    </span>
    <div>
      <p className="text-gray-700 dark:text-gray-400">
        <span className="font-medium text-gray-950 dark:text-white">Tom Watson</span> mentioned you in{" "}
        <span className="font-medium text-gray-950 dark:text-white">Logo redesign</span>
      </p>
      <p className="mt-1 text-gray-500">9:37am</p>
    </div>
  </div>
</div>
```

----------------------------------------

TITLE: Apply Arbitrary Values for Background, Text, and Pseudo-elements in Tailwind CSS
DESCRIPTION: Demonstrates the versatility of arbitrary values for various CSS properties, including background colors (bg-[#bada55]), font sizes (text-[22px]), and pseudo-element content (before:content-['Festivus']). This highlights its applicability across different styling needs.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/docs/adding-custom-styles.mdx#_snippet_3

LANGUAGE: html
CODE:
```
<div class="bg-[#bada55] text-[22px] before:content-['Festivus']">
  <!-- ... -->
</div>
```

----------------------------------------

TITLE: Applying Pointer-Coarse Variants for Responsive Layout (HTML)
DESCRIPTION: This HTML snippet illustrates the use of Tailwind CSS `pointer-coarse` variants to adapt layout for touch-based devices. It adjusts margins, grid columns, and padding within a memory option selection `fieldset`, making touch targets larger and easier to interact with on phones.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/blog/tailwindcss-v4-1/index.mdx#_snippet_17

LANGUAGE: HTML
CODE:
```
<!-- [!code classes:pointer-coarse:mt-6,pointer-coarse:grid-cols-3,pointer-coarse:gap-4,pointer-coarse:p-4] -->
<fieldset aria-label="Choose a memory option">
  <div class="flex items-center justify-between">
    <div>RAM</div>
    <a href="#"> See performance specs </a>
  </div>
  <div class="mt-4 grid grid-cols-6 gap-2 pointer-coarse:mt-6 pointer-coarse:grid-cols-3 pointer-coarse:gap-4">
    <label class="p-2 pointer-coarse:p-4 ...">
      <input type="radio" name="memory-option" value="4 GB" className="sr-only" />
      <span>4 GB</span>
    </label>
    <!-- ... -->
  </div>
</fieldset>
```

----------------------------------------

TITLE: Overriding Dark Mode Variant with Class Selector in CSS
DESCRIPTION: This CSS snippet overrides Tailwind CSS's default `dark` variant behavior. Instead of relying on `prefers-color-scheme`, it configures `dark:*` utilities to apply when an element with the `.dark` class (or any of its descendants) is present in the HTML tree. This allows for manual dark mode toggling via class manipulation.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/docs/dark-mode.mdx#_snippet_1

LANGUAGE: css
CODE:
```
@import "tailwindcss";

@custom-variant dark (&:where(.dark, .dark *));
```

----------------------------------------

TITLE: Basic Opacity Utility Usage in HTML
DESCRIPTION: This HTML snippet provides a concise example of applying Tailwind CSS `opacity` utilities directly to button elements, showcasing `opacity-100`, `opacity-75`, `opacity-50`, and `opacity-25` classes for varying transparency levels.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/docs/opacity.mdx#_snippet_2

LANGUAGE: html
CODE:
```
<!-- [!code classes:opacity-100,opacity-75,opacity-50,opacity-25] -->
<button class="bg-indigo-500 opacity-100 ..."></button>
<button class="bg-indigo-500 opacity-75 ..."></button>
<button class="bg-indigo-500 opacity-50 ..."></button>
<button class="bg-indigo-500 opacity-25 ..."></button>
```

----------------------------------------

TITLE: Sorting Utilities by Box Model and Impact in HTML
DESCRIPTION: This snippet shows the sorting logic for various utility classes, which is loosely based on the CSS box model. Classes affecting layout (e.g., `ml-4`, `flex`, `h-24`) are prioritized, followed by border-related classes, and then decorative classes (e.g., `text-gray-700`, `shadow-md`).
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/blog/automatic-class-sorting-with-prettier/index.mdx#_snippet_5

LANGUAGE: HTML
CODE:
```
<div class="text-gray-700 shadow-md p-3 border-gray-300 ml-4 h-24 flex border-2"> <!-- [!code --] -->
<div class="ml-4 flex h-24 border-2 border-gray-300 p-3 text-gray-700 shadow-md"> <!-- [!code ++] -->
    <!-- ... -->
  </div>
</div>
```

----------------------------------------

TITLE: Centering Grid Items with Tailwind CSS `place-self-center` (HTML)
DESCRIPTION: This snippet demonstrates how to use the `place-self-center` utility class in Tailwind CSS to center an individual item within a grid container along both the row and column axes. It requires a parent grid container (e.g., `grid grid-cols-3`) for proper layout.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/docs/place-self.mdx#_snippet_3

LANGUAGE: HTML
CODE:
```
<!-- [!code classes:place-self-center] -->
<div class="grid grid-cols-3 gap-4 ...">
  <div>01</div>
  <div class="place-self-center ...">02</div>
  <div>03</div>
  <div>04</div>
  <div>05</div>
  <div>06</div>
</div>
```

----------------------------------------

TITLE: Applying Dark Mode Styles in HTML
DESCRIPTION: This HTML snippet illustrates how to apply dark mode specific styles using the `dark:` prefix in Tailwind CSS. Classes like `dark:bg-black` and `dark:text-white` ensure that elements adapt their appearance when the user's system dark mode is active, providing a seamless user experience.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/blog/tailwindcss-v2/index.mdx#_snippet_4

LANGUAGE: html
CODE:
```
<div class="bg-white dark:bg-black">
  <h1 class="text-gray-900 dark:text-white">Dark mode</h1>
  <p class="text-gray-500 dark:text-gray-300">The feature you've all been waiting for.</p>
</div>
```

----------------------------------------

TITLE: Custom Focus Styles with JSX and Tailwind CSS
DESCRIPTION: This JSX snippet demonstrates how to remove the default browser outline using `outline-none` on a `textarea` and apply custom focus styles to its parent container using `focus-within:outline-2` and `focus-within:outline-indigo-600`. It also shows a button with its own `focus:outline` styles, emphasizing the importance of accessibility when removing default outlines.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/docs/outline-style.mdx#_snippet_5

LANGUAGE: jsx
CODE:
```
<div className="mx-auto flex max-w-md flex-col rounded-lg outline-1 outline-gray-300 focus-within:outline-2 focus-within:outline-indigo-600 dark:bg-white/5 dark:outline-transparent dark:focus-within:outline-indigo-500">
  <textarea className="w-full resize-none p-2 outline-none" placeholder="Leave a comment..." />
  <button
    className="mr-2 mb-2 inline-flex items-center self-end rounded-md bg-indigo-600 px-3 py-1.5 text-sm font-semibold text-white shadow-xs hover:bg-indigo-500 focus:outline-2 focus:outline-offset-2 focus:outline-indigo-600"
    type="button"
  >
    Post
  </button>
</div>
```

----------------------------------------

TITLE: Embedding React Components in MDX
DESCRIPTION: This MDX snippet demonstrates how React components can be directly embedded within Markdown content. It highlights MDX's capability to combine the simplicity of Markdown with the power of interactive React components, enabling richer and more dynamic content creation. This allows for interactive demos and complex UI elements within a blog post.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/blog/building-the-tailwind-blog/index.mdx#_snippet_1

LANGUAGE: Markdown
CODE:
```
# My first MDX post

MDX is a really cool authoring format because it lets
you embed React components right in your markdown:

<MyComponent myProp={5} />

How cool is that?
```

----------------------------------------

TITLE: Implementing Floating Labels with Peer and Placeholder-Shown in HTML
DESCRIPTION: This HTML example illustrates how to create a floating label effect using a combination of `peer-*` variants and the new `placeholder-shown` pseudo-class variant. The label's position adjusts based on whether the input has a placeholder shown or is focused, providing a dynamic UI.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/blog/tailwindcss-2-2/index.mdx#_snippet_11

LANGUAGE: HTML
CODE:
```
<div class="relative">
  <input id="name" class="peer ..." />
  <label for="name" class="peer-placeholder-shown:top-4 peer-focus:top-0 ..."> Name </label>
</div>
```

----------------------------------------

TITLE: Apply Conditional Styles with forced-colors Variant in HTML
DESCRIPTION: This HTML snippet, using Tailwind CSS classes, demonstrates how to apply conditional styles based on the `forced-colors` media query. It showcases a theme selection form where elements like borders, backgrounds, text, and radio button appearances adapt when a user has enabled a forced color mode, ensuring accessibility.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/docs/hover-focus-and-other-states.mdx#_snippet_43

LANGUAGE: HTML
CODE:
```
<div className="mx-auto max-w-sm border-x border-x-gray-200 px-6 pt-6 pb-4 text-gray-900 dark:border-x-gray-800 dark:bg-gray-950/10 dark:text-white">
  <form>
    <legend> Choose a theme: </legend>
    <div className="mt-4 grid grid-flow-col">
      <label htmlFor="theme-1" className="text-sm font-medium text-gray-700 dark:text-white">
        <div className="relative grid h-16 w-16 items-center justify-center rounded-xl border border-transparent bg-transparent text-white hover:bg-gray-50 has-checked:border-cyan-500 has-checked:bg-cyan-50 has-checked:text-cyan-50 dark:text-gray-800 dark:hover:bg-gray-800 dark:has-checked:bg-cyan-950 dark:has-checked:text-cyan-950 forced-colors:border-0">
          <input
            type="radio"
            name="themes"
            id="theme-1"
            className="appearance-none forced-colors:appearance-auto"
            defaultChecked
          />
          <p className="hidden forced-colors:block">Cyan</p>
          <div className="absolute top-3 left-3 h-6 w-6 rounded-full bg-cyan-200 forced-colors:hidden"></div>
          <div className="absolute right-3 bottom-3 h-6 w-6 rounded-full bg-cyan-500 ring-2 ring-current forced-colors:hidden"></div>
        </div>
      </label>
      <label htmlFor="theme-2" className="text-sm font-medium text-gray-700 dark:text-white">
        <div className="relative grid h-16 w-16 items-center justify-center rounded-xl border border-transparent bg-transparent text-white hover:bg-gray-50 has-checked:border-blue-500 has-checked:bg-blue-50 has-checked:text-blue-50 dark:text-gray-800 dark:hover:bg-gray-800 dark:has-checked:bg-blue-950 dark:has-checked:text-blue-950 forced-colors:border-0">
          <input
            type="radio"
            name="themes"
            id="theme-2"
            className="appearance-none forced-colors:appearance-auto"
          />
          <p className="hidden forced-colors:block">Blue</p>
          <div className="absolute top-3 left-3 h-6 w-6 rounded-full bg-blue-200 forced-colors:hidden"></div>
          <div className="absolute right-3 bottom-3 h-6 w-6 rounded-full bg-blue-500 ring-2 ring-current forced-colors:hidden"></div>
        </div>
      </label>
      <label htmlFor="theme-3" className="text-sm font-medium text-gray-700 dark:text-white">
        <div className="relative grid h-16 w-16 items-center justify-center rounded-xl border border-transparent bg-transparent text-white hover:bg-gray-50 has-checked:border-indigo-500 has-checked:bg-indigo-50 has-checked:text-indigo-50 dark:text-gray-800 dark:hover:bg-gray-800 dark:has-checked:bg-indigo-950 dark:has-checked:text-indigo-950 forced-colors:border-0">
          <input
            type="radio"
            name="themes"
            id="theme-3"
            className="appearance-none forced-colors:appearance-auto"
          />
          <p className="hidden forced-colors:block">Indigo</p>
          <div className="absolute top-3 left-3 h-6 w-6 rounded-full bg-indigo-200 forced-colors:hidden"></div>
          <div className="absolute right-3 bottom-3 h-6 w-6 rounded-full bg-indigo-500 ring-2 ring-current forced-colors:hidden"></div>
        </div>
      </label>
      <label htmlFor="theme-4" className="text-sm font-medium text-gray-700 dark:text-white">
        <div className="relative grid h-16 w-16 items-center justify-center rounded-xl border border-transparent bg-transparent text-white hover:bg-gray-50 has-checked:border-purple-500 has-checked:bg-purple-50 has-checked:text-purple-50 dark:text-gray-800 dark:hover:bg-gray-800 dark:has-checked:bg-purple-950 dark:has-checked:text-purple-950 forced-colors:border-0">
          <input
            type="radio"
            name="themes"
            id="theme-4"
            className="appearance-none forced-colors:appearance-auto"
          />
          <p className="hidden forced-colors:block">Purple</p>
          <div className="absolute top-3 left-3 h-6 w-6 rounded-full bg-purple-200 forced-colors:hidden"></div>
          <div className="absolute right-3 bottom-3 h-6 w-6 rounded-full bg-purple-500 ring-2 ring-current forced-colors:hidden"></div>
        </div>
      </label>
    </div>
  </form>
</div>
```

----------------------------------------

TITLE: Positioning Grid Items with Tailwind CSS `col-start` and `col-end` Utilities (HTML)
DESCRIPTION: This example illustrates the use of Tailwind CSS `col-start-<number>` and `col-end-<number>` utilities to precisely position grid items by specifying their starting and ending grid lines. It demonstrates how to combine these with `col-span` for more complex layouts, allowing elements to occupy specific regions within a 6-column grid. These utilities are crucial for fine-grained control over grid item placement.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/docs/grid-column.mdx#_snippet_1

LANGUAGE: html
CODE:
```
<!-- [!code classes:col-start-1,col-start-2,col-end-3,col-end-7] -->
<div class="grid grid-cols-6 gap-4">
  <div class="col-span-4 col-start-2 ...">01</div>
  <div class="col-start-1 col-end-3 ...">02</div>
  <div class="...">03</div>
  <div class="col-span-2 col-end-7 ...">03</div>
  <div class="col-start-1 col-end-7 ...">04</div>
</div>
```

----------------------------------------

TITLE: Demonstrating Automatic Class Sorting with Prettier in HTML
DESCRIPTION: This HTML example illustrates how the Prettier plugin for Tailwind CSS automatically sorts utility classes. The 'Before' section shows unsorted classes, while the 'After' section demonstrates the same classes reordered according to Tailwind's recommended class order, improving readability and consistency.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/blog/automatic-class-sorting-with-prettier/index.mdx#_snippet_0

LANGUAGE: html
CODE:
```
<!-- Before -->
<button class="text-white px-4 sm:px-8 py-2 sm:py-3 bg-sky-700 hover:bg-sky-800">...</button>

<!-- After -->
<button class="bg-sky-700 px-4 py-2 text-white hover:bg-sky-800 sm:px-8 sm:py-3">...</button>
```

----------------------------------------

TITLE: Building Custom Checkbox with Headless UI React
DESCRIPTION: This snippet demonstrates how to create a custom checkbox using Headless UI's `Checkbox` component. It shows how to apply styling based on the checked state and focus, and how to associate it with a `Label` and `Description` for accessibility. The `CheckmarkIcon` is used for visual feedback when checked.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/blog/headless-ui-v2/index.mdx#_snippet_2

LANGUAGE: jsx
CODE:
```
import { Checkbox, Description, Field, Label } from "@headlessui/react";
import { CheckmarkIcon } from "./icons/checkmark";
import clsx from "clsx";

function Example() {
  return (
    <Field>
      // [!code highlight:11]
      <Checkbox
        defaultChecked
        className={clsx(
          "size-4 rounded border bg-white dark:bg-white/5",
          "data-[checked]:border-transparent data-[checked]:bg-blue-500",
          "focus:outline-none data-[focus]:outline-2 data-[focus]:outline-offset-2 data-[focus]:outline-blue-500",
        )}
      >
        <CheckmarkIcon className="stroke-white opacity-0 group-data-[checked]:opacity-100" />
      </Checkbox>
      <div>
        <Label>Enable beta features</Label>
        <Description>This will give you early access to any awesome new features we're developing.</Description>
      </div>
    </Field>
  );
}
```

----------------------------------------

TITLE: Applying Text Decoration on Hover with Tailwind CSS
DESCRIPTION: Demonstrates how to apply text decoration utilities conditionally on hover. By combining `no-underline` with `hover:underline`, the text will only show an underline when the user hovers over it.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/docs/text-decoration-line.mdx#_snippet_4

LANGUAGE: html
CODE:
```
<!-- [!code classes:hover:underline] -->
<p>The <a href="..." class="no-underline hover:underline ...">quick brown fox</a> jumps over the lazy dog.</p>
```

----------------------------------------

TITLE: Tailwind CSS Container Query for @xl Breakpoint
DESCRIPTION: Defines a container query that applies styles when the container's width is greater than or equal to 36rem, corresponding to the @xl breakpoint in Tailwind CSS.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/docs/hover-focus-and-other-states.mdx#_snippet_138

LANGUAGE: CSS
CODE:
```
@container (width >= 36rem)
```

----------------------------------------

TITLE: Using Arbitrary Tailwind CSS Group Variants
DESCRIPTION: This example illustrates how to define one-off `group-*` variants using arbitrary values, allowing custom selectors like `.is-published`. It includes both the HTML markup applying the arbitrary variant and the corresponding CSS generated by Tailwind CSS, demonstrating how the arbitrary selector is compiled.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/docs/hover-focus-and-other-states.mdx#_snippet_19

LANGUAGE: html
CODE:
```
<!-- [!code classes:group-[.is-published]:block] -->
<div class="group is-published">
  <div class="hidden group-[.is-published]:block">
    Published
  </div>
</div>
```

LANGUAGE: css
CODE:
```
.group-\[\.is-published\]\:block {
  &:is(:where(.group):is(.is-published) *) {
    display: block;
  }
}
```

----------------------------------------

TITLE: Applying Responsive Container Max Width in Tailwind CSS
DESCRIPTION: Defines a responsive container that sets its width to 100% by default and applies increasing maximum widths at different breakpoint sizes (40rem, 48rem, 64rem, 80rem, 96rem). This ensures content is constrained on larger screens.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/docs/max-width.mdx#_snippet_28

LANGUAGE: CSS
CODE:
```
width: 100%;
@media (width >= 40rem) { max-width: 40rem; }
@media (width >= 48rem) { max-width: 48rem; }
@media (width >= 64rem) { max-width: 64rem; }
@media (width >= 80rem) { max-width: 80rem; }
@media (width >= 96rem) { max-width: 96rem; }
```

----------------------------------------

TITLE: Target parent/sibling elements with group-aria variants
DESCRIPTION: Illustrates the use of `group-aria-*` variants in Tailwind CSS to apply styles to child elements based on the ARIA state of a parent element. This enables complex styling relationships within a component, such as rotating an SVG icon based on the `aria-sort` state of its parent table header.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/docs/hover-focus-and-other-states.mdx#_snippet_65

LANGUAGE: HTML
CODE:
```
<!-- [!code classes:group-aria-[sort=ascending]:rotate-0,group-aria-[sort=descending]:rotate-180] -->
<table>
  <thead>
    <tr>
    <th aria-sort="ascending" class="group">
      Invoice #
      <svg class="group-aria-[sort=ascending]:rotate-0 group-aria-[sort=descending]:rotate-180"><!-- ... --></svg>
    </th>
    <!-- ... -->
    </tr>
  </thead>
  <!-- ... -->
</table>
```

LANGUAGE: CSS
CODE:
```
.group-aria-\[sort\=ascending\]\:rotate-0 {
  &:is(:where(.group)[aria-sort="ascending"] *) {
    rotate: 0deg;
  }
}
.group-aria-\[sort\=descending\]\:rotate-180 {
  &:is(:where(.group)[aria-sort="descending"] *) {
    rotate: 180deg;
  }
}
```

----------------------------------------

TITLE: Defining OKLCH Color Variables for Tailwind CSS
DESCRIPTION: This CSS snippet defines a comprehensive set of custom properties for various color palettes using the OKLCH color model. Each variable, named with a color and shade (e.g., `--color-cyan-500`), provides a specific color value in the perceptually uniform OKLCH format, ensuring consistent and accessible color usage across a design system. These variables serve as foundational color tokens for a framework like Tailwind CSS.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/docs/theme.mdx#_snippet_29

LANGUAGE: CSS
CODE:
```
--color-cyan-300: oklch(0.865 0.127 207.078);
  --color-cyan-400: oklch(0.789 0.154 211.53);
  --color-cyan-500: oklch(0.715 0.143 215.221);
  --color-cyan-600: oklch(0.609 0.126 221.723);
  --color-cyan-700: oklch(0.52 0.105 223.128);
  --color-cyan-800: oklch(0.45 0.085 224.283);
  --color-cyan-900: oklch(0.398 0.07 227.392);
  --color-cyan-950: oklch(0.302 0.056 229.695);

  --color-sky-50: oklch(0.977 0.013 236.62);
  --color-sky-100: oklch(0.951 0.026 236.824);
  --color-sky-200: oklch(0.901 0.058 230.902);
  --color-sky-300: oklch(0.828 0.111 230.318);
  --color-sky-400: oklch(0.746 0.16 232.661);
  --color-sky-500: oklch(0.685 0.169 237.323);
  --color-sky-600: oklch(0.588 0.158 241.966);
  --color-sky-700: oklch(0.5 0.134 242.749);
  --color-sky-800: oklch(0.443 0.11 240.79);
  --color-sky-900: oklch(0.391 0.09 240.876);
  --color-sky-950: oklch(0.293 0.066 243.157);

  --color-blue-50: oklch(0.97 0.014 254.604);
  --color-blue-100: oklch(0.932 0.032 255.585);
  --color-blue-200: oklch(0.882 0.059 254.128);
  --color-blue-300: oklch(0.809 0.105 251.813);
  --color-blue-400: oklch(0.707 0.165 254.624);
  --color-blue-500: oklch(0.623 0.214 259.815);
  --color-blue-600: oklch(0.546 0.245 262.881);
  --color-blue-700: oklch(0.488 0.243 264.376);
  --color-blue-800: oklch(0.424 0.199 265.638);
  --color-blue-900: oklch(0.379 0.146 265.522);
  --color-blue-950: oklch(0.282 0.091 267.935);

  --color-indigo-50: oklch(0.962 0.018 272.314);
  --color-indigo-100: oklch(0.93 0.034 272.788);
  --color-indigo-200: oklch(0.87 0.065 274.039);
  --color-indigo-300: oklch(0.785 0.115 274.713);
  --color-indigo-400: oklch(0.673 0.182 276.935);
  --color-indigo-500: oklch(0.585 0.233 277.117);
  --color-indigo-600: oklch(0.511 0.262 276.966);
  --color-indigo-700: oklch(0.457 0.24 277.023);
  --color-indigo-800: oklch(0.398 0.195 277.366);
  --color-indigo-900: oklch(0.359 0.144 278.697);
  --color-indigo-950: oklch(0.257 0.09 281.288);

  --color-violet-50: oklch(0.969 0.016 293.756);
  --color-violet-100: oklch(0.943 0.029 294.588);
  --color-violet-200: oklch(0.894 0.057 293.283);
  --color-violet-300: oklch(0.811 0.111 293.571);
  --color-violet-400: oklch(0.702 0.183 293.541);
  --color-violet-500: oklch(0.606 0.25 292.717);
  --color-violet-600: oklch(0.541 0.281 293.009);
  --color-violet-700: oklch(0.491 0.27 292.581);
  --color-violet-800: oklch(0.432 0.232 292.759);
  --color-violet-900: oklch(0.38 0.189 293.745);
  --color-violet-950: oklch(0.283 0.141 291.089);

  --color-purple-50: oklch(0.977 0.014 308.299);
  --color-purple-100: oklch(0.946 0.033 307.174);
  --color-purple-200: oklch(0.902 0.063 306.703);
  --color-purple-300: oklch(0.827 0.119 306.383);
  --color-purple-400: oklch(0.714 0.203 305.504);
  --color-purple-500: oklch(0.627 0.265 303.9);
  --color-purple-600: oklch(0.558 0.288 302.321);
  --color-purple-700: oklch(0.496 0.265 301.924);
  --color-purple-800: oklch(0.438 0.218 303.724);
  --color-purple-900: oklch(0.381 0.176 304.987);
  --color-purple-950: oklch(0.291 0.149 302.717);

  --color-fuchsia-50: oklch(0.977 0.017 320.058);
  --color-fuchsia-100: oklch(0.952 0.037 318.852);
  --color-fuchsia-200: oklch(0.903 0.076 319.62);
  --color-fuchsia-300: oklch(0.833 0.145 321.434);
  --color-fuchsia-400: oklch(0.74 0.238 322.16);
  --color-fuchsia-500: oklch(0.667 0.295 322.15);
  --color-fuchsia-600: oklch(0.591 0.293 322.896);
  --color-fuchsia-700: oklch(0.518 0.253 323.949);
  --color-fuchsia-800: oklch(0.452 0.211 324.591);
  --color-fuchsia-900: oklch(0.401 0.17 325.612);
  --color-fuchsia-950: oklch(0.293 0.136 325.661);

  --color-pink-50: oklch(0.971 0.014 343.198);
  --color-pink-100: oklch(0.948 0.028 342.258);
  --color-pink-200: oklch(0.899 0.061 343.231);
  --color-pink-300: oklch(0.823 0.12 346.018);
  --color-pink-400: oklch(0.718 0.202 349.761);
  --color-pink-500: oklch(0.656 0.241 354.308);
  --color-pink-600: oklch(0.592 0.249 0.584);
  --color-pink-700: oklch(0.525 0.223 3.958);
  --color-pink-800: oklch(0.459 0.187 3.815);
  --color-pink-900: oklch(0.408 0.153 2.432);
  --color-pink-950: oklch(0.284 0.109 3.907);

  --color-rose-50: oklch(0.969 0.015 12.422);
  --color-rose-100: oklch(0.941 0.03 12.58);
  --color-rose-200: oklch(0.892 0.058 10.001);
  --color-rose-300: oklch(0.81 0.117 11.638);
  --color-rose-400: oklch(0.712 0.194 13.428);
  --color-rose-500: oklch(0.645 0.246 16.439);
  --color-rose-600: oklch(0.586 0.253 17.585);
  --color-rose-700: oklch(0.514 0.222 16.935);
  --color-rose-800: oklch(0.455 0.188 13.697);
  --color-rose-900: oklch(0.41 0.159 10.272);
  --color-rose-950: oklch(0.271 0.105 12.094);

  --color-slate-50: oklch(0.984 0.003 247.858);
  --color-slate-100: oklch(0.968 0.007 247.896);
  --color-slate-200: oklch(0.929 0.013 255.508);
  --color-slate-300: oklch(0.869 0.022 252.894);
  --color-slate-400: oklch(0.704 0.04 256.788);
  --color-slate-500: oklch(0.554 0.046 257.417);
  --color-slate-600: oklch(0.446 0.043 257.281);
```

----------------------------------------

TITLE: Determining Next/Previous Posts Client-Side in Next.js
DESCRIPTION: This `Post` layout component leverages the `useRouter` hook from Next.js to access the current page's pathname. It then uses this pathname to find the current post's index within the `posts` array (which is passed as a prop). Based on this index, it identifies and retrieves the `previous` and `next` posts for navigation purposes.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/blog/building-the-tailwind-blog/index.mdx#_snippet_10

LANGUAGE: JavaScript
CODE:
```
export default function Post({ meta, children, posts }) {
  const router = useRouter();
  const postIndex = posts.findIndex((post) => post.link === router.pathname);
  const previous = posts[postIndex + 1];
  const next = posts[postIndex - 1];

  // ...
}
```

----------------------------------------

TITLE: Defining Rose Oklch Color Palette in CSS
DESCRIPTION: This snippet provides a comprehensive set of rose color shades as CSS custom properties, utilizing the Oklch color model. These variables are perfect for creating a consistent and appealing rose palette in web applications, enhancing overall design coherence.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/docs/colors.mdx#_snippet_25

LANGUAGE: CSS
CODE:
```
--color-rose-50: oklch(0.969 0.015 12.422);
--color-rose-100: oklch(0.941 0.03 12.58);
--color-rose-200: oklch(0.892 0.058 10.001);
--color-rose-300: oklch(0.81 0.117 11.638);
--color-rose-400: oklch(0.712 0.194 13.428);
--color-rose-500: oklch(0.645 0.246 16.439);
--color-rose-600: oklch(0.586 0.253 17.585);
--color-rose-700: oklch(0.514 0.222 16.935);
--color-rose-800: oklch(0.455 0.188 13.697);
--color-rose-900: oklch(0.41 0.159 10.272);
--color-rose-950: oklch(0.271 0.105 12.094);
```

----------------------------------------

TITLE: Importing Shared Theme Variables into a Project
DESCRIPTION: This CSS snippet shows how to import a shared theme variables file (`../brand/theme.css`) into another project's main CSS file (`app.css`). This allows the current project to utilize the centralized design tokens defined in the shared theme, promoting consistency and modularity.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/docs/theme.mdx#_snippet_22

LANGUAGE: css
CODE:
```
@import "tailwindcss";
@import "../brand/theme.css";
```

----------------------------------------

TITLE: Mapping Props to Static Class Name Variants in JSX with Tailwind
DESCRIPTION: This JSX code further illustrates the best practice of mapping component props to complete, static Tailwind class names. This approach allows for flexible styling, such as applying different color shades or text colors based on a single prop, while ensuring all class names are detectable by Tailwind's plain-text scanner.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/docs/detecting-classes-in-source-files.mdx#_snippet_5

LANGUAGE: JSX
CODE:
```
function Button({ color, children }) {
  const colorVariants = {
    blue: "bg-blue-600 hover:bg-blue-500 text-white",
    red: "bg-red-500 hover:bg-red-400 text-white",
    yellow: "bg-yellow-300 hover:bg-yellow-400 text-black"
  };

  return <button className={`${colorVariants[color]} ...`}>{children}</button>;
}
```

----------------------------------------

TITLE: Applying Container Query Units in HTML
DESCRIPTION: This HTML snippet shows how to use container query length units, specifically `cqw` (container query width), as arbitrary values within Tailwind CSS utility classes. The `w-[50cqw]` class sets the width of the inner `div` to 50% of its `@container` parent's width, allowing for responsive sizing relative to the container rather than the viewport.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/docs/responsive-design.mdx#_snippet_21

LANGUAGE: html
CODE:
```
<div class="@container">
  <div class="w-[50cqw]">
    <!-- ... -->
  </div>
</div>
```

----------------------------------------

TITLE: Styling Native Form Controls with Tailwind CSS
DESCRIPTION: This snippet demonstrates how to style native HTML form elements like file inputs and checkboxes using Tailwind CSS utility classes. It highlights the use of `file:` modifiers for file input buttons and the `accent-color` property for checkboxes, allowing for custom appearance without JavaScript.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/blog/tailwindcss-v3/index.mdx#_snippet_7

LANGUAGE: HTML
CODE:
```
<!-- [!code word:file\:mr-4] -->
<!-- [!code word:file\:py-2] -->
<!-- [!code word:file\:px-4] -->
<!-- [!code word:file\:rounded-full] -->
<!-- [!code word:file\:border-0] -->
<!-- [!code word:file\:text-sm] -->
<!-- [!code word:file\:font-semibold] -->
<!-- [!code word:file\:bg-violet-50] -->
<!-- [!code word:file\:text-violet-700] -->
<!-- [!code word:hover\:file\:bg-violet-100] -->
<form>
  <div class="flex items-center space-x-6">
    <div class="shrink-0">
      <img
        class="h-16 w-16 rounded-full object-cover"
        src="https://images.unsplash.com/photo-1580489944761-15a19d654956?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=1361&q=80"
        alt="Current profile photo"
      />
    </div>
    <label class="block">
      <span class="sr-only">Choose profile photo</span>
      <input
        type="file"
        class="block w-full text-sm text-slate-500 file:mr-4 file:rounded-full file:border-0 file:bg-violet-50 file:py-2 file:text-sm file:font-semibold file:text-violet-700 hover:file:bg-violet-100"
      />
    </label>
  </div>
  <label class="mt-6 flex items-center justify-center space-x-2 text-sm font-medium text-slate-600">
    <!-- [!code word:accent-violet-500] -->
    <input type="checkbox" class="accent-violet-500" checked />
    <span>Yes, send me all your stupid updates</span>
  </label>
</form>
```

----------------------------------------

TITLE: Defining Gray Oklch Color Palette in CSS
DESCRIPTION: This snippet outlines various gray color shades as CSS custom properties, leveraging the Oklch color space. These definitions enable developers to easily access and apply a consistent gray palette throughout their stylesheets, promoting design uniformity and accessibility.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/docs/colors.mdx#_snippet_27

LANGUAGE: CSS
CODE:
```
--color-gray-50: oklch(0.985 0.002 247.839);
--color-gray-100: oklch(0.967 0.003 264.542);
--color-gray-200: oklch(0.928 0.006 264.531);
--color-gray-300: oklch(0.872 0.01 258.338);
--color-gray-400: oklch(0.707 0.022 261.325);
```

----------------------------------------

TITLE: Defining Custom Font Theme Variable in Tailwind CSS
DESCRIPTION: This CSS snippet shows how to define a new custom font theme variable, `--font-poppins`, within `app.css` using the `@theme` directive. By defining this variable, Tailwind CSS automatically makes a `font-poppins` utility class available for use in HTML, allowing easy application of the custom font.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/docs/theme.mdx#_snippet_4

LANGUAGE: css
CODE:
```
/* [!code filename:app.css] */
@import "tailwindcss";

@theme {
  /* [!code highlight:2] */
  --font-poppins: Poppins, sans-serif;
}
```

----------------------------------------

TITLE: Applying Relative Positioning with Tailwind CSS (HTML/JSX)
DESCRIPTION: This example illustrates the use of the `relative` utility in Tailwind CSS, which positions an element according to the normal document flow but allows offsets to be applied relative to its original position. Crucially, relatively positioned elements establish a new positioning context, acting as a reference for absolutely positioned child elements.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/docs/position.mdx#_snippet_1

LANGUAGE: jsx
CODE:
```
<div className="relative text-sm leading-6 font-medium">\n  <div className="rounded-lg border border-sky-700/10 bg-sky-400/20 p-4 dark:border-0 dark:bg-blue-900/70">\n    <div className="relative h-32 border border-sky-700/10 bg-sky-400/20 p-4 dark:border-0 dark:bg-blue-400/20">\n      <p className="text-sky-700 dark:text-white">Relative parent</p>\n      <div className="absolute bottom-0 left-0 rounded-lg bg-sky-500 p-4 text-white shadow-lg dark:bg-blue-500">\n        <p>Absolute child</p>\n      </div>\n    </div>\n  </div>\n</div>
```

LANGUAGE: html
CODE:
```
<!-- [!code classes:relative] -->\n<div class="relative ...">\n  <p>Relative parent</p>\n  <div class="absolute bottom-0 left-0 ...">\n    <p>Absolute child</p>\n  </div>\n</div>
```

----------------------------------------

TITLE: Using @tailwindui/react Transition Component in React
DESCRIPTION: This example illustrates the usage of the `<Transition>` component from `@tailwindui/react` to implement utility-first enter/leave animations in a React application. It leverages React's `useState` hook to manage the `isOpen` state, which controls the `show` prop of the `<Transition>` component. The `enter`, `enterFrom`, `enterTo`, `leave`, `leaveFrom`, and `leaveTo` props accept Tailwind CSS utility classes to define the transition behavior, mirroring the Vue.js approach.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/blog/utility-friendly-transitions-with-tailwindui-react/index.mdx#_snippet_1

LANGUAGE: JSX
CODE:
```
import { Transition } from "@tailwindui/react";
import { useState } from "react";

function MyComponent() {
  const [isOpen, setIsOpen] = useState(false);

  return (
    <div>
      <button onClick={() => setIsOpen(!isOpen)}>Toggle</button>
      <Transition
        show={isOpen}
        enter="transition-opacity duration-75"
        enterFrom="opacity-0"
        enterTo="opacity-100"
        leave="transition-opacity duration-150"
        leaveFrom="opacity-100"
        leaveTo="opacity-0"
      >
        {/* Will fade in and out */}
      </Transition>
    </div>
  );
}
```

----------------------------------------

TITLE: Using @reference with @apply in Vue/Svelte/CSS Modules
DESCRIPTION: Shows how to use the `@reference` directive to import theme variables, custom utilities, and variants into separately bundled stylesheets (like Vue `<style>` blocks or CSS modules) without duplicating CSS, enabling `@apply` usage.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/docs/upgrade-guide.mdx#_snippet_30

LANGUAGE: Vue
CODE:
```
<template>
  <h1>Hello world!</h1>
</template>

<style>
  @reference "../../app.css";

  h1 {
    @apply text-2xl font-bold text-red-500;
  }
</style>
```

----------------------------------------

TITLE: Apply Arbitrary Background Color in Tailwind HTML
DESCRIPTION: Shows how to use Tailwind's square bracket syntax to apply a specific, one-off background color (e.g., a custom hex code like Facebook blue) that is not defined in your theme configuration. This is useful for unique styling requirements.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/docs/styling-with-utility-classes.mdx#_snippet_14

LANGUAGE: HTML
CODE:
```
<button class="bg-[#316ff6] ...">
  Sign in with Facebook
</button>
```

----------------------------------------

TITLE: Example of Tailwind CSS Logical Properties in LTR and RTL
DESCRIPTION: This HTML snippet demonstrates the use of Tailwind CSS logical properties like `ms-3` for automatic margin adaptation in both Left-to-Right (LTR) and Right-to-Left (RTL) layouts. It shows how `ms-3` replaces explicit `ltr:ml-3 rtl:mr-3` for simplified multi-directional styling.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/blog/tailwindcss-v3-3/index.mdx#_snippet_4

LANGUAGE: HTML
CODE:
```
<div className="mx-auto grid max-w-lg grid-cols-1 gap-x-6 gap-y-10 sm:grid-cols-2">
  <div dir="ltr">
    <p className="mb-4 text-sm font-medium">Left-to-right</p>
    <div className="group flex items-center">
      <img
        className="h-12 w-12 shrink-0 rounded-full"
        src="https://images.unsplash.com/photo-1472099645785-5658abf4ff4e?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=facearea&facepad=2&w=256&h=256&q=80"
        alt=""
      />
      <div className="ms-3">
        <p className="text-sm font-medium text-slate-700 group-hover:text-slate-900 dark:text-slate-300 dark:group-hover:text-white">
          <>Tom Cook</>
        </p>
        <p className="text-sm font-medium text-slate-500 group-hover:text-slate-700 dark:group-hover:text-slate-300">
          <>Director of Operations</>
        </p>
      </div>
    </div>
  </div>
  <div dir="rtl">
    <p className="mb-4 text-sm font-medium">Right-to-left</p>
    <div className="group flex items-center">
      <img
        className="h-12 w-12 shrink-0 rounded-full"
        src="https://images.unsplash.com/photo-1563833717765-00462801314e?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=facearea&facepad=2&w=256&h=256&q=80"
        alt=""
      />
      <div className="ms-3">
        <p className="text-sm font-medium text-slate-700 group-hover:text-slate-900 dark:text-slate-300 dark:group-hover:text-white">
          <>تامر كرم</>
        </p>
        <p className="text-sm font-medium text-slate-500 group-hover:text-slate-700 dark:group-hover:text-slate-300">
          <>الرئيس التنفيذي</>
        </p>
      </div>
    </div>
  </div>
</div>
```

----------------------------------------

TITLE: Creating Sticky Table Headers with Tailwind CSS
DESCRIPTION: This example demonstrates how to create a table with a sticky header row using Tailwind CSS. It utilizes `border-separate` and `border-spacing-0` on the table, combined with `sticky top-0` on the table headers, to achieve a persistent bottom border under the headings while scrolling. The `overflow-auto` on the parent div enables scrolling within the table.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/blog/tailwindcss-v3-1/index.mdx#_snippet_11

LANGUAGE: JSX
CODE:
```
<div className="isolate h-72 overflow-auto rounded-xl">
  <table className="min-w-full border-separate border-spacing-0">
    <thead className="bg-gray-50">
      <tr>
        <th
          scope="col"
          className="bg-opacity-75 sticky top-0 z-10 border-b border-gray-300 bg-gray-50 py-3.5 pr-3 pl-4 text-left text-sm font-semibold text-gray-900 backdrop-blur backdrop-filter sm:pl-6 lg:pl-8"
        >
          <>Name</>
        </th>
        <th
          scope="col"
          className="bg-opacity-75 sticky top-0 z-10 hidden border-b border-gray-300 bg-gray-50 px-3 py-3.5 text-left text-sm font-semibold text-gray-900 backdrop-blur backdrop-filter lg:table-cell"
        >
          <>Email</>
        </th>
        <th
          scope="col"
          className="bg-opacity-75 sticky top-0 z-10 border-b border-gray-300 bg-gray-50 px-3 py-3.5 text-left text-sm font-semibold text-gray-900 backdrop-blur backdrop-filter"
        >
          <>Role</>
        </th>
      </tr>
    </thead>
    <tbody className="bg-white">
      <tr>
        <td className="border-b border-gray-200 py-4 pr-3 pl-4 text-sm font-medium whitespace-nowrap text-gray-900 sm:pl-6 lg:pl-8">
          <>Courtney Henry</>
        </td>
        <td className="hidden border-b border-gray-200 px-3 py-4 text-sm whitespace-nowrap text-gray-500 lg:table-cell">
          <>courtney.henry@example.com</>
        </td>
        <td className="border-b border-gray-200 px-3 py-4 text-sm whitespace-nowrap text-gray-500">Admin</td>
      </tr>
      <tr>
        <td className="border-b border-gray-200 py-4 pr-3 pl-4 text-sm font-medium whitespace-nowrap text-gray-900 sm:pl-6 lg:pl-8">
          <>Tom Cook</>
        </td>
        <td className="hidden border-b border-gray-200 px-3 py-4 text-sm whitespace-nowrap text-gray-500 lg:table-cell">
          <>tom.cook@example.com</>
        </td>
        <td className="border-b border-gray-200 px-3 py-4 text-sm whitespace-nowrap text-gray-500">Member</td>
```

----------------------------------------

TITLE: Applying Rings (Outline Shadows) with Tailwind CSS
DESCRIPTION: This snippet demonstrates how to add a solid ring (outline) around an element using Tailwind CSS ring utilities. It showcases `ring` for a default ring, `ring-2` for a thicker ring, and `ring-4` for an even more pronounced ring. These utilities are useful for focus states or highlighting elements.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/docs/box-shadow.mdx#_snippet_5

LANGUAGE: html
CODE:
```
<button class="ring ...">Subscribe</button>
<button class="ring-2 ...">Subscribe</button>
<button class="ring-4 ...">Subscribe</button>
```

----------------------------------------

TITLE: Adjust Input Contrast with prefers-contrast in Tailwind CSS
DESCRIPTION: Illustrates how to use the `contrast-more` variant to modify input field borders and placeholder opacity when the user has requested higher contrast, enhancing readability. It also shows how to adjust text visibility for accessibility.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/docs/hover-focus-and-other-states.mdx#_snippet_42

LANGUAGE: jsx
CODE:
```
<div className="mx-auto max-w-sm border-x border-x-gray-200 px-6 pt-6 pb-4 dark:border-x-gray-800 dark:bg-gray-950/10">
  <form>
    <div>
      <label htmlFor="contrast-example" className="block text-sm font-medium text-gray-700 dark:text-white">
        Social Security Number
      </label>
      <div className="mt-1">
        <input
          type="text"
          name="contrast-example"
          id="contrast-example"
          className="block w-full rounded-md border border-gray-200 px-3 py-2 placeholder-gray-400 shadow-sm focus:border-sky-500 focus:outline focus:outline-sky-500 contrast-more:border-gray-400 contrast-more:placeholder-gray-500 sm:text-sm dark:border-gray-900 dark:contrast-more:border-gray-700 dark:contrast-more:placeholder-gray-300"
          placeholder="000-00-0000"
        />
        <p className="mt-2 text-sm text-gray-600 opacity-10 contrast-more:opacity-100 dark:text-gray-400">
          We need this to steal your identity.
        </p>
      </div>
    </div>
  </form>
</div>
```

LANGUAGE: html
CODE:
```
<!-- [!code classes:contrast-more:border-gray-400,contrast-more:placeholder-gray-500,contrast-more:opacity-100] -->
<label class="block">
  <span class="block text-sm font-medium text-gray-700">Social Security Number</span>
  <input
    class="border-gray-200 placeholder-gray-400 contrast-more:border-gray-400 contrast-more:placeholder-gray-500 ..."
  />
  <p class="text-gray-600 opacity-10 contrast-more:opacity-100 ...">We need this to steal your identity.</p>
</label>
```

----------------------------------------

TITLE: Tailwind CSS Container Query for @max-3xs Breakpoint
DESCRIPTION: Defines a container query that applies styles when the container's width is less than 16rem, corresponding to the @max-3xs breakpoint in Tailwind CSS.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/docs/hover-focus-and-other-states.mdx#_snippet_146

LANGUAGE: CSS
CODE:
```
@container (width < 16rem)
```

----------------------------------------

TITLE: Responsive Layout for Marketing Component in HTML
DESCRIPTION: This HTML snippet demonstrates building a responsive marketing page component using Tailwind CSS. It utilizes md:flex to switch from a stacked layout on small screens to a side-by-side layout on medium screens, adjusting image dimensions and container width accordingly.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/docs/responsive-design.mdx#_snippet_4

LANGUAGE: HTML
CODE:
```
<div class="mx-auto max-w-md overflow-hidden rounded-xl bg-white shadow-md md:max-w-2xl">
  <div class="md:flex">
    <div class="md:shrink-0">
      <img
        class="h-48 w-full object-cover md:h-full md:w-48"
        src="/img/building.jpg"
        alt="Modern building architecture"
      />
    </div>
    <div class="p-8">
      <div class="text-sm font-semibold tracking-wide text-indigo-500 uppercase">Company retreats</div>
      <a href="#" class="mt-1 block text-lg leading-tight font-medium text-black hover:underline">
        Incredible accommodation for your team
      </a>
      <p class="mt-2 text-gray-500">
```

----------------------------------------

TITLE: Aligning Items to Start with `items-start` in Tailwind CSS (HTML/JSX)
DESCRIPTION: This snippet illustrates the use of the `items-start` utility in Tailwind CSS to align flex items to the beginning of the container's cross axis. It provides both a React JSX implementation and a standard HTML example.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/docs/align-items.mdx#_snippet_1

LANGUAGE: tsx
CODE:
```
<div className="grid grid-cols-1">
  <Stripes border className="col-start-1 row-start-1 rounded-lg" />
  <div className="col-start-1 row-start-1 flex w-full items-start gap-4 rounded-lg text-center font-mono text-sm leading-6 font-bold text-white">
    <div className="flex flex-1 items-center justify-center rounded-lg bg-pink-500 py-4">01</div>
    <div className="flex flex-1 items-center justify-center rounded-lg bg-pink-500 py-12">02</div>
    <div className="flex flex-1 items-center justify-center rounded-lg bg-pink-500 py-8">03</div>
  </div>
</div>
```

LANGUAGE: html
CODE:
```
<!-- [!code classes:items-start] -->
<div class="flex items-start ...">
  <div class="py-4">01</div>
  <div class="py-12">02</div>
  <div class="py-8">03</div>
</div>
```

----------------------------------------

TITLE: Style input when enabled with :enabled
DESCRIPTION: Applies styles to an input element when it is in an enabled state using the `enabled` variant. This is particularly useful when you want to apply styles only when an element is not disabled, often in combination with other pseudo-classes like `:hover`.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/docs/hover-focus-and-other-states.mdx#_snippet_214

LANGUAGE: html
CODE:
```
<!-- [!code classes:enabled:hover:border-gray-400] -->
<input class="enabled:hover:border-gray-400 disabled:opacity-75 ..." />
```

----------------------------------------

TITLE: Applying Divider Styles with Tailwind CSS
DESCRIPTION: This example demonstrates how to use Tailwind CSS `divide-*` utilities, specifically `divide-dashed`, to apply a border style between child elements within a container. The `divide-x-3` class sets the border width and direction, while `divide-dashed` sets the style.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/docs/border-style.mdx#_snippet_3

LANGUAGE: HTML
CODE:
```
<!-- [!code classes:divide-dashed] -->
<div class="grid grid-cols-3 divide-x-3 divide-dashed divide-indigo-500">
  <div>01</div>
  <div>02</div>
  <div>03</div>
</div>
```

----------------------------------------

TITLE: Tailwind CSS: Open state selector
DESCRIPTION: Applies styles when an element is in an 'open' state, using an `:is` selector that checks for the `open` attribute, `:popover-open`, or `:open` pseudo-class.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/docs/hover-focus-and-other-states.mdx#_snippet_191

LANGUAGE: CSS
CODE:
```
&:is([open], :popover-open, :open)
```

----------------------------------------

TITLE: Coordinating Nested Transitions with TransitionRoot and TransitionChild in Vue.js
DESCRIPTION: This example illustrates the use of Headless UI's TransitionRoot and TransitionChild components in Vue.js for managing complex, nested UI transitions. TransitionRoot controls the visibility of its children, while TransitionChild applies specific transition classes (enter, leave, duration, transform) to individual elements, enabling parallel animations for components like background overlays and sliding sidebars. It requires importing `ref`, `Transition`, and `TransitionChild` from `@headlessui/vue`.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/blog/headless-ui-v1/index.mdx#_snippet_4

LANGUAGE: html
CODE:
```
<template>
  <!-- This `show` prop controls all nested `Transition.Child` components. -->
  <TransitionRoot :show="isOpen">
    <!-- Background overlay -->
    <TransitionChild
      enter="transition-opacity ease-linear duration-300"
      enter-from="opacity-0"
      enter-to="opacity-100"
      leave="transition-opacity ease-linear duration-300"
      leave-from="opacity-100"
      leave-to="opacity-0"
    >
      <!-- … -->
    </TransitionChild>

    <!-- Sliding sidebar -->
    <TransitionChild
      enter="transition ease-in-out duration-300 transform"
      enter-from="-translate-x-full"
      enter-to="translate-x-0"
      leave="transition ease-in-out duration-300 transform"
      leave-from="translate-x-0"
      leave-to="-translate-x-full"
    >
      <!-- … -->
    </TransitionChild>
  </TransitionRoot>
</template>
```

LANGUAGE: javascript
CODE:
```
<script>
import { ref } from "vue";
import { Transition, TransitionChild } from "@headlessui/vue";

export default {
  components: { TransitionRoot: Transition, TransitionChild },

  setup() {
    const isShowing = ref(true);

    return {
      isShowing,
    };
  },
};
</script>
```

----------------------------------------

TITLE: Visualizing Box-Content with JSX and Tailwind CSS
DESCRIPTION: This JSX snippet provides a detailed visual demonstration of the `box-content` utility. It renders a `div` with `size-32` (8rem x 8rem) and `box-content`, along with `p-5` (padding) and `ring-4` (border), showing how these additions expand the element beyond its initial 32x32 unit size. The surrounding grid and measurement indicators highlight the actual rendered dimensions.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/docs/box-sizing.mdx#_snippet_1

LANGUAGE: JSX
CODE:
```
<div className="relative grid grid-cols-[1fr_8rem_1fr] grid-rows-[1fr_2fr_1fr] gap-px bg-gray-700/10 font-mono text-sm leading-6 font-bold dark:bg-gray-700">
      <div className="col-start-1 row-start-1 bg-white dark:bg-gray-900"></div>
      <div className="relative col-start-2 row-start-1 bg-white dark:bg-gray-900">
        {/* w-measure indicator */}
        <div className="absolute right-0 bottom-2 left-0 flex -translate-y-5">
          {/* Horizontal line */}
          <div className="absolute top-1/2 right-0 left-0 h-px -translate-y-px bg-blue-400"></div>
          {/* Left chip */}
          <div className="w-full">
            <div className="absolute top-1/2 left-0 h-2 w-px -translate-x-px -translate-y-1 rounded-full bg-blue-400"></div>
          </div>
          {/* Badge */}
          <div className="relative flex w-full flex-auto items-center justify-center bg-white px-1.5 font-mono text-xs leading-none font-bold text-blue-600 dark:bg-gray-900 dark:text-blue-400">
            128px
          </div>
          {/* Right chip */}
          <div className="w-full">
            <div className="absolute top-1/2 right-0 h-2 w-px translate-x-px -translate-y-1 rounded-full bg-blue-400"></div>
          </div>
        </div>
      </div>
      <div className="col-start-3 row-start-1 bg-white dark:bg-gray-900"></div>
      <div className="relative col-start-1 row-start-2 bg-white dark:bg-gray-900">
        {/* h-measure indicator */}
        <div className="absolute top-0 right-2 bottom-0 flex w-3 -translate-x-5">
          {/* Vertical line */}
          <div className="absolute top-0 bottom-0 left-1/2 w-px -translate-x-[0.5px] bg-blue-400"></div>
          {/* Top chip */}
          <div className="w-full">
            <div className="absolute top-0 left-1/2 h-px w-2 -translate-x-1 -translate-y-px rounded-full bg-blue-400"></div>
          </div>
          {/* Badge */}
          <div className="relative flex h-3 flex-auto -translate-x-[1.15rem] translate-y-14 -rotate-90 items-center justify-center bg-white px-1.5 font-mono text-xs leading-none font-bold text-blue-600 dark:bg-gray-900 dark:text-blue-400">
            128px
          </div>
          {/* Bottom chip */}
          <div className="w-full">
            <div className="absolute bottom-0 left-1/2 h-px w-2 -translate-x-1 translate-y-px rounded-full bg-blue-400"></div>
          </div>
        </div>
      </div>
      <div className="col-start-2 row-start-2 size-32 bg-white">
        <div className="relative box-content size-32 -translate-x-5 -translate-y-5 p-5 ring-4 ring-blue-300 ring-inset dark:ring-blue-500">
          <div className="h-full w-full bg-blue-500 ring-1 ring-blue-500"></div>
          <div className="absolute inset-1 z-10">
            <Stripes className="h-full" />
          </div>
        </div>
      </div>
      <div className="col-start-3 row-start-2 bg-white dark:bg-gray-900"></div>
      <div className="col-start-1 row-start-3 bg-white dark:bg-gray-900"></div>
      <div className="col-start-2 row-start-3 bg-white dark:bg-gray-900"></div>
      <div className="col-start-3 row-start-3 bg-white dark:bg-gray-900"></div>
    </div>
```

----------------------------------------

TITLE: Tailwind CSS :has() variant for conditional styling
DESCRIPTION: This HTML snippet demonstrates the application of Tailwind CSS's `has-*` variant to style a parent `<label>` element based on the checked state of a nested radio input. It creates a payment method selection interface, where the selected option's label changes appearance.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/docs/hover-focus-and-other-states.mdx#_snippet_230

LANGUAGE: html
CODE:
```
<div className="mx-auto max-w-md border-x border-x-gray-200 px-4 py-6 text-gray-700 dark:border-x-gray-800 dark:bg-gray-950/10 dark:text-gray-200">
  <fieldset>
    <legend className="text-base font-semibold text-gray-900 dark:text-white">Payment method</legend>
    <div className="mt-4 space-y-2">
      <label
        htmlFor="apple"
        className="grid grid-cols-[24px_1fr_auto] items-center gap-6 rounded-lg p-4 ring-1 ring-transparent hover:bg-gray-100 has-checked:bg-indigo-50 has-checked:text-indigo-800 has-checked:ring-indigo-200 dark:hover:bg-white/5 dark:has-checked:bg-indigo-950 dark:has-checked:text-indigo-200 dark:has-checked:ring-indigo-900"
      >
        <svg className="w-8" fill="currentColor" viewBox="0 0 24 13">
          <path d="M3.96299 1.735C3.22833 1.73504 2.50814 1.9393 1.88285 2.32497C1.25756 2.71063 0.751781 3.26252 0.42199 3.919C0.144511 4.47115 0 5.08054 0 5.6985C0 6.31645 0.144511 6.92584 0.42199 7.478C0.751781 8.13447 1.25756 8.68636 1.88285 9.07202C2.50814 9.45769 3.22833 9.66195 3.96299 9.662C5.03299 9.662 5.93299 9.31 6.58999 8.705C7.33799 8.015 7.76999 6.995 7.76999 5.789C7.76976 5.51882 7.74634 5.24916 7.69999 4.983H3.96399V6.509H6.10399C6.06043 6.75276 5.96798 6.98519 5.83221 7.19228C5.69644 7.39937 5.52016 7.57684 5.31399 7.714C4.95799 7.955 4.49999 8.093 3.96399 8.093C2.92999 8.093 2.05299 7.396 1.73899 6.457C1.57315 5.96493 1.57315 5.43207 1.73899 4.94C2.05299 4 2.92999 3.304 3.96399 3.304C4.52899 3.29475 5.07496 3.50811 5.48399 3.898L6.61599 2.768C5.89873 2.09384 4.94728 1.72362 3.96299 1.735ZM10.464 2.285V9.185H11.35V6.39H12.815C13.418 6.39 13.925 6.194 14.337 5.802C14.5421 5.61815 14.705 5.39214 14.8146 5.13945C14.9242 4.88676 14.9779 4.61337 14.972 4.338C14.9762 4.06405 14.9216 3.79238 14.8121 3.54125C14.7026 3.29011 14.5406 3.06533 14.337 2.882C14.1354 2.68674 13.897 2.53337 13.6358 2.43073C13.3746 2.32809 13.0956 2.27822 12.815 2.284L10.464 2.285ZM12.891 3.135C13.0456 3.13769 13.1981 3.17139 13.3395 3.23408C13.4808 3.29678 13.6082 3.3872 13.714 3.5C13.8267 3.60959 13.9162 3.74065 13.9774 3.88544C14.0385 4.03024 14.07 4.18582 14.07 4.343C14.07 4.50017 14.0385 4.65576 13.9774 4.80055C13.9162 4.94534 13.8267 5.07641 13.714 5.186C13.6007 5.30328 13.4642 5.39562 13.3132 5.45709C13.1622 5.51857 13 5.54783 12.837 5.543H11.35V3.135H12.837C12.855 3.13458 12.873 3.13458 12.891 3.135ZM17.015 4.31C16.173 4.31 15.538 4.618 15.108 5.235L15.889 5.726C16.177 5.309 16.569 5.1 17.064 5.1C17.3798 5.09612 17.6855 5.21145 17.92 5.423C18.0354 5.51846 18.1282 5.63844 18.1915 5.77423C18.2548 5.91001 18.2871 6.05818 18.286 6.208V6.41C17.946 6.217 17.512 6.121 16.986 6.121C16.369 6.121 15.876 6.266 15.507 6.555C15.137 6.843 14.953 7.232 14.953 7.72C14.949 7.9396 14.994 8.15734 15.0848 8.35733C15.1757 8.55732 15.31 8.73451 15.478 8.876C15.828 9.184 16.263 9.339 16.783 9.339C17.393 9.339 17.881 9.069 18.248 8.529H18.286V9.184H19.134V6.275C19.134 5.665 18.944 5.185 18.566 4.835C18.186 4.485 17.67 4.31 17.015 4.31ZM19.278 4.464L21.224 8.886L20.126 11.266H21.041L24 4.463H23.035L21.667 7.854H21.647L20.241 4.464H19.278ZM17.132 6.832C17.626 6.832 18.012 6.942 18.288 7.162C18.288 7.534 18.141 7.858 17.848 8.135C17.5835 8.39951 17.225 8.54839 16.851 8.549C16.6011 8.55376 16.3573 8.47178 16.161 8.317C16.0697 8.25093 15.9954 8.16402 15.9445 8.06349C15.8935 7.96295 15.8673 7.85171 15.868 7.739C15.868 7.482 15.988 7.269 16.231 7.092C16.471 6.919 16.772 6.832 17.132 6.832Z" />
        </svg>
        Google Pay
        <input
          name="payment_method"
          id="apple"
          value="google"
          type="radio"
          className="box-content h-1.5 w-1.5 appearance-none rounded-full border-[5px] border-white bg-white bg-clip-padding ring-1 ring-gray-950/20 outline-none checked:border-indigo-500 checked:ring-indigo-500"
          defaultChecked
        />
      </label>
      <label
        htmlFor="google"
        className="grid grid-cols-[24px_1fr_auto] items-center gap-6 rounded-lg p-4 ring-1 ring-transparent hover:bg-gray-100 has-checked:bg-indigo-50 has-checked:text-indigo-800 has-checked:ring-indigo-200 dark:hover:bg-white/5 dark:has-checked:bg-indigo-950 dark:has-checked:text-indigo-200 dark:has-checked:ring-indigo-900"
      >
        <svg className="mt-1 w-8 fill-current" fill="currentColor" viewBox="0 0 24 13">

```

----------------------------------------

TITLE: Defining a Custom Color Palette in CSS
DESCRIPTION: This snippet demonstrates how to completely disable all of Tailwind's default colors by setting `--color-*: initial` within the `@theme` directive. This allows you to define an entirely custom color palette from scratch for your project.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/docs/colors.mdx#_snippet_15

LANGUAGE: css
CODE:
```
@import "tailwindcss";

@theme {
  --color-*: initial;
  --color-white: #fff;
  --color-purple: #3f3cbb;
  --color-midnight: #121063;
  --color-tahiti: #3ab7bf;
  --color-bermuda: #78dcca;
}
```

----------------------------------------

TITLE: Apply Styles for Forced Colors Mode
DESCRIPTION: Demonstrates how to use `forced-colors:block` and `forced-colors:hidden` variants to conditionally apply styles based on the user's forced colors mode, ensuring accessibility for elements like radio buttons and their associated text/visual indicators.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/docs/hover-focus-and-other-states.mdx#_snippet_44

LANGUAGE: HTML
CODE:
```
<label>
  <input type="radio" class="appearance-none forced-colors:appearance-auto" />
  <p class="hidden forced-colors:block">Cyan</p>
  <div class="bg-cyan-200 forced-colors:hidden ..."></div>
  <div class="bg-cyan-500 forced-colors:hidden ..."></div>
</label>
```

----------------------------------------

TITLE: Loading Custom Fonts Using CSS @font-face Rule
DESCRIPTION: This CSS snippet illustrates how to use the `@font-face` at-rule to load a custom font, 'Oswald', into a web page. It specifies the font family name, style, weight range, display behavior, and the source URL for the font file, which is essential for self-hosting custom fonts.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/docs/font-family.mdx#_snippet_4

LANGUAGE: CSS
CODE:
```
@font-face {
  font-family: Oswald;
  font-style: normal;
  font-weight: 200 700;
  font-display: swap;
  src: url("/fonts/Oswald.woff2") format("woff2");
}
```

----------------------------------------

TITLE: Using Theme Variables in Arbitrary HTML Values
DESCRIPTION: This example illustrates how to incorporate Tailwind CSS theme variables into arbitrary values within HTML, particularly in conjunction with the `calc()` CSS function. It shows how to dynamically adjust properties, such as creating a concentric border radius by subtracting a pixel value from a theme variable.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/docs/theme.mdx#_snippet_25

LANGUAGE: html
CODE:
```
<div class="relative rounded-xl">
  <div class="absolute inset-px rounded-[calc(var(--radius-xl)-1px)]">
    <!-- ... -->
  </div>
  <!-- ... -->
</div>
```

----------------------------------------

TITLE: Defining Custom Animation Keyframes in Tailwind CSS
DESCRIPTION: This CSS snippet demonstrates how to define custom `@keyframes` rules within the `@theme` block in Tailwind CSS. It associates a custom animation `fade-in-scale` with a theme variable `--animate-fade-in-scale`, ensuring the keyframes are included in the generated CSS when the variable is used.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/docs/theme.mdx#_snippet_16

LANGUAGE: css
CODE:
```
@import "tailwindcss";

@theme {
  --animate-fade-in-scale: fade-in-scale 0.3s ease-out;

  @keyframes fade-in-scale {
    0% {
      opacity: 0;
      transform: scale(0.95);
    }
    100% {
      opacity: 1;
      transform: scale(1);
    }
  }
}
```

----------------------------------------

TITLE: Simplified CSS Variable Color Configuration in Tailwind
DESCRIPTION: This JavaScript snippet for `tailwind.config.js` demonstrates the simplified method for defining colors using CSS variables. Instead of a function, a format string with an `<alpha-value>` placeholder is used, which Tailwind automatically replaces with the correct opacity, reducing boilerplate.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/blog/tailwindcss-v3-1/index.mdx#_snippet_9

LANGUAGE: JavaScript
CODE:
```
module.exports = {
  theme: {
    colors: {
      primary: "rgb(var(--color-primary) / <alpha-value>)",
      secondary: "rgb(var(--color-secondary) / <alpha-value>)",
      // ...
    },
  },
};
```

----------------------------------------

TITLE: Customizing Typography Elements with HTML Modifiers in Tailwind CSS
DESCRIPTION: This HTML snippet showcases the new HTML-based customization API, allowing specific elements within prose content to be styled directly. Modifiers like `prose-img:rounded-xl`, `prose-headings:underline`, and `prose-a:text-blue-600` apply targeted styles without needing custom CSS.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/blog/tailwindcss-typography-v0-5/index.mdx#_snippet_3

LANGUAGE: html
CODE:
```
<article class="prose prose-img:rounded-xl prose-headings:underline prose-a:text-blue-600">
  {{ markdown }}
</article>
```

----------------------------------------

TITLE: Sorting Custom Classes to the Front in HTML
DESCRIPTION: This example shows that custom classes not originating from Tailwind plugins, such as `select2-dropdown`, are always sorted to the very beginning of the class list. This ensures they are easily identifiable and distinct from Tailwind's utility classes.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/blog/automatic-class-sorting-with-prettier/index.mdx#_snippet_8

LANGUAGE: HTML
CODE:
```
<div class="p-3 shadow-xl select2-dropdown"> <!-- [!code --] -->
<div class="select2-dropdown p-3 shadow-xl"> <!-- [!code ++] -->
    <!-- ... -->
  </div>
</div>
```

----------------------------------------

TITLE: Using Logical `start-0` Property with Tailwind CSS (HTML)
DESCRIPTION: This HTML snippet demonstrates the `start-0` Tailwind CSS utility, which corresponds to the `inset-inline-start` logical property. It shows how `start-0` positions an element at the beginning of the inline direction, adapting automatically for both left-to-right (`ltr`) and right-to-left (`rtl`) text directions without needing separate `left-0` or `right-0` classes.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/docs/top-right-bottom-left.mdx#_snippet_5

LANGUAGE: html
CODE:
```
<!-- [!code classes:start-0] -->
<div dir="ltr">
  <div class="relative size-32 ...">
    <div class="absolute start-0 top-0 size-14 ..."></div>
  </div>
  <div>
    <div dir="rtl">
      <div class="relative size-32 ...">
        <div class="absolute start-0 top-0 size-14 ..."></div>
      </div>
      <div></div>
    </div>
  </div>
</div>
```

----------------------------------------

TITLE: Implementing Menu Transitions with Headless UI and React
DESCRIPTION: This snippet demonstrates how to apply transitions to a Headless UI `MenuItems` component using the new `transition` prop and data attributes. It shows how to define different styles for closed, entering, and leaving states using Tailwind CSS classes like `data-[closed]:scale-95` and `data-[enter]:duration-200`.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/blog/2024-06-21-headless-ui-v2-1/index.mdx#_snippet_0

LANGUAGE: jsx
CODE:
```
import { Menu, MenuButton, MenuItem, MenuItems } from "@headlessui/react";

function Example() {
  return (
    <Menu>
      <MenuButton>My account</MenuButton>
      <MenuItems
        // [!code highlight:7]
        transition
        className={`
          transition ease-out
          data-[closed]:scale-95 data-[closed]:opacity-0
          data-[enter]:duration-200 data-[leave]:duration-300
        `}
      >
        {/* Menu items… */}
      </MenuItems>
    </Menu>
  );
}
```

----------------------------------------

TITLE: Positioning Elements with Tailwind CSS in React/JSX
DESCRIPTION: This React/JSX example demonstrates various absolute positioning scenarios using Tailwind CSS utilities like `top-0`, `left-0`, `inset-x-0`, `inset-y-0`, and `inset-0`. It shows how to pin elements to corners, span edges, or fill the entire parent container.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/docs/top-right-bottom-left.mdx#_snippet_0

LANGUAGE: JSX
CODE:
```
<div className="grid grid-cols-3 grid-rows-3 place-items-center gap-4 font-mono text-sm leading-6 font-bold text-white">
  <div className="relative size-18 rounded-lg sm:size-32">
    <div className="absolute inset-0">
      <Stripes border className="h-full rounded-lg" />
    </div>
    <div className="absolute top-0 left-0 flex size-16 items-center justify-center rounded-lg bg-purple-500 p-4">
      01
    </div>
  </div>
  <div className="relative size-18 rounded-lg sm:size-32">
    <div className="absolute inset-0">
      <Stripes border className="h-full rounded-lg" />
    </div>
    <div className="absolute inset-x-0 top-0 flex h-16 items-center justify-center rounded-lg bg-purple-500 p-4">
      02
    </div>
  </div>
  <div className="relative size-18 rounded-lg sm:size-32">
    <div className="absolute inset-0">
      <Stripes border className="h-full rounded-lg" />
    </div>
    <div className="absolute top-0 right-0 flex size-16 items-center justify-center rounded-lg bg-purple-500 p-4">
      03
    </div>
  </div>
  <div className="relative size-18 rounded-lg sm:size-32">
    <div className="absolute inset-0">
      <Stripes border className="h-full rounded-lg" />
    </div>
    <div className="absolute inset-y-0 left-0 flex w-16 items-center justify-center rounded-lg bg-purple-500 p-4">
      04
    </div>
  </div>
  <div className="relative size-18 rounded-lg sm:size-32">
    <div className="absolute inset-0">
      <Stripes border className="h-full rounded-lg" />
    </div>
    <div className="absolute inset-0 flex items-center justify-center rounded-lg bg-purple-500 p-4">05</div>
  </div>
  <div className="relative size-18 rounded-lg sm:size-32">
    <div className="absolute inset-0">
      <Stripes border className="h-full rounded-lg" />
    </div>
    <div className="absolute inset-y-0 right-0 flex w-16 items-center justify-center rounded-lg bg-purple-500 p-4">
      06
    </div>
  </div>
  <div className="relative size-18 rounded-lg sm:size-32">
    <div className="absolute inset-0">
      <Stripes border className="h-full rounded-lg" />
    </div>
    <div className="absolute bottom-0 left-0 flex size-16 items-center justify-center rounded-lg bg-purple-500 p-4">
      07
    </div>
  </div>
  <div className="relative size-18 rounded-lg sm:size-32">
    <div className="absolute inset-0">
      <Stripes border className="h-full rounded-lg" />
    </div>
    <div className="absolute inset-x-0 bottom-0 flex h-16 items-center justify-center rounded-lg bg-purple-500 p-4">
      08
    </div>
  </div>
  <div className="relative size-18 rounded-lg sm:size-32">
    <div className="absolute inset-0">
      <Stripes border className="h-full rounded-lg" />
    </div>
    <div className="absolute right-0 bottom-0 flex size-16 items-center justify-center rounded-lg bg-purple-500 p-4">
      09
    </div>
  </div>
</div>
```

----------------------------------------

TITLE: Configuring PostCSS for Tailwind CSS JIT
DESCRIPTION: This JavaScript configuration file (`postcss.config.js`) integrates the `@tailwindcss/jit` plugin into the PostCSS processing pipeline. It also includes `autoprefixer` for adding vendor prefixes, ensuring that Tailwind CSS utilities are compiled on demand.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/blog/just-in-time-the-next-generation-of-tailwind-css/index.mdx#_snippet_1

LANGUAGE: js
CODE:
```
module.exports = {
  plugins: {
    "@tailwindcss/jit": {},
    autoprefixer: {},
  },
};
```

----------------------------------------

TITLE: Styling UI for Dark Mode in React/JSX
DESCRIPTION: This JSX snippet demonstrates how to create a UI component that adapts its appearance for both light and dark modes. It uses standard HTML elements and inline styling, showing two distinct sections for light and dark mode presentation, illustrating the visual difference without explicit Tailwind `dark:` classes.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/docs/colors.mdx#_snippet_7

LANGUAGE: jsx
CODE:
```
<div className="grid grid-cols-1 sm:grid-cols-2">
  <div className="p-8 pt-7">
    <p className="mb-2 text-sm font-medium text-gray-500">Light mode</p>
    <div className="rounded-lg bg-white px-6 py-8 shadow-xl ring ring-gray-900/5">
      <div>
        <span className="inline-flex items-center justify-center rounded-md bg-indigo-500 p-2 shadow-lg">
          <svg
            className="h-6 w-6 text-white"
            xmlns="http://www.w3.org/2000/svg"
            fill="none"
            viewBox="0 0 24 24"
            stroke="currentColor"
            aria-hidden="true"
          >
            <path
              strokeLinecap="round"
              strokeLinejoin="round"
              strokeWidth="2"
              d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z"
            />
          </svg>
        </span>
      </div>
      <p className="mt-5 text-base font-medium tracking-tight text-gray-900">Writes upside-down</p>
      <p
        className="mt-2 text-sm text-gray-500"
        children={`The Zero Gravity Pen can be used to write in any orientation,
          including upside-down. It even works in outer space.`}
      />
    </div>
  </div>
  <div className="bg-gray-900 p-8 pt-7">
    <p className="mb-2 text-sm font-medium text-gray-400">Dark mode</p>
    <div className="rounded-lg bg-gray-800 px-6 py-8 shadow-xl ring ring-gray-900/5">
      <div>
        <span className="inline-flex items-center justify-center rounded-md bg-indigo-500 p-2 shadow-lg">
          <svg
            className="h-6 w-6 text-white"
            xmlns="http://www.w3.org/2000/svg"
            fill="none"
            viewBox="0 0 24 24"
            stroke="currentColor"
            aria-hidden="true"
          >
            <path
              strokeLinecap="round"
              strokeLinejoin="round"
              strokeWidth="2"
              d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z"
            />
          </svg>
        </span>
      </div>
      <p className="mt-5 text-base font-medium tracking-tight text-white">Writes upside-down</p>
      <p
        className="mt-2 text-sm text-gray-400"
        children={`The Zero Gravity Pen can be used to write in any orientation,
          including upside-down. It even works in outer space.`}
      />
    </div>
  </div>
</div>
```

----------------------------------------

TITLE: Distributing Items with Space Between in Tailwind CSS
DESCRIPTION: This snippet showcases the `justify-between` utility in Tailwind CSS. It distributes flex items along the main axis, placing an equal amount of space between each item. The first item is aligned to the start, and the last item is aligned to the end of the container.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/docs/justify-content.mdx#_snippet_5

LANGUAGE: html
CODE:
```
<div class="flex justify-between ...">
  <div>01</div>
  <div>02</div>
  <div>03</div>
</div>
```

----------------------------------------

TITLE: Sorting Modifiers After Plain Utilities in HTML
DESCRIPTION: This example demonstrates that Tailwind CSS modifiers, such as `hover:` and `focus:`, are grouped and sorted after all plain utility classes. The plain `scale-125` and `opacity-50` classes appear first, followed by their respective `hover:` modified versions.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/blog/automatic-class-sorting-with-prettier/index.mdx#_snippet_6

LANGUAGE: HTML
CODE:
```
<div class="hover:opacity-75 opacity-50 hover:scale-150 scale-125"> <!-- [!code --] -->
<div class="scale-125 opacity-50 hover:scale-150 hover:opacity-75"> <!-- [!code ++] -->
    <!-- ... -->
  </div>
</div>
```

----------------------------------------

TITLE: Spanning Columns with Tailwind CSS `col-span` Utility (HTML)
DESCRIPTION: This snippet demonstrates how to use Tailwind CSS `col-span-<number>` utilities to make grid items span a specified number of columns. It shows `col-span-2` applied to elements within a 3-column grid, causing them to occupy two column tracks. This utility is essential for controlling the width of elements in a CSS Grid layout.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/docs/grid-column.mdx#_snippet_0

LANGUAGE: html
CODE:
```
<!-- [!code classes:col-span-2] -->
<div class="grid grid-cols-3 gap-4">
  <div class="...">01</div>
  <div class="...">02</div>
  <div class="...">03</div>
  <div class="col-span-2 ...">04</div>
  <div class="...">05</div>
  <div class="...">06</div>
  <div class="col-span-2 ...">07</div>
</div>
```

----------------------------------------

TITLE: Applying Background Colors in HTML
DESCRIPTION: This snippet demonstrates how to apply various background colors to HTML elements using Tailwind CSS utility classes such as `bg-blue-500`, `bg-cyan-500`, and `bg-pink-500`. These classes directly control the `background-color` CSS property.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/docs/background-color.mdx#_snippet_0

LANGUAGE: html
CODE:
```
<!-- [!code classes:bg-blue-500,bg-cyan-500,bg-pink-500] -->
<button class="bg-blue-500 ...">Button A</button>
<button class="bg-cyan-500 ...">Button B</button>
<button class="bg-pink-500 ...">Button C</button>
```

----------------------------------------

TITLE: Applying Tailwind CSS min-width utilities in React/JSX
DESCRIPTION: This React/JSX example demonstrates the visual effect of various `min-w-*` utilities (e.g., `min-w-lg`, `min-w-md`, `min-w-sm`, `min-w-xs`, `min-w-2xs`, `min-w-3xs`) by applying them to different `div` elements within a grid layout. It showcases how elements adapt to a minimum width based on the container scale.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/docs/min-width.mdx#_snippet_3

LANGUAGE: jsx
CODE:
```
<div className="relative grid justify-items-start gap-y-4 text-center font-mono text-xs font-bold text-white">
  <Stripes border className="absolute -inset-y-4 w-40 rounded-lg" />
  <div className="relative hidden min-w-lg rounded-lg bg-blue-500 px-4 py-2 sm:block">min-w-lg</div>
  <div className="relative hidden min-w-md rounded-lg bg-blue-500 px-4 py-2 sm:block">min-w-md</div>
  <div className="relative hidden min-w-sm rounded-lg bg-blue-500 px-4 py-2 sm:block">min-w-sm</div>
  <div className="relative min-w-xs rounded-lg bg-blue-500 px-4 py-2">min-w-xs</div>
  <div className="relative min-w-2xs rounded-lg bg-blue-500 px-4 py-2">min-w-2xs</div>
  <div className="relative min-w-3xs rounded-lg bg-blue-500 px-4 py-2">min-w-3xs</div>
</div>
```

----------------------------------------

TITLE: Applying Divide Border Styles in HTML
DESCRIPTION: This HTML snippet demonstrates the application of `divide` utilities to set border styles between elements. The `divide-y` class adds a horizontal divider, and `divide-dashed` specifies a dashed border style, allowing for consistent styling of separators within a group of elements.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/blog/tailwindcss-1-7/index.mdx#_snippet_7

LANGUAGE: html
CODE:
```
<div class="divide-y divide-dashed">
  <div><!-- ... --></div>
  <div><!-- ... --></div>
  <div><!-- ... --></div>
  <div><!-- ... --></div>
</div>
```

----------------------------------------

TITLE: Applying Fixed Widths with Tailwind CSS in HTML
DESCRIPTION: This HTML snippet illustrates the direct application of Tailwind CSS `w-<number>` utilities to `div` elements. It shows how to set fixed widths like `w-96`, `w-80`, and `w-64` using class attributes, demonstrating the straightforward way to control element dimensions in a static HTML context.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/docs/width.mdx#_snippet_4

LANGUAGE: html
CODE:
```
<!-- [!code classes:w-96,w-80,w-64,w-48,w-40,w-32,w-24] -->
<div class="w-96 ...">w-96</div>
<div class="w-80 ...">w-80</div>
<div class="w-64 ...">w-64</div>
<div class="w-48 ...">w-48</div>
<div class="w-40 ...">w-40</div>
<div class="w-32 ...">w-32</div>
<div class="w-24 ...">w-24</div>
```

----------------------------------------

TITLE: Applying Horizontal Padding with Tailwind CSS
DESCRIPTION: This HTML snippet demonstrates the use of the `px-<number>` utility, specifically `px-8`, to apply horizontal padding to an element. This class simultaneously controls both the left and right padding, providing symmetrical spacing along the x-axis.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/docs/padding.mdx#_snippet_3

LANGUAGE: html
CODE:
```
<!-- [!code classes:px-8] -->\n<div class="px-8 ...">px-8</div>
```

----------------------------------------

TITLE: Upgrading Tailwind CSS to Latest Version (Bash)
DESCRIPTION: This bash command demonstrates how to upgrade your Tailwind CSS installation to the latest version using npm. Running `npm install tailwindcss@latest` will update the `tailwindcss` package in your project, allowing you to access new features and improvements like those introduced in v2.1. This is a standard procedure for incremental upgrades.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/blog/tailwindcss-2-1/index.mdx#_snippet_5

LANGUAGE: bash
CODE:
```
npm install tailwindcss@latest
```

----------------------------------------

TITLE: Use CSS Calc Function with Arbitrary Values in Tailwind HTML
DESCRIPTION: Illustrates how to embed CSS `calc()` functions within Tailwind's arbitrary value syntax. This allows for dynamic calculations, even when combining with existing theme values or CSS variables, to achieve precise sizing like `max-h-[calc(100dvh-(--spacing(6)))]`.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/docs/styling-with-utility-classes.mdx#_snippet_16

LANGUAGE: HTML
CODE:
```
<div class="max-h-[calc(100dvh-(--spacing(6)))]">
  <!-- ... -->
</div>
```

----------------------------------------

TITLE: Demonstrating Absolute vs. Static Positioning in HTML
DESCRIPTION: This HTML snippet, rendered via a JSX-like structure, visually demonstrates the difference between static and absolute positioning using Tailwind CSS classes. It highlights how an absolutely positioned child element is taken out of the normal document flow, affecting the layout of its siblings.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/docs/position.mdx#_snippet_2

LANGUAGE: HTML
CODE:
```
<div className="space-y-8">
  <div>
    <p className="mb-4 text-sm font-medium text-gray-500">With static positioning</p>
    <div className="relative text-sm leading-6 font-medium">
      <div className="relative rounded-lg border border-indigo-700/10 bg-indigo-400/20 p-4 dark:border-0 dark:bg-indigo-900/80">
        <p className="-mt-2 mb-2 text-indigo-700 dark:text-indigo-200">Relative parent</p>
        <div className="static flex h-32 flex-col justify-between border border-indigo-700/10 bg-indigo-400/20 p-4 dark:border-0">
          <p className="text-indigo-700 dark:text-indigo-200">Static parent</p>
          <div className="flex gap-4">
            <div className="bottom-0 left-0 rounded-lg bg-indigo-500 p-4 text-white shadow-lg">
              <p>Static child?</p>
            </div>
            <div className="rounded-lg bg-indigo-100 p-4 text-indigo-600 shadow-lg">
              <p>Static sibling</p>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
  <div>
    <p className="mb-4 text-sm font-medium text-gray-500">With absolute positioning</p>
    <div className="relative text-sm leading-6 font-medium">
      <div className="relative rounded-lg border border-indigo-700/10 bg-indigo-400/20 p-4 dark:border-0 dark:bg-indigo-900/80">
        <p className="-mt-2 mb-2 text-indigo-700 dark:text-indigo-200">Relative parent</p>
        <div className="static flex h-32 flex-col justify-between border border-indigo-700/10 bg-indigo-400/20 p-4 dark:border-0">
          <p className="text-indigo-700 dark:text-indigo-200">Static parent</p>
          <div className="flex gap-4">
            <div className="absolute top-0 right-0 rounded-lg bg-indigo-500 p-4 text-white shadow-lg">
              <p>Absolute child</p>
            </div>
            <div className="rounded-lg bg-indigo-100 p-4 text-indigo-600 shadow-lg">
              <p>Static sibling</p>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>
```

----------------------------------------

TITLE: Defining Violet Oklch Color Palette in CSS
DESCRIPTION: This snippet outlines various violet color shades as CSS custom properties, leveraging the Oklch color space. These definitions enable developers to easily access and apply a consistent violet palette throughout their stylesheets, promoting design uniformity.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/docs/colors.mdx#_snippet_21

LANGUAGE: CSS
CODE:
```
--color-violet-50: oklch(0.969 0.016 293.756);
--color-violet-100: oklch(0.943 0.029 294.588);
--color-violet-200: oklch(0.894 0.057 293.283);
--color-violet-300: oklch(0.811 0.111 293.571);
--color-violet-400: oklch(0.702 0.183 293.541);
--color-violet-500: oklch(0.606 0.25 292.717);
--color-violet-600: oklch(0.541 0.281 293.009);
--color-violet-700: oklch(0.491 0.27 292.581);
--color-violet-800: oklch(0.432 0.232 292.759);
--color-violet-900: oklch(0.38 0.189 293.745);
--color-violet-950: oklch(0.283 0.141 291.089);
```

----------------------------------------

TITLE: Defining Pink Oklch Color Palette in CSS
DESCRIPTION: This snippet defines a spectrum of pink color shades using CSS custom properties and the Oklch color function. These variables are instrumental in establishing a cohesive pink color scheme across a web project, allowing for flexible and consistent design application.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/docs/colors.mdx#_snippet_24

LANGUAGE: CSS
CODE:
```
--color-pink-50: oklch(0.971 0.014 343.198);
--color-pink-100: oklch(0.948 0.028 342.258);
--color-pink-200: oklch(0.899 0.061 343.231);
--color-pink-300: oklch(0.823 0.12 346.018);
--color-pink-400: oklch(0.718 0.202 349.761);
--color-pink-500: oklch(0.656 0.241 354.308);
--color-pink-600: oklch(0.592 0.249 0.584);
--color-pink-700: oklch(0.525 0.223 3.958);
--color-pink-800: oklch(0.459 0.187 3.815);
--color-pink-900: oklch(0.408 0.153 2.432);
--color-pink-950: oklch(0.284 0.109 3.907);
```

----------------------------------------

TITLE: Apply Focus-Within Styles with Tailwind CSS
DESCRIPTION: Styles an element if it or any of its descendants currently has focus. This variant is useful for styling parent containers of form elements, for example, to indicate an active form group.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/docs/hover-focus-and-other-states.mdx#_snippet_195

LANGUAGE: HTML
CODE:
```
<div class="focus-within:shadow-lg ...">
  <input type="text" />
</div>
```

----------------------------------------

TITLE: Displaying Single Image with JSX Component
DESCRIPTION: This JSX snippet demonstrates the straightforward use of the `Image` component to display a single image. It requires `src` to specify the image path and `alt` for accessibility, providing a simple way to embed visual content.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/blog/2023-07-18-tailwind-connect-2023-recap/index.mdx#_snippet_4

LANGUAGE: JSX
CODE:
```
<Image src={imgAttendeesTalking} alt="Attendees talking and enjoying drinks before the event" />
```

----------------------------------------

TITLE: Transitioning Outline Color in HTML
DESCRIPTION: Demonstrates how to correctly set outline color to avoid unwanted transitions when using `transition` and `transition-color` utilities in Tailwind CSS v4. The recommended approach is to set the outline color unconditionally.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/docs/upgrade-guide.mdx#_snippet_24

LANGUAGE: HTML
CODE:
```
<button class="outline-cyan-500 transition hover:outline-2"></button>
```

----------------------------------------

TITLE: Applying object-cover with React/JSX
DESCRIPTION: This JSX snippet demonstrates how to use the `object-cover` utility class in a React component. The `className` attribute applies Tailwind CSS classes to an `img` element, ensuring the image covers its container while maintaining its aspect ratio, potentially cropping parts of the image if necessary. It also sets fixed height and width, and rounds the corners.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/docs/object-fit.mdx#_snippet_1

LANGUAGE: JavaScript
CODE:
```
{
  <img
    className="mx-auto h-48 w-96 rounded-lg object-cover"
    src="https://images.unsplash.com/photo-1554629947-334ff61d85dc?ixid=MnMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&ixlib=rb-1.2.1&auto=format&fit=crop&w=1000&h=1000&q=90"
  />
}
```

----------------------------------------

TITLE: Targeting a Single Breakpoint (md only) - HTML
DESCRIPTION: This HTML snippet illustrates how to apply a utility class (`flex`) specifically for a single breakpoint. By combining the `md` responsive variant with the `max-lg` variant (`md:max-lg:flex`), the `display: flex` style is active only when the screen size is within the `md` breakpoint range and less than the `lg` breakpoint, effectively targeting only the `md` size.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/docs/responsive-design.mdx#_snippet_8

LANGUAGE: HTML
CODE:
```
<div class="md:max-lg:flex">
  <!-- ... -->
</div>
```

----------------------------------------

TITLE: Conditional Transforms and Filters in JIT Mode
DESCRIPTION: Shows how to conditionally apply transforms and filters in Just-in-Time mode. Instead of toggling parent classes like `transform`, you should now toggle the specific sub-utilities (e.g., `hover:scale-105`) directly.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/blog/tailwindcss-2-2/index.mdx#_snippet_25

LANGUAGE: HTML
CODE:
```
<div class="scale-105 -translate-y-1 hover:transform"> <!-- [!code --] -->
<div class="hover:scale-105 hover:-translate-y-1"> <!-- [!code ++] -->
</div>
```

----------------------------------------

TITLE: Using Tailwind's Breakpoint Container Utility
DESCRIPTION: This HTML snippet illustrates the basic usage of Tailwind CSS's `container` utility. This utility sets an element's maximum width to match the `min-width` of the current breakpoint, useful for designing for fixed screen sizes.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/docs/max-width.mdx#_snippet_35

LANGUAGE: html
CODE:
```
<!-- [!code classes:container] -->
<div class="container">
  <!-- ... -->
</div>
```

----------------------------------------

TITLE: Applying Hover Styles to Nested Elements with Tailwind CSS
DESCRIPTION: This HTML snippet illustrates the use of advanced Tailwind CSS arbitrary variants to apply hover styles to a deeply nested element within a list. It targets the first paragraph inside the second list item on hover, changing its text color to indigo.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/blog/tailwindcss-v3-1/index.mdx#_snippet_26

LANGUAGE: HTML
CODE:
```
<!-- [!code word:hover\:[&>li\:nth-child(2)>div>p\:first-child\]\:text-indigo-500] -->
<ul
  role="list"
  class="space-y-4 [&>*]:rounded-lg [&>*]:bg-white [&>*]:p-4 [&>*]:shadow hover:[&>li:nth-child(2)>div>p:first-child]:text-indigo-500"
>
  <!-- ... -->
  <li class="flex">
    <img class="h-10 w-10 rounded-full" src="..." alt="" />
    <div class="ml-3 overflow-hidden">
      <p class="text-sm font-medium text-slate-900">Floyd Miles</p>
      <p class="truncate text-sm text-slate-500">floyd.miles@example.com</p>
    </div>
  </li>
  <!-- ... -->
</ul>
```

----------------------------------------

TITLE: Applying Sizing with `size-*` Utility in HTML
DESCRIPTION: This snippet demonstrates the new `size-*` utility in Tailwind CSS, which allows setting both width and height simultaneously. It replaces the need for separate `h-*` and `w-*` classes, offering a more concise way to define element dimensions. The example shows how `size-10` achieves the same result as `h-10 w-10`.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/blog/tailwindcss-v3-4/index.mdx#_snippet_6

LANGUAGE: HTML
CODE:
```
<div>
  <img class="h-10 w-10" ...>
  <img class="h-12 w-12" ...>
  <img class="h-14 w-14" ...>
  <img class="size-10" ...>
  <img class="size-12" ...>
  <img class="size-14" ...>
</div>
```

----------------------------------------

TITLE: Mapping Tailwind CSS Font Family Utilities to CSS Properties
DESCRIPTION: This table illustrates the mapping between Tailwind CSS font family utility classes and their corresponding CSS `font-family` property values. It includes built-in sans-serif, serif, and monospace fonts, as well as options for using custom properties and arbitrary values.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/docs/font-family.mdx#_snippet_0

LANGUAGE: CSS
CODE:
```
/* Tailwind CSS Font Family Utilities */
.font-sans { font-family: var(--font-sans); /* ui-sans-serif, system-ui, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Noto Color Emoji' */ }
.font-serif { font-family: var(--font-serif); /* ui-serif, Georgia, Cambria, 'Times New Roman', Times, serif */ }
.font-mono { font-family: var(--font-mono); /* ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, 'Liberation Mono', 'Courier New', monospace */ }
.font-"(family-name:<custom-property>)" { font-family: var(<custom-property>); }
.font-"[<value>]" { font-family: <value>; }
```

----------------------------------------

TITLE: Applying Individual Border Colors with Tailwind CSS (HTML)
DESCRIPTION: This snippet demonstrates how to apply specific border colors to individual sides of an HTML element using Tailwind CSS. Utilities like `border-t-indigo-500`, `border-r-indigo-500`, `border-b-indigo-500`, and `border-l-indigo-500` are used to set the top, right, bottom, and left border colors respectively. These utilities are part of Tailwind's extensive color palette system.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/docs/border-color.mdx#_snippet_3

LANGUAGE: HTML
CODE:
```
<!-- [!code classes:border-t-indigo-500,border-r-indigo-500,border-b-indigo-500,border-l-indigo-500] -->
<div class="border-4 border-indigo-200 border-t-indigo-500 ..."></div>
<div class="border-4 border-indigo-200 border-r-indigo-500 ..."></div>
<div class="border-4 border-indigo-200 border-b-indigo-500 ..."></div>
<div class="border-4 border-indigo-200 border-l-indigo-500 ..."></div>
```

----------------------------------------

TITLE: Tailwind CSS Group Hover Styling
DESCRIPTION: Illustrates the `group-hover` variant in Tailwind CSS, which allows an element to be styled when a specific parent element is hovered. This pattern is useful for creating interactive components where child elements react to parent state changes. The corresponding simplified CSS is also provided.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/docs/styling-with-utility-classes.mdx#_snippet_20

LANGUAGE: HTML
CODE:
```
<a href="#" class="group rounded-lg p-8">
  <!-- ... -->
  <span class="group-hover:underline">Read more…</span>
</a>
```

LANGUAGE: CSS
CODE:
```
@media (hover: hover) {
  a:hover span {
    text-decoration-line: underline;
  }
}
```

----------------------------------------

TITLE: Applying Single-Side Padding with Tailwind CSS
DESCRIPTION: This HTML snippet illustrates how to use specific Tailwind CSS utilities like `pt-<number>`, `pr-<number>`, `pb-<number>`, and `pl-<number>` to control padding on individual sides of an element. Each example targets a different side (top, right, bottom, left) to provide granular control over spacing.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/docs/padding.mdx#_snippet_2

LANGUAGE: html
CODE:
```
<!-- [!code classes:pt-6,pr-4,pb-8,pl-2] -->\n<div class="pt-6 ...">pt-6</div>\n<div class="pr-4 ...">pr-4</div>\n<div class="pb-8 ...">pb-8</div>\n<div class="pl-2 ...">pl-2</div>
```

----------------------------------------

TITLE: Style input when invalid with :invalid
DESCRIPTION: Applies styles to an input element when its content is invalid according to its validation rules using the `invalid` variant. This helps users identify and correct errors in their input.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/docs/hover-focus-and-other-states.mdx#_snippet_221

LANGUAGE: html
CODE:
```
<!-- [!code classes:invalid:border-red-500] -->
<input required class="border invalid:border-red-500 ..." />
```

----------------------------------------

TITLE: Adjusting Form Control Size Based on Content in HTML
DESCRIPTION: This snippet demonstrates how to use the `field-sizing-content` utility class in HTML to make a textarea automatically adjust its size based on its content. This is useful for creating dynamic form controls that expand or shrink as the user types.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/docs/field-sizing.mdx#_snippet_0

LANGUAGE: HTML
CODE:
```
<!-- [!code classes:field-sizing-content] -->
<textarea class="field-sizing-content ..." rows="2">
  Latex Salesman, Vanderlay Industries
</textarea>
```

LANGUAGE: JSX
CODE:
```
<textarea
      rows="2"
      defaultValue="Latex Salesman, Vanderlay Industries"
      className="mx-auto block field-sizing-content rounded-md p-2 text-sm text-gray-950 outline-1 outline-gray-900/10 focus:outline-2 focus:outline-gray-900 dark:bg-gray-950/25 dark:text-white dark:outline-1 dark:outline-white/5 dark:focus:outline-white/20"
    />
```

----------------------------------------

TITLE: Applying Group Data Attribute Variant (Will Apply) in HTML
DESCRIPTION: This HTML snippet demonstrates the `group-data-*` variant. The `p-8` utility will be applied to the inner div because its parent element has the `group` class and a `data-size` attribute matching `large`, as specified in `group-data-[size=large]:p-8`.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/blog/tailwindcss-v3-2/index.mdx#_snippet_17

LANGUAGE: HTML
CODE:
```
<div data-size="large" class="group">
  <div class="group-data-[size=large]:p-8">
    <!-- Will apply `p-8` -->
  </div>
</div>
```

----------------------------------------

TITLE: Tailwind CSS Variant for ::before Pseudo-element
DESCRIPTION: Applies styles to the ::before pseudo-element of an element. This allows adding content or styling before the actual content of an element, commonly used for icons or decorative elements.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/docs/hover-focus-and-other-states.mdx#_snippet_124

LANGUAGE: Tailwind CSS
CODE:
```
&::before
```

----------------------------------------

TITLE: Adding Horizontal Margin with Tailwind CSS (HTML)
DESCRIPTION: This snippet illustrates the use of `mx-<number>` utilities in Tailwind CSS to control the horizontal margin of an element. The `mx-8` class applies a margin of 8 units to both the left and right sides of the element, effectively centering it or providing spacing.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/docs/margin.mdx#_snippet_3

LANGUAGE: HTML
CODE:
```
<!-- [!code classes:mx-8] -->
<div class="mx-8 ...">mx-8</div>
```

----------------------------------------

TITLE: Example of Tailwind CSS Color Utilities in HTML
DESCRIPTION: This HTML snippet showcases the direct application of Tailwind CSS color utility classes to style a UI component. It demonstrates how to use classes like `bg-white`, `border-pink-300`, `text-gray-950`, and their dark mode equivalents to control background, border, text, and outline colors.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/docs/colors.mdx#_snippet_4

LANGUAGE: html
CODE:
```
<!-- [!code classes:bg-white,border-pink-300,bg-pink-100,stroke-pink-700,text-gray-950,text-gray-500,outline-black/5,text-gray-700,dark:bg-gray-800,dark:border-pink-300/10,dark:bg-pink-400/10,dark:stroke-pink-500,dark:text-gray-400,dark:text-white] -->
<div class="flex items-center gap-4 rounded-lg bg-white p-6 shadow-md outline outline-black/5 dark:bg-gray-800">
  <!-- prettier-ignore -->
  <span class="inline-flex shrink-0 rounded-full border border-pink-300 bg-pink-100 p-2 dark:border-pink-300/10 dark:bg-pink-400/10">
    <svg class="size-6 stroke-pink-700 dark:stroke-pink-500"><!-- ... --></svg>
  </span>
  <div>
    <p class="text-gray-700 dark:text-gray-400">
      <span class="font-medium text-gray-950 dark:text-white">Tom Watson</span> mentioned you in
      <span class="font-medium text-gray-950 dark:text-white">Logo redesign</span>
    </p>
    <time class="mt-1 block text-gray-500" datetime="9:37">9:37am</time>
  </div>
</div>
```

----------------------------------------

TITLE: Defining Tailwind CSS Color Palette Variables
DESCRIPTION: This snippet defines a wide range of color variables using the Oklch color space for various shades of slate, gray, zinc, neutral, and stone, along with standard black and white. These variables are used throughout Tailwind CSS for consistent theming.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/docs/theme.mdx#_snippet_30

LANGUAGE: CSS
CODE:
```
--color-slate-700: oklch(0.372 0.044 257.287);
--color-slate-800: oklch(0.279 0.041 260.031);
--color-slate-900: oklch(0.208 0.042 265.755);
--color-slate-950: oklch(0.129 0.042 264.695);

--color-gray-50: oklch(0.985 0.002 247.839);
--color-gray-100: oklch(0.967 0.003 264.542);
--color-gray-200: oklch(0.928 0.006 264.531);
--color-gray-300: oklch(0.872 0.01 258.338);
--color-gray-400: oklch(0.707 0.022 261.325);
--color-gray-500: oklch(0.551 0.027 264.364);
--color-gray-600: oklch(0.446 0.03 256.802);
--color-gray-700: oklch(0.373 0.034 259.733);
--color-gray-800: oklch(0.278 0.033 256.848);
--color-gray-900: oklch(0.21 0.034 264.665);
--color-gray-950: oklch(0.13 0.028 261.692);

--color-zinc-50: oklch(0.985 0 0);
--color-zinc-100: oklch(0.967 0.001 286.375);
--color-zinc-200: oklch(0.92 0.004 286.32);
--color-zinc-300: oklch(0.871 0.006 286.286);
--color-zinc-400: oklch(0.705 0.015 286.067);
--color-zinc-500: oklch(0.552 0.016 285.938);
--color-zinc-600: oklch(0.442 0.017 285.786);
--color-zinc-700: oklch(0.37 0.013 285.805);
--color-zinc-800: oklch(0.274 0.006 286.033);
--color-zinc-900: oklch(0.21 0.006 285.885);
--color-zinc-950: oklch(0.141 0.005 285.823);

--color-neutral-50: oklch(0.985 0 0);
--color-neutral-100: oklch(0.97 0 0);
--color-neutral-200: oklch(0.922 0 0);
--color-neutral-300: oklch(0.87 0 0);
--color-neutral-400: oklch(0.708 0 0);
--color-neutral-500: oklch(0.556 0 0);
--color-neutral-600: oklch(0.439 0 0);
--color-neutral-700: oklch(0.371 0 0);
--color-neutral-800: oklch(0.269 0 0);
--color-neutral-900: oklch(0.205 0 0);
--color-neutral-950: oklch(0.145 0 0);

--color-stone-50: oklch(0.985 0.001 106.423);
--color-stone-100: oklch(0.97 0.001 106.424);
--color-stone-200: oklch(0.923 0.003 48.717);
--color-stone-300: oklch(0.869 0.005 56.366);
--color-stone-400: oklch(0.709 0.01 56.259);
--color-stone-500: oklch(0.553 0.013 58.071);
--color-stone-600: oklch(0.444 0.011 73.639);
--color-stone-700: oklch(0.374 0.01 67.558);
--color-stone-800: oklch(0.268 0.007 34.298);
--color-stone-900: oklch(0.216 0.006 56.043);
--color-stone-950: oklch(0.147 0.004 49.25);

--color-black: #000;
--color-white: #fff;
```

----------------------------------------

TITLE: Defining Tailwind CSS Typography Size Variables
DESCRIPTION: This snippet defines CSS custom properties for a comprehensive typography scale, including font sizes (e.g., text-xs, text-base, text-9xl) and their corresponding line heights. These variables ensure consistent and scalable text rendering.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/docs/theme.mdx#_snippet_34

LANGUAGE: CSS
CODE:
```
--text-xs: 0.75rem;
--text-xs--line-height: calc(1 / 0.75);
--text-sm: 0.875rem;
--text-sm--line-height: calc(1.25 / 0.875);
--text-base: 1rem;
--text-base--line-height: calc(1.5 / 1);
--text-lg: 1.125rem;
--text-lg--line-height: calc(1.75 / 1.125);
--text-xl: 1.25rem;
--text-xl--line-height: calc(1.75 / 1.25);
--text-2xl: 1.5rem;
--text-2xl--line-height: calc(2 / 1.5);
--text-3xl: 1.875rem;
--text-3xl--line-height: calc(2.25 / 1.875);
--text-4xl: 2.25rem;
--text-4xl--line-height: calc(2.5 / 2.25);
--text-5xl: 3rem;
--text-5xl--line-height: 1;
--text-6xl: 3.75rem;
--text-6xl--line-height: 1;
--text-7xl: 4.5rem;
--text-7xl--line-height: 1;
--text-8xl: 6rem;
--text-8xl--line-height: 1;
--text-9xl: 8rem;
--text-9xl--line-height: 1;
```

----------------------------------------

TITLE: Applying Fixed Opacity to Background Colors in HTML
DESCRIPTION: This HTML snippet demonstrates how to apply fixed opacity levels to background colors using Tailwind CSS utility classes. Each `div` element uses a `bg-sky-500/XX` class, where `XX` represents a percentage value for the alpha channel, ranging from 10% to 100%. This allows for precise control over the transparency of the background color.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/docs/colors.mdx#_snippet_5

LANGUAGE: HTML
CODE:
```
<div>
  <div class="bg-sky-500/10"></div>
  <div class="bg-sky-500/20"></div>
  <div class="bg-sky-500/30"></div>
  <div class="bg-sky-500/40"></div>
  <div class="bg-sky-500/50"></div>
  <div class="bg-sky-500/60"></div>
  <div class="bg-sky-500/70"></div>
  <div class="bg-sky-500/80"></div>
  <div class="bg-sky-500/90"></div>
  <div class="bg-sky-500/100"></div>
</div>
```

----------------------------------------

TITLE: Styling Page Headings with Tailwind CSS in JSX
DESCRIPTION: This snippet illustrates how to style `h1` and `h2` HTML elements using Tailwind CSS classes for typography, spacing, and color. It demonstrates creating a main heading and a subheading with responsive font sizes and dark mode support.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/blog/2024-05-24-catalyst-application-layouts/index.mdx#_snippet_4

LANGUAGE: jsx
CODE:
```
<div className="bg-white dark:bg-zinc-900">
      <div>
        <h1 className="text-2xl/8 font-semibold text-zinc-950 sm:text-xl/8 dark:text-white">Heading</h1>
      </div>
      <div className="mt-4">
        <h2 className="text-base/7 font-semibold text-zinc-950 sm:text-sm/6 dark:text-white">Subheading</h2>
      </div>
    </div>
```

----------------------------------------

TITLE: Using Named Container Queries in Tailwind CSS HTML
DESCRIPTION: This HTML snippet demonstrates how to use named container queries for more complex layouts. By naming a container with `@container/main`, child elements can target specific containers using variants like `@sm/main:flex-col`, allowing styles to depend on a distant parent's size.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/docs/responsive-design.mdx#_snippet_17

LANGUAGE: html
CODE:
```
<div class="@container/main">
  <!-- ... -->
  <div class="flex flex-row @sm/main:flex-col">
    <!-- ... -->
  </div>
</div>
```

----------------------------------------

TITLE: Implementing Named Container Queries in HTML with Tailwind CSS
DESCRIPTION: This snippet showcases how to use named container queries in Tailwind CSS. By adding a name like @container/main to the container element, styles can be applied conditionally to descendants using @lg/main:flex, ensuring that the styles respond specifically to the named container's size rather than any parent container. This provides better control in nested layouts.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/blog/tailwindcss-v3-2/index.mdx#_snippet_35

LANGUAGE: HTML
CODE:
```
<div class="@container/main">
  <!-- ... -->
  <div>
    <div class="block @lg/main:flex">
      <!-- ... -->
    </div>
  </div>
</div>
```

----------------------------------------

TITLE: Responsive Visibility with not-sr-only (HTML)
DESCRIPTION: This example illustrates how to use the `not-sr-only` utility class, often with a responsive prefix like `sm:`, to conditionally make an element visible. When combined with `sr-only`, `sm:not-sr-only` ensures the element is hidden on small screens but becomes visible on screens larger than the `sm` breakpoint, providing flexible control over element visibility for both sighted users and screen readers.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/docs/display.mdx#_snippet_16

LANGUAGE: html
CODE:
```
<!-- [!code classes:sm:not-sr-only] -->
<a href="#">
  <svg><!-- ... --></svg>
  <span class="sr-only sm:not-sr-only">Settings</span>
</a>
```

----------------------------------------

TITLE: Implementing Mandatory Scroll Snapping with React/JSX
DESCRIPTION: This snippet demonstrates how to create a horizontally scrollable image gallery with mandatory scroll snapping using React and Tailwind CSS. It utilizes `snap-x` for horizontal snapping and `snap-mandatory` to ensure the scroll container always settles on a snap point, making each image fully visible. The `snap-center` utility is applied to individual image containers to define their snap points.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/docs/scroll-snap-type.mdx#_snippet_3

LANGUAGE: jsx
CODE:
```
<div className="relative">
      <div className="mb-6 ml-[50%] flex items-end justify-start pt-10">
        <div className="dark:highlight-white/10 ml-2 rounded bg-indigo-50 px-1.5 font-mono text-[0.625rem] leading-6 text-indigo-600 ring-1 ring-indigo-600 ring-inset dark:bg-indigo-500 dark:text-white dark:ring-0">
          snap point
        </div>
        <div className="absolute top-0 bottom-0 left-1/2 border-l border-indigo-500"></div>
      </div>
      <div className="relative flex w-full snap-x snap-mandatory gap-6 overflow-x-auto pb-14">
        <div className="shrink-0 snap-center">
          <div className="w-4 shrink-0 sm:w-37"></div>
        </div>
        <div className="shrink-0 snap-center first:pl-8 last:pr-8">
          <img
            className="h-40 w-80 shrink-0 rounded-lg bg-white"
            src="https://images.unsplash.com/photo-1604999565976-8913ad2ddb7c?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=320&h=160&q=80"
          />
        </div>
        <div className="shrink-0 snap-center first:pl-8 last:pr-8">
          <img
            className="h-40 w-80 shrink-0 rounded-lg bg-white"
            src="https://images.unsplash.com/photo-1540206351-d6465b3ac5c1?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=320&h=160&q=80"
          />
        </div>
        <div className="shrink-0 snap-center first:pl-8 last:pr-8">
          <img
            className="h-40 w-80 shrink-0 rounded-lg bg-white"
            src="https://images.unsplash.com/photo-1622890806166-111d7f6c7c97?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=320&h=160&q=80"
          />
        </div>
        <div className="shrink-0 snap-center first:pl-8 last:pr-8">
          <img
            className="h-40 w-80 shrink-0 rounded-lg bg-white"
            src="https://images.unsplash.com/photo-1590523277543-a94d2e4eb00b?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=320&h=160&q=80"
          />
        </div>
        <div className="shrink-0 snap-center first:pl-8 last:pr-8">
          <img
            className="h-40 w-80 shrink-0 rounded-lg bg-white"
            src="https://images.unsplash.com/photo-1575424909138-46b05e5919ec?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=320&h=160&q=80"
          />
        </div>
        <div className="shrink-0 snap-center first:pl-8 last:pr-8">
          <img
            className="h-40 w-80 shrink-0 rounded-lg bg-white"
            src="https://images.unsplash.com/photo-1559333086-b0a56225a93c?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=320&h=160&q=80"
          />
        </div>
        <div className="shrink-0 snap-center">
          <div className="w-4 shrink-0 sm:w-37"></div>
        </div>
      </div>
    </div>
```

----------------------------------------

TITLE: Define Complex Custom Utility with Nesting in CSS
DESCRIPTION: Demonstrates how to define a more complex custom utility using nesting within the `@utility` directive, such as `scrollbar-hidden` to hide scrollbars.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/docs/adding-custom-styles.mdx#_snippet_27

LANGUAGE: css
CODE:
```
/* [!code filename:CSS] */
@utility scrollbar-hidden {
  &::-webkit-scrollbar {
    display: none;
  }
}
```

----------------------------------------

TITLE: Hiding Focus Outline in JSX with Tailwind CSS
DESCRIPTION: This JSX snippet demonstrates how to use the `focus:outline-hidden` utility class on an input field within a React component. This class hides the default browser outline when the element is focused, while ensuring the outline remains visible in forced colors mode for accessibility.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/docs/outline-style.mdx#_snippet_3

LANGUAGE: JavaScript
CODE:
```
<input
      type="text"
      placeholder="Your full name"
      className="mx-auto block w-full max-w-xs border-b-2 border-gray-300 bg-gray-50 px-2 py-2 text-sm text-gray-800 focus:border-indigo-600 focus:outline-hidden dark:border-white/15 dark:bg-white/5 dark:text-white dark:focus:border-indigo-500"
    />
```

----------------------------------------

TITLE: Displaying User List with Tailwind CSS (JSX)
DESCRIPTION: This snippet demonstrates how to render a list of user profiles using standard HTML elements and applying Tailwind CSS utility classes for styling, including responsive image handling and text formatting within a JSX context.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/blog/tailwindcss-v3-1/index.mdx#_snippet_25

LANGUAGE: JSX
CODE:
```
        <li className="flex">
          <img
            className="h-10 w-10 rounded-full"
            src="https://images.unsplash.com/photo-1463453091185-61582044d556?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=facearea&facepad=2&w=256&h=256&q=80"
            alt=""
          />
          <div className="ml-3 overflow-hidden">
            <p className="text-sm font-medium text-slate-900">Floyd Miles</p>
            <p className="truncate text-sm text-slate-500">floyd.miles@example.com</p>
          </div>
        </li>
        <li className="flex">
          <img
            className="h-10 w-10 rounded-full"
            src="https://images.unsplash.com/photo-1438761681033-6461ffad8d80?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=facearea&facepad=2&w=256&h=256&q=80"
            alt=""
          />
          <div className="ml-3 overflow-hidden">
            <p className="text-sm font-medium text-slate-900">Courtney Henry</p>
            <p className="truncate text-sm text-slate-500">courtney.henry@example.com</p>
          </div>
        </li>
      </ul>
    </div>
  }
</Example>
```

----------------------------------------

TITLE: Installing prettier-plugin-tailwindcss
DESCRIPTION: This command installs the latest version of `prettier-plugin-tailwindcss`, enabling new features like automatic whitespace cleanup and duplicate class removal. It's a prerequisite for using the plugin's enhanced sorting capabilities.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/blog/2024-05-30-prettier-plugin-collapse-whitespace/index.mdx#_snippet_0

LANGUAGE: sh
CODE:
```
npm i prettier-plugin-tailwindcss@latest
```

----------------------------------------

TITLE: Allowing Flex Items to Shrink with Tailwind CSS (HTML)
DESCRIPTION: This snippet demonstrates how to use the `shrink` utility class in Tailwind CSS to allow a flex item to shrink if its content or container size requires it. It ensures that the item can reduce its size to fit within the available space, making the layout more flexible.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/docs/flex-shrink.mdx#_snippet_0

LANGUAGE: html
CODE:
```
<!-- [!code classes:shrink] -->
<div class="flex ...">
  <div class="h-14 w-14 flex-none ...">01</div>
  <div class="h-14 w-64 shrink ...">02</div>
  <div class="h-14 w-14 flex-none ...">03</div>
</div>
```

----------------------------------------

TITLE: Tailwind CSS: Generic data attribute selector
DESCRIPTION: Applies styles based on any custom data attribute, using the `&[data-...]` selector for flexible styling based on data states.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/docs/hover-focus-and-other-states.mdx#_snippet_188

LANGUAGE: CSS
CODE:
```
&[data-...]
```

----------------------------------------

TITLE: Mapping Sanity PortableText to Custom React Components
DESCRIPTION: This snippet demonstrates how to render content from Sanity's Portable Text format into custom React components, allowing for fine-grained control over typography and element styling (e.g., paragraphs, headings, blockquotes) using Tailwind CSS classes. It shows how to map different block types to specific JSX elements.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/blog/2024-09-12-radiant-a-beautiful-new-marketing-site-template/index.mdx#_snippet_8

LANGUAGE: jsx
CODE:
```
<PortableText
  value={post.body}
  components={{
    block: {
      normal: ({ children }) => <p className="my-10 text-base/8 first:mt-0 last:mb-0">{children}</p>,
      h2: ({ children }) => (
        <h2 className="mt-12 mb-10 text-2xl/8 font-medium tracking-tight text-gray-950 first:mt-0 last:mb-0">
          {children}
        </h2>
      ),
      h3: ({ children }) => (
        <h3 className="mt-12 mb-10 text-xl/8 font-medium tracking-tight text-gray-950 first:mt-0 last:mb-0">
          {children}
        </h3>
      ),
      blockquote: ({ children }) => (
        <blockquote className="my-10 border-l-2 border-l-gray-300 pl-6 text-base/8 text-gray-950 first:mt-0 last:mb-0">
          {children}
        </blockquote>
      ),
    },
    types: {
      image: ({ value }) => (
        <img className="w-full rounded-2xl" src={image(value).width(2000).url()} alt={value.alt || ""} />
      ),
    },
    /* ... */
  }}
/>
```

----------------------------------------

TITLE: Defining Page Metadata in Next.js with JSX
DESCRIPTION: This snippet defines the 'meta' object for a Next.js page, providing essential metadata such as title, description, date, authors, and an image. It uses JSX for the 'excerpt' property, allowing for rich content. This configuration is crucial for SEO and content management within a blog or content-driven application.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/blog/designing-tailwind-ui-ecommerce/index.mdx#_snippet_0

LANGUAGE: JavaScript
CODE:
```
import { adamwathan } from "@/app/blog/authors";
import card from "./card.jpg";
import { Image } from "@/components/media";
import Link from "next/link";

export const meta = {
  private: true,
  title: "Designing Tailwind UI Ecommerce",
  description: `Hey! We've been working on this new Tailwind UI Ecommerce kit for months now and are finally closing in on the finish line so I thought I'd write up a bit about the process and give you an update on where things are at.`,
  date: "2021-08-07T12:45:00.0Z",
  authors: [adamwathan],
  image: card,
  excerpt: (
    <>
      Hey! We've been working on this new Tailwind UI Ecommerce kit for months now and are finally closing in on the
      finish line so I thought I'd write up a bit about the process and give you an update on where things are at.
    </>
  )
};
```

----------------------------------------

TITLE: Safely Centering Flex Items with Tailwind CSS HTML
DESCRIPTION: This snippet illustrates the `justify-center-safe` utility, which centers flex items but falls back to `flex-start` alignment if there isn't sufficient space. This prevents content from overflowing the container in constrained layouts.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/docs/justify-content.mdx#_snippet_2

LANGUAGE: HTML
CODE:
```
<!-- [!code filename:justify-center-safe] -->
<!-- [!code classes:justify-center-safe] -->
<div class="flex justify-center-safe ...">
  <div>01</div>
  <div>02</div>
  <div>03</div>
  <div>04</div>
</div>
```

----------------------------------------

TITLE: Tailwind CSS Container Query for @lg Breakpoint
DESCRIPTION: Defines a container query that applies styles when the container's width is greater than or equal to 32rem, corresponding to the @lg breakpoint in Tailwind CSS.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/docs/hover-focus-and-other-states.mdx#_snippet_137

LANGUAGE: CSS
CODE:
```
@container (width >= 32rem)
```

----------------------------------------

TITLE: Truncating Text with Tailwind CSS `truncate` Utility
DESCRIPTION: Use the `truncate` utility to prevent text from wrapping and automatically add an ellipsis (...) to overflowing text. This utility combines `overflow: hidden`, `text-overflow: ellipsis`, and `white-space: nowrap` for a concise solution to text truncation.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/docs/text-overflow.mdx#_snippet_1

LANGUAGE: HTML
CODE:
```
<!-- [!code classes:truncate] -->
<p class="truncate">The longest word in any of the major...</p>
```

----------------------------------------

TITLE: Updating Tailwind CSS Dependency via npm
DESCRIPTION: This shell command provides instructions for updating the Tailwind CSS dependency in a project. Running npm install -D tailwindcss@latest installs the latest version of Tailwind CSS as a development dependency, ensuring users can access new features and improvements like container queries without breaking changes.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/blog/tailwindcss-v3-2/index.mdx#_snippet_36

LANGUAGE: Shell
CODE:
```
npm install -D tailwindcss@latest
```

----------------------------------------

TITLE: HTML Structure for a Popover with Starting Styles
DESCRIPTION: Defines the comprehensive HTML structure for a button that triggers a popover, demonstrating the use of `popover` attributes and a wide range of Tailwind CSS classes, including `[@starting-style]` for controlling the popover's initial opacity when it opens.
SOURCE: https://github.com/tailwindlabs/tailwindcss.com/blob/main/src/docs/hover-focus-and-other-states.mdx#_snippet_58

LANGUAGE: html
CODE:
```
<div className="grid h-full items-center justify-center">
  <button
    popoverTarget="my-popover"
    className="inline-flex w-full justify-center rounded-md bg-indigo-600 px-3 py-2 text-sm font-semibold text-white shadow-sm hover:bg-indigo-500 focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600 sm:col-start-2"
  >
    Check for updates
  </button>
  <div
    popover="auto"
    id="my-popover"
    className="relative inset-y-0 mx-auto my-auto transform overflow-hidden rounded-lg bg-white px-4 pt-5 pb-4 text-left opacity-0 shadow-xl transition-all [transition-behavior:allow-discrete] duration-500 sm:w-full sm:max-w-96 sm:p-6 dark:bg-gray-800 [&:is([open],:popover-open)]:opacity-100 [@starting-style]:[&:is([open],:popover-open)]:opacity-0"
  >
    <div>
      <div className="mx-auto flex size-12 items-center justify-center rounded-full bg-indigo-50 dark:bg-indigo-600/10">
        <svg
          className="size-5 text-indigo-400 dark:text-indigo-600"
          viewBox="0 0 20 20"
          fill="currentColor"
          aria-hidden="true"
          data-slot="icon"
        >
          <path
            fillRule="evenodd"
            d="M18 10a8 8 0 1 1-16 0 8 8 0 0 1 16 0Zm-7-4a1 1 0 1 1-2 0 1 1 0 0 1 2 0ZM9 9a.75.75 0 0 0 0 1.5h.253a.25.25 0 0 1 .244.304l-.459 2.066A1.75 1.75 0 0 0 10.747 15H11a.75.75 0 0 0 0-1.5h-.253a.25.25 0 0 1-.244-.304l.459-2.066A1.75 1.75 0 0 0 9.253 9H9Z"
            clipRule="evenodd"
          />
        </svg>
      </div>
      <div className="mt-3 text-center sm:mt-5">
        <h3 className="text-base font-semibold text-gray-900 dark:text-white" id="modal-title">
          Update available
        </h3>
        <div className="mt-2">
          <p className="text-sm text-gray-500 dark:text-gray-200">
            A new software update is available: <span className="font-semibold">v2.0.4.</span>
            <br />
            Click the button below to install it.
          </p>
        </div>
      </div>
    </div>
    <div className="mt-5">
      <button
        type="button"
        className="inline-flex w-full justify-center rounded-md bg-indigo-600 px-3 py-2 text-sm font-semibold text-white shadow-sm hover:bg-indigo-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600 sm:col-start-2"
      >
        Install
      </button>
    </div>
  </div>
</div>
```