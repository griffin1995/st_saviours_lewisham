TITLE: Iterating Results with Core Select via Session.execute().scalars()
DESCRIPTION: The SQLAlchemy 2.0 approach to iterating over results from a Core select() construct executed via Session.execute(), including joins and filters. The scalars() modifier is used to yield ORM objects.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_20.rst#_snippet_66

LANGUAGE: Python
CODE:
```
for user in session.execute(
    select(User).join(User.addresses).filter(Address.email == "some@email.case")
).scalars():
    ...
```

----------------------------------------

TITLE: Creating a SQLAlchemy Engine (Python)
DESCRIPTION: Demonstrates the basic usage of `sqlalchemy.create_engine` to establish a connection pool to a database using a connection URL. This engine instance is typically created once per application process and manages multiple DBAPI connections.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/core/connections.rst#_snippet_0

LANGUAGE: python
CODE:
```
engine = create_engine("mysql+mysqldb://scott:tiger@localhost/test")
```

----------------------------------------

TITLE: Defining SQLAlchemy ORM Models and Table in Python
DESCRIPTION: This snippet defines the core SQLAlchemy ORM model classes (User, Address, Order, Item) using Declarative Mapping and a standard Table object for a many-to-many relationship. It establishes relationships between models and defines table names and columns with primary keys and foreign keys. These classes represent the database schema used for subsequent query examples.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/queryguide/_plain_setup.rst#_snippet_0

LANGUAGE: python
CODE:
```
from typing import List
from typing import Optional

from sqlalchemy import Column
from sqlalchemy import create_engine
from sqlalchemy import ForeignKey
from sqlalchemy import Table
from sqlalchemy.orm import DeclarativeBase
from sqlalchemy.orm import Mapped
from sqlalchemy.orm import mapped_column
from sqlalchemy.orm import relationship
from sqlalchemy.orm import Session


class Base(DeclarativeBase):
    pass
class User(Base):
    __tablename__ = "user_account"
    id: Mapped[int] = mapped_column(primary_key=True)
    name: Mapped[str]
    fullname: Mapped[Optional[str]]
    addresses: Mapped[List["Address"]] = relationship(back_populates="user")
    orders: Mapped[List["Order"]] = relationship()

    def __repr__(self) -> str:
        return f"User(id={self.id!r}, name={self.name!r}, fullname={self.fullname!r})"
class Address(Base):
    __tablename__ = "address"
    id: Mapped[int] = mapped_column(primary_key=True)
    user_id: Mapped[int] = mapped_column(ForeignKey("user_account.id"))
    email_address: Mapped[str]
    user: Mapped[User] = relationship(back_populates="addresses")

    def __repr__(self) -> str:
        return f"Address(id={self.id!r}, email_address={self.email_address!r})"
order_items_table = Table(
    "order_items",
    Base.metadata,
    Column("order_id", ForeignKey("user_order.id"), primary_key=True),
    Column("item_id", ForeignKey("item.id"), primary_key=True),
)

class Order(Base):
    __tablename__ = "user_order"
    id: Mapped[int] = mapped_column(primary_key=True)
    user_id: Mapped[int] = mapped_column(ForeignKey("user_account.id"))
    items: Mapped[List["Item"]] = relationship(secondary=order_items_table)
class Item(Base):
    __tablename__ = "item"
    id: Mapped[int] = mapped_column(primary_key=True)
    name: Mapped[str]
    description: Mapped[str]
```

----------------------------------------

TITLE: Bulk Insert with RETURNING using session.scalars in SQLAlchemy ORM
DESCRIPTION: Demonstrates performing a bulk insert operation using the sqlalchemy.dml.Insert construct with the returning() clause. The operation is executed via session.scalars(), passing a list of dictionaries for the rows to be inserted. This method optimizes batching and supports heterogeneous parameter sets.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/whatsnew_20.rst#_snippet_24

LANGUAGE: Python
CODE:
```
users = session.scalars(
    insert(User).returning(User),
    [
        {"name": "spongebob", "fullname": "Spongebob Squarepants"},
        {"name": "sandy", "fullname": "Sandy Cheeks"},
        {"name": "patrick", "fullname": "Patrick Star"},
        {"name": "squidward", "fullname": "Squidward Tentacles"},
        {"name": "ehkrabs", "fullname": "Eugene H. Krabs"},
    ],
)
print(users.all())
```

----------------------------------------

TITLE: Using Outermost Transaction Block (Preferred Pattern) - SQLAlchemy Python
DESCRIPTION: Presents the recommended SQLAlchemy 2.0 pattern for transaction management. The transaction is explicitly started using `with session.begin():` at the outermost scope where database operations occur. Inner functions like `method_a` and `method_b` do not need to manage transactions themselves, simplifying the code and making transaction boundaries clear.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_20.rst#_snippet_102

LANGUAGE: Python
CODE:
```
def method_a(session):
    method_b(session)

def method_b(session):
    session.add(SomeObject("bat", "lala"))


Session = sessionmaker(engine)

# create a Session and call method_a
with Session() as session:
    with session.begin():
        method_a(session)
```

----------------------------------------

TITLE: Defining ForeignKey ON UPDATE/ON DELETE in SQLAlchemy
DESCRIPTION: Demonstrates how to specify ON UPDATE and ON DELETE clauses for Foreign Key constraints using the `onupdate` and `ondelete` keyword arguments in `ForeignKey` (for single columns) and `ForeignKeyConstraint` (for composite keys). These options control cascading behavior upon parent row modifications.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/core/constraints.rst#_snippet_8

LANGUAGE: Python
CODE:
```
child = Table(
    "child",
    metadata_obj,
    Column(
        "id",
        Integer,
        ForeignKey("parent.id", onupdate="CASCADE", ondelete="CASCADE"),
        primary_key=True,
    ),
)

composite = Table(
    "composite",
    metadata_obj,
    Column("id", Integer, primary_key=True),
    Column("rev_id", Integer),
    Column("note_id", Integer),
    ForeignKeyConstraint(
        ["rev_id", "note_id"],
        ["revisions.id", "revisions.note_id"],
        onupdate="CASCADE",
        ondelete="SET NULL",
    ),
)
```

----------------------------------------

TITLE: Defining Scalar Default for INSERT - SQLAlchemy Python
DESCRIPTION: This snippet demonstrates how to set a simple scalar default value for a column using the `default` parameter of `Column`. The value '12' will be used during an INSERT statement if no value is provided for 'somecolumn'.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/core/defaults.rst#_snippet_0

LANGUAGE: Python
CODE:
```
Table("mytable", metadata_obj, Column("somecolumn", Integer, default=12))
```

----------------------------------------

TITLE: Defining a Declarative Base Class in SQLAlchemy
DESCRIPTION: This snippet defines a foundational `Base` class by inheriting from `DeclarativeBase`. This `Base` class serves as the common ancestor for all ORM-mapped classes, providing the necessary infrastructure for declarative table and object mapping.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/declarative_tables.rst#_snippet_0

LANGUAGE: Python
CODE:
```
from sqlalchemy.orm import DeclarativeBase


class Base(DeclarativeBase):
    pass
```

----------------------------------------

TITLE: Declaring User Mapped Class with Declarative (Python)
DESCRIPTION: Defines the `User` class, inheriting from the `Base` Declarative class, to represent the 'user_account' table. It uses `__tablename__` to name the table and `Mapped`/`mapped_column` for column definitions, including a primary key, string columns using `String(30)`, and a relationship to 'Address' objects. Requires standard SQLAlchemy imports for types like `String` and ORM constructs.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/tutorial/metadata.rst#_snippet_10

LANGUAGE: python
CODE:
```
from typing import List
from typing import Optional
from sqlalchemy import String # Requires import from sqlalchemy
from sqlalchemy.orm import Mapped
from sqlalchemy.orm import mapped_column
from sqlalchemy.orm import relationship

class User(Base):
    __tablename__ = "user_account"

    id: Mapped[int] = mapped_column(primary_key=True)
    name: Mapped[str] = mapped_column(String(30))
    fullname: Mapped[Optional[str]]

    addresses: Mapped[List["Address"]] = relationship(back_populates="user")

    def __repr__(self) -> str:
        return f"User(id={self.id!r}, name={self.name!r}, fullname={self.fullname!r})"
```

----------------------------------------

TITLE: Executing a SELECT Statement and Processing Results
DESCRIPTION: Shows how to execute a previously constructed `Select` object (`stmt`) using `session.execute`. The resulting `Result` object is then processed using `scalars()` to yield ORM entity instances directly, which are then iterated over to print attribute values. Includes the generated SQL.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/queryguide/select.rst#_snippet_1

LANGUAGE: python
CODE:
```
result = session.execute(stmt)
for user_obj in result.scalars():
    print(f"{user_obj.name} {user_obj.fullname}")
```

LANGUAGE: sql
CODE:
```
SELECT user_account.id, user_account.name, user_account.fullname
FROM user_account
WHERE user_account.name = ?
```

----------------------------------------

TITLE: Defining Basic Many-to-One (Annotated Declarative) - Python
DESCRIPTION: This snippet demonstrates a simple, non-bidirectional Many-to-One relationship using annotated Declarative. The foreign key is on the parent table, referencing the child, and the scalar relationship attribute is declared on the parent class.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/basic_relationships.rst#_snippet_6

LANGUAGE: Python
CODE:
```
class Parent(Base):
    __tablename__ = "parent_table"

    id: Mapped[int] = mapped_column(primary_key=True)
    child_id: Mapped[int] = mapped_column(ForeignKey("child_table.id"))
    child: Mapped["Child"] = relationship()


class Child(Base):
    __tablename__ = "child_table"

    id: Mapped[int] = mapped_column(primary_key=True)
```

----------------------------------------

TITLE: Defining Declarative Base Class (SQLAlchemy 2.0) - Python
DESCRIPTION: Demonstrates the new way to define the base class for declarative models in SQLAlchemy 2.0 using `DeclarativeBase`, which is better understood by typing tools compared to the function `declarative_base`. This is the first step in migrating existing mappings.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/whatsnew_20.rst#_snippet_12

LANGUAGE: Python
CODE:
```
from sqlalchemy.orm import DeclarativeBase

class Base(DeclarativeBase):
    pass
```

----------------------------------------

TITLE: ORM Annotated Declarative Mapping with Type Annotations
DESCRIPTION: This example showcases the modern SQLAlchemy 2.0 approach using `Mapped` type annotations with `mapped_column()`. SQLAlchemy can infer column types and nullability from the annotations, allowing for more concise and type-safe model definitions while still enabling explicit `mapped_column` arguments for overrides.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/declarative_tables.rst#_snippet_3

LANGUAGE: Python
CODE:
```
from sqlalchemy import String
from sqlalchemy.orm import DeclarativeBase
from sqlalchemy.orm import Mapped
from sqlalchemy.orm import mapped_column


class Base(DeclarativeBase):
    pass


class User(Base):
    __tablename__ = "user"

    id: Mapped[int] = mapped_column(primary_key=True)
    name: Mapped[str] = mapped_column(String(50))
    fullname: Mapped[str | None]
    nickname: Mapped[str | None] = mapped_column(String(30))
```

----------------------------------------

TITLE: Defining SQLAlchemy ORM Mapped Class with DeclarativeBase
DESCRIPTION: This snippet defines a basic ORM mapped class `MyTable` using the modern DeclarativeBase. It maps to a table named "my_table" with an integer primary key `id` and a string column `name`. This class is used in subsequent examples demonstrating `schema_translate_map` and `identity_token`.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/queryguide/api.rst#_snippet_6

LANGUAGE: Python
CODE:
```
from sqlalchemy.orm import DeclarativeBase
from sqlalchemy.orm import Mapped
from sqlalchemy.orm import mapped_column


class Base(DeclarativeBase):
    pass


class MyTable(Base):
    __tablename__ = "my_table"

    id: Mapped[int] = mapped_column(primary_key=True)
    name: Mapped[str]
```

----------------------------------------

TITLE: Subqueryload with Limit Potential Issue - SQLAlchemy
DESCRIPTION: Demonstrates the problem when using `subqueryload` with `LIMIT` but no `ORDER BY`. The `LIMIT` is pushed into the subquery, potentially causing the main and load queries to operate on different sets of rows if the database doesn't provide a deterministic order.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/faq/ormconfiguration.rst#_snippet_15

LANGUAGE: python
CODE:
```
>>> user = session.scalars(
...     select(User).options(subqueryload(User.addresses)).limit(1)
... ).first()
```

LANGUAGE: sql
CODE:
```
-- the "main" query
SELECT users.id AS users_id
FROM users
 LIMIT 1
```

LANGUAGE: sql
CODE:
```
-- the "load" query issued by subqueryload
SELECT addresses.id AS addresses_id,
       addresses.user_id AS addresses_user_id,
       anon_1.users_id AS anon_1_users_id
FROM (SELECT users.id AS users_id FROM users LIMIT 1) AS anon_1
JOIN addresses ON anon_1.users_id = addresses.user_id
ORDER BY anon_1.users_id
```

----------------------------------------

TITLE: Simplify SQLAlchemy ORM Mapping with Mapped (Typed and Concise) - Python
DESCRIPTION: This snippet demonstrates a further simplified version of the SQLAlchemy ORM declarative models, leveraging Python type annotations with `Mapped` to imply column types and nullability. It shows how `mapped_column` can be omitted or simplified when type annotations provide sufficient information.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/whatsnew_20.rst#_snippet_16

LANGUAGE: Python
CODE:
```
from typing import List
from typing import Optional
from sqlalchemy.orm import DeclarativeBase
from sqlalchemy.orm import Mapped
from sqlalchemy.orm import mapped_column
from sqlalchemy.orm import relationship


class Base(DeclarativeBase):
    pass


class User(Base):
    __tablename__ = "user_account"

    id: Mapped[int] = mapped_column(primary_key=True)
    name: Mapped[str] = mapped_column(String(30))
    fullname: Mapped[Optional[str]]
    addresses: Mapped[List["Address"]] = relationship(back_populates="user")


class Address(Base):
    __tablename__ = "address"

    id: Mapped[int] = mapped_column(primary_key=True)
    email_address: Mapped[str]
    user_id: Mapped[int] = mapped_column(ForeignKey("user_account.id"))
    user: Mapped["User"] = relationship(back_populates="addresses")
```

----------------------------------------

TITLE: Fetch with Joined Eager Loading (SQLAlchemy 2.0)
DESCRIPTION: Shows the 2.0 approach for fetching objects and eagerly loading a related collection using `select` with `options(joinedload(...))`, applying `.unique()` to handle potential duplicates from the join, and fetching all results using `.all()`. Requires a configured SQLAlchemy session, mapped User class, and the `select` and `joinedload` functions.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_20.rst#_snippet_46

LANGUAGE: Python
CODE:
```
session.scalars(
  select(User).
  options(
    joinedload(User.addresses)
  )
).unique().all()
```

----------------------------------------

TITLE: Using SQLAlchemy Session with Context Manager
DESCRIPTION: Demonstrates the basic pattern for creating a SQLAlchemy Engine and Session, adding objects, and committing changes using a Python context manager (`with` statement). This ensures the session is automatically closed.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/session_basics.rst#_snippet_0

LANGUAGE: Python
CODE:
```
from sqlalchemy import create_engine
from sqlalchemy.orm import Session

# an Engine, which the Session will use for connection
# resources
engine = create_engine("postgresql+psycopg2://scott:tiger@localhost/")

# create session and add objects
with Session(engine) as session:
    session.add(some_object)
    session.add(some_other_object)
    session.commit()
```

----------------------------------------

TITLE: Building SELECT Statement with Method Chaining (Python)
DESCRIPTION: This snippet demonstrates how to construct a SQLAlchemy `select` statement using the 'generative' or method chaining pattern. It shows adding multiple criteria with `.where()` and an ordering clause with `.order_by()`, where each method call returns a new, modified select object.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/glossary.rst#_snippet_7

LANGUAGE: Python
CODE:
```
stmt = (
    select(user.c.name)
    .where(user.c.id > 5)
    .where(user.c.name.like("e%"))
    .order_by(user.c.name)
)
```

----------------------------------------

TITLE: Defining One-to-Many Relationship with Delete Cascade in SQLAlchemy
DESCRIPTION: This Python snippet defines a `User` model with a one-to-many relationship to `Address` objects. The `cascade="all, delete"` option is specified, indicating that when a `User` object is deleted via the ORM session, related `Address` objects will also be deleted.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/cascades.rst#_snippet_10

LANGUAGE: python
CODE:
```
class User(Base):
  # ...

  addresses = relationship("Address", cascade="all, delete")
```

----------------------------------------

TITLE: Performing a Simple ORM Join using Relationship in SQLAlchemy
DESCRIPTION: Demonstrates how to use `select().join()` with a relationship attribute (`User.addresses`) to automatically construct a JOIN clause between the `User` and `Address` entities based on the defined relationship. The resulting SQL joins the `user_account` and `address` tables on the foreign key relationship.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/queryguide/select.rst#_snippet_19

LANGUAGE: Python
CODE:
```
stmt = select(User).join(User.addresses)
```

LANGUAGE: SQL
CODE:
```
SELECT user_account.id, user_account.name, user_account.fullname
FROM user_account JOIN address ON user_account.id = address.user_id
```

----------------------------------------

TITLE: Defining Select Statement with Row Typing in SQLAlchemy
DESCRIPTION: This Python snippet demonstrates how to define a simple SELECT statement using SQLAlchemy's SQL Expression Language. In SQLAlchemy 2.0, this statement would be typed as `Select[Tuple[int, str]]`, while in 2.1 it is typed more directly as `Select[int, str]` leveraging PEP 646 for improved type checking of row contents.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_21.rst#_snippet_0

LANGUAGE: python
CODE:
```
stmt = select(column("x", Integer), column("y", String))
```

----------------------------------------

TITLE: Executing SQLAlchemy Statement with Connection (Raw Result) - Python
DESCRIPTION: Demonstrates executing a SQLAlchemy statement using a direct engine connection and fetching results as raw rows. This is typically used for non-ORM results or when bypassing the session. It shows the generated SQL and the fetched data.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/tutorial/data_select.rst#_snippet_73

LANGUAGE: python
CODE:
```
with engine.connect() as conn:
    result = conn.execute(stmt)
    print(result.all())
```

LANGUAGE: sql
CODE:
```
BEGIN (implicit)
SELECT anon_1.name, address.email_address
FROM address JOIN
  (SELECT user_account.id AS id, user_account.name AS name, user_account.fullname AS fullname
  FROM user_account
  WHERE user_account.name = ?
UNION ALL
  SELECT user_account.id AS id, user_account.name AS name, user_account.fullname AS fullname
  FROM user_account
  WHERE user_account.name = ?) AS anon_1 ON anon_1.id = address.user_id
ORDER BY anon_1.name, address.email_address
[generated in ...] ('sandy', 'spongebob')
ROLLBACK
```

----------------------------------------

TITLE: Performing Bulk Insert with Fixed SQL Expression (SQLAlchemy ORM, Python)
DESCRIPTION: Demonstrates using `session.scalars` with an `insert` statement and `values` to perform a bulk insert. A fixed SQL expression (`func.now()`) is applied to the `timestamp` column for all inserted rows, while row-specific values for `message` are provided in a list passed as the second argument to `session.scalars`.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/queryguide/dml.rst#_snippet_9

LANGUAGE: python
CODE:
```
from sqlalchemy import func
>>> log_record_result = session.scalars(
...     insert(LogRecord).values(code="SQLA", timestamp=func.now()).returning(LogRecord),
...     [
...         {"message": "log message #1"},
...         {"message": "log message #2"},
...         {"message": "log message #3"},
...         {"message": "log message #4"},
...     ],
... )
```

----------------------------------------

TITLE: Building Select Statement (2.0 Style) - SQLAlchemy Python
DESCRIPTION: Shows the recommended SQLAlchemy 2.0 way to build a `SELECT` statement. Columns are passed positionally, and filtering is done using the `.where()` method, promoting method chaining. This is the preferred pattern moving forward.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/errors.rst#_snippet_43

LANGUAGE: Python
CODE:
```
stmt = select(table1.c.myid).where(table1.c.myid == table2.c.otherid)
```

----------------------------------------

TITLE: Defining Single Column ForeignKey - Python
DESCRIPTION: This snippet demonstrates how to define a single-column foreign key constraint within a table definition using the ForeignKey object. The ForeignKey specifies that the 'user_id' column in the 'user_preference' table must reference the 'user_id' column in the 'user' table. This is the most common method for single-column foreign keys.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/core/constraints.rst#_snippet_0

LANGUAGE: python
CODE:
```
user_preference = Table(
    "user_preference",
    metadata_obj,
    Column("pref_id", Integer, primary_key=True),
    Column("user_id", Integer, ForeignKey("user.user_id"), nullable=False),
    Column("pref_name", String(40), nullable=False),
    Column("pref_value", String(100)),
)
```

----------------------------------------

TITLE: Migrating to SQLAlchemy 2.0 Execution Styles (Python)
DESCRIPTION: Demonstrates the SQLAlchemy 2.0 style for database interaction. It shows how to create an engine, execute DDL and DML within a transaction using `connection.execute` and the `text()` construct, and execute a select statement using the updated `select()` syntax with `connection.execute`. This replaces the legacy `engine.execute` calls.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_20.rst#_snippet_2

LANGUAGE: python
CODE:
```
from sqlalchemy import column
from sqlalchemy import create_engine
from sqlalchemy import select
from sqlalchemy import table
from sqlalchemy import text


engine = create_engine("sqlite://")

# don't rely on autocommit for DML and DDL
with engine.begin() as connection:
    # use connection.execute(), not engine.execute()
    # use the text() construct to execute textual SQL
    connection.execute(text("CREATE TABLE foo (id integer)"))
    connection.execute(text("INSERT INTO foo (id) VALUES (1)"))


foo = table("foo", column("id"))

with engine.connect() as connection:
    # use connection.execute(), not engine.execute()
    # select() now accepts column / table expressions positionally
    result = connection.execute(select(foo.c.id))

    print(result.fetchall())
```

----------------------------------------

TITLE: Setting Up SQLAlchemy Declarative Base and Imports - Python
DESCRIPTION: This snippet provides the necessary imports and defines a base class for Declarative mapping. It includes standard library imports for typing and SQLAlchemy ORM components required for defining mapped classes and relationships.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/basic_relationships.rst#_snippet_0

LANGUAGE: Python
CODE:
```
from __future__ import annotations
from typing import List

from sqlalchemy import ForeignKey
from sqlalchemy import Integer
from sqlalchemy.orm import Mapped
from sqlalchemy.orm import mapped_column
from sqlalchemy.orm import DeclarativeBase
from sqlalchemy.orm import relationship


class Base(DeclarativeBase):
    pass
```

----------------------------------------

TITLE: Creating SQLAlchemy Core INSERT Statement with Values
DESCRIPTION: Demonstrates how to construct a basic SQL INSERT statement using the `sqlalchemy.insert` function and specifying column values using the `.values()` method. This creates an `Insert` object representing the statement.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/tutorial/data_insert.rst#_snippet_0

LANGUAGE: Python
CODE:
```
from sqlalchemy import insert
stmt = insert(user_table).values(name="spongebob", fullname="Spongebob Squarepants")
```

----------------------------------------

TITLE: Loading Object from SQLAlchemy Session
DESCRIPTION: Illustrates how to retrieve an object (`User`) from the database using a SQLAlchemy `Session`. The example uses the `select` construct to build a query filtering by the `User.name` attribute and fetches the first result using `scalars()` and `first()`. It's important to note that this process of loading data from the database does not invoke the class's `__init__` method.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/mapping_styles.rst#_snippet_6

LANGUAGE: Python
CODE:
```
u1 = session.scalars(select(User).where(User.name == "some name")).first()
```

----------------------------------------

TITLE: Defining ORM Models with DeclarativeBase Subclasses (SQLAlchemy, Python)
DESCRIPTION: Provides a comprehensive example of defining SQLAlchemy ORM models (`User`, `Address`) by subclassing a `DeclarativeBase`. It illustrates how to specify table names (`__tablename__`), columns (`mapped_column`, `Mapped` annotation), and relationships (`relationship`).
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/declarative_styles.rst#_snippet_2

LANGUAGE: Python
CODE:
```
from datetime import datetime
from typing import List
from typing import Optional

from sqlalchemy import ForeignKey
from sqlalchemy import func
from sqlalchemy import Integer
from sqlalchemy import String
from sqlalchemy.orm import DeclarativeBase
from sqlalchemy.orm import Mapped
from sqlalchemy.orm import mapped_column
from sqlalchemy.orm import relationship


class Base(DeclarativeBase):
    pass


class User(Base):
    __tablename__ = "user"

    id = mapped_column(Integer, primary_key=True)
    name: Mapped[str]
    fullname: Mapped[Optional[str]]
    nickname: Mapped[Optional[str]] = mapped_column(String(64))
    create_date: Mapped[datetime] = mapped_column(insert_default=func.now())

    addresses: Mapped[List["Address"]] = relationship(back_populates="user")


class Address(Base):
    __tablename__ = "address"

    id = mapped_column(Integer, primary_key=True)
    user_id = mapped_column(ForeignKey("user.id"))
    email_address: Mapped[str]

    user: Mapped["User"] = relationship(back_populates="addresses")
```

----------------------------------------

TITLE: Creating and Using Session with sessionmaker Factory - SQLAlchemy ORM - Python
DESCRIPTION: Illustrates how to use sqlalchemy.orm.sessionmaker to create a factory for Session objects bound to a specific engine. This factory can then be used to create sessions within a with block, followed by an explicit session.commit().
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/session_basics.rst#_snippet_4

LANGUAGE: Python
CODE:
```
from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker

# an Engine, which the Session will use for connection
# resources, typically in module scope
engine = create_engine("postgresql+psycopg2://scott:tiger@localhost/")

# a sessionmaker(), also in the same scope as the engine
Session = sessionmaker(engine)

# we can now construct a Session() without needing to pass the
# engine each time
with Session() as session:
    session.add(some_object)
    session.add(some_other_object)
    session.commit()
# closes the session
```

----------------------------------------

TITLE: Defining ORM Models - SQLAlchemy - Python
DESCRIPTION: Defines `User` and `Address` classes mapped to database tables "user" and "address". Includes primary keys, columns, and a one-to-many relationship between User and Address using `relationship` and `ForeignKey`. These models serve as canonical examples for demonstrating session operations.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/session_state_management.rst#_snippet_8

LANGUAGE: Python
CODE:
```
class User(Base):
    __tablename__ = "user"

    id = mapped_column(Integer, primary_key=True)
    name = mapped_column(String(50), nullable=False)
    addresses = relationship("Address", backref="user")


class Address(Base):
    __tablename__ = "address"

    id = mapped_column(Integer, primary_key=True)
    email_address = mapped_column(String(50), nullable=False)
    user_id = mapped_column(Integer, ForeignKey("user.id"), nullable=False)
```

----------------------------------------

TITLE: Handling Duplicate PK with Savepoint - Python
DESCRIPTION: This Python snippet demonstrates the recommended pattern for handling potential primary key conflicts consistently using a nested transaction (savepoint) and catching the IntegrityError. This approach works regardless of whether the conflicting object is already present in the session.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_14.rst#_snippet_78

LANGUAGE: python
CODE:
```
# add another Product with same primary key
try:
    with session.begin_nested():
        session.add(Product(id=1))
except exc.IntegrityError:
    print("row already exists")
```

----------------------------------------

TITLE: Creating PostgreSQL Engine using URL String - Python
DESCRIPTION: Demonstrates creating a SQLAlchemy Engine instance connected to a PostgreSQL database using the psycopg2 driver. The connection details are provided directly in a standard database URL string format.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/core/engines.rst#_snippet_0

LANGUAGE: Python
CODE:
```
from sqlalchemy import create_engine

engine = create_engine("postgresql+psycopg2://scott:tiger@localhost:5432/mydatabase")
```

----------------------------------------

TITLE: Defining Bidirectional One-to-Many / Many-to-One (Annotated Declarative) - Python
DESCRIPTION: This example shows a bidirectional One-to-Many (Parent to Children) and Many-to-One (Child to Parent) relationship using the modern annotated Declarative style. The relationship targets and collection types are inferred from the Mapped annotation, and back_populates links the two sides.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/basic_relationships.rst#_snippet_1

LANGUAGE: Python
CODE:
```
class Parent(Base):
    __tablename__ = "parent_table"

    id: Mapped[int] = mapped_column(primary_key=True)
    children: Mapped[List["Child"]] = relationship(back_populates="parent")


class Child(Base):
    __tablename__ = "child_table"

    id: Mapped[int] = mapped_column(primary_key=True)
    parent_id: Mapped[int] = mapped_column(ForeignKey("parent_table.id"))
    parent: Mapped["Parent"] = relationship(back_populates="children")
```

----------------------------------------

TITLE: Creating Database Tables via Metadata - Python
DESCRIPTION: This snippet executes the DDL statements required to create the database tables defined by the ORM models. It calls the `create_all()` method on the `MetaData` object associated with the declarative `Base`, using the previously created engine to connect to the database and generate the schema.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/quickstart.rst#_snippet_2

LANGUAGE: Python
CODE:
```
Base.metadata.create_all(engine)
```

----------------------------------------

TITLE: Defining SQLAlchemy ORM Models - Python
DESCRIPTION: This snippet defines the database schema and corresponding Python object models using SQLAlchemy's Declarative ORM. It includes the base class `Base`, a `User` model mapping to the `user_account` table, and an `Address` model mapping to the `address` table, demonstrating column definitions, primary/foreign keys, and one-to-many relationships.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/quickstart.rst#_snippet_0

LANGUAGE: Python
CODE:
```
from typing import List
from typing import Optional
from sqlalchemy import ForeignKey
from sqlalchemy import String
from sqlalchemy.orm import DeclarativeBase
from sqlalchemy.orm import Mapped
from sqlalchemy.orm import mapped_column
from sqlalchemy.orm import relationship

class Base(DeclarativeBase):
    pass

class User(Base):
    __tablename__ = "user_account"

    id: Mapped[int] = mapped_column(primary_key=True)
    name: Mapped[str] = mapped_column(String(30))
    fullname: Mapped[Optional[str]]

    addresses: Mapped[List["Address"]] = relationship(
        back_populates="user", cascade="all, delete-orphan"
    )

    def __repr__(self) -> str:
        return f"User(id={self.id!r}, name={self.name!r}, fullname={self.fullname!r})"

class Address(Base):
    __tablename__ = "address"

    id: Mapped[int] = mapped_column(primary_key=True)
    email_address: Mapped[str]
    user_id: Mapped[int] = mapped_column(ForeignKey("user_account.id"))

    user: Mapped["User"] = relationship(back_populates="addresses")

    def __repr__(self) -> str:
        return f"Address(id={self.id!r}, email_address={self.email_address!r})"
```

----------------------------------------

TITLE: Executing SQL and Committing with SQLAlchemy Engine Connection
DESCRIPTION: Shows how to establish a connection using engine.connect(), execute a SQL statement using conn.execute(), and explicitly commit the transaction using conn.commit(). This illustrates the "commit-as-you-go" pattern in the new Engine/Connection API.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_20.rst#_snippet_4

LANGUAGE: Python
CODE:
```
from sqlalchemy import create_engine

engine = create_engine("postgresql+psycopg2:///")

with engine.connect() as conn:
    conn.execute(text("insert into table (x) values (:some_x)"), {"some_x": 10})

    conn.commit()  # commit as you go
```

----------------------------------------

TITLE: Applying Reusable Annotated Column Types to a SQLAlchemy Model
DESCRIPTION: This snippet demonstrates how the previously defined `Annotated` types (`intpk`, `required_name`, `timestamp`) are directly used within `Mapped` annotations in a SQLAlchemy Declarative model. Declarative unpacks these `Annotated` objects, applying their pre-configured `mapped_column` settings to the respective attributes.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/declarative_tables.rst#_snippet_38

LANGUAGE: Python
CODE:
```
class Base(DeclarativeBase):
    pass


class SomeClass(Base):
    __tablename__ = "some_table"

    id: Mapped[intpk]
    name: Mapped[required_name]
    created_at: Mapped[timestamp]
```

----------------------------------------

TITLE: Using SQLAlchemy ORM Session as Context Manager
DESCRIPTION: Illustrates the use of sqlalchemy.orm.Session as a context manager. It shows creating a session, adding an object, and committing the transaction within the with block. The context manager handles closing the session.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_20.rst#_snippet_5

LANGUAGE: Python
CODE:
```
from sqlalchemy.orm import Session

with Session(engine) as session:
    session.add(MyObject())
    session.commit()
```

----------------------------------------

TITLE: Using SQLAlchemy Select and Subquery with Join (Correct)
DESCRIPTION: Demonstrates the recommended SQLAlchemy 2.0 style for creating a subquery from a select statement and then joining another table to that subquery. It shows how to explicitly create the subquery using `.subquery()` before referencing it in the join.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_14.rst#_snippet_10

LANGUAGE: Python
CODE:
```
sq1 = select(user.c.id, user.c.name).subquery()
stmt2 = select(addresses, sq1).select_from(addresses.join(sq1))
```

----------------------------------------

TITLE: Managing SQLAlchemy ORM Session Scope with Context Manager
DESCRIPTION: Shows the recommended pattern for managing the lifecycle (scope) of an ORM Session itself using the Session constructor as a context manager. The session is automatically closed upon exiting the `with` block, ensuring resources are released.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/session_transaction.rst#_snippet_4

LANGUAGE: Python
CODE:
```
with Session(engine) as session:
    session.add(some_object())
    session.add(some_other_object())

    session.commit()  # commits

    session.add(still_another_object)
    session.flush()  # flush still_another_object

    session.commit()  # commits

    result = session.execute(text("<some SELECT statement>"))
```

----------------------------------------

TITLE: Creating SQLAlchemy Engine - Python
DESCRIPTION: This snippet demonstrates how to create a SQLAlchemy Engine instance, which acts as a factory for database connections. It configures the engine to connect to an in-memory SQLite database and enables SQL logging via `echo=True` for demonstration purposes.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/quickstart.rst#_snippet_1

LANGUAGE: Python
CODE:
```
from sqlalchemy import create_engine
engine = create_engine("sqlite://", echo=True)
```

----------------------------------------

TITLE: Updating Objects with Core Update via Session.execute
DESCRIPTION: Shows the recommended way to perform an UPDATE operation on mapped objects in SQLAlchemy 2.0 using the Core update() construct in conjunction with Session.execute(). This aligns ORM updates with Core statement execution.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_20.rst#_snippet_54

LANGUAGE: Python
CODE:
```
session.execute(
  update(User)
  .where(User.name == "foo")
  .values(fullname="Foo Bar")
  .execution_options(
    synchronize_session="evaluate"
  )
)
```

----------------------------------------

TITLE: Defining Declarative Mapped Properties - Declarative Table
DESCRIPTION: This snippet shows how to define ORM mapped properties directly within a declarative class that also defines its `__tablename__`. It demonstrates mapping columns using `mapped_column`, creating relationships with `relationship`, and defining SQL expressions using `column_property`, including type annotations for Mapped attributes.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/declarative_config.rst#_snippet_0

LANGUAGE: Python
CODE:
```
from typing import List
from typing import Optional

from sqlalchemy import Column
from sqlalchemy import ForeignKey
from sqlalchemy import String
from sqlalchemy import Text
from sqlalchemy.orm import column_property
from sqlalchemy.orm import DeclarativeBase
from sqlalchemy.orm import Mapped
from sqlalchemy.orm import mapped_column
from sqlalchemy.orm import relationship


class Base(DeclarativeBase):
    pass


class User(Base):
    __tablename__ = "user"

    id: Mapped[int] = mapped_column(primary_key=True)
    name: Mapped[str]
    firstname: Mapped[str] = mapped_column(String(50))
    lastname: Mapped[str] = mapped_column(String(50))
    fullname: Mapped[str] = column_property(firstname + " " + lastname)

    addresses: Mapped[List["Address"]] = relationship(back_populates="user")


class Address(Base):
    __tablename__ = "address"

    id: Mapped[int] = mapped_column(primary_key=True)
    user_id: Mapped[int] = mapped_column(ForeignKey("user.id"))
    email_address: Mapped[str]
    address_statistics: Mapped[Optional[str]] = mapped_column(Text, deferred=True)

    user: Mapped["User"] = relationship(back_populates="addresses")
```

----------------------------------------

TITLE: Installing SQLAlchemy via pip (Shell)
DESCRIPTION: This command demonstrates the standard method for installing the latest released version of the SQLAlchemy library from PyPI using the pip package manager.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/intro.rst#_snippet_0

LANGUAGE: text
CODE:
```
pip install sqlalchemy
```

----------------------------------------

TITLE: SQLAlchemy: 2.0 Recommended 'Begin Once' Transaction
DESCRIPTION: Shows the recommended SQLAlchemy 2.0 pattern for executing statements within a single transaction block per connection checkout using `engine.begin()`, suitable for operations that should either fully succeed or fail.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_20.rst#_snippet_22

LANGUAGE: Python
CODE:
```
# one choice - work with explicit connection, explicit transaction
# (there remain a few variants on how to demarcate the transaction)

# "begin once" - one transaction only per checkout
with engine.begin() as conn:
    result = conn.execute(stmt)
```

----------------------------------------

TITLE: Setting up SQLAlchemy Database and Seeding Data in Python
DESCRIPTION: This snippet demonstrates how to set up an in-memory SQLite database using the defined ORM models. It creates an engine, generates the database schema based on the model metadata, establishes a connection and session, adds sample User and Address data, and commits the transaction to populate the database. This setup provides the necessary database state for querying examples.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/queryguide/_plain_setup.rst#_snippet_1

LANGUAGE: python
CODE:
```
engine = create_engine("sqlite+pysqlite:///:memory:", echo=True)
Base.metadata.create_all(engine)
conn = engine.connect()
session = Session(conn)
session.add_all(
    [
        User(
            name="spongebob",
            fullname="Spongebob Squarepants",
            addresses=[Address(email_address="spongebob@sqlalchemy.org")],
        ),
        User(
            name="sandy",
            fullname="Sandy Cheeks",
            addresses=[
                Address(email_address="sandy@sqlalchemy.org"),
                Address(email_address="squirrel@squirrelpower.org"),
            ],
        ),
        User(
            name="patrick",
            fullname="Patrick Star",
            addresses=[Address(email_address="pat999@aol.com")],
        ),
        User(
            name="squidward",
            fullname="Squidward Tentacles",
            addresses=[Address(email_address="stentcl@sqlalchemy.org")],
        ),
        User(name="ehkrabs", fullname="Eugene H. Krabs"),
    ]
)
session.commit()
conn.begin()
```

----------------------------------------

TITLE: Managing Session Externally with Context Managers in SQLAlchemy (Recommended)
DESCRIPTION: This example demonstrates a recommended pattern for managing the SQLAlchemy Session and transaction externally using Python's `with` statement (context managers). The `run_my_program` function creates a single session and transaction scope, passing the session to the `go` methods. This ensures operations within the scope participate in the same transaction, simplifying error handling and resource management.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/session_basics.rst#_snippet_23

LANGUAGE: Python
CODE:
```
### this is a **better** (but not the only) way to do it ###


class ThingOne:
    def go(self, session):
        session.execute(update(FooBar).values(x=5))


class ThingTwo:
    def go(self, session):
        session.execute(update(Widget).values(q=18))


def run_my_program():
    with Session() as session:
        with session.begin():
            ThingOne().go(session)
            ThingTwo().go(session)
```

----------------------------------------

TITLE: Establishing SQLAlchemy Declarative Base (Python)
DESCRIPTION: Defines a base class `Base` that inherits from `sqlalchemy.orm.DeclarativeBase`. This class acts as the root for ORM mapped class definitions, automatically managing an associated `MetaData` object and `registry` for mapping configuration.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/tutorial/metadata.rst#_snippet_7

LANGUAGE: python
CODE:
```
from sqlalchemy.orm import DeclarativeBase
class Base(DeclarativeBase):
    pass
```

----------------------------------------

TITLE: Constructing SQLAlchemy DML with 2.0 Generative Methods
DESCRIPTION: Illustrates the recommended way to build `insert`, `update`, and `delete` statements in SQLAlchemy 2.0 using generative methods like `.values()`, `.where()`, `.inline()`, `.returning()`, and `.ordered_values()` as replacements for deprecated constructor arguments.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_20.rst#_snippet_34

LANGUAGE: Python
CODE:
```
# use generative methods, **kwargs OK for values()
stmt = insert(table).values(x=10, y=15).inline()
```

LANGUAGE: Python
CODE:
```
# use generative methods, dictionary also still  OK for values()
stmt = insert(table).values({"x": 10, "y": 15}).returning(table.c.x)
```

LANGUAGE: Python
CODE:
```
# use generative methods
stmt = table.delete().where(table.c.x > 15)
```

LANGUAGE: Python
CODE:
```
# use generative methods, ordered_values() replaces preserve_parameter_order
stmt = (
    table.update()
    .where(
        table.c.x < 15,
    )
    .ordered_values((table.c.y, 20), (table.c.x, table.c.y + 10))
)
```

----------------------------------------

TITLE: Creating an ORM Session (Python)
DESCRIPTION: Initializes a SQLAlchemy ORM 'Session' object, typically bound to an 'Engine'. This session will manage the lifecycle of ORM objects and interact with the database.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/tutorial/orm_data_manipulation.rst#_snippet_2

LANGUAGE: Python
CODE:
```
session = Session(engine)
```

----------------------------------------

TITLE: Defining Declarative Mapping with DeclarativeBase and Mapped - SQLAlchemy Python
DESCRIPTION: This snippet illustrates the standard Declarative mapping approach in SQLAlchemy 2.0+. It defines a base class `Base` inheriting from `DeclarativeBase`, and a `User` class inheriting from `Base`. The `User` class defines database columns using type annotations with `Mapped` and the `mapped_column` function, along with the `__tablename__` class attribute.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/mapping_styles.rst#_snippet_0

LANGUAGE: Python
CODE:
```
from sqlalchemy import Integer, String, ForeignKey
from sqlalchemy.orm import DeclarativeBase
from sqlalchemy.orm import Mapped
from sqlalchemy.orm import mapped_column


# declarative base class
class Base(DeclarativeBase):
    pass


# an example mapping using the base
class User(Base):
    __tablename__ = "user"

    id: Mapped[int] = mapped_column(primary_key=True)
    name: Mapped[str]
    fullname: Mapped[str] = mapped_column(String(30))
    nickname: Mapped[Optional[str]]
```

----------------------------------------

TITLE: Define SQLAlchemy ORM Mapping with Mapped and mapped_column (Typed) - Python
DESCRIPTION: This snippet shows the same SQLAlchemy ORM declarative models as the previous one, but with explicit Python type annotations applied using `Mapped`. It demonstrates how to type columns (including optional ones) and relationships for improved static analysis and type checking.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/whatsnew_20.rst#_snippet_15

LANGUAGE: Python
CODE:
```
from typing import List
from typing import Optional
from sqlalchemy.orm import DeclarativeBase
from sqlalchemy.orm import Mapped
from sqlalchemy.orm import mapped_column
from sqlalchemy.orm import relationship


class Base(DeclarativeBase):
    pass


class User(Base):
    __tablename__ = "user_account"

    id: Mapped[int] = mapped_column(Integer, primary_key=True)
    name: Mapped[str] = mapped_column(String(30), nullable=False)
    fullname: Mapped[Optional[str]] = mapped_column(String)
    addresses: Mapped[List["Address"]] = relationship("Address", back_populates="user")


class Address(Base):
    __tablename__ = "address"

    id: Mapped[int] = mapped_column(Integer, primary_key=True)
    email_address: Mapped[str] = mapped_column(String, nullable=False)
    user_id: Mapped[int] = mapped_column(ForeignKey("user_account.id"), nullable=False)
    user: Mapped["User"] = relationship("User", back_populates="addresses")
```

----------------------------------------

TITLE: Building a Basic SELECT Statement with WHERE
DESCRIPTION: Demonstrates how to create a basic SELECT statement using the `select` function, targeting a mapped ORM class (`User`) and applying a filtering condition using the `where` method based on a mapped attribute (`User.name`). This statement object can then be executed.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/queryguide/select.rst#_snippet_0

LANGUAGE: python
CODE:
```
from sqlalchemy import select
stmt = select(User).where(User.name == "spongebob")
```

----------------------------------------

TITLE: Combining WHERE Conditions with AND/OR (ORM)
DESCRIPTION: Illustrates using the `sqlalchemy.and_` and `sqlalchemy.or_` functions to create complex WHERE clauses with ORM entities. Shows how these translate to SQL parentheses.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/tutorial/data_select.rst#_snippet_28

LANGUAGE: Python
CODE:
```
from sqlalchemy import and_, or_
print(
    select(Address.email_address).where(
        and_(
            or_(User.name == "squidward", User.name == "sandy"),
            Address.user_id == User.id,
        )
    )
)
```

LANGUAGE: SQL
CODE:
```
SELECT address.email_address
FROM address, user_account
WHERE (user_account.name = :name_1 OR user_account.name = :name_2)
AND address.user_id = user_account.id
```

----------------------------------------

TITLE: Defining Client-Invoked SQL Expression Defaults - SQLAlchemy Python
DESCRIPTION: This snippet illustrates using SQL expressions with `func` and `select` as column defaults for INSERT (`default`) and UPDATE (`onupdate`). `func.now()` and `select(...)` are used for INSERT defaults, while `func.utc_timestamp()` is used for an UPDATE default. SQLAlchemy renders these expressions inline.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/core/defaults.rst#_snippet_5

LANGUAGE: Python
CODE:
```
t = Table(
    "mytable",
    metadata_obj,
    Column("id", Integer, primary_key=True),
    # define 'create_date' to default to now()
    Column("create_date", DateTime, default=func.now()),
    # define 'key' to pull its default from the 'keyvalues' table
    Column(
        "key",
        String(20),
        default=select(keyvalues.c.key).where(keyvalues.c.type="type1"),
    ),
    # define 'last_modified' to use the current_timestamp SQL function on update
    Column("last_modified", DateTime, onupdate=func.utc_timestamp()),
)
```

----------------------------------------

TITLE: SQLAlchemy: 2.0 Recommended 'Commit As You Go' Block
DESCRIPTION: Shows an alternative SQLAlchemy 2.0 pattern for executing statements and committing changes within a connection checkout using a nested `with conn.begin():` block, providing transaction demarcation without relying on autobegin.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_20.rst#_snippet_24

LANGUAGE: Python
CODE:
```
# "commit as you go" but with a transaction block instead of autobegin
with engine.connect() as conn:
    with conn.begin():
        result = conn.execute(stmt)
```

----------------------------------------

TITLE: Defining Reusable Annotated Column Types in SQLAlchemy
DESCRIPTION: This snippet defines reusable `Annotated` types (`intpk`, `timestamp`, `required_name`) that encapsulate full `mapped_column` configurations. These types allow pre-configuring primary keys, timestamps with server defaults, and string columns with specific lengths and nullability, promoting reusability across ORM models.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/declarative_tables.rst#_snippet_37

LANGUAGE: Python
CODE:
```
import datetime

from typing_extensions import Annotated

from sqlalchemy import func
from sqlalchemy import String
from sqlalchemy.orm import mapped_column


intpk = Annotated[int, mapped_column(primary_key=True)]
timestamp = Annotated[
    datetime.datetime,
    mapped_column(nullable=False, server_default=func.CURRENT_TIMESTAMP()),
]
required_name = Annotated[str, mapped_column(String(30), nullable=False)]
```

----------------------------------------

TITLE: Using SQLAlchemy ORM Nested Transactions for Skipping Duplicates (IntegrityError)
DESCRIPTION: Demonstrates using `session.begin_nested()` with a specific exception handler (`IntegrityError`). This is a common pattern for gracefully handling unique constraint violations or duplicate keys by rolling back only the failed insert/update within the nested transaction, allowing the outer transaction to commit successfully with the valid records.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/session_transaction.rst#_snippet_9

LANGUAGE: Python
CODE:
```
from sqlalchemy import exc

with session.begin():
    for record in records:
        try:
            with session.begin_nested():
                obj = SomeRecord(id=record["identifier"], name=record["name"])
                session.add(obj)
        except exc.IntegrityError:
            print(f"Skipped record {record} - row already exists")
```

----------------------------------------

TITLE: Execute ORM Select with Joined Load in SQLAlchemy
DESCRIPTION: Demonstrates executing a select statement against an ORM entity (User) using the session.execute method, applying a joined load option for the 'addresses' relationship and ordering the results. This is the modern SQLAlchemy 2.0 approach.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_20.rst#_snippet_67

LANGUAGE: python
CODE:
```
session.execute(select(User).options(joinedload(User.addresses)).order_by(User.id))
.unique()
.all()
```

----------------------------------------

TITLE: Defining ORM Relationship with Callable back_populates in Python
DESCRIPTION: This Python snippet illustrates the new capability in SQLAlchemy 2.1 allowing the `back_populates` parameter of an ORM relationship to accept a callable (specifically a lambda). This provides an alternative to direct attribute references, which can be helpful for IDE linting and type checking, especially when defining relationships before the target attribute exists.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_21.rst#_snippet_1

LANGUAGE: python
CODE:
```
class A(Base):
    __tablename__ = "a"

    id: Mapped[int] = mapped_column(primary_key=True)

    # use a lambda: to link to B.a directly when it exists
    bs: Mapped[list[B]] = relationship(back_populates=lambda: B.a)


class B(Base):
    __tablename__ = "b"
    id: Mapped[int] = mapped_column(primary_key=True)
    a_id: Mapped[int] = mapped_column(ForeignKey("a.id"))

    # A.bs already exists, so can link directly
    a: Mapped[A] = relationship(back_populates=A.bs)
```

----------------------------------------

TITLE: Filter and Fetch First Object (SQLAlchemy 2.0)
DESCRIPTION: Presents the 2.0 style for filtering results using `select` with `filter_by`, limiting to one result, and fetching the first object using `.first()` on the scalar result object. Returns `None` if no results are found. Requires a configured SQLAlchemy session, mapped User class, and the `select` function.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_20.rst#_snippet_44

LANGUAGE: Python
CODE:
```
session.scalars(
  select(User).
  filter_by(name="some user").
  limit(1)
).first()
```

----------------------------------------

TITLE: Executing Statement within Transaction Block - SQLAlchemy Core Python
DESCRIPTION: Demonstrates the recommended explicit transaction pattern in SQLAlchemy 2.0 Core using the `engine.begin()` context manager. This ensures all operations within the block are part of a single transaction, which is automatically committed upon successful exit or rolled back on error. Requires an `engine` object and a `conn` object obtained from `engine.begin()`.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_20.rst#_snippet_14

LANGUAGE: Python
CODE:
```
with engine.begin() as conn:
    conn.execute(some_table.insert().values(foo="bar"))
```

----------------------------------------

TITLE: Defining Table with Inline and External Indexes (Python/SQL)
DESCRIPTION: This snippet demonstrates defining a database table using SQLAlchemy's `Table` object. It includes `Column` definitions with the `index=True` and `unique=True` arguments for inline index creation. It also demonstrates defining composite and unique composite indexes externally using the `Index` object, referencing columns via `mytable.c`. The accompanying SQL shows the generated DDL for creating the table and all defined indexes.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/core/constraints.rst#_snippet_31

LANGUAGE: python
CODE:
```
metadata_obj = MetaData()
mytable = Table(
    "mytable",
    metadata_obj,
    # an indexed column, with index "ix_mytable_col1"
    Column("col1", Integer, index=True),
    # a uniquely indexed column with index "ix_mytable_col2"
    Column("col2", Integer, index=True, unique=True),
    Column("col3", Integer),
    Column("col4", Integer),
    Column("col5", Integer),
    Column("col6", Integer),
)

# place an index on col3, col4
Index("idx_col34", mytable.c.col3, mytable.c.col4)

# place a unique index on col5, col6
Index("myindex", mytable.c.col5, mytable.c.col6, unique=True)

mytable.create(engine)
```

LANGUAGE: sql
CODE:
```
CREATE TABLE mytable (
    col1 INTEGER,
    col2 INTEGER,
    col3 INTEGER,
    col4 INTEGER,
    col5 INTEGER,
    col6 INTEGER
)
CREATE INDEX ix_mytable_col1 ON mytable (col1)
CREATE UNIQUE INDEX ix_mytable_col2 ON mytable (col2)
CREATE UNIQUE INDEX myindex ON mytable (col5, col6)
CREATE INDEX idx_col34 ON mytable (col3, col4)
```

----------------------------------------

TITLE: Executing a Textual SQL Query with Connection (Python)
DESCRIPTION: Illustrates how to obtain a connection from the engine using a context manager, execute a raw SQL query wrapped in `text()`, and fetch rows from the result. The connection is automatically released back to the pool upon exiting the `with` block.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/core/connections.rst#_snippet_1

LANGUAGE: python
CODE:
```
from sqlalchemy import text

with engine.connect() as connection:
    result = connection.execute(text("select username from users"))
    for row in result:
        print("username:", row.username)
```

----------------------------------------

TITLE: Modern Session Get Method in SQLAlchemy 2.0
DESCRIPTION: Shows the recommended way to retrieve an object by primary key in SQLAlchemy 1.4 / 2.0 using the get() method directly on the Session object. This method is preferred over the legacy Query.get().
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_20.rst#_snippet_70

LANGUAGE: python
CODE:
```
# 1.4 / 2.0 cross-compatible use
user_obj = session.get(User, 5)
```

----------------------------------------

TITLE: Defining Nullable Many-to-One (Annotated Declarative) - Python
DESCRIPTION: This example shows how to configure a Many-to-One relationship that can be nullable using annotated Declarative. Both the foreign key column and the relationship attribute are explicitly typed using Optional[] from the typing module.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/basic_relationships.rst#_snippet_7

LANGUAGE: Python
CODE:
```
from typing import Optional


class Parent(Base):
    __tablename__ = "parent_table"

    id: Mapped[int] = mapped_column(primary_key=True)
    child_id: Mapped[Optional[int]] = mapped_column(ForeignKey("child_table.id"))
    child: Mapped[Optional["Child"]] = relationship(back_populates="parents")


class Child(Base):
    __tablename__ = "child_table"

    id: Mapped[int] = mapped_column(primary_key=True)
    parents: Mapped[List["Parent"]] = relationship(back_populates="child")
```

----------------------------------------

TITLE: Cleaning Up SQLAlchemy Session and Connection Python
DESCRIPTION: This snippet shows typical cleanup operations in SQLAlchemy. It closes a database session using `session.close()` and then closes the underlying connection using `conn.close()`. The `ROLLBACK` output indicates that the connection was likely in a transaction that was rolled back upon closure. This snippet is often used in setup or teardown routines for examples or tests.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/queryguide/api.rst#_snippet_14

LANGUAGE: Python
CODE:
```
>>> session.close()
>>> conn.close()
ROLLBACK
```

----------------------------------------

TITLE: Defining One-to-Many with Nullability using Mapped | None - Python
DESCRIPTION: This snippet demonstrates defining a One-to-Many relationship where the 'many' side (Child) can be nullable using Python 3.10+ `| None` syntax with `Mapped`. It shows how the ORM handles nullable foreign keys for relationships.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/basic_relationships.rst#_snippet_8

LANGUAGE: python
CODE:
```
from __future__ import annotations


class Parent(Base):
    __tablename__ = "parent_table"

    id: Mapped[int] = mapped_column(primary_key=True)
    child_id: Mapped[int | None] = mapped_column(ForeignKey("child_table.id"))
    child: Mapped[Child | None] = relationship(back_populates="parents")


class Child(Base):
    __tablename__ = "child_table"

    id: Mapped[int] = mapped_column(primary_key=True)
    parents: Mapped[List[Parent]] = relationship(back_populates="child")
```

----------------------------------------

TITLE: Ordering Results Descending (ORM) - SQLAlchemy
DESCRIPTION: Shows how to order results in descending order using the desc() modifier on an ORM-mapped attribute. It selects from the User entity and orders by the fullname attribute in descending order.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/tutorial/data_select.rst#_snippet_40

LANGUAGE: Python
CODE:
```
print(select(User).order_by(User.fullname.desc()))
```

LANGUAGE: SQL
CODE:
```
SELECT user_account.id, user_account.name, user_account.fullname
FROM user_account ORDER BY user_account.fullname DESC
```

----------------------------------------

TITLE: Loading ORM Object by Primary Key in SQLAlchemy
DESCRIPTION: Loads a User object from the database using the Session's `get` method, which retrieves the object by its primary key. Shows the corresponding SQL query executed.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/tutorial/orm_data_manipulation.rst#_snippet_17

LANGUAGE: pycon+sql
CODE:
```
>>> patrick = session.get(User, 3)
{execsql}SELECT user_account.id AS user_account_id, user_account.name AS user_account_name,
user_account.fullname AS user_account_fullname
FROM user_account
WHERE user_account.id = ?
[...] (3,)
```

----------------------------------------

TITLE: Executing ORM Update with Statement Options (Python)
DESCRIPTION: Shows how to execute an ORM update statement using `session.execute` where the `synchronize_session` option is bundled directly with the statement itself using the `.execution_options()` method.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/queryguide/dml.rst#_snippet_27

LANGUAGE: Python
CODE:
```
from sqlalchemy import update
stmt = (
    update(User)
    .where(User.name == "squidward")
    .values(fullname="Squidward Tentacles")
    .execution_options(synchronize_session=False)
)
session.execute(stmt)
```

----------------------------------------

TITLE: Creating SQLAlchemy SQLite Engine and Schema (Python)
DESCRIPTION: Initializes a SQLAlchemy `create_engine` targeting an in-memory SQLite database (`"sqlite://"`). The `echo=True` parameter is set to display SQL commands executed. It then uses `Base.metadata.create_all()` to generate the database table(s) corresponding to the ORM models defined in the `Base.metadata`. Requires a defined `Base` with mapped classes.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/queryguide/_single_inheritance.rst#_snippet_1

LANGUAGE: python
CODE:
```
engine = create_engine("sqlite://", echo=True)

Base.metadata.create_all(engine)
```

----------------------------------------

TITLE: Checking IS NULL Operator SQLAlchemy Python
DESCRIPTION: Demonstrates using the `.is_()` method with Python's `None`. This is the standard way to generate the SQL `IS NULL` expression for checking null values.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/core/operators.rst#_snippet_16

LANGUAGE: Python
CODE:
```
print(column("x").is_(None))
```

----------------------------------------

TITLE: SQLAlchemy Select.join() with ORM Relationships
DESCRIPTION: Shows how the SQLAlchemy 2.0 `select().join()` method can be used with ORM entities and their defined relationships, simplifying joins based on ORM mapping information.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_14.rst#_snippet_19

LANGUAGE: Python
CODE:
```
stmt = select(User).join(User.addresses)
```

----------------------------------------

TITLE: Join and Filter Related Objects (SQLAlchemy 2.0)
DESCRIPTION: Presents the 2.0 style for joining a related table using `select` with `.join()` and filtering using `.where()` based on an attribute of the joined table, then fetching all scalar results. Requires a configured SQLAlchemy session, mapped User and Address classes, and the `select` function.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_20.rst#_snippet_48

LANGUAGE: Python
CODE:
```
session.execute(
  select(User).
  join(Address).
  where(
    Address.email == "e@sa.us"
  )
).scalars().all()
```

----------------------------------------

TITLE: Demonstrating SQLAlchemy Session Rollback Error - Python
DESCRIPTION: This Python snippet demonstrates a common SQLAlchemy Session error. It shows adding duplicate data to trigger a constraint violation during the first commit attempt, catching the exception without rolling back, and then attempting another commit, which will fail because the session's transaction is already in an aborted state.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/faq/sessions.rst#_snippet_0

LANGUAGE: Python
CODE:
```
from sqlalchemy import create_engine, Column, Integer
from sqlalchemy.orm import sessionmaker
from sqlalchemy.ext.declarative import declarative_base

Base = declarative_base(create_engine("sqlite://"))


class Foo(Base):
    __tablename__ = "foo"
    id = Column(Integer, primary_key=True)


Base.metadata.create_all()

session = sessionmaker()()

# constraint violation
session.add_all([Foo(id=1), Foo(id=1)])

try:
    session.commit()
except:
    # ignore error
    pass

# continue using session without rolling back
session.commit()
```

----------------------------------------

TITLE: Defining Declarative Mapped Class in SQLAlchemy
DESCRIPTION: Defines a basic mapped class `User` using SQLAlchemy's Declarative style. It inherits from `DeclarativeBase` and defines mapped columns using type annotations with `Mapped` and `mapped_column`. This setup allows SQLAlchemy to automatically map the class to a database table named "user". This requires the SQLAlchemy ORM components.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/mapping_styles.rst#_snippet_3

LANGUAGE: Python
CODE:
```
from sqlalchemy.orm import DeclarativeBase
from sqlalchemy.orm import Mapped
from sqlalchemy.orm import mapped_column

class Base(DeclarativeBase):
    pass


class User(Base):
    __tablename__ = "user"

    id: Mapped[int] = mapped_column(primary_key=True)
    name: Mapped[str]
    fullname: Mapped[str]
```

----------------------------------------

TITLE: Use text() for Arbitrary Expression in SQLAlchemy ORDER BY in Python
DESCRIPTION: Demonstrates how to explicitly use the `text()` construct when providing an arbitrary SQL expression (not a simple column or label reference) to methods like `order_by()`, ensuring clarity and avoiding warnings.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_10.rst#_snippet_102

LANGUAGE: Python
CODE:
```
stmt = select([users]).order_by(text("some special expression"))
```

----------------------------------------

TITLE: Defining Bidirectional Many-to-Many using Association Table - Python
DESCRIPTION: This example shows how to configure a bidirectional Many-to-Many relationship. Both sides of the relationship define a collection type (Mapped[List[...]]) and reference the same association table via the `secondary` parameter, using `back_populates` to link the two sides.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/basic_relationships.rst#_snippet_15

LANGUAGE: python
CODE:
```
from __future__ import annotations

    from sqlalchemy import Column
    from sqlalchemy import Table
    from sqlalchemy import ForeignKey
    from sqlalchemy import Integer
    from sqlalchemy.orm import Mapped
    from sqlalchemy.orm import mapped_column
    from sqlalchemy.orm import DeclarativeBase
    from sqlalchemy.orm import relationship


    class Base(DeclarativeBase):
        pass


    association_table = Table(
        "association_table",
        Base.metadata,
        Column("left_id", ForeignKey("left_table.id"), primary_key=True),
        Column("right_id", ForeignKey("right_table.id"), primary_key=True),
    )


    class Parent(Base):
        __tablename__ = "left_table"

        id: Mapped[int] = mapped_column(primary_key=True)
        children: Mapped[List[Child]] = relationship(
            secondary=association_table, back_populates="parents"
        )


    class Child(Base):
        __tablename__ = "right_table"

        id: Mapped[int] = mapped_column(primary_key=True)
        parents: Mapped[List[Parent]] = relationship(
            secondary=association_table, back_populates="children"
        )
```

----------------------------------------

TITLE: Accessing Columns by Key with mappings() Modifier (Future) - SQLAlchemy Python
DESCRIPTION: Shows a future usage pattern (using sqlalchemy.future) where the mappings() modifier is applied directly to the result object, allowing iteration over dictionary-like rows and accessing columns by key.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_14.rst#_snippet_49

LANGUAGE: Python
CODE:
```
# using sqlalchemy.future package
for row in result.mappings():
    row["id"]
```

----------------------------------------

TITLE: Creating SQLAlchemy Engine - Python
DESCRIPTION: Creates a SQLAlchemy Engine object, which acts as a central source of database connections. It is configured using a database URL string and enables SQL echoing to standard output via the `echo=True` parameter for debugging purposes. This example connects to an in-memory SQLite database.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/tutorial/engine.rst#_snippet_0

LANGUAGE: Python
CODE:
```
>>> from sqlalchemy import create_engine
>>> engine = create_engine("sqlite+pysqlite:///:memory:", echo=True)
```

----------------------------------------

TITLE: ORM Annotated Declarative Class Definition with `Mapped` and `mapped_column`
DESCRIPTION: Presents a complete example of a Declarative class using `Mapped` type annotations and `mapped_column` to define columns, demonstrating how column configuration can be derived from type hints.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/declarative_tables.rst#_snippet_18

LANGUAGE: Python
CODE:
```
from sqlalchemy import String
from sqlalchemy.orm import DeclarativeBase
from sqlalchemy.orm import Mapped
from sqlalchemy.orm import mapped_column


class Base(DeclarativeBase):
    pass


class User(Base):
    __tablename__ = "user"

    id: Mapped[int] = mapped_column(primary_key=True)
    name: Mapped[str] = mapped_column(String(50))
    fullname: Mapped[str | None]
    nickname: Mapped[str | None] = mapped_column(String(30))
```

----------------------------------------

TITLE: Nested Context Managers for Session and Transaction - SQLAlchemy ORM - Python
DESCRIPTION: Shows a more succinct way to manage a session and transaction using nested Python with statements. The inner with session.begin(): block handles the commit/rollback logic automatically upon exiting.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/session_basics.rst#_snippet_2

LANGUAGE: Python
CODE:
```
with Session(engine) as session:
    with session.begin():
        session.add(some_object)
        session.add(some_other_object)
    # inner context calls session.commit(), if there were no exceptions
```

----------------------------------------

TITLE: Applying SQLAlchemy Selectin Load Option (Python)
DESCRIPTION: This Python snippet illustrates how to apply the `selectinload` loader strategy using the `select.options` method. This strategy causes SQLAlchemy to issue a separate SELECT query after the main query to load the `addresses` collection for all fetched `User` objects, avoiding the N+1 problem for collection access.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/tutorial/orm_related_objects.rst#_snippet_13

LANGUAGE: python
CODE:
```
for user_obj in session.execute(
 select(User).options(selectinload(User.addresses))
 ).scalars():
 user_obj.addresses # access addresses collection already loaded
```

----------------------------------------

TITLE: Defining SQLAlchemy Table with String and Integer Types - Python
DESCRIPTION: Demonstrates the basic usage of 'CamelCase' SQLAlchemy types (`Integer`, `String`) to define columns within a `Table` object associated with `MetaData`. Shows how to specify column names, types, primary keys, and optional type arguments like string length.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/core/type_basics.rst#_snippet_0

LANGUAGE: Python
CODE:
```
from sqlalchemy import MetaData
from sqlalchemy import Table, Column, Integer, String

metadata_obj = MetaData()

user = Table(
    "user",
    metadata_obj,
    Column("user_name", String, primary_key=True),
    Column("email_address", String(60)),
)
```

----------------------------------------

TITLE: Using Many-to-Many Relationship Python
DESCRIPTION: Provides a practical example of creating ORM objects (Project, Employee) and establishing a many-to-many link between them by adding Employee objects to the `employees` collection on the Project instance.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/glossary.rst#_snippet_24

LANGUAGE: python
CODE:
```
proj = Project(name="Client A")

emp1 = Employee(name="emp1")
emp2 = Employee(name="emp2")

proj.employees.extend([emp1, emp2])
```

----------------------------------------

TITLE: Adding New Objects to SQLAlchemy Session in Python
DESCRIPTION: Shows how to create new mapped objects and add them individually to the SQLAlchemy Session using `session.add()`. The changes are persisted to the database upon calling `session.commit()`. Requires a `session` object and mapped object instances.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/session_basics.rst#_snippet_8

LANGUAGE: Python
CODE:
```
user1 = User(name="user1")
user2 = User(name="user2")
session.add(user1)
session.add(user2)

session.commit()  # write changes to the database
```

----------------------------------------

TITLE: Adding ORM Objects to Session (Python)
DESCRIPTION: Adds transient 'User' objects ('squidward', 'krabs') to the ORM 'Session'. This transitions the objects to a 'pending' state, marking them for potential insertion during the next flush.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/tutorial/orm_data_manipulation.rst#_snippet_3

LANGUAGE: Python
CODE:
```
session.add(squidward)
session.add(krabs)
```

----------------------------------------

TITLE: Performing LEFT OUTER JOIN - SQLAlchemy
DESCRIPTION: Shows how to perform a LEFT OUTER JOIN using the join method with the isouter=True keyword argument. It selects from user_table and performs a left outer join with address_table.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/tutorial/data_select.rst#_snippet_37

LANGUAGE: Python
CODE:
```
print(select(user_table).join(address_table, isouter=True))
```

LANGUAGE: SQL
CODE:
```
SELECT user_account.id, user_account.name, user_account.fullname
FROM user_account LEFT OUTER JOIN address ON user_account.id = address.user_id
```

----------------------------------------

TITLE: Using sessionmaker.begin() for Session and Transaction - SQLAlchemy ORM - Python
DESCRIPTION: Shows how to use the begin() method directly on a sessionmaker factory. This method returns a session object that also acts as a context manager, automatically handling the transaction commit/rollback and session closing upon exiting the with block.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/session_basics.rst#_snippet_5

LANGUAGE: Python
CODE:
```
from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker

# an Engine, which the Session will use for connection
# resources
engine = create_engine("postgresql+psycopg2://scott:tiger@localhost/")

# a sessionmaker(), also in the same scope as the engine
Session = sessionmaker(engine)

# we can now construct a Session() and include begin()/commit()/rollback()
# at once
with Session.begin() as session:
    session.add(some_object)
    session.add(some_other_object)
# commits the transaction, closes the session
```

----------------------------------------

TITLE: Declarative Mixin with Annotated Attributes (Python)
DESCRIPTION: This example shows a `TimestampMixin` using annotated attributes with `Mapped` and `mapped_column` to define `created_at` (with a default timestamp) and `updated_at` columns. This form allows type hints and explicit column mapping within the mixin, which are then copied to inheriting Declarative classes.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/declarative_mixins.rst#_snippet_6

LANGUAGE: Python
CODE:
```
class TimestampMixin:
    created_at: Mapped[datetime] = mapped_column(default=func.now())
    updated_at: Mapped[datetime]
```

----------------------------------------

TITLE: Using SQLAlchemy ORM sessionmaker.begin() Context Manager
DESCRIPTION: Shows how to use the begin() method of a sessionmaker as a context manager. This pattern creates a session, begins a transaction, and automatically commits or rolls back upon exiting the with block. It demonstrates adding an object within the transaction.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_20.rst#_snippet_6

LANGUAGE: Python
CODE:
```
from sqlalchemy.orm import sessionmaker

Session = sessionmaker(engine)

with Session.begin() as session:
    session.add(MyObject())
```

----------------------------------------

TITLE: Selecting Full ORM Entity - SQLAlchemy Python
DESCRIPTION: Shows how to create a SELECT statement targeting an entire ORM entity class (e.g., `User`). When executed with `Session.execute`, this returns rows where the entity instance is the single element.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/tutorial/data_select.rst#_snippet_6

LANGUAGE: Python
CODE:
```
print(select(User))
```

----------------------------------------

TITLE: Combined Context Managers for Session and Transaction - SQLAlchemy ORM - Python
DESCRIPTION: Demonstrates the most concise way to manage a session and transaction using a single Python with statement that combines the session and the transaction context managers. The transaction is automatically committed or rolled back upon exiting the with block.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/session_basics.rst#_snippet_3

LANGUAGE: Python
CODE:
```
with Session(engine) as session, session.begin():
        session.add(some_object)
        session.add(some_other_object)
    # inner context calls session.commit(), if there were no exceptions
    # outer context calls session.close()
```

----------------------------------------

TITLE: Mapping Dataclasses with SQLAlchemy ORM 2.0
DESCRIPTION: This snippet demonstrates defining SQLAlchemy ORM models as Python dataclasses using the MappedAsDataclass mixin. It utilizes 2.0 declarative features like Mapped, mapped_column, and Annotated type aliases for columns and relationships, showing how to configure dataclass-specific arguments like init, default, and default_factory.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/whatsnew_20.rst#_snippet_20

LANGUAGE: Python
CODE:
```
    from typing_extensions import Annotated
    from typing import List
    from typing import Optional
    from sqlalchemy import ForeignKey
    from sqlalchemy import String
    from sqlalchemy.orm import DeclarativeBase
    from sqlalchemy.orm import Mapped
    from sqlalchemy.orm import MappedAsDataclass
    from sqlalchemy.orm import mapped_column
    from sqlalchemy.orm import relationship


    class Base(MappedAsDataclass, DeclarativeBase):
        """subclasses will be converted to dataclasses"""


    intpk = Annotated[int, mapped_column(primary_key=True)]
    str30 = Annotated[str, mapped_column(String(30))]
    user_fk = Annotated[int, mapped_column(ForeignKey("user_account.id"))]


    class User(Base):
        __tablename__ = "user_account"

        id: Mapped[intpk] = mapped_column(init=False)
        name: Mapped[str30]
        fullname: Mapped[Optional[str]] = mapped_column(default=None)
        addresses: Mapped[List["Address"]] = relationship(
            back_populates="user", default_factory=list
        )


    class Address(Base):
        __tablename__ = "address"

        id: Mapped[intpk] = mapped_column(init=False)
        email_address: Mapped[str]
        user_id: Mapped[user_fk] = mapped_column(init=False)
        user: Mapped["User"] = relationship(back_populates="addresses", default=None)
```

----------------------------------------

TITLE: Fetch with Contains Eager Loading (SQLAlchemy 2.0)
DESCRIPTION: Presents the 2.0 style for fetching objects with "contains eager" loading using `select` with `options(contains_eager(...))` and applying `populate_existing=True` via `execution_options()`, then fetching all scalar results. Requires a configured SQLAlchemy session, mapped User class, and the `select` and `contains_eager` functions.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_20.rst#_snippet_52

LANGUAGE: Python
CODE:
```
session.execute(
  select(User)
  .join(User.addresses)
  .options(
    contains_eager(User.addresses)
  )
  .execution_options(
      populate_existing=True
  )
).scalars().all()
```

----------------------------------------

TITLE: Using SQLAlchemy ORM Nested Transactions for Error Handling
DESCRIPTION: Provides an example of using `session.begin_nested()` within a loop and a try/except block. This pattern allows processing a list of items where individual item failures (caught within the nested transaction) trigger a rollback of only that item's changes, allowing the loop and outer transaction to continue.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/session_transaction.rst#_snippet_8

LANGUAGE: Python
CODE:
```
for record in records:
    try:
        with session.begin_nested():
            session.merge(record)
    except:
        print("Skipped record %s" % record)
session.commit()
```

----------------------------------------

TITLE: Committing SQLAlchemy Session Transaction (Python/SQL)
DESCRIPTION: Shows how calling `session.commit()` finalizes the current transaction, making all pending changes permanent in the database. Includes the resulting SQL COMMIT statement.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/tutorial/orm_data_manipulation.rst#_snippet_9

LANGUAGE: Python
CODE:
```
>>> session.commit()
```

LANGUAGE: SQL
CODE:
```
COMMIT
```

----------------------------------------

TITLE: Declaring a Table with mapped_column() in SQLAlchemy ORM
DESCRIPTION: This example demonstrates how to define a mapped class (`User`) using `__tablename__` to specify the table name and `mapped_column()` to define individual columns. Each `mapped_column()` call corresponds to a database column, specifying its type, primary key status, and nullability.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/declarative_tables.rst#_snippet_1

LANGUAGE: Python
CODE:
```
from sqlalchemy import Integer, String
from sqlalchemy.orm import DeclarativeBase
from sqlalchemy.orm import mapped_column


class Base(DeclarativeBase):
    pass


class User(Base):
    __tablename__ = "user"

    id = mapped_column(Integer, primary_key=True)
    name = mapped_column(String(50), nullable=False)
    fullname = mapped_column(String)
    nickname = mapped_column(String(30))
```

----------------------------------------

TITLE: Updating and Inserting ORM Objects with Session Commit - Python/SQL
DESCRIPTION: Shows how the SQLAlchemy ORM tracks changes made to objects loaded into a Session. It demonstrates fetching an object, appending a new related object to a collection (triggering a lazy load), modifying an existing object's attribute, and finally committing the session to persist changes as UPDATE and INSERT statements.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/quickstart.rst#_snippet_6

LANGUAGE: python
CODE:
```
stmt = select(User).where(User.name == "patrick")
patrick = session.scalars(stmt).one()

patrick.addresses.append(Address(email_address="patrickstar@sqlalchemy.org"))

sandy_address.email_address = "sandy_cheeks@sqlalchemy.org"

session.commit()
```

LANGUAGE: sql
CODE:
```
{execsql}SELECT user_account.id, user_account.name, user_account.fullname
FROM user_account
WHERE user_account.name = ?
[...] ('patrick',){stop}

{execsql}SELECT address.id AS address_id, address.email_address AS address_email_address, address.user_id AS address_user_id
FROM address
WHERE ? = address.user_id
[...] (3,){stop}

{execsql}UPDATE address SET email_address=? WHERE address.id = ?
[...] ('sandy_cheeks@sqlalchemy.org', 2)
INSERT INTO address (email_address, user_id) VALUES (?, ?)
[...] ('patrickstar@sqlalchemy.org', 3)
COMMIT
{stop}
```

----------------------------------------

TITLE: Creating Basic DeclarativeBase Class (SQLAlchemy, Python)
DESCRIPTION: This snippet shows the most common way to create a Declarative Base class in modern SQLAlchemy by subclassing the `DeclarativeBase` superclass. This base class serves as the parent for all mapped ORM classes.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/declarative_styles.rst#_snippet_0

LANGUAGE: Python
CODE:
```
from sqlalchemy.orm import DeclarativeBase


# declarative base class
class Base(DeclarativeBase):
    pass
```

----------------------------------------

TITLE: Querying ORM Entities with Select and Session.execute - Python
DESCRIPTION: Demonstrates the SQLAlchemy 2.0 style of querying ORM entities. It uses the `sql.select` construct combined with `Session.execute` to fetch `User` objects. It shows how to filter by attributes and join via relationships. Requires a `Session` initialized with `future=True`.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_14.rst#_snippet_0

LANGUAGE: python
CODE:
```
with Session(engine, future=True) as sess:
    stmt = (
        select(User)
        .where(User.name == "sandy")
        .join(User.addresses)
        .where(Address.email_address.like("%gmail%"))
    )

    result = sess.execute(stmt)

    for user in result.scalars():
        print(user)
```

----------------------------------------

TITLE: Closing a SQLAlchemy ORM Session (Python+SQL)
DESCRIPTION: Demonstrates explicitly closing a SQLAlchemy ORM session using the close() method. This action releases connection resources and rolls back any pending transactions, as indicated by the SQL ROLLBACK command.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/tutorial/orm_data_manipulation.rst#_snippet_27

LANGUAGE: pycon+sql
CODE:
```
>>> session.close()
{execsql}ROLLBACK
```

----------------------------------------

TITLE: Defining Basic ORM Models with Relationship - Python
DESCRIPTION: Defines SQLAlchemy declarative models 'A' and 'B' establishing a one-to-many relationship between them using `relationship` and `ForeignKey`. This serves as a base structure for demonstrating collection manipulation issues.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_13.rst#_snippet_25

LANGUAGE: Python
CODE:
```
class A(Base):
    __tablename__ = "a"

    id = Column(Integer, primary_key=True)
    bs = relationship("B", backref="a")


class B(Base):
    __tablename__ = "b"
    id = Column(Integer, primary_key=True)
    a_id = Column(ForeignKey("a.id"))
```

----------------------------------------

TITLE: Defining Basic One-to-Many (Annotated Declarative) - Python
DESCRIPTION: This example shows a simple, non-bidirectional One-to-Many relationship configuration using annotated Declarative. The foreign key resides on the child table, and the relationship is declared on the parent class to reference a collection of children.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/basic_relationships.rst#_snippet_5

LANGUAGE: Python
CODE:
```
class Parent(Base):
    __tablename__ = "parent_table"

    id: Mapped[int] = mapped_column(primary_key=True)
    children: Mapped[List["Child"]] = relationship()


class Child(Base):
    __tablename__ = "child_table"

    id: Mapped[int] = mapped_column(primary_key=True)
    parent_id: Mapped[int] = mapped_column(ForeignKey("parent_table.id"))
```

----------------------------------------

TITLE: Setting up SQLAlchemy Models and Fixture Data
DESCRIPTION: Defines SQLAlchemy declarative models User and Book with relationships, sets up an in-memory SQLite database engine and session, creates the tables based on the model metadata, and populates these tables with sample User and Book data.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/queryguide/_deferred_setup.rst#_snippet_0

LANGUAGE: python
CODE:
```
>>> from typing import List
>>> from typing import Optional
>>>
>>> from sqlalchemy import Column
>>> from sqlalchemy import create_engine
>>> from sqlalchemy import ForeignKey
>>> from sqlalchemy import LargeBinary
>>> from sqlalchemy import Table
>>> from sqlalchemy import Text
>>> from sqlalchemy.orm import DeclarativeBase
>>> from sqlalchemy.orm import Mapped
>>> from sqlalchemy.orm import mapped_column
>>> from sqlalchemy.orm import relationship
>>> from sqlalchemy.orm import Session
>>>
>>>
>>> class Base(DeclarativeBase):
...     pass
>>> class User(Base):
...     __tablename__ = "user_account"
...     id: Mapped[int] = mapped_column(primary_key=True)
...     name: Mapped[str]
...     fullname: Mapped[Optional[str]]
...     books: Mapped[List["Book"]] = relationship(back_populates="owner")
...
...     def __repr__(self) -> str:
...         return f"User(id={self.id!r}, name={self.name!r}, fullname={self.fullname!r})"
>>> class Book(Base):
...     __tablename__ = "book"
...     id: Mapped[int] = mapped_column(primary_key=True)
...     owner_id: Mapped[int] = mapped_column(ForeignKey("user_account.id"))
...     title: Mapped[str]
...     summary: Mapped[str] = mapped_column(Text)
...     cover_photo: Mapped[bytes] = mapped_column(LargeBinary)
...     owner: Mapped["User"] = relationship(back_populates="books")
...
...     def __repr__(self) -> str:
...         return f"Book(id={self.id!r}, title={self.title!r})"
>>> engine = create_engine("sqlite+pysqlite:///:memory:", echo=True)
>>> Base.metadata.create_all(engine)
BEGIN ...
>>> conn = engine.connect()
>>> session = Session(conn)
>>> session.add_all(
...     [
...         User(
...             name="spongebob",
...             fullname="Spongebob Squarepants",
...             books=[
...                 Book(
...                     title="100 Years of Krabby Patties",
...                     summary="some long summary",
...                     cover_photo=b"binary_image_data",
...                 ),
...                 Book(
...                     title="Sea Catch 22",
...                     summary="another long summary",
...                     cover_photo=b"binary_image_data",
...                 ),
...                 Book(
...                     title="The Sea Grapes of Wrath",
...                     summary="yet another summary",
...                     cover_photo=b"binary_image_data",
...                 ),
...             ],
...         ),
...         User(
...             name="sandy",
...             fullname="Sandy Cheeks",
...             books=[
...                 Book(
...                     title="A Nut Like No Other",
...                     summary="some long summary",
...                     cover_photo=b"binary_image_data",
...                 ),
...                 Book(
...                     title="Geodesic Domes: A Retrospective",
...                     summary="another long summary",
...                     cover_photo=b"binary_image_data",
...                 ),
...                 Book(
...                     title="Rocketry for Squirrels",
...                     summary="yet another summary",
...                     cover_photo=b"binary_image_data",
...                 ),
...             ],
...         ),
...     ]
... )
>>> session.commit()
BEGIN ... COMMIT
>>> session.close()
>>> conn.begin()
BEGIN ...
```

----------------------------------------

TITLE: Building WHERE with AND/OR Functions - Python/SQLAlchemy
DESCRIPTION: Demonstrates using `sqlalchemy.and_` and `sqlalchemy.or_` functions to build a complex WHERE clause within a SQLAlchemy `select` statement. Shows how to combine multiple conditions, including nested OR conditions, using explicit function calls. The resulting SQL query is also provided.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/core/operators.rst#_snippet_19

LANGUAGE: Python
CODE:
```
from sqlalchemy import and_, or_
print(
    select(address_table.c.email_address).where(
        and_(
            or_(user_table.c.name == "squidward", user_table.c.name == "sandy"),
            address_table.c.user_id == user_table.c.id,
        )
    )
)
```

LANGUAGE: SQL
CODE:
```
SELECT address.email_address
FROM address, user_account
WHERE (user_account.name = :name_1 OR user_account.name = :name_2)
AND address.user_id = user_account.id
```

----------------------------------------

TITLE: Querying with Mapped Attributes - SQLAlchemy 1.4/2.0 Core/ORM
DESCRIPTION: Shows equivalent querying, loading, and filtering operations using mapped attributes with the SQLAlchemy 1.4/2.0 style `select` construct and `session.execute`. This is cross-compatible.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_20.rst#_snippet_75

LANGUAGE: Python
CODE:
```
stmt = select(User).join(User.addresses)
result = session.execute(stmt)

stmt = select(User).options(joinedload(User.addresses))
result = session.execute(stmt)

stmt = select(Address).where(with_parent(u1, User.addresses))
result = session.execute(stmt)
```

----------------------------------------

TITLE: Querying with Mapped Attributes - SQLAlchemy 1.x ORM
DESCRIPTION: Demonstrates querying, loading, and filtering using mapped attributes directly with the SQLAlchemy 1.x ORM Query object. This is the recommended modern approach.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_20.rst#_snippet_74

LANGUAGE: Python
CODE:
```
q = session.query(User).join(User.addresses)

q = session.query(User).options(joinedload(User.addresses))

q = session.query(Address).filter(with_parent(u1, User.addresses))
```

----------------------------------------

TITLE: Defining ORM Relationships - SQLAlchemy Python
DESCRIPTION: This snippet shows the Python definition of the `User` and `Address` classes, illustrating the use of `relationship` and `Mapped` to define a bidirectional one-to-many/many-to-one link between them using `back_populates`.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/tutorial/orm_related_objects.rst#_snippet_0

LANGUAGE: Python
CODE:
```
from sqlalchemy.orm import Mapped
from sqlalchemy.orm import relationship


class User(Base):
    __tablename__ = "user_account"

    # ... mapped_column() mappings

    addresses: Mapped[List["Address"]] = relationship(back_populates="user")


class Address(Base):
    __tablename__ = "address"

    # ... mapped_column() mappings

    user: Mapped["User"] = relationship(back_populates="addresses")
```

----------------------------------------

TITLE: Querying with SQLAlchemy Session in Python
DESCRIPTION: Demonstrates two ways to execute queries using the SQLAlchemy Session: fetching mapped objects using `session.scalars()` and fetching individual columns as `Row` objects using `session.execute()`. Requires a `session` object and a `statement` object (created using `select()`).
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/session_basics.rst#_snippet_7

LANGUAGE: Python
CODE:
```
user_obj = session.scalars(statement).all()

# query for individual columns
statement = select(User.name, User.fullname)

# list of Row objects
rows = session.execute(statement).all()
```

----------------------------------------

TITLE: ORM Update with WHERE and RETURNING using session.scalars in SQLAlchemy
DESCRIPTION: Demonstrates performing an ORM update operation using the sqlalchemy.update construct with a where() clause and a returning() clause. The update is executed via session.scalars(), allowing retrieval of the updated ORM entities. It also shows how to use execution options like synchronize_session.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/whatsnew_20.rst#_snippet_27

LANGUAGE: Python
CODE:
```
from sqlalchemy import update
stmt = (
    update(User)
    .where(User.name == "squidward")
    .values(name="spongebob")
    .returning(User)
)
result = session.scalars(stmt, execution_options={"synchronize_session": "fetch"})
print(result.all())
```

----------------------------------------

TITLE: Setting up SQLite Engine and Metadata (Python)
DESCRIPTION: Provides setup code for running the examples, including creating an in-memory SQLite engine, configuring foreign key support via an event listener, and creating all tables defined by the metadata.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/large_collections.rst#_snippet_1

LANGUAGE: Python
CODE:
```
>>> from sqlalchemy import create_engine
>>> from sqlalchemy import event
>>> engine = create_engine("sqlite://", echo=True)
>>> @event.listens_for(engine, "connect")
... def set_sqlite_pragma(dbapi_connection, connection_record):
...     cursor = dbapi_connection.cursor()
...     cursor.execute("PRAGMA foreign_keys=ON")
...     cursor.close()

>>> Base.metadata.create_all(engine)
```

----------------------------------------

TITLE: Creating ORM User Objects (Python)
DESCRIPTION: Demonstrates how to instantiate mapped 'User' objects using keyword arguments corresponding to column names. These objects represent potential rows to be inserted into the database.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/tutorial/orm_data_manipulation.rst#_snippet_0

LANGUAGE: Python
CODE:
```
squidward = User(name="squidward", fullname="Squidward Tentacles")
krabs = User(name="ehkrabs", fullname="Eugene H. Krabs")
```

----------------------------------------

TITLE: Selecting Count using func.count in SQLAlchemy Python
DESCRIPTION: This Python snippet demonstrates how to use SQLAlchemy's `func` object to invoke the SQL `COUNT` aggregate function. It constructs a select statement that counts all rows (`*`) from a specified table, illustrating the basic syntax for integrating standard SQL functions into a SQLAlchemy query expression.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/core/functions.rst#_snippet_0

LANGUAGE: Python
CODE:
```
select(func.count("*")).select_from(some_table)
```

----------------------------------------

TITLE: Declaring SQLAlchemy Table Object - Python
DESCRIPTION: Defines a Table object named 'user_account' within the specified MetaData collection. It includes column definitions ('id', 'name', 'fullname') with their types and constraints (primary key). Dependencies: sqlalchemy.MetaData, sqlalchemy.Table, sqlalchemy.Column, sqlalchemy.Integer, sqlalchemy.String.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/tutorial/metadata.rst#_snippet_1

LANGUAGE: Python
CODE:
```
from sqlalchemy import Table, Column, Integer, String
user_table = Table(
    "user_account",
    metadata_obj,
    Column("id", Integer, primary_key=True),
    Column("name", String(30)),
    Column("fullname", String),
)
```

----------------------------------------

TITLE: Recommended Select and Case Syntax (2.0 Style) - Python
DESCRIPTION: Shows the recommended, generative style for `select` and `case` constructs in SQLAlchemy 1.4+ and 2.0. This involves using generative methods like `.select_from()`, `.where()`, and `.order_by()`, and passing columns and case conditions positionally. This style is cross-compatible with 1.4 and 2.0.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_20.rst#_snippet_31

LANGUAGE: python
CODE:
```
# use generative methods
stmt = select(1).select_from(table).order_by(table.c.id)

# use generative methods
stmt = select(table).where(table.c.id == 5)

# use generative methods
stmt = table.select().where(table.c.id == 5)

# pass columns clause expressions positionally
stmt = select(table.c.x, table.c.y)

# case conditions passed positionally
case_clause = case(
    (table.c.x == 5, "five"), (table.c.x == 7, "seven"), else_="neither five nor seven"
)
```

----------------------------------------

TITLE: Use Annotated for Mapped Column Definitions in SQLAlchemy ORM
DESCRIPTION: Extends the use of `Annotated` to package full `mapped_column` definitions. This example defines `intpk` for primary key integers and `user_fk` for foreign key integers, demonstrating how `Annotated` can include column arguments directly. It then shows how these `Annotated` types are used within ORM mapped classes (`User`, `Address`) alongside the `type_annotation_map` approach.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/whatsnew_20.rst#_snippet_18

LANGUAGE: python
CODE:
```
from typing_extensions import Annotated
from typing import List
from typing import Optional
from sqlalchemy import ForeignKey
from sqlalchemy import String
from sqlalchemy.orm import DeclarativeBase
from sqlalchemy.orm import Mapped
from sqlalchemy.orm import mapped_column
from sqlalchemy.orm import relationship

# declarative base from previous example
str50 = Annotated[str, 50]


class Base(DeclarativeBase):
    type_annotation_map = {
        str50: String(50),
    }


# set up mapped_column() overrides, using whole column styles that are
# expected to be used in multiple places
intpk = Annotated[int, mapped_column(primary_key=True)]
user_fk = Annotated[int, mapped_column(ForeignKey("user_account.id"))]


class User(Base):
    __tablename__ = "user_account"

    id: Mapped[intpk]
    name: Mapped[str50]
    fullname: Mapped[Optional[str]]
    addresses: Mapped[List["Address"]] = relationship(back_populates="user")


class Address(Base):
    __tablename__ = "address"

    id: Mapped[intpk]
    email_address: Mapped[str50]
    user_id: Mapped[user_fk]
    user: Mapped["User"] = relationship(back_populates="addresses")
```

----------------------------------------

TITLE: Defining Type-Aware ORM Mapped Classes
DESCRIPTION: Defines SQLAlchemy ORM mapped classes using the new type-aware syntax introduced in 2.0. Includes relationships and foreign keys, providing type hints for attributes.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/whatsnew_20.rst#_snippet_4

LANGUAGE: Python
CODE:
```
from sqlalchemy.orm import DeclarativeBase
from sqlalchemy.orm import Mapped
from sqlalchemy.orm import mapped_column
from sqlalchemy.orm import relationship
from sqlalchemy import ForeignKey
from typing import List

class Base(DeclarativeBase):
    pass


class User(Base):
    __tablename__ = "user_account"

    id: Mapped[int] = mapped_column(primary_key=True)
    name: Mapped[str]
    addresses: Mapped[List["Address"]] = relationship()


class Address(Base):
    __tablename__ = "address"

    id: Mapped[int] = mapped_column(primary_key=True)
    email_address: Mapped[str]
    user_id = mapped_column(ForeignKey("user_account.id"))
```

----------------------------------------

TITLE: Persisting Related Objects - SQLAlchemy Session - Python
DESCRIPTION: Creates a `User` instance with an associated `Address` instance. Adds the user object to the SQLAlchemy session and commits the transaction, persisting both objects to the database. This establishes an initial state for subsequent examples demonstrating session object management.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/session_state_management.rst#_snippet_9

LANGUAGE: pycon+sql
CODE:
```
>>> u1 = User(name="ed", addresses=[Address(email_address="ed@ed.com")])
>>> session.add(u1)
>>> session.commit()
```

----------------------------------------

TITLE: Using ORM Session with Direct Engine Binding (2.0 Style) - SQLAlchemy Python
DESCRIPTION: Demonstrates the SQLAlchemy 2.0 pattern where the ORM Session or sessionmaker is explicitly passed the Engine object. The Metadata object is no longer bound to the Engine, providing a more direct and explicit connection.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/errors.rst#_snippet_48

LANGUAGE: Python
CODE:
```
engine = create_engine("sqlite://")
Session = sessionmaker(engine)
Base = declarative_base()


class MyClass(Base): ...


session = Session()
session.add(MyClass())
session.commit()
```

----------------------------------------

TITLE: Enabling Pool Pre-Ping (Python)
DESCRIPTION: Shows how to enable pessimistic disconnection detection in the SQLAlchemy connection pool using the `pool_pre_ping` parameter of the `create_engine` function. When set to `True`, this causes the connection pool to test each connection for liveness before returning it for use, preventing errors due to stale connections.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_12.rst#_snippet_21

LANGUAGE: python
CODE:
```
engine = create_engine("mysql+pymysql://", pool_pre_ping=True)
```

----------------------------------------

TITLE: SQLAlchemy Select with New .selected_columns Attribute
DESCRIPTION: Demonstrates the correct SQLAlchemy 2.0 style for referencing columns within the columns clause of a `select()` statement using the new `.selected_columns` attribute. This replaces the problematic use of `.c` on the select object itself.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_14.rst#_snippet_15

LANGUAGE: Python
CODE:
```
stmt = select(users)
stmt = stmt.where(stmt.selected_columns.name == "foo")
```

----------------------------------------

TITLE: Migrating SQLAlchemy Declarative Imports (2.0)
DESCRIPTION: Details the necessary import change for SQLAlchemy's Declarative API components, showing how `declarative_base` and `declared_attr` are now imported directly from the `sqlalchemy.orm` package.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_20.rst#_snippet_35

LANGUAGE: Python
CODE:
```
from sqlalchemy.ext import declarative_base, declared_attr
```

LANGUAGE: Python
CODE:
```
from sqlalchemy.orm import declarative_base, declared_attr
```

----------------------------------------

TITLE: Filter and Fetch One Object (SQLAlchemy 2.0)
DESCRIPTION: Shows the 2.0 approach for filtering results using `select` with `filter_by` and fetching exactly one scalar result using `.scalar_one()` on the result object. Raises an error if zero or more than one result is found. Requires a configured SQLAlchemy session, mapped User class, and the `select` function.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_20.rst#_snippet_42

LANGUAGE: Python
CODE:
```
session.execute(
  select(User).
  filter_by(name="some user")
).scalar_one()
```

----------------------------------------

TITLE: Creating Equality Condition with SQLAlchemy Column (Python)
DESCRIPTION: Demonstrates using the Python `==` operator with a SQLAlchemy `Column` object to create a SQL equality expression. Prints the resulting SQL fragment. Requires `user_table`.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/tutorial/data_select.rst#_snippet_19

LANGUAGE: Python
CODE:
```
print(user_table.c.name == "squidward")
```

----------------------------------------

TITLE: Generating CREATE TABLE for SQLAlchemy Mapped Type Aliases
DESCRIPTION: This snippet displays the `CREATE TABLE` statement generated by SQLAlchemy for the `SomeClass` mapping that utilizes `NewType` and PEP 695 `type` aliases. It illustrates how the `type_annotation_map` translates these Python types into specific SQL column types (e.g., `VARCHAR(30)`, `SMALLINT`, `JSON`) and correctly infers nullability based on the presence of `None` in the type annotations.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/declarative_tables.rst#_snippet_32

LANGUAGE: pycon+sql
CODE:
```
>>> print(CreateTable(SomeClass.__table__))
{printsql}CREATE TABLE some_table (
    id INTEGER NOT NULL,
    normal_str VARCHAR NOT NULL,
    short_str VARCHAR(30) NOT NULL,
    long_str_nullable VARCHAR(50),
    small_int SMALLINT NOT NULL,
    big_int BIGINT NOT NULL,
    scalar_col JSON,
    PRIMARY KEY (id)
)
```

----------------------------------------

TITLE: Disposing SQLAlchemy Engine in Multiprocessing Pool Initializer in Python
DESCRIPTION: This is the recommended approach for using a SQLAlchemy engine with `multiprocessing.Pool`. It defines an `initializer` function that calls `engine.dispose(close=False)` in each child process. This replaces the parent process's connection pool with a new empty one in the child, ensuring that the child does not attempt to use connections owned by the parent.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/core/pooling.rst#_snippet_13

LANGUAGE: python
CODE:
```
from multiprocessing import Pool
from sqlalchemy import create_engine, text # text is used in the example context, but not imported in the original text

engine = create_engine("mysql+mysqldb://user:pass@host/dbname")


def run_in_process(some_data_record):
    with engine.connect() as conn:
        # Example usage of text()
        conn.execute(text("SELECT 1")) # Replaced "..." with a simple example


def initializer():
    """ensure the parent proc's database connections are not touched
    in the new connection pool"""
    engine.dispose(close=False)

# Assuming 'data' is defined elsewhere, e.g., a list of records
# data = [...] 

# Example usage with a Pool
# Note: Need 'if __name__ == "__main__":' guard for multiprocessing
# if __name__ == "__main__":
#     with Pool(10, initializer=initializer) as p:
#         p.map(run_in_process, data)

```

----------------------------------------

TITLE: Fetch All Objects (SQLAlchemy 2.0 - execute().scalars())
DESCRIPTION: Presents one of the 2.0 styles for fetching all objects. It uses `Session.execute` with a `select` construct, followed by `.scalars()` to get scalar results and `.all()` to fetch all rows. Requires a configured SQLAlchemy session, mapped User class, and the `select` function.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_20.rst#_snippet_39

LANGUAGE: Python
CODE:
```
session.execute(
  select(User)
).scalars().all()
```

----------------------------------------

TITLE: Performing ORM Bulk INSERT using Session.execute (Python)
DESCRIPTION: Demonstrates how to use the Session.execute method with an ORM-mapped class and a list of dictionaries passed to the params parameter to perform a bulk INSERT operation, optimizing for inserting multiple rows efficiently.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/queryguide/dml.rst#_snippet_0

LANGUAGE: Python
CODE:
```
>>> from sqlalchemy import insert
>>> session.execute(
...     insert(User),
...     [
...         {"name": "spongebob", "fullname": "Spongebob Squarepants"},
...         {"name": "sandy", "fullname": "Sandy Cheeks"},
...         {"name": "patrick", "fullname": "Patrick Star"},
...         {"name": "squidward", "fullname": "Squidward Tentacles"},

```

----------------------------------------

TITLE: SQLAlchemy Core Query Using Expression in where()
DESCRIPTION: Demonstrates the standard and recommended way of using an expression object (comparison) within the `where()` method of a SQLAlchemy Core select statement. This does not trigger warnings.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_10.rst#_snippet_92

LANGUAGE: Python
CODE:
```
stmt = select([sometable]).where(sometable.c.somecolumn == "value")
```

----------------------------------------

TITLE: Accessing Result Columns by Attribute Name (Python)
DESCRIPTION: This snippet demonstrates fetching rows using `conn.execute(text(...))` and iterating through the result. It shows accessing columns in each row using attribute names (`row.x`, `row.y`), which are derived from the SQL column names when results are treated as Python named tuples.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/tutorial/dbapi_transactions.rst#_snippet_0

LANGUAGE: python
CODE:
```
result = conn.execute(text("select x, y from some_table"))

for row in result:
    y = row.y

    # illustrate use with Python f-strings
    print(f"Row: {row.x} {y}")
```

----------------------------------------

TITLE: Executing Lambda ORM Query Loop - SQLAlchemy Python
DESCRIPTION: This Python snippet demonstrates the new SQLAlchemy 1.4 approach using lambda expressions with `lambda_stmt` and `future_select` for constructing ORM queries. This pattern enables advanced native caching similar to the 'Baked Query' extension, resulting in much faster execution for repeated queries with changing bound parameters. It retrieves single scalar results using `scalar_one()`, requiring a Session and variables like 'ids' and 'n'.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_14.rst#_snippet_7

LANGUAGE: Python
CODE:
```
session = Session(bind=engine)
for id_ in random.sample(ids, n):
    stmt = lambda_stmt(lambda: future_select(Customer))
    stmt += lambda s: s.where(Customer.id == id_)
    session.execute(stmt).scalar_one()
```

----------------------------------------

TITLE: Initializing MetaData Object in SQLAlchemy Python
DESCRIPTION: This snippet demonstrates the fundamental step of creating an empty `MetaData` object, which serves as a container for all schema descriptions like tables, sequences, and constraints. It requires importing the `MetaData` class from the `sqlalchemy` library. The resulting `metadata_obj` is used to associate schema constructs.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/core/metadata.rst#_snippet_0

LANGUAGE: python
CODE:
```
from sqlalchemy import MetaData

metadata_obj = MetaData()
```

----------------------------------------

TITLE: Explicit Transaction with Connection.begin() - SQLAlchemy Core
DESCRIPTION: Shows an alternative recommended 2.0 style for managing transactions using the `Connection.begin()` context manager within an `Engine.connect()` block. This provides explicit transaction control on an existing connection object.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_20.rst#_snippet_11

LANGUAGE: python
CODE:
```
with engine.connect() as conn:
    with conn.begin():
        conn.execute(some_table.insert().values(foo="bar"))
        conn.execute(some_other_table.insert().values(bat="hoho"))
```

----------------------------------------

TITLE: Defining Unique Constraints in SQLAlchemy
DESCRIPTION: Illustrates creating unique constraints using SQLAlchemy Core. Anonymous per-column unique constraints are defined with `Column(..., unique=True)`, while explicitly named or multi-column unique constraints are created using the `UniqueConstraint` table-level construct.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/core/constraints.rst#_snippet_9

LANGUAGE: Python
CODE:
```
from sqlalchemy import UniqueConstraint

metadata_obj = MetaData()
mytable = Table(
    "mytable",
    metadata_obj,
    # per-column anonymous unique constraint
    Column("col1", Integer, unique=True),
    Column("col2", Integer),
    Column("col3", Integer),
    # explicit/composite unique constraint.  'name' is optional.
    UniqueConstraint("col2", "col3", name="uix_1"),
)
```

----------------------------------------

TITLE: Defining One-to-Many / Many-to-One Schema SQL
DESCRIPTION: Illustrates the standard SQL schema for database tables commonly used in one-to-many or many-to-one relationships, featuring parent and child tables linked by a foreign key.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/glossary.rst#_snippet_18

LANGUAGE: sql
CODE:
```
CREATE TABLE department (
    id INTEGER PRIMARY KEY,
    name VARCHAR(30)
)

CREATE TABLE employee (
    id INTEGER PRIMARY KEY,
    name VARCHAR(30),
    dep_id INTEGER REFERENCES department(id)
)
```

----------------------------------------

TITLE: Set Default Isolation Level for SQLAlchemy Engine
DESCRIPTION: Shows how to configure a default transaction isolation level for all connections created by a SQLAlchemy engine. By passing the `isolation_level` parameter to `create_engine`, every new DBAPI connection acquired from this engine will be initialized with the specified isolation level.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/core/connections.rst#_snippet_10

LANGUAGE: Python
CODE:
```
from sqlalchemy import create_engine

eng = create_engine(
    "postgresql://scott:tiger@localhost/test", isolation_level="REPEATABLE READ"
)
```

----------------------------------------

TITLE: Selecting ORM Objects with Filtering (IN) - Python/SQL
DESCRIPTION: Demonstrates how to construct and execute a simple SELECT query using SQLAlchemy's ORM to fetch objects (User) based on a filtering condition using the SQL IN operator. It utilizes the `select` function and the `Session.scalars` method to iterate over results.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/quickstart.rst#_snippet_4

LANGUAGE: python
CODE:
```
from sqlalchemy import select

session = Session(engine)

stmt = select(User).where(User.name.in_(["spongebob", "sandy"]))

for user in session.scalars(stmt):
    print(user)
```

LANGUAGE: sql
CODE:
```
{execsql}BEGIN (implicit)
SELECT user_account.id, user_account.name, user_account.fullname
FROM user_account
WHERE user_account.name IN (?, ?)
[...] ('spongebob', 'sandy'){stop}
User(id=1, name='spongebob', fullname='Spongebob Squarepants')
User(id=2, name='sandy', fullname='Sandy Cheeks')
```

----------------------------------------

TITLE: Setting SQLAlchemy Engine Pool Recycle (Python)
DESCRIPTION: Details how to set the `pool_recycle` parameter on the SQLAlchemy engine. This ensures connections older than the specified age (in seconds) are replaced upon checkout, mitigating issues with databases that automatically close idle connections. Requires `sqlalchemy.create_engine`.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/core/pooling.rst#_snippet_9

LANGUAGE: Python
CODE:
```
from sqlalchemy import create_engine

e = create_engine("mysql+mysqldb://scott:tiger@localhost/test", pool_recycle=3600)
```

----------------------------------------

TITLE: Initializing Database and Session (Python)
DESCRIPTION: Initializes a SQLite in-memory database engine, drops and creates all tables defined by the ORM models using `Base.metadata.create_all`, and sets up a database connection and an ORM session for interacting with the database.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/queryguide/_inheritance_setup.rst#_snippet_1

LANGUAGE: python
CODE:
```
>>> engine = create_engine("sqlite://", echo=True)
>>>
>>> Base.metadata.create_all(engine)
BEGIN ...

>>> conn = engine.connect()
>>> from sqlalchemy.orm import Session
>>> session = Session(conn)
```

----------------------------------------

TITLE: Creating Greater Than Condition with SQLAlchemy Column (Python)
DESCRIPTION: Demonstrates using the Python `>` operator with a SQLAlchemy `Column` object to create a SQL greater than expression. Prints the resulting SQL fragment. Requires `address_table`.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/tutorial/data_select.rst#_snippet_21

LANGUAGE: Python
CODE:
```
print(address_table.c.user_id > 10)
```

----------------------------------------

TITLE: Comparing Greater Than or Equal SQLAlchemy Python
DESCRIPTION: Demonstrates using the Python `>=` operator on a SQLAlchemy `column` object to generate a SQL greater-than-or-equal-to expression. The output shows the generated SQL with a bound parameter.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/core/operators.rst#_snippet_4

LANGUAGE: Python
CODE:
```
print(column("x") >= 5)
```

----------------------------------------

TITLE: Bulk Update ORM Entities by Primary Key - SQLAlchemy Python
DESCRIPTION: This snippet demonstrates how to perform a bulk update on an ORM entity (`User`) using SQLAlchemy's `Session.execute` method. It takes an `update` construct targeting the `User` class and a list of dictionaries, where each dictionary contains the primary key (`id`) and the values to update (`fullname`). SQLAlchemy automatically generates the `WHERE` clause for each primary key and uses `executemany` for efficiency. Each parameter dictionary *must* include the full primary key.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/queryguide/dml.rst#_snippet_19

LANGUAGE: Python
CODE:
```
from sqlalchemy import update
session.execute(
    update(User),
    [
        {"id": 1, "fullname": "Spongebob Squarepants"},
        {"id": 3, "fullname": "Patrick Star"},
        {"id": 5, "fullname": "Eugene H. Krabs"},
    ],
)
```

----------------------------------------

TITLE: Rolling back SQLAlchemy Transaction in Python
DESCRIPTION: Demonstrates the correct method to roll back a transaction (`transaction1`) in SQLAlchemy, particularly when dealing with nested or 'deactivated' transaction patterns. This ensures the changes within the transaction are discarded at the database level. This snippet shows the specific call needed on the transaction object.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/errors.rst#_snippet_53

LANGUAGE: python
CODE:
```
transaction1.rollback()
```

----------------------------------------

TITLE: Selecting Mapped Classes as Scalars
DESCRIPTION: Shows the typical use case of selecting ORM mapped classes using `session.scalars()`. The result is typed as a sequence or iterator of the mapped class instances.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/whatsnew_20.rst#_snippet_8

LANGUAGE: Python
CODE:
```
from sqlalchemy import select
from sqlalchemy.orm import Session
from typing import Sequence, Iterator

# (variable) users1: Sequence[User]
users1 = session.scalars(select(User)).all()

# (variable) user_iter: Iterator[User]
user_iter = iter(session.scalars(select(User)))
```

----------------------------------------

TITLE: Defining Timestamp Columns with Declarative Mixins (Python)
DESCRIPTION: This snippet demonstrates how to define reusable timestamp columns (`created_at`, `updated_at`) using a Declarative mixin (`TimestampMixin`) in SQLAlchemy. The `created_at` column automatically defaults to the current timestamp using `func.now()`. Classes like `MyModel` can inherit from `TimestampMixin` to automatically include these columns, which are copied to each target table.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/declarative_mixins.rst#_snippet_5

LANGUAGE: Python
CODE:
```
class TimestampMixin:
    created_at: Mapped[datetime] = mapped_column(default=func.now())
    updated_at: Mapped[datetime]


class MyModel(TimestampMixin, Base):
    __tablename__ = "test"

    id: Mapped[int] = mapped_column(primary_key=True)
    name: Mapped[str]
```

----------------------------------------

TITLE: Executing Select for ORM Entity - SQLAlchemy Python
DESCRIPTION: Executes a SQLAlchemy SELECT statement that targets a full ORM entity (`User`) using `Session.execute` and retrieves the first result row. The row will contain the entity instance as its single element.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/tutorial/data_select.rst#_snippet_7

LANGUAGE: Python
CODE:
```
row = session.execute(select(User)).first()
```

----------------------------------------

TITLE: Defining Bidirectional One-to-Many / Many-to-One (Non-Annotated Declarative) - Python
DESCRIPTION: This snippet demonstrates a bidirectional One-to-Many / Many-to-One relationship using the classic non-annotated Declarative style. The target class and collection type ('Child', 'Parent') are explicitly passed to the relationship function, along with back_populates.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/basic_relationships.rst#_snippet_2

LANGUAGE: Python
CODE:
```
class Parent(Base):
    __tablename__ = "parent_table"

    id = mapped_column(Integer, primary_key=True)
    children = relationship("Child", back_populates="parent")


class Child(Base):
    __tablename__ = "child_table"

    id = mapped_column(Integer, primary_key=True)
    parent_id = mapped_column(ForeignKey("parent_table.id"))
    parent = relationship("Parent", back_populates="children")
```

----------------------------------------

TITLE: Defining ORM Models with WriteOnlyMapped Relationship (Python)
DESCRIPTION: Demonstrates how to define SQLAlchemy ORM models using declarative mapping with Python type annotations. It shows the use of `WriteOnlyMapped` for a relationship (`account_transactions`) which supersedes the legacy `lazy="dynamic"` strategy. Includes definitions for `Account` and `AccountTransaction` classes.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/whatsnew_20.rst#_snippet_28

LANGUAGE: Python
CODE:
```
from sqlalchemy.orm import WriteOnlyMapped


class Base(DeclarativeBase):
    pass


class Account(Base):
    __tablename__ = "account"
    id: Mapped[int] = mapped_column(primary_key=True)
    identifier: Mapped[str]
    account_transactions: WriteOnlyMapped["AccountTransaction"] = relationship(
        cascade="all, delete-orphan",
        passive_deletes=True,
        order_by="AccountTransaction.timestamp",
    )


class AccountTransaction(Base):
    __tablename__ = "account_transaction"
    id: Mapped[int] = mapped_column(primary_key=True)
    account_id: Mapped[int] = mapped_column(
        ForeignKey("account.id", ondelete="cascade")
    )
    description: Mapped[str]
    amount: Mapped[Decimal]
    timestamp: Mapped[datetime] = mapped_column(default=func.now())
```

----------------------------------------

TITLE: Defining DynamicMapped Relationship with write_only in SQLAlchemy ORM (Python)
DESCRIPTION: This snippet defines two SQLAlchemy ORM classes, `Account` and `AccountTransaction`, demonstrating the use of `DynamicMapped` with `lazy="write_only"` for the `account_transactions` relationship. This configuration provides an `AppenderQuery` collection type, allowing efficient querying and iteration without loading the entire collection into memory immediately.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/whatsnew_20.rst#_snippet_32

LANGUAGE: Python
CODE:
```
from sqlalchemy.orm import DynamicMapped


class Base(DeclarativeBase):
    pass


class Account(Base):
    __tablename__ = "account"
    id: Mapped[int] = mapped_column(primary_key=True)
    identifier: Mapped[str]
    account_transactions: DynamicMapped["AccountTransaction"] = relationship(
        cascade="all, delete-orphan",
        passive_deletes=True,
        order_by="AccountTransaction.timestamp",
    )


class AccountTransaction(Base):
    __tablename__ = "account_transaction"
    id: Mapped[int] = mapped_column(primary_key=True)
    account_id: Mapped[int] = mapped_column(
        ForeignKey("account.id", ondelete="cascade")
    )
    description: Mapped[str]
    amount: Mapped[Decimal]
    timestamp: Mapped[datetime] = mapped_column(default=func.now())
```

----------------------------------------

TITLE: Installing SQLAlchemy with AsyncIO Support (Shell)
DESCRIPTION: AsyncIO support in SQLAlchemy depends on the 'greenlet' project. This command installs SQLAlchemy along with the necessary 'greenlet' dependency by specifying the '[asyncio]' extra.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/intro.rst#_snippet_2

LANGUAGE: text
CODE:
```
pip install sqlalchemy[asyncio]
```

----------------------------------------

TITLE: Using Synchronous Inspector with Async Connection - Python
DESCRIPTION: This example shows how to run a synchronous function that uses the SQLAlchemy Inspector within an asyncio application. It leverages the AsyncConnection.run_sync method to execute synchronous code that interacts with the database using a connection obtained from an async engine.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/extensions/asyncio.rst#_snippet_9

LANGUAGE: Python
CODE:
```
import asyncio

from sqlalchemy import inspect
from sqlalchemy.ext.asyncio import create_async_engine

engine = create_async_engine("postgresql+asyncpg://scott:tiger@localhost/test")


def use_inspector(conn):
    inspector = inspect(conn)
    # use the inspector
    print(inspector.get_view_names())
    # return any value to the caller
    return inspector.get_table_names()


async def async_main():
    async with engine.connect() as conn:
        tables = await conn.run_sync(use_inspector)


asyncio.run(async_main())
```

----------------------------------------

TITLE: Using MetaData with Engine and Connection (Python)
DESCRIPTION: Demonstrates common operations like creating and reflecting tables using `MetaData` with both the `Engine` and `Connection` objects. Shows how to execute SQL statements using the preferred `Connection.execute()` method within a transaction block.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_20.rst#_snippet_17

LANGUAGE: Python
CODE:
```
from sqlalchemy import MetaData

metadata_obj = MetaData()

# engine level:

# create tables
metadata_obj.create_all(engine)

# reflect all tables
metadata_obj.reflect(engine)

# reflect individual table
t = Table("t", metadata_obj, autoload_with=engine)


# connection level:


with engine.connect() as connection:
    # create tables, requires explicit begin and/or commit:
    with connection.begin():
        metadata_obj.create_all(connection)

    # reflect all tables
    metadata_obj.reflect(connection)

    # reflect individual table
t = Table("t", metadata_obj, autoload_with=connection)

    # execute SQL statements
    result = connection.execute(t.select())
```

----------------------------------------

TITLE: Executing INSERT with RETURNING SQLAlchemy Python
DESCRIPTION: Demonstrates using the `returning()` method on an `insert()` construct to fetch column values (like id and timestamp) after the insertion, supported by databases like PostgreSQL, Oracle, MS-SQL, and Firebird.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_06.rst#_snippet_14

LANGUAGE: python
CODE:
```
result = connection.execute(
    table.insert().values(data="some data").returning(table.c.id, table.c.timestamp)
)
row = result.first()
```

----------------------------------------

TITLE: Defining SQLAlchemy Relationship with String Class Name (Python)
DESCRIPTION: Demonstrates defining a SQLAlchemy relationship using a string literal ("myapp.mymodel.Child") for the target class argument. This pattern allows for type-checking imports via `typing.TYPE_CHECKING` while resolving the target class at runtime from the ORM registry, helping to avoid import cycles.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/basic_relationships.rst#_snippet_27

LANGUAGE: Python
CODE:
```
import typing

if typing.TYPE_CHECKING:
    from myapp.mymodel import Child


class Parent(Base):
    # ...

    children: Mapped[List["Child"]] = relationship(
        "myapp.mymodel.Child",
        order_by="desc(myapp.mymodel.Child.email_address)",
        primaryjoin="myapp.mymodel.Parent.id == myapp.mymodel.Child.parent_id",
    )
```

----------------------------------------

TITLE: Querying Dynamic Relationship Statement - SQLAlchemy Python
DESCRIPTION: Demonstrates accessing the underlying statement of a `lazy="dynamic"` relationship to construct and execute a 2.0-style select query using `session.scalars`. Requires a `User` model with a dynamic `posts` relationship and an active session.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_20.rst#_snippet_97

LANGUAGE: Python
CODE:
```
class User(Base):
    __tablename__ = "user"

    posts = relationship(Post, lazy="dynamic")


jack = session.get(User, 5)

# filter Jack's blog posts
posts = session.scalars(jack.posts.statement.where(Post.headline == "this is a post"))
```

----------------------------------------

TITLE: Querying with defer and raiseload in SQLAlchemy (Python)
DESCRIPTION: Demonstrates how to use the `defer` loader option with `raiseload=True` to exclude a column (`Book.cover_photo`) from the initial SELECT statement and raise an `InvalidRequestError` if the deferred attribute is accessed subsequently. This prevents unexpected lazy loading.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/queryguide/columns.rst#_snippet_8

LANGUAGE: python
CODE:
```
book = session.scalar(
    select(Book).options(defer(Book.cover_photo, raiseload=True)).where(Book.id == 4)
)
book.cover_photo
```

----------------------------------------

TITLE: Define SQLAlchemy Joined Inheritance Subclasses (Python)
DESCRIPTION: Configures the `Engineer` and `Manager` subclasses for a joined table inheritance hierarchy in SQLAlchemy. Each class maps to its own table (`engineer`, `manager`), includes a foreign key (`ForeignKey("employee.id")`) linking to the base `employee` table's primary key, defines unique attributes (`engineer_name`, `manager_name`), and sets its specific `polymorphic_identity` (`engineer`, `manager`).
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/inheritance.rst#_snippet_1

LANGUAGE: Python
CODE:
```
class Engineer(Employee):
    __tablename__ = "engineer"
    id: Mapped[int] = mapped_column(ForeignKey("employee.id"), primary_key=True)
    engineer_name: Mapped[str]

    __mapper_args__ = {
        "polymorphic_identity": "engineer",
    }


class Manager(Employee):
    __tablename__ = "manager"
    id: Mapped[int] = mapped_column(ForeignKey("employee.id"), primary_key=True)
    manager_name: Mapped[str]

    __mapper_args__ = {
        "polymorphic_identity": "manager",
    }
```

----------------------------------------

TITLE: Querying with SQLAlchemy ORM Many-to-One Relationship (Python)
DESCRIPTION: Demonstrates a standard SQLAlchemy ORM query filtering an `Address` object based on a many-to-one relationship (`Address.user`) compared directly to a `User` instance (`u1`). This highlights the scenario where SQLAlchemy defers evaluating the `u1` primary key value. Requires a SQLAlchemy ORM session, `User`, and `Address` models. Input: session, `User` and `Address` models. Output: A `Query` object filtering `Address`.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_13.rst#_snippet_4

LANGUAGE: Python
CODE:
```
u1 = session.query(User).get(5)

query = session.query(Address).filter(Address.user == u1)
```

----------------------------------------

TITLE: Customizing SQLAlchemy Type Map with type_annotation_map (Python)
DESCRIPTION: This Python code demonstrates how to customize the default type mapping for Mapped annotations using the type_annotation_map attribute on a DeclarativeBase class. It shows how to map int to BIGINT, datetime.datetime to TIMESTAMP with timezone, and str to String with a NVARCHAR variant for MSSQL, allowing for database-specific type configurations.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/declarative_tables.rst#_snippet_23

LANGUAGE: Python
CODE:
```
import datetime

from sqlalchemy import BIGINT, NVARCHAR, String, TIMESTAMP
from sqlalchemy.orm import DeclarativeBase, Mapped, mapped_column


class Base(DeclarativeBase):
    type_annotation_map = {
        int: BIGINT,
        datetime.datetime: TIMESTAMP(timezone=True),
        str: String().with_variant(NVARCHAR, "mssql"),
    }


class SomeClass(Base):
    __tablename__ = "some_table"

    id: Mapped[int] = mapped_column(primary_key=True)
    date: Mapped[datetime.datetime]
    status: Mapped[str]
```

----------------------------------------

TITLE: Loading ORM Object by Name in SQLAlchemy
DESCRIPTION: Loads a User object from the database using the Session, filtering by name. Demonstrates the use of `select`, `filter_by`, and `scalar_one` methods and shows the corresponding SQL query executed.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/tutorial/orm_data_manipulation.rst#_snippet_10

LANGUAGE: pycon+sql
CODE:
```
>>> sandy = session.execute(select(User).filter_by(name="sandy")).scalar_one()
{execsql}BEGIN (implicit)
SELECT user_account.id, user_account.name, user_account.fullname
FROM user_account
WHERE user_account.name = ?
[...] ('sandy',)
```

----------------------------------------

TITLE: Selecting ORM Objects with JOIN and Multiple WHERE Clauses - Python/SQL
DESCRIPTION: Illustrates performing a SELECT query that involves a JOIN between two ORM-mapped classes (Address and User). It demonstrates how to use the `Select.join` method and apply multiple filtering conditions with `Select.where` that are implicitly combined with AND. Results are fetched using `Session.scalars().one()`.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/quickstart.rst#_snippet_5

LANGUAGE: python
CODE:
```
stmt = (
    select(Address)
    .join(Address.user)
    .where(User.name == "sandy")
    .where(Address.email_address == "sandy@sqlalchemy.org")
)
sandy_address = session.scalars(stmt).one()
```

LANGUAGE: sql
CODE:
```
{execsql}SELECT address.id, address.email_address, address.user_id
FROM address JOIN user_account ON user_account.id = address.user_id
WHERE user_account.name = ? AND address.email_address = ?
[...] ('sandy', 'sandy@sqlalchemy.org')
{stop}
>>> sandy_address
Address(id=2, email_address='sandy@sqlalchemy.org')
```

----------------------------------------

TITLE: Creating All Tables from Declarative Base Metadata
DESCRIPTION: This snippet shows how to use the `metadata` attribute of the declarative base class to create all defined tables in a database. By calling `create_all()` on `Base.metadata` with an SQLAlchemy engine, the DDL statements for all mapped tables are executed.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/declarative_tables.rst#_snippet_6

LANGUAGE: Python
CODE:
```
engine = create_engine("sqlite://")

Base.metadata.create_all(engine)
```

----------------------------------------

TITLE: Configuring Relationship Collection as List with Mapped in SQLAlchemy ORM
DESCRIPTION: This snippet demonstrates how to configure a one-to-many relationship to use a Python list as its collection type in a Declarative mapping using the `Mapped` annotation. The `Parent` class has a relationship named `children` that will hold `Child` objects in a list.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/collection_api.rst#_snippet_0

LANGUAGE: python
CODE:
```
from sqlalchemy import ForeignKey

from sqlalchemy.orm import DeclarativeBase
from sqlalchemy.orm import Mapped
from sqlalchemy.orm import mapped_column
from sqlalchemy.orm import relationship


class Base(DeclarativeBase):
    pass


class Parent(Base):
    __tablename__ = "parent"

    parent_id: Mapped[int] = mapped_column(primary_key=True)

    # use a list
    children: Mapped[list["Child"]] = relationship()


class Child(Base):
    __tablename__ = "child"

    child_id: Mapped[int] = mapped_column(primary_key=True)
    parent_id: Mapped[int] = mapped_column(ForeignKey("parent.id"))
```

----------------------------------------

TITLE: Configuring SQLAlchemy Session with create_savepoint for Testing
DESCRIPTION: Demonstrates how to set up a SQLAlchemy Session in a test environment using `join_transaction_mode="create_savepoint"`. This mode ensures the Session operates within its own savepoint, leaving the externally initiated transaction active and allowing for easy rollback of all changes in the test's `tearDown`.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/whatsnew_20.rst#_snippet_37

LANGUAGE: python
CODE:
```
class SomeTest(TestCase):
    def setUp(self):
        # connect to the database
        self.connection = engine.connect()

        # begin a non-ORM transaction
        self.trans = self.connection.begin()

        # bind an individual Session to the connection, selecting
        # "create_savepoint" join_transaction_mode
        self.session = Session(
            bind=self.connection, join_transaction_mode="create_savepoint"
        )

    def tearDown(self):
        self.session.close()

        # rollback non-ORM transaction
        self.trans.rollback()

        # return connection to the Engine
        self.connection.close()
```

----------------------------------------

TITLE: Defining Table with ForeignKey in SQLAlchemy Python
DESCRIPTION: This defines an 'employees' table within `metadata_obj`, similar to the 'user' table example. It demonstrates the inclusion of a `ForeignKey` constraint on the 'employee_dept' column, linking it to the 'department_id' column in a 'departments' table. This establishes a relationship between the two tables.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/core/metadata.rst#_snippet_3

LANGUAGE: python
CODE:
```
employees = Table(
    "employees",
    metadata_obj,
    Column("employee_id", Integer, primary_key=True),
    Column("employee_name", String(60), nullable=False),
    Column("employee_dept", Integer, ForeignKey("departments.department_id")),
)
```

----------------------------------------

TITLE: Querying Relationship Statement Async - SQLAlchemy Python
DESCRIPTION: Demonstrates fetching objects from a relationship's statement within an asynchronous context using `session.scalars` and applying additional filtering to the statement.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/extensions/asyncio.rst#_snippet_0

LANGUAGE: python
CODE:
```
      addresses = (await session.scalars(user.addresses.statement)).all()
      stmt = user.addresses.statement.where(Address.email_address.startswith("patrick"))
      addresses_filter = (await session.scalars(stmt)).all()
```

----------------------------------------

TITLE: Defining SQLAlchemy ORM Classes with Joined Inheritance and Relationships (FK on Base)
DESCRIPTION: Defines SQLAlchemy ORM classes for Company, Employee, Manager, and Engineer using joined table inheritance. The Employee class serves as the base, defining the polymorphic_on and polymorphic_identity. Relationships between Company and Employee are established where the foreign key is on the base employee table.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/inheritance.rst#_snippet_2

LANGUAGE: Python
CODE:
```
from __future__ import annotations

    from sqlalchemy.orm import relationship


    class Company(Base):
        __tablename__ = "company"
        id: Mapped[int] = mapped_column(primary_key=True)
        name: Mapped[str]
        employees: Mapped[List[Employee]] = relationship(back_populates="company")


    class Employee(Base):
        __tablename__ = "employee"
        id: Mapped[int] = mapped_column(primary_key=True)
        name: Mapped[str]
        type: Mapped[str]
        company_id: Mapped[int] = mapped_column(ForeignKey("company.id"))
        company: Mapped[Company] = relationship(back_populates="employees")

        __mapper_args__ = {
            "polymorphic_identity": "employee",
            "polymorphic_on": "type",
        }


    class Manager(Employee): ...


    class Engineer(Employee): ...
```

----------------------------------------

TITLE: Initializing SQLAlchemy ORM Session
DESCRIPTION: Demonstrates the basic initialization of an SQLAlchemy ORM Session object, binding it to a database engine. This session object is the primary interface for ORM database operations.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/session_transaction.rst#_snippet_0

LANGUAGE: Python
CODE:
```
from sqlalchemy.orm import Session

session = Session(engine)
```

----------------------------------------

TITLE: Integrating ORM Delete Cascade with Database ON DELETE CASCADE using passive_deletes in SQLAlchemy
DESCRIPTION: This Python snippet defines `Parent` and `Child` models with a one-to-many relationship. It combines SQLAlchemy's `cascade="all, delete"` with a database-level `ON DELETE CASCADE` constraint on the foreign key (`parent_id`). The `passive_deletes=True` flag tells SQLAlchemy to rely on the database cascade for deleting unloaded child objects.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/cascades.rst#_snippet_15

LANGUAGE: python
CODE:
```
class Parent(Base):
    __tablename__ = "parent"
    id = mapped_column(Integer, primary_key=True)
    children = relationship(
        "Child",
        back_populates="parent",
        cascade="all, delete",
        passive_deletes=True,
    )


class Child(Base):
    __tablename__ = "child"
    id = mapped_column(Integer, primary_key=True)
    parent_id = mapped_column(Integer, ForeignKey("parent.id", ondelete="CASCADE"))
    parent = relationship("Parent", back_populates="children")
```

----------------------------------------

TITLE: Executing Statement via Connection (2.0 Style) - SQLAlchemy Python
DESCRIPTION: Shows the recommended SQLAlchemy 2.0 approach for executing Core statements. Statements are executed using the `.execute()` method of an explicit `Connection` object obtained from an Engine, replacing the legacy "bound metadata" execution.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/errors.rst#_snippet_50

LANGUAGE: Python
CODE:
```
with engine.connect() as conn:
    result = conn.execute(stmt)
```

----------------------------------------

TITLE: Defining ORM Model with Server Defaults and Eager Fetching - Python
DESCRIPTION: Defines a SQLAlchemy ORM model (`MyModel`) using Declarative mapping. It shows how to mark columns (`timestamp`, `special_identifier`) with server-side default generation using `server_default`, including SQL functions (`func.now()`) and generic `FetchedValue`. The `__mapper_args__ = {"eager_defaults": True}` setting enables eager fetching of these defaults upon INSERT, typically using the database's RETURNING feature when available.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/persistence_techniques.rst#_snippet_10

LANGUAGE: Python
CODE:
```
class MyModel(Base):
    __tablename__ = "my_table"

    id = mapped_column(Integer, primary_key=True)

    # server-side SQL date function generates a new timestamp
    timestamp = mapped_column(DateTime(), server_default=func.now())

    # some other server-side function not named here, such as a trigger,
    # populates a value into this column during INSERT
    special_identifier = mapped_column(String(50), server_default=FetchedValue())

    # set eager defaults to True.  This is usually optional, as if the
    # backend supports RETURNING + insertmanyvalues, eager defaults
    # will take place regardless on INSERT
    __mapper_args__ = {"eager_defaults": True}
```

----------------------------------------

TITLE: Enabling Lazy Loading with SQLAlchemy ORM
DESCRIPTION: Demonstrates how to explicitly enable lazy loading for a specific relationship (`User.addresses`) using the `lazyload` loader option on a SQLAlchemy `select` statement, even if the relationship is configured differently by default.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/queryguide/relationships.rst#_snippet_12

LANGUAGE: python
CODE:
```
from sqlalchemy import select
from sqlalchemy.orm import lazyload

# force lazy loading for an attribute that is set to
# load some other way normally
stmt = select(User).options(lazyload(User.addresses))
```

----------------------------------------

TITLE: SQLAlchemy Select.join() with Automatic ON Clause
DESCRIPTION: Demonstrates the SQLAlchemy 2.0 `select().join()` method when the ON clause can be automatically determined based on foreign key relationships between the joined tables.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_14.rst#_snippet_18

LANGUAGE: Python
CODE:
```
stmt = select(user_table).join(addresses_table)
```

----------------------------------------

TITLE: Configuring SQLAlchemy Engine Pool Parameters (Python)
DESCRIPTION: Illustrates how to pass common connection pool tuning parameters like pool_size and max_overflow directly to the create_engine function when creating a SQLAlchemy engine. This configures the integrated QueuePool instance with the specified values. Requires SQLAlchemy and the psycopg2 database driver.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/core/pooling.rst#_snippet_0

LANGUAGE: Python
CODE:
```
engine = create_engine(
    "postgresql+psycopg2://me@localhost/mydb", pool_size=20, max_overflow=0
)
```

----------------------------------------

TITLE: Deleting ORM Objects with Session Delete and Commit - Python/SQL
DESCRIPTION: Shows how to delete a top-level ORM object (User) using the `Session.delete()` method. The actual DELETE statements for the object and its related cascaded objects are emitted upon the subsequent `Session.commit()`. Notes that reloading expired objects may occur before deletion.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/quickstart.rst#_snippet_8

LANGUAGE: python
CODE:
```
session.delete(patrick)

session.commit()
```

LANGUAGE: sql
CODE:
```
{execsql}SELECT user_account.id AS user_account_id, user_account.name AS user_account_name, user_account.fullname AS user_account_fullname
FROM user_account
WHERE user_account.id = ?
[...] (3,)
SELECT address.id AS address_id, address.email_address AS address_email_address, address.user_id AS address_user_id
FROM address
WHERE ? = address.user_id
[...] (3,)

{execsql}DELETE FROM address WHERE address.id = ?
[...] (4,)
DELETE FROM user_account WHERE user_account.id = ?
[...] (3,)
COMMIT
{stop}
```

----------------------------------------

TITLE: Joining ORM Entity to Aliased Subquery and Executing - SQLAlchemy ORM Python
DESCRIPTION: Demonstrates creating an aliased ORM entity (`address_subq`) from a subquery and joining the primary entity (`User`) to this aliased subquery. It also shows how to execute the resulting statement and access the entities from the result rows.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/queryguide/select.rst#_snippet_30

LANGUAGE: Python
CODE:
```
address_subq = aliased(Address, subq, name="address")
stmt = select(User, address_subq).join(address_subq)
for row in session.execute(stmt):
    print(f"{row.User} {row.address}")
```

LANGUAGE: SQL
CODE:
```
SELECT user_account.id, user_account.name, user_account.fullname,
anon_1.id AS id_1, anon_1.user_id, anon_1.email_address
FROM user_account
JOIN (SELECT address.id AS id,
address.user_id AS user_id, address.email_address AS email_address
FROM address
WHERE address.email_address = ?) AS anon_1 ON user_account.id = anon_1.user_id
[...] ('pat999@aol.com',){stop}
User(id=3, name='patrick', fullname='Patrick Star') Address(id=4, email_address='pat999@aol.com')
```

----------------------------------------

TITLE: Executing SQLAlchemy ORM UNION via Aliased Subquery - Python
DESCRIPTION: Illustrates a more flexible approach to using a union_all statement by converting it into a subquery (u.subquery()), aliasing it to the target ORM entity (User) using aliased(), and then selecting from the aliased entity. This allows adding further clauses like ORDER BY outside the union. It shows the generated SQL and the fetched ORM objects.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/tutorial/data_select.rst#_snippet_76

LANGUAGE: python
CODE:
```
user_alias = aliased(User, u.subquery())
orm_stmt = select(user_alias).order_by(user_alias.id)
with Session(engine) as session:
    for obj in session.execute(orm_stmt).scalars():
        print(obj)
```

LANGUAGE: sql
CODE:
```
BEGIN (implicit)
SELECT anon_1.id, anon_1.name, anon_1.fullname
FROM (SELECT user_account.id AS id, user_account.name AS name, user_account.fullname AS fullname
FROM user_account
WHERE user_account.name = ? UNION ALL SELECT user_account.id AS id, user_account.name AS name, user_account.fullname AS fullname
FROM user_account
WHERE user_account.name = ?) AS anon_1 ORDER BY anon_1.id
[generated in ...] ('sandy', 'spongebob')
ROLLBACK
```

----------------------------------------

TITLE: Using aliased with Mapped Classes in Select
DESCRIPTION: Illustrates the use of the `aliased` construct with ORM mapped classes within a select statement. The result tuple correctly reflects the types of the original and aliased mapped classes, plus any additional selected columns.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/whatsnew_20.rst#_snippet_7

LANGUAGE: Python
CODE:
```
from sqlalchemy import select
from sqlalchemy.orm import Session, aliased

with Session(engine) as session:
    # this is in fact an Annotated type, but typing tools don't
    # generally display this

    # (variable) u1: Type[User]
    u1 = aliased(User)

    # (variable) stmt: Select[Tuple[User, User, str]]
    stmt = select(User, u1, User.name).filter(User.id == 5)

    # (variable) result: Result[Tuple[User, User, str]]
    result = session.execute(stmt)
```

----------------------------------------

TITLE: Navigating Back Along Relationship - SQLAlchemy Python
DESCRIPTION: Following the append operation, this snippet confirms that the `back_populates` parameter ensures synchronization, allowing navigation from the added `Address` object back to its related `User` object via the `user` attribute.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/tutorial/orm_related_objects.rst#_snippet_3

LANGUAGE: Python
CODE:
```
>>> a1.user
User(id=None, name='pkrabs', fullname='Pearl Krabs')
```

----------------------------------------

TITLE: Defining Bidirectional Relationship with Back Populates (Python)
DESCRIPTION: This snippet defines the same `User` and `Address` ORM classes using Declarative Base but explicitly configures the bidirectional relationship using the `back_populates` parameter on both the `User.addresses` relationship and the `Address.user` relationship. This is the modern, preferred approach to defining bidirectional links in SQLAlchemy, equivalent to the basic `backref` example.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/backref.rst#_snippet_1

LANGUAGE: python
CODE:
```
from sqlalchemy import Column, ForeignKey, Integer, String
from sqlalchemy.orm import DeclarativeBase, relationship


class Base(DeclarativeBase):
    pass


class User(Base):
    __tablename__ = "user"
    id = mapped_column(Integer, primary_key=True)
    name = mapped_column(String)

    addresses = relationship("Address", back_populates="user")


class Address(Base):
    __tablename__ = "address"
    id = mapped_column(Integer, primary_key=True)
    email = mapped_column(String)
    user_id = mapped_column(Integer, ForeignKey("user.id"))

    user = relationship("User", back_populates="addresses")
```

----------------------------------------

TITLE: Sending Single Bound Parameter to SELECT (Python)
DESCRIPTION: This snippet demonstrates executing a parameterized `SELECT` query using `Connection.execute`. It shows how to define a named parameter (`:y`) in the `text` construct and pass its value as a dictionary in the second argument to `execute`.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/tutorial/dbapi_transactions.rst#_snippet_2

LANGUAGE: python
CODE:
```
with engine.connect() as conn:
    result = conn.execute(text("SELECT x, y FROM some_table WHERE y > :y"), {"y": 2})
    for row in result:
        print(f"x: {row.x}  y: {row.y}")
```

----------------------------------------

TITLE: Defining JSONEncodedDict TypeDecorator in SQLAlchemy
DESCRIPTION: Defines a custom SQLAlchemy TypeDecorator to handle the conversion of Python dictionaries to JSON strings for storage in a VARCHAR column and vice-versa upon retrieval. It uses the `json` module for encoding and decoding.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/core/custom_types.rst#_snippet_7

LANGUAGE: Python
CODE:
```
class JSONEncodedDict(TypeDecorator):
    """Represents an immutable structure as a json-encoded string.

    Usage:

        JSONEncodedDict(255)

    """

    impl = VARCHAR

    cache_ok = True

    def process_bind_param(self, value, dialect):
        if value is not None:
            value = json.dumps(value)

        return value

    def process_result_value(self, value, dialect):
        if value is not None:
            value = json.loads(value)
        return value
```

----------------------------------------

TITLE: Fetching Object by Primary Key with Session.get()
DESCRIPTION: The SQLAlchemy 2.0 approach to fetching an object by its primary key using the Session.get() method, which replaces the legacy Query.get().
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_20.rst#_snippet_65

LANGUAGE: Python
CODE:
```
# get() moves to the Session directly
user = session.get(User, 5)
```

----------------------------------------

TITLE: Many-to-Many Association Table with Primary Key - Python
DESCRIPTION: This snippet demonstrates a recommended practice for Many-to-Many association tables: defining the foreign key columns as a composite primary key. This prevents duplicate rows in the association table, ensuring each unique pair of parent and child is stored only once.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/basic_relationships.rst#_snippet_14

LANGUAGE: python
CODE:
```
association_table = Table(
            "association_table",
            Base.metadata,
            Column("left_id", ForeignKey("left_table.id"), primary_key=True),
            Column("right_id", ForeignKey("right_table.id"), primary_key=True),
        )
```

----------------------------------------

TITLE: Initializing SQLAlchemy MetaData Object - Python
DESCRIPTION: Initializes a MetaData object, which serves as a collection to hold Table objects. This is the starting point for programmatically defining database schema using SQLAlchemy Core.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/tutorial/metadata.rst#_snippet_0

LANGUAGE: Python
CODE:
```
from sqlalchemy import MetaData
metadata_obj = MetaData()
```

----------------------------------------

TITLE: Managing Session Lifecycle with scoped_session (Thread-Local) - Python
DESCRIPTION: Illustrates the typical sequence of operations when using SQLAlchemy's `scoped_session` with a thread-local scope in a web request context. Shows how to acquire a session, perform operations (execute, add), commit changes, and remove the session at the end of the request lifecycle. Requires the `scoped_session` registry to be initialized.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/contextual.rst#_snippet_7

LANGUAGE: python
CODE:
```
# web request starts -> acquire the thread-local Session
Session()

# use the Session
Session.execute(select(MyClass))
Session.add(some_object)

# if data was modified, commit the transaction
Session.commit()

# web request ends  -> remove the Session
Session.remove()
```

----------------------------------------

TITLE: Using Joined Eager Loading as Query Option in SQLAlchemy ORM
DESCRIPTION: Demonstrates applying joined eager loading for the `User.addresses` relationship using the `joinedload` option on a SQLAlchemy `select` statement. Includes the Python code to execute the query and the resulting SQL statement generated by SQLAlchemy.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/queryguide/relationships.rst#_snippet_18

LANGUAGE: python
CODE:
```
from sqlalchemy import select
from sqlalchemy.orm import joinedload
>>> stmt = select(User).options(joinedload(User.addresses)).filter_by(name="spongebob")
>>> spongebob = session.scalars(stmt).unique().all()
```

LANGUAGE: sql
CODE:
```
SELECT
    addresses_1.id AS addresses_1_id,
    addresses_1.email_address AS addresses_1_email_address,
    addresses_1.user_id AS addresses_1_user_id,
    users.id AS users_id, users.name AS users_name,
    users.fullname AS users_fullname,
    users.nickname AS users_nickname
FROM users
LEFT OUTER JOIN addresses AS addresses_1
    ON users.id = addresses_1.user_id
WHERE users.name = ?
['spongebob']
```

----------------------------------------

TITLE: Explicit Transaction with Engine.begin() - SQLAlchemy Core
DESCRIPTION: Shows the recommended 2.0 style for managing transactions using the `Engine.begin()` context manager. This ensures that all operations within the `with` block are part of a single transaction, which is automatically committed upon successful exit or rolled back on error.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_20.rst#_snippet_10

LANGUAGE: python
CODE:
```
with engine.begin() as conn:
    conn.execute(some_table.insert().values(foo="bar"))
    conn.execute(some_other_table.insert().values(bat="hoho"))
```

----------------------------------------

TITLE: Checking IN Operator SQLAlchemy Python
DESCRIPTION: Demonstrates using the `.in_()` method with a list of values on a SQLAlchemy `column` object. The output shows the generated SQL using SQLAlchemy's post-compile parameter format, indicating it handles the list efficiently.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/core/operators.rst#_snippet_7

LANGUAGE: Python
CODE:
```
print(column("x").in_([1, 2, 3]))
```

----------------------------------------

TITLE: SQLAlchemy: 2.0 Recommended 'Commit As You Go' Explicit
DESCRIPTION: Demonstrates the SQLAlchemy 2.0 pattern for executing multiple statements and explicitly committing changes within a connection checkout using `conn.commit()`, allowing for zero or more commits per checkout.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_20.rst#_snippet_23

LANGUAGE: Python
CODE:
```
# "commit as you go" - zero or more commits per checkout
with engine.connect() as conn:
    result = conn.execute(stmt)
    conn.commit()
```

----------------------------------------

TITLE: Accessing Mapped Rows with ORM Session (2.0 Style) - Python
DESCRIPTION: Demonstrates how to retrieve results as mappings when using the ORM Session in SQLAlchemy 2.0 style by calling the `mappings()` method on the result object. This allows accessing columns by string key. Requires an ORM Session and a statement (`stmt`).
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_20.rst#_snippet_28

LANGUAGE: python
CODE:
```
from sqlalchemy.future.orm import Session

session = Session(some_engine)

result = session.execute(stmt)
for row in result.mappings():
    print("the user is: %s" % row["User"])
```

----------------------------------------

TITLE: Log SQL Query Start Time using SQLAlchemy Events
DESCRIPTION: This Python snippet demonstrates how to use SQLAlchemy's event system to log the start time and statement of each SQL query executed via an Engine. It attaches a listener function to the 'before_cursor_execute' event of the Engine class, storing the start time in connection info and logging the SQL statement for profiling purposes.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/faq/performance.rst#_snippet_0

LANGUAGE: Python
CODE:
```
from sqlalchemy import event
from sqlalchemy.engine import Engine
import time
import logging

logging.basicConfig()
logger = logging.getLogger("myapp.sqltime")
logger.setLevel(logging.DEBUG)


@event.listens_for(Engine, "before_cursor_execute")
def before_cursor_execute(conn, cursor, statement, parameters, context, executemany):
    conn.info.setdefault("query_start_time", []).append(time.time())
    logger.debug("Start Query: %s", statement)
```

----------------------------------------

TITLE: Fetch All Objects (SQLAlchemy 2.0 - scalars())
DESCRIPTION: Shows an alternative, more concise 2.0 style for fetching all objects. It directly uses `Session.scalars` with a `select` construct, followed by `.all()`. Requires a configured SQLAlchemy session, mapped User class, and the `select` function.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_20.rst#_snippet_40

LANGUAGE: Python
CODE:
```
session.scalars(
  select(User)
).all()
```

----------------------------------------

TITLE: Fetching First Object with Core Select via Session.execute().scalars().first()
DESCRIPTION: The SQLAlchemy 2.0 approach to fetching the first object using Session.execute() with a Core select() construct. It often includes limit(1) for efficiency and uses scalars().first() to get the ORM object.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_20.rst#_snippet_64

LANGUAGE: Python
CODE:
```
# for first(), no LIMIT is applied automatically; add limit(1) if LIMIT
# is desired on the query
user = (
    session.execute(select(User).filter_by(name="some user").limit(1)).scalars().first()
)
```

----------------------------------------

TITLE: SQL Rollback Command
DESCRIPTION: Executes a SQL ROLLBACK command, typically used to end a transaction and discard changes.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/tutorial/data_select.rst#_snippet_69

LANGUAGE: sql
CODE:
```
ROLLBACK
```

----------------------------------------

TITLE: Using Session.begin() Context Manager for Automatic Commit
DESCRIPTION: Demonstrates using the Session.begin() class method as a context manager to acquire a session within an automatically managed transaction block. The transaction is committed upon exiting the 'with' block successfully or rolled back on error.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/session_transaction.rst#_snippet_13

LANGUAGE: Python
CODE:
```
Session = sessionmaker(engine)

with Session.begin() as session:
    session.add_all(
        [
            SomeClass(data="some data one"),
            SomeClass(data="some data two"),
            SomeClass(data="some data three"),
        ]
    )
# commits and closes automatically
```

----------------------------------------

TITLE: Explicitly Beginning a Session Transaction with Context Manager
DESCRIPTION: Shows the idiomatic approach to explicitly begin a transaction on a Session using session.begin() as a context manager. This pattern automatically handles the commit or rollback based on the success or failure of the 'with' block.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/session_transaction.rst#_snippet_17

LANGUAGE: Python
CODE:
```
Session = sessionmaker(bind=engine)
session = Session()
with session.begin():
    item1 = session.get(Item, 1)
    item2 = session.get(Item, 2)
    item1.foo = "bar"
    item2.bar = "foo"
```

----------------------------------------

TITLE: Illustrating ORM Change Detection with Mutable Types in SQLAlchemy
DESCRIPTION: Demonstrates how SQLAlchemy's ORM detects changes in custom types. Direct modification of an object's attribute (e.g., `obj.json_value["key"] = "value"`) is not detected, requiring replacement of the entire attribute value (`obj.json_value = {...}`) for changes to be flushed.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/core/custom_types.rst#_snippet_8

LANGUAGE: Python
CODE:
```
obj.json_value["key"] = "value"  # will *not* be detected by the ORM

obj.json_value = {"key": "value"}  # *will* be detected by the ORM
```

----------------------------------------

TITLE: Execute ORM Select from Raw SQL Statement in SQLAlchemy
DESCRIPTION: Shows how to execute a raw SQL statement using session.execute and map the results to ORM entities (User) using the from_statement and scalars methods. This allows using raw SQL while still getting ORM objects back.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_20.rst#_snippet_68

LANGUAGE: python
CODE:
```
users = (
    session.execute(select(User).from_statement(text("select * from users")))
    .scalars()
    .all()
)
```

----------------------------------------

TITLE: Handling Timezone-Aware Datetimes with TypeDecorator (Python)
DESCRIPTION: This SQLAlchemy `TypeDecorator` handles timezone-aware Python `datetime` objects. It converts incoming timezone-aware values to timezone-naive UTC before storing them in the database and converts stored naive values back to timezone-aware UTC upon retrieval. Requires the input `datetime` object to have timezone information.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/core/custom_types.rst#_snippet_3

LANGUAGE: python
CODE:
```
import datetime


class TZDateTime(TypeDecorator):
    impl = DateTime
    cache_ok = True

    def process_bind_param(self, value, dialect):
        if value is not None:
            if not value.tzinfo or value.tzinfo.utcoffset(value) is None:
                raise TypeError("tzinfo is required")
            value = value.astimezone(datetime.timezone.utc).replace(tzinfo=None)
        return value

    def process_result_value(self, value, dialect):
        if value is not None:
            value = value.replace(tzinfo=datetime.timezone.utc)
        return value
```

----------------------------------------

TITLE: Closing SQLAlchemy ORM Session
DESCRIPTION: Demonstrates how to close an ORM Session using the `session.close()` method. This action rolls back any in-progress transaction, expunges all objects from the session, and releases database connections back to the engine's connection pool.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/session_transaction.rst#_snippet_3

LANGUAGE: Python
CODE:
```
session.close()
```

----------------------------------------

TITLE: Using AsyncResult and AsyncConnection as Context Managers (Python)
DESCRIPTION: Demonstrates the async context manager support for `AsyncConnection` and `AsyncResult` in SQLAlchemy's asyncio extension. Using `async with` ensures proper asynchronous resource management and cursor closing.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/whatsnew_20.rst#_snippet_36

LANGUAGE: Python
CODE:
```
async with async_engine.connect() as conn:
    async with conn.execution_options(yield_per=100).execute(
        text("select * from table")
    ) as result:
        for row in result:
            print(f"{row}")
```

----------------------------------------

TITLE: Demonstrating Context Manager Use - SQLAlchemy Python
DESCRIPTION: This snippet shows how SQLAlchemy's Connection and Engine objects can be used as context managers. Using `with conn.connect()` returns a branched connection that can be closed independently, leaving the original connection open. Using `with engine.connect()` returns a connection from the engine's pool which is automatically returned to the pool (or closed if detached/invalidated) upon exiting the `with` block.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/changelog_08.rst#_snippet_3

LANGUAGE: python
CODE:
```
with conn.connect() as c:  # leaves the Connection open
    c.execute("...")

with engine.connect() as c:  # closes the Connection
    c.execute("...")
```

----------------------------------------

TITLE: Building ORM SELECT with SQLAlchemy Lambda (Python)
DESCRIPTION: Defines a Python function `select_user` that constructs a cached ORM SELECT statement using `lambda_stmt`. It selects a mapped class `User` and adds a WHERE clause based on the user's name. The example shows executing this statement using an ORM `Session` and retrieving the first row. This illustrates compatibility with ORM constructs.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/core/connections.rst#_snippet_44

LANGUAGE: python
CODE:
```
def select_user(session, name):
    stmt = lambda_stmt(lambda: select(User))
    stmt += lambda s: s.where(User.name == name)

    row = session.execute(stmt).first()
    return row
```

----------------------------------------

TITLE: Accessing ORM Row Data by Column (Python)
DESCRIPTION: Demonstrates various ways to access elements within a SQLAlchemy ORM Row object when the query selects specific columns. Shows accessing data using the column object, the column's string name, or the column object referenced via the table's .c attribute.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_14.rst#_snippet_62

LANGUAGE: Python
CODE:
```
row = s.query(User.id, Address.email_address).join(User.addresses).first()

row._mapping[User.id]  # same as row[0]
row._mapping["id"]  # same as row[0]
row._mapping[users.c.id]  # same as row[0]
```

----------------------------------------

TITLE: Selecting Specific Columns from Mapped Class
DESCRIPTION: Shows how to select specific columns (attributes) from an ORM mapped class using the select construct. The result is typed as a tuple of the selected column types.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/whatsnew_20.rst#_snippet_5

LANGUAGE: Python
CODE:
```
from sqlalchemy import select
from sqlalchemy.orm import Session

with Session(engine) as session:
    # (variable) stmt: Select[Tuple[int, str]]
    stmt_1 = select(User.id, User.name)

    # (variable) result_1: Result[Tuple[int, str]]
    result_1 = session.execute(stmt_1)

    # (variable) intval: int
    # (variable) strval: str
    intval, strval = result_1.one().t
```

----------------------------------------

TITLE: Running Sync ORM Code with AsyncSession.run_sync - SQLAlchemy Python
DESCRIPTION: Illustrates how to execute traditional synchronous SQLAlchemy ORM code, including lazy loading and legacy Query API use, within an asyncio application by wrapping it in a function and calling `await session.run_sync()`.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/extensions/asyncio.rst#_snippet_1

LANGUAGE: python
CODE:
```
    import asyncio

    from sqlalchemy import select
    from sqlalchemy.ext.asyncio import AsyncSession, create_async_engine


    def fetch_and_update_objects(session):
        """run traditional sync-style ORM code in a function that will be
        invoked within an awaitable.

        """

        # the session object here is a traditional ORM Session.
        # all features are available here including legacy Query use.

        stmt = select(A)

        result = session.execute(stmt)
        for a1 in result.scalars():
            print(a1)

            # lazy loads
            for b1 in a1.bs:
                print(b1)

        # legacy Query use
        a1 = session.query(A).order_by(A.id).first()

        a1.data = "new data"


    async def async_main():
        engine = create_async_engine(
            "postgresql+asyncpg://scott:tiger@localhost/test",
            echo=True,
        )
        async with engine.begin() as conn:
            await conn.run_sync(Base.metadata.drop_all)
            await conn.run_sync(Base.metadata.create_all)

        async with AsyncSession(engine) as session:
            async with session.begin():
                session.add_all(
                    [
                        A(bs=[B(), B()], data="a1"),
                        A(bs=[B()], data="a2"),
                        A(bs=[B(), B()], data="a3"),
                    ]
                )

            await session.run_sync(fetch_and_update_objects)

            await session.commit()

        # for AsyncEngine created in function scope, close and
        # clean-up pooled connections
        await engine.dispose()


    asyncio.run(async_main())
```

----------------------------------------

TITLE: Creating SQLAlchemy Pool with Default Dialect Pool (Python)
DESCRIPTION: Demonstrates how to create a connection pool instance directly using `create_pool_from_url`. It obtains the default pool type for the specified URL's dialect (`MySQLdb`) and configures parameters like `max_overflow`, `pool_size`, and `pre_ping`. Shows how to acquire a connection and close it. Requires the SQLAlchemy library.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/core/pooling.rst#_snippet_16

LANGUAGE: Python
CODE:
```
from sqlalchemy import create_pool_from_url

my_pool = create_pool_from_url(
    "mysql+mysqldb://", max_overflow=5, pool_size=5, pre_ping=True
)

con = my_pool.connect()
# use the connection
...
# then close it
con.close()
```

----------------------------------------

TITLE: Persisting ORM Objects via Session - Python
DESCRIPTION: This snippet demonstrates how to create instances of the defined ORM models and save them to the database. It uses a SQLAlchemy `Session` to manage the interaction, adding new `User` objects (some with related `Address` objects) and then committing the session to write these objects into the database tables.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/quickstart.rst#_snippet_3

LANGUAGE: Python
CODE:
```
from sqlalchemy.orm import Session

with Session(engine) as session:
    spongebob = User(
        name="spongebob",
        fullname="Spongebob Squarepants",
        addresses=[Address(email_address="spongebob@sqlalchemy.org")],
    )
    sandy = User(
        name="sandy",
        fullname="Sandy Cheeks",
        addresses=[
            Address(email_address="sandy@sqlalchemy.org"),
            Address(email_address="sandy@squirrelpower.org"),
        ],
    )
    patrick = User(name="patrick", fullname="Patrick Star")

    session.add_all([spongebob, sandy, patrick])

    session.commit()
```

----------------------------------------

TITLE: Rolling Back SQLAlchemy Session (Python/SQL)
DESCRIPTION: Rolls back the current transaction associated with the session. This cancels any pending database changes and also expires all objects currently associated with the session.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/tutorial/orm_data_manipulation.rst#_snippet_21

LANGUAGE: Python/SQL
CODE:
```
>>> session.rollback()
ROLLBACK
```

----------------------------------------

TITLE: Executing Select for ORM Entity (Scalars) - SQLAlchemy Python
DESCRIPTION: Executes a SQLAlchemy SELECT statement targeting a full ORM entity (`User`) using the `Session.scalars` method. This method returns a scalar result, directly yielding entity instances from the first column of each row.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/tutorial/data_select.rst#_snippet_8

LANGUAGE: Python
CODE:
```
user = session.scalars(select(User)).first()
```

----------------------------------------

TITLE: Configuring Declarative Mapper - Single Table Inheritance
DESCRIPTION: This snippet illustrates configuring single-table inheritance using `__mapper_args__`. The base class specifies the `polymorphic_on` column that discriminates the type and its own `polymorphic_identity`, while subclasses specify their unique `polymorphic_identity` within their own `__mapper_args__`.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/declarative_config.rst#_snippet_4

LANGUAGE: Python
CODE:
```
class Person(Base):
    __tablename__ = "person"

    person_id = mapped_column(Integer, primary_key=True)
    type = mapped_column(String, nullable=False)

    __mapper_args__ = dict(
        polymorphic_on=type,
        polymorphic_identity="person",
    )


class Employee(Person):
    __mapper_args__ = dict(
        polymorphic_identity="employee",
    )
```

----------------------------------------

TITLE: Executing ORM Update with Session Options (Python)
DESCRIPTION: Demonstrates executing an ORM update statement using `session.execute` and passing the `synchronize_session` option via the `execution_options` dictionary argument to control how the session's identity map is synchronized.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/queryguide/dml.rst#_snippet_26

LANGUAGE: Python
CODE:
```
from sqlalchemy import update
stmt = (
    update(User).where(User.name == "squidward").values(fullname="Squidward Tentacles")
)
session.execute(stmt, execution_options={"synchronize_session": False})
```

----------------------------------------

TITLE: Loading Single Object with Scalars - SQLAlchemy Python
DESCRIPTION: This snippet demonstrates loading a single instance of `SomeClass` using `session.scalars()` combined with a `select()` construct and `limit(1)`. `scalars()` is used to retrieve the primary ORM object results directly from the scalar results returned by the `select` statement.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/faq/sessions.rst#_snippet_7

LANGUAGE: python
CODE:
```
o = session.scalars(select(SomeClass).limit(1)).first()
```

----------------------------------------

TITLE: Invalid: Embedding SELECT in FROM Clause - Python
DESCRIPTION: This Python snippet demonstrates an outdated pattern where one SELECT statement (`stmt1`) is directly embedded into the FROM clause of another SELECT statement (`stmt2`). As of SQLAlchemy 1.4, this is no longer allowed and will raise an ArgumentError. Users must explicitly call `.subquery()` on the inner SELECT statement to convert it into a valid FROM clause.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_14.rst#_snippet_9

LANGUAGE: python
CODE:
```
stmt1 = select(user.c.id, user.c.name)
stmt2 = select(addresses, stmt1).select_from(addresses.join(stmt1))
```

----------------------------------------

TITLE: Initializing SQLAlchemy scoped_session Python
DESCRIPTION: This snippet shows the basic setup for using `scoped_session`. It imports the necessary classes, creates a `sessionmaker` configured with an engine (`some_engine` assumed), and then passes this factory to `scoped_session` to create a registry object named `Session`. This registry will manage `Session` instances.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/contextual.rst#_snippet_0

LANGUAGE: Python
CODE:
```
from sqlalchemy.orm import scoped_session
from sqlalchemy.orm import sessionmaker

session_factory = sessionmaker(bind=some_engine)
Session = scoped_session(session_factory)
```

----------------------------------------

TITLE: Configuring Pessimistic Ping in SQLAlchemy (Python)
DESCRIPTION: Explains how to use the built-in `pool_pre_ping` argument when creating a SQLAlchemy engine to enable automatic connection testing upon checkout. This helps detect and replace stale connections proactively.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/core/pooling.rst#_snippet_6

LANGUAGE: Python
CODE:
```
engine = create_engine("mysql+pymysql://user:pw@host/db", pool_pre_ping=True)
```

----------------------------------------

TITLE: Defining Conflicting SQLAlchemy Relationships (Python)
DESCRIPTION: Defines `Parent` and `Child` models with relationships `Parent.children` and `Child.parent` that manage the same foreign key column `child.parent_id`. Without `back_populates`, SQLAlchemy detects a potential conflict where both relationships might try to write to the same column, leading to a warning.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/errors.rst#_snippet_29

LANGUAGE: Python
CODE:
```
class Parent(Base):
    __tablename__ = "parent"
    id = Column(Integer, primary_key=True)
    children = relationship("Child")


class Child(Base):
    __tablename__ = "child"
    id = Column(Integer, primary_key=True)
    parent_id = Column(ForeignKey("parent.id"))
    parent = relationship("Parent")
```

----------------------------------------

TITLE: Configuring Annotated One-to-One Relationship - Python
DESCRIPTION: This example shows how to configure a One-to-One relationship using annotated Mapped types in SQLAlchemy. By applying a non-collection type (e.g., `Mapped["Child"]`) to the relationship annotation on both sides, the ORM implies a one-to-one convention.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/basic_relationships.rst#_snippet_9

LANGUAGE: python
CODE:
```
class Parent(Base):
    __tablename__ = "parent_table"

    id: Mapped[int] = mapped_column(primary_key=True)
    child: Mapped["Child"] = relationship(back_populates="parent")


class Child(Base):
    __tablename__ = "child_table"

    id: Mapped[int] = mapped_column(primary_key=True)
    parent_id: Mapped[int] = mapped_column(ForeignKey("parent_table.id"))
    parent: Mapped["Parent"] = relationship(back_populates="child")
```

----------------------------------------

TITLE: Mapping Python uuid.UUID to Custom GUID Type in ORM (Python)
DESCRIPTION: This example demonstrates how to automatically associate the custom `GUID` `TypeDecorator` with the Python `uuid.UUID` type in SQLAlchemy ORM. By adding the mapping to the `type_annotation_map` on the `DeclarativeBase`, ORM mapped columns annotated with `uuid.UUID` will automatically use the `GUID` type.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/core/custom_types.rst#_snippet_6

LANGUAGE: python
CODE:
```
import uuid
from sqlalchemy.orm import DeclarativeBase, Mapped, mapped_column


class Base(DeclarativeBase):
    type_annotation_map = {
        uuid.UUID: GUID,
    }

class MyModel(Base):
    __tablename__ = "my_table"

    id: Mapped[uuid.UUID] = mapped_column(primary_key=True)
```

----------------------------------------

TITLE: Adding Single WHERE Clause to SQLAlchemy Select (Python)
DESCRIPTION: Shows how to add a single boolean expression as a `WHERE` clause to a SQLAlchemy `Select` statement using the `where()` method. Prints the resulting SQL statement. Requires `user_table`.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/tutorial/data_select.rst#_snippet_23

LANGUAGE: Python
CODE:
```
print(select(user_table).where(user_table.c.name == "squidward"))
```

----------------------------------------

TITLE: Performing Bulk ORM Insert with RETURNING in Python
DESCRIPTION: This example demonstrates using SQLAlchemy ORM's Session.scalars() with an insert() construct and the returning(User) method to execute a bulk insert and retrieve the newly created User objects. It includes the Python code, the generated SQL with RETURNING, and the resulting list of ORM objects. This feature requires a database backend that supports SQL RETURNING and executemany with RETURNING.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/queryguide/dml.rst#_snippet_2

LANGUAGE: Python (Interactive Trace)
CODE:
```
>>> users = session.scalars(
...     insert(User).returning(User),
...     [
...         {"name": "spongebob", "fullname": "Spongebob Squarepants"},
...         {"name": "sandy", "fullname": "Sandy Cheeks"},
...         {"name": "patrick", "fullname": "Patrick Star"},
...         {"name": "squidward", "fullname": "Squidward Tentacles"},
...         {"name": "ehkrabs", "fullname": "Eugene H. Krabs"},
...     ],
... )
{execsql}INSERT INTO user_account (name, fullname)
VALUES (?, ?), (?, ?), (?, ?), (?, ?), (?, ?)
RETURNING id, name, fullname, species
[...] ('spongebob', 'Spongebob Squarepants', 'sandy', 'Sandy Cheeks',
'patrick', 'Patrick Star', 'squidward', 'Squidward Tentacles',
'ehkrabs', 'Eugene H. Krabs')
{stop}>>> print(users.all())
[User(name='spongebob', fullname='Spongebob Squarepants'),
 User(name='sandy', fullname='Sandy Cheeks'),
 User(name='patrick', fullname='Patrick Star'),
 User(name='squidward', fullname='Squidward Tentacles'),
 User(name='ehkrabs', fullname='Eugene H. Krabs')]
```

----------------------------------------

TITLE: Defining Folder ORM Mapping (Composite Adjacency List) with SQLAlchemy
DESCRIPTION: Defines the `Folder` class with a composite primary key (`account_id`, `folder_id`) and a composite self-referential foreign key linking to the parent folder's composite key. It uses `ForeignKeyConstraint` and defines `parent_folder` (many-to-one) and `child_folders` (one-to-many) relationships linked with `back_populates`. `remote_side=[account_id, folder_id]` specifies the remote columns for the `parent_folder` relationship.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/self_referential.rst#_snippet_3

LANGUAGE: Python
CODE:
```
class Folder(Base):
    __tablename__ = "folder"
    __table_args__ = (
        ForeignKeyConstraint(
            ["account_id", "parent_id"], ["folder.account_id", "folder.folder_id"]
        ),
    )

    account_id = mapped_column(Integer, primary_key=True)
    folder_id = mapped_column(Integer, primary_key=True)
    parent_id = mapped_column(Integer)
    name = mapped_column(String)

    parent_folder = relationship(
        "Folder", back_populates="child_folders", remote_side=[account_id, folder_id]
    )

    child_folders = relationship("Folder", back_populates="parent_folder")
```

----------------------------------------

TITLE: FROM Clause with Explicit JOIN (SQL)
DESCRIPTION: This SQL snippet demonstrates the 'FROM clause' using an explicit `JOIN` operation. This is the preferred modern syntax for combining data from multiple tables, clearly defining the relationship and join condition between the tables.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/glossary.rst#_snippet_11

LANGUAGE: SQL
CODE:
```
SELECT user.name, address.email_address
FROM user JOIN address ON user.id=address.user_id
```

----------------------------------------

TITLE: Subqueryload with Order By and Limit - SQLAlchemy Python
DESCRIPTION: Provides the recommended solution to the `LIMIT` issue with `subqueryload`. By adding `order_by(User.id)`, the main query becomes deterministic, ensuring the subquery receives a consistent set of rows to join against and loads the correct related collections.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/faq/ormconfiguration.rst#_snippet_17

LANGUAGE: python
CODE:
```
session.scalars(
    select(User).options(subqueryload(User.addresses)).order_by(User.id).limit(1)
).first()
```

----------------------------------------

TITLE: Creating DeclarativeBase with Existing Registry (SQLAlchemy, Python)
DESCRIPTION: Demonstrates how to create a Declarative Base class and associate it with an already existing `registry` object. The `registry` instance is assigned to a class variable named `registry` on the `DeclarativeBase` subclass.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/declarative_styles.rst#_snippet_1

LANGUAGE: Python
CODE:
```
from sqlalchemy.orm import DeclarativeBase
from sqlalchemy.orm import registry

reg = registry()


# declarative base class
class Base(DeclarativeBase):
    registry = reg
```

----------------------------------------

TITLE: Executing SQL String/Expression with Session (ORM)
DESCRIPTION: Explains how to execute arbitrary SQL strings or SQLAlchemy expression constructs directly through the ORM Session's transaction context using `session.execute()`. The method returns a CursorResult similar to executing on a Connection or Engine.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/persistence_techniques.rst#_snippet_3

LANGUAGE: Python
CODE:
```
Session = sessionmaker(bind=engine)
session = Session()

# execute a string statement
result = session.execute(text("select * from table where id=:id"), {"id": 7})

# execute a SQL expression construct
result = session.execute(select(mytable).where(mytable.c.id == 7))
```

----------------------------------------

TITLE: Executing Tuple IN Query SQLAlchemy Python
DESCRIPTION: Shows the execution of a query using `tuple_.in_()` with a list of tuple values. It demonstrates how a tuple comparison within a `WHERE` clause translates to SQL for matching composite values.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/core/operators.rst#_snippet_13

LANGUAGE: Python
CODE:
```
tup = tuple_(User.id, Address.id)
stmt = select(User.name).join(Address).where(tup.in_([(1, 1), (2, 2)]))
conn.execute(stmt).all()
```

----------------------------------------

TITLE: Comparing Less Than or Equal SQLAlchemy Python
DESCRIPTION: Demonstrates using the Python `<=` operator on a SQLAlchemy `column` object to generate a SQL less-than-or-equal-to expression. The output shows the generated SQL with a bound parameter.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/core/operators.rst#_snippet_5

LANGUAGE: Python
CODE:
```
print(column("x") <= 5)
```

----------------------------------------

TITLE: Defining Table with Columns and Constraints in SQLAlchemy Python
DESCRIPTION: This code defines a `Table` named "user" associated with the previously created `metadata_obj`. It includes four `Column` definitions with specified names, datatypes (`Integer`, `String`), constraints (`primary_key`, `nullable`), and lengths. This object represents the schema of the 'user' table in the database.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/core/metadata.rst#_snippet_1

LANGUAGE: python
CODE:
```
from sqlalchemy import Table, Column, Integer, String

user = Table(
    "user",
    metadata_obj,
    Column("user_id", Integer, primary_key=True),
    Column("user_name", String(16), nullable=False),
    Column("email_address", String(60)),
    Column("nickname", String(50), nullable=False),
)
```

----------------------------------------

TITLE: Accessing Expired Attribute in SQLAlchemy ORM (Python+SQL)
DESCRIPTION: Demonstrates accessing an attribute on an ORM object that is in the 'expired' state. This action triggers an implicit transaction and refreshes the object's state from the database, as shown by the executed SQL query.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/tutorial/orm_data_manipulation.rst#_snippet_23

LANGUAGE: pycon+sql
CODE:
```
>>> sandy.fullname
{execsql}BEGIN (implicit)
SELECT user_account.id AS user_account_id, user_account.name AS user_account_name,
user_account.fullname AS user_account_fullname
FROM user_account
WHERE user_account.id = ?
[...] (2,){stop}
'Sandy Cheeks'
```

----------------------------------------

TITLE: Defining SQLAlchemy Declarative Model with Custom Types
DESCRIPTION: This snippet defines a SQLAlchemy Declarative model `SomeClass` with a table named "some_table". It demonstrates the use of custom `Mapped` types (`str_30`, `str_50`, `num_12_4`, `num_6_2`) for defining column types and sizes, with `short_name` designated as the primary key.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/declarative_tables.rst#_snippet_34

LANGUAGE: Python
CODE:
```
__tablename__ = "some_table"

short_name: Mapped[str_30] = mapped_column(primary_key=True)
long_name: Mapped[str_50]
num_value: Mapped[num_12_4]
short_num_value: Mapped[num_6_2]
```

----------------------------------------

TITLE: Using with_expression with UNIONs in SQLAlchemy ORM
DESCRIPTION: This comprehensive snippet demonstrates how to use `with_expression` to apply a column from a UNION statement to an ORM entity. It constructs two select statements, combines them with `union_all`, and then selects from the union using `from_statement`, applying `with_expression` to map the subquery column to the ORM attribute.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/queryguide/columns.rst#_snippet_30

LANGUAGE: python
CODE:
```
from sqlalchemy import union_all
import sqlalchemy.func as func

s1 = (
    select(User, func.count(Book.id).label("book_count"))
    .join_from(User, Book)
    .where(User.name == "spongebob")
)
s2 = (
    select(User, func.count(Book.id).label("book_count"))
    .join_from(User, Book)
    .where(User.name == "sandy")
)
union_stmt = union_all(s1, s2)
orm_stmt = (
    select(User)
    .from_statement(union_stmt)
    .options(with_expression(User.book_count, union_stmt.selected_columns.book_count))
)
for user in session.scalars(orm_stmt):
    print(f"Username: {user.name}  Number of books: {user.book_count}")
```

----------------------------------------

TITLE: Defining Many-to-Many Relationship with Set using Mapped
DESCRIPTION: This snippet demonstrates how to define a many-to-many relationship using SQLAlchemy ORM's declarative style with type annotations (`Mapped`) and the `relationship.secondary` parameter. It specifically shows using a `Set` for the collection type. The `Parent` class is linked to a `Child` class via an `association_table` (not shown).
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/basic_relationships.rst#_snippet_16

LANGUAGE: Python
CODE:
```
class Parent(Base):
    __tablename__ = "left_table"

    id: Mapped[int] = mapped_column(primary_key=True)
    children: Mapped[Set["Child"]] = relationship(secondary=association_table)
```

----------------------------------------

TITLE: Managing SQLAlchemy ORM Session and Transaction Scope with sessionmaker Context Manager
DESCRIPTION: Illustrates using a `sessionmaker` instance as a context manager to manage the session's lifecycle. It shows combining this with the `session.begin()` context manager for transaction control within the session's scope.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/session_transaction.rst#_snippet_5

LANGUAGE: Python
CODE:
```
Session = sessionmaker(engine)

with Session() as session:
    with session.begin():
        session.add(some_object)
    # commits

# closes the Session
```

----------------------------------------

TITLE: Configuring scoped_session with Custom Scope Function - Python
DESCRIPTION: Demonstrates how to configure SQLAlchemy's `scoped_session` to use a custom scope function (like a framework's `get_current_request`) instead of the default thread-local scope. It also shows how to integrate the session removal process with a hypothetical web framework's "on request end" event. Requires a web framework providing the scope function and request lifecycle events, and SQLAlchemy.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/contextual.rst#_snippet_8

LANGUAGE: python
CODE:
```
from my_web_framework import get_current_request, on_request_end
from sqlalchemy.orm import scoped_session, sessionmaker

Session = scoped_session(sessionmaker(bind=some_engine), scopefunc=get_current_request)


@on_request_end
def remove_session(req):
    Session.remove()
```

----------------------------------------

TITLE: Defining SQLAlchemy Delete with Returning Clause - Python
DESCRIPTION: This snippet demonstrates how to build an SQLAlchemy `Delete` construct using the fluent API. It filters rows by name and includes a `returning` clause to select specific columns (`id` and `name`) from the deleted rows.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/tutorial/data_update.rst#_snippet_12

LANGUAGE: Python
CODE:
```
delete_stmt = (
    delete(user_table)
    .where(user_table.c.name == "patrick")
    .returning(user_table.c.id, user_table.c.name)
)
```

----------------------------------------

TITLE: Using Scoped Session
DESCRIPTION: Shows how to wrap a 'sessionmaker' with 'scoped_session'. This provides a factory function that returns a thread-local session instance, simplifying session management in multi-threaded applications.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_04.rst#_snippet_15

LANGUAGE: Python
CODE:
```
from sqlalchemy.orm import scoped_session, sessionmaker

Session = scoped_session(sessionmaker(autoflush=True, transactional=True))
```

----------------------------------------

TITLE: Using SQLAlchemy Type with Backend Variant - Python
DESCRIPTION: Illustrates how to use the `TypeEngine.with_variant` method to define a column type that behaves generically on most backends (`String`) but applies specific arguments or uses a different 'UPPERCASE' type (`mysql.VARCHAR`) when a particular dialect (MySQL, MariaDB) is used. Shows conditional application of backend-specific type features.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/core/type_basics.rst#_snippet_1

LANGUAGE: Python
CODE:
```
from sqlalchemy import MetaData
from sqlalchemy import Table, Column, Integer, String
from sqlalchemy.dialects.mysql import VARCHAR

metadata_obj = MetaData()

user = Table(
    "user",
    metadata_obj,
    Column("user_name", String(100), primary_key=True),
    Column(
        "bio",
        String(255).with_variant(VARCHAR(255, charset="utf8"), "mysql", "mariadb"),
    ),
)
```

----------------------------------------

TITLE: Preferred Method for Using SQLAlchemy AUTOCOMMIT with Separate Connections
DESCRIPTION: Illustrates the recommended pattern for using different isolation levels, such as AUTOCOMMIT, by utilizing separate SQLAlchemy Connection checkouts. This allows the engine to handle isolation level resetting automatically upon connection checkin.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/core/connections.rst#_snippet_17

LANGUAGE: python
CODE:
```
# use an autocommit block
with engine.connect().execution_options(isolation_level="AUTOCOMMIT") as connection:
    # run statement in autocommit mode
    connection.execute(text("<statement>"))

# use a regular block
with engine.begin() as connection:
    connection.execute(text("<statement>"))
```

----------------------------------------

TITLE: Mapping Python Enum to SQLAlchemy Column Type
DESCRIPTION: This snippet demonstrates how to map a Python `enum.Enum` class (`Status`) directly to a SQLAlchemy column type using `Mapped`. SQLAlchemy automatically links the `Status` enum to its `Enum` datatype, allowing database columns to store and validate values based on the enum members.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/declarative_tables.rst#_snippet_43

LANGUAGE: Python
CODE:
```
import enum

from sqlalchemy.orm import DeclarativeBase
from sqlalchemy.orm import Mapped
from sqlalchemy.orm import mapped_column


class Base(DeclarativeBase):
    pass


class Status(enum.Enum):
    PENDING = "pending"
    RECEIVED = "received"
    COMPLETED = "completed"


class SomeClass(Base):
    __tablename__ = "some_table"

    id: Mapped[int] = mapped_column(primary_key=True)
    status: Mapped[Status]
```

----------------------------------------

TITLE: Check SQLAlchemy Version Python
DESCRIPTION: This Python snippet demonstrates how to import the SQLAlchemy library and access its `__version__` attribute to verify the installed version. It's presented within a `doctest`-style interactive session context, suggesting it's intended to be run directly in a Python interpreter or via a testing tool like doctest.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/tutorial/index.rst#_snippet_0

LANGUAGE: Python
CODE:
```
>>> import sqlalchemy
>>> sqlalchemy.__version__  # doctest: +SKIP
2.1.0
```

----------------------------------------

TITLE: Creating Basic SQLAlchemy Core Update Statement
DESCRIPTION: Shows how to use the `update()` function to build an `UPDATE` statement. It includes specifying the target table (`user_table`), filtering rows with `.where()`, and setting column values using `.values()`. The printed output shows the generated SQL.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/tutorial/data_update.rst#_snippet_0

LANGUAGE: Python
CODE:
```
from sqlalchemy import update
stmt = (
    update(user_table)
    .where(user_table.c.name == "patrick")
    .values(fullname="Patrick the Star")
)
print(stmt)
```

LANGUAGE: SQL
CODE:
```
UPDATE user_account SET fullname=:fullname WHERE user_account.name = :name_1
```

----------------------------------------

TITLE: Retrieving Inserted Primary Key from Result
DESCRIPTION: Shows how to access the primary key value(s) of the newly inserted row from the result object returned by the execution. The result is returned as a tuple, even for single-column primary keys.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/tutorial/data_insert.rst#_snippet_5

LANGUAGE: Python
CODE:
```
result.inserted_primary_key
```

----------------------------------------

TITLE: Explicit Commit/Rollback with Future Connection - SQLAlchemy Python
DESCRIPTION: Illustrates the "commit as you go" transaction pattern in SQLAlchemy 1.4/2.0 using a connection created with `future=True`. The connection features "autobegin", starting a transaction implicitly on the first execute, allowing explicit `conn.commit()` and `conn.rollback()` calls to manage the transaction lifecycle. Requires an engine created with `future=True`.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_20.rst#_snippet_15

LANGUAGE: Python
CODE:
```
from sqlalchemy import create_engine

engine = create_engine(..., future=True)

with engine.connect() as conn:
    conn.execute(some_table.insert().values(foo="bar"))
    conn.commit()

    conn.execute(text("some other SQL"))
    conn.rollback()
```

----------------------------------------

TITLE: Applying Mutable Extension to JSONEncodedDict in SQLAlchemy
DESCRIPTION: Shows how to use the `sqlalchemy.ext.mutable.MutableDict.as_mutable` function to wrap the custom `JSONEncodedDict` type, enabling the SQLAlchemy ORM to detect in-place modifications to dictionary values stored using this type. The mutable type is then used for a column definition.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/core/custom_types.rst#_snippet_9

LANGUAGE: Python
CODE:
```
json_type = MutableDict.as_mutable(JSONEncodedDict)


class MyClass(Base):
    #  ...

    json_data = Column(json_type)
```

----------------------------------------

TITLE: Defining SQLAlchemy Hybrid Property (Python)
DESCRIPTION: Illustrates how to use `@hybrid_property` to create an attribute (`fullname`) that concatenates two other mapped columns (`firstname`, `lastname`). This property works at both the Python instance level and the SQL query level.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/mapped_sql_expr.rst#_snippet_0

LANGUAGE: Python
CODE:
```
from sqlalchemy.ext.hybrid import hybrid_property


class User(Base):
    __tablename__ = "user"
    id = mapped_column(Integer, primary_key=True)
    firstname = mapped_column(String(50))
    lastname = mapped_column(String(50))

    @hybrid_property
    def fullname(self):
        return self.firstname + " " + self.lastname
```

----------------------------------------

TITLE: Demonstrate Typing with SQLAlchemy Select and Session
DESCRIPTION: Illustrates how the typing information provided by Mapped attributes, including those defined using `Annotated`, is propagated to `select` statements, `Session` execution results (`Row`), and ORM query results (`Sequence`). It shows examples of selecting specific columns and fetching full objects.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/whatsnew_20.rst#_snippet_19

LANGUAGE: python
CODE:
```
# (variable) stmt: Select[Tuple[int, str]]
stmt = select(User.id, User.name)

with Session(e) as sess:
    for row in sess.execute(stmt):
        # (variable) row: Row[Tuple[int, str]]
        print(row)

    # (variable) users: Sequence[User]
    users = sess.scalars(select(User)).all()

    # (variable) users_legacy: List[User]
    users_legacy = sess.query(User).all()
```

----------------------------------------

TITLE: Selecting ORM Entities with Default Naming (SQLAlchemy ORM)
DESCRIPTION: Demonstrates selecting full User and Address entities using `select` and accessing them in the result row by their class names. Includes the generated SQL.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/queryguide/select.rst#_snippet_5

LANGUAGE: Python
CODE:
```
stmt = select(User, Address).join(User.addresses).order_by(User.id, Address.id)
for row in session.execute(stmt):
    print(f"{row.User.name} {row.Address.email_address}")
```

LANGUAGE: SQL
CODE:
```
SELECT user_account.id, user_account.name, user_account.fullname,
address.id AS id_1, address.user_id, address.email_address
FROM user_account JOIN address ON user_account.id = address.user_id
ORDER BY user_account.id, address.id
```

----------------------------------------

TITLE: Executing Statement via ORM Session - SQLAlchemy Python
DESCRIPTION: Shows how to execute a Core statement using an ORM Session object. The Session's `.execute()` method provides a convenient way to run Core constructs within an ORM context.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/errors.rst#_snippet_51

LANGUAGE: Python
CODE:
```
result = session.execute(stmt)
```

----------------------------------------

TITLE: Demonstrating Joinedload on Unexpire - SQLAlchemy ORM Python
DESCRIPTION: This snippet shows a SQLAlchemy query using `joinedload` for eager loading, followed by a commit that expires the object, and then access to an attribute that triggers a refresh. In SQLAlchemy 1.4+, the `joinedload` strategy associated with the original query is re-applied during the refresh, eagerly loading the related collection. Requires SQLAlchemy ORM, mapped classes `A` and `B` with a relationship `A.bs`. Input is a session and query options; output is the object refreshed and its `bs` collection loaded via a JOIN query.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_14.rst#_snippet_66

LANGUAGE: Python
CODE:
```
a1 = session.query(A).options(joinedload(A.bs)).first()
a1.data = "new data"
session.commit()
a1.data
```

----------------------------------------

TITLE: Recommended ORM Joins Using Relationships and Mapped Classes
DESCRIPTION: Illustrates the standard and recommended ways to perform ORM joins using relationships or by explicitly specifying the mapped class as the join target. These patterns do not involve joining directly to Core Table/Alias objects.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/errors.rst#_snippet_17

LANGUAGE: python
CODE:
```
# normal join to relationship entity
q = s.query(User).join(User.addresses).filter(Address.email_address == "ed@foo.com")

# name Address target explicitly, not necessary but legal
q = (
    s.query(User)
    .join(Address, User.addresses)
    .filter(Address.email_address == "ed@foo.com")
)
```

----------------------------------------

TITLE: Mapping Bidirectional Backref Python
DESCRIPTION: Demonstrates creating a bidirectional relationship between Department and Employee ORM classes by using the `backref` keyword argument in the `relationship` definition, establishing both forward and backward connections.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/glossary.rst#_snippet_21

LANGUAGE: python
CODE:
```
class Department(Base):
    __tablename__ = "department"
    id = Column(Integer, primary_key=True)
    name = Column(String(30))
    employees = relationship("Employee", backref="department")


class Employee(Base):
    __tablename__ = "employee"
    id = Column(Integer, primary_key=True)
    name = Column(String(30))
    dep_id = Column(Integer, ForeignKey("department.id"))
```

----------------------------------------

TITLE: SQLAlchemy ORM: Filter with NOT relationship any()
DESCRIPTION: Shows how to use the negation operator (`~`) with `relationship.any()` to find parent objects (Users) that have *no* related child objects (Addresses). This generates a SQL NOT EXISTS subquery.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/queryguide/select.rst#_snippet_41

LANGUAGE: Python
CODE:
```
>>> stmt = select(User.fullname).where(~User.addresses.any())
>>> session.execute(stmt).all()
```

LANGUAGE: SQL
CODE:
```
SELECT user_account.fullname
FROM user_account
WHERE NOT (EXISTS (SELECT 1
FROM address
WHERE user_account.id = address.user_id))
```

----------------------------------------

TITLE: Creating Select Statement with Positional Columns in SQLAlchemy
DESCRIPTION: Shows the new recommended way (future 2.0 style) to create a SQLAlchemy `select` statement by passing column expressions as positional arguments directly to the `select()` function.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_14.rst#_snippet_32

LANGUAGE: Python
CODE:
```
# new way, supports 2.0
stmt = select(table.c.col1, table.c.col2, ...)
```

----------------------------------------

TITLE: Fetching Single Object with Core Select via Session.execute().scalar_one()
DESCRIPTION: The SQLAlchemy 2.0 approach to fetching a single object using Session.execute() with a Core select() construct and retrieving the scalar result using scalar_one().
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_20.rst#_snippet_63

LANGUAGE: Python
CODE:
```
session = Session(engine)

user = session.execute(select(User).filter_by(name="some user")).scalar_one()
```

----------------------------------------

TITLE: Using Python & Operator for AND - Python/SQLAlchemy
DESCRIPTION: Demonstrates using the overloaded Python binary `&` operator to construct a SQL `AND` clause between two expressions. It highlights the requirement for parentheses around the operands due to Python's operator precedence. The corresponding generated SQL query is included.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/core/operators.rst#_snippet_22

LANGUAGE: Python
CODE:
```
print((column("x") == 5) & (column("y") == 10))
```

LANGUAGE: SQL
CODE:
```
x = :x_1 AND y = :y_1
```

----------------------------------------

TITLE: Performing New Bulk Insert (Python)
DESCRIPTION: Shows the modern way to perform bulk inserts using `session.execute()` with an `insert()` construct and a list of dictionaries. Requires importing `insert`.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/queryguide/dml.rst#_snippet_14

LANGUAGE: Python
CODE:
```
from sqlalchemy import insert

session.execute(insert(User), [{"name": "u1"}, {"name": "u2"}, {"name": "u3"}])
```

----------------------------------------

TITLE: Mapping Composite Dataclass - Annotated Declarative - Python
DESCRIPTION: Configures an SQLAlchemy mapped class `Vertex` using Annotated Declarative. It maps the `Point` dataclass to sets of columns (`x1`/`y1` and `x2`/`y2`) using `composite` directly with `mapped_column` objects. Column types are inferred from the `Point` dataclass.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/composites.rst#_snippet_1

LANGUAGE: Python
CODE:
```
from sqlalchemy.orm import DeclarativeBase, Mapped
from sqlalchemy.orm import composite, mapped_column


class Base(DeclarativeBase):
    pass


class Vertex(Base):
    __tablename__ = "vertices"

    id: Mapped[int] = mapped_column(primary_key=True)

    start: Mapped[Point] = composite(mapped_column("x1"), mapped_column("y1"))
    end: Mapped[Point] = composite(mapped_column("x2"), mapped_column("y2"))

    def __repr__(self):
        return f"Vertex(start={self.start}, end={self.end})"
```

----------------------------------------

TITLE: Using Python | Operator for OR - Python/SQLAlchemy
DESCRIPTION: Demonstrates using the overloaded Python binary `|` operator to construct a SQL `OR` clause between two expressions. It highlights the requirement for parentheses around the operands due to Python's operator precedence. The corresponding generated SQL query is included.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/core/operators.rst#_snippet_23

LANGUAGE: Python
CODE:
```
print((column("x") == 5) | (column("y") == 10))
```

LANGUAGE: SQL
CODE:
```
x = :x_1 OR y = :y_1
```

----------------------------------------

TITLE: Incorrect Session Creation in Method - Python
DESCRIPTION: This snippet demonstrates an incorrect pattern for managing a SQLAlchemy Session. Creating the session inside a method that performs data operations violates the principle of keeping the session lifecycle separate and external to data-specific functions. The recommended approach is to manage the session's scope outside of such methods.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/session_basics.rst#_snippet_21

LANGUAGE: Python
CODE:
```
### this is the **wrong way to do it** ###


class ThingOne:
    def go(self):
        session = Session()
        try:
```

----------------------------------------

TITLE: Using Arbitrary Functions with func in SQLAlchemy
DESCRIPTION: Demonstrates that the func object can be used to generate SQL for any arbitrary function name. SQLAlchemy renders these generically, passing arguments as bound parameters.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/tutorial/data_select.rst#_snippet_82

LANGUAGE: Python
CODE:
```
print(select(func.some_crazy_function(user_table.c.name, 17)))
```

LANGUAGE: SQL
CODE:
```
SELECT some_crazy_function(user_account.name, :some_crazy_function_2) AS some_crazy_function_1
FROM user_account
```

----------------------------------------

TITLE: Saving Object and Committing with Scoped Session
DESCRIPTION: Demonstrates saving an object and committing changes using the thread-local session instance returned by the 'scoped_session' factory function (aliased as 'Session').
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_04.rst#_snippet_17

LANGUAGE: Python
CODE:
```
u = User(name="wendy")

sess = Session()
sess.save(u)
sess.commit()
```

----------------------------------------

TITLE: Joined Eager Loading with Collections (2.0 Uniquing Issue)
DESCRIPTION: Shows joined eager loading with the 2.0 execute API. By default, rows are not uniqued. Attempting to access all rows without calling .unique() will raise an error when joinedload is used with a collection.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_20.rst#_snippet_95

LANGUAGE: Python
CODE:
```
# In the new API, uniquing is available but not implicitly
# enabled
result = session.execute(select(User).options(joinedload(User.addresses)))

# this actually will raise an error to let the user know that
# uniquing should be applied
rows = result.all()
```

----------------------------------------

TITLE: Using Nested Composite Mapping SQLAlchemy Python
DESCRIPTION: This snippet demonstrates how to use the `HasVertex` class mapped with a nested composite (`vertex` attribute), showing how to create, add, commit, query, and access the nested composite attributes.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/composites.rst#_snippet_15

LANGUAGE: Python
CODE:
```
hv = HasVertex(vertex=Vertex(Point(1, 2), Point(3, 4)))

session.add(hv)
session.commit()

stmt = select(HasVertex).where(HasVertex.vertex == Vertex(Point(1, 2), Point(3, 4)))

hv = session.scalars(stmt).first()
print(hv.vertex.start)
print(hv.vertex.end)
```

----------------------------------------

TITLE: Use Scalar Subquery in Comparison
DESCRIPTION: Demonstrates how a scalar subquery object can be used like any other column element in a comparison expression within SQLAlchemy's expression language.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/tutorial/data_select.rst#_snippet_61

LANGUAGE: python
CODE:
```
print(subq == 5)
```

----------------------------------------

TITLE: Setting Transaction Isolation within Session Begin Block (Python)
DESCRIPTION: Provides an alternative approach to setting transaction isolation when using the `session.begin()` context manager. By calling `session.connection()` with `execution_options` immediately inside the `with sess.begin():` block, the database transaction started by `begin()` is configured with the desired isolation level.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/session_transaction.rst#_snippet_25

LANGUAGE: python
CODE:
```
sess = Session(bind=engine)

with sess.begin():
    # call connection() with options before any other operations proceed.
    # this will procure a new connection from the bound engine and begin a
    # real database transaction.
    sess.connection(execution_options={"isolation_level": "SERIALIZABLE"})

    # ... work with session in SERIALIZABLE isolation level...

# outside the block, the transaction has been committed.  the connection is
# released and reverted to its previous isolation level.
```

----------------------------------------

TITLE: Committing Transactions with SQLAlchemy ORM Session
DESCRIPTION: Illustrates creating an ORM Session from a sessionmaker using a context manager, adding ORM objects, and explicitly committing the transaction using session.commit(). Requires a sessionmaker configured with an engine and mapped ORM classes.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/session_transaction.rst#_snippet_11

LANGUAGE: Python
CODE:
```
Session = sessionmaker(engine)

with Session() as session:
    session.add_all(
        [
            SomeClass(data="some data one"),
            SomeClass(data="some data two"),
            SomeClass(data="some data three"),
        ]
    )
    session.commit()
```

----------------------------------------

TITLE: Configuring Relationships in Dataclass Mappings Python
DESCRIPTION: Explains how to define ORM relationships within dataclass-mapped classes using `Mapped` and `relationship`. It specifically shows the use of `default_factory` for collection-based relationships (like lists) and `default` for scalar relationships to control parameter optionality during dataclass initialization.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/dataclasses.rst#_snippet_12

LANGUAGE: Python
CODE:
```
from typing import List

from sqlalchemy import ForeignKey
from sqlalchemy.orm import Mapped
from sqlalchemy.orm import mapped_column
from sqlalchemy.orm import registry
from sqlalchemy.orm import relationship

reg = registry()


@reg.mapped_as_dataclass
class Parent:
    __tablename__ = "parent"
    id: Mapped[int] = mapped_column(primary_key=True)
    children: Mapped[List["Child"]] = relationship(
        default_factory=list, back_populates="parent"
    )


@reg.mapped_as_dataclass
class Child:
    __tablename__ = "child"
    id: Mapped[int] = mapped_column(primary_key=True)
    parent_id: Mapped[int] = mapped_column(ForeignKey("parent.id"))
    parent: Mapped["Parent"] = relationship(default=None)
```

----------------------------------------

TITLE: Selecting Specific ORM Attributes (SQLAlchemy ORM)
DESCRIPTION: Demonstrates selecting individual attributes (User.name, Address.email_address) instead of full entities, resulting in a row object with columns corresponding to the selected attributes. Includes the generated SQL.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/queryguide/select.rst#_snippet_8

LANGUAGE: Python
CODE:
```
result = session.execute(
    select(User.name, Address.email_address)
    .join(User.addresses)
    .order_by(User.id, Address.id)
)
for row in result:
    print(f"{row.name}  {row.email_address}")
```

LANGUAGE: SQL
CODE:
```
SELECT user_account.name, address.email_address
FROM user_account JOIN address ON user_account.id = address.user_id
ORDER BY user_account.id, address.id
```

----------------------------------------

TITLE: Closing SQLAlchemy Session and Connection (Python)
DESCRIPTION: This snippet demonstrates the standard procedure for closing a SQLAlchemy session and the underlying database connection, typically performed as part of resource management or application shutdown.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/queryguide/inheritance.rst#_snippet_48

LANGUAGE: Python
CODE:
```
session.close()
conn.close()
```

----------------------------------------

TITLE: Bulk Update with Session.execute (List of Dicts) - Python
DESCRIPTION: Demonstrates performing a bulk update operation using session.execute with an update construct and a list of dictionaries providing primary key and updated values for multiple rows. This is the modern approach for bulk updates based on primary keys.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/queryguide/dml.rst#_snippet_21

LANGUAGE: Python
CODE:
```
session.execute(
    update(Manager),
    [
        {
            "id": 1,
            "name": "scheeks",
            "manager_name": "Sandy Cheeks, President",
        },
        {
            "id": 2,
            "name": "eugene",
            "manager_name": "Eugene H. Krabs, VP Marketing",
        },
    ],
)
```

----------------------------------------

TITLE: Mapping Union Types in SQLAlchemy type_annotation_map (Python)
DESCRIPTION: This Python example demonstrates how to map Python union types to specific SQLAlchemy database types like JSON or postgresql.JSONB using type_annotation_map. It shows both new-style (pipe operator) and old-style (typing.Union) syntax for defining unions and how Mapped annotations matching these unions will automatically use the specified database type, including handling nullability with Optional.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/declarative_tables.rst#_snippet_26

LANGUAGE: Python
CODE:
```
from typing import Union
from sqlalchemy import JSON
from sqlalchemy.dialects import postgresql
from sqlalchemy.orm import DeclarativeBase, Mapped, mapped_column
from sqlalchemy.schema import CreateTable

# new style Union using a pipe operator
json_list = list[int] | list[str]

# old style Union using Union explicitly
json_scalar = Union[float, str, bool]


class Base(DeclarativeBase):
    type_annotation_map = {
        json_list: postgresql.JSONB,
        json_scalar: JSON,
    }


class SomeClass(Base):
    __tablename__ = "some_table"

    id: Mapped[int] = mapped_column(primary_key=True)
    list_col: Mapped[list[str] | list[int]]

    # uses JSON
    scalar_col: Mapped[json_scalar]

    # uses JSON and is also nullable=True
    scalar_col_nullable: Mapped[json_scalar | None]

    # these forms all use JSON as well due to the json_scalar entry
    scalar_col_newstyle: Mapped[float | str | bool]
    scalar_col_oldstyle: Mapped[Union[float, str, bool]]
    scalar_col_mixedstyle: Mapped[Optional[float | str | bool]]
```

----------------------------------------

TITLE: SQLAlchemy URL Stringification Password Obfuscation
DESCRIPTION: Shows how calling `str()` on a SQLAlchemy `URL` object now obfuscates the password by default. This differs from previous versions where only `__repr__()` did this. Using `create_engine` with the stringified URL will result in the password being '***', preventing successful connection if the password is required.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/whatsnew_20.rst#_snippet_39

LANGUAGE: python
CODE:
```
e1 = create_engine("postgresql+psycopg2://scott:tiger@localhost/test")
e2 = create_engine(str(e1.url))
```

----------------------------------------

TITLE: Mapping Imperative Table Columns with Type Hints using column_property
DESCRIPTION: This example refines the mapping of imperative table columns to alternate attribute names by using sqlalchemy.orm.column_property and sqlalchemy.orm.Mapped. This approach ensures that typing tools (like MyPy) can correctly infer the types of the mapped attributes ('id' as 'int', 'name' as 'str'), resolving a caveat of direct column assignment for type checking.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/declarative_tables.rst#_snippet_60

LANGUAGE: Python
CODE:
```
from sqlalchemy.orm import column_property
    from sqlalchemy.orm import Mapped


    class User(Base):
        __table__ = user_table

        id: Mapped[int] = column_property(user_table.c.user_id)
        name: Mapped[str] = column_property(user_table.c.user_name)
```

----------------------------------------

TITLE: Comparing Equality SQLAlchemy Python
DESCRIPTION: Demonstrates using the Python `==` operator on a SQLAlchemy `column` object to generate a SQL equality expression. The output shows the generated SQL with a bound parameter.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/core/operators.rst#_snippet_0

LANGUAGE: Python
CODE:
```
print(column("x") == 5)
```

----------------------------------------

TITLE: Basic ORM Querying with select and Session - SQLAlchemy ORM - Python
DESCRIPTION: Introduces the basic pattern for performing ORM queries using the sqlalchemy.select construct within a session context. It shows how to build a select statement targeting a mapped class and filter it. The example is incomplete, not showing execution or result handling.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/session_basics.rst#_snippet_6

LANGUAGE: Python
CODE:
```
from sqlalchemy import select
from sqlalchemy.orm import Session

with Session(engine) as session:
    # query for ``User`` objects
    statement = select(User).filter_by(name="ed")

    # list of ``User`` objects
```

----------------------------------------

TITLE: SQLAlchemy Select IN Load Many-to-One - Python & SQL
DESCRIPTION: Illustrates `selectinload` for a many-to-one relationship, where SQLAlchemy first selects the child objects (Addresses) and then issues a second SELECT query to fetch the related parent objects (Users) using an IN clause with the foreign key values from the child objects.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/queryguide/relationships.rst#_snippet_28

LANGUAGE: Python
CODE:
```
>>> from sqlalchemy import select
>>> from sqlalchemy.orm import selectinload
>>> stmt = select(Address).options(selectinload(Address.user))
>>> result = session.scalars(stmt).all()
```

LANGUAGE: SQL
CODE:
```
SELECT
    addresses.id AS addresses_id,
    addresses.email_address AS addresses_email_address,
    addresses.user_id AS addresses_user_id
    FROM addresses
SELECT
    users.id AS users_id,
    users.name AS users_name,
    users.fullname AS users_fullname,
    users.nickname AS users_nickname
FROM users
WHERE users.id IN (?, ?)
(1, 2)
```

----------------------------------------

TITLE: Creating MySQL Engines with Various Drivers - Python
DESCRIPTION: Provides examples of creating SQLAlchemy Engines for MySQL, showing the default driver (mysqlclient) and explicit specification of mysqlclient (mysqldb) and PyMySQL drivers via the URL format mysql+driver://....
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/core/engines.rst#_snippet_6

LANGUAGE: Python
CODE:
```
# default
engine = create_engine("mysql://scott:tiger@localhost/foo")
```

LANGUAGE: Python
CODE:
```
# mysqlclient (a maintained fork of MySQL-Python)
engine = create_engine("mysql+mysqldb://scott:tiger@localhost/foo")
```

LANGUAGE: Python
CODE:
```
# PyMySQL
engine = create_engine("mysql+pymysql://scott:tiger@localhost/foo")
```

----------------------------------------

TITLE: Using @declared_attr with Mixin Columns in SQLAlchemy Declarative
DESCRIPTION: Illustrates the improved behavior of @declared_attr functions when used in declarative mixins. The function is now called after mixin column copies are generated, allowing it to reference the final mapped Column object.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_10.rst#_snippet_1

LANGUAGE: Python
CODE:
```
class HasFooBar(object):
    foobar = Column(Integer)

    @declared_attr
    def foobar_prop(cls):
        return column_property("foobar: " + cls.foobar)


class SomeClass(HasFooBar, Base):
    __tablename__ = "some_table"
    id = Column(Integer, primary_key=True)
```

----------------------------------------

TITLE: Chaining Multiple ORM Joins via Relationships in SQLAlchemy
DESCRIPTION: Shows how to chain multiple `join()` calls using relationship attributes (`User.orders`, `Order.items`) to create a sequence of joins. This example involves a many-to-many relationship (`Order.items`), resulting in joins through an association table (`order_items`). The SQL output reflects the chained joins.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/queryguide/select.rst#_snippet_20

LANGUAGE: Python
CODE:
```
stmt = select(User).join(User.orders).join(Order.items)
```

LANGUAGE: SQL
CODE:
```
SELECT user_account.id, user_account.name, user_account.fullname
FROM user_account
JOIN user_order ON user_account.id = user_order.user_id
JOIN order_items AS order_items_1 ON user_order.id = order_items_1.order_id
JOIN item ON item.id = order_items_1.item_id
```

----------------------------------------

TITLE: Removed Connectionless Execution Patterns - SQLAlchemy Python
DESCRIPTION: Provides examples of execution patterns that are no longer supported in SQLAlchemy 2.0, specifically those relying on binding `MetaData` to an `Engine` for "connectionless" execution. It shows how operations like `create_all`, `reflect`, table definition with `autoload`, and direct execution via `engine.execute(statement)` or `statement.execute()` now require an explicit `Engine` or `Connection` object passed directly to the method or statement.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_20.rst#_snippet_16

LANGUAGE: Python
CODE:
```
from sqlalchemy import MetaData

metadata_obj = MetaData(bind=engine) # no longer supported

metadata_obj.create_all() # requires Engine or Connection

metadata_obj.reflect() # requires Engine or Connection

t = Table("t", metadata_obj, autoload=True) # use autoload_with=engine

result = engine.execute(t.select()) # no longer supported

result = t.select().execute() # no longer supported
```

----------------------------------------

TITLE: Execute Core SELECT Statement
DESCRIPTION: Shows how to execute a previously built Core `select` statement (`stmt`) using `engine.connect()` and `Connection.execute()`. It iterates through the returned `Result` object, printing each `Row`.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/tutorial/data_select.rst#_snippet_1

LANGUAGE: Python
CODE:
```
with engine.connect() as conn:
    for row in conn.execute(stmt):
        print(row)
```

----------------------------------------

TITLE: Appending Object to Relationship Collection - SQLAlchemy Python
DESCRIPTION: This snippet shows how to create an `Address` object and append it to the `addresses` collection of a `User` instance. This action updates the state of the collection and the associated `Address` object.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/tutorial/orm_related_objects.rst#_snippet_2

LANGUAGE: Python
CODE:
```
>>> a1 = Address(email_address="pearl.krabs@gmail.com")
>>> u1.addresses.append(a1)
```

----------------------------------------

TITLE: Checking Equality with None SQLAlchemy Python
DESCRIPTION: Demonstrates that using the Python `==` operator with a SQLAlchemy expression and Python `None` automatically translates to the SQL `IS NULL` operator. This is the most common and convenient way to check for nulls dynamically.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/core/operators.rst#_snippet_18

LANGUAGE: Python
CODE:
```
a = None
print(column("x") == a)
```

----------------------------------------

TITLE: Executing SQLAlchemy Select Statement and Printing Results (Python)
DESCRIPTION: Demonstrates how to execute a SQLAlchemy `Select` statement using an engine connection and iterate through the results, printing a specific column value from each row. Requires a pre-defined `stmt` object and an `engine`.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/tutorial/data_select.rst#_snippet_13

LANGUAGE: Python
CODE:
```
with engine.connect() as conn:
    for row in conn.execute(stmt):
        print(f"{row.username}")
```

----------------------------------------

TITLE: Correctly Dropping Table after Query - SQLAlchemy Python
DESCRIPTION: Provides the solution to the hanging drop issue by ensuring that all active connections and result sets are fully consumed and closed before attempting to drop the table. This releases any held locks.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/faq/metadata_schema.rst#_snippet_1

LANGUAGE: Python
CODE:
```
connection = engine.connect()
result = connection.execute(mytable.select())

# fully read result sets
result.fetchall()

# close connections
connection.close()

# now locks are removed
mytable.drop(engine)
```

----------------------------------------

TITLE: Declaring Address Mapped Class with Declarative (Python)
DESCRIPTION: Defines the `Address` class, inheriting from the `Base` Declarative class, to represent the 'address' table. It uses `__tablename__` for the table name and `Mapped`/`mapped_column` for column definitions, including a primary key, a string column, and a foreign key referencing 'user_account.id'. A relationship to the 'User' parent is also defined. Requires standard SQLAlchemy imports for types like `ForeignKey` and ORM constructs.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/tutorial/metadata.rst#_snippet_11

LANGUAGE: python
CODE:
```
from sqlalchemy import ForeignKey # Requires import from sqlalchemy

class Address(Base):
    __tablename__ = "address"

    id: Mapped[int] = mapped_column(primary_key=True)
    email_address: Mapped[str]
    user_id = mapped_column(ForeignKey("user_account.id"))

    user: Mapped[User] = relationship(back_populates="addresses")

    def __repr__(self) -> str:
        return f"Address(id={self.id!r}, email_address={self.email_address!r})"
```

----------------------------------------

TITLE: Bulk Update using session.execute in SQLAlchemy ORM
DESCRIPTION: Shows how to perform a bulk update operation using the sqlalchemy.dml.Update construct. The update is executed via session.execute(), providing a list of dictionaries where each dictionary contains primary key values and the columns to update for a specific row. Note that this method does not support RETURNING.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/whatsnew_20.rst#_snippet_25

LANGUAGE: Python
CODE:
```
from sqlalchemy import update
session.execute(
    update(User),
    [
        {"id": 1, "fullname": "Spongebob Squarepants"},
        {"id": 3, "fullname": "Patrick Star"},
    ],
)
```

----------------------------------------

TITLE: Begin Once Transaction Style with Engine (SQLAlchemy)
DESCRIPTION: Provides a shorthand for the 'begin once' style using `engine.begin()`. This method combines connecting and beginning a transaction into a single context manager. The transaction starts implicitly upon entering the 'with' block and is automatically committed upon successful exit or rolled back on exception.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/core/connections.rst#_snippet_5

LANGUAGE: Python
CODE:
```
with engine.begin() as connection:
    connection.execute(some_table.insert(), {"x": 7, "y": "this is some data"})
    connection.execute(
        some_other_table.insert(), {"q": 8, "p": "this is some more data"}
    )

    # transaction is committed, and Connection is released to the connection
    # pool
```

----------------------------------------

TITLE: Executing SQLAlchemy Core Update with Multiple Parameters (executemany)
DESCRIPTION: Shows how to structure an `UPDATE` statement using `bindparam` for both `WHERE` and `SET` clauses, enabling efficient execution of the same statement with different data sets. It demonstrates executing this statement within a transaction using `conn.execute()` and a list of parameter dictionaries.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/tutorial/data_update.rst#_snippet_2

LANGUAGE: Python
CODE:
```
from sqlalchemy import bindparam
stmt = (
    update(user_table)
    .where(user_table.c.name == bindparam("oldname"))
    .values(name=bindparam("newname"))
)
with engine.begin() as conn:
    conn.execute(
        stmt,
        [
            {"oldname": "jack", "newname": "ed"},
            {"oldname": "wendy", "newname": "mary"},
            {"oldname": "jim", "newname": "jake"},
        ],
    )
```

LANGUAGE: SQL
CODE:
```
BEGIN (implicit)
UPDATE user_account SET name=? WHERE user_account.name = ?
[...] [('ed', 'jack'), ('mary', 'wendy'), ('jake', 'jim')]
<sqlalchemy.engine.cursor.CursorResult object at 0x...>
COMMIT
```

----------------------------------------

TITLE: Defining Inheritance Mapping with registry.mapped Decorator (SQLAlchemy, Python)
DESCRIPTION: Illustrates how to use the `@mapper_registry.mapped` decorator to define classes involved in an inheritance hierarchy. It shows how the decorator is applied to both the base class (`Person`) and the subclass (`Employee`), along with using `__mapper_args__` for polymorphic mapping.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/declarative_styles.rst#_snippet_4

LANGUAGE: Python
CODE:
```
from sqlalchemy.orm import registry

mapper_registry = registry()


@mapper_registry.mapped
class Person:
    __tablename__ = "person"

    person_id = mapped_column(Integer, primary_key=True)
    type = mapped_column(String, nullable=False)

    __mapper_args__ = {
        "polymorphic_on": type,
        "polymorphic_identity": "person",
    }


@mapper_registry.mapped
class Employee(Person):
    __tablename__ = "employee"

    person_id = mapped_column(ForeignKey("person.person_id"), primary_key=True)

    __mapper_args__ = {
        "polymorphic_identity": "employee",
    }
```

----------------------------------------

TITLE: Executing IN Query SQLAlchemy Python
DESCRIPTION: Shows how the `.in_()` method translates to a SQL `IN` clause upon execution with bound parameters. It demonstrates querying `User.id` where the ID is in a list of values.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/core/operators.rst#_snippet_8

LANGUAGE: Python
CODE:
```
stmt = select(User.id).where(User.id.in_([1, 2, 3]))
result = conn.execute(stmt)
```

----------------------------------------

TITLE: Disposing SQLAlchemy Engine Before Starting Child Process in Python
DESCRIPTION: This snippet shows an alternative method for using a SQLAlchemy engine with a single child process (`multiprocessing.Process`). Calling `engine.dispose()` in the parent process *before* forking ensures that the parent's connections are closed and not carried over to the child process, allowing the child to start with a new, independent connection pool.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/core/pooling.rst#_snippet_14

LANGUAGE: python
CODE:
```
from multiprocessing import Process
from sqlalchemy import create_engine, text # text is used in the example context, but not imported in the original text

engine = create_engine("mysql://user:pass@host/dbname")


def run_in_process():
    with engine.connect() as conn:
        # Example usage of text()
        conn.execute(text("SELECT 1")) # Replaced "..." with a simple example


# before process starts, ensure engine.dispose() is called
engine.dispose()

# Example usage with a Process
# Note: Need 'if __name__ == "__main__":' guard for multiprocessing
# if __name__ == "__main__":
#     p = Process(target=run_in_process)
#     p.start()
#     p.join()
```

----------------------------------------

TITLE: Define Annotated Type for String Length in SQLAlchemy
DESCRIPTION: Defines a custom `Annotated` type `str50` to represent a string with a maximum length of 50. It also shows how to register this custom type in the `type_annotation_map` of a `DeclarativeBase` class, allowing `Mapped[str50]` to automatically map to `String(50)`.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/whatsnew_20.rst#_snippet_17

LANGUAGE: python
CODE:
```
from typing_extensions import Annotated
from sqlalchemy.orm import DeclarativeBase

str50 = Annotated[str, 50]


# declarative base with a type-level override, using a type that is
# expected to be used in multiple places
class Base(DeclarativeBase):
    type_annotation_map = {
        str50: String(50),
    }
```

----------------------------------------

TITLE: Select All Columns from Core Table
DESCRIPTION: Shows the simplest form of `select()` using a Core `Table` object (`user_table`), which selects all columns from that table and infers the FROM clause.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/tutorial/data_select.rst#_snippet_3

LANGUAGE: Python
CODE:
```
print(select(user_table))
```

----------------------------------------

TITLE: Correctly Building AND Conditions (SQLAlchemy Python)
DESCRIPTION: Shows the recommended way to construct an AND condition from a list of conditions using the `sqlalchemy.sql.and_` function. This approach works correctly in SQLAlchemy 0.8 and 0.9+ and handles empty lists gracefully.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_09.rst#_snippet_20

LANGUAGE: Python
CODE:
```
from sqlalchemy.sql import and_

if conditions:
    stmt = stmt.where(and_(*conditions))
```

----------------------------------------

TITLE: Using joinedload for Eager Loading (Inner Join)
DESCRIPTION: Demonstrates how to use the `joinedload` strategy with `innerjoin=True` to eagerly load a many-to-one relationship (`Address.user`). This reduces SQL queries for related objects but can multiply rows for one-to-many relationships.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/tutorial/orm_related_objects.rst#_snippet_16

LANGUAGE: python
CODE:
```
from sqlalchemy.orm import joinedload
from sqlalchemy import select

stmt = (
    select(Address)
    .options(joinedload(Address.user, innerjoin=True))
    .order_by(Address.id)
)

# Assuming 'session' is a configured SQLAlchemy session
for row in session.execute(stmt):
    print(f"{row.Address.email_address} {row.Address.user.name}")
```

LANGUAGE: sql
CODE:
```
SELECT address.id, address.email_address, address.user_id, user_account_1.id AS id_1,
user_account_1.name, user_account_1.fullname
FROM address
JOIN user_account AS user_account_1 ON user_account_1.id = address.user_id
ORDER BY address.id
-- Parameters: ()
```

----------------------------------------

TITLE: SQLAlchemy Select IN Load One-to-Many - Python & SQL
DESCRIPTION: Demonstrates the typical use of `selectinload` for a one-to-many relationship, where SQLAlchemy first selects the parent objects (Users) and then issues a second SELECT query to fetch related child objects (Addresses) using an IN clause with the parent primary keys.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/queryguide/relationships.rst#_snippet_27

LANGUAGE: Python
CODE:
```
>>> from sqlalchemy import select
>>> from sqlalchemy.orm import selectinload
>>> stmt = (
...     select(User)
...     .options(selectinload(User.addresses))
...     .filter(or_(User.name == "spongebob", User.name == "ed"))
... )
>>> result = session.scalars(stmt).all()
```

LANGUAGE: SQL
CODE:
```
SELECT
    users.id AS users_id,
    users.name AS users_name,
    users.fullname AS users_fullname,
    users.nickname AS users_nickname
FROM users
WHERE users.name = ? OR users.name = ?
('spongebob', 'ed')
SELECT
    addresses.id AS addresses_id,
    addresses.email_address AS addresses_email_address,
    addresses.user_id AS addresses_user_id
FROM addresses
WHERE addresses.user_id IN (?, ?)
(5, 7)
```

----------------------------------------

TITLE: Sending Multiple Parameter Sets for INSERT (Python)
DESCRIPTION: This snippet demonstrates executing an `INSERT` statement multiple times in an optimized way using the "executemany" pattern. It passes a list of dictionaries, each representing a row's parameters, as the second argument to `Connection.execute`.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/tutorial/dbapi_transactions.rst#_snippet_3

LANGUAGE: python
CODE:
```
with engine.connect() as conn:
    conn.execute(
        text("INSERT INTO some_table (x, y) VALUES (:x, :y)"),
        [{"x": 11, "y": 12}, {"x": 13, "y": 14}],
    )
    conn.commit()
```

----------------------------------------

TITLE: Using SQLAlchemy ORM Nested Transactions (SAVEPOINT)
DESCRIPTION: Shows how to use `session.begin_nested()` to create a SAVEPOINT within an existing transaction. This allows rolling back changes made since the SAVEPOINT without affecting the outer transaction, useful for atomic operations within a larger unit of work.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/session_transaction.rst#_snippet_7

LANGUAGE: Python
CODE:
```
Session = sessionmaker()

with Session.begin() as session:
    session.add(u1)
    session.add(u2)

    nested = session.begin_nested()  # establish a savepoint
    session.add(u3)
    nested.rollback()  # rolls back u3, keeps u1 and u2

# commits u1 and u2
```

----------------------------------------

TITLE: SQLAlchemy Hybrid Property with Separate Expressions (Python)
DESCRIPTION: Shows how to define different logic for a hybrid property at the Python level and the SQL level using `@hybrid_property` and `@<property_name>.expression`. The Python version uses standard `if/else`, while the SQL version uses SQLAlchemy's `case` construct for conditional logic.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/mapped_sql_expr.rst#_snippet_3

LANGUAGE: Python
CODE:
```
from sqlalchemy.ext.hybrid import hybrid_property
from sqlalchemy.sql import case


class User(Base):
    __tablename__ = "user"
    id = mapped_column(Integer, primary_key=True)
    firstname = mapped_column(String(50))
    lastname = mapped_column(String(50))

    @hybrid_property
    def fullname(self):
        if self.firstname is not None:
            return self.firstname + " " + self.lastname
        else:
            return self.lastname

    @fullname.expression
    def fullname(cls):
        return case(
            (cls.firstname != None, cls.firstname + " " + cls.lastname),
            else_=cls.lastname,
        )
```

----------------------------------------

TITLE: Loading Persistent Object by Name - SQLAlchemy ORM - Python
DESCRIPTION: Demonstrates loading a `User` object from the database into the session's persistent state using `select`, filtering by name, and retrieving the first result with `scalars`. This establishes an object in the session with loaded attribute data, which is then used to demonstrate the `expire` operation.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/session_state_management.rst#_snippet_16

LANGUAGE: Python
CODE:
```
user = session.scalars(select(User).filter_by(name="user1").limit(1)).first()
```

----------------------------------------

TITLE: Deprecated 1.x Autocommit Behavior - SQLAlchemy Core/ORM
DESCRIPTION: Illustrates the deprecated 1.x behavior where `Connection.execute()` would implicitly commit the transaction for DML statements or when using the `autocommit=True` execution option. This behavior is removed in SQLAlchemy 2.0, requiring explicit transaction management.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_20.rst#_snippet_9

LANGUAGE: python
CODE:
```
conn = engine.connect()

# won't autocommit in 2.0
conn.execute(some_table.insert().values(foo="bar"))
```

LANGUAGE: python
CODE:
```
conn = engine.connect()

# won't autocommit in 2.0
conn.execute(text("INSERT INTO table (foo) VALUES ('bar')"))
```

LANGUAGE: python
CODE:
```
conn = engine.connect()

# won't autocommit in 2.0
conn.execute(text("EXEC my_procedural_thing()").execution_options(autocommit=True))
```

----------------------------------------

TITLE: SQLAlchemy Connection Isolation Level Options
DESCRIPTION: Lists the standard string values accepted by the SQLAlchemy Connection.execution_options() method for setting the transaction isolation level or enabling DBAPI autocommit mode. Not all values are supported by every database backend.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/core/connections.rst#_snippet_8

LANGUAGE: text
CODE:
```
"AUTOCOMMIT"
"READ COMMITTED"
"READ UNCOMMITTED"
"REPEATABLE READ"
"SERIALIZABLE"
```

----------------------------------------

TITLE: SQLAlchemy Select.join_from() Method
DESCRIPTION: Demonstrates the new `select().join_from()` method in SQLAlchemy 2.0, which provides an alternative way to specify the left and right sides of a join directly within the select statement construction.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_14.rst#_snippet_20

LANGUAGE: Python
CODE:
```
stmt = select(Address.email_address, User.name).join_from(User, Address)
```

----------------------------------------

TITLE: SQLAlchemy 2.0 Migration for from_self() using aliased
DESCRIPTION: Shows the recommended SQLAlchemy 2.0 approach to replace Query.from_self() using the aliased() construct with the 2.0-style select() construct. It creates a subquery from the select statement and then uses aliased() to create aliased entities (ua, aa) that select from the subquery, executing the final select statement via session.execute().
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_20.rst#_snippet_87

LANGUAGE: Python
CODE:
```
from sqlalchemy.orm import aliased

subq = select(User, Address.email_address).join(User.addresses).subquery()

ua = aliased(User, subq)

aa = aliased(Address, subq)

stmt = select(ua, aa).order_by(aa.email_address)

result = session.execute(stmt)
```

----------------------------------------

TITLE: Using Subquery in SQLAlchemy Core Select
DESCRIPTION: Demonstrates creating a subquery from a statement and then selecting from that subquery in subsequent statements. This is the correct pattern for using subqueries in SQLAlchemy expressions.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/errors.rst#_snippet_14

LANGUAGE: python
CODE:
```
subq = stmt.subquery()

new_stmt_1 = select(subq)

new_stmt_2 = select(some_table).select_from(some_table.join(subq))
```

----------------------------------------

TITLE: Casting to JSON and accessing keys in SQLAlchemy
DESCRIPTION: Illustrates how to use the `cast` function to convert a string literal into a `JSON` type expression. It then shows how Python's item access syntax (`["a"]`) can be used on the JSON expression, demonstrating the resulting SQL.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/tutorial/data_select.rst#_snippet_106

LANGUAGE: Python
CODE:
```
from sqlalchemy import JSON
print(cast("{'a': 'b'}", JSON)["a"])
```

LANGUAGE: SQL
CODE:
```
CAST(:param_1 AS JSON)[:param_2]
```

----------------------------------------

TITLE: Defining PostgreSQL Exclude Constraint with SQLAlchemy
DESCRIPTION: This snippet shows how to define a SQLAlchemy model (RoomBooking) that includes a PostgreSQL `EXCLUDE` constraint using the `ExcludeConstraint` class. The constraint prevents overlapping time ranges (`during` column of type `TSRANGE`) for the same `room`. It demonstrates the syntax for specifying the columns and operators involved in the constraint.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/dialects/postgresql.rst#_snippet_13

LANGUAGE: Python
CODE:
```
from sqlalchemy.dialects.postgresql import ExcludeConstraint, TSRANGE


class RoomBooking(Base):
    __tablename__ = "room_booking"

    room = Column(Integer(), primary_key=True)
    during = Column(TSRANGE())

    __table_args__ = (ExcludeConstraint(("room", "="), ("during", "&&")),)
```

----------------------------------------

TITLE: Executing Basic Session Operations Python
DESCRIPTION: Demonstrates a simple interaction with a SQLAlchemy session using a mapped dataclass. It shows how to add an object to the session, commit the transaction, and illustrates the resulting SQL execution.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/dataclasses.rst#_snippet_8

LANGUAGE: Python
CODE:
```
>>> with Session(e) as session:
...     session.add(User())
...     session.commit()
{execsql}BEGIN (implicit)
INSERT INTO user_account (created_at) VALUES (utc_timestamp())
[generated in 0.00010s] ()
COMMIT
```

----------------------------------------

TITLE: Defining SQLAlchemy Models and Session Usage (Python)
DESCRIPTION: This Python code defines two SQLAlchemy declarative models, `A` and `B`, with relationships. It then creates a SQLite engine with `echo=True` to enable logging, creates the tables, adds instances of `A` with related `B` objects, commits the session, and queries the `A` objects. This program is used to generate the SQL logs shown in the examples.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/core/connections.rst#_snippet_27

LANGUAGE: python
CODE:
```
from sqlalchemy import Column
from sqlalchemy import create_engine
from sqlalchemy import ForeignKey
from sqlalchemy import Integer
from sqlalchemy import select
from sqlalchemy import String
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import relationship
from sqlalchemy.orm import Session

Base = declarative_base()


class A(Base):
    __tablename__ = "a"

    id = Column(Integer, primary_key=True)
    data = Column(String)
    bs = relationship("B")


class B(Base):
    __tablename__ = "b"
    id = Column(Integer, primary_key=True)
    a_id = Column(ForeignKey("a.id"))
    data = Column(String)


e = create_engine("sqlite://", echo=True)
Base.metadata.create_all(e)

s = Session(e)

s.add_all([A(bs=[B(), B(), B()]), A(bs=[B(), B(), B()]), A(bs=[B(), B(), B()])])
s.commit()

for a_rec in s.scalars(select(A)):
    print(a_rec.bs)
```

----------------------------------------

TITLE: Implementing Caching with ORM do_orm_execute Event - SQLAlchemy Python
DESCRIPTION: This snippet demonstrates a basic query caching implementation using the `SessionEvents.do_orm_execute` event. It checks for a custom execution option (`my_cache_key`). If present and cached, it merges a previously frozen result; otherwise, it executes the statement using `invoke_statement()`, freezes the result, caches it, and then merges it. Requires `SessionEvents`, the `sqlalchemy.orm.loading` module, and a caching mechanism.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/session_events.rst#_snippet_4

LANGUAGE: Python
CODE:
```
    from sqlalchemy.orm import loading

    cache = {}


    @event.listens_for(Session, "do_orm_execute")
    def _do_orm_execute(orm_execute_state):
        if "my_cache_key" in orm_execute_state.execution_options:
            cache_key = orm_execute_state.execution_options["my_cache_key"]

            if cache_key in cache:
                frozen_result = cache[cache_key]
            else:
                frozen_result = orm_execute_state.invoke_statement().freeze()
                cache[cache_key] = frozen_result

            return loading.merge_frozen_result(
                orm_execute_state.session,
                orm_execute_state.statement,
                frozen_result,
                load=False,
            )
```

----------------------------------------

TITLE: Query ORM Entities from CTE using aliased (Python/SQL)
DESCRIPTION: Demonstrates how to use `sqlalchemy.orm.aliased` to map an ORM entity (Address) to a SQL Common Table Expression (CTE). The example constructs a select statement joining User with the aliased Address CTE and executes it within a session to retrieve ORM objects. This is analogous to the subquery example but uses a CTE. Includes the Python code and the generated SQL.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/tutorial/data_select.rst#_snippet_57

LANGUAGE: Python
CODE:
```
cte_obj = select(Address).where(~Address.email_address.like("%@aol.com")).cte()
address_cte = aliased(Address, cte_obj)
stmt = (
    select(User, address_cte)
    .join_from(User, address_cte)
    .order_by(User.id, address_cte.id)
)
with Session(engine) as session:
    for user, address in session.execute(stmt):
        print(f"{user} {address}")
# Output:
# User(id=1, name='spongebob', fullname='Spongebob Squarepants') Address(id=1, email_address='spongebob@sqlalchemy.org')
# User(id=2, name='sandy', fullname='Sandy Cheeks') Address(id=2, email_address='sandy@sqlalchemy.org')
```

LANGUAGE: SQL
CODE:
```
BEGIN (implicit)
WITH anon_1 AS
(SELECT address.id AS id, address.email_address AS email_address, address.user_id AS user_id
FROM address
WHERE address.email_address NOT LIKE ?)
SELECT user_account.id, user_account.name, user_account.fullname,
anon_1.id AS id_1, anon_1.email_address, anon_1.user_id
FROM user_account
JOIN anon_1 ON user_account.id = anon_1.user_id
ORDER BY user_account.id, anon_1.id
[...] ('%@aol.com',)
```

----------------------------------------

TITLE: Creating and Using a SQLAlchemy LATERAL Join
DESCRIPTION: Demonstrates how to construct a SQL query using a LATERAL join in SQLAlchemy. It shows creating a subquery with `select().lateral()` that correlates to an outer table, and then joining the outer table to this lateral subquery.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/tutorial/data_select.rst#_snippet_70

LANGUAGE: python
CODE:
```
subq = (
    select(
        func.count(address_table.c.id).label("address_count"),
        address_table.c.email_address,
        address_table.c.user_id,
    )
    .where(user_table.c.id == address_table.c.user_id)
    .lateral()
)
stmt = (
    select(user_table.c.name, subq.c.address_count, subq.c.email_address)
    .join_from(user_table, subq)
    .order_by(user_table.c.id, subq.c.email_address)
)
```

----------------------------------------

TITLE: SQLAlchemy ORM: Select with Join and Where
DESCRIPTION: Demonstrates a standard SQLAlchemy ORM select statement using `select_from`, `join`, and `where` clauses. Shows how `select_from` can be overridden by subsequent join operations, resulting in the join being the primary FROM source.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/queryguide/select.rst#_snippet_38

LANGUAGE: Python
CODE:
```
>>> stmt = select(Address).select_from(User).join(Address.user).where(User.name == "sandy")
>>> print(stmt)
```

LANGUAGE: SQL
CODE:
```
SELECT address.id, address.user_id, address.email_address
FROM address JOIN user_account ON user_account.id = address.user_id
WHERE user_account.name = :name_1
```

----------------------------------------

TITLE: Verifying New Session After Removal Python
DESCRIPTION: This snippet confirms that `Session.remove()` effectively clears the registry for the current scope. Calling `Session()` again creates a brand new `Session` instance via the factory, and the comparison shows that this new session is distinct from the previous one that was removed.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/contextual.rst#_snippet_4

LANGUAGE: Python
CODE:
```
new_session = Session()
new_session is some_session
```

----------------------------------------

TITLE: Querying Columns/Expressions with Group By - SQLAlchemy ORM Python
DESCRIPTION: Demonstrates constructing an ORM query that selects specific columns and aggregate functions, joins related tables, and groups results. Uses `session.query()` with multiple arguments, `func.count()`, `.label()`, `.join()`, and `.group_by()`. Requires an active SQLAlchemy Session and mapped `User` and `Address` classes.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_05.rst#_snippet_0

LANGUAGE: Python
CODE:
```
session.query(User.name, func.count(Address.id).label("numaddresses")).join(
    Address
).group_by(User.name)
```

----------------------------------------

TITLE: SQLAlchemy Select.join() Adding ON Clause to Query
DESCRIPTION: Shows the new SQLAlchemy 2.0 behavior of `select().join()`. This method now adds a JOIN clause directly to the existing SELECT statement's FROM clause, similar to ORM Query.join, rather than creating a subquery.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_14.rst#_snippet_16

LANGUAGE: Python
CODE:
```
stmt = select(user_table).join(
    addresses_table, user_table.c.id == addresses_table.c.user_id
)
```

----------------------------------------

TITLE: Preventing Lazy Load with Raiseload in SQLAlchemy ORM
DESCRIPTION: Shows how to use the `raiseload` loader option on a SQLAlchemy `select` statement to prevent lazy loading for a specific relationship (`User.addresses`). Accessing this relationship after the query will raise an ORM exception instead of performing a lazy load.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/queryguide/relationships.rst#_snippet_13

LANGUAGE: python
CODE:
```
from sqlalchemy import select
from sqlalchemy.orm import raiseload

stmt = select(User).options(raiseload(User.addresses))
```

----------------------------------------

TITLE: Retrieving Existing Account (Python)
DESCRIPTION: Creates a new session and retrieves an existing `Account` object from the database using `session.scalar()` and a `select` statement filtered by the identifier.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/large_collections.rst#_snippet_7

LANGUAGE: Python
CODE:
```
>>> from sqlalchemy import select
>>> session = Session(engine, expire_on_commit=False)
>>> existing_account = session.scalar(select(Account).filter_by(identifier="account_01"))
```

----------------------------------------

TITLE: Defining Table with Composite Primary Key - Python
DESCRIPTION: This snippet defines the 'invoice' table which serves as the referenced table for a composite foreign key. It demonstrates how to specify a primary key that consists of multiple columns ('invoice_id' and 'ref_num') by marking each column with primary_key=True.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/core/constraints.rst#_snippet_2

LANGUAGE: python
CODE:
```
invoice = Table(
    "invoice",
    metadata_obj,
    Column("invoice_id", Integer, primary_key=True),
    Column("ref_num", Integer, primary_key=True),
    Column("description", String(60), nullable=False),
)
```

----------------------------------------

TITLE: Configuring Cascades on SQLAlchemy Declarative Relationships
DESCRIPTION: Demonstrates how to configure cascade behavior directly on `relationship` objects within a SQLAlchemy declarative class definition. It shows setting `cascade="all, delete-orphan"` for a collection relationship and `cascade="save-update"` for a scalar relationship.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/cascades.rst#_snippet_0

LANGUAGE: Python
CODE:
```
class Order(Base):
    __tablename__ = "order"

    items = relationship("Item", cascade="all, delete-orphan")
    customer = relationship("User", cascade="save-update")
```

----------------------------------------

TITLE: SQLAlchemy column_property with Correlated Subquery (Python)
DESCRIPTION: Shows how to map a correlated subquery using `column_property` to count related rows (`Address`) for a `User`. It uses `select`, `func.count`, `where`, `correlate_except`, and `scalar_subquery` to define the SQL expression. Includes base class and Address definition for context.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/mapped_sql_expr.rst#_snippet_5

LANGUAGE: Python
CODE:
```
from sqlalchemy.orm import column_property
from sqlalchemy import select, func
from sqlalchemy import Column, Integer, String, ForeignKey

from sqlalchemy.orm import DeclarativeBase


class Base(DeclarativeBase):
    pass


class Address(Base):
    __tablename__ = "address"
    id = mapped_column(Integer, primary_key=True)
    user_id = mapped_column(Integer, ForeignKey("user.id"))


class User(Base):
    __tablename__ = "user"
    id = mapped_column(Integer, primary_key=True)
    address_count = column_property(
        select(func.count(Address.id))
        .where(Address.user_id == id)
        .correlate_except(Address)
        .scalar_subquery()
    )
```

----------------------------------------

TITLE: Defining Node ORM Mapping (Bidirectional) with SQLAlchemy
DESCRIPTION: Defines the `Node` class with a bidirectional self-referential relationship. It includes both a `children` relationship (one-to-many) and a `parent` relationship (many-to-one). `back_populates` is used to link these two relationships together, ensuring changes on one side are reflected on the other. `remote_side=[id]` is used for the `parent` relationship.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/self_referential.rst#_snippet_2

LANGUAGE: Python
CODE:
```
class Node(Base):
    __tablename__ = "node"
    id = mapped_column(Integer, primary_key=True)
    parent_id = mapped_column(Integer, ForeignKey("node.id"))
    data = mapped_column(String(50))
    children = relationship("Node", back_populates="parent")
    parent = relationship("Node", back_populates="children", remote_side=[id])
```

----------------------------------------

TITLE: Selecting ORM Entities Directly with Session.scalars
DESCRIPTION: Demonstrates using `session.scalars()` to execute a SELECT statement that targets an ORM entity (`User`). This method directly returns a `ScalarResult` object which yields the ORM entity instances themselves, avoiding the intermediate `Row` objects. Includes the generated SQL and the final list of entities.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/queryguide/select.rst#_snippet_4

LANGUAGE: python
CODE:
```
session.scalars(select(User).order_by(User.id)).all()
```

LANGUAGE: sql
CODE:
```
SELECT user_account.id, user_account.name, user_account.fullname
FROM user_account ORDER BY user_account.id
```

----------------------------------------

TITLE: Filtering on Joined Relationship with Select.join and Joinedload
DESCRIPTION: This snippet demonstrates how Select.join and joinedload interact when filtering on a column in the related table (Address.email_address). The explicit join is used for the filter condition, while joinedload handles the eager loading via a separate LEFT OUTER JOIN.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/queryguide/relationships.rst#_snippet_25

LANGUAGE: Python
CODE:
```
>>> stmt = (
    select(User)
    .join(User.addresses)
    .options(joinedload(User.addresses))
    .filter(User.name == "spongebob")
    .filter(Address.email_address == "someaddress@foo.com")
)
>>> result = session.scalars(stmt).unique().all()
```

LANGUAGE: SQL
CODE:
```
SELECT
    addresses_1.id AS addresses_1_id,
    addresses_1.email_address AS addresses_1_email_address,
    addresses_1.user_id AS addresses_1_user_id,
    users.id AS users_id, users.name AS users_name,
    users.fullname AS users_fullname,
    users.nickname AS users_nickname
FROM users JOIN addresses
    ON users.id = addresses.user_id
LEFT OUTER JOIN addresses AS addresses_1
    ON users.id = addresses_1.user_id
WHERE users.name = ? AND addresses.email_address = ?
```

----------------------------------------

TITLE: Basic Select Statement Python
DESCRIPTION: A foundational example showing the creation of a simple `select` statement from a defined SQLAlchemy `Table` object. This snippet provides context for the subsequent examples that demonstrate incorrect usage of such statements in FROM clauses.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/errors.rst#_snippet_11

LANGUAGE: python
CODE:
```
m = MetaData()
t = Table("t", m, Column("a", Integer), Column("b", Integer), Column("c", Integer))
stmt = select(t)
```

----------------------------------------

TITLE: Accessing Autogenerated Primary Keys After Flush (Python)
DESCRIPTION: Shows how to access the `id` attribute on ORM objects after a flush operation. The ORM automatically retrieves database-assigned primary keys for newly inserted rows and updates the objects.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/tutorial/orm_data_manipulation.rst#_snippet_6

LANGUAGE: Python
CODE:
```
>>> squidward.id
4
>>> krabs.id
5
```

----------------------------------------

TITLE: Configure insertmanyvalues Batch Size via Statement Execution Options (Python)
DESCRIPTION: This snippet illustrates how to configure the batch size directly on an INSERT statement object using the `.execution_options()` method. This setting is attached to the statement itself and will be used whenever this statement is executed, overriding any engine-level default.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/core/connections.rst#_snippet_70

LANGUAGE: python
CODE:
```
stmt = (
    table.insert()
    .returning(table.c.id)
    .execution_options(insertmanyvalues_page_size=100)
)
with e.begin() as conn:
    result = conn.execute(stmt, parameterlist)
```

----------------------------------------

TITLE: Committing Session - Python
DESCRIPTION: Demonstrates committing the current transaction in a SQLAlchemy `Session`, persisting changes to the database.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_08.rst#_snippet_16

LANGUAGE: python
CODE:
```
>>> s.commit()
```

----------------------------------------

TITLE: Querying Related Objects with with_parent - SQLAlchemy Python
DESCRIPTION: Illustrates constructing a 2.0-style select statement using `sqlalchemy.orm.with_parent` to filter related objects (posts) based on a parent object (user). Requires importing `with_parent` and having a `User` model and an active session.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_20.rst#_snippet_98

LANGUAGE: Python
CODE:
```
from sqlalchemy.orm import with_parent

jack = session.get(User, 5)

posts = session.scalars(
    select(Post)
    .where(with_parent(jack, User.posts))
    .where(Post.headline == "this is a post")
)
```

----------------------------------------

TITLE: Defining SQLAlchemy ORM Relationship with lazy="raise" Strategy (Python)
DESCRIPTION: Defines a SQLAlchemy ORM `Address` class with a `user` relationship configured with the `lazy="raise"` loading strategy. This strategy normally causes an exception if the relationship is accessed when not already loaded. The text notes that assigning to this relationship (as in Snippet 3) previously invoked this "raiseload" exception when trying to get the old value, but the fix prevents this for old value retrieval during assignment. Requires SQLAlchemy ORM setup (`Base`, `relationship`). Input: ORM model definition. Output: ORM model with a specific relationship configuration.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_13.rst#_snippet_7

LANGUAGE: Python
CODE:
```
class Address(Base):
    # ...

    user = relationship("User", ..., lazy="raise")
```

----------------------------------------

TITLE: Demonstrating Value Containment in Future Result Rows - Python
DESCRIPTION: Shows the new behavior of SQLAlchemy's `Result` and `Row` objects when using `future=True`. It demonstrates that the `in` operator now checks for *value* containment within the row's data, rather than checking for the existence of a column *key* with that name.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_14.rst#_snippet_2

LANGUAGE: python
CODE:
```
engine = create_engine("...", future=True)
conn = engine.connect()
row = conn.execute.first()
"name" in row
```

----------------------------------------

TITLE: Upsert with RETURNING using dialect-specific Insert in SQLAlchemy ORM
DESCRIPTION: Illustrates performing an upsert (insert or update on conflict) operation using a dialect-specific insert construct (here, for SQLite). The statement uses values() with a list of dictionaries, on_conflict_do_update() to specify the conflict resolution, and returning() to retrieve the affected ORM entities. The operation is executed via session.scalars().
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/whatsnew_20.rst#_snippet_26

LANGUAGE: Python
CODE:
```
from sqlalchemy.dialects.sqlite import insert as sqlite_upsert
stmt = sqlite_upsert(User).values(
    [
        {"name": "spongebob", "fullname": "Spongebob Squarepants"},
        {"name": "sandy", "fullname": "Sandy Cheeks"},
        {"name": "patrick", "fullname": "Patrick Star"},
        {"name": "squidward", "fullname": "Squidward Tentacles"},
        {"name": "ehkrabs", "fullname": "Eugene H. Krabs"},
    ]
)
stmt = stmt.on_conflict_do_update(
    index_elements=[User.name], set_=dict(fullname=stmt.excluded.fullname)
)
result = session.scalars(stmt.returning(User))
print(result.all())
```

----------------------------------------

TITLE: Loading specific columns with load_only - SQLAlchemy Python
DESCRIPTION: Demonstrates using the `load_only` loader option with a `select` statement to specify a subset of column-mapped attributes to be loaded. It omits other non-primary-key columns by default. Required dependencies: SQLAlchemy ORM, a mapped class (Book), and a session.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/queryguide/columns.rst#_snippet_0

LANGUAGE: Python
CODE:
```
from sqlalchemy import select
from sqlalchemy.orm import load_only
stmt = select(Book).options(load_only(Book.title, Book.summary))
books = session.scalars(stmt).all()
```

LANGUAGE: SQL
CODE:
```
SELECT book.id, book.title, book.summary
FROM book
[...] ()
```

LANGUAGE: Python
CODE:
```
for book in books:
    print(f"{book.title}  {book.summary}")
```

LANGUAGE: text
CODE:
```
100 Years of Krabby Patties  some long summary
Sea Catch 22  another long summary
The Sea Grapes of Wrath  yet another summary
A Nut Like No Other  some long summary
Geodesic Domes: A Retrospective  another long summary
Rocketry for Squirrels  yet another summary
```

----------------------------------------

TITLE: Creating SQLAlchemy Function Expression (Python)
DESCRIPTION: Demonstrates how to create a SQL function expression using `func.count` in SQLAlchemy Core. Shows printing the expression to see its SQL representation.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/tutorial/data_select.rst#_snippet_41

LANGUAGE: Python
CODE:
```
count_fn = func.count(user_table.c.id)
print(count_fn)
```

----------------------------------------

TITLE: Accessing Result Rows as Mappings/Dictionaries - Python
DESCRIPTION: Illustrates how to obtain dictionary-like row objects from a `Result` object using the `.mappings()` method. This allows using key containment checks (`"key" in row`) which is the legacy behavior, contrasting with the new default value containment behavior for named tuple style rows returned directly.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_14.rst#_snippet_3

LANGUAGE: python
CODE:
```
for dict_row in session.execute(text("select id from table")).mappings():
    assert "id" in dict_row
```

----------------------------------------

TITLE: Creating SQLite Engines - Python
DESCRIPTION: Demonstrates creating SQLAlchemy Engines for SQLite, covering file-based databases with relative and absolute paths (Unix/Mac, Windows), including using raw strings for Windows paths, and connecting to an in-memory database.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/core/engines.rst#_snippet_9

LANGUAGE: Python
CODE:
```
# sqlite://<nohostname>/<path>
# where <path> is relative:
engine = create_engine("sqlite:///foo.db")
```

LANGUAGE: Python
CODE:
```
# Unix/Mac - 4 initial slashes in total
engine = create_engine("sqlite:////absolute/path/to/foo.db")
```

LANGUAGE: Python
CODE:
```
# Windows
engine = create_engine("sqlite:///C:\\path\\to\\foo.db")
```

LANGUAGE: Python
CODE:
```
# Windows alternative using raw string
engine = create_engine(r"sqlite:///C:\\path\\to\\foo.db")
```

LANGUAGE: Python
CODE:
```
# To use a SQLite :memory: database, specify an empty URL:
engine = create_engine("sqlite://")
```

----------------------------------------

TITLE: Mapping Many-to-One Relationship Python
DESCRIPTION: Defines SQLAlchemy ORM classes for Department and Employee, showing how to configure a many-to-one relationship from the Employee class back to Department using the `relationship` function, linked by the foreign key.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/glossary.rst#_snippet_20

LANGUAGE: python
CODE:
```
class Department(Base):
    __tablename__ = "department"
    id = Column(Integer, primary_key=True)
    name = Column(String(30))


class Employee(Base):
    __tablename__ = "employee"
    id = Column(Integer, primary_key=True)
    name = Column(String(30))
    dep_id = Column(Integer, ForeignKey("department.id"))
    department = relationship("Department")
```

----------------------------------------

TITLE: Adding Unique Constraint for One-to-One Enforcement - Python
DESCRIPTION: This example shows how to enforce a One-to-One relationship at the database level using a `UniqueConstraint` on the foreign key column (`parent_id`) within the Child class `__table_args__`. This ensures only one child can reference a specific parent.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/basic_relationships.rst#_snippet_11

LANGUAGE: python
CODE:
```
from sqlalchemy import UniqueConstraint


class Child(Base):
    __tablename__ = "child_table"

    id: Mapped[int] = mapped_column(primary_key=True)
    parent_id: Mapped[int] = mapped_column(ForeignKey("parent_table.id"))
    parent: Mapped["Parent"] = relationship(back_populates="child")

    __table_args__ = (UniqueConstraint("parent_id"),)
```

----------------------------------------

TITLE: Defining Many-to-Many Schema SQL
DESCRIPTION: Illustrates the SQL schema for tables involved in a many-to-many relationship, including two main entity tables (employee, project) and an intermediary association table (employee_project) with a composite primary key and foreign keys.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/glossary.rst#_snippet_22

LANGUAGE: sql
CODE:
```
CREATE TABLE employee (
    id INTEGER PRIMARY KEY,
    name VARCHAR(30)
)

CREATE TABLE project (
    id INTEGER PRIMARY KEY,
    name VARCHAR(30)
)

CREATE TABLE employee_project (
    employee_id INTEGER PRIMARY KEY,
    project_id INTEGER PRIMARY KEY,
    FOREIGN KEY employee_id REFERENCES employee(id),
    FOREIGN KEY project_id REFERENCES project(id)
)
```

----------------------------------------

TITLE: Setting Transaction Isolation Using Engine Execution Options
DESCRIPTION: Demonstrates setting transaction isolation levels on derived Engine objects using engine.execution_options(), allowing for different default isolation levels or autocommit mode while sharing the connection pool. Useful for creating sessionmakers with distinct transaction behaviors.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/session_transaction.rst#_snippet_20

LANGUAGE: Python
CODE:
```
from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker

eng = create_engine("postgresql+psycopg2://scott:tiger@localhost/test")

autocommit_engine = eng.execution_options(isolation_level="AUTOCOMMIT")

transactional_session = sessionmaker(eng)
autocommit_session = sessionmaker(autocommit_engine)
```

----------------------------------------

TITLE: Demonstrating SQLAlchemy Dataclass Mixin Warning - Python
DESCRIPTION: This snippet shows a SQLAlchemy Declarative mapping using `MappedAsDataclass` on the base class. It includes a mixin class (`Mixin`) that has mapped attributes but does not inherit from `MappedAsDataclass`, which triggers a deprecation warning in SQLAlchemy 2.0+
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/errors.rst#_snippet_36

LANGUAGE: Python
CODE:
```
from __future__ import annotations

import inspect
from typing import Optional
from uuid import uuid4

from sqlalchemy import String
from sqlalchemy.orm import DeclarativeBase
from sqlalchemy.orm import Mapped
from sqlalchemy.orm import mapped_column
from sqlalchemy.orm import MappedAsDataclass


class Mixin:
    create_user: Mapped[int] = mapped_column()
    update_user: Mapped[Optional[int]] = mapped_column(default=None, init=False)


class Base(DeclarativeBase, MappedAsDataclass):
    pass


class User(Base, Mixin):
    __tablename__ = "sys_user"

    uid: Mapped[str] = mapped_column(
        String(50), init=False, default_factory=uuid4, primary_key=True
    )
    username: Mapped[str] = mapped_column()
    email: Mapped[str] = mapped_column()
```

----------------------------------------

TITLE: Implementing Baked Queries with Conditional Criteria Python SQLAlchemy
DESCRIPTION: This example shows how to handle conditional query logic using SQLAlchemy's baked queries and the `with_criteria` method. The base query structure is baked, and conditional parts are added as separate criteria callables, allowing the baking system to manage caching automatically without manual cache key management.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/extensions/baked.rst#_snippet_7

LANGUAGE: python
CODE:
```
bakery = baked.bakery()


def lookup(session, id_argument, include_frobnizzle=False):
    def create_model_query(session):
        return session.query(Model).filter(Model.id == bindparam("id"))

    parameterized_query = bakery.bake(create_model_query)

    if include_frobnizzle:

        def include_frobnizzle_in_query(query):
            return query.filter(Model.frobnizzle == True)

        parameterized_query = parameterized_query.with_criteria(
            include_frobnizzle_in_query
        )

    return parameterized_query(session).params(id=id_argument).all()
```

----------------------------------------

TITLE: Defining SQLAlchemy ORM Classes for Joined Inheritance (Inline Load) - Python
DESCRIPTION: These classes define SQLAlchemy ORM mappings for `Engineer` and `Manager` inheriting from `Employee` using joined table inheritance. `polymorphic_load="inline"` configures SQLAlchemy to automatically load attributes from joined tables when querying the base `Employee` class.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/queryguide/inheritance.rst#_snippet_31

LANGUAGE: Python
CODE:
```
        id = mapped_column(Integer, ForeignKey("employee.id"), primary_key=True)
        engineer_info = mapped_column(String(30))

        __mapper_args__ = {
            "polymorphic_load": "inline",
            "polymorphic_identity": "engineer",
        }


    class Manager(Employee):
        __tablename__ = "manager"
        id = mapped_column(Integer, ForeignKey("employee.id"), primary_key=True)
        manager_name = mapped_column(String(30))

        __mapper_args__ = {
            "polymorphic_load": "inline",
            "polymorphic_identity": "manager",
        }
```

----------------------------------------

TITLE: Defining ORM Models with passive_deletes='all' - Python
DESCRIPTION: Defines SQLAlchemy declarative models 'User' and 'Address' with a one-to-many relationship. The `passive_deletes='all'` option is specified on the `addresses` relationship to prevent foreign key modification upon object removal from the collection.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_13.rst#_snippet_39

LANGUAGE: Python
CODE:
```
class User(Base):
    __tablename__ = "users"

    id = Column(Integer, primary_key=True)
    addresses = relationship("Address", passive_deletes="all")


class Address(Base):
    __tablename__ = "addresses"
    id = Column(Integer, primary_key=True)
    email = Column(String)

    user_id = Column(Integer, ForeignKey("users.id"))
    user = relationship("User")
```

----------------------------------------

TITLE: Creating ORM Session - Python
DESCRIPTION: Shows the instantiation of a SQLAlchemy `Session` object.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_08.rst#_snippet_14

LANGUAGE: python
CODE:
```
>>> s = Session()
```

----------------------------------------

TITLE: Defining Unidirectional Many-to-Many using Association Table - Python
DESCRIPTION: This example shows how to set up a unidirectional Many-to-Many relationship using an association table. The association table is defined as a Core `Table` with foreign keys linking to the two related entities, and it is specified using the `secondary` parameter in the `relationship`.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/basic_relationships.rst#_snippet_13

LANGUAGE: python
CODE:
```
from __future__ import annotations

    from sqlalchemy import Column
    from sqlalchemy import Table
    from sqlalchemy import ForeignKey
    from sqlalchemy import Integer
    from sqlalchemy.orm import Mapped
    from sqlalchemy.orm import mapped_column
    from sqlalchemy.orm import DeclarativeBase
    from sqlalchemy.orm import relationship


    class Base(DeclarativeBase):
        pass


    # note for a Core table, we use the sqlalchemy.Column construct,
    # not sqlalchemy.orm.mapped_column
    association_table = Table(
        "association_table",
        Base.metadata,
        Column("left_id", ForeignKey("left_table.id")),
        Column("right_id", ForeignKey("right_table.id")),
    )


    class Parent(Base):
        __tablename__ = "left_table"

        id: Mapped[int] = mapped_column(primary_key=True)
        children: Mapped[List[Child]] = relationship(secondary=association_table)


    class Child(Base):
        __tablename__ = "right_table"

        id: Mapped[int] = mapped_column(primary_key=True)
```

----------------------------------------

TITLE: Applying MappedAsDataclass Mixin to Specific ORM Class - Python/SQLAlchemy
DESCRIPTION: Illustrates how to apply the `MappedAsDataclass` mixin directly to a specific ORM-mapped class (`User`) rather than the Declarative base. Only the class explicitly including the mixin will be converted into a Python dataclass.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/dataclasses.rst#_snippet_1

LANGUAGE: Python
CODE:
```
from sqlalchemy.orm import DeclarativeBase
from sqlalchemy.orm import Mapped
from sqlalchemy.orm import mapped_column
from sqlalchemy.orm import MappedAsDataclass


class Base(DeclarativeBase):
    pass


class User(MappedAsDataclass, Base):
    """User class will be converted to a dataclass"""

    __tablename__ = "user_account"

    id: Mapped[int] = mapped_column(init=False, primary_key=True)
    name: Mapped[str]
```

----------------------------------------

TITLE: Defining Bidirectional Association Object Mapping
DESCRIPTION: This snippet shows how to extend the association object pattern to be bidirectional. Additional `relationship` constructs are added to link `Association` back to `Parent` and `Child` back to `Association`, using `back_populates` to ensure relationship coherence in both directions.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/basic_relationships.rst#_snippet_19

LANGUAGE: Python
CODE:
```
from typing import Optional

from sqlalchemy import ForeignKey
from sqlalchemy import Integer
from sqlalchemy.orm import Mapped
from sqlalchemy.orm import mapped_column
from sqlalchemy.orm import DeclarativeBase
from sqlalchemy.orm import relationship


class Base(DeclarativeBase):
    pass


class Association(Base):
    __tablename__ = "association_table"
    left_id: Mapped[int] = mapped_column(ForeignKey("left_table.id"), primary_key=True)
    right_id: Mapped[int] = mapped_column(
        ForeignKey("right_table.id"), primary_key=True
    )
    extra_data: Mapped[Optional[str]]
    child: Mapped["Child"] = relationship(back_populates="parents")
    parent: Mapped["Parent"] = relationship(back_populates="children")


class Parent(Base):
    __tablename__ = "left_table"
    id: Mapped[int] = mapped_column(primary_key=True)
    children: Mapped[List["Association"]] = relationship(back_populates="parent")


class Child(Base):
    __tablename__ = "right_table"
    id: Mapped[int] = mapped_column(primary_key=True)
    parents: Mapped[List["Association"]] = relationship(back_populates="child")
```

----------------------------------------

TITLE: Using SQLAlchemy Session as Context Manager in Python
DESCRIPTION: Demonstrates how to use a SQLAlchemy ORM Session object as a context manager. This pattern ensures that the Session's close() method is automatically called upon exiting the 'with' block, releasing resources and resetting the session state.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/session_basics.rst#_snippet_20

LANGUAGE: python
CODE:
```
with Session(engine) as session:
    result = session.execute(select(User))

# closes session automatically
```

----------------------------------------

TITLE: Augmenting DeclarativeBase for Common ORM Elements
DESCRIPTION: This code demonstrates how to apply common ORM elements directly to the `DeclarativeBase` class, ensuring all derived classes inherit these properties automatically. It includes shared `__tablename__` generation, `__table_args__`, `__mapper_args__`, and a primary key `id` column, simplifying model definitions.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/declarative_mixins.rst#_snippet_3

LANGUAGE: Python
CODE:
```
from sqlalchemy import ForeignKey
from sqlalchemy.orm import declared_attr
from sqlalchemy.orm import DeclarativeBase
from sqlalchemy.orm import Mapped
from sqlalchemy.orm import mapped_column
from sqlalchemy.orm import relationship


class Base(DeclarativeBase):
    """define a series of common elements that may be applied to mapped
    classes using this class as a base class."""

    @declared_attr.directive
    def __tablename__(cls) -> str:
        return cls.__name__.lower()

    __table_args__ = {"mysql_engine": "InnoDB"}
    __mapper_args__ = {"eager_defaults": True}

    id: Mapped[int] = mapped_column(primary_key=True)


class HasLogRecord:
    """mark classes that have a many-to-one relationship to the
    ``LogRecord`` class."""

    log_record_id: Mapped[int] = mapped_column(ForeignKey("logrecord.id"))

    @declared_attr
    def log_record(self) -> Mapped["LogRecord"]:
        return relationship("LogRecord")


class LogRecord(Base):
    log_info: Mapped[str]


class MyModel(HasLogRecord, Base):
    name: Mapped[str]
```

----------------------------------------

TITLE: Using Python Native Enum with SQLAlchemy
DESCRIPTION: Demonstrates how to map a native Python `enum.Enum` class directly to a database column using `sqlalchemy.Enum`. It shows creating a table, inserting an enum value, and asserting that the retrieved value is the original enum object.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_11.rst#_snippet_37

LANGUAGE: Python
CODE:
```
import enum
from sqlalchemy import Table, MetaData, Column, Enum, create_engine


class MyEnum(enum.Enum):
    one = 1
    two = 2
    three = 3


t = Table("data", MetaData(), Column("value", Enum(MyEnum)))

e = create_engine("sqlite://")
t.create(e)

e.execute(t.insert(), {"value": MyEnum.two})
assert e.scalar(t.select()) is MyEnum.two
```

----------------------------------------

TITLE: Deleting Object from SQLAlchemy Session (Python)
DESCRIPTION: Marks an object for deletion within the SQLAlchemy ORM session. The actual DELETE SQL statement is not executed immediately but is pending until the session is flushed.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/tutorial/orm_data_manipulation.rst#_snippet_18

LANGUAGE: Python
CODE:
```
>>> session.delete(patrick)
```

----------------------------------------

TITLE: Implementing Backend-Agnostic GUID Type (Python)
DESCRIPTION: This `TypeDecorator` provides a platform-independent GUID type for SQLAlchemy. It uses native database UUID types for PostgreSQL and MSSQL, falling back to `CHAR(32)` for other backends, storing the UUID as a hex string. It handles conversion between Python `uuid.UUID` objects and the database representation.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/core/custom_types.rst#_snippet_4

LANGUAGE: python
CODE:
```
from operator import attrgetter
from sqlalchemy.types import TypeDecorator, CHAR
from sqlalchemy.dialects.mssql import UNIQUEIDENTIFIER
from sqlalchemy.dialects.postgresql import UUID
import uuid


class GUID(TypeDecorator):
    """Platform-independent GUID type.

    Uses PostgreSQL's UUID type or MSSQL's UNIQUEIDENTIFIER,
    otherwise uses CHAR(32), storing as stringified hex values.

    """

    impl = CHAR
    cache_ok = True

    _default_type = CHAR(32)
    _uuid_as_str = attrgetter("hex")

    def load_dialect_impl(self, dialect):
        if dialect.name == "postgresql":
            return dialect.type_descriptor(UUID())
        elif dialect.name == "mssql":
            return dialect.type_descriptor(UNIQUEIDENTIFIER())
        else:
            return dialect.type_descriptor(self._default_type)

    def process_bind_param(self, value, dialect):
        if value is None or dialect.name in ("postgresql", "mssql"):
            return value
        else:
            if not isinstance(value, uuid.UUID):
                value = uuid.UUID(value)
            return self._uuid_as_str(value)

    def process_result_value(self, value, dialect):
        if value is None:
            return value
        else:
            if not isinstance(value, uuid.UUID):
                value = uuid.UUID(value)
            return value
```

----------------------------------------

TITLE: Getting Object by Primary Key using Session.get (Python)
DESCRIPTION: Illustrates using `session.get()` to retrieve an object by its primary key. This method efficiently checks the session's identity map first before potentially querying the database.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/tutorial/orm_data_manipulation.rst#_snippet_7

LANGUAGE: Python
CODE:
```
>>> some_squidward = session.get(User, 4)
>>> some_squidward
User(id=4, name='squidward', fullname='Squidward Tentacles')
```

----------------------------------------

TITLE: Setting Per-Connection Logging Token - Python
DESCRIPTION: Illustrates how to add a custom token (e.g., request ID, transaction ID) to log messages generated by a specific connection using `execution_options(logging_token="...")`. Requires `create_engine` and `text`.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/core/engines.rst#_snippet_23

LANGUAGE: python
CODE:
```
from sqlalchemy import create_engine
from sqlalchemy import text
e = create_engine("sqlite://", echo="debug")
with e.connect().execution_options(logging_token="track1") as conn:
    conn.execute(text("select 1")).all()
```

----------------------------------------

TITLE: Configuring Eager Loading for Self-Referential Relationship (Python)
DESCRIPTION: Defines the `Node` class ORM mapping to configure eager loading for the self-referential `children` relationship. It uses `lazy="joined"` to specify joined eager loading and `join_depth=2` to instruct SQLAlchemy to join up to two levels down the hierarchy when loading `Node` objects, enabling the ORM to fetch parent and grandchild nodes in a single query.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/self_referential.rst#_snippet_6

LANGUAGE: Python
CODE:
```
class Node(Base):
    __tablename__ = "node"
    id = mapped_column(Integer, primary_key=True)
    parent_id = mapped_column(Integer, ForeignKey("node.id"))
    data = mapped_column(String(50))
    children = relationship("Node", lazy="joined", join_depth=2)
```

----------------------------------------

TITLE: Accessing Entities/Attributes from Mapped Rows (2.0 Style) - Python
DESCRIPTION: Shows how to access entire entities or specific attributes directly from a mapped row obtained via `result.mappings()` in SQLAlchemy 2.0 style. This is useful when selecting multiple entities or attributes in a single statement. Requires an ORM Session and a statement selecting entities/attributes.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_20.rst#_snippet_29

LANGUAGE: python
CODE:
```
from sqlalchemy.future import select

stmt = select(User, Address).join(User.addresses)

for row in session.execute(stmt).mappings():
    print("the user is: %s  the address is: %s" % (row[User], row[Address]))
```

----------------------------------------

TITLE: Accessing SQLAlchemy Relationship with Lazy Load (pycon+sql)
DESCRIPTION: This snippet demonstrates the default lazy loading behavior in SQLAlchemy ORM when accessing a relationship attribute (u1.addresses) for the first time. It shows the Python code that triggers the load and the single SQL SELECT query that is emitted to fetch the related Address objects based on the user ID.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/tutorial/orm_related_objects.rst#_snippet_11

LANGUAGE: pycon+sql
CODE:
```
>>> u1.addresses
{execsql}SELECT address.id AS address_id, address.email_address AS address_email_address,
address.user_id AS address_user_id
FROM address
WHERE ? = address.user_id
[...] (6,){stop}
[Address(id=4, email_address='pearl.krabs@gmail.com'), Address(id=5, email_address='pearl@aol.com')]
```

----------------------------------------

TITLE: Creating SQLAlchemy CTE with Aggregate Count
DESCRIPTION: Demonstrates how to construct a SQLAlchemy `CTE` object, which is similar to a subquery but uses the `cte()` method. This CTE selects a count of addresses per user ID, grouping by `user_id` and labeling the count column 'count'.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/tutorial/data_select.rst#_snippet_53

LANGUAGE: Python
CODE:
```
subq = (
    select(func.count(address_table.c.id).label("count"), address_table.c.user_id)
    .group_by(address_table.c.user_id)
    .cte()
)
```

----------------------------------------

TITLE: Getting Affected Row Count from SQLAlchemy Core Update/Delete
DESCRIPTION: Shows the execution of an `UPDATE` statement within a transaction using `conn.execute()`. It highlights how the `rowcount` attribute of the returned `CursorResult` object provides the number of rows that were modified by the statement. This applies to both `UPDATE` and `DELETE`.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/tutorial/data_update.rst#_snippet_9

LANGUAGE: Python
CODE:
```
with engine.begin() as conn:
    result = conn.execute(
        update(user_table)
        .values(fullname="Patrick McStar")
        .where(user_table.c.name == "patrick")
    )
    print(result.rowcount)
```

LANGUAGE: SQL
CODE:
```
BEGIN (implicit)
UPDATE user_account SET fullname=? WHERE user_account.name = ?
[...] ('Patrick McStar', 'patrick')
COMMIT
```

LANGUAGE: text
CODE:
```
1
```

----------------------------------------

TITLE: SQLAlchemy: 2.0 Recommended Execute Parameter Styles
DESCRIPTION: Examples of the recommended parameter passing styles for `Connection.execute` in SQLAlchemy 2.0, using `text()` for SQL strings, a single dictionary for single execution, and a list of dictionaries for `executemany` operations.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_20.rst#_snippet_26

LANGUAGE: Python
CODE:
```
connection = engine.connect()

from sqlalchemy import text

result = connection.execute(text("select * from table"))

# pass a single dictionary for single statement execution
result = connection.execute(table.insert(), {"x": 10, "y": 5})

# pass a list of dictionaries for executemany
result = connection.execute(
    table.insert(), [{"x": 10, "y": 5}, {"x": 15, "y": 12}, {"x": 9, "y": 8}]
)
```

----------------------------------------

TITLE: Mapping Association Object (SQLAlchemy Python)
DESCRIPTION: SQLAlchemy Declarative ORM class definitions corresponding to the employee, project, and employee_project tables. The EmployeeProject class serves as the association object, defining columns, foreign keys, primary keys, and relationships to both the Employee and Project classes, enabling traversal and data storage on the link.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/glossary.rst#_snippet_26

LANGUAGE: Python
CODE:
```
class Employee(Base):
    __tablename__ = "employee"

    id = Column(Integer, primary_key=True)
    name = Column(String(30))


class Project(Base):
    __tablename__ = "project"

    id = Column(Integer, primary_key=True)
    name = Column(String(30))


class EmployeeProject(Base):
    __tablename__ = "employee_project"

    employee_id = Column(Integer, ForeignKey("employee.id"), primary_key=True)
    project_id = Column(Integer, ForeignKey("project.id"), primary_key=True)
    role_name = Column(String(30))

    project = relationship("Project", backref="project_employees")
    employee = relationship("Employee", backref="employee_projects")
```

----------------------------------------

TITLE: Assigning Separate Metadata Objects (SQLAlchemy Python)
DESCRIPTION: Illustrates assigning different `MetaData` instances to `BaseOne` and `BaseTwo` within a registry. Classes inheriting or mapped using these bases (`ClassTwo`, `ClassThree`) will use the assigned metadata, while a standard mapped class (`ClassOne`) uses the registry's default. Useful for managing tables across different databases or schemas.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/declarative_config.rst#_snippet_8

LANGUAGE: Python
CODE:
```
reg = registry()


class BaseOne:
    metadata = MetaData()


class BaseTwo:
    metadata = MetaData()


@reg.mapped
class ClassOne:
    __tablename__ = "t1"  # will use reg.metadata

    id = mapped_column(Integer, primary_key=True)


@reg.mapped
class ClassTwo(BaseOne):
    __tablename__ = "t1"  # will use BaseOne.metadata

    id = mapped_column(Integer, primary_key=True)


@reg.mapped
class ClassThree(BaseTwo):
    __tablename__ = "t1"  # will use BaseTwo.metadata

    id = mapped_column(Integer, primary_key=True)
```

----------------------------------------

TITLE: Combining Constraints and Keyword Arguments in SQLAlchemy Declarative `__table_args__`
DESCRIPTION: Shows how to include both positional arguments (constraints) and keyword arguments (like `autoload`) within the `__table_args__` tuple by placing a dictionary as the last element.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/declarative_tables.rst#_snippet_9

LANGUAGE: Python
CODE:
```
class MyClass(Base):
    __tablename__ = "sometable"
    __table_args__ = (
        ForeignKeyConstraint(["id"], ["remote_table.id"]),
        UniqueConstraint("foo"),
        {"autoload": True},
    )
```

----------------------------------------

TITLE: Querying User with Outer Join - SQLAlchemy Python
DESCRIPTION: This snippet demonstrates querying `User` objects and performing an outer join to their associated addresses. It is used to illustrate how SQLAlchemy's ORM deduplicates primary objects when fetching full entities, even if the underlying SQL query would return multiple rows for the same primary key.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/faq/sessions.rst#_snippet_2

LANGUAGE: python
CODE:
```
q = session.query(User).outerjoin(User.addresses).filter(User.name == "jack")
```

----------------------------------------

TITLE: Committing SQLAlchemy Session - Python
DESCRIPTION: Committing the session persists pending changes to the database and, by default, expires all object state in the session. Expiring state ensures that subsequent attribute access will load the latest values, including those affected by foreign key changes.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/faq/sessions.rst#_snippet_9

LANGUAGE: python
CODE:
```
session.commit()  # expires all attributes
```

----------------------------------------

TITLE: Generated SQL for Greater Than Condition
DESCRIPTION: Shows the SQL fragment generated by SQLAlchemy for a greater than comparison using the `>` operator on a `Column` object.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/tutorial/data_select.rst#_snippet_22

LANGUAGE: SQL
CODE:
```
address.user_id > :user_id_1
```

----------------------------------------

TITLE: Set Isolation Level Per Connection in SQLAlchemy
DESCRIPTION: Demonstrates how to set the transaction isolation level for a specific connection acquired from an engine using `execution_options`. The isolation level is applied to the connection before starting a transaction and executing a statement. This setting is temporary for the duration of the connection usage within the `with` block.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/core/connections.rst#_snippet_9

LANGUAGE: Python
CODE:
```
with engine.connect().execution_options(
    isolation_level="REPEATABLE READ"
) as connection:
    with connection.begin():
        connection.execute(text("<statement>"))
```

----------------------------------------

TITLE: Defining Composite Dataclass - Python
DESCRIPTION: Defines a basic Python dataclass named `Point` with two integer attributes, `x` and `y`. This class serves as the user-defined type that SQLAlchemy will map to multiple database columns using the `composite` construct.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/composites.rst#_snippet_0

LANGUAGE: Python
CODE:
```
import dataclasses


@dataclasses.dataclass
class Point:
    x: int
    y: int
```

----------------------------------------

TITLE: Using MySQL ON DUPLICATE KEY UPDATE (Python)
DESCRIPTION: Shows how to construct an INSERT statement with the MySQL-specific ON DUPLICATE KEY UPDATE clause using the `sqlalchemy.dialects.mysql.insert` function and the `on_duplicate_key_update` method.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_12.rst#_snippet_67

LANGUAGE: python
CODE:
```
from sqlalchemy.dialects.mysql import insert

insert_stmt = insert(my_table).values(id="some_id", data="some data to insert")

on_conflict_stmt = insert_stmt.on_duplicate_key_update(
    data=insert_stmt.inserted.data, status="U"
)

conn.execute(on_conflict_stmt)
```

----------------------------------------

TITLE: Applying load_only ORM Option in Python
DESCRIPTION: Shows how to use the load_only option to specify only certain columns to load, effectively deferring all others. Examples include applying it directly to the main entity, specifying an explicit parent with Load, and applying it to a relationship path.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_09.rst#_snippet_39

LANGUAGE: Python
CODE:
```
from sqlalchemy.orm import load_only

query(User).options(load_only("name", "fullname"))

# specify explicit parent entity
query(User, Address).options(Load(User).load_only("name", "fullname"))

# specify path
query(User).options(joinedload(User.addresses).load_only("email_address"))
```

----------------------------------------

TITLE: Assigning Relationship Attribute Explicitly - SQLAlchemy Python
DESCRIPTION: This snippet illustrates that explicitly assigning a `User` object to the `user` attribute of an `Address` object has the same effect as passing it during construction or appending to the `User.addresses` collection.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/tutorial/orm_related_objects.rst#_snippet_6

LANGUAGE: Python
CODE:
```
# equivalent effect as a2 = Address(user=u1)
>>> a2.user = u1
```

----------------------------------------

TITLE: Defining ORM Model with Identity Primary Key - Python
DESCRIPTION: Defines a SQLAlchemy ORM model (`MyOracleModel`) with a primary key column (`id`) mapped using `mapped_column(Identity(), primary_key=True)`. This mapping uses the database's native identity generation feature. SQLAlchemy Core and ORM handle fetching the newly generated primary key value automatically upon insert, typically utilizing `RETURNING` if the backend (like Oracle) supports it, or alternative methods like `scope_identity()` or `lastrowid` otherwise.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/persistence_techniques.rst#_snippet_16

LANGUAGE: Python
CODE:
```
class MyOracleModel(Base):
    __tablename__ = "my_table"

    id: Mapped[int] = mapped_column(Identity(), primary_key=True)
    data: Mapped[str] = mapped_column(String(50))
```

----------------------------------------

TITLE: Accessing Relationship Attribute on New Object - SQLAlchemy Python
DESCRIPTION: This snippet demonstrates creating a new `User` object and accessing its `addresses` relationship attribute, showing that it initializes as an empty list-like collection before any addresses are added.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/tutorial/orm_related_objects.rst#_snippet_1

LANGUAGE: Python
CODE:
```
>>> u1 = User(name="pkrabs", fullname="Pearl Krabs")
>>> u1.addresses
[]
```

----------------------------------------

TITLE: Instantiating Dataclass with InitVar and PostInit Python
DESCRIPTION: Demonstrates creating an instance of a mapped dataclass that uses `InitVar` and `__post_init__`. It shows how the `InitVar` parameters are passed during instantiation and how the `__post_init__` method is automatically called to process them, resulting in the mapped field being populated.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/dataclasses.rst#_snippet_15

LANGUAGE: Python
CODE:
```
>>> u1 = User(name="some_user", password="xyz", repeat_password="xyz")
>>> u1.password_hash
'$6$9ppc... (example crypted string....)'
```

----------------------------------------

TITLE: Get SQLAlchemy ORM Object by Primary Key (Python)
DESCRIPTION: Demonstrates using the `session.get()` method to retrieve an ORM-mapped object (e.g., 'User') by its primary key. This method first checks the session's identity map before querying the database.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/session_basics.rst#_snippet_14

LANGUAGE: Python
CODE:
```
my_user = session.get(User, 5)
```

----------------------------------------

TITLE: Configure Selectin Loading at Mapping Time - SQLAlchemy Python
DESCRIPTION: This snippet defines SQLAlchemy Declarative models `Parent` and `Child` and configures the `Parent.children` relationship to use the `selectin` loader strategy by default whenever `Parent` objects are loaded. This strategy emits a second query to load related children for all loaded parents.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/queryguide/relationships.rst#_snippet_0

LANGUAGE: Python
CODE:
```
from typing import List

from sqlalchemy import ForeignKey
from sqlalchemy.orm import DeclarativeBase
from sqlalchemy.orm import Mapped
from sqlalchemy.orm import mapped_column
from sqlalchemy.orm import relationship


class Base(DeclarativeBase):
    pass


class Parent(Base):
    __tablename__ = "parent"

    id: Mapped[int] = mapped_column(primary_key=True)
    children: Mapped[List["Child"]] = relationship(lazy="selectin")


class Child(Base):
    __tablename__ = "child"

    id: Mapped[int] = mapped_column(primary_key=True)
    parent_id: Mapped[int] = mapped_column(ForeignKey("parent.id"))
```

----------------------------------------

TITLE: Viewing Results of Entity Selection with result.all()
DESCRIPTION: Shows the typical output format when calling `result.all()` on a `Result` object obtained from selecting an entire ORM entity using `session.execute`. The result is a list of tuples, where each tuple contains a single element which is the ORM entity instance.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/queryguide/select.rst#_snippet_3

LANGUAGE: python
CODE:
```
result.all()
```

----------------------------------------

TITLE: Performing Bulk Insert with Per-Row SQL Expressions (SQLAlchemy ORM, Python)
DESCRIPTION: Illustrates using `Insert.values` with a list of dictionaries, where each dictionary can contain SQL expressions specific to that row (e.g., a `select` statement for `user_id`). This method renders a single multi-value INSERT statement and does not use the bulk ORM insert mode via `session.execute(stmt, params_list)`.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/queryguide/dml.rst#_snippet_10

LANGUAGE: python
CODE:
```
>>> from sqlalchemy import select
>>> address_result = session.scalars(
...     insert(Address)
...     .values(
...         [
...             {
...                 "user_id": select(User.id).where(User.name == "sandy"),
...                 "email_address": "sandy@company.com",
...             }
...         ]
...     )
... )
```

----------------------------------------

TITLE: Hybrid Declarative Mapping with Pre-existing Table Object
DESCRIPTION: This snippet demonstrates a "hybrid declarative" mapping in SQLAlchemy, where a `DeclarativeBase` class is mapped to a pre-existing `sqlalchemy.Table` object. The `user_table` is constructed explicitly with columns and then assigned to the `__table__` attribute of the `User` class, allowing declarative ORM features to be used with an imperatively defined table.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/declarative_tables.rst#_snippet_55

LANGUAGE: Python
CODE:
```
from sqlalchemy import Column, ForeignKey, Integer, String
from sqlalchemy.orm import DeclarativeBase


class Base(DeclarativeBase):
    pass


# construct a Table directly.  The Base.metadata collection is
# usually a good choice for MetaData but any MetaData
# collection may be used.

user_table = Table(
    "user",
    Base.metadata,
    Column("id", Integer, primary_key=True),
    Column("name", String),
    Column("fullname", String),
    Column("nickname", String),
)


# construct the User class using this table.
class User(Base):
    __table__ = user_table
```

----------------------------------------

TITLE: Querying and Updating with SQLAlchemy Hybrid Property (Python+SQL)
DESCRIPTION: Demonstrates using a `hybrid_property` (`EmailAddress.email`) in a SQLAlchemy `select` query's `where` clause, showing how it generates appropriate SQL. It also shows updating the attribute on an instance and committing the changes, reflecting its dual nature for SQL expressions and instance access.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/mapped_attributes.rst#_snippet_6

LANGUAGE: python
CODE:
```
from sqlalchemy.orm import Session
from sqlalchemy import select

session = Session()

address = session.scalars(
    select(EmailAddress).where(EmailAddress.email == "address@example.com")
).one()

address.email = "otheraddress@example.com"
session.commit()
```

LANGUAGE: sql
CODE:
```
SELECT address.email AS address_email, address.id AS address_id
FROM address
WHERE address.email = ?
('address@example.com',)
UPDATE address SET email=? WHERE address.id = ?
('otheraddress@example.com', 1)
COMMIT
```

----------------------------------------

TITLE: Creating URL with URL.create Method in SQLAlchemy
DESCRIPTION: Illustrates the new recommended method (`URL.create`) for programmatically constructing a SQLAlchemy `URL` object using positional and keyword arguments, replacing the direct constructor for keyword arguments.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_14.rst#_snippet_23

LANGUAGE: Python
CODE:
```
>>> from sqlalchemy.engine import URL
>>> url = URL.create("postgresql", "user", "pass", host="host", database="dbname")
>>> str(url)
'postgresql://user:pass@host/dbname'
```

----------------------------------------

TITLE: Querying Companies with Technologists and Loading Executives (SQLAlchemy Python)
DESCRIPTION: Demonstrates querying `Company` instances using SQLAlchemy ORM. It joins `Company` with `Technologist`, filters based on `Technologist` competency, and uses `selectinload` to eagerly load the associated `Executive` instances for the retrieved companies.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/inheritance.rst#_snippet_15

LANGUAGE: Python
CODE:
```
session.scalars(
    select(Company)
    .join(Company.technologists)
    .where(Technologist.competency.ilike("%java%"))
    .options(selectinload(Company.executives))
).all()
```

----------------------------------------

TITLE: Creating Multiple Tables with SQLAlchemy MetaData.create_all Python
DESCRIPTION: This snippet shows how to initialize an engine and define multiple `Table` objects associated with a `MetaData` object, including foreign key relationships. The `metadata_obj.create_all(engine)` call then inspects the defined schema and issues the necessary SQL CREATE TABLE statements to the database connected by the engine, respecting foreign key dependencies.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/core/metadata.rst#_snippet_5

LANGUAGE: python
CODE:
```
engine = create_engine("sqlite:///:memory:")

metadata_obj = MetaData()

user = Table(
    "user",
    metadata_obj,
    Column("user_id", Integer, primary_key=True),
    Column("user_name", String(16), nullable=False),
    Column("email_address", String(60), key="email"),
    Column("nickname", String(50), nullable=False),
)

user_prefs = Table(
    "user_prefs",
    metadata_obj,
    Column("pref_id", Integer, primary_key=True),
    Column("user_id", Integer, ForeignKey("user.user_id"), nullable=False),
    Column("pref_name", String(40), nullable=False),
    Column("pref_value", String(100)),
)

metadata_obj.create_all(engine)
```

LANGUAGE: sql
CODE:
```
PRAGMA table_info(user)
CREATE TABLE user(
        user_id INTEGER NOT NULL PRIMARY KEY,
        user_name VARCHAR(16) NOT NULL,
        email_address VARCHAR(60),
        nickname VARCHAR(50) NOT NULL
)
PRAGMA table_info(user_prefs)
CREATE TABLE user_prefs(
        pref_id INTEGER NOT NULL PRIMARY KEY,
        user_id INTEGER NOT NULL REFERENCES user(user_id),
        pref_name VARCHAR(40) NOT NULL,
        pref_value VARCHAR(100)
)
```

----------------------------------------

TITLE: Resolving SQLAlchemy Relationship Conflict with back_populates (Python)
DESCRIPTION: Demonstrates how to resolve the relationship conflict warning by adding the `back_populates` parameter to both `Parent.children` and `Child.parent` relationships. This explicitly links the two sides of the relationship, allowing SQLAlchemy to coordinate column writes.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/errors.rst#_snippet_31

LANGUAGE: Python
CODE:
```
class Parent(Base):
    __tablename__ = "parent"
    id = Column(Integer, primary_key=True)
    children = relationship("Child", back_populates="parent")


class Child(Base):
    __tablename__ = "child"
    id = Column(Integer, primary_key=True)
    parent_id = Column(ForeignKey("parent.id"))
    parent = relationship("Parent", back_populates="children")
```

----------------------------------------

TITLE: Defining SQLAlchemy ORM Mappings for Company and Employee (Python)
DESCRIPTION: Defines SQLAlchemy ORM mapped classes for `Company` and `Employee`. The `Company` class includes relationships to `Executive` and `Technologist`. The `Employee` class uses single-table inheritance via the `polymorphic_on` argument and includes a foreign key to `Company`.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/inheritance.rst#_snippet_14

LANGUAGE: Python
CODE:
```
class Company(Base):
    __tablename__ = "company"
    id = Column(Integer, primary_key=True)

    executives: Mapped[List[Executive]] = relationship()
    technologists: Mapped[List[Technologist]] = relationship()


class Employee(Base):
    __tablename__ = "employee"
    id: Mapped[int] = mapped_column(primary_key=True)

    # foreign key to "company.id" is added
    company_id: Mapped[int] = mapped_column(ForeignKey("company.id"))

    # rest of mapping is the same
    name: Mapped[str]
    type: Mapped[str]

    __mapper_args__ = {
        "polymorphic_on": "type",
    }
```

----------------------------------------

TITLE: Removing Session from scoped_session Python
DESCRIPTION: This command is used to clean up the `Session` instance currently held by the `scoped_session` registry for the active scope. It first calls `Session.close()` on the managed session to release resources (connections, transactions) and then discards the session object from the registry. This is crucial for resource management, especially at the end of a request or transaction scope.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/contextual.rst#_snippet_3

LANGUAGE: Python
CODE:
```
Session.remove()
```

----------------------------------------

TITLE: Performing ORM Bulk Update with Update and Session.execute - Python
DESCRIPTION: Shows how to perform a bulk update on ORM entities using the SQLAlchemy 2.0 style. It uses the `sql.update` construct with `Session.execute`, filtering entities and setting new values. Demonstrates using `execution_options` for ORM-specific parameters like `synchronize_session`. Requires a `Session` initialized with `future=True`.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_14.rst#_snippet_1

LANGUAGE: python
CODE:
```
with Session(engine, future=True) as sess:
    stmt = (
        update(User)
        .where(User.name == "sandy")
        .values(password="foobar")
        .execution_options(synchronize_session="fetch")
    )

    sess.execute(stmt)
```

----------------------------------------

TITLE: Migrating Chained Joins - SQLAlchemy 1.x/2.0 ORM Query
DESCRIPTION: Provides the recommended migration path for the deprecated chained join syntax in SQLAlchemy 1.x, showing how to use individual `join` calls for 1.x/2.0 compatibility.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_20.rst#_snippet_77

LANGUAGE: Python
CODE:
```
q = session.query(User).join(User.orders).join(Order.items).join(Item.keywords)
```

----------------------------------------

TITLE: Using Result Object as Context Manager (Python)
DESCRIPTION: Shows how to use the `Result` object within a `with` statement after executing a query via `engine.connect`. This ensures the underlying database cursor is properly closed upon exiting the block, even if errors occur.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/whatsnew_20.rst#_snippet_35

LANGUAGE: Python
CODE:
```
with engine.connect() as conn:
    with conn.execution_options(yield_per=100).execute(
        text("select * from table")
    ) as result:
        for row in result:
            print(f"{row}")
```

----------------------------------------

TITLE: Correcting SQLAlchemy ORM Bulk Update with PK - Python
DESCRIPTION: This snippet demonstrates the correct usage of ORM bulk update by primary key with `session.execute`. It provides a list of parameter dictionaries where each dictionary includes the primary key (`id`) along with the values to be updated (`fullname`), fulfilling the requirement for this specific bulk update method.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/errors.rst#_snippet_40

LANGUAGE: Python
CODE:
```
session.execute(
    update(User),
    [
        {"id": 1, "fullname": "Spongebob Squarepants"},
        {"id": 3, "fullname": "Patrick Star"},
        {"id": 5, "fullname": "Eugene H. Krabs"},
    ],
)
```

----------------------------------------

TITLE: Using func.count() in SQLAlchemy
DESCRIPTION: Demonstrates how to use the func.count() object to generate a SQL COUNT(*) expression. This is a common aggregate function used to count the number of rows returned by a query.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/tutorial/data_select.rst#_snippet_79

LANGUAGE: Python
CODE:
```
print(select(func.count()).select_from(user_table))
```

LANGUAGE: SQL
CODE:
```
SELECT count(*) AS count_1
FROM user_account
```

----------------------------------------

TITLE: Defining SQLAlchemy Table with Columns
DESCRIPTION: Defines a SQLAlchemy Table object named 'vertices' with an integer primary key 'id' and four integer columns 'x1', 'y1', 'x2', 'y2' to store two sets of coordinates.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_04.rst#_snippet_0

LANGUAGE: Python
CODE:
```
vertices = Table(
    "vertices",
    metadata,
    Column("id", Integer, primary_key=True),
    Column("x1", Integer),
    Column("y1", Integer),
    Column("x2", Integer),
    Column("y2", Integer),
)
```

----------------------------------------

TITLE: Setting ORM Relationship by Object - SQLAlchemy Python
DESCRIPTION: The recommended way to establish an ORM relationship is by assigning the target object directly to the relationship attribute. This snippet shows retrieving a `Foo` object by ID and then assigning it to the `o.foo` attribute, followed by committing the session to persist the change.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/faq/sessions.rst#_snippet_6

LANGUAGE: python
CODE:
```
foo = session.get(Foo, 7)
o.foo = foo
Session.commit()
```

----------------------------------------

TITLE: Accessing Columns and Properties of SQLAlchemy Table Python
DESCRIPTION: This illustrates various methods for accessing individual `Column` objects or properties from a defined `Table`. Access can be done via attribute access (`.c.column_name`), dictionary-like access (`.c["column_name"]`), iteration through `.c`, or accessing specific attributes on a column object (e.g., `.name`, `.type`, `.primary_key`). It shows how to retrieve primary keys, foreign keys, column attributes, and table relationships.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/core/metadata.rst#_snippet_4

LANGUAGE: python
CODE:
```
# access the column "employee_id":
employees.columns.employee_id

# or just
employees.c.employee_id

# via string
employees.c["employee_id"]

# a tuple of columns may be returned using multiple strings
# (new in 2.0)
# Accessing specific columns by name
# emp_id, name, type = employees.c["employee_id", "name", "type"]

# iterate through all columns
for c in employees.c:
    print(c)

# get the table's primary key columns
for primary_key in employees.primary_key:
    print(primary_key)

# get the table's foreign key objects:
for fkey in employees.foreign_keys:
    print(fkey)

# access the table's MetaData:
employees.metadata

# access a column's name, type, nullable, primary key, foreign key
employees.c.employee_id.name
employees.c.employee_id.type
employees.c.employee_id.nullable
employees.c.employee_id.primary_key
employees.c.employee_dept.foreign_keys

# get the "key" of a column, which defaults to its name, but can
# be any user-defined string:
employees.c.employee_name.key

# access a column's table:
employees.c.employee_id.table is employees

# get the table related by a foreign key
list(employees.c.employee_dept.foreign_keys)[0].column.table
```

----------------------------------------

TITLE: Defining SQLAlchemy ORM Model for Logging
DESCRIPTION: Defines a SQLAlchemy ORM mapped class `LogRecord` with columns for id, message, code, and timestamp. This class is used as the target table for subsequent insert examples.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/queryguide/dml.rst#_snippet_8

LANGUAGE: python
CODE:
```
import datetime


class LogRecord(Base):
    __tablename__ = "log_record"
    id: Mapped[int] = mapped_column(primary_key=True)
    message: Mapped[str]
    code: Mapped[str]
    timestamp: Mapped[datetime.datetime]
```

----------------------------------------

TITLE: Creating and Executing a SQLAlchemy UNION ALL
DESCRIPTION: Illustrates how to combine multiple SELECT statements using the UNION ALL operation in SQLAlchemy. It shows creating two select statements, combining them with `union_all()`, and executing the resulting compound select using a database connection.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/tutorial/data_select.rst#_snippet_71

LANGUAGE: python
CODE:
```
from sqlalchemy import union_all
stmt1 = select(user_table).where(user_table.c.name == "sandy")
stmt2 = select(user_table).where(user_table.c.name == "spongebob")
u = union_all(stmt1, stmt2)
with engine.connect() as conn:
    result = conn.execute(u)
    print(result.all())
```

----------------------------------------

TITLE: Applying load_only to defaultload relationship - SQLAlchemy Python
DESCRIPTION: Shows how to use the `.load_only()` method on a `defaultload` option for a relationship. This applies column restrictions to objects loaded lazily through that relationship, affecting the SELECT statement emitted for each lazy load. Required dependencies: SQLAlchemy ORM, mapped classes (User, Book), relationship configured.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/queryguide/columns.rst#_snippet_5

LANGUAGE: Python
CODE:
```
from sqlalchemy.orm import defaultload
stmt = select(User).options(defaultload(User.books).load_only(Book.title))
```

LANGUAGE: Python
CODE:
```
for user in session.scalars(stmt):
    print(f"{user.fullname}   {[b.title for b in user.books]}")
```

LANGUAGE: SQL
CODE:
```
SELECT user_account.id, user_account.name, user_account.fullname
FROM user_account
[...] ()
```

LANGUAGE: SQL
CODE:
```
SELECT book.id AS book_id, book.title AS book_title
FROM book
WHERE ? = book.owner_id
[...] (1,)
```

LANGUAGE: text
CODE:
```
Spongebob Squarepants   ['100 Years of Krabby Patties', 'Sea Catch 22', 'The Sea Grapes of Wrath']
```

LANGUAGE: SQL
CODE:
```
SELECT book.id AS book_id, book.title AS book_title
FROM book
WHERE ? = book.owner_id
[...] (2,)
```

LANGUAGE: text
CODE:
```
Sandy Cheeks   ['A Nut Like No Other', 'Geodesic Domes: A Retrospective', 'Rocketry for Squirrels']
```

----------------------------------------

TITLE: Defining Declarative Mapped Properties - Hybrid Table
DESCRIPTION: This snippet illustrates defining ORM mapped properties for a declarative class that links to an imperatively defined `__table__`. It shows how to reference columns from the `__table__` object for constructs like `column_property` and `deferred`, while still defining `relationship` constructs directly within the class using string names for related classes.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/declarative_config.rst#_snippet_1

LANGUAGE: Python
CODE:
```
# mapping attributes using declarative with imperative table
# i.e. __table__

from sqlalchemy import Column, ForeignKey, Integer, String, Table, Text
from sqlalchemy.orm import column_property
from sqlalchemy.orm import DeclarativeBase
from sqlalchemy.orm import deferred
from sqlalchemy.orm import relationship


class Base(DeclarativeBase):
    pass


class User(Base):
    __table__ = Table(
        "user",
        Base.metadata,
        Column("id", Integer, primary_key=True),
        Column("name", String),
        Column("firstname", String(50)),
        Column("lastname", String(50)),
    )

    fullname = column_property(__table__.c.firstname + " " + __table__.c.lastname)

    addresses = relationship("Address", back_populates="user")


class Address(Base):
    __table__ = Table(
        "address",
        Base.metadata,
        Column("id", Integer, primary_key=True),
        Column("user_id", ForeignKey("user.id")),
        Column("email_address", String),
        Column("address_statistics", Text),
    )

    address_statistics = deferred(__table__.c.address_statistics)

    user = relationship("User", back_populates="addresses")
```

----------------------------------------

TITLE: Selecting an Entire ORM Entity with Session.execute
DESCRIPTION: Illustrates selecting an entire mapped entity (`User`) using `select` and executing the statement with `session.execute`. When selecting entities this way, the `Result` object yields `Row` objects where each row contains a single element: the ORM entity instance. Includes the generated SQL.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/queryguide/select.rst#_snippet_2

LANGUAGE: python
CODE:
```
result = session.execute(select(User).order_by(User.id))
```

LANGUAGE: sql
CODE:
```
SELECT user_account.id, user_account.name, user_account.fullname
FROM user_account ORDER BY user_account.id
```

----------------------------------------

TITLE: Common Query.join Usage Forms - Python
DESCRIPTION: Illustrates various standard ways to use `query.join()` that remain unchanged in SQLAlchemy 0.7. These forms include joining on a relationship attribute, joining using a relationship name string, or joining directly to a target class, all of which do not require an explicit onclause in this usage pattern.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_07.rst#_snippet_1

LANGUAGE: python
CODE:
```
query.join(MyClass.somerelation)
query.join("somerelation")
query.join(MyTarget)
# ... etc
```

----------------------------------------

TITLE: Counting Objects with Core Select via Session.scalar
DESCRIPTION: Demonstrates the SQLAlchemy 2.0 approach to counting objects using the Core select() construct with func.count() and executing it via Session.scalar(). Two variations are shown.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_20.rst#_snippet_56

LANGUAGE: Python
CODE:
```
session.scalar(
  select(func.count()).
  select_from(User)
)

# or

session.scalar(
  select(func.count(User.id))
)
```

----------------------------------------

TITLE: Retrieving Session from scoped_session Python
DESCRIPTION: This line demonstrates how to access the `Session` object managed by the `scoped_session` registry. Calling the `Session` object (which is the `scoped_session` instance) returns the `Session` associated with the current scope (typically the current thread). Subsequent calls within the same scope will return the *same* `Session` instance.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/contextual.rst#_snippet_1

LANGUAGE: Python
CODE:
```
some_session = Session()
```

----------------------------------------

TITLE: Accessing Deferred Raiseload (Error) - SQLAlchemy ORM - Python
DESCRIPTION: Demonstrates the effect of `deferred_raiseload=True`. When attempting to access a deferred attribute that was not explicitly loaded in the query, an `InvalidRequestError` is raised. The initial query only retrieves non-deferred columns.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/queryguide/columns.rst#_snippet_21

LANGUAGE: Python
CODE:
```
book = session.scalar(select(Book).where(Book.id == 2))
```

LANGUAGE: SQL
CODE:
```
SELECT book.id, book.owner_id, book.title
FROM book
WHERE book.id = ?
[...] (2,)
```

LANGUAGE: Python
CODE:
```
book.summary
```

----------------------------------------

TITLE: Explicitly Specifying JOIN ON Clause - SQLAlchemy
DESCRIPTION: Demonstrates how to specify the ON clause directly in a SQLAlchemy select statement using the join method when automatic detection is not possible or multiple constraints exist. It shows joining user_table and address_table on the user_account.id = address.user_id condition.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/tutorial/data_select.rst#_snippet_36

LANGUAGE: Python
CODE:
```
print(
    select(address_table.c.email_address)
    .select_from(user_table)
    .join(address_table, user_table.c.id == address_table.c.user_id)
)
```

LANGUAGE: SQL
CODE:
```
SELECT address.email_address
FROM user_account JOIN address ON user_account.id = address.user_id
```

----------------------------------------

TITLE: ORM Bulk Insert via Session Execute
DESCRIPTION: Demonstrates performing a bulk insert operation using session.execute with an insert statement. A list of dictionaries is passed to the insert().values() method, where keys correspond to ORM mapped attributes.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/queryguide/dml.rst#_snippet_15

LANGUAGE: Python
CODE:
```
session.rollback()
session.execute(
    insert(User).values(
        [
            dict(name="sandy"),
            dict(name="spongebob", fullname="Spongebob Squarepants")
        ]
    )
)
```

----------------------------------------

TITLE: Modern Bulk Update with Session.execute (List of Dicts) - Python
DESCRIPTION: Illustrates the recommended modern way to perform bulk updates using session.execute with an update construct and a list of dictionaries. This is similar to the first snippet but uses a different model (User) and is presented as the modern alternative to the legacy method.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/queryguide/dml.rst#_snippet_23

LANGUAGE: Python
CODE:
```
from sqlalchemy import update

session.execute(
    update(User),
    [
        {"id": 1, "name": "scheeks", "manager_name": "Sandy Cheeks, President"},
        {"id": 2, "name": "eugene", "manager_name": "Eugene H. Krabs, VP Marketing"},
    ],
)
```

----------------------------------------

TITLE: Loading Object by Primary Key with Get - SQLAlchemy Python
DESCRIPTION: This snippet demonstrates retrieving an object (`Foo`) directly from the session or database using its class and primary key with the `session.get()` method. This is often used to load objects based on foreign key values or known IDs.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/faq/sessions.rst#_snippet_10

LANGUAGE: python
CODE:
```
foo_7 = session.get(Foo, 7)
```

----------------------------------------

TITLE: Configuring Many-to-Many Relationship with ON DELETE and passive_deletes - Python
DESCRIPTION: This snippet demonstrates configuring a many-to-many relationship in SQLAlchemy using an association table. It sets database-level `ON DELETE CASCADE` on the foreign keys within the association table and uses `cascade="all, delete"` on the parent-side relationship and `passive_deletes=True` on the child-side relationship to integrate with the database cascade for efficient deletion.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/cascades.rst#_snippet_16

LANGUAGE: Python
CODE:
```
association_table = Table(
    "association",
    Base.metadata,
    Column("left_id", Integer, ForeignKey("left.id", ondelete="CASCADE")),
    Column("right_id", Integer, ForeignKey("right.id", ondelete="CASCADE")),
)


class Parent(Base):
    __tablename__ = "left"
    id = mapped_column(Integer, primary_key=True)
    children = relationship(
        "Child",
        secondary=association_table,
        back_populates="parents",
        cascade="all, delete",
    )


class Child(Base):
    __tablename__ = "right"
    id = mapped_column(Integer, primary_key=True)
    parents = relationship(
        "Parent",
        secondary=association_table,
        back_populates="children",
        passive_deletes=True,
    )
```

----------------------------------------

TITLE: Incorrectly Using Dataclass Init Parameter in Annotated Python
DESCRIPTION: Illustrates an incorrect pattern where a dataclass-specific parameter ('init=False') is included directly within the `Annotated` type used for a mapped column. This parameter will be ignored by both typing tools and SQLAlchemy, potentially leading to initialization errors.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/dataclasses.rst#_snippet_9

LANGUAGE: Python
CODE:
```
from typing import Annotated

from sqlalchemy.orm import Mapped
from sqlalchemy.orm import mapped_column
from sqlalchemy.orm import registry

# typing tools as well as SQLAlchemy will ignore init=False here
intpk = Annotated[int, mapped_column(init=False, primary_key=True)]

reg = registry()


@reg.mapped_as_dataclass
class User:
    __tablename__ = "user_account"
    id: Mapped[intpk]


# typing error as well as runtime error: Argument missing for parameter "id"
u1 = User()
```

----------------------------------------

TITLE: Inserting Multiple Rows with SQLAlchemy Insert and List of Dictionaries (Python)
DESCRIPTION: Demonstrates inserting multiple rows into a table using the `insert()` construct in conjunction with `connection.execute()` and a list of dictionaries. SQLAlchemy automatically generates the appropriate VALUES clause based on the dictionary keys.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/tutorial/data_insert.rst#_snippet_7

LANGUAGE: Python
CODE:
```
with engine.connect() as conn:
    result = conn.execute(
        insert(user_table),
        [
            {"name": "sandy", "fullname": "Sandy Cheeks"},
            {"name": "patrick", "fullname": "Patrick Star"},
        ],
    )
    conn.commit()
```

----------------------------------------

TITLE: Instantiating SQLAlchemy Mapped Class with Default Constructor
DESCRIPTION: Demonstrates how to create an instance of a SQLAlchemy mapped class (`User`) using the default keyword constructor provided by the ORM registry. This constructor automatically accepts keyword arguments corresponding to the mapped attributes (`name`, `fullname`). This method is typically used when constructing objects directly in Python code, not when loading data from the database.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/mapping_styles.rst#_snippet_4

LANGUAGE: Python
CODE:
```
u1 = User(name="some name", fullname="some fullname")
```

----------------------------------------

TITLE: Deleting Objects from SQLAlchemy Session in Python
DESCRIPTION: Illustrates how to mark mapped objects for deletion using `session.delete()`. The actual DELETE statements are executed against the database when `session.commit()` or `session.flush()` is called. Requires a `session` object and persistent mapped object instances.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/session_basics.rst#_snippet_10

LANGUAGE: Python
CODE:
```
session.delete(obj1)
session.delete(obj2)

session.commit()  # commit (or flush)
```

----------------------------------------

TITLE: Explicit Transaction for Procedural Call - SQLAlchemy Core
DESCRIPTION: Demonstrates using the `Engine.begin()` context manager to wrap the execution of a procedural SQL statement via `text()`. This ensures the procedural call is executed within an explicit transaction, replacing the deprecated 1.x `autocommit=True` execution option.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_20.rst#_snippet_12

LANGUAGE: python
CODE:
```
with engine.begin() as conn:
    conn.execute(text("EXEC my_procedural_thing()"))
```

----------------------------------------

TITLE: Apply Lazy Loading Option to Query - SQLAlchemy Python
DESCRIPTION: This snippet demonstrates how to apply the `lazyload` option to a SQLAlchemy select statement. This option ensures that the `Parent.children` relationship is loaded lazily (on first access) for objects returned by this specific query, overriding any default mapping-time configuration.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/queryguide/relationships.rst#_snippet_1

LANGUAGE: Python
CODE:
```
from sqlalchemy import select
from sqlalchemy.orm import lazyload

# set children to load lazily
stmt = select(Parent).options(lazyload(Parent.children))
```

----------------------------------------

TITLE: Executing SQL with legacy Engine.execute in SQLAlchemy
DESCRIPTION: This Python script demonstrates common legacy patterns in SQLAlchemy 1.x, such as using Engine.execute for DDL and DML statements and selecting from a table construct. This code will generate deprecation warnings when run with the appropriate environment variables and warning filters enabled.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_20.rst#_snippet_0

LANGUAGE: python
CODE:
```
from sqlalchemy import column
from sqlalchemy import create_engine
from sqlalchemy import select
from sqlalchemy import table


engine = create_engine("sqlite://")

engine.execute("CREATE TABLE foo (id integer)")
engine.execute("INSERT INTO foo (id) VALUES (1)")


foo = table("foo", column("id"))
result = engine.execute(select([foo.c.id]))

print(result.fetchall())
```

----------------------------------------

TITLE: Executing Statement With Bind Parameter Python
DESCRIPTION: Shows the correct approach to executing a statement that requires bind parameters. The parameter values are passed as a dictionary (or a list of dictionaries for executemany) to the `execute` method, with keys matching the bind parameter names.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/errors.rst#_snippet_8

LANGUAGE: python
CODE:
```
result = conn.execute(stmt, {"my_param": 12})
```

----------------------------------------

TITLE: Streaming Results with yield_per in SQLAlchemy ORM
DESCRIPTION: This snippet demonstrates using the `yield_per` execution option with an ORM select statement. It fetches results in partitions of a specified size (10 in this case), allowing processing large result sets without loading all objects into memory at once.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/queryguide/api.rst#_snippet_5

LANGUAGE: Python
CODE:
```
stmt = select(User).execution_options(yield_per=10)
for partition in session.scalars(stmt).partitions():
    for user_obj in partition:
        print(user_obj)
```

----------------------------------------

TITLE: Joining ORM Entity to Subquery - SQLAlchemy ORM Python
DESCRIPTION: Illustrates joining an ORM entity (`User`) to a SQL subquery. The subquery is created from a `Select` object using `.subquery()`, and the join condition is specified explicitly between the ORM entity's column and the subquery's column.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/queryguide/select.rst#_snippet_29

LANGUAGE: Python
CODE:
```
subq = select(Address).where(Address.email_address == "pat999@aol.com").subquery()
stmt = select(User).join(subq, User.id == subq.c.user_id)
print(stmt)
```

LANGUAGE: SQL
CODE:
```
SELECT user_account.id, user_account.name, user_account.fullname
FROM user_account
JOIN (SELECT address.id AS id,
address.user_id AS user_id, address.email_address AS email_address
FROM address
WHERE address.email_address = :email_address_1) AS anon_1
ON user_account.id = anon_1.user_id
```

----------------------------------------

TITLE: Defining Node ORM Mapping (Many-to-One) with SQLAlchemy
DESCRIPTION: Defines the `Node` class using SQLAlchemy's ORM, focusing on the many-to-one self-referential relationship. It maps to the `node` table. The `parent` relationship is configured using `remote_side=[id]` to explicitly indicate that the `id` column is the "remote" side, making `parent_id` the "local" side for a many-to-one link to the parent node.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/self_referential.rst#_snippet_1

LANGUAGE: Python
CODE:
```
class Node(Base):
    __tablename__ = "node"
    id = mapped_column(Integer, primary_key=True)
    parent_id = mapped_column(Integer, ForeignKey("node.id"))
    data = mapped_column(String(50))
    parent = relationship("Node", remote_side=[id])
```

----------------------------------------

TITLE: Configuring Relationship with New AliasedClass - Python
DESCRIPTION: Shows the recommended approach in SQLAlchemy 1.3+ for configuring complex relationships using `aliased`. This method is simpler, inherits properties and relationships from the original mapping, and replaces the deprecated non-primary mapper usage. Requires SQLAlchemy ORM components like `join` and `aliased`.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_13.rst#_snippet_1

LANGUAGE: python
CODE:
```
j = join(B, D, D.b_id == B.id).join(C, C.id == D.c_id)

B_viacd = aliased(B, j, flat=True)

A.b = relationship(B_viacd, primaryjoin=A.b_id == j.c.b_id)
```

----------------------------------------

TITLE: Correct Declarative Relationship with foreign_keys String Python
DESCRIPTION: Shows the correct way to specify the `foreign_keys` argument in a Declarative relationship using a single string. Declarative evaluates this string to identify the foreign key columns involved.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/faq/ormconfiguration.rst#_snippet_11

LANGUAGE: Python
CODE:
```
# correct !
foo = relationship(Dest, foreign_keys="[Dest.foo_id, Dest.bar_id]")
```

----------------------------------------

TITLE: Configuring Basic SQLAlchemy Engine Logging - Python
DESCRIPTION: Demonstrates how to set up basic Python logging to capture SQL queries emitted by the SQLAlchemy engine by configuring the `sqlalchemy.engine` logger to the INFO level. Requires the `logging` module.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/core/engines.rst#_snippet_18

LANGUAGE: python
CODE:
```
import logging

logging.basicConfig()
logging.getLogger("sqlalchemy.engine").setLevel(logging.INFO)
```

----------------------------------------

TITLE: Implement Autocommit Readonly Retry with SQLAlchemy Events - Python
DESCRIPTION: Defines a function `reconnecting_engine` that wraps an existing SQLAlchemy engine to add limited transparent retry logic for single-parameter or no-parameter `cursor.execute` calls in autocommit mode. It uses `DialectEvents.do_execute_no_params` and `DialectEvents.do_execute` hooks to catch DBAPI disconnect errors, invalidate the connection, roll back any pending transaction, and retry the statement execution a specified number of times with a delay. This mechanism is only intended for read-only operations and requires DBAPI autocommit support.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/faq/connections.rst#_snippet_2

LANGUAGE: python
CODE:
```
import time

from sqlalchemy import event


def reconnecting_engine(engine, num_retries, retry_interval):
    def _run_with_retries(fn, context, cursor_obj, statement, *arg, **kw):
        for retry in range(num_retries + 1):
            try:
                fn(cursor_obj, statement, context=context, *arg)
            except engine.dialect.dbapi.Error as raw_dbapi_err:
                connection = context.root_connection
                if engine.dialect.is_disconnect(raw_dbapi_err, connection, cursor_obj):
                    engine.logger.error(
                        "disconnection error, attempt %d/%d",
                        retry + 1,
                        num_retries + 1,
                        exc_info=True,
                    )
                    connection.invalidate()

                    # use SQLAlchemy 2.0 API if available
                    if hasattr(connection, "rollback"):
                        connection.rollback()
                    else:
                        trans = connection.get_transaction()
                        if trans:
                            trans.rollback()

                    if retry == num_retries:
                        raise

                    time.sleep(retry_interval)
                    context.cursor = cursor_obj = connection.connection.cursor()
                else:
                    raise
            else:
                return True

    e = engine.execution_options(isolation_level="AUTOCOMMIT")

    @event.listens_for(e, "do_execute_no_params")
    def do_execute_no_params(cursor_obj, statement, context):
        return _run_with_retries(
            context.dialect.do_execute_no_params, context, cursor_obj, statement
        )

    @event.listens_for(e, "do_execute")
    def do_execute(cursor_obj, statement, parameters, context):
        return _run_with_retries(
            context.dialect.do_execute, context, cursor_obj, statement, parameters
        )

    return e
```

----------------------------------------

TITLE: Accessing Last Inserted IDs - Python
DESCRIPTION: `ResultProxy.last_inserted_ids` is deprecated. Use `ResultProxy.inserted_primary_key` instead to retrieve the primary key of the last inserted row.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_06.rst#_snippet_23

LANGUAGE: Python
CODE:
```
result_proxy.last_inserted_ids
```

LANGUAGE: Python
CODE:
```
result_proxy.inserted_primary_key
```

----------------------------------------

TITLE: Defining SQLAlchemy Relationship to Aliased Class (Python)
DESCRIPTION: Illustrates defining a complex relationship between two entities (A and B) that involves intermediary tables (C and D) in the join condition, while also having a direct condition between A and B. It shows how to use sqlalchemy.orm.aliased to create an alternative mapping target for B based on a pre-defined join construct.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/join_conditions.rst#_snippet_25

LANGUAGE: Python
CODE:
```
class A(Base):
    __tablename__ = "a"

    id = mapped_column(Integer, primary_key=True)
    b_id = mapped_column(ForeignKey("b.id"))


class B(Base):
    __tablename__ = "b"

    id = mapped_column(Integer, primary_key=True)


class C(Base):
    __tablename__ = "c"

    id = mapped_column(Integer, primary_key=True)
    a_id = mapped_column(ForeignKey("a.id"))

    some_c_value = mapped_column(String)


class D(Base):
    __tablename__ = "d"

    id = mapped_column(Integer, primary_key=True)
    c_id = mapped_column(ForeignKey("c.id"))
    b_id = mapped_column(ForeignKey("b.id"))

    some_d_value = mapped_column(String)


# 1. set up the join() as a variable, so we can refer
# to it in the mapping multiple times.
j = join(B, D, D.b_id == B.id).join(C, C.id == D.c_id)

# 2. Create an AliasedClass to B
B_viacd = aliased(B, j, flat=True)

A.b = relationship(B_viacd, primaryjoin=A.b_id == j.c.b_id)
```

----------------------------------------

TITLE: Joined Eager Loading with Collections (2.0 Migration Fix)
DESCRIPTION: Provides the 2.0 migration fix for joined eager loading of collections. The .unique() method must be explicitly called on the result object to ensure that duplicate rows from the join are collapsed into unique ORM objects.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_20.rst#_snippet_96

LANGUAGE: Python
CODE:
```
# 1.4 / 2.0 code

stmt = select(User).options(joinedload(User.addresses))

# statement will raise if unique() is not used, due to joinedload()
# of a collection.  in all other cases, unique() is not needed.
# By stating unique() explicitly, confusion over discrepancies between
# number of objects/ rows returned vs. "SELECT COUNT(*)" is resolved
rows = session.execute(stmt).unique().all()
```

----------------------------------------

TITLE: Creating SQLAlchemy TypeDecorator for Numeric Rounding (Python)
DESCRIPTION: Implements a custom SQLAlchemy type `SafeNumeric` using `TypeDecorator` to wrap the standard `Numeric` type. The `__init__` method calculates the required quantization level based on the underlying `Numeric` type's scale. The `process_bind_param` method checks if an incoming `Decimal` value exceeds this precision and rounds it using `Decimal.quantize` before passing it to the database, preventing potential errors with certain database connectors.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/core/custom_types.rst#_snippet_2

LANGUAGE: Python
CODE:
```
from sqlalchemy.types import TypeDecorator, Numeric
from decimal import Decimal


class SafeNumeric(TypeDecorator):
    """Adds quantization to Numeric."""

    impl = Numeric

    def __init__(self, *arg, **kw):
        TypeDecorator.__init__(self, *arg, **kw)
        self.quantize_int = -self.impl.scale
        self.quantize = Decimal(10) ** self.quantize_int

    def process_bind_param(self, value, dialect):
        if isinstance(value, Decimal) and value.as_tuple()[2] < self.quantize_int:
            value = value.quantize(self.quantize)
        return value
```

----------------------------------------

TITLE: Cascading Objects into Session - SQLAlchemy Python
DESCRIPTION: Demonstrates adding a 'root' object (`u1`) to the session and verifies that its related objects (`a1`, `a2`) are automatically cascaded and also become part of the session's state (pending).
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/tutorial/orm_related_objects.rst#_snippet_7

LANGUAGE: Python
CODE:
```
>>> session.add(u1)
>>> u1 in session
True
>>> a1 in session
True
>>> a2 in session
True
```

----------------------------------------

TITLE: Defining SQLAlchemy ORM Declarative Models in Python
DESCRIPTION: This snippet defines several SQLAlchemy ORM declarative models using type annotations. It includes standard mapped classes (User, Address, LogRecord) and a polymorphic inheritance example (Employee, Manager, Engineer). Dependencies include SQLAlchemy ORM components, `datetime`, and `typing`.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/queryguide/_dml_setup.rst#_snippet_0

LANGUAGE: python
CODE:
```
from typing import List
from typing import Optional
import datetime

from sqlalchemy import Column
from sqlalchemy import create_engine
from sqlalchemy import ForeignKey
from sqlalchemy import Table
from sqlalchemy.orm import DeclarativeBase
from sqlalchemy.orm import Mapped
from sqlalchemy.orm import mapped_column
from sqlalchemy.orm import relationship
from sqlalchemy.orm import Session


class Base(DeclarativeBase):
    pass
class User(Base):
    __tablename__ = "user_account"
    id: Mapped[int] = mapped_column(primary_key=True)
    name: Mapped[str] = mapped_column(unique=True)
    fullname: Mapped[Optional[str]]
    species: Mapped[Optional[str]]
    addresses: Mapped[List["Address"]] = relationship(back_populates="user")

    def __repr__(self) -> str:
        return f"User(name={self.name!r}, fullname={self.fullname!r})"
class Address(Base):
    __tablename__ = "address"
    id: Mapped[int] = mapped_column(primary_key=True)
    user_id: Mapped[int] = mapped_column(ForeignKey("user_account.id"))
    email_address: Mapped[str]
    user: Mapped[User] = relationship(back_populates="addresses")

    def __repr__(self) -> str:
        return f"Address(email_address={self.email_address!r})"
class LogRecord(Base):
    __tablename__ = "log_record"
    id: Mapped[int] = mapped_column(primary_key=True)
    message: Mapped[str]
    code: Mapped[str]
    timestamp: Mapped[datetime.datetime]

    def __repr__(self):
        return f"LogRecord({self.message!r}, {self.code!r}, {self.timestamp!r})"

class Employee(Base):
    __tablename__ = "employee"
    id: Mapped[int] = mapped_column(primary_key=True)
    name: Mapped[str]
    type: Mapped[str]

    def __repr__(self):
        return f"{self.__class__.__name__}({self.name!r})"

    __mapper_args__ = {
        "polymorphic_identity": "employee",
        "polymorphic_on": "type",
    }
class Manager(Employee):
    __tablename__ = "manager"
    id: Mapped[int] = mapped_column(ForeignKey("employee.id"), primary_key=True)
    manager_name: Mapped[str]

    def __repr__(self):
        return f"{self.__class__.__name__}({self.name!r}, manager_name={self.manager_name!r})"

    __mapper_args__ = {
        "polymorphic_identity": "manager",
    }
class Engineer(Employee):
    __tablename__ = "engineer"
    id: Mapped[int] = mapped_column(ForeignKey("employee.id"), primary_key=True)
    engineer_info: Mapped[str]

    def __repr__(self):
        return f"{self.__class__.__name__}({self.name!r}, engineer_info={self.engineer_info!r})"

    __mapper_args__ = {
        "polymorphic_identity": "engineer",
    }
```

----------------------------------------

TITLE: Combining INSERT FROM SELECT with RETURNING in SQLAlchemy
DESCRIPTION: Shows how to combine SQLAlchemy's `insert().from_select()` method, which inserts data based on a SELECT statement, with the `returning()` method to retrieve specific columns from the newly inserted rows.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/tutorial/data_insert.rst#_snippet_11

LANGUAGE: Python
CODE:
```
select_stmt = select(user_table.c.id, user_table.c.name + "@aol.com")
insert_stmt = insert(address_table).from_select(
    ["user_id", "email_address"], select_stmt
)
print(insert_stmt.returning(address_table.c.id, address_table.c.email_address))
```

LANGUAGE: SQL
CODE:
```
INSERT INTO address (user_id, email_address)
SELECT user_account.id, user_account.name || :name_1 AS anon_1
FROM user_account RETURNING address.id, address.email_address
```

----------------------------------------

TITLE: Filtering by Attributes with filter_by (ORM)
DESCRIPTION: Shows the `filter_by` method on a SQLAlchemy ORM `select` statement, which allows filtering based on keyword arguments matching ORM attributes. Filters against the primary entity in the FROM clause.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/tutorial/data_select.rst#_snippet_29

LANGUAGE: Python
CODE:
```
print(select(User).filter_by(name="spongebob", fullname="Spongebob Squarepants"))
```

LANGUAGE: SQL
CODE:
```
SELECT user_account.id, user_account.name, user_account.fullname
FROM user_account
WHERE user_account.name = :name_1 AND user_account.fullname = :fullname_1
```

----------------------------------------

TITLE: Demonstrating subqueryload Operation (Python/SQL)
DESCRIPTION: Shows a Python example using `select` and `subqueryload` to load `User` objects and their related `addresses`. The accompanying SQL output illustrates the two queries executed: the main query for users and a second query using a subquery of the first to fetch addresses.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/queryguide/relationships.rst#_snippet_29

LANGUAGE: python
CODE:
```
>>> from sqlalchemy import select
>>> from sqlalchemy.orm import subqueryload
>>> stmt = select(User).options(subqueryload(User.addresses)).filter_by(name="spongebob")
>>> results = session.scalars(stmt).all()
```

LANGUAGE: sql
CODE:
```
{execsql}SELECT
    users.id AS users_id,
    users.name AS users_name,
    users.fullname AS users_fullname,
    users.nickname AS users_nickname
FROM users
WHERE users.name = ?
('spongebob',)
SELECT
    addresses.id AS addresses_id,
    addresses.email_address AS addresses_email_address,
    addresses.user_id AS addresses_user_id,
    anon_1.users_id AS anon_1_users_id
FROM (
    SELECT users.id AS users_id
    FROM users
    WHERE users.name = ?) AS anon_1
JOIN addresses ON anon_1.users_id = addresses.user_id
ORDER BY anon_1.users_id, addresses.id
('spongebob',)
```

----------------------------------------

TITLE: Configuring Deferred Column Loading with `mapped_column` in SQLAlchemy
DESCRIPTION: Shows how to use the `deferred=True` parameter in `mapped_column` to enable deferred loading for a column, meaning its value will only be loaded from the database when accessed.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/declarative_tables.rst#_snippet_12

LANGUAGE: Python
CODE:
```
class User(Base):
    __tablename__ = "user"

    id: Mapped[int] = mapped_column(primary_key=True)
    name: Mapped[str]
    bio: Mapped[str] = mapped_column(Text, deferred=True)
```

----------------------------------------

TITLE: Non-Cascading Column Generation with SQLAlchemy Mixins - Python
DESCRIPTION: This snippet illustrates that without `@declared_attr.cascading`, columns defined in a mixin (like `HasId`) are only applied to the base class (`Person`). Subclasses like `Engineer` will not inherit the column, leading to mapping failures if a primary key is required.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/declarative_mixins.rst#_snippet_18

LANGUAGE: Python
CODE:
```
class HasId:
    id: Mapped[int] = mapped_column(primary_key=True)


class Person(HasId, Base):
    __tablename__ = "person"

    discriminator: Mapped[str]
    __mapper_args__ = {"polymorphic_on": "discriminator"}


# this mapping will fail, as there's no primary key
class Engineer(Person):
    __tablename__ = "engineer"

    primary_language: Mapped[str]
    __mapper_args__ = {"polymorphic_identity": "engineer"}
```

----------------------------------------

TITLE: Configuring Constraint Naming Convention in SQLAlchemy
DESCRIPTION: Illustrates setting up a naming convention dictionary for constraints and indexes. This dictionary is passed to the `MetaData` object's `naming_convention` argument. The convention uses string templates to generate names based on constraint properties.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/core/constraints.rst#_snippet_12

LANGUAGE: Python
CODE:
```
convention = {
    "ix": "ix_%(column_0_label)s",
    "uq": "uq_%(table_name)s_%(column_0_name)s",
    "ck": "ck_%(table_name)s_%(constraint_name)s",
    "fk": "fk_%(table_name)s_%(column_0_name)s_%(referred_table_name)s",
    "pk": "pk_%(table_name)s",
}

metadata_obj = MetaData(naming_convention=convention)
```

----------------------------------------

TITLE: Defining SQLAlchemy Table with Explicit Schema (Python)
DESCRIPTION: Shows how to create a SQLAlchemy Table object and associate it with a specific database schema using the `schema` argument. This ensures the table reference is qualified in generated SQL. Requires SQLAlchemy Core components like `MetaData`, `Table`, `Column`, `Integer`, and `String`.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/core/metadata.rst#_snippet_9

LANGUAGE: Python
CODE:
```
metadata_obj = MetaData()

financial_info = Table(
    "financial_info",
    metadata_obj,
    Column("id", Integer, primary_key=True),
    Column("value", String(100), nullable=False),
    schema="remote_banks",
)
```

----------------------------------------

TITLE: Managing SQLAlchemy ORM Transaction Commit-as-You-Go
DESCRIPTION: Illustrates the commit-as-you-go pattern where operations are added to the session, and transactions are explicitly managed using `session.commit()` or `session.rollback()`. The session automatically begins a new transaction as needed after commit or rollback.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/session_transaction.rst#_snippet_2

LANGUAGE: Python
CODE:
```
session = Session(engine)

session.add(some_object())
session.add(some_other_object())

session.commit()  # commits

# will automatically begin again
result = session.execute(text("< some select statement >"))
session.add_all([more_objects, ...])
session.commit()  # commits

session.add(still_another_object)
session.flush()  # flush still_another_object
session.rollback()  # rolls back still_another_object
```

----------------------------------------

TITLE: Correcting numpy.int64 usage via type conversion - Python
DESCRIPTION: Presents the recommended solution for using NumPy datatypes with SQLAlchemy. It demonstrates converting the NumPy value (`numpy.int64` in this case) to a native Python type (`int`) using the `int()` function before passing it to session operations or expression comparisons. This ensures compatibility with DBAPIs and correct expression evaluation.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/faq/thirdparty.rst#_snippet_2

LANGUAGE: Python
CODE:
```
data = numpy.int64(10)

session.add(A(data=int(data)))

result = session.execute(select(A.data).where(int(data) == A.data))

session.commit()
```

----------------------------------------

TITLE: Using ORM Entities as DML Targets in SQLAlchemy Python
DESCRIPTION: This snippet demonstrates a new feature allowing SQLAlchemy DML constructs (`insert`, `update`, `delete`) to accept ORM mapped classes directly as the target, simplifying usage compared to referencing the underlying `Table` object. It requires the ORM mapped class (`SomeMappedClass`) and imports from the `sqlalchemy` library. The code generates SQL expressions ready for execution, targeting the table mapped by the ORM class.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/changelog_08.rst#_snippet_0

LANGUAGE: python
CODE:
```
from sqlalchemy import insert, update, delete

ins = insert(SomeMappedClass).values(x=5)

del_ = delete(SomeMappedClass).where(SomeMappedClass.id == 5)

upd = update(SomeMappedClass).where(SomeMappedClass.id == 5).values(name="ed")
```

----------------------------------------

TITLE: Using contains_eager with Explicit Join
DESCRIPTION: Illustrates using the `contains_eager` option when the application already includes a join to the related table via `select().join()`. This tells SQLAlchemy to load columns from the joined table into the specified relationship attribute without adding another join.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/tutorial/orm_related_objects.rst#_snippet_17

LANGUAGE: python
CODE:
```
from sqlalchemy.orm import contains_eager
from sqlalchemy import select

stmt = (
    select(Address)
    .join(Address.user)
    .where(User.name == "pkrabs")
    .options(contains_eager(Address.user))
    .order_by(Address.id)
)

# Assuming 'session' is a configured SQLAlchemy session and 'User' is available
for row in session.execute(stmt):
    print(f"{row.Address.email_address} {row.Address.user.name}")
```

LANGUAGE: sql
CODE:
```
SELECT user_account.id, user_account.name, user_account.fullname,
address.id AS id_1, address.email_address, address.user_id
FROM address JOIN user_account ON user_account.id = address.user_id
WHERE user_account.name = ? ORDER BY address.id
-- Parameters: ('pkrabs',)
```

----------------------------------------

TITLE: Defining ORM Model with Sequence Primary Key - Python
DESCRIPTION: Defines a SQLAlchemy ORM model (`MyOracleModel`) with a primary key column (`id`) mapped using `mapped_column(Sequence("my_oracle_seq"), primary_key=True)`. This explicitly links the column to a database sequence named "my_oracle_seq". SQLAlchemy handles fetching the next value from the sequence and using it or fetching the server-generated value (if assigned by the server/trigger in conjunction with the sequence) upon insert, again potentially using `RETURNING` if supported and applicable.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/persistence_techniques.rst#_snippet_18

LANGUAGE: Python
CODE:
```
class MyOracleModel(Base):
    __tablename__ = "my_table"

    id: Mapped[int] = mapped_column(Sequence("my_oracle_seq"), primary_key=True)
```

----------------------------------------

TITLE: Adding Instance to Session - Python
DESCRIPTION: Illustrates adding a mapped instance to a SQLAlchemy `Session` to track its state.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_08.rst#_snippet_15

LANGUAGE: python
CODE:
```
>>> s.add(u1)
```

----------------------------------------

TITLE: Implementing PostgreSQL ON CONFLICT DO UPDATE in SQLAlchemy Python
DESCRIPTION: This Python snippet illustrates how to use the PostgreSQL-specific `insert` function and the `on_conflict_do_update` method. It shows how to construct an INSERT statement that specifies columns to use for conflict detection and columns to update if a conflict occurs.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_11.rst#_snippet_66

LANGUAGE: python
CODE:
```
from sqlalchemy.dialects.postgresql import insert

insert_stmt = insert(my_table).values(id="some_id", data="some data to insert")

do_update_stmt = insert_stmt.on_conflict_do_update(
    index_elements=[my_table.c.id], set_=dict(data="some data to update")
)

conn.execute(do_update_stmt)
```

----------------------------------------

TITLE: Defining an Abstract Base Class (__abstract__) (SQLAlchemy Python)
DESCRIPTION: Shows a class with `__abstract__ = True`, preventing SQLAlchemy from creating a table or mapper for it directly. This abstract base can still provide methods and use `declared_attr` for `__mapper_args__` to be inherited by concrete subclasses like `MyMappedClass`.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/declarative_config.rst#_snippet_9

LANGUAGE: Python
CODE:
```
class SomeAbstractBase(Base):
    __abstract__ = True

    def some_helpful_method(self):
        """ """

    @declared_attr
    def __mapper_args__(cls):
        return {"helpful mapper arguments": True}


class MyMappedClass(SomeAbstractBase):
    pass
```

----------------------------------------

TITLE: Declaring Table with Foreign Key Constraint - Python
DESCRIPTION: Defines a second Table object named 'address' with columns including a foreign key ('user_id') referencing the 'user_account.id' column. Also demonstrates defining 'NOT NULL' constraints using the 'nullable=False' parameter. Dependencies: sqlalchemy.Table, sqlalchemy.Column, sqlalchemy.Integer, sqlalchemy.String, sqlalchemy.ForeignKey.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/tutorial/metadata.rst#_snippet_5

LANGUAGE: Python
CODE:
```
from sqlalchemy import ForeignKey
address_table = Table(
    "address",
    metadata_obj,
    Column("id", Integer, primary_key=True),
    Column("user_id", ForeignKey("user_account.id"), nullable=False),
    Column("email_address", String, nullable=False),
)
```

----------------------------------------

TITLE: Accessing Result Columns by Key Name (Python)
DESCRIPTION: This snippet shows how to transform a `Result` object into a `MappingResult` using `.mappings()`. It then iterates through the `MappingResult`, accessing columns in each row using dictionary-style key access (`dict_row["x"]`, `dict_row["y"]`).
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/tutorial/dbapi_transactions.rst#_snippet_1

LANGUAGE: python
CODE:
```
result = conn.execute(text("select x, y from some_table"))

for dict_row in result.mappings():
    x = dict_row["x"]
    y = dict_row["y"]
```

----------------------------------------

TITLE: Using func.now() in SQLAlchemy
DESCRIPTION: Illustrates how to use the func.now() object to generate a SQL function call for the current date and time. SQLAlchemy handles rendering this function appropriately for different database backends (e.g., CURRENT_TIMESTAMP for SQLite).
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/tutorial/data_select.rst#_snippet_81

LANGUAGE: Python
CODE:
```
stmt = select(func.now())
with engine.connect() as conn:
    result = conn.execute(stmt)
    print(result.all())
```

LANGUAGE: SQL
CODE:
```
BEGIN (implicit)
SELECT CURRENT_TIMESTAMP AS now_1
[...] ()
[(datetime.datetime(...),)]
ROLLBACK
```

----------------------------------------

TITLE: Define SQLAlchemy Models with @validates and Relationship - Python
DESCRIPTION: Defines two SQLAlchemy ORM models, `A` and `B`, with a one-to-many relationship. The `A` model includes a `@validates("bs")` method to convert incoming dictionaries into `B` instances for the `bs` collection during assignment or append operations.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_12.rst#_snippet_42

LANGUAGE: Python
CODE:
```
class A(Base):
    __tablename__ = "a"
    id = Column(Integer, primary_key=True)
    bs = relationship("B")

    @validates("bs")
    def convert_dict_to_b(self, key, value):
        return B(data=value["data"])


class B(Base):
    __tablename__ = "b"
    id = Column(Integer, primary_key=True)
    a_id = Column(ForeignKey("a.id"))
    data = Column(String)
```

----------------------------------------

TITLE: Deleting Items from a One-to-Many Collection with SQLAlchemy ORM
DESCRIPTION: Demonstrates how to build a DELETE expression targeting a specific range of items within a one-to-many collection associated with a parent object using SQLAlchemy's ORM expression syntax. It shows both the Python code for the expression and the resulting SQL DELETE statement.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/large_collections.rst#_snippet_21

LANGUAGE: python
CODE:
```
existing_account.account_transactions.delete().where(
    AccountTransaction.amount.between(0, 30)
)
```

LANGUAGE: sql
CODE:
```
DELETE FROM account_transaction WHERE ? = account_transaction.account_id
AND account_transaction.amount BETWEEN ? AND ? RETURNING id
```

----------------------------------------

TITLE: New Way: Chained Joined Load Nested Relationships (SQLAlchemy ORM Python)
DESCRIPTION: Demonstrates the new method using chained `joinedload` calls to explicitly apply joined loading to each link in a nested relationship path.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_09.rst#_snippet_30

LANGUAGE: Python
CODE:
```
query(User).options(joinedload("orders").joinedload("items").joinedload("keywords"))
```

----------------------------------------

TITLE: Setup for ORM Bulk Update by Primary Key
DESCRIPTION: Provides setup code for demonstrating ORM bulk update by primary key. It performs a bulk insert operation using session.execute with an insert statement and a list of dictionaries passed directly to execute, followed by a commit.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/queryguide/dml.rst#_snippet_18

LANGUAGE: Python
CODE:
```
session.rollback()
session.execute(
    insert(User),
    [
        {"name": "spongebob", "fullname": "Spongebob Squarepants"},
        {"name": "sandy", "fullname": "Sandy Cheeks"},
        {"name": "patrick", "fullname": "Patrick Star"},
        {"name": "squidward", "fullname": "Squidward Tentacles"},
        {"name": "ehkrabs", "fullname": "Eugene H. Krabs"}
    ]
)
session.commit()
session.connection()
```

----------------------------------------

TITLE: Filtered Collection Loading with contains_eager - SQLAlchemy Python
DESCRIPTION: Demonstrates how to use `contains_eager` in conjunction with a `filter` clause on the joined entity to load only a subset of related objects into a collection, also using `populate_existing` to refresh the collection.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/queryguide/relationships.rst#_snippet_40

LANGUAGE: python
CODE:
```
stmt = (
    select(User)
    .join(User.addresses)
    .filter(Address.email_address.like("%@aol.com"))
    .options(contains_eager(User.addresses))
    .execution_options(populate_existing=True)
)
```

----------------------------------------

TITLE: Configuring Engine Pool Size and Overflow in SQLAlchemy Python
DESCRIPTION: This snippet demonstrates how to configure a SQLAlchemy Engine object using the `create_engine` function, specifically setting the `pool_size` and `max_overflow` parameters. These parameters control the connection pool's behavior, limiting the total number of connections the application can hold to the database. `pool_size` sets the number of connections to keep open idle, while `max_overflow` sets the maximum number of additional connections that can be created when the pool is exhausted.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/errors.rst#_snippet_0

LANGUAGE: Python
CODE:
```
engine = create_engine("mysql+mysqldb://u:p@host/db", pool_size=10, max_overflow=20)
```

----------------------------------------

TITLE: Basic SQLAlchemy Lambda Statement with Conditional Logic
DESCRIPTION: Demonstrates creating a SQLAlchemy statement using `lambda_stmt` that includes a conditional WHERE clause. The lambda expression captures the `parameter` variable from the outer scope.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/core/connections.rst#_snippet_47

LANGUAGE: Python
CODE:
```
def my_stmt(parameter, thing=False):
    stmt = lambda_stmt(lambda: select(table))
    if thing:
        stmt += lambda s: s.where(table.c.x > parameter)
    else:
        stmt += lambda s: s.where(table.c.y == parameter)
    return stmt
```

----------------------------------------

TITLE: Joining with Relationship-Bound Attribute as ON Clause in SQLAlchemy ORM
DESCRIPTION: Illustrates using a `relationship`-bound attribute (`User.addresses`) as the ON clause when joining the `User` entity to the `Address` entity. This leverages the ORM relationship definition to generate the join condition.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/queryguide/select.rst#_snippet_24

LANGUAGE: Python
CODE:
```
stmt = select(User).join(Address, User.addresses)
```

LANGUAGE: SQL
CODE:
```
SELECT user_account.id, user_account.name, user_account.fullname
FROM user_account JOIN address ON user_account.id = address.user_id
```

----------------------------------------

TITLE: Creating INSERT statement with RETURNING in SQLAlchemy
DESCRIPTION: Demonstrates how to construct an INSERT statement using SQLAlchemy's `insert()` construct and explicitly specify columns to be returned using the `returning()` method. The resulting statement includes the RETURNING clause.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/tutorial/data_insert.rst#_snippet_10

LANGUAGE: Python
CODE:
```
insert_stmt = insert(address_table).returning(
    address_table.c.id, address_table.c.email_address
)
print(insert_stmt)
```

LANGUAGE: SQL
CODE:
```
INSERT INTO address (id, user_id, email_address)
VALUES (:id, :user_id, :email_address)
RETURNING address.id, address.email_address
```

----------------------------------------

TITLE: Install SQLAlchemy Asyncio Extra (Bash)
DESCRIPTION: Use this command to install the SQLAlchemy library including the `asyncio` extra. This ensures that necessary dependencies like `greenlet` are included, which is crucial for compatibility on platforms where pre-built wheels might not be available. Execute this in your terminal within your Python environment.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/faq/installation.rst#_snippet_0

LANGUAGE: bash
CODE:
```
pip install sqlalchemy[asyncio]
```

----------------------------------------

TITLE: Correct Ordering with Select.join in SQLAlchemy ORM
DESCRIPTION: This snippet demonstrates the correct way to order a query by a column in a related table (Address.email_address) by explicitly joining the table using Select.join. This ensures the necessary table alias is available in the SQL FROM clause for the ORDER BY clause.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/queryguide/relationships.rst#_snippet_23

LANGUAGE: Python
CODE:
```
from sqlalchemy import select
>>> stmt = (
    select(User)
    .join(User.addresses)
    .filter(User.name == "spongebob")
    .order_by(Address.email_address)
)
>>> result = session.scalars(stmt).unique().all()
```

LANGUAGE: SQL
CODE:
```
SELECT
    users.id AS users_id,
    users.name AS users_name,
    users.fullname AS users_fullname,
    users.nickname AS users_nickname
FROM users
JOIN addresses ON users.id = addresses.user_id
WHERE users.name = ?
ORDER BY addresses.email_address
```

----------------------------------------

TITLE: Bulk INSERT with render_nulls=True - SQLAlchemy Python
DESCRIPTION: Shows how to use the `render_nulls=True` execution option with `session.execute` to prevent SQLAlchemy from splitting bulk INSERT operations based on the presence of `None` values. This ensures all parameter dictionaries are sent in a single batch.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/queryguide/dml.rst#_snippet_6

LANGUAGE: Python
CODE:
```
session.execute(
    insert(User).execution_options(render_nulls=True),
    [
        {
            "name": "name_a",
            "fullname": "Employee A",
            "species": "Squid",
        },
        {
            "name": "name_b",
            "fullname": "Employee B",
            "species": "Squirrel",
        },
        {
            "name": "name_c",
            "fullname": "Employee C",
            "species": None,
        },
        {
            "name": "name_d",
            "fullname": "Employee D",
            "species": "Bluefish",
        },
    ],
)
```

LANGUAGE: SQL
CODE:
```
INSERT INTO user_account (name, fullname, species) VALUES (?, ?, ?)
[...] [('name_a', 'Employee A', 'Squid'), ('name_b', 'Employee B', 'Squirrel'), ('name_c', 'Employee C', None), ('name_d', 'Employee D', 'Bluefish')]
```

----------------------------------------

TITLE: Inspecting SQLAlchemy Mapped Class and Attributes (Python)
DESCRIPTION: This interactive Python snippet shows how to use the `inspect()` function to get information about a SQLAlchemy-mapped class (`User`). It demonstrates accessing the mapper object, inspecting columns, primary keys, attributes (`.attrs`), filtered attributes (`.column_attrs`, `.relationships`), and inspecting individual mapped attributes like `User.addresses`, showing how to navigate the inspection hierarchy.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_08.rst#_snippet_5

LANGUAGE: python
CODE:
```
class User(Base):
    __tablename__ = "user"
    id = Column(Integer, primary_key=True)
    name = Column(String)
    name_syn = synonym(name)
    addresses = relationship("Address")

# universal entry point is inspect()
b = inspect(User)

# b in this case is the Mapper
b

# Column namespace
b.columns.id

# mapper's perspective of the primary key
b.primary_key

# MapperProperties available from .attrs
b.attrs.keys()

# .column_attrs, .relationships, etc. filter this collection
b.column_attrs.keys()

list(b.relationships)

# they are also namespaces
b.column_attrs.id

b.relationships.addresses

# point inspect() at a mapped, class level attribute,
# returns the attribute itself
b = inspect(User.addresses)
b

# From here we can get the mapper:
b.mapper

# the parent inspector, in this case a mapper
b.parent
```

----------------------------------------

TITLE: Creating SQLAlchemy Subquery with Aggregate Count
DESCRIPTION: Demonstrates how to construct a SQLAlchemy `Subquery` object from a select statement. This subquery selects a count of addresses per user ID, grouping by `user_id` and labeling the count column 'count'.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/tutorial/data_select.rst#_snippet_47

LANGUAGE: Python
CODE:
```
subq = (
    select(func.count(address_table.c.id).label("count"), address_table.c.user_id)
    .group_by(address_table.c.user_id)
    .subquery()
)
```

----------------------------------------

TITLE: Joining with Explicit SQL Expression ON Clause in SQLAlchemy ORM
DESCRIPTION: Shows how to explicitly provide the ON clause for a join using a SQL expression (`User.id == Address.user_id`) when joining the `User` entity to the `Address` entity. This gives fine-grained control over the join condition.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/queryguide/select.rst#_snippet_23

LANGUAGE: Python
CODE:
```
stmt = select(User).join(Address, User.id == Address.user_id)
```

LANGUAGE: SQL
CODE:
```
SELECT user_account.id, user_account.name, user_account.fullname
FROM user_account JOIN address ON user_account.id = address.user_id
```

----------------------------------------

TITLE: Profiling Python Code Block with cProfile Context Manager - Python
DESCRIPTION: This Python context manager, `profiled`, provides an easy way to profile a block of code using the `cProfile` module. It enables profiling upon entering the `with` block and disables it upon exiting. It then processes the profiling statistics, sorts them by cumulative time, and prints the results to a string buffer, which is finally printed to the console. It requires `cProfile`, `io`, `pstats`, and `contextlib`.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/faq/performance.rst#_snippet_2

LANGUAGE: Python
CODE:
```
import cProfile
import io
import pstats
import contextlib


@contextlib.contextmanager
def profiled():
    pr = cProfile.Profile()
    pr.enable()
    yield
    pr.disable()
    s = io.StringIO()
    ps = pstats.Stats(pr, stream=s).sort_stats("cumulative")
    ps.print_stats()
    # uncomment this to see who's calling what
    # ps.print_callers()
    print(s.getvalue())
```

----------------------------------------

TITLE: Create ORM-annotated Select Statement (Python)
DESCRIPTION: This Python snippet demonstrates creating a SQLAlchemy Core `Select` object from an ORM-mapped class (`User`). It illustrates how ORM entities implicitly provide context to Core constructs, forming the basis of 'ORM-annotated' objects, as explained in the surrounding text.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/glossary.rst#_snippet_0

LANGUAGE: python
CODE:
```
>>> stmt = select(User)
```

----------------------------------------

TITLE: Applying ORM Defer Options (New Way) in Python
DESCRIPTION: Illustrates the new approach using chained defer calls on a single Load object targeting the parent path, simplifying the application of defer options to multiple columns.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_09.rst#_snippet_37

LANGUAGE: Python
CODE:
```
query(User).options(defaultload("orders").defer("description").defer("isopen"))
```

----------------------------------------

TITLE: Save-Update Cascade: Assigning Associated Parent to Child Scalar Attribute
DESCRIPTION: Illustrates that the `save-update` cascade is *not* bidirectional as of SQLAlchemy 2.0+. Assigning an associated `Order` object (`o1`) to the `Item.order` scalar attribute of an unassociated `Item` object (`i1`) does *not* automatically cascade the `Item` into the session, even though the object relationship is established.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/cascades.rst#_snippet_8

LANGUAGE: Python
CODE:
```
>>> i1 = Item()
>>> i1.order = o1
>>> i1 in order.items
True
>>> i1 in session
False
```

----------------------------------------

TITLE: Verifying Object Identity with Identity Map (Python)
DESCRIPTION: Demonstrates that the identity map ensures only a single Python object instance exists for a given database identity within a session. `session.get()` returns the same object if it's already loaded.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/tutorial/orm_data_manipulation.rst#_snippet_8

LANGUAGE: Python
CODE:
```
>>> some_squidward is squidward
True
```

----------------------------------------

TITLE: Configuring SQLAlchemy Relationship with Multiple Foreign Keys (Python)
DESCRIPTION: This snippet shows how to define two distinct relationships from the `Parent` class to the `Child` class, both referencing the `Child.id` primary key. It demonstrates the use of the `foreign_keys` argument within `relationship` to specify which local column corresponds to the relationship, eliminating the need for the more complex `primaryjoin` argument in this common scenario.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_08.rst#_snippet_0

LANGUAGE: python
CODE:
```
class Parent(Base):
    __tablename__ = "parent"
    id = Column(Integer, primary_key=True)
    child_id_one = Column(Integer, ForeignKey("child.id"))
    child_id_two = Column(Integer, ForeignKey("child.id"))

    child_one = relationship("Child", foreign_keys=child_id_one)
    child_two = relationship("Child", foreign_keys=child_id_two)


class Child(Base):
    __tablename__ = "child"
    id = Column(Integer, primary_key=True)
```

----------------------------------------

TITLE: Managing SQLAlchemy ORM Session and Transaction Scope with sessionmaker.begin()
DESCRIPTION: Demonstrates using the `sessionmaker.begin()` method as a context manager. This pattern combines the creation and scope management of the session with the initiation and scope management of a transaction, simplifying resource handling.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/session_transaction.rst#_snippet_6

LANGUAGE: Python
CODE:
```
with Session.begin() as session:
    session.add(some_object)
```

----------------------------------------

TITLE: Inferring Nullability with SQLAlchemy mapped_column() (Python)
DESCRIPTION: This example demonstrates how SQLAlchemy's mapped_column() infers column nullability based on Mapped annotations and primary_key parameter. Columns with primary_key=True or non-Optional Mapped types are NOT NULL, while Optional Mapped types result in NULL columns. This shows the default nullability behavior when nullable is not explicitly set.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/declarative_tables.rst#_snippet_20

LANGUAGE: Python
CODE:
```
from typing import Optional

from sqlalchemy.orm import DeclarativeBase
from sqlalchemy.orm import Mapped
from sqlalchemy.orm import mapped_column


class Base(DeclarativeBase):
    pass


class SomeClass(Base):
    __tablename__ = "some_table"

    # primary_key=True, therefore will be NOT NULL
    id: Mapped[int] = mapped_column(primary_key=True)

    # not Optional[], therefore will be NOT NULL
    data: Mapped[str]

    # Optional[], therefore will be NULL
    additional_info: Mapped[Optional[str]]
```

----------------------------------------

TITLE: Migrating aliased=True/from_joinpoint - SQLAlchemy 1.4/2.0 Core/ORM
DESCRIPTION: Provides the migration strategy for the deprecated `aliased=True` and `from_joinpoint` flags, using explicit `aliased` constructs and `of_type` with the `select` statement.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_20.rst#_snippet_81

LANGUAGE: Python
CODE:
```
n1 = aliased(Node)
n2 = aliased(Node)

q = (
    select(Node)
    .join(Node.children.of_type(n1))
    .where(n1.name == "some sub child")
    .join(n1.children.of_type(n2))
    .where(n2.name == "some sub child")
)
```

----------------------------------------

TITLE: ORM Models with Unmapped PEP 484 Annotations (Will Raise Error)
DESCRIPTION: Provides an example of SQLAlchemy ORM models using PEP 484 type annotations for relationships (List["Bar"], Foo) without the required Mapped container. This code demonstrates a pattern that will raise errors in SQLAlchemy 2.0 due to the new typing requirements for relationships.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_20.rst#_snippet_7

LANGUAGE: Python
CODE:
```
Base = declarative_base()


class Foo(Base):
    __tablename__ = "foo"

    id: int = Column(Integer, primary_key=True)

    # will raise
    bars: List["Bar"] = relationship("Bar", back_populates="foo")


class Bar(Base):
    __tablename__ = "bar"

    id: int = Column(Integer, primary_key=True)
    foo_id = Column(ForeignKey("foo.id"))

    # will raise
    foo: Foo = relationship(Foo, back_populates="bars", cascade="all")
```

----------------------------------------

TITLE: Joining Tables Using SQLAlchemy Relationship (Python)
DESCRIPTION: This Python snippet shows how to use a relationship attribute (`User.addresses`) within the `select.join` method. SQLAlchemy uses the relationship definition to automatically determine the correct ON clause for the JOIN between the `user_account` and `address` tables, simplifying query construction.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/tutorial/orm_related_objects.rst#_snippet_12

LANGUAGE: python
CODE:
```
print(select(Address.email_address).select_from(User).join(User.addresses))
```

----------------------------------------

TITLE: Triggering SQLAlchemy Invalid Identity Map Error (Python)
DESCRIPTION: Shows how attempting to iterate an unbuffered `Result` object obtained from a `Session` after the session has been closed (e.g., exiting a context manager) can lead to an `Object cannot be converted to 'persistent' state` error because the session's identity map is no longer valid.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/errors.rst#_snippet_33

LANGUAGE: Python
CODE:
```
# context manager creates new Session
with Session(engine) as session_obj:
    result = sess.execute(select(User).where(User.id == 7))

# context manager is closed, so session_obj above is closed, identity
# map is replaced

# iterating the result object can't associate the object with the
# Session, raises this error.
user = result.first()
```

----------------------------------------

TITLE: Triggering InvalidRequestError with lazy='raise_on_sql'
DESCRIPTION: Demonstrates that attempting to lazily load a relationship configured with `lazy="raise_on_sql"` results in an `sqlalchemy.exc.InvalidRequestError`. This enforces explicit loading strategies.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/tutorial/orm_related_objects.rst#_snippet_20

LANGUAGE: python
CODE:
```
# Assuming models with lazy="raise_on_sql" are defined and session is available
from sqlalchemy import select

u1 = session.execute(select(User)).scalars().first()
# Attempting lazy load will raise an error
u1.addresses
```

LANGUAGE: python
CODE:
```
Traceback (most recent call last):
...
sqlalchemy.exc.InvalidRequestError: 'User.addresses' is not available due to lazy='raise_on_sql'
```

LANGUAGE: sql
CODE:
```
SELECT user_account.id FROM user_account
-- Parameters: ()
```

----------------------------------------

TITLE: Including Non-Mapped Fields in Dataclasses Python
DESCRIPTION: Demonstrates how to include fields in a `MappedAsDataclass` that are part of the dataclass structure but are not mapped to database columns. Fields without the `Mapped` annotation are ignored by the ORM mapping process but remain part of the Python object's state.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/dataclasses.rst#_snippet_13

LANGUAGE: Python
CODE:
```
from sqlalchemy.orm import Mapped
from sqlalchemy.orm import mapped_column
from sqlalchemy.orm import registry

reg = registry()


@reg.mapped_as_dataclass
class Data:
    __tablename__ = "data"

    id: Mapped[int] = mapped_column(init=False, primary_key=True)
    status: Mapped[str]

    ctrl_one: Optional[str] = None
    ctrl_two: Optional[str] = None
```

----------------------------------------

TITLE: Creating PostgreSQL Engine with Escaped Password - Python
DESCRIPTION: Illustrates creating a SQLAlchemy Engine where special characters in the password (@ and /) are URL-encoded (%40 and %2F) within the connection URL string passed to create_engine.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/core/engines.rst#_snippet_2

LANGUAGE: Python
CODE:
```
from sqlalchemy import create_engine

engine = create_engine("postgresql+pg8000://dbuser:kx%40jj5%2Fg@pghost10/appdb")
```

----------------------------------------

TITLE: Executing Select for Scalar Results
DESCRIPTION: Demonstrates executing a select statement that returns a single column and retrieving all results as a sequence of scalar values. Requires an active connection and a column object.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/whatsnew_20.rst#_snippet_3

LANGUAGE: Python
CODE:
```
data = connection.execute(select(str_col)).scalars().all()
```

----------------------------------------

TITLE: Mapping Inherited Columns with use_existing_column (Python)
DESCRIPTION: Demonstrates how to map columns on inheriting subclasses in SQLAlchemy Declarative using mapped_column and the use_existing_column=True parameter to reuse a column defined on a superclass. Shows a base Employee class and inheriting Engineer and Manager classes sharing a start_date column.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/inheritance.rst#_snippet_7

LANGUAGE: Python
CODE:
```
from sqlalchemy import DateTime


class Employee(Base):
    __tablename__ = "employee"
    id: Mapped[int] = mapped_column(primary_key=True)
    name: Mapped[str]
    type: Mapped[str]

    __mapper_args__ = {
        "polymorphic_on": "type",
        "polymorphic_identity": "employee",
    }


class Engineer(Employee):
    __mapper_args__ = {
        "polymorphic_identity": "engineer",
    }

    start_date: Mapped[datetime] = mapped_column(
        nullable=True, use_existing_column=True
    )


class Manager(Employee):
    __mapper_args__ = {
        "polymorphic_identity": "manager",
    }

    start_date: Mapped[datetime] = mapped_column(
        nullable=True, use_existing_column=True
    )
```

----------------------------------------

TITLE: Explicit JOIN using join (Core)
DESCRIPTION: Demonstrates using the `join` method on a SQLAlchemy Core `select` statement, where the left side of the JOIN is inferred from the existing FROM clause. The ON clause is inferred based on foreign keys.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/tutorial/data_select.rst#_snippet_33

LANGUAGE: Python
CODE:
```
print(select(user_table.c.name, address_table.c.email_address).join(address_table))
```

LANGUAGE: SQL
CODE:
```
SELECT user_account.name, address.email_address
FROM user_account JOIN address ON user_account.id = address.user_id
```

----------------------------------------

TITLE: SQLAlchemy 1.4 / 2.0 Selecting Multiple Aliased Entities with Improved Labeling
DESCRIPTION: Demonstrates using aliased() with the 2.0-style select() construct to select multiple entities (User, Address) from a subquery. This example highlights the improved labeling feature in SQLAlchemy 1.4+ and 2.0, which automatically disambiguates columns with the same name from different tables without requiring explicit labeling.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_20.rst#_snippet_88

LANGUAGE: Python
CODE:
```
subq = select(User, Address).join(User.addresses).subquery()

ua = aliased(User, subq)
aa = aliased(Address, subq)

stmt = select(ua, aa).order_by(aa.email_address)
result = session.execute(stmt)
```

----------------------------------------

TITLE: Applying Naming Conventions to Constraints with declared_attr in SQLAlchemy Python
DESCRIPTION: This comprehensive example illustrates how to use SQLAlchemy's `declared_attr` with `__table_args__` in an abstract base class to apply naming conventions to constraints. It defines a `MetaData` object with a `naming_convention` dictionary and then uses `UniqueConstraint` and `CheckConstraint` within `__table_args__` to ensure unique, table-specific constraint names for inheriting models like `ModelAlpha` and `ModelBeta`.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/declarative_mixins.rst#_snippet_23

LANGUAGE: Python
CODE:
```
    from uuid import UUID

    from sqlalchemy import CheckConstraint
    from sqlalchemy import create_engine
    from sqlalchemy import MetaData
    from sqlalchemy import UniqueConstraint
    from sqlalchemy.orm import DeclarativeBase
    from sqlalchemy.orm import declared_attr
    from sqlalchemy.orm import Mapped
    from sqlalchemy.orm import mapped_column

    constraint_naming_conventions = {
        "ix": "ix_%(column_0_label)s",
        "uq": "uq_%(table_name)s_%(column_0_name)s",
        "ck": "ck_%(table_name)s_%(constraint_name)s",
        "fk": "fk_%(table_name)s_%(column_0_name)s_%(referred_table_name)s",
        "pk": "pk_%(table_name)s",
    }


    class Base(DeclarativeBase):
        metadata = MetaData(naming_convention=constraint_naming_conventions)


    class MyAbstractBase(Base):
        __abstract__ = True

        @declared_attr.directive
        def __table_args__(cls):
            return (
                UniqueConstraint("uuid"),
                CheckConstraint("x > 0 OR y < 100", name="xy_chk"),
            )

        id: Mapped[int] = mapped_column(primary_key=True)
        uuid: Mapped[UUID]
        x: Mapped[int]
        y: Mapped[int]


    class ModelAlpha(MyAbstractBase):
        __tablename__ = "alpha"


    class ModelBeta(MyAbstractBase):
        __tablename__ = "beta"
```

----------------------------------------

TITLE: Many-to-One Equals Comparison in SQLAlchemy ORM
DESCRIPTION: Demonstrates how to filter a query based on a many-to-one relationship by comparing the relationship attribute directly to a specific ORM object instance. This selects rows where the foreign key matches the primary key of the compared object.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/queryguide/select.rst#_snippet_43

LANGUAGE: Python
CODE:
```
user_obj = session.get(User, 1)
print(select(Address).where(Address.user == user_obj))
```

LANGUAGE: SQL
CODE:
```
SELECT address.id, address.user_id, address.email_address
FROM address
WHERE :param_1 = address.user_id
```

----------------------------------------

TITLE: Disabling Cascade Backrefs with Future Mode - SQLAlchemy ORM Python
DESCRIPTION: This snippet demonstrates how setting `future=True` on the `sessionmaker` (enabling 2.0-style behavior) disables the `cascade_backrefs` behavior. Assigning an object (`u1`) already in the session to a backref attribute (`a1.user = u1`) will *not* cascade the object (`a1`) on the other side of the relationship into the session. Requires SQLAlchemy 1.4+ and mapped classes with a bidirectional relationship. Input is a session configured with `future=True` and objects; output is the `a1` object *not* being added to the session.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_14.rst#_snippet_65

LANGUAGE: Python
CODE:
```
Session = sessionmaker(engine, future=True)

with Session() as session:
    u1 = User()
    session.add(u1)

    a1 = Address()
    a1.user = u1  # <--- will not add "a1" to the Session
```

----------------------------------------

TITLE: Executing Statements with Commit As You Go (SQLAlchemy)
DESCRIPTION: Demonstrates the 'commit as you go' transaction style using SQLAlchemy's Connection object. Statements are executed within a 'with' block, and the transaction is explicitly committed using `connection.commit()` after all desired operations are complete. A new transaction implicitly begins upon the next execution after a commit or rollback.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/core/connections.rst#_snippet_2

LANGUAGE: Python
CODE:
```
with engine.connect() as connection:
    connection.execute(some_table.insert(), {"x": 7, "y": "this is some data"})
    connection.execute(
        some_other_table.insert(), {"q": 8, "p": "this is some more data"}
    )

    connection.commit()  # commit the transaction
```

----------------------------------------

TITLE: Selecting Arbitrary Text using sqlalchemy.text (Python)
DESCRIPTION: Illustrates how to embed an arbitrary SQL text fragment representing a column expression into a SQLAlchemy `Select` statement using the `text()` construct. Executes the statement and prints all results. Requires `user_table` and `engine`.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/tutorial/data_select.rst#_snippet_15

LANGUAGE: Python
CODE:
```
from sqlalchemy import text
stmt = select(text("'some phrase'"), user_table.c.name).order_by(user_table.c.name)
with engine.connect() as conn:
    print(conn.execute(stmt).all())
```

----------------------------------------

TITLE: ORM Update with Custom WHERE Clause - Python
DESCRIPTION: Demonstrates how to perform an ORM-enabled update operation using session.execute with an update construct that includes a custom where clause and values for the update. This allows updating multiple rows based on arbitrary criteria, bypassing the primary key-based bulk update mechanism.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/queryguide/dml.rst#_snippet_24

LANGUAGE: Python
CODE:
```
from sqlalchemy import update
stmt = (
    update(User)
    .where(User.name.in_(["squidward", "sandy"]))
    .values(fullname="Name starts with S")
)
session.execute(stmt)
```

----------------------------------------

TITLE: Using index_property for JSON Attributes (Python)
DESCRIPTION: Defines a SQLAlchemy ORM class `Person` with an `id` and a `data` JSON column. It demonstrates using `index_property("data", "name")` to create a `name` attribute that reads/writes the "name" field within the `data` JSON column, simplifying access and ensuring change tracking.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_11.rst#_snippet_8

LANGUAGE: Python
CODE:
```
class Person(Base):
    __tablename__ = "person"

    id = Column(Integer, primary_key=True)
    data = Column(JSON)

    name = index_property("data", "name")
```

----------------------------------------

TITLE: Demonstrating Selectinload on Unexpire - SQLAlchemy ORM Python
DESCRIPTION: This snippet shows a SQLAlchemy query using `selectinload` for eager loading, followed by a commit that expires the object, and then access to an attribute that triggers a refresh. In SQLAlchemy 1.4+, secondary loaders like `selectinload` invoke the `immediateload` strategy during refresh, loading the related collection via a separate query. Requires SQLAlchemy ORM, mapped classes `A` and `B` with a relationship `A.bs`. Input is a session and query options; output is the object refreshed and its `bs` collection loaded via a separate query.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_14.rst#_snippet_68

LANGUAGE: Python
CODE:
```
a1 = session.query(A).options(selectinload(A.bs)).first()
a1.data = "new data"
session.commit()
a1.data
```

----------------------------------------

TITLE: Querying Base Class with Inline Polymorphic Load - Python
DESCRIPTION: This snippet demonstrates a basic SELECT query against the base `Employee` class when `polymorphic_load="inline"` is configured on subclasses. SQLAlchemy automatically generates a SQL query that LEFT OUTER JOINs the `engineer` and `manager` tables.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/queryguide/inheritance.rst#_snippet_32

LANGUAGE: Python
CODE:
```
print(select(Employee))
```

----------------------------------------

TITLE: Bypassing ORM Bulk Update PK Requirement via Connection - Python
DESCRIPTION: This snippet shows an alternative way to execute a bulk UPDATE statement without requiring primary key values in the parameters. It bypasses the ORM's per-row bulk update logic by acquiring the underlying database connection using `session.connection()` and executing the statement directly on the connection.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/errors.rst#_snippet_41

LANGUAGE: Python
CODE:
```
session.connection().execute(
    update(User).where(User.name == bindparam("u_name")),
    [
        {"u_name": "spongebob", "fullname": "Spongebob Squarepants"},
        {"u_name": "patrick", "fullname": "Patrick Star"},
    ],
)
```

----------------------------------------

TITLE: Querying Association Proxy with any (Python/SQL)
DESCRIPTION: Illustrates querying across an association proxy (`A.c_values`) using the `any` method with a specific condition (`value="x"`). The example includes both the Python query and the generated SQL, showing how SQLAlchemy constructs the necessary joins and subqueries to filter based on the associated collection's elements.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_12.rst#_snippet_18

LANGUAGE: pycon+sql
CODE:
```
>>> s.query(A).filter(A.c_values.any(value="x")).all()
{execsql}SELECT a.id AS a_id
FROM a
WHERE EXISTS (SELECT 1
FROM atob
WHERE a.id = atob.a_id AND (EXISTS (SELECT 1
FROM b
WHERE b.id = atob.b_id AND (EXISTS (SELECT 1
FROM c
WHERE b.id = c.b_id AND c.value = :value_1)))))
```

----------------------------------------

TITLE: Customizing Specific Enum Subtype Configuration in SQLAlchemy
DESCRIPTION: This code demonstrates how to apply specific configurations to a particular `enum.Enum` subtype within the `type_annotation_map`. It sets a custom string `length` of 50 and `native_enum=False` for the `Status` enum, allowing for tailored database column definitions for specific Python enum types.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/declarative_tables.rst#_snippet_52

LANGUAGE: Python
CODE:
```
import enum
import sqlalchemy
from sqlalchemy.orm import DeclarativeBase


class Status(enum.Enum):
    PENDING = "pending"
    RECEIVED = "received"
    COMPLETED = "completed"


class Base(DeclarativeBase):
    type_annotation_map = {
        Status: sqlalchemy.Enum(Status, length=50, native_enum=False)
    }
```

----------------------------------------

TITLE: Typing SQLAlchemy Select and Returning Insert Statements (Python)
DESCRIPTION: Illustrates how row-returning constructs like `select()` and `insert().returning()` are typed as `Tuple[]`, preserving the individual Python types of the selected or returned columns. This allows type checkers to understand the structure and types of the result rows.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/whatsnew_20.rst#_snippet_1

LANGUAGE: python
CODE:
```
# (variable) stmt: Select[Tuple[str, int]]
stmt = select(str_col, int_col)

# (variable) stmt: ReturningInsert[Tuple[str, int]]
ins_stmt = insert(table("t")).returning(str_col, int_col)
```

----------------------------------------

TITLE: Counting Objects with Legacy ORM Query
DESCRIPTION: Illustrates how to get a count of objects using the legacy ORM Query object's count() method. This method is replaced by using select(func.count()) with Session.scalar().
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_20.rst#_snippet_55

LANGUAGE: Python
CODE:
```
session.query(User).count()
```

----------------------------------------

TITLE: Defining ORM Mixins and Mapped Classes with DeclarativeBase
DESCRIPTION: This snippet illustrates how to define reusable ORM components using mixin classes (`CommonMixin`, `HasLogRecord`) and apply them to mapped entities (`LogRecord`, `MyModel`) with SQLAlchemy's `DeclarativeBase`. It showcases shared columns, table arguments, mapper arguments, and relationships, demonstrating how `declared_attr` directives facilitate dynamic attribute generation.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/declarative_mixins.rst#_snippet_0

LANGUAGE: Python
CODE:
```
from sqlalchemy import ForeignKey
from sqlalchemy.orm import declared_attr
from sqlalchemy.orm import DeclarativeBase
from sqlalchemy.orm import Mapped
from sqlalchemy.orm import mapped_column
from sqlalchemy.orm import relationship


class Base(DeclarativeBase):
    pass


class CommonMixin:
    """define a series of common elements that may be applied to mapped
    classes using this class as a mixin class."""

    @declared_attr.directive
    def __tablename__(cls) -> str:
        return cls.__name__.lower()

    __table_args__ = {"mysql_engine": "InnoDB"}
    __mapper_args__ = {"eager_defaults": True}

    id: Mapped[int] = mapped_column(primary_key=True)


class HasLogRecord:
    """mark classes that have a many-to-one relationship to the
    ``LogRecord`` class."""

    log_record_id: Mapped[int] = mapped_column(ForeignKey("logrecord.id"))

    @declared_attr
    def log_record(self) -> Mapped["LogRecord"]:
        return relationship("LogRecord")


class LogRecord(CommonMixin, Base):
    log_info: Mapped[str]


class MyModel(CommonMixin, HasLogRecord, Base):
    name: Mapped[str]
```

----------------------------------------

TITLE: Checking Instance Persistence State - Python
DESCRIPTION: Demonstrates how to check the boolean flags indicating the persistence state (persistent, transient, deleted, detached) of a mapped instance.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_08.rst#_snippet_19

LANGUAGE: python
CODE:
```
>>> b.persistent, b.transient, b.deleted, b.detached
```

----------------------------------------

TITLE: Incorrect Declarative Relationship with foreign_keys String List Python
DESCRIPTION: Demonstrates an incorrect way to specify the `foreign_keys` argument in a Declarative relationship using a list of strings. SQLAlchemy expects either a single string (which it evaluates) or a list of column objects.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/faq/ormconfiguration.rst#_snippet_10

LANGUAGE: Python
CODE:
```
# wrong !
foo = relationship(Dest, foreign_keys=["Dest.foo_id", "Dest.bar_id"])
```

----------------------------------------

TITLE: ORM Upsert (Insert or Update) with SQLite
DESCRIPTION: Illustrates an ORM upsert operation using the SQLite dialect's insert statement with on_conflict_do_update. A list of dictionaries provides data, and the conflict resolution updates the 'fullname' based on the excluded row's value.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/queryguide/dml.rst#_snippet_16

LANGUAGE: Python
CODE:
```
from sqlalchemy.dialects.sqlite import insert as sqlite_upsert
stmt = sqlite_upsert(User).values(
    [
        {"name": "spongebob", "fullname": "Spongebob Squarepants"},
        {"name": "sandy", "fullname": "Sandy Cheeks"},
        {"name": "patrick", "fullname": "Patrick Star"},
        {"name": "squidward", "fullname": "Squidward Tentacles"},
        {"name": "ehkrabs", "fullname": "Eugene H. Krabs"}
    ]
)
stmt = stmt.on_conflict_do_update(
    index_elements=[User.name], set_=dict(fullname=stmt.excluded.fullname)
)
session.execute(stmt)
```

LANGUAGE: SQL
CODE:
```
INSERT INTO user_account (name, fullname)
VALUES (?, ?), (?, ?), (?, ?), (?, ?), (?, ?)
ON CONFLICT (name) DO UPDATE SET fullname = excluded.fullname
```

----------------------------------------

TITLE: Using AsyncScopedSession Commit and Remove - Python
DESCRIPTION: This snippet illustrates the correct way to use an AsyncSession directly and through an async_scoped_session proxy, demonstrating the awaitable commit() and remove() methods of the scoped session to manage the context-local session.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/extensions/asyncio.rst#_snippet_8

LANGUAGE: Python
CODE:
```
async def some_function(some_async_session, some_object):
    # use the AsyncSession directly
    some_async_session.add(some_object)

    # use the AsyncSession via the context-local proxy
    await AsyncScopedSession.commit()

    # "remove" the current proxied AsyncSession for the local context
    await AsyncScopedSession.remove()
```

----------------------------------------

TITLE: Defining SQLAlchemy Update with Returning Clause - Python
DESCRIPTION: This snippet demonstrates how to build an SQLAlchemy `Update` construct using the fluent API. It filters rows by name, sets a new column value, and includes a `returning` clause to select specific columns (`id` and `name`) from the modified rows.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/tutorial/data_update.rst#_snippet_10

LANGUAGE: Python
CODE:
```
update_stmt = (
    update(user_table)
    .where(user_table.c.name == "patrick")
    .values(fullname="Patrick the Star")
    .returning(user_table.c.id, user_table.c.name)
)
```

----------------------------------------

TITLE: Creating Schema with MetaData Core (Python/SQL)
DESCRIPTION: Demonstrates invoking the `metadata_obj.create_all(engine)` method to generate and execute DDL statements (like CREATE TABLE) for all tables defined in the MetaData object. The output shows the Python call followed by the SQL statements executed against the database, including PRAGMA checks and CREATE TABLE statements.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/tutorial/metadata.rst#_snippet_6

LANGUAGE: pycon+sql
CODE:
```
>>> metadata_obj.create_all(engine)
{execsql}BEGIN (implicit)
PRAGMA main.table_...info("user_account")
...
PRAGMA main.table_...info("address")
...
CREATE TABLE user_account (
    id INTEGER NOT NULL,
    name VARCHAR(30),
    fullname VARCHAR,
    PRIMARY KEY (id)
)
...
CREATE TABLE address (
    id INTEGER NOT NULL,
    user_id INTEGER NOT NULL,
    email_address VARCHAR NOT NULL,
    PRIMARY KEY (id),
    FOREIGN KEY(user_id) REFERENCES user_account (id)
)
...
COMMIT
```

----------------------------------------

TITLE: Adding Calculated Property to SQLAlchemy Mapped Class
DESCRIPTION: Defines a SQLAlchemy Declarative mapped class `Point` and adds an attribute `x_plus_y` implemented as a Python `@property`. This property dynamically calculates its value (`self.x + self.y`) whenever it's accessed, providing a simple way to expose derived or computed state on a mapped object without needing to store it in the database or initialize it upon loading.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/mapping_styles.rst#_snippet_7

LANGUAGE: Python
CODE:
```
class Point(Base):
    __tablename__ = "point"
    id: Mapped[int] = mapped_column(primary_key=True)
    x: Mapped[int]
    y: Mapped[int]

    @property
    def x_plus_y(self):
        return self.x + self.y
```

----------------------------------------

TITLE: Inline Hybrid Declarative Table Definition
DESCRIPTION: This snippet shows a more concise, inline way to define a `sqlalchemy.Table` object directly within a declarative class's `__table__` attribute. It's a shorthand for the hybrid declarative mapping, where the table definition is embedded directly into the class, making the association clear and compact.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/declarative_tables.rst#_snippet_56

LANGUAGE: Python
CODE:
```
class User(Base):
    __table__ = Table(
        "user",
        Base.metadata,
```

----------------------------------------

TITLE: Example of Optimistic Disconnect Handling in SQLAlchemy (Python)
DESCRIPTION: Shows how SQLAlchemy automatically handles disconnects during an operation when pessimistic ping is not used. It demonstrates catching `exc.DBAPIError` and checking the `connection_invalidated` attribute. Upon detection, the engine/pool invalidates the pool, and subsequent connection checkouts get fresh connections. Requires `sqlalchemy.create_engine` and `sqlalchemy.exc`. Note: The provided code snippet uses `text` which may require an additional import from `sqlalchemy`.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/core/pooling.rst#_snippet_8

LANGUAGE: Python
CODE:
```
from sqlalchemy import create_engine, exc

e = create_engine(...)
c = e.connect()

try:
    # suppose the database has been restarted.
    c.execute(text("SELECT * FROM table"))
    c.close()
except exc.DBAPIError as e:
    # an exception is raised, Connection is invalidated.
    if e.connection_invalidated:
        print("Connection was invalidated!")

# after the invalidate event, a new connection
# starts with a new Pool
c = e.connect()
c.execute(text("SELECT * FROM table"))
```

----------------------------------------

TITLE: Select from Text Statement (SQLAlchemy 2.0)
DESCRIPTION: Shows the 2.0 approach for fetching objects by selecting directly from a raw SQL text statement using `select` with `.from_statement(text(...))` and fetching all scalar results. Requires a configured SQLAlchemy session, mapped User class, and the `select` and `text` functions.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_20.rst#_snippet_50

LANGUAGE: Python
CODE:
```
session.scalars(
  select(User).
  from_statement(
    text("select * from users")
  )
).all()
```

----------------------------------------

TITLE: Overriding Python Nullability with Annotated Types in SQLAlchemy
DESCRIPTION: This snippet illustrates how `typing.Optional` can be used with `Annotated` types to control Python-level nullability independently of the database's `NULL`/`NOT NULL` setting. Even though `timestamp` is defined as `nullable=False` at the database level, `Mapped[Optional[timestamp]]` makes the Python type hint `Optional`.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/declarative_tables.rst#_snippet_40

LANGUAGE: Python
CODE:
```
from typing_extensions import Annotated

import datetime
from typing import Optional

from sqlalchemy.orm import DeclarativeBase

timestamp = Annotated[
    datetime.datetime,
    mapped_column(nullable=False),
]


class Base(DeclarativeBase):
    pass


class SomeClass(Base):
        # ...

        # pep-484 type will be Optional, but column will be
        # NOT NULL
        created_at: Mapped[Optional[timestamp]]
```

----------------------------------------

TITLE: Deleting from Many-to-Many Secondary Table via Collection Removal
DESCRIPTION: This snippet shows how to remove a row from the 'secondary' table in a many-to-many relationship. By removing an object from the `children` collection of a `Parent` instance, SQLAlchemy ORM automatically handles the deletion of the corresponding row in the secondary table upon flushing the session.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/basic_relationships.rst#_snippet_17

LANGUAGE: Python
CODE:
```
# row will be deleted from the "secondary" table
# automatically
myparent.children.remove(somechild)
```

----------------------------------------

TITLE: Applying Deferred Loading to an Imperative Table Column
DESCRIPTION: This snippet demonstrates how to configure deferred loading for a specific column ('bio') when using SQLAlchemy's imperative table mapping. By wrapping 'user_table.c.bio' with 'deferred()', the 'bio' column will not be loaded by default when a User object is queried, but only when the User.bio attribute is explicitly accessed, optimizing initial query performance.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/declarative_tables.rst#_snippet_61

LANGUAGE: Python
CODE:
```
from sqlalchemy.orm import deferred

    user_table = Table(
        "user",
        Base.metadata,
        Column("id", Integer, primary_key=True),
        Column("name", String),
        Column("bio", Text),
    )


    class User(Base):
        __table__ = user_table

        bio = deferred(user_table.c.bio)
```

----------------------------------------

TITLE: Creating SQLAlchemy MySQL Engine with URL Query Args (Python)
DESCRIPTION: Initializes a SQLAlchemy engine using a database URL. This example shows how to pass simple DBAPI connection arguments like `charset` directly in the URL's query string for dialects that support it. The dialect parses these arguments and passes them to the underlying DBAPI `connect()` method.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/core/engines.rst#_snippet_10

LANGUAGE: python
CODE:
```
engine = create_engine("mysql+pymysql://user:pass@host/test?charset=utf8mb4")
```

----------------------------------------

TITLE: Using InitVar and PostInit with Mapped Dataclasses Python
DESCRIPTION: Shows how to leverage Dataclasses' `InitVar` and `__post_init__` features within a mapped class. `InitVar` fields receive data during initialization but are not stored on the instance, allowing `__post_init__` to use them, for example, to calculate and set a mapped field like a password hash.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/dataclasses.rst#_snippet_14

LANGUAGE: Python
CODE:
```
from dataclasses import InitVar
from typing import Optional

from sqlalchemy.orm import Mapped
from sqlalchemy.orm import mapped_column
from sqlalchemy.orm import registry

reg = registry()


@reg.mapped_as_dataclass
class User:
    __tablename__ = "user_account"

    id: Mapped[int] = mapped_column(init=False, primary_key=True)
    name: Mapped[str]

    password: InitVar[str]
    repeat_password: InitVar[str]

    password_hash: Mapped[str] = mapped_column(init=False, nullable=False)

    def __post_init__(self, password: str, repeat_password: str):
        if password != repeat_password:
            raise ValueError("passwords do not match")

        self.password_hash = your_crypt_function_here(password)
```

----------------------------------------

TITLE: SQLAlchemy column_property with Many-to-Many Join (Python)
DESCRIPTION: Illustrates how to count related items in a many-to-many relationship using `column_property` and a correlated subquery. It specifically shows how to use `sqlalchemy.sql.expression.and_` to join the association table columns to both participant tables.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/mapped_sql_expr.rst#_snippet_7

LANGUAGE: Python
CODE:
```
from sqlalchemy import and_


class Author(Base):
    # ...

    book_count = column_property(
        select(func.count(books.c.id))
        .where(
            and_(
                book_authors.c.author_id == authors.c.id,
                book_authors.c.book_id == books.c.id,
            )
        )
        .scalar_subquery()
    )
```

----------------------------------------

TITLE: Correct Declarative Relationship with Object and_ Expression Python
DESCRIPTION: Shows another correct way to define a Declarative relationship with a complex join condition using `and_()` by passing actual object references (like `MyClass.id`, `Dest.foo_id`) to the `and_()` function. This avoids string evaluation and directly uses mapped attributes.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/faq/ormconfiguration.rst#_snippet_9

LANGUAGE: Python
CODE:
```
class MyClass(Base):
    # ....

    foo = relationship(
        Dest, primaryjoin=and_(MyClass.id == Dest.foo_id, MyClass.foo == Dest.bar)
    )
```

----------------------------------------

TITLE: Mapping Many-to-Many Relationship Python
DESCRIPTION: Defines SQLAlchemy ORM classes for Employee and Project, showing how to map a many-to-many relationship using `relationship` with the `secondary` argument pointing to a `Table` definition for the association table, and includes a backref.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/glossary.rst#_snippet_23

LANGUAGE: python
CODE:
```
class Employee(Base):
    __tablename__ = "employee"

    id = Column(Integer, primary_key=True)
    name = Column(String(30))

    projects = relationship(
        "Project",
        secondary=Table(
            "employee_project",
            Base.metadata,
            Column("employee_id", Integer, ForeignKey("employee.id"), primary_key=True),
            Column("project_id", Integer, ForeignKey("project.id"), primary_key=True),
        ),
        backref="employees",
    )


class Project(Base):
    __tablename__ = "project"

    id = Column(Integer, primary_key=True)
    name = Column(String(30))
```

----------------------------------------

TITLE: Controlling Select Correlation with correlate_except in ORM
DESCRIPTION: Shows how the `select.correlate_except()` method can be used within an ORM `column_property`. This allows a subquery to correlate with surrounding tables by default, but explicitly exclude correlation with a specific selectable (the `SnortEvent` table in this example).
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_08.rst#_snippet_38

LANGUAGE: Python
CODE:
```
class SnortEvent(Base):
    __tablename__ = "event"

    id = Column(Integer, primary_key=True)
    signature = Column(Integer, ForeignKey("signature.id"))

    signatures = relationship("Signature", lazy=False)


class Signature(Base):
    __tablename__ = "signature"

    id = Column(Integer, primary_key=True)

    sig_count = column_property(
        select([func.count("*")])
        .where(SnortEvent.signature == id)
        .correlate_except(SnortEvent)
    )
```

----------------------------------------

TITLE: SQLAlchemy Composite Key Mapping Example
DESCRIPTION: Defines SQLAlchemy ORM classes Magazine, Article, and Writer with composite primary keys and multiple relationships involving shared columns (magazine_id), illustrating a common conflict scenario where Article.magazine_id is involved in two relationships.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/join_conditions.rst#_snippet_13

LANGUAGE: python
CODE:
```
class Magazine(Base):
    __tablename__ = "magazine"

    id = mapped_column(Integer, primary_key=True)


class Article(Base):
    __tablename__ = "article"

    article_id = mapped_column(Integer)
    magazine_id = mapped_column(ForeignKey("magazine.id"))
    writer_id = mapped_column()

    magazine = relationship("Magazine")
    writer = relationship("Writer")

    __table_args__ = (
        PrimaryKeyConstraint("article_id", "magazine_id"),
        ForeignKeyConstraint(
            ["writer_id", "magazine_id"], ["writer.id", "writer.magazine_id"]
        ),
    )


class Writer(Base):
    __tablename__ = "writer"

    id = mapped_column(Integer, primary_key=True)
    magazine_id = mapped_column(ForeignKey("magazine.id"), primary_key=True)
    magazine = relationship("Magazine")
```

----------------------------------------

TITLE: Joining Relationship with Aliased Target using of_type - SQLAlchemy ORM Python
DESCRIPTION: Demonstrates joining a relationship (`User.addresses`) multiple times to different aliases of the target entity (`Address`) using the `of_type` modifier. This allows filtering based on conditions applied to each specific alias of the joined entity.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/queryguide/select.rst#_snippet_27

LANGUAGE: Python
CODE:
```
print(
    select(User)
    .join(User.addresses.of_type(address_alias_1))
    .where(address_alias_1.email_address == "patrick@aol.com")
    .join(User.addresses.of_type(address_alias_2))
    .where(address_alias_2.email_address == "patrick@gmail.com")
)
```

LANGUAGE: SQL
CODE:
```
SELECT user_account.id, user_account.name, user_account.fullname
FROM user_account
JOIN address AS address_1 ON user_account.id = address_1.user_id
JOIN address AS address_2 ON user_account.id = address_2.user_id
WHERE address_1.email_address = :email_address_1
AND address_2.email_address = :email_address_2
```

----------------------------------------

TITLE: Updating ORM Objects with RETURNING in SQLAlchemy
DESCRIPTION: Demonstrates how to use the `returning()` method with an ORM-enabled UPDATE statement in SQLAlchemy. This allows fetching the updated ORM objects directly after the update operation, compatible with the 'fetch' synchronization strategy.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/queryguide/dml.rst#_snippet_28

LANGUAGE: Python
CODE:
```
>>> from sqlalchemy import update
>>> stmt = (
...     update(User)
...     .where(User.name == "squidward")
...     .values(fullname="Squidward Tentacles")
...     .returning(User)
... )
>>> result = session.scalars(stmt)
```

----------------------------------------

TITLE: Mapping Imperative Table Columns to Alternate Attribute Names
DESCRIPTION: This snippet illustrates how to map existing SQLAlchemy Column objects from an imperatively defined Table to different attribute names within a mapped class. The User class's 'id' and 'name' attributes are directly assigned to 'user_table.c.user_id' and 'user_table.c.user_name' respectively, allowing the ORM to refer to the underlying columns via these new attribute names.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/declarative_tables.rst#_snippet_59

LANGUAGE: Python
CODE:
```
user_table = Table(
        "user",
        Base.metadata,
        Column("user_id", Integer, primary_key=True),
        Column("user_name", String),
    )


    class User(Base):
        __table__ = user_table

        id = user_table.c.user_id
        name = user_table.c.user_name
```

----------------------------------------

TITLE: Save-Update Cascade: Adding Child to Existing Parent
DESCRIPTION: Demonstrates the `save-update` cascade when a new child object (`address3`) is associated with a parent object (`user1`) that is already in a `Session`. The new child object is automatically added to the same session.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/cascades.rst#_snippet_3

LANGUAGE: Python
CODE:
```
>>> address3 = Address()
>>> user1.addresses.append(address3)
>>> address3 in sess
True
```

----------------------------------------

TITLE: Adding Global Criteria to ORM SELECTs - SQLAlchemy Python
DESCRIPTION: This code illustrates adding a global filtering criterion to all ORM SELECT statements using the `SessionEvents.do_orm_execute` event and the `with_loader_criteria` option. The listener checks if the execution state represents a main SELECT (excluding column/relationship loads) before applying the criteria to the statement options. Requires SQLAlchemy ORM components like `sessionmaker` and `with_loader_criteria`.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/session_events.rst#_snippet_1

LANGUAGE: Python
CODE:
```
    from sqlalchemy.orm import with_loader_criteria

    Session = sessionmaker(engine)


    @event.listens_for(Session, "do_orm_execute")
    def _do_orm_execute(orm_execute_state):
        if (
            orm_execute_state.is_select
            and not orm_execute_state.is_column_load
            and not orm_execute_state.is_relationship_load
        ):
            orm_execute_state.statement = orm_execute_state.statement.options(
                with_loader_criteria(MyEntity.public == True)
            )
```

----------------------------------------

TITLE: SQLAlchemy ORM: Filter with Relationship any()
DESCRIPTION: Demonstrates using the `relationship.any()` method in a `where` clause for a one-to-many relationship (`User.addresses`). This generates a SQL EXISTS subquery to find parent objects (Users) that have at least one related child (Address) matching the provided criteria.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/queryguide/select.rst#_snippet_40

LANGUAGE: Python
CODE:
```
>>> stmt = select(User.fullname).where(
...     User.addresses.any(Address.email_address == "squirrel@squirrelpower.org")
... )
>>> session.execute(stmt).all()
```

LANGUAGE: SQL
CODE:
```
SELECT user_account.fullname
FROM user_account
WHERE EXISTS (SELECT 1
FROM address
WHERE user_account.id = address.user_id AND address.email_address = ?)
```